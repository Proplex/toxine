// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// The Module object: Our interface to the outside world. We import
// and export values on it, and do the work to get that through
// closure compiler if necessary. There are various ways Module can be used:
// 1. Not defined. We create it here
// 2. A function parameter, function(Module) { ..generated code.. }
// 3. pre-run appended it, var Module = {}; ..generated code..
// 4. External script tag defines var Module.
// We need to do an eval in order to handle the closure compiler
// case, where this code here is minified but Module was defined
// elsewhere (e.g. case 4 above). We also need to check if Module
// already exists (e.g. case 3 above).
// Note that if you want to run closure, and also to use Module
// after the generated code, you will need to define   var Module = {};
// before the code. Then that object will be used in the code, and you
// can continue to use Module afterwards as well.
var Module;
if (!Module) Module = (typeof Module !== 'undefined' ? Module : null) || {};

// Sometimes an existing Module object exists with properties
// meant to overwrite the default module functionality. Here
// we collect those properties and reapply _after_ we configure
// the current environment's defaults to avoid having to be so
// defensive during initialization.
var moduleOverrides = {};
for (var key in Module) {
  if (Module.hasOwnProperty(key)) {
    moduleOverrides[key] = Module[key];
  }
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object' && typeof require === 'function';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  if (!Module['print']) Module['print'] = function print(x) {
    process['stdout'].write(x + '\n');
  };
  if (!Module['printErr']) Module['printErr'] = function printErr(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function read(filename, binary) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename);
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename);
    }
    if (ret && !binary) ret = ret.toString();
    return ret;
  };

  Module['readBinary'] = function readBinary(filename) { return Module['read'](filename, true) };

  Module['load'] = function load(f) {
    globalEval(read(f));
  };

  Module['arguments'] = process['argv'].slice(2);

  module['exports'] = Module;
}
else if (ENVIRONMENT_IS_SHELL) {
  if (!Module['print']) Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function read() { throw 'no read() available (jsc?)' };
  }

  Module['readBinary'] = function readBinary(f) {
    return read(f, 'binary');
  };

  if (typeof scriptArgs != 'undefined') {
    Module['arguments'] = scriptArgs;
  } else if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  this['Module'] = Module;

  eval("if (typeof gc === 'function' && gc.toString().indexOf('[native code]') > 0) var gc = undefined"); // wipe out the SpiderMonkey shell 'gc' function, which can confuse closure (uses it as a minified name, and it is then initted to a non-falsey value unexpectedly)
}
else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function read(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (typeof arguments != 'undefined') {
    Module['arguments'] = arguments;
  }

  if (typeof console !== 'undefined') {
    if (!Module['print']) Module['print'] = function print(x) {
      console.log(x);
    };
    if (!Module['printErr']) Module['printErr'] = function printErr(x) {
      console.log(x);
    };
  } else {
    // Probably a worker, and without console.log. We can do very little here...
    var TRY_USE_DUMP = false;
    if (!Module['print']) Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  if (ENVIRONMENT_IS_WEB) {
    window['Module'] = Module;
  } else {
    Module['load'] = importScripts;
  }
}
else {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function load(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
Module['preRun'] = [];
Module['postRun'] = [];

// Merge back in the overrides
for (var key in moduleOverrides) {
  if (moduleOverrides.hasOwnProperty(key)) {
    Module[key] = moduleOverrides[key];
  }
}



// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      return '(((' +target + ')+' + (quantum-1) + ')&' + -quantum + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (isArrayType(type)) return true;
  if (/<?\{ ?[^}]* ?\}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type) {
    switch (type) {
      case 'i1': case 'i8': return 1;
      case 'i16': return 2;
      case 'i32': return 4;
      case 'i64': return 8;
      case 'float': return 4;
      case 'double': return 8;
      default: {
        if (type[type.length-1] === '*') {
          return Runtime.QUANTUM_SIZE; // A pointer
        } else if (type[0] === 'i') {
          var bits = parseInt(type.substr(1));
          assert(bits % 8 === 0);
          return bits/8;
        } else {
          return 0;
        }
      }
    }
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  STACK_ALIGN: 8,
  getAlignSize: function (type, size, vararg) {
    // we align i64s and doubles on 64-bit boundaries, unlike x86
    if (vararg) return 8;
    if (!vararg && (type == 'i64' || type == 'double')) return 8;
    if (!type) return Math.min(size, 8); // align structures internally to 64 bits
    return Math.min(size || (type ? Runtime.getNativeFieldSize(type) : 0), Runtime.QUANTUM_SIZE);
  },
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    var index = 0;
    type.flatIndexes = type.fields.map(function(field) {
      index++;
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = Runtime.getAlignSize(field, size);
      } else if (Runtime.isStructType(field)) {
        if (field[1] === '0') {
          // this is [0 x something]. When inside another structure like here, it must be at the end,
          // and it adds no size
          // XXX this happens in java-nbody for example... assert(index === type.fields.length, 'zero-length in the middle!');
          size = 0;
          if (Types.types[field]) {
            alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
          } else {
            alignSize = type.alignSize || QUANTUM_SIZE;
          }
        } else {
          size = Types.types[field].flatSize;
          alignSize = Runtime.getAlignSize(null, Types.types[field].alignSize);
        }
      } else if (field[0] == 'b') {
        // bN, large number field, like a [N x i8]
        size = field.substr(1)|0;
        alignSize = 1;
      } else if (field[0] === '<') {
        // vector type
        size = alignSize = Types.types[field].flatSize; // fully aligned
      } else if (field[0] === 'i') {
        // illegal integer field, that could not be legalized because it is an internal structure field
        // it is ok to have such fields, if we just use them as markers of field size and nothing more complex
        size = alignSize = parseInt(field.substr(1))/8;
        assert(size % 1 === 0, 'cannot handle non-byte-size field ' + field);
      } else {
        assert(false, 'invalid type for calculateStructAlignment');
      }
      if (type.packed) alignSize = 1;
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    if (type.name_ && type.name_[0] === '[') {
      // arrays have 2 elements, so we get the proper difference. then we scale here. that way we avoid
      // allocating a potentially huge array for [999999 x i8] etc.
      type.flatSize = parseInt(type.name_.substr(1))*type.flatSize/2;
    }
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  dynCall: function (sig, ptr, args) {
    if (args && args.length) {
      assert(args.length == sig.length-1);
      return FUNCTION_TABLE[ptr].apply(null, args);
    } else {
      assert(sig.length == 1);
      return FUNCTION_TABLE[ptr]();
    }
  },
  addFunction: function (func) {
    var table = FUNCTION_TABLE;
    var ret = table.length;
    assert(ret % 2 === 0);
    table.push(func);
    for (var i = 0; i < 2-1; i++) table.push(0);
    return ret;
  },
  removeFunction: function (index) {
    var table = FUNCTION_TABLE;
    table[index] = null;
  },
  getAsmConst: function (code, numArgs) {
    // code is a constant string on the heap, so we can cache these
    if (!Runtime.asmConstCache) Runtime.asmConstCache = {};
    var func = Runtime.asmConstCache[code];
    if (func) return func;
    var args = [];
    for (var i = 0; i < numArgs; i++) {
      args.push(String.fromCharCode(36) + i); // $0, $1 etc
    }
    var source = Pointer_stringify(code);
    if (source[0] === '"') {
      // tolerate EM_ASM("..code..") even though EM_ASM(..code..) is correct
      if (source.indexOf('"', 1) === source.length-1) {
        source = source.substr(1, source.length-2);
      } else {
        // something invalid happened, e.g. EM_ASM("..code($0)..", input)
        abort('invalid EM_ASM input |' + source + '|. Please use EM_ASM(..code..) (no quotes) or EM_ASM({ ..code($0).. }, input) (to input values)');
      }
    }
    try {
      var evalled = eval('(function(' + args.join(',') + '){ ' + source + ' })'); // new Function does not allow upvars in node
    } catch(e) {
      Module.printErr('error in executing inline EM_ASM code: ' + e + ' on: \n\n' + source + '\n\nwith args |' + args + '| (make sure to use the right one out of EM_ASM, EM_ASM_ARGS, etc.)');
      throw e;
    }
    return Runtime.asmConstCache[code] = evalled;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func, sig) {
    assert(sig);
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function dynCall_wrapper() {
        return Runtime.dynCall(sig, func, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xFF;

      if (buffer.length == 0) {
        if ((code & 0x80) == 0x00) {        // 0xxxxxxx
          return String.fromCharCode(code);
        }
        buffer.push(code);
        if ((code & 0xE0) == 0xC0) {        // 110xxxxx
          needed = 1;
        } else if ((code & 0xF0) == 0xE0) { // 1110xxxx
          needed = 2;
        } else {                            // 11110xxx
          needed = 3;
        }
        return '';
      }

      if (needed) {
        buffer.push(code);
        needed--;
        if (needed > 0) return '';
      }

      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var c4 = buffer[3];
      var ret;
      if (buffer.length == 2) {
        ret = String.fromCharCode(((c1 & 0x1F) << 6)  | (c2 & 0x3F));
      } else if (buffer.length == 3) {
        ret = String.fromCharCode(((c1 & 0x0F) << 12) | ((c2 & 0x3F) << 6)  | (c3 & 0x3F));
      } else {
        // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae
        var codePoint = ((c1 & 0x07) << 18) | ((c2 & 0x3F) << 12) |
                        ((c3 & 0x3F) << 6)  | (c4 & 0x3F);
        ret = String.fromCharCode(
          Math.floor((codePoint - 0x10000) / 0x400) + 0xD800,
          (codePoint - 0x10000) % 0x400 + 0xDC00);
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function processJSString(string) {
      /* TODO: use TextEncoder when present,
        var encoder = new TextEncoder();
        encoder['encoding'] = "utf-8";
        var utf8Array = encoder['encode'](aMsg.data);
      */
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  getCompilerSetting: function (name) {
    throw 'You must build with -s RETAIN_COMPILER_SETTINGS=1 for Runtime.getCompilerSetting or emscripten_get_compiler_setting to work';
  },
  stackAlloc: function (size) { var ret = STACKTOP;STACKTOP = (STACKTOP + size)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0); return ret; },
  staticAlloc: function (size) { var ret = STATICTOP;STATICTOP = (STATICTOP + (assert(!staticSealed),size))|0;STATICTOP = (((STATICTOP)+7)&-8); return ret; },
  dynamicAlloc: function (size) { var ret = DYNAMICTOP;DYNAMICTOP = (DYNAMICTOP + (assert(DYNAMICTOP > 0),size))|0;DYNAMICTOP = (((DYNAMICTOP)+7)&-8); if (DYNAMICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function (size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 8))*(quantum ? quantum : 8); return ret; },
  makeBigInt: function (low,high,unsigned) { var ret = (unsigned ? ((low>>>0)+((high>>>0)*4294967296)) : ((low>>>0)+((high|0)*4294967296))); return ret; },
  GLOBAL_BASE: 8,
  QUANTUM_SIZE: 4,
  __dummy__: 0
}


Module['Runtime'] = Runtime;









//========================================
// Runtime essentials
//========================================

var __THREW__ = 0; // Used in checking for thrown exceptions.
var setjmpId = 1; // Used in setjmp/longjmp
var setjmpLabels = {};

var ABORT = false; // whether we are quitting the application. no code should run after this. set in exit() and abort()
var EXITSTATUS = 0;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD, tempDouble, tempFloat;
var tempI64, tempI64b;
var tempRet0, tempRet1, tempRet2, tempRet3, tempRet4, tempRet5, tempRet6, tempRet7, tempRet8, tempRet9;

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Closure can also do so. To avoid that, add your function to
//       the exports using something like
//
//         -s EXPORTED_FUNCTIONS='["_main", "_myfunc"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays; note that arrays are 8-bit).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  return ccallFunc(getCFunc(ident), returnType, argTypes, args);
}
Module["ccall"] = ccall;

// Returns the C function with a specified identifier (for C++, you need to do manual name mangling)
function getCFunc(ident) {
  try {
    var func = Module['_' + ident]; // closure exported function
    if (!func) func = eval('_' + ident); // explicit lookup
  } catch(e) {
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  return func;
}

// Internal function that does a C call using a function, not an identifier
function ccallFunc(func, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      value = intArrayFromString(value);
      type = 'array';
    }
    if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  var func = getCFunc(ident);
  return function() {
    return ccallFunc(func, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,(tempDouble=value,Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': HEAPF64[((ptr)>>3)]=value; break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return HEAPF64[((ptr)>>3)];
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
var ALLOC_DYNAMIC = 3; // Cannot be freed except through sbrk
var ALLOC_NONE = 4; // Do not allocate
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;
Module['ALLOC_DYNAMIC'] = ALLOC_DYNAMIC;
Module['ALLOC_NONE'] = ALLOC_NONE;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator, ptr) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret;
  if (allocator == ALLOC_NONE) {
    ret = ptr;
  } else {
    ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc, Runtime.dynamicAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));
  }

  if (zeroinit) {
    var ptr = ret, stop;
    assert((ret & 3) == 0);
    stop = ret + (size & ~3);
    for (; ptr < stop; ptr += 4) {
      HEAP32[((ptr)>>2)]=0;
    }
    stop = ret + size;
    while (ptr < stop) {
      HEAP8[((ptr++)|0)]=0;
    }
    return ret;
  }

  if (singleType === 'i8') {
    if (slab.subarray || slab.slice) {
      HEAPU8.set(slab, ret);
    } else {
      HEAPU8.set(new Uint8Array(slab), ret);
    }
    return ret;
  }

  var i = 0, type, typeSize, previousType;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);

    // no need to look up size unless type changes, so cache it
    if (previousType !== type) {
      typeSize = Runtime.getNativeTypeSize(type);
      previousType = type;
    }
    i += typeSize;
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  // TODO: use TextDecoder
  // Find the length, and check for UTF while doing so
  var hasUtf = false;
  var t;
  var i = 0;
  while (1) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    if (t >= 128) hasUtf = true;
    else if (t == 0 && !length) break;
    i++;
    if (length && i == length) break;
  }
  if (!length) length = i;

  var ret = '';

  if (!hasUtf) {
    var MAX_CHUNK = 1024; // split up into chunks, because .apply on a huge string can overflow the stack
    var curr;
    while (length > 0) {
      curr = String.fromCharCode.apply(String, HEAPU8.subarray(ptr, ptr + Math.min(length, MAX_CHUNK)));
      ret = ret ? ret + curr : curr;
      ptr += MAX_CHUNK;
      length -= MAX_CHUNK;
    }
    return ret;
  }

  var utf8 = new Runtime.UTF8Processor();
  for (i = 0; i < length; i++) {
    assert(ptr + i < TOTAL_MEMORY);
    t = HEAPU8[(((ptr)+(i))|0)];
    ret += utf8.processCChar(t);
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

// Given a pointer 'ptr' to a null-terminated UTF16LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF16ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var codeUnit = HEAP16[(((ptr)+(i*2))>>1)];
    if (codeUnit == 0)
      return str;
    ++i;
    // fromCharCode constructs a character from a UTF-16 code unit, so we can pass the UTF16 string right through.
    str += String.fromCharCode(codeUnit);
  }
}
Module['UTF16ToString'] = UTF16ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF16LE form. The copy will require at most (str.length*2+1)*2 bytes of space in the HEAP.
function stringToUTF16(str, outPtr) {
  for(var i = 0; i < str.length; ++i) {
    // charCodeAt returns a UTF-16 encoded code unit, so it can be directly written to the HEAP.
    var codeUnit = str.charCodeAt(i); // possibly a lead surrogate
    HEAP16[(((outPtr)+(i*2))>>1)]=codeUnit;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP16[(((outPtr)+(str.length*2))>>1)]=0;
}
Module['stringToUTF16'] = stringToUTF16;

// Given a pointer 'ptr' to a null-terminated UTF32LE-encoded string in the emscripten HEAP, returns
// a copy of that string as a Javascript String object.
function UTF32ToString(ptr) {
  var i = 0;

  var str = '';
  while (1) {
    var utf32 = HEAP32[(((ptr)+(i*4))>>2)];
    if (utf32 == 0)
      return str;
    ++i;
    // Gotcha: fromCharCode constructs a character from a UTF-16 encoded code (pair), not from a Unicode code point! So encode the code point to UTF-16 for constructing.
    if (utf32 >= 0x10000) {
      var ch = utf32 - 0x10000;
      str += String.fromCharCode(0xD800 | (ch >> 10), 0xDC00 | (ch & 0x3FF));
    } else {
      str += String.fromCharCode(utf32);
    }
  }
}
Module['UTF32ToString'] = UTF32ToString;

// Copies the given Javascript String object 'str' to the emscripten HEAP at address 'outPtr',
// null-terminated and encoded in UTF32LE form. The copy will require at most (str.length+1)*4 bytes of space in the HEAP,
// but can use less, since str.length does not return the number of characters in the string, but the number of UTF-16 code units in the string.
function stringToUTF32(str, outPtr) {
  var iChar = 0;
  for(var iCodeUnit = 0; iCodeUnit < str.length; ++iCodeUnit) {
    // Gotcha: charCodeAt returns a 16-bit word that is a UTF-16 encoded code unit, not a Unicode code point of the character! We must decode the string to UTF-32 to the heap.
    var codeUnit = str.charCodeAt(iCodeUnit); // possibly a lead surrogate
    if (codeUnit >= 0xD800 && codeUnit <= 0xDFFF) {
      var trailSurrogate = str.charCodeAt(++iCodeUnit);
      codeUnit = 0x10000 + ((codeUnit & 0x3FF) << 10) | (trailSurrogate & 0x3FF);
    }
    HEAP32[(((outPtr)+(iChar*4))>>2)]=codeUnit;
    ++iChar;
  }
  // Null-terminate the pointer to the HEAP.
  HEAP32[(((outPtr)+(iChar*4))>>2)]=0;
}
Module['stringToUTF32'] = stringToUTF32;

function demangle(func) {
  var i = 3;
  // params, etc.
  var basicTypes = {
    'v': 'void',
    'b': 'bool',
    'c': 'char',
    's': 'short',
    'i': 'int',
    'l': 'long',
    'f': 'float',
    'd': 'double',
    'w': 'wchar_t',
    'a': 'signed char',
    'h': 'unsigned char',
    't': 'unsigned short',
    'j': 'unsigned int',
    'm': 'unsigned long',
    'x': 'long long',
    'y': 'unsigned long long',
    'z': '...'
  };
  var subs = [];
  var first = true;
  function dump(x) {
    //return;
    if (x) Module.print(x);
    Module.print(func);
    var pre = '';
    for (var a = 0; a < i; a++) pre += ' ';
    Module.print (pre + '^');
  }
  function parseNested() {
    i++;
    if (func[i] === 'K') i++; // ignore const
    var parts = [];
    while (func[i] !== 'E') {
      if (func[i] === 'S') { // substitution
        i++;
        var next = func.indexOf('_', i);
        var num = func.substring(i, next) || 0;
        parts.push(subs[num] || '?');
        i = next+1;
        continue;
      }
      if (func[i] === 'C') { // constructor
        parts.push(parts[parts.length-1]);
        i += 2;
        continue;
      }
      var size = parseInt(func.substr(i));
      var pre = size.toString().length;
      if (!size || !pre) { i--; break; } // counter i++ below us
      var curr = func.substr(i + pre, size);
      parts.push(curr);
      subs.push(curr);
      i += pre + size;
    }
    i++; // skip E
    return parts;
  }
  function parse(rawList, limit, allowVoid) { // main parser
    limit = limit || Infinity;
    var ret = '', list = [];
    function flushList() {
      return '(' + list.join(', ') + ')';
    }
    var name;
    if (func[i] === 'N') {
      // namespaced N-E
      name = parseNested().join('::');
      limit--;
      if (limit === 0) return rawList ? [name] : name;
    } else {
      // not namespaced
      if (func[i] === 'K' || (first && func[i] === 'L')) i++; // ignore const and first 'L'
      var size = parseInt(func.substr(i));
      if (size) {
        var pre = size.toString().length;
        name = func.substr(i + pre, size);
        i += pre + size;
      }
    }
    first = false;
    if (func[i] === 'I') {
      i++;
      var iList = parse(true);
      var iRet = parse(true, 1, true);
      ret += iRet[0] + ' ' + name + '<' + iList.join(', ') + '>';
    } else {
      ret = name;
    }
    paramLoop: while (i < func.length && limit-- > 0) {
      //dump('paramLoop');
      var c = func[i++];
      if (c in basicTypes) {
        list.push(basicTypes[c]);
      } else {
        switch (c) {
          case 'P': list.push(parse(true, 1, true)[0] + '*'); break; // pointer
          case 'R': list.push(parse(true, 1, true)[0] + '&'); break; // reference
          case 'L': { // literal
            i++; // skip basic type
            var end = func.indexOf('E', i);
            var size = end - i;
            list.push(func.substr(i, size));
            i += size + 2; // size + 'EE'
            break;
          }
          case 'A': { // array
            var size = parseInt(func.substr(i));
            i += size.toString().length;
            if (func[i] !== '_') throw '?';
            i++; // skip _
            list.push(parse(true, 1, true)[0] + ' [' + size + ']');
            break;
          }
          case 'E': break paramLoop;
          default: ret += '?' + c; break paramLoop;
        }
      }
    }
    if (!allowVoid && list.length === 1 && list[0] === 'void') list = []; // avoid (void)
    if (rawList) {
      if (ret) {
        list.push(ret + '?');
      }
      return list;
    } else {
      return ret + flushList();
    }
  }
  try {
    // Special-case the entry point, since its name differs from other name mangling.
    if (func == 'Object._main' || func == '_main') {
      return 'main()';
    }
    if (typeof func === 'number') func = Pointer_stringify(func);
    if (func[0] !== '_') return func;
    if (func[1] !== '_') return func; // C function
    if (func[2] !== 'Z') return func;
    switch (func[3]) {
      case 'n': return 'operator new()';
      case 'd': return 'operator delete()';
    }
    return parse();
  } catch(e) {
    return func;
  }
}

function demangleAll(text) {
  return text.replace(/__Z[\w\d_]+/g, function(x) { var y = demangle(x); return x === y ? x : (x + ' [' + y + ']') });
}

function stackTrace() {
  var stack = new Error().stack;
  return stack ? demangleAll(stack) : '(no stack trace available)'; // Stack trace is not available at least on IE10 and Safari 6.
}

// Memory management

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return (x+4095)&-4096;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STATIC_BASE = 0, STATICTOP = 0, staticSealed = false; // static area
var STACK_BASE = 0, STACKTOP = 0, STACK_MAX = 0; // stack area
var DYNAMIC_BASE = 0, DYNAMICTOP = 0; // dynamic area handled by sbrk

function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Either (1) compile with -s TOTAL_MEMORY=X with X higher than the current value ' + TOTAL_MEMORY + ', (2) compile with ALLOW_MEMORY_GROWTH which adjusts the size at runtime but prevents some optimizations, or (3) set Module.TOTAL_MEMORY before the program runs.');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 16777216;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;


// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
assert(typeof Int32Array !== 'undefined' && typeof Float64Array !== 'undefined' && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
       'JS engine does not provide full typed array support');

var buffer = new ArrayBuffer(TOTAL_MEMORY);
HEAP8 = new Int8Array(buffer);
HEAP16 = new Int16Array(buffer);
HEAP32 = new Int32Array(buffer);
HEAPU8 = new Uint8Array(buffer);
HEAPU16 = new Uint16Array(buffer);
HEAPU32 = new Uint32Array(buffer);
HEAPF32 = new Float32Array(buffer);
HEAPF64 = new Float64Array(buffer);

// Endianness check (note: assumes compiler arch was little-endian)
HEAP32[0] = 255;
assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    if (typeof callback == 'function') {
      callback();
      continue;
    }
    var func = callback.func;
    if (typeof func === 'number') {
      if (callback.arg === undefined) {
        Runtime.dynCall('v', func);
      } else {
        Runtime.dynCall('vi', func, [callback.arg]);
      }
    } else {
      func(callback.arg === undefined ? null : callback.arg);
    }
  }
}

var __ATPRERUN__  = []; // functions called before the runtime is initialized
var __ATINIT__    = []; // functions called during startup
var __ATMAIN__    = []; // functions called when main() is to be run
var __ATEXIT__    = []; // functions called during shutdown
var __ATPOSTRUN__ = []; // functions called after the runtime has exited

var runtimeInitialized = false;

function preRun() {
  // compatibility - merge in anything from Module['preRun'] at this time
  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    while (Module['preRun'].length) {
      addOnPreRun(Module['preRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPRERUN__);
}

function ensureInitRuntime() {
  if (runtimeInitialized) return;
  runtimeInitialized = true;
  callRuntimeCallbacks(__ATINIT__);
}

function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}

function exitRuntime() {
  if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
    Module.printErr('Exiting runtime. Any attempt to access the compiled C code may fail from now. If you want to keep the runtime alive, set Module["noExitRuntime"] = true or build with -s NO_EXIT_RUNTIME=1');
  }
  callRuntimeCallbacks(__ATEXIT__);
}

function postRun() {
  // compatibility - merge in anything from Module['postRun'] at this time
  if (Module['postRun']) {
    if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
    while (Module['postRun'].length) {
      addOnPostRun(Module['postRun'].shift());
    }
  }
  callRuntimeCallbacks(__ATPOSTRUN__);
}

function addOnPreRun(cb) {
  __ATPRERUN__.unshift(cb);
}
Module['addOnPreRun'] = Module.addOnPreRun = addOnPreRun;

function addOnInit(cb) {
  __ATINIT__.unshift(cb);
}
Module['addOnInit'] = Module.addOnInit = addOnInit;

function addOnPreMain(cb) {
  __ATMAIN__.unshift(cb);
}
Module['addOnPreMain'] = Module.addOnPreMain = addOnPreMain;

function addOnExit(cb) {
  __ATEXIT__.unshift(cb);
}
Module['addOnExit'] = Module.addOnExit = addOnExit;

function addOnPostRun(cb) {
  __ATPOSTRUN__.unshift(cb);
}
Module['addOnPostRun'] = Module.addOnPostRun = addOnPostRun;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[(((buffer)+(i))|0)]=chr;
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[(((buffer)+(i))|0)]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

function writeAsciiToMemory(str, buffer, dontAddNull) {
  for (var i = 0; i < str.length; i++) {
    assert(str.charCodeAt(i) === str.charCodeAt(i)&0xff);
    HEAP8[(((buffer)+(i))|0)]=str.charCodeAt(i);
  }
  if (!dontAddNull) HEAP8[(((buffer)+(str.length))|0)]=0;
}
Module['writeAsciiToMemory'] = writeAsciiToMemory;

function unSign(value, bits, ignore) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
}
function reSign(value, bits, ignore) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// check for imul support, and also for correctness ( https://bugs.webkit.org/show_bug.cgi?id=126345 )
if (!Math['imul'] || Math['imul'](0xffffffff, 5) !== -5) Math['imul'] = function imul(a, b) {
  var ah  = a >>> 16;
  var al = a & 0xffff;
  var bh  = b >>> 16;
  var bl = b & 0xffff;
  return (al*bl + ((ah*bl + al*bh) << 16))|0;
};
Math.imul = Math['imul'];


var Math_abs = Math.abs;
var Math_cos = Math.cos;
var Math_sin = Math.sin;
var Math_tan = Math.tan;
var Math_acos = Math.acos;
var Math_asin = Math.asin;
var Math_atan = Math.atan;
var Math_atan2 = Math.atan2;
var Math_exp = Math.exp;
var Math_log = Math.log;
var Math_sqrt = Math.sqrt;
var Math_ceil = Math.ceil;
var Math_floor = Math.floor;
var Math_pow = Math.pow;
var Math_imul = Math.imul;
var Math_fround = Math.fround;
var Math_min = Math.min;

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyWatcher = null;
var dependenciesFulfilled = null; // overridden to take different actions when all run dependencies are fulfilled
var runDependencyTracking = {};

function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 10000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    }
    if (dependenciesFulfilled) {
      var callback = dependenciesFulfilled;
      dependenciesFulfilled = null;
      callback(); // can add another dependenciesFulfilled
    }
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data


var memoryInitializer = null;

// === Body ===



STATIC_BASE = 8;

STATICTOP = STATIC_BASE + 19352;





var _stdout;
var _stdout=_stdout=allocate(1, "i32*", ALLOC_STATIC);
var _stdin;
var _stdin=_stdin=allocate(1, "i32*", ALLOC_STATIC);
var _stderr;
var _stderr=_stderr=allocate(1, "i32*", ALLOC_STATIC);





















/* global initializers */ __ATINIT__.push({ func: function() { runPostSets() } },{ func: function() { __GLOBAL__I_a() } },{ func: function() { __GLOBAL__I_a655() } },{ func: function() { __GLOBAL__I_a715() } });





































































































































































































































































































































































































































var ___dso_handle;
var ___dso_handle=___dso_handle=allocate(1, "i32*", ALLOC_STATIC);










































































































































var __ZTVN10__cxxabiv120__si_class_type_infoE;
__ZTVN10__cxxabiv120__si_class_type_infoE=allocate([0,0,0,0,104,52,0,0,114,3,0,0,182,1,0,0,196,0,0,0,238,1,0,0,2,1,0,0,112,0,0,0,54,1,0,0,96,1,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv119__pointer_type_infoE;
__ZTVN10__cxxabiv119__pointer_type_infoE=allocate([0,0,0,0,120,52,0,0,114,3,0,0,200,0,0,0,196,0,0,0,238,1,0,0,106,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;
var __ZTVN10__cxxabiv117__class_type_infoE;
__ZTVN10__cxxabiv117__class_type_infoE=allocate([0,0,0,0,152,52,0,0,114,3,0,0,106,3,0,0,196,0,0,0,238,1,0,0,2,1,0,0,172,2,0,0,88,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_STATIC);;


























































































































































































































var __ZTIt;
__ZTIt=allocate([176,30,0,0,8,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIs;
__ZTIs=allocate([176,30,0,0,16,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIm;
__ZTIm=allocate([176,30,0,0,24,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIl;
__ZTIl=allocate([176,30,0,0,32,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIj;
__ZTIj=allocate([176,30,0,0,40,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIi;
__ZTIi=allocate([176,30,0,0,48,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIh;
__ZTIh=allocate([176,30,0,0,56,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIf;
__ZTIf=allocate([176,30,0,0,64,31,0,0], "i8", ALLOC_STATIC);;
var __ZTId;
__ZTId=allocate([176,30,0,0,72,31,0,0], "i8", ALLOC_STATIC);;
var __ZTIc;
__ZTIc=allocate([176,30,0,0,80,31,0,0], "i8", ALLOC_STATIC);;


var __ZTIa;
__ZTIa=allocate([176,30,0,0,96,31,0,0], "i8", ALLOC_STATIC);;


var __ZTISt9exception;
var __ZTISt9exception=__ZTISt9exception=allocate([allocate([1,0,0,0,0,0,0], "i8", ALLOC_STATIC)+8, 0], "i32", ALLOC_STATIC);


























































































































































































































































































































































/* memory initializer */ allocate([0,0,0,0,0,0,0,0,255,255,255,255,0,0,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,101,120,112,97,110,100,32,51,50,45,98,121,116,101,32,107,208,13,0,0,224,10,0,0,88,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,19,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,0,0,0,5,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,252,0,0,0,0,0,0,0,106,9,230,103,187,103,174,133,60,110,243,114,165,79,245,58,81,14,82,127,155,5,104,140,31,131,217,171,91,224,205,25,0,0,0,0,0,0,0,0,95,112,137,0,255,9,47,15,10,0,0,0,100,0,0,0,232,3,0,0,16,39,0,0,160,134,1,0,64,66,15,0,128,150,152,0,0,225,245,5,102,2,0,0,64,0,0,0,100,2,0,0,0,0,0,0,9,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,74,117,108,0,0,0,0,0,74,117,110,0,0,0,0,0,65,112,114,0,0,0,0,0,117,110,115,117,112,112,111,114,116,101,100,32,108,111,99,97,108,101,32,102,111,114,32,115,116,97,110,100,97,114,100,32,105,110,112,117,116,0,0,0,108,111,110,103,0,0,0,0,116,111,120,46,111,110,77,101,115,115,97,103,101,40,36,48,44,32,39,36,49,39,41,44,32,105,44,32,115,116,114,105,110,103,40,40,99,104,97,114,32,42,41,109,115,103,44,32,108,101,110,103,116,104,41,0,77,97,114,0,0,0,0,0,115,116,100,58,58,98,97,100,95,99,97,115,116,0,0,0,70,101,98,0,0,0,0,0,74,97,110,0,0,0,0,0,68,101,99,101,109,98,101,114,0,0,0,0,0,0,0,0,78,111,118,101,109,98,101,114,0,0,0,0,0,0,0,0,79,99,116,111,98,101,114,0,83,101,112,116,101,109,98,101,114,0,0,0,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,111,118,101,114,119,114,105,116,101,115,32,104,0,65,117,103,117,115,116,0,0,74,117,108,121,0,0,0,0,74,117,110,101,0,0,0,0,117,110,115,105,103,110,101,100,32,105,110,116,0,0,0,0,77,101,115,115,97,103,101,32,102,114,111,109,32,102,114,105,101,110,100,32,37,100,58,32,37,115,10,0,0,0,0,0,77,97,121,0,0,0,0,0,65,112,114,105,108,0,0,0,77,97,114,99,104,0,0,0,70,101,98,114,117,97,114,121,0,0,0,0,0,0,0,0,98,97,115,105,99,95,115,116,114,105,110,103,0,0,0,0,74,97,110,117,97,114,121,0,68,0,0,0,101,0,0,0,99,0,0,0,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,95,118,101,114,105,102,121,32,114,101,116,117,114,110,115,32,110,111,110,122,101,114,111,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,0,0,0,0,105,110,116,0,0,0,0,0,116,111,120,46,111,110,82,101,113,117,101,115,116,40,39,36,48,39,44,32,39,36,49,39,41,44,32,107,101,121,44,32,100,97,116,97,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,100,111,101,115,32,110,111,116,32,104,97,110,100,108,101,32,107,32,111,118,101,114,108,97,112,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,0,0,0,0,79,110,108,105,110,101,0,0,74,0,0,0,97,0,0,0,110,0,0,0,0,0,0,0,68,0,0,0,101,0,0,0,99,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,78,0,0,0,111,0,0,0,118,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,115,104,111,114,116,0,0,116,111,120,46,111,110,80,114,111,102,105,108,101,67,104,97,110,103,101,100,40,36,48,41,44,32,105,0,0,0,0,0,79,0,0,0,99,0,0,0,116,0,0,0,111,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,83,0,0,0,101,0,0,0,112,0,0,0,116,0,0,0,101,0,0,0,109,0,0,0,98,0,0,0,101,0,0,0,114,0,0,0,0,0,0,0,65,0,0,0,117,0,0,0,103,0,0,0,117,0,0,0,115,0,0,0,116,0,0,0,0,0,0,0,0,0,0,0,118,111,105,100,0,0,0,0,74,0,0,0,117,0,0,0,108,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,115,114,97,110,100,111,109,32,115,116,117,98,32,99,97,108,108,101,100,10,0,0,0,0,74,0,0,0,117,0,0,0,110,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,105,110,102,105,110,105,116,121,0,0,0,0,0,0,0,0,65,0,0,0,112,0,0,0,114,0,0,0,105,0,0,0,108,0,0,0,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,100,111,101,115,32,110,111,116,32,104,97,110,100,108,101,32,109,32,111,118,101,114,108,97,112,0,0,0,0,77,0,0,0,97,0,0,0,114,0,0,0,99,0,0,0,104,0,0,0,0,0,0,0,70,0,0,0,101,0,0,0,98,0,0,0,114,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,74,0,0,0,97,0,0,0,110,0,0,0,117,0,0,0,97,0,0,0,114,0,0,0,121,0,0,0,0,0,0,0,115,104,111,114,116,0,0,0,37,48,50,88,0,0,0,0,80,77,0,0,0,0,0,0,65,77,0,0,0,0,0,0,80,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,115,101,116,0,0,0,0,0,65,0,0,0,77,0,0,0,0,0,0,0,0,0,0,0,103,101,116,0,0,0,0,0,98,117,102,95,108,101,110,32,60,61,32,83,73,90,69,95,77,65,88,0,0,0,0,0,115,105,122,101,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,119,114,105,116,101,115,32,97,102,116,101,114,32,111,117,116,112,117,116,0,0,112,117,115,104,95,98,97,99,107,0,0,0,0,0,0,0,108,111,97,100,0,0,0,0,117,110,115,105,103,110,101,100,32,99,104,97,114,0,0,0,66,97,100,32,104,101,120,115,116,114,105,110,103,58,32,37,115,10,0,0,0,0,0,0,115,97,118,101,0,0,0,0,103,101,116,67,111,110,116,97,99,116,115,0,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,119,114,105,116,101,115,32,98,101,102,111,114,101,32,111,117,116,112,117,116,0,99,104,97,110,103,101,78,111,115,112,97,109,0,0,0,0,115,101,116,83,116,97,116,117,115,0,0,0,0,0,0,0,103,101,116,83,116,97,116,117,115,0,0,0,0,0,0,0,114,101,102,0,0,0,0,0,115,101,116,83,116,97,116,117,115,77,101,115,115,97,103,101,0,0,0,0,0,0,0,0,101,56,51,54,100,53,99,97,53,56,99,102,54,55,51,102,99,97,50,98,52,57,49,48,102,50,51,102,51,57,57,48,0,0,0,0,0,0,0,0,103,101,116,83,116,97,116,117,115,77,101,115,115,97,103,101,0,0,0,0,0,0,0,0,115,116,100,58,58,98,97,100,95,97,108,108,111,99,0,0,108,111,99,97,108,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0,0,0,0,115,101,116,78,97,109,101,0,103,101,116,78,97,109,101,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,103,101,116,73,100,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,115,105,103,110,101,100,32,99,104,97,114,0,0,0,0,0,37,50,120,0,0,0,0,0,115,101,110,100,77,101,115,115,97,103,101,0,0,0,0,0,37,0,0,0,97,0,0,0,32,0,0,0,37,0,0,0,98,0,0,0,32,0,0,0,37,0,0,0,100,0,0,0,32,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,89,0,0,0,0,0,0,0,0,0,0,0,47,100,101,118,47,114,97,110,100,111,109,0,0,0,0,0,114,101,109,111,118,101,67,111,110,116,97,99,116,0,0,0,37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,89,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,111,118,101,114,119,114,105,116,101,115,32,109,0,97,100,100,67,111,110,116,97,99,116,0,0,0,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,0,0,0,0,0,0,0,0,117,112,100,97,116,101,0,0,98,111,111,116,115,116,114,97,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,99,108,101,97,110,117,112,0,115,101,116,117,112,0,0,0,40,73,80,32,105,110,118,97,108,105,100,44,32,102,97,109,105,108,121,32,37,117,41,0,108,97,115,116,95,111,110,108,105,110,101,0,0,0,0,0,102,0,0,0,97,0,0,0,108,0,0,0,115,0,0,0,101,0,0,0,0,0,0,0,115,116,97,116,117,115,0,0,37,112,0,0,0,0,0,0,102,97,108,115,101,0,0,0,115,116,97,116,117,115,95,109,101,115,115,97,103,101,0,0,99,104,97,114,0,0,0,0,116,0,0,0,114,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,0,0,0,0,66,97,100,32,102,114,105,101,110,100,32,110,117,109,98,101,114,32,37,100,10,0,0,0,110,97,109,101,0,0,0,0,47,100,101,118,47,117,114,97,110,100,111,109,0,0,0,0,105,100,0,0,0,0,0,0,58,32,0,0,0,0,0,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,111,118,101,114,119,114,105,116,101,115,32,107,0,67,111,110,116,97,99,116,0,67,111,110,116,97,99,116,115,0,0,0,0,0,0,0,0,115,116,97,116,101,32,102,105,108,101,32,103,97,114,98,101,108,101,100,58,32,37,48,52,104,120,32,33,61,32,37,48,52,104,120,10,0,0,0,0,76,111,97,100,32,115,116,97,116,101,32,40,68,72,84,41,58,32,99,111,110,116,97,105,110,115,32,117,110,114,101,99,111,103,110,105,122,101,100,32,112,97,114,116,32,40,108,101,110,32,37,117,44,32,116,121,112,101,32,37,117,41,10,0,70,97,105,108,101,100,32,116,111,32,98,105,110,100,32,115,111,99,107,101,116,58,32,37,117,44,32,37,115,32,40,73,80,47,80,111,114,116,58,32,37,115,58,37,117,10,0,0,105,111,115,95,98,97,115,101,58,58,99,108,101,97,114,0,69,114,114,111,114,32,103,101,116,116,105,110,103,32,108,97,115,116,32,111,110,108,105,110,101,32,116,105,109,101,32,102,111,114,32,102,114,105,101,110,100,32,37,100,10,0,0,0,108,111,97,100,95,115,116,97,116,101,40,41,32,99,97,108,108,101,100,32,119,105,116,104,32,105,110,118,97,108,105,100,32,97,114,103,115,46,10,0,69,114,114,111,114,32,103,101,116,116,105,110,103,32,117,115,101,114,32,115,116,97,116,117,115,32,102,111,114,32,102,114,105,101,110,100,32,37,100,10,0,0,0,0,0,0,0,0,116,111,120,99,111,114,101,47,97,115,115,111,99,46,99,0,69,114,114,111,114,32,103,101,116,116,105,110,103,32,115,116,97,116,117,115,32,109,101,115,115,97,103,101,32,102,111,114,32,102,114,105,101,110,100,32,37,100,10,0,0,0,0,0,69,114,114,111,114,32,103,101,116,116,105,110,103,32,110,97,109,101,32,102,111,114,32,102,114,105,101,110,100,32,37,100,10,0,0,0,0,0,0,0,76,111,97,100,32,115,116,97,116,101,58,32,99,111,110,116,97,105,110,115,32,117,110,114,101,99,111,103,110,105,122,101,100,32,112,97,114,116,32,40,108,101,110,32,37,117,44,32,116,121,112,101,32,37,117,41,10,0,0,0,0,0,0,0,101,109,115,99,114,105,112,116,101,110,58,58,109,101,109,111,114,121,95,118,105,101,119,0,67,0,0,0,0,0,0,0,110,97,110,0,0,0,0,0,69,114,114,111,114,32,103,101,116,116,105,110,103,32,99,108,105,101,110,116,32,105,100,32,102,111,114,32,102,114,105,101,110,100,32,37,100,10,0,0,101,109,115,99,114,105,112,116,101,110,58,58,118,97,108,0,98,111,111,108,0,0,0,0,118,101,99,116,111,114,0,0,103,101,116,115,111,99,107,111,112,116,32,115,116,117,98,32,99,97,108,108,101,100,10,0,67,111,117,108,100,110,39,116,32,103,101,116,32,102,117,108,108,32,102,114,105,101,110,100,108,105,115,116,0,0,0,0,115,116,100,58,58,119,115,116,114,105,110,103,0,0,0,0,37,46,48,76,102,0,0,0,47,100,101,118,47,97,114,97,110,100,111,109,0,0,0,0,108,105,98,115,111,100,105,117,109,47,114,97,110,100,111,109,98,121,116,101,115,47,114,97,110,100,111,109,98,121,116,101,115,46,99,0,0,0,0,0,115,116,100,58,58,98,97,115,105,99,95,115,116,114,105,110,103,60,117,110,115,105,103,110,101,100,32,99,104,97,114,62,0,0,0,0,0,0,0,0,109,111,110,101,121,95,103,101,116,32,101,114,114,111,114,0,99,114,121,112,116,111,95,111,110,101,116,105,109,101,97,117,116,104,32,114,101,116,117,114,110,115,32,110,111,110,122,101,114,111,0,0,0,0,0,0,70,97,105,108,101,100,32,116,111,32,97,108,108,111,99,97,116,101,32,77,101,115,115,101,110,103,101,114,32,100,97,116,97,115,116,114,117,99,116,117,114,101,0,0,0,0,0,0,115,116,100,58,58,115,116,114,105,110,103,0,0,0,0,0,105,111,115,116,114,101,97,109,0,0,0,0,0,0,0,0,83,97,116,0,0,0,0,0,70,114,105,0,0,0,0,0,37,76,102,0,0,0,0,0,84,104,117,0,0,0,0,0,87,101,100,0,0,0,0,0,84,117,101,0,0,0,0,0,78,111,116,32,99,111,110,110,101,99,116,101,100,10,0,0,77,111,110,0,0,0,0,0,83,117,110,0,0,0,0,0,83,97,116,117,114,100,97,121,0,0,0,0,0,0,0,0,100,111,117,98,108,101,0,0,70,114,105,100,97,121,0,0,84,104,117,114,115,100,97,121,0,0,0,0,0,0,0,0,87,101,100,110,101,115,100,97,121,0,0,0,0,0,0,0,84,117,101,115,100,97,121,0,77,111,110,100,97,121,0,0,83,117,110,100,97,121,0,0,115,116,97,116,101,32,102,105,108,101,32,116,111,111,32,115,104,111,114,116,58,32,37,117,32,60,32,37,117,10,0,0,84,111,120,32,119,97,105,116,32,99,108,101,97,110,117,112,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,0,0,0,0,102,108,111,97,116,0,0,0,70,97,105,108,101,100,32,116,111,32,103,101,116,32,97,32,115,111,99,107,101,116,63,33,32,37,117,44,32,37,115,10,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,0,0,0,0,117,110,115,112,101,99,105,102,105,101,100,32,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,32,101,114,114,111,114,0,0,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,0,0,0,0,83,0,0,0,97,0,0,0,116,0,0,0,117,0,0,0,114,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,70,0,0,0,114,0,0,0,105,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,0,0,0,104,0,0,0,117,0,0,0,114,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,84,111,120,32,119,97,105,116,32,101,120,101,99,117,116,101,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,87,0,0,0,101,0,0,0,100,0,0,0,110,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,84,0,0,0,117,0,0,0,101,0,0,0,115,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,77,0,0,0,111,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,117,110,115,105,103,110,101,100,32,108,111,110,103,0,0,0,83,0,0,0,117,0,0,0,110,0,0,0,100,0,0,0,97,0,0,0,121,0,0,0,0,0,0,0,0,0,0,0,68,101,99,0,0,0,0,0,78,111,118,0,0,0,0,0,79,99,116,0,0,0,0,0,83,101,112,0,0,0,0,0,65,117,103,0,0,0,0,0,84,111,120,32,119,97,105,116,32,112,114,101,112,97,114,101,32,102,97,105,108,101,100,10,0,0,0,0,0,0,0,0,114,101,116,118,97,108,32,33,61,32,48,0,0,0,0,0,97,115,115,111,99,58,58,104,97,115,104,95,99,111,108,108,105,100,101,58,32,104,97,115,104,32,37,117,44,32,98,117,99,107,101,116,32,115,105,122,101,32,37,117,32,61,62,32,37,117,33,0,0,0,0,0,114,97,110,100,111,109,98,121,116,101,115,0,0,0,0,0,104,97,115,104,95,99,111,108,108,105,100,101,0,0,0,0,2,0,0,192,3,0,0,192,4,0,0,192,5,0,0,192,6,0,0,192,7,0,0,192,8,0,0,192,9,0,0,192,10,0,0,192,11,0,0,192,12,0,0,192,13,0,0,192,14,0,0,192,15,0,0,192,16,0,0,192,17,0,0,192,18,0,0,192,19,0,0,192,20,0,0,192,21,0,0,192,22,0,0,192,23,0,0,192,24,0,0,192,25,0,0,192,26,0,0,192,27,0,0,192,28,0,0,192,29,0,0,192,30,0,0,192,31,0,0,192,0,0,0,179,1,0,0,195,2,0,0,195,3,0,0,195,4,0,0,195,5,0,0,195,6,0,0,195,7,0,0,195,8,0,0,195,9,0,0,195,10,0,0,195,11,0,0,195,12,0,0,195,13,0,0,211,14,0,0,195,15,0,0,195,0,0,12,187,1,0,12,195,2,0,12,195,3,0,12,195,4,0,12,211,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,48,49,50,51,52,53,54,55,56,57,0,0,0,0,0,0,37,0,0,0,89,0,0,0,45,0,0,0,37,0,0,0,109,0,0,0,45,0,0,0,37,0,0,0,100,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,0,0,0,0,37,0,0,0,73,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,32,0,0,0,37,0,0,0,112,0,0,0,0,0,0,0,37,0,0,0,109,0,0,0,47,0,0,0,37,0,0,0,100,0,0,0,47,0,0,0,37,0,0,0,121,0,0,0,37,0,0,0,72,0,0,0,58,0,0,0,37,0,0,0,77,0,0,0,58,0,0,0,37,0,0,0,83,0,0,0,37,72,58,37,77,58,37,83,37,72,58,37,77,0,0,0,37,73,58,37,77,58,37,83,32,37,112,0,0,0,0,0,37,89,45,37,109,45,37,100,37,109,47,37,100,47,37,121,37,72,58,37,77,58,37,83,37,0,0,0,0,0,0,0,37,112,0,0,0,0,0,0,0,0,0,0,184,45,0,0,78,0,0,0,154,1,0,0,244,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,45,0,0,146,2,0,0,18,2,0,0,4,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,45,0,0,236,0,0,0,140,3,0,0,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,232,45,0,0,74,1,0,0,18,0,0,0,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,45,0,0,74,1,0,0,42,0,0,0,228,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,46,0,0,28,2,0,0,28,1,0,0,138,0,0,0,76,2,0,0,54,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,46,0,0,126,3,0,0,86,2,0,0,138,0,0,0,86,3,0,0,114,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,46,0,0,16,2,0,0,92,2,0,0,138,0,0,0,78,2,0,0,112,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,46,0,0,132,3,0,0,216,1,0,0,138,0,0,0,60,2,0,0,158,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,47,0,0,120,3,0,0,64,1,0,0,138,0,0,0,144,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,47,0,0,14,2,0,0,132,1,0,0,138,0,0,0,218,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,47,0,0,100,0,0,0,134,1,0,0,138,0,0,0,28,3,0,0,22,0,0,0,94,2,0,0,32,0,0,0,0,1,0,0,30,3,0,0,40,1,0,0,248,255,255,255,112,47,0,0,132,0,0,0,50,0,0,0,228,0,0,0,86,0,0,0,8,0,0,0,208,0,0,0,60,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,47,0,0,104,3,0,0,44,3,0,0,138,0,0,0,126,0,0,0,152,0,0,0,62,3,0,0,230,1,0,0,206,0,0,0,16,0,0,0,2,3,0,0,248,255,255,255,152,47,0,0,202,1,0,0,202,2,0,0,4,3,0,0,52,3,0,0,156,2,0,0,56,1,0,0,106,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,47,0,0,14,1,0,0,98,2,0,0,138,0,0,0,84,1,0,0,38,1,0,0,136,0,0,0,204,1,0,0,40,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,47,0,0,190,0,0,0,220,0,0,0,138,0,0,0,48,1,0,0,84,2,0,0,194,0,0,0,70,2,0,0,6,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,47,0,0,108,3,0,0,2,0,0,0,138,0,0,0,242,1,0,0,122,3,0,0,176,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,48,0,0,130,0,0,0,252,2,0,0,138,0,0,0,38,3,0,0,12,1,0,0,232,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,48,0,0,18,3,0,0,146,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,48,0,0,72,0,0,0,214,1,0,0,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,48,0,0,14,0,0,0,34,2,0,0,138,0,0,0,110,0,0,0,98,0,0,0,90,0,0,0,96,0,0,0,88,0,0,0,106,0,0,0,104,0,0,0,184,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,48,0,0,82,1,0,0,40,0,0,0,138,0,0,0,140,2,0,0,144,2,0,0,130,2,0,0,142,2,0,0,78,1,0,0,136,2,0,0,134,2,0,0,38,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,120,48,0,0,102,0,0,0,52,0,0,0,138,0,0,0,214,2,0,0,210,2,0,0,200,2,0,0,204,2,0,0,82,2,0,0,208,2,0,0,198,2,0,0,220,2,0,0,218,2,0,0,216,2,0,0,190,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,48,0,0,156,0,0,0,4,0,0,0,138,0,0,0,98,3,0,0,84,3,0,0,78,3,0,0,80,3,0,0,58,3,0,0,82,3,0,0,76,3,0,0,24,2,0,0,90,3,0,0,88,3,0,0,206,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,184,48,0,0,254,0,0,0,60,1,0,0,138,0,0,0,184,1,0,0,126,2,0,0,136,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,200,48,0,0,70,0,0,0,42,2,0,0,138,0,0,0,118,2,0,0,242,2,0,0,46,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,48,0,0,26,0,0,0,80,2,0,0,138,0,0,0,84,0,0,0,72,2,0,0,192,2,0,0,26,3,0,0,184,2,0,0,16,3,0,0,246,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,248,48,0,0,52,2,0,0,198,1,0,0,138,0,0,0,66,3,0,0,124,3,0,0,150,2,0,0,92,1,0,0,48,0,0,0,154,2,0,0,138,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,49,0,0,52,2,0,0,44,0,0,0,138,0,0,0,70,1,0,0,124,0,0,0,44,1,0,0,174,2,0,0,148,1,0,0,8,2,0,0,94,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,56,49,0,0,52,2,0,0,100,1,0,0,138,0,0,0,128,2,0,0,36,2,0,0,240,2,0,0,186,0,0,0,232,1,0,0,212,1,0,0,130,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,112,49,0,0,52,2,0,0,82,0,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,49,0,0,174,0,0,0,0,2,0,0,138,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,144,49,0,0,52,2,0,0,20,1,0,0,138,0,0,0,220,1,0,0,234,0,0,0,170,1,0,0,116,3,0,0,238,0,0,0,160,2,0,0,110,2,0,0,66,0,0,0,142,0,0,0,8,3,0,0,110,1,0,0,240,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,49,0,0,138,3,0,0,92,0,0,0,138,0,0,0,180,0,0,0,58,0,0,0,192,1,0,0,254,2,0,0,166,0,0,0,196,1,0,0,20,2,0,0,228,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,240,49,0,0,226,0,0,0,32,3,0,0,4,2,0,0,170,2,0,0,162,1,0,0,224,2,0,0,230,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,50,0,0,52,2,0,0,34,1,0,0,138,0,0,0,128,2,0,0,36,2,0,0,240,2,0,0,186,0,0,0,232,1,0,0,212,1,0,0,130,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,16,50,0,0,52,2,0,0,92,3,0,0,138,0,0,0,128,2,0,0,36,2,0,0,240,2,0,0,186,0,0,0,232,1,0,0,212,1,0,0,130,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,32,50,0,0,180,1,0,0,68,3,0,0,246,0,0,0,240,1,0,0,76,1,0,0,166,2,0,0,112,2,0,0,64,2,0,0,244,2,0,0,176,0,0,0,158,0,0,0,150,0,0,0,134,3,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,50,0,0,20,0,0,0,158,1,0,0,108,2,0,0,54,3,0,0,50,3,0,0,120,2,0,0,86,1,0,0,90,2,0,0,188,1,0,0,36,0,0,0,68,0,0,0,70,3,0,0,166,1,0,0,48,3,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,88,50,0,0,116,0,0,0,236,2,0,0,252,255,255,255,252,255,255,255,88,50,0,0,226,1,0,0,178,1,0,0,0,0,0,0,0,0,0,0,4,0,0,0,0,0,0,0,112,50,0,0,20,3,0,0,72,3,0,0,252,255,255,255,252,255,255,255,112,50,0,0,130,1,0,0,162,2,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,136,50,0,0,42,1,0,0,142,3,0,0,248,255,255,255,248,255,255,255,136,50,0,0,54,2,0,0,64,3,0,0,0,0,0,0,0,0,0,0,8,0,0,0,0,0,0,0,160,50,0,0,128,1,0,0,196,2,0,0,248,255,255,255,248,255,255,255,160,50,0,0,208,1,0,0,154,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,208,50,0,0,180,2,0,0,58,2,0,0,22,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,64,51,0,0,110,3,0,0,62,2,0,0,230,0,0,0,240,1,0,0,76,1,0,0,166,2,0,0,116,1,0,0,64,2,0,0,244,2,0,0,176,0,0,0,158,0,0,0,150,0,0,0,212,2,0,0,74,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,80,51,0,0,248,1,0,0,50,2,0,0,142,1,0,0,54,3,0,0,50,3,0,0,120,2,0,0,114,2,0,0,90,2,0,0,188,1,0,0,36,0,0,0,68,0,0,0,70,3,0,0,96,3,0,0,222,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,128,51,0,0,34,3,0,0,222,1,0,0,138,0,0,0,200,1,0,0,10,3,0,0,10,2,0,0,118,3,0,0,62,0,0,0,102,1,0,0,98,1,0,0,16,1,0,0,194,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,160,51,0,0,118,1,0,0,168,0,0,0,138,0,0,0,238,2,0,0,12,0,0,0,186,2,0,0,36,3,0,0,56,3,0,0,52,1,0,0,248,2,0,0,44,2,0,0,160,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,192,51,0,0,46,3,0,0,152,1,0,0,138,0,0,0,108,0,0,0,144,1,0,0,80,0,0,0,250,1,0,0,128,3,0,0,48,2,0,0,152,2,0,0,74,2,0,0,210,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,224,51,0,0,8,1,0,0,32,2,0,0,138,0,0,0,194,2,0,0,222,2,0,0,94,1,0,0,6,3,0,0,62,1,0,0,248,0,0,0,6,2,0,0,232,2,0,0,226,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,24,52,0,0,46,1,0,0,38,0,0,0,164,2,0,0,240,1,0,0,76,1,0,0,166,2,0,0,112,2,0,0,64,2,0,0,244,2,0,0,210,1,0,0,66,2,0,0,212,0,0,0,134,3,0,0,96,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,40,52,0,0,30,0,0,0,22,3,0,0,124,2,0,0,54,3,0,0,50,3,0,0,120,2,0,0,86,1,0,0,90,2,0,0,188,1,0,0,114,1,0,0,148,0,0,0,34,0,0,0,166,1,0,0,48,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,72,52,0,0,114,3,0,0,36,1,0,0,196,0,0,0,238,1,0,0,188,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,88,52,0,0,114,3,0,0,148,2,0,0,196,0,0,0,238,1,0,0,2,1,0,0,76,0,0,0,14,3,0,0,104,1,0,0,0,0,0,0,0,0,0,0,118,0,0,0,0,0,0,0,116,0,0,0,0,0,0,0,115,0,0,0,0,0,0,0,109,0,0,0,0,0,0,0,108,0,0,0,0,0,0,0,106,0,0,0,0,0,0,0,105,0,0,0,0,0,0,0,104,0,0,0,0,0,0,0,102,0,0,0,0,0,0,0,100,0,0,0,0,0,0,0,99,0,0,0,0,0,0,0,98,0,0,0,0,0,0,0,97,0,0,0,0,0,0,0,83,116,57,116,121,112,101,95,105,110,102,111,0,0,0,0,83,116,57,98,97,100,95,97,108,108,111,99,0,0,0,0,83,116,56,98,97,100,95,99,97,115,116,0,0,0,0,0,83,116,49,51,114,117,110,116,105,109,101,95,101,114,114,111,114,0,0,0,0,0,0,0,83,116,49,50,108,101,110,103,116,104,95,101,114,114,111,114,0,0,0,0,0,0,0,0,83,116,49,49,108,111,103,105,99,95,101,114,114,111,114,0,80,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,55,67,111,110,116,97,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,80,75,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,55,67,111,110,116,97,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,78,83,116,51,95,95,49,57,116,105,109,101,95,98,97,115,101,69,0,0,0,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,109,111,110,101,121,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,98,97,115,105,99,95,105,111,115,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,112,117,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,119,69,69,0,0,0,78,83,116,51,95,95,49,57,95,95,110,117,109,95,103,101,116,73,99,69,69,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,116,105,109,101,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,110,117,109,112,117,110,99,116,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,119,69,69,0,0,0,0,78,83,116,51,95,95,49,56,109,101,115,115,97,103,101,115,73,99,69,69,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,56,105,111,115,95,98,97,115,101,55,102,97,105,108,117,114,101,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,119,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,112,117,116,73,99,78,83,95,49,57,111,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,119,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,110,117,109,95,103,101,116,73,99,78,83,95,49,57,105,115,116,114,101,97,109,98,117,102,95,105,116,101,114,97,116,111,114,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,119,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,108,108,97,116,101,73,99,69,69,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,119,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,99,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,115,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,55,99,111,100,101,99,118,116,73,68,105,99,49,49,95,95,109,98,115,116,97,116,101,95,116,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,54,118,101,99,116,111,114,73,55,67,111,110,116,97,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,102,97,99,101,116,69,0,0,0,78,83,116,51,95,95,49,54,108,111,99,97,108,101,53,95,95,105,109,112,69,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,53,99,116,121,112,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,49,95,95,98,97,115,105,99,95,115,116,114,105,110,103,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,78,83,116,51,95,95,49,50,48,95,95,118,101,99,116,111,114,95,98,97,115,101,95,99,111,109,109,111,110,73,76,98,49,69,69,69,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,119,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,50,48,95,95,116,105,109,101,95,103,101,116,95,99,95,115,116,111,114,97,103,101,73,99,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,57,95,95,105,111,115,116,114,101,97,109,95,99,97,116,101,103,111,114,121,69,0,0,0,78,83,116,51,95,95,49,49,55,95,95,119,105,100,101,110,95,102,114,111,109,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,78,83,116,51,95,95,49,49,54,95,95,110,97,114,114,111,119,95,116,111,95,117,116,102,56,73,76,106,51,50,69,69,69,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,53,98,97,115,105,99,95,115,116,114,101,97,109,98,117,102,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,101,114,114,111,114,95,99,97,116,101,103,111,114,121,69], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE);
/* memory initializer */ allocate([78,83,116,51,95,95,49,49,52,95,95,115,104,97,114,101,100,95,99,111,117,110,116,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,112,117,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,52,95,95,110,117,109,95,103,101,116,95,98,97,115,101,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,51,109,101,115,115,97,103,101,115,95,98,97,115,101,69,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,111,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,98,97,115,105,99,95,105,115,116,114,101,97,109,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,51,95,95,118,101,99,116,111,114,95,98,97,115,101,73,55,67,111,110,116,97,99,116,78,83,95,57,97,108,108,111,99,97,116,111,114,73,83,49,95,69,69,69,69,0,0,0,0,78,83,116,51,95,95,49,49,50,115,121,115,116,101,109,95,101,114,114,111,114,69,0,0,78,83,116,51,95,95,49,49,50,99,111,100,101,99,118,116,95,98,97,115,101,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,119,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,119,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,119,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,104,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,104,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,104,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,98,97,115,105,99,95,115,116,114,105,110,103,73,99,78,83,95,49,49,99,104,97,114,95,116,114,97,105,116,115,73,99,69,69,78,83,95,57,97,108,108,111,99,97,116,111,114,73,99,69,69,69,69,0,0,78,83,116,51,95,95,49,49,50,95,95,100,111,95,109,101,115,115,97,103,101,69,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,115,116,100,111,117,116,98,117,102,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,112,117,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,119,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,49,95,95,109,111,110,101,121,95,103,101,116,73,99,69,69,0,0,0,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,119,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,49,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,112,117,110,99,116,73,99,76,98,48,69,69,69,0,0,0,0,0,78,83,116,51,95,95,49,49,48,109,111,110,101,121,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,99,116,121,112,101,95,98,97,115,101,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,116,105,109,101,95,112,117,116,69,0,0,0,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,119,69,69,0,78,83,116,51,95,95,49,49,48,95,95,115,116,100,105,110,98,117,102,73,99,69,69,0,78,49,48,101,109,115,99,114,105,112,116,101,110,51,118,97,108,69,0,0,0,0,0,0,78,49,48,101,109,115,99,114,105,112,116,101,110,49,49,109,101,109,111,114,121,95,118,105,101,119,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,51,95,95,102,117,110,100,97,109,101,110,116,97,108,95,116,121,112,101,95,105,110,102,111,69,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,49,95,95,118,109,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,50,48,95,95,115,105,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,57,95,95,112,111,105,110,116,101,114,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,112,98,97,115,101,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,55,95,95,99,108,97,115,115,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,78,49,48,95,95,99,120,120,97,98,105,118,49,49,54,95,95,115,104,105,109,95,116,121,112,101,95,105,110,102,111,69,0,0,0,0,0,0,0,0,68,110,0,0,0,0,0,0,55,67,111,110,116,97,99,116,0,0,0,0,0,0,0,0,176,30,0,0,0,31,0,0,176,30,0,0,88,31,0,0,0,0,0,0,104,31,0,0,0,0,0,0,120,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,136,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,152,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,176,31,0,0,248,45,0,0,0,0,0,0,0,0,0,0,200,31,0,0,0,0,0,0,0,0,0,0,0,0,0,0,216,31,0,0,0,0,0,0,88,49,0,0,0,0,0,0,8,32,0,0,1,0,0,0,88,49,0,0,0,0,0,0,56,32,0,0,216,30,0,0,80,32,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,96,51,0,0,0,0,0,0,216,30,0,0,152,32,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,104,51,0,0,0,0,0,0,216,30,0,0,224,32,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,112,51,0,0,0,0,0,0,216,30,0,0,40,33,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,120,51,0,0,0,0,0,0,0,0,0,0,112,33,0,0,32,48,0,0,0,0,0,0,0,0,0,0,160,33,0,0,32,48,0,0,0,0,0,0,216,30,0,0,208,33,0,0,0,0,0,0,1,0,0,0,64,50,0,0,0,0,0,0,216,30,0,0,232,33,0,0,0,0,0,0,1,0,0,0,64,50,0,0,0,0,0,0,216,30,0,0,0,34,0,0,0,0,0,0,1,0,0,0,72,50,0,0,0,0,0,0,216,30,0,0,24,34,0,0,0,0,0,0,1,0,0,0,72,50,0,0,0,0,0,0,216,30,0,0,48,34,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,16,52,0,0,0,8,0,0,216,30,0,0,120,34,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,16,52,0,0,0,8,0,0,216,30,0,0,192,34,0,0,0,0,0,0,3,0,0,0,112,49,0,0,2,0,0,0,40,46,0,0,2,0,0,0,224,49,0,0,0,8,0,0,216,30,0,0,8,35,0,0,0,0,0,0,3,0,0,0,112,49,0,0,2,0,0,0,40,46,0,0,2,0,0,0,232,49,0,0,0,8,0,0,0,0,0,0,80,35,0,0,112,49,0,0,0,0,0,0,0,0,0,0,104,35,0,0,112,49,0,0,0,0,0,0,216,30,0,0,128,35,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,80,50,0,0,2,0,0,0,216,30,0,0,152,35,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,80,50,0,0,2,0,0,0,0,0,0,0,176,35,0,0,0,0,0,0,200,35,0,0,208,50,0,0,0,0,0,0,216,30,0,0,232,35,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,208,46,0,0,0,0,0,0,216,30,0,0,48,36,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,232,46,0,0,0,0,0,0,216,30,0,0,120,36,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,0,47,0,0,0,0,0,0,216,30,0,0,192,36,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,24,47,0,0,0,0,0,0,0,0,0,0,8,37,0,0,112,49,0,0,0,0,0,0,0,0,0,0,32,37,0,0,112,49,0,0,0,0,0,0,216,30,0,0,56,37,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,224,50,0,0,2,0,0,0,216,30,0,0,96,37,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,224,50,0,0,2,0,0,0,216,30,0,0,136,37,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,224,50,0,0,2,0,0,0,216,30,0,0,176,37,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,224,50,0,0,2,0,0,0,216,30,0,0,216,37,0,0,0,0,0,0,1,0,0,0,184,50,0,0,0,0,0,0,0,0,0,0,8,38,0,0,56,50,0,0,0,0,0,0,0,0,0,0,32,38,0,0,112,49,0,0,0,0,0,0,216,30,0,0,56,38,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,8,52,0,0,2,0,0,0,216,30,0,0,80,38,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,8,52,0,0,2,0,0,0,0,0,0,0,104,38,0,0,0,0,0,0,144,38,0,0,0,0,0,0,184,38,0,0,0,0,0,0,224,38,0,0,0,0,0,0,8,39,0,0,48,51,0,0,0,0,0,0,0,0,0,0,40,39,0,0,56,49,0,0,0,0,0,0,0,0,0,0,80,39,0,0,56,49,0,0,0,0,0,0,0,0,0,0,120,39,0,0,0,0,0,0,176,39,0,0,0,0,0,0,232,39,0,0,0,0,0,0,8,40,0,0,0,0,0,0,40,40,0,0,0,0,0,0,72,40,0,0,0,0,0,0,104,40,0,0,216,30,0,0,128,40,0,0,0,0,0,0,1,0,0,0,176,46,0,0,3,244,255,255,216,30,0,0,176,40,0,0,0,0,0,0,1,0,0,0,192,46,0,0,3,244,255,255,216,30,0,0,224,40,0,0,0,0,0,0,1,0,0,0,176,46,0,0,3,244,255,255,216,30,0,0,16,41,0,0,0,0,0,0,1,0,0,0,192,46,0,0,3,244,255,255,216,30,0,0,64,41,0,0,0,0,0,0,1,0,0,0,216,49,0,0,0,0,0,0,0,0,0,0,120,41,0,0,216,45,0,0,0,0,0,0,0,0,0,0,144,41,0,0,216,30,0,0,168,41,0,0,0,0,0,0,1,0,0,0,208,49,0,0,0,0,0,0,216,30,0,0,232,41,0,0,0,0,0,0,1,0,0,0,208,49,0,0,0,0,0,0,216,30,0,0,40,42,0,0,0,0,0,0,1,0,0,0,208,49,0,0,0,0,0,0,0,0,0,0,104,42,0,0,48,50,0,0,0,0,0,0,0,0,0,0,128,42,0,0,32,50,0,0,0,0,0,0,0,0,0,0,160,42,0,0,40,50,0,0,0,0,0,0,0,0,0,0,192,42,0,0,0,0,0,0,224,42,0,0,0,0,0,0,0,43,0,0,0,0,0,0,32,43,0,0,216,30,0,0,64,43,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,0,52,0,0,2,0,0,0,216,30,0,0,96,43,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,0,52,0,0,2,0,0,0,216,30,0,0,128,43,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,0,52,0,0,2,0,0,0,216,30,0,0,160,43,0,0,0,0,0,0,2,0,0,0,112,49,0,0,2,0,0,0,0,52,0,0,2,0,0,0,0,0,0,0,192,43,0,0,0,0,0,0,216,43,0,0,0,0,0,0,240,43,0,0,0,0,0,0,8,44,0,0,32,50,0,0,0,0,0,0,0,0,0,0,32,44,0,0,40,50,0,0,0,0,0,0,0,0,0,0,56,44,0,0,0,0,0,0,80,44,0,0,0,0,0,0,112,44,0,0,168,52,0,0,0,0,0,0,0,0,0,0,152,44,0,0,152,52,0,0,0,0,0,0,0,0,0,0,192,44,0,0,152,52,0,0,0,0,0,0,0,0,0,0,232,44,0,0,136,52,0,0,0,0,0,0,0,0,0,0,16,45,0,0,168,52,0,0,0,0,0,0,0,0,0,0,56,45,0,0,168,52,0,0,0,0,0,0,0,0,0,0,96,45,0,0,176,45,0,0,0,0,0,0,176,30,0,0,136,45,0,0,0,0,0,0,144,45,0,0,48,49,50,51,52,53,54,55,56,57,97,98,99,100,101,102,65,66,67,68,69,70,120,88,43,45,112,80,105,73,110,78,0,0,0,0,0,0,0,0], "i8", ALLOC_NONE, Runtime.GLOBAL_BASE+10240);
function runPostSets() {

HEAP32[((11696 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11704 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11712 )>>2)]=__ZTISt9exception;
HEAP32[((11720 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11728 )>>2)]=__ZTISt9exception;
HEAP32[((11736 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11744 )>>2)]=__ZTISt9exception;
HEAP32[((11752 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11768 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11776 )>>2)]=__ZTISt9exception;
HEAP32[((11784 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((11800 )>>2)]=(((__ZTVN10__cxxabiv119__pointer_type_infoE+8)|0));
HEAP32[((11816 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((11952 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((11968 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12224 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12240 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12320 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12328 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12472 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12488 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12656 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12672 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12752 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12760 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12768 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12776 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12784 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12800 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12816 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((12832 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12840 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12848 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12856 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12864 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12872 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((12880 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13008 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13024 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13104 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13120 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13136 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13152 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13160 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13168 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13176 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13312 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13320 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13328 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13336 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13352 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13368 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13376 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
HEAP32[((13384 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13400 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13416 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13432 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13448 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13464 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13480 )>>2)]=(((__ZTVN10__cxxabiv120__si_class_type_infoE+8)|0));
HEAP32[((13504 )>>2)]=(((__ZTVN10__cxxabiv117__class_type_infoE+8)|0));
}

var tempDoublePtr = Runtime.alignMemory(allocate(12, "i8", ALLOC_STATIC), 8);

assert(tempDoublePtr % 8 == 0);

function copyTempFloat(ptr) { // functions, because inlining this code increases code size too much

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

}

function copyTempDouble(ptr) {

  HEAP8[tempDoublePtr] = HEAP8[ptr];

  HEAP8[tempDoublePtr+1] = HEAP8[ptr+1];

  HEAP8[tempDoublePtr+2] = HEAP8[ptr+2];

  HEAP8[tempDoublePtr+3] = HEAP8[ptr+3];

  HEAP8[tempDoublePtr+4] = HEAP8[ptr+4];

  HEAP8[tempDoublePtr+5] = HEAP8[ptr+5];

  HEAP8[tempDoublePtr+6] = HEAP8[ptr+6];

  HEAP8[tempDoublePtr+7] = HEAP8[ptr+7];

}


  
  
  function _emscripten_memcpy_big(dest, src, num) {
      HEAPU8.set(HEAPU8.subarray(src, src+num), dest);
      return dest;
    }function _memcpy(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if ((num|0) >= 4096) return _emscripten_memcpy_big(dest|0, src|0, num|0)|0;
      ret = dest|0;
      if ((dest&3) == (src&3)) {
        while (dest & 3) {
          if ((num|0) == 0) return ret|0;
          HEAP8[(dest)]=HEAP8[(src)];
          dest = (dest+1)|0;
          src = (src+1)|0;
          num = (num-1)|0;
        }
        while ((num|0) >= 4) {
          HEAP32[((dest)>>2)]=HEAP32[((src)>>2)];
          dest = (dest+4)|0;
          src = (src+4)|0;
          num = (num-4)|0;
        }
      }
      while ((num|0) > 0) {
        HEAP8[(dest)]=HEAP8[(src)];
        dest = (dest+1)|0;
        src = (src+1)|0;
        num = (num-1)|0;
      }
      return ret|0;
    }var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _llvm_stacksave() {
      var self = _llvm_stacksave;
      if (!self.LLVM_SAVEDSTACKS) {
        self.LLVM_SAVEDSTACKS = [];
      }
      self.LLVM_SAVEDSTACKS.push(Runtime.stackSave());
      return self.LLVM_SAVEDSTACKS.length-1;
    }

  
  function _memset(ptr, value, num) {
      ptr = ptr|0; value = value|0; num = num|0;
      var stop = 0, value4 = 0, stop4 = 0, unaligned = 0;
      stop = (ptr + num)|0;
      if ((num|0) >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        value = value & 0xff;
        unaligned = ptr & 3;
        value4 = value | (value << 8) | (value << 16) | (value << 24);
        stop4 = stop & ~3;
        if (unaligned) {
          unaligned = (ptr + 4 - unaligned)|0;
          while ((ptr|0) < (unaligned|0)) { // no need to check for stop, since we have large num
            HEAP8[(ptr)]=value;
            ptr = (ptr+1)|0;
          }
        }
        while ((ptr|0) < (stop4|0)) {
          HEAP32[((ptr)>>2)]=value4;
          ptr = (ptr+4)|0;
        }
      }
      while ((ptr|0) < (stop|0)) {
        HEAP8[(ptr)]=value;
        ptr = (ptr+1)|0;
      }
      return (ptr-num)|0;
    }var _llvm_memset_p0i8_i32=_memset;

  function _llvm_stackrestore(p) {
      var self = _llvm_stacksave;
      var ret = self.LLVM_SAVEDSTACKS[p];
      self.LLVM_SAVEDSTACKS.splice(p, 1);
      Runtime.stackRestore(ret);
    }

  
  function _rand_r(seedp) {
      seedp = seedp|0; 
      var val = 0;
      val = ((Math_imul(HEAP32[((seedp)>>2)], 31010991)|0) + 0x676e6177 ) & 2147483647; // assumes RAND_MAX is in bit mask form (power of 2 minus 1)
      HEAP32[((seedp)>>2)]=val;
      return val|0;
    }
  
  var ___rand_seed=allocate([0x0273459b, 0, 0, 0], "i32", ALLOC_STATIC);function _rand() {
      return _rand_r(___rand_seed)|0;
    }

  
  
  
  var ERRNO_CODES={EPERM:1,ENOENT:2,ESRCH:3,EINTR:4,EIO:5,ENXIO:6,E2BIG:7,ENOEXEC:8,EBADF:9,ECHILD:10,EAGAIN:11,EWOULDBLOCK:11,ENOMEM:12,EACCES:13,EFAULT:14,ENOTBLK:15,EBUSY:16,EEXIST:17,EXDEV:18,ENODEV:19,ENOTDIR:20,EISDIR:21,EINVAL:22,ENFILE:23,EMFILE:24,ENOTTY:25,ETXTBSY:26,EFBIG:27,ENOSPC:28,ESPIPE:29,EROFS:30,EMLINK:31,EPIPE:32,EDOM:33,ERANGE:34,ENOMSG:42,EIDRM:43,ECHRNG:44,EL2NSYNC:45,EL3HLT:46,EL3RST:47,ELNRNG:48,EUNATCH:49,ENOCSI:50,EL2HLT:51,EDEADLK:35,ENOLCK:37,EBADE:52,EBADR:53,EXFULL:54,ENOANO:55,EBADRQC:56,EBADSLT:57,EDEADLOCK:35,EBFONT:59,ENOSTR:60,ENODATA:61,ETIME:62,ENOSR:63,ENONET:64,ENOPKG:65,EREMOTE:66,ENOLINK:67,EADV:68,ESRMNT:69,ECOMM:70,EPROTO:71,EMULTIHOP:72,EDOTDOT:73,EBADMSG:74,ENOTUNIQ:76,EBADFD:77,EREMCHG:78,ELIBACC:79,ELIBBAD:80,ELIBSCN:81,ELIBMAX:82,ELIBEXEC:83,ENOSYS:38,ENOTEMPTY:39,ENAMETOOLONG:36,ELOOP:40,EOPNOTSUPP:95,EPFNOSUPPORT:96,ECONNRESET:104,ENOBUFS:105,EAFNOSUPPORT:97,EPROTOTYPE:91,ENOTSOCK:88,ENOPROTOOPT:92,ESHUTDOWN:108,ECONNREFUSED:111,EADDRINUSE:98,ECONNABORTED:103,ENETUNREACH:101,ENETDOWN:100,ETIMEDOUT:110,EHOSTDOWN:112,EHOSTUNREACH:113,EINPROGRESS:115,EALREADY:114,EDESTADDRREQ:89,EMSGSIZE:90,EPROTONOSUPPORT:93,ESOCKTNOSUPPORT:94,EADDRNOTAVAIL:99,ENETRESET:102,EISCONN:106,ENOTCONN:107,ETOOMANYREFS:109,EUSERS:87,EDQUOT:122,ESTALE:116,ENOTSUP:95,ENOMEDIUM:123,EILSEQ:84,EOVERFLOW:75,ECANCELED:125,ENOTRECOVERABLE:131,EOWNERDEAD:130,ESTRPIPE:86};
  
  var ERRNO_MESSAGES={0:"Success",1:"Not super-user",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"I/O error",6:"No such device or address",7:"Arg list too long",8:"Exec format error",9:"Bad file number",10:"No children",11:"No more processes",12:"Not enough core",13:"Permission denied",14:"Bad address",15:"Block device required",16:"Mount device busy",17:"File exists",18:"Cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Not a typewriter",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read only file system",31:"Too many links",32:"Broken pipe",33:"Math arg out of domain of func",34:"Math result not representable",35:"File locking deadlock error",36:"File or path name too long",37:"No record locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many symbolic links",42:"No message of desired type",43:"Identifier removed",44:"Channel number out of range",45:"Level 2 not synchronized",46:"Level 3 halted",47:"Level 3 reset",48:"Link number out of range",49:"Protocol driver not attached",50:"No CSI structure available",51:"Level 2 halted",52:"Invalid exchange",53:"Invalid request descriptor",54:"Exchange full",55:"No anode",56:"Invalid request code",57:"Invalid slot",59:"Bad font file fmt",60:"Device not a stream",61:"No data (for no delay io)",62:"Timer expired",63:"Out of streams resources",64:"Machine is not on the network",65:"Package not installed",66:"The object is remote",67:"The link has been severed",68:"Advertise error",69:"Srmount error",70:"Communication error on send",71:"Protocol error",72:"Multihop attempted",73:"Cross mount point (not really error)",74:"Trying to read unreadable message",75:"Value too large for defined data type",76:"Given log. name not unique",77:"f.d. invalid for this operation",78:"Remote address changed",79:"Can   access a needed shared lib",80:"Accessing a corrupted shared lib",81:".lib section in a.out corrupted",82:"Attempting to link in too many libs",83:"Attempting to exec a shared library",84:"Illegal byte sequence",86:"Streams pipe error",87:"Too many users",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Unknown protocol",94:"Socket type not supported",95:"Not supported",96:"Protocol family not supported",97:"Address family not supported by protocol family",98:"Address already in use",99:"Address not available",100:"Network interface is not configured",101:"Network is unreachable",102:"Connection reset by network",103:"Connection aborted",104:"Connection reset by peer",105:"No buffer space available",106:"Socket is already connected",107:"Socket is not connected",108:"Can't send after socket shutdown",109:"Too many references",110:"Connection timed out",111:"Connection refused",112:"Host is down",113:"Host is unreachable",114:"Socket already connected",115:"Connection already in progress",116:"Stale file handle",122:"Quota exceeded",123:"No medium (in tape drive)",125:"Operation canceled",130:"Previous owner died",131:"State not recoverable"};
  
  
  var ___errno_state=0;function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      HEAP32[((___errno_state)>>2)]=value;
      return value;
    }
  
  var PATH={splitPath:function (filename) {
        var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
        return splitPathRe.exec(filename).slice(1);
      },normalizeArray:function (parts, allowAboveRoot) {
        // if the path tries to go above the root, `up` ends up > 0
        var up = 0;
        for (var i = parts.length - 1; i >= 0; i--) {
          var last = parts[i];
          if (last === '.') {
            parts.splice(i, 1);
          } else if (last === '..') {
            parts.splice(i, 1);
            up++;
          } else if (up) {
            parts.splice(i, 1);
            up--;
          }
        }
        // if the path is allowed to go above the root, restore leading ..s
        if (allowAboveRoot) {
          for (; up--; up) {
            parts.unshift('..');
          }
        }
        return parts;
      },normalize:function (path) {
        var isAbsolute = path.charAt(0) === '/',
            trailingSlash = path.substr(-1) === '/';
        // Normalize the path
        path = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), !isAbsolute).join('/');
        if (!path && !isAbsolute) {
          path = '.';
        }
        if (path && trailingSlash) {
          path += '/';
        }
        return (isAbsolute ? '/' : '') + path;
      },dirname:function (path) {
        var result = PATH.splitPath(path),
            root = result[0],
            dir = result[1];
        if (!root && !dir) {
          // No dirname whatsoever
          return '.';
        }
        if (dir) {
          // It has a dirname, strip trailing slash
          dir = dir.substr(0, dir.length - 1);
        }
        return root + dir;
      },basename:function (path) {
        // EMSCRIPTEN return '/'' for '/', not an empty string
        if (path === '/') return '/';
        var lastSlash = path.lastIndexOf('/');
        if (lastSlash === -1) return path;
        return path.substr(lastSlash+1);
      },extname:function (path) {
        return PATH.splitPath(path)[3];
      },join:function () {
        var paths = Array.prototype.slice.call(arguments, 0);
        return PATH.normalize(paths.join('/'));
      },join2:function (l, r) {
        return PATH.normalize(l + '/' + r);
      },resolve:function () {
        var resolvedPath = '',
          resolvedAbsolute = false;
        for (var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--) {
          var path = (i >= 0) ? arguments[i] : FS.cwd();
          // Skip empty and invalid entries
          if (typeof path !== 'string') {
            throw new TypeError('Arguments to path.resolve must be strings');
          } else if (!path) {
            continue;
          }
          resolvedPath = path + '/' + resolvedPath;
          resolvedAbsolute = path.charAt(0) === '/';
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        resolvedPath = PATH.normalizeArray(resolvedPath.split('/').filter(function(p) {
          return !!p;
        }), !resolvedAbsolute).join('/');
        return ((resolvedAbsolute ? '/' : '') + resolvedPath) || '.';
      },relative:function (from, to) {
        from = PATH.resolve(from).substr(1);
        to = PATH.resolve(to).substr(1);
        function trim(arr) {
          var start = 0;
          for (; start < arr.length; start++) {
            if (arr[start] !== '') break;
          }
          var end = arr.length - 1;
          for (; end >= 0; end--) {
            if (arr[end] !== '') break;
          }
          if (start > end) return [];
          return arr.slice(start, end - start + 1);
        }
        var fromParts = trim(from.split('/'));
        var toParts = trim(to.split('/'));
        var length = Math.min(fromParts.length, toParts.length);
        var samePartsLength = length;
        for (var i = 0; i < length; i++) {
          if (fromParts[i] !== toParts[i]) {
            samePartsLength = i;
            break;
          }
        }
        var outputParts = [];
        for (var i = samePartsLength; i < fromParts.length; i++) {
          outputParts.push('..');
        }
        outputParts = outputParts.concat(toParts.slice(samePartsLength));
        return outputParts.join('/');
      }};
  
  var TTY={ttys:[],init:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // currently, FS.init does not distinguish if process.stdin is a file or TTY
        //   // device, it always assumes it's a TTY device. because of this, we're forcing
        //   // process.stdin to UTF8 encoding to at least make stdin reading compatible
        //   // with text files until FS.init can be refactored.
        //   process['stdin']['setEncoding']('utf8');
        // }
      },shutdown:function () {
        // https://github.com/kripken/emscripten/pull/1555
        // if (ENVIRONMENT_IS_NODE) {
        //   // inolen: any idea as to why node -e 'process.stdin.read()' wouldn't exit immediately (with process.stdin being a tty)?
        //   // isaacs: because now it's reading from the stream, you've expressed interest in it, so that read() kicks off a _read() which creates a ReadReq operation
        //   // inolen: I thought read() in that case was a synchronous operation that just grabbed some amount of buffered data if it exists?
        //   // isaacs: it is. but it also triggers a _read() call, which calls readStart() on the handle
        //   // isaacs: do process.stdin.pause() and i'd think it'd probably close the pending call
        //   process['stdin']['pause']();
        // }
      },register:function (dev, ops) {
        TTY.ttys[dev] = { input: [], output: [], ops: ops };
        FS.registerDevice(dev, TTY.stream_ops);
      },stream_ops:{open:function (stream) {
          var tty = TTY.ttys[stream.node.rdev];
          if (!tty) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          stream.tty = tty;
          stream.seekable = false;
        },close:function (stream) {
          // flush any pending line data
          if (stream.tty.output.length) {
            stream.tty.ops.put_char(stream.tty, 10);
          }
        },read:function (stream, buffer, offset, length, pos /* ignored */) {
          if (!stream.tty || !stream.tty.ops.get_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          var bytesRead = 0;
          for (var i = 0; i < length; i++) {
            var result;
            try {
              result = stream.tty.ops.get_char(stream.tty);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            if (result === undefined && bytesRead === 0) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
            if (result === null || result === undefined) break;
            bytesRead++;
            buffer[offset+i] = result;
          }
          if (bytesRead) {
            stream.node.timestamp = Date.now();
          }
          return bytesRead;
        },write:function (stream, buffer, offset, length, pos) {
          if (!stream.tty || !stream.tty.ops.put_char) {
            throw new FS.ErrnoError(ERRNO_CODES.ENXIO);
          }
          for (var i = 0; i < length; i++) {
            try {
              stream.tty.ops.put_char(stream.tty, buffer[offset+i]);
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
          }
          if (length) {
            stream.node.timestamp = Date.now();
          }
          return i;
        }},default_tty_ops:{get_char:function (tty) {
          if (!tty.input.length) {
            var result = null;
            if (ENVIRONMENT_IS_NODE) {
              result = process['stdin']['read']();
              if (!result) {
                if (process['stdin']['_readableState'] && process['stdin']['_readableState']['ended']) {
                  return null;  // EOF
                }
                return undefined;  // no data available
              }
            } else if (typeof window != 'undefined' &&
              typeof window.prompt == 'function') {
              // Browser.
              result = window.prompt('Input: ');  // returns null on cancel
              if (result !== null) {
                result += '\n';
              }
            } else if (typeof readline == 'function') {
              // Command line.
              result = readline();
              if (result !== null) {
                result += '\n';
              }
            }
            if (!result) {
              return null;
            }
            tty.input = intArrayFromString(result, true);
          }
          return tty.input.shift();
        },put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['print'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }},default_tty1_ops:{put_char:function (tty, val) {
          if (val === null || val === 10) {
            Module['printErr'](tty.output.join(''));
            tty.output = [];
          } else {
            tty.output.push(TTY.utf8.processCChar(val));
          }
        }}};
  
  var MEMFS={ops_table:null,CONTENT_OWNING:1,CONTENT_FLEXIBLE:2,CONTENT_FIXED:3,mount:function (mount) {
        return MEMFS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createNode:function (parent, name, mode, dev) {
        if (FS.isBlkdev(mode) || FS.isFIFO(mode)) {
          // no supported
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (!MEMFS.ops_table) {
          MEMFS.ops_table = {
            dir: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                lookup: MEMFS.node_ops.lookup,
                mknod: MEMFS.node_ops.mknod,
                rename: MEMFS.node_ops.rename,
                unlink: MEMFS.node_ops.unlink,
                rmdir: MEMFS.node_ops.rmdir,
                readdir: MEMFS.node_ops.readdir,
                symlink: MEMFS.node_ops.symlink
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek
              }
            },
            file: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: {
                llseek: MEMFS.stream_ops.llseek,
                read: MEMFS.stream_ops.read,
                write: MEMFS.stream_ops.write,
                allocate: MEMFS.stream_ops.allocate,
                mmap: MEMFS.stream_ops.mmap
              }
            },
            link: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr,
                readlink: MEMFS.node_ops.readlink
              },
              stream: {}
            },
            chrdev: {
              node: {
                getattr: MEMFS.node_ops.getattr,
                setattr: MEMFS.node_ops.setattr
              },
              stream: FS.chrdev_stream_ops
            },
          };
        }
        var node = FS.createNode(parent, name, mode, dev);
        if (FS.isDir(node.mode)) {
          node.node_ops = MEMFS.ops_table.dir.node;
          node.stream_ops = MEMFS.ops_table.dir.stream;
          node.contents = {};
        } else if (FS.isFile(node.mode)) {
          node.node_ops = MEMFS.ops_table.file.node;
          node.stream_ops = MEMFS.ops_table.file.stream;
          node.contents = [];
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        } else if (FS.isLink(node.mode)) {
          node.node_ops = MEMFS.ops_table.link.node;
          node.stream_ops = MEMFS.ops_table.link.stream;
        } else if (FS.isChrdev(node.mode)) {
          node.node_ops = MEMFS.ops_table.chrdev.node;
          node.stream_ops = MEMFS.ops_table.chrdev.stream;
        }
        node.timestamp = Date.now();
        // add the new node to the parent
        if (parent) {
          parent.contents[name] = node;
        }
        return node;
      },ensureFlexible:function (node) {
        if (node.contentMode !== MEMFS.CONTENT_FLEXIBLE) {
          var contents = node.contents;
          node.contents = Array.prototype.slice.call(contents);
          node.contentMode = MEMFS.CONTENT_FLEXIBLE;
        }
      },node_ops:{getattr:function (node) {
          var attr = {};
          // device numbers reuse inode numbers.
          attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
          attr.ino = node.id;
          attr.mode = node.mode;
          attr.nlink = 1;
          attr.uid = 0;
          attr.gid = 0;
          attr.rdev = node.rdev;
          if (FS.isDir(node.mode)) {
            attr.size = 4096;
          } else if (FS.isFile(node.mode)) {
            attr.size = node.contents.length;
          } else if (FS.isLink(node.mode)) {
            attr.size = node.link.length;
          } else {
            attr.size = 0;
          }
          attr.atime = new Date(node.timestamp);
          attr.mtime = new Date(node.timestamp);
          attr.ctime = new Date(node.timestamp);
          // NOTE: In our implementation, st_blocks = Math.ceil(st_size/st_blksize),
          //       but this is not required by the standard.
          attr.blksize = 4096;
          attr.blocks = Math.ceil(attr.size / attr.blksize);
          return attr;
        },setattr:function (node, attr) {
          if (attr.mode !== undefined) {
            node.mode = attr.mode;
          }
          if (attr.timestamp !== undefined) {
            node.timestamp = attr.timestamp;
          }
          if (attr.size !== undefined) {
            MEMFS.ensureFlexible(node);
            var contents = node.contents;
            if (attr.size < contents.length) contents.length = attr.size;
            else while (attr.size > contents.length) contents.push(0);
          }
        },lookup:function (parent, name) {
          throw FS.genericErrors[ERRNO_CODES.ENOENT];
        },mknod:function (parent, name, mode, dev) {
          return MEMFS.createNode(parent, name, mode, dev);
        },rename:function (old_node, new_dir, new_name) {
          // if we're overwriting a directory at new_name, make sure it's empty.
          if (FS.isDir(old_node.mode)) {
            var new_node;
            try {
              new_node = FS.lookupNode(new_dir, new_name);
            } catch (e) {
            }
            if (new_node) {
              for (var i in new_node.contents) {
                throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
              }
            }
          }
          // do the internal rewiring
          delete old_node.parent.contents[old_node.name];
          old_node.name = new_name;
          new_dir.contents[new_name] = old_node;
          old_node.parent = new_dir;
        },unlink:function (parent, name) {
          delete parent.contents[name];
        },rmdir:function (parent, name) {
          var node = FS.lookupNode(parent, name);
          for (var i in node.contents) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
          }
          delete parent.contents[name];
        },readdir:function (node) {
          var entries = ['.', '..']
          for (var key in node.contents) {
            if (!node.contents.hasOwnProperty(key)) {
              continue;
            }
            entries.push(key);
          }
          return entries;
        },symlink:function (parent, newname, oldpath) {
          var node = MEMFS.createNode(parent, newname, 511 /* 0777 */ | 40960, 0);
          node.link = oldpath;
          return node;
        },readlink:function (node) {
          if (!FS.isLink(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          return node.link;
        }},stream_ops:{read:function (stream, buffer, offset, length, position) {
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (size > 8 && contents.subarray) { // non-trivial, and typed array
            buffer.set(contents.subarray(position, position + size), offset);
          } else
          {
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          }
          return size;
        },write:function (stream, buffer, offset, length, position, canOwn) {
          var node = stream.node;
          node.timestamp = Date.now();
          var contents = node.contents;
          if (length && contents.length === 0 && position === 0 && buffer.subarray) {
            // just replace it with the new data
            assert(buffer.length);
            if (canOwn && offset === 0) {
              node.contents = buffer; // this could be a subarray of Emscripten HEAP, or allocated from some other source.
              node.contentMode = (buffer.buffer === HEAP8.buffer) ? MEMFS.CONTENT_OWNING : MEMFS.CONTENT_FIXED;
            } else {
              node.contents = new Uint8Array(buffer.subarray(offset, offset+length));
              node.contentMode = MEMFS.CONTENT_FIXED;
            }
            return length;
          }
          MEMFS.ensureFlexible(node);
          var contents = node.contents;
          while (contents.length < position) contents.push(0);
          for (var i = 0; i < length; i++) {
            contents[position + i] = buffer[offset + i];
          }
          return length;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              position += stream.node.contents.length;
            }
          }
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          stream.ungotten = [];
          stream.position = position;
          return position;
        },allocate:function (stream, offset, length) {
          MEMFS.ensureFlexible(stream.node);
          var contents = stream.node.contents;
          var limit = offset + length;
          while (limit > contents.length) contents.push(0);
        },mmap:function (stream, buffer, offset, length, position, prot, flags) {
          if (!FS.isFile(stream.node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
          }
          var ptr;
          var allocated;
          var contents = stream.node.contents;
          // Only make a new copy when MAP_PRIVATE is specified.
          if ( !(flags & 2) &&
                (contents.buffer === buffer || contents.buffer === buffer.buffer) ) {
            // We can't emulate MAP_SHARED when the file is not backed by the buffer
            // we're mapping to (e.g. the HEAP buffer).
            allocated = false;
            ptr = contents.byteOffset;
          } else {
            // Try to avoid unnecessary slices.
            if (position > 0 || position + length < contents.length) {
              if (contents.subarray) {
                contents = contents.subarray(position, position + length);
              } else {
                contents = Array.prototype.slice.call(contents, position, position + length);
              }
            }
            allocated = true;
            ptr = _malloc(length);
            if (!ptr) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOMEM);
            }
            buffer.set(contents, ptr);
          }
          return { ptr: ptr, allocated: allocated };
        }}};
  
  var IDBFS={dbs:{},indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_VERSION:21,DB_STORE_NAME:"FILE_DATA",mount:function (mount) {
        // reuse all of the core MEMFS functionality
        return MEMFS.mount.apply(null, arguments);
      },syncfs:function (mount, populate, callback) {
        IDBFS.getLocalSet(mount, function(err, local) {
          if (err) return callback(err);
  
          IDBFS.getRemoteSet(mount, function(err, remote) {
            if (err) return callback(err);
  
            var src = populate ? remote : local;
            var dst = populate ? local : remote;
  
            IDBFS.reconcile(src, dst, callback);
          });
        });
      },getDB:function (name, callback) {
        // check the cache first
        var db = IDBFS.dbs[name];
        if (db) {
          return callback(null, db);
        }
  
        var req;
        try {
          req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
        } catch (e) {
          return callback(e);
        }
        req.onupgradeneeded = function(e) {
          var db = e.target.result;
          var transaction = e.target.transaction;
  
          var fileStore;
  
          if (db.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) {
            fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
          } else {
            fileStore = db.createObjectStore(IDBFS.DB_STORE_NAME);
          }
  
          fileStore.createIndex('timestamp', 'timestamp', { unique: false });
        };
        req.onsuccess = function() {
          db = req.result;
  
          // add to the cache
          IDBFS.dbs[name] = db;
          callback(null, db);
        };
        req.onerror = function() {
          callback(this.error);
        };
      },getLocalSet:function (mount, callback) {
        var entries = {};
  
        function isRealDir(p) {
          return p !== '.' && p !== '..';
        };
        function toAbsolute(root) {
          return function(p) {
            return PATH.join2(root, p);
          }
        };
  
        var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
  
        while (check.length) {
          var path = check.pop();
          var stat;
  
          try {
            stat = FS.stat(path);
          } catch (e) {
            return callback(e);
          }
  
          if (FS.isDir(stat.mode)) {
            check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
          }
  
          entries[path] = { timestamp: stat.mtime };
        }
  
        return callback(null, { type: 'local', entries: entries });
      },getRemoteSet:function (mount, callback) {
        var entries = {};
  
        IDBFS.getDB(mount.mountpoint, function(err, db) {
          if (err) return callback(err);
  
          var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readonly');
          transaction.onerror = function() { callback(this.error); };
  
          var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
          var index = store.index('timestamp');
  
          index.openKeyCursor().onsuccess = function(event) {
            var cursor = event.target.result;
  
            if (!cursor) {
              return callback(null, { type: 'remote', db: db, entries: entries });
            }
  
            entries[cursor.primaryKey] = { timestamp: cursor.key };
  
            cursor.continue();
          };
        });
      },loadLocalEntry:function (path, callback) {
        var stat, node;
  
        try {
          var lookup = FS.lookupPath(path);
          node = lookup.node;
          stat = FS.stat(path);
        } catch (e) {
          return callback(e);
        }
  
        if (FS.isDir(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode });
        } else if (FS.isFile(stat.mode)) {
          return callback(null, { timestamp: stat.mtime, mode: stat.mode, contents: node.contents });
        } else {
          return callback(new Error('node type not supported'));
        }
      },storeLocalEntry:function (path, entry, callback) {
        try {
          if (FS.isDir(entry.mode)) {
            FS.mkdir(path, entry.mode);
          } else if (FS.isFile(entry.mode)) {
            FS.writeFile(path, entry.contents, { encoding: 'binary', canOwn: true });
          } else {
            return callback(new Error('node type not supported'));
          }
  
          FS.utime(path, entry.timestamp, entry.timestamp);
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },removeLocalEntry:function (path, callback) {
        try {
          var lookup = FS.lookupPath(path);
          var stat = FS.stat(path);
  
          if (FS.isDir(stat.mode)) {
            FS.rmdir(path);
          } else if (FS.isFile(stat.mode)) {
            FS.unlink(path);
          }
        } catch (e) {
          return callback(e);
        }
  
        callback(null);
      },loadRemoteEntry:function (store, path, callback) {
        var req = store.get(path);
        req.onsuccess = function(event) { callback(null, event.target.result); };
        req.onerror = function() { callback(this.error); };
      },storeRemoteEntry:function (store, path, entry, callback) {
        var req = store.put(entry, path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },removeRemoteEntry:function (store, path, callback) {
        var req = store.delete(path);
        req.onsuccess = function() { callback(null); };
        req.onerror = function() { callback(this.error); };
      },reconcile:function (src, dst, callback) {
        var total = 0;
  
        var create = [];
        Object.keys(src.entries).forEach(function (key) {
          var e = src.entries[key];
          var e2 = dst.entries[key];
          if (!e2 || e.timestamp > e2.timestamp) {
            create.push(key);
            total++;
          }
        });
  
        var remove = [];
        Object.keys(dst.entries).forEach(function (key) {
          var e = dst.entries[key];
          var e2 = src.entries[key];
          if (!e2) {
            remove.push(key);
            total++;
          }
        });
  
        if (!total) {
          return callback(null);
        }
  
        var errored = false;
        var completed = 0;
        var db = src.type === 'remote' ? src.db : dst.db;
        var transaction = db.transaction([IDBFS.DB_STORE_NAME], 'readwrite');
        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= total) {
            return callback(null);
          }
        };
  
        transaction.onerror = function() { done(this.error); };
  
        // sort paths in ascending order so directory entries are created
        // before the files inside them
        create.sort().forEach(function (path) {
          if (dst.type === 'local') {
            IDBFS.loadRemoteEntry(store, path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeLocalEntry(path, entry, done);
            });
          } else {
            IDBFS.loadLocalEntry(path, function (err, entry) {
              if (err) return done(err);
              IDBFS.storeRemoteEntry(store, path, entry, done);
            });
          }
        });
  
        // sort paths in descending order so files are deleted before their
        // parent directories
        remove.sort().reverse().forEach(function(path) {
          if (dst.type === 'local') {
            IDBFS.removeLocalEntry(path, done);
          } else {
            IDBFS.removeRemoteEntry(store, path, done);
          }
        });
      }};
  
  var NODEFS={isWindows:false,staticInit:function () {
        NODEFS.isWindows = !!process.platform.match(/^win/);
      },mount:function (mount) {
        assert(ENVIRONMENT_IS_NODE);
        return NODEFS.createNode(null, '/', NODEFS.getMode(mount.opts.root), 0);
      },createNode:function (parent, name, mode, dev) {
        if (!FS.isDir(mode) && !FS.isFile(mode) && !FS.isLink(mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node = FS.createNode(parent, name, mode);
        node.node_ops = NODEFS.node_ops;
        node.stream_ops = NODEFS.stream_ops;
        return node;
      },getMode:function (path) {
        var stat;
        try {
          stat = fs.lstatSync(path);
          if (NODEFS.isWindows) {
            // On Windows, directories return permission bits 'rw-rw-rw-', even though they have 'rwxrwxrwx', so 
            // propagate write bits to execute bits.
            stat.mode = stat.mode | ((stat.mode & 146) >> 1);
          }
        } catch (e) {
          if (!e.code) throw e;
          throw new FS.ErrnoError(ERRNO_CODES[e.code]);
        }
        return stat.mode;
      },realPath:function (node) {
        var parts = [];
        while (node.parent !== node) {
          parts.push(node.name);
          node = node.parent;
        }
        parts.push(node.mount.opts.root);
        parts.reverse();
        return PATH.join.apply(null, parts);
      },flagsToPermissionStringMap:{0:"r",1:"r+",2:"r+",64:"r",65:"r+",66:"r+",129:"rx+",193:"rx+",514:"w+",577:"w",578:"w+",705:"wx",706:"wx+",1024:"a",1025:"a",1026:"a+",1089:"a",1090:"a+",1153:"ax",1154:"ax+",1217:"ax",1218:"ax+",4096:"rs",4098:"rs+"},flagsToPermissionString:function (flags) {
        if (flags in NODEFS.flagsToPermissionStringMap) {
          return NODEFS.flagsToPermissionStringMap[flags];
        } else {
          return flags;
        }
      },node_ops:{getattr:function (node) {
          var path = NODEFS.realPath(node);
          var stat;
          try {
            stat = fs.lstatSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          // node.js v0.10.20 doesn't report blksize and blocks on Windows. Fake them with default blksize of 4096.
          // See http://support.microsoft.com/kb/140365
          if (NODEFS.isWindows && !stat.blksize) {
            stat.blksize = 4096;
          }
          if (NODEFS.isWindows && !stat.blocks) {
            stat.blocks = (stat.size+stat.blksize-1)/stat.blksize|0;
          }
          return {
            dev: stat.dev,
            ino: stat.ino,
            mode: stat.mode,
            nlink: stat.nlink,
            uid: stat.uid,
            gid: stat.gid,
            rdev: stat.rdev,
            size: stat.size,
            atime: stat.atime,
            mtime: stat.mtime,
            ctime: stat.ctime,
            blksize: stat.blksize,
            blocks: stat.blocks
          };
        },setattr:function (node, attr) {
          var path = NODEFS.realPath(node);
          try {
            if (attr.mode !== undefined) {
              fs.chmodSync(path, attr.mode);
              // update the common node structure mode as well
              node.mode = attr.mode;
            }
            if (attr.timestamp !== undefined) {
              var date = new Date(attr.timestamp);
              fs.utimesSync(path, date, date);
            }
            if (attr.size !== undefined) {
              fs.truncateSync(path, attr.size);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },lookup:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          var mode = NODEFS.getMode(path);
          return NODEFS.createNode(parent, name, mode);
        },mknod:function (parent, name, mode, dev) {
          var node = NODEFS.createNode(parent, name, mode, dev);
          // create the backing node for this in the fs root as well
          var path = NODEFS.realPath(node);
          try {
            if (FS.isDir(node.mode)) {
              fs.mkdirSync(path, node.mode);
            } else {
              fs.writeFileSync(path, '', { mode: node.mode });
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return node;
        },rename:function (oldNode, newDir, newName) {
          var oldPath = NODEFS.realPath(oldNode);
          var newPath = PATH.join2(NODEFS.realPath(newDir), newName);
          try {
            fs.renameSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },unlink:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.unlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },rmdir:function (parent, name) {
          var path = PATH.join2(NODEFS.realPath(parent), name);
          try {
            fs.rmdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readdir:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readdirSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },symlink:function (parent, newName, oldPath) {
          var newPath = PATH.join2(NODEFS.realPath(parent), newName);
          try {
            fs.symlinkSync(oldPath, newPath);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },readlink:function (node) {
          var path = NODEFS.realPath(node);
          try {
            return fs.readlinkSync(path);
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        }},stream_ops:{open:function (stream) {
          var path = NODEFS.realPath(stream.node);
          try {
            if (FS.isFile(stream.node.mode)) {
              stream.nfd = fs.openSync(path, NODEFS.flagsToPermissionString(stream.flags));
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },close:function (stream) {
          try {
            if (FS.isFile(stream.node.mode) && stream.nfd) {
              fs.closeSync(stream.nfd);
            }
          } catch (e) {
            if (!e.code) throw e;
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
        },read:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(length);
          var res;
          try {
            res = fs.readSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          if (res > 0) {
            for (var i = 0; i < res; i++) {
              buffer[offset + i] = nbuffer[i];
            }
          }
          return res;
        },write:function (stream, buffer, offset, length, position) {
          // FIXME this is terrible.
          var nbuffer = new Buffer(buffer.subarray(offset, offset + length));
          var res;
          try {
            res = fs.writeSync(stream.nfd, nbuffer, 0, length, position);
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES[e.code]);
          }
          return res;
        },llseek:function (stream, offset, whence) {
          var position = offset;
          if (whence === 1) {  // SEEK_CUR.
            position += stream.position;
          } else if (whence === 2) {  // SEEK_END.
            if (FS.isFile(stream.node.mode)) {
              try {
                var stat = fs.fstatSync(stream.nfd);
                position += stat.size;
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES[e.code]);
              }
            }
          }
  
          if (position < 0) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
  
          stream.position = position;
          return position;
        }}};
  
  var _stdin=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stdout=allocate(1, "i32*", ALLOC_STATIC);
  
  var _stderr=allocate(1, "i32*", ALLOC_STATIC);
  
  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      // we don't currently perform any user-space buffering of data
    }var FS={root:null,mounts:[],devices:[null],streams:[],nextInode:1,nameTable:null,currentPath:"/",initialized:false,ignorePermissions:true,ErrnoError:null,genericErrors:{},handleFSError:function (e) {
        if (!(e instanceof FS.ErrnoError)) throw e + ' : ' + stackTrace();
        return ___setErrNo(e.errno);
      },lookupPath:function (path, opts) {
        path = PATH.resolve(FS.cwd(), path);
        opts = opts || {};
  
        var defaults = {
          follow_mount: true,
          recurse_count: 0
        };
        for (var key in defaults) {
          if (opts[key] === undefined) {
            opts[key] = defaults[key];
          }
        }
  
        if (opts.recurse_count > 8) {  // max recursive lookup of 8
          throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
        }
  
        // split the path
        var parts = PATH.normalizeArray(path.split('/').filter(function(p) {
          return !!p;
        }), false);
  
        // start at the root
        var current = FS.root;
        var current_path = '/';
  
        for (var i = 0; i < parts.length; i++) {
          var islast = (i === parts.length-1);
          if (islast && opts.parent) {
            // stop resolving
            break;
          }
  
          current = FS.lookupNode(current, parts[i]);
          current_path = PATH.join2(current_path, parts[i]);
  
          // jump to the mount's root node if this is a mountpoint
          if (FS.isMountpoint(current)) {
            if (!islast || (islast && opts.follow_mount)) {
              current = current.mounted.root;
            }
          }
  
          // by default, lookupPath will not follow a symlink if it is the final path component.
          // setting opts.follow = true will override this behavior.
          if (!islast || opts.follow) {
            var count = 0;
            while (FS.isLink(current.mode)) {
              var link = FS.readlink(current_path);
              current_path = PATH.resolve(PATH.dirname(current_path), link);
              
              var lookup = FS.lookupPath(current_path, { recurse_count: opts.recurse_count });
              current = lookup.node;
  
              if (count++ > 40) {  // limit max consecutive symlinks to 40 (SYMLOOP_MAX).
                throw new FS.ErrnoError(ERRNO_CODES.ELOOP);
              }
            }
          }
        }
  
        return { path: current_path, node: current };
      },getPath:function (node) {
        var path;
        while (true) {
          if (FS.isRoot(node)) {
            var mount = node.mount.mountpoint;
            if (!path) return mount;
            return mount[mount.length-1] !== '/' ? mount + '/' + path : mount + path;
          }
          path = path ? node.name + '/' + path : node.name;
          node = node.parent;
        }
      },hashName:function (parentid, name) {
        var hash = 0;
  
  
        for (var i = 0; i < name.length; i++) {
          hash = ((hash << 5) - hash + name.charCodeAt(i)) | 0;
        }
        return ((parentid + hash) >>> 0) % FS.nameTable.length;
      },hashAddNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        node.name_next = FS.nameTable[hash];
        FS.nameTable[hash] = node;
      },hashRemoveNode:function (node) {
        var hash = FS.hashName(node.parent.id, node.name);
        if (FS.nameTable[hash] === node) {
          FS.nameTable[hash] = node.name_next;
        } else {
          var current = FS.nameTable[hash];
          while (current) {
            if (current.name_next === node) {
              current.name_next = node.name_next;
              break;
            }
            current = current.name_next;
          }
        }
      },lookupNode:function (parent, name) {
        var err = FS.mayLookup(parent);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        var hash = FS.hashName(parent.id, name);
        for (var node = FS.nameTable[hash]; node; node = node.name_next) {
          var nodeName = node.name;
          if (node.parent.id === parent.id && nodeName === name) {
            return node;
          }
        }
        // if we failed to find it in the cache, call into the VFS
        return FS.lookup(parent, name);
      },createNode:function (parent, name, mode, rdev) {
        if (!FS.FSNode) {
          FS.FSNode = function(parent, name, mode, rdev) {
            if (!parent) {
              parent = this;  // root node sets parent to itself
            }
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {};
            this.stream_ops = {};
            this.rdev = rdev;
          };
  
          FS.FSNode.prototype = {};
  
          // compatibility
          var readMode = 292 | 73;
          var writeMode = 146;
  
          // NOTE we must use Object.defineProperties instead of individual calls to
          // Object.defineProperty in order to make closure compiler happy
          Object.defineProperties(FS.FSNode.prototype, {
            read: {
              get: function() { return (this.mode & readMode) === readMode; },
              set: function(val) { val ? this.mode |= readMode : this.mode &= ~readMode; }
            },
            write: {
              get: function() { return (this.mode & writeMode) === writeMode; },
              set: function(val) { val ? this.mode |= writeMode : this.mode &= ~writeMode; }
            },
            isFolder: {
              get: function() { return FS.isDir(this.mode); },
            },
            isDevice: {
              get: function() { return FS.isChrdev(this.mode); },
            },
          });
        }
  
        var node = new FS.FSNode(parent, name, mode, rdev);
  
        FS.hashAddNode(node);
  
        return node;
      },destroyNode:function (node) {
        FS.hashRemoveNode(node);
      },isRoot:function (node) {
        return node === node.parent;
      },isMountpoint:function (node) {
        return !!node.mounted;
      },isFile:function (mode) {
        return (mode & 61440) === 32768;
      },isDir:function (mode) {
        return (mode & 61440) === 16384;
      },isLink:function (mode) {
        return (mode & 61440) === 40960;
      },isChrdev:function (mode) {
        return (mode & 61440) === 8192;
      },isBlkdev:function (mode) {
        return (mode & 61440) === 24576;
      },isFIFO:function (mode) {
        return (mode & 61440) === 4096;
      },isSocket:function (mode) {
        return (mode & 49152) === 49152;
      },flagModes:{"r":0,"rs":1052672,"r+":2,"w":577,"wx":705,"xw":705,"w+":578,"wx+":706,"xw+":706,"a":1089,"ax":1217,"xa":1217,"a+":1090,"ax+":1218,"xa+":1218},modeStringToFlags:function (str) {
        var flags = FS.flagModes[str];
        if (typeof flags === 'undefined') {
          throw new Error('Unknown file open mode: ' + str);
        }
        return flags;
      },flagsToPermissionString:function (flag) {
        var accmode = flag & 2097155;
        var perms = ['r', 'w', 'rw'][accmode];
        if ((flag & 512)) {
          perms += 'w';
        }
        return perms;
      },nodePermissions:function (node, perms) {
        if (FS.ignorePermissions) {
          return 0;
        }
        // return 0 if any user, group or owner bits are set.
        if (perms.indexOf('r') !== -1 && !(node.mode & 292)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('w') !== -1 && !(node.mode & 146)) {
          return ERRNO_CODES.EACCES;
        } else if (perms.indexOf('x') !== -1 && !(node.mode & 73)) {
          return ERRNO_CODES.EACCES;
        }
        return 0;
      },mayLookup:function (dir) {
        return FS.nodePermissions(dir, 'x');
      },mayCreate:function (dir, name) {
        try {
          var node = FS.lookupNode(dir, name);
          return ERRNO_CODES.EEXIST;
        } catch (e) {
        }
        return FS.nodePermissions(dir, 'wx');
      },mayDelete:function (dir, name, isdir) {
        var node;
        try {
          node = FS.lookupNode(dir, name);
        } catch (e) {
          return e.errno;
        }
        var err = FS.nodePermissions(dir, 'wx');
        if (err) {
          return err;
        }
        if (isdir) {
          if (!FS.isDir(node.mode)) {
            return ERRNO_CODES.ENOTDIR;
          }
          if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) {
            return ERRNO_CODES.EBUSY;
          }
        } else {
          if (FS.isDir(node.mode)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return 0;
      },mayOpen:function (node, flags) {
        if (!node) {
          return ERRNO_CODES.ENOENT;
        }
        if (FS.isLink(node.mode)) {
          return ERRNO_CODES.ELOOP;
        } else if (FS.isDir(node.mode)) {
          if ((flags & 2097155) !== 0 ||  // opening for write
              (flags & 512)) {
            return ERRNO_CODES.EISDIR;
          }
        }
        return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
      },MAX_OPEN_FDS:4096,nextfd:function (fd_start, fd_end) {
        fd_start = fd_start || 0;
        fd_end = fd_end || FS.MAX_OPEN_FDS;
        for (var fd = fd_start; fd <= fd_end; fd++) {
          if (!FS.streams[fd]) {
            return fd;
          }
        }
        throw new FS.ErrnoError(ERRNO_CODES.EMFILE);
      },getStream:function (fd) {
        return FS.streams[fd];
      },createStream:function (stream, fd_start, fd_end) {
        if (!FS.FSStream) {
          FS.FSStream = function(){};
          FS.FSStream.prototype = {};
          // compatibility
          Object.defineProperties(FS.FSStream.prototype, {
            object: {
              get: function() { return this.node; },
              set: function(val) { this.node = val; }
            },
            isRead: {
              get: function() { return (this.flags & 2097155) !== 1; }
            },
            isWrite: {
              get: function() { return (this.flags & 2097155) !== 0; }
            },
            isAppend: {
              get: function() { return (this.flags & 1024); }
            }
          });
        }
        // clone it, so we can return an instance of FSStream
        var newStream = new FS.FSStream();
        for (var p in stream) {
          newStream[p] = stream[p];
        }
        stream = newStream;
        var fd = FS.nextfd(fd_start, fd_end);
        stream.fd = fd;
        FS.streams[fd] = stream;
        return stream;
      },closeStream:function (fd) {
        FS.streams[fd] = null;
      },getStreamFromPtr:function (ptr) {
        return FS.streams[ptr - 1];
      },getPtrForStream:function (stream) {
        return stream ? stream.fd + 1 : 0;
      },chrdev_stream_ops:{open:function (stream) {
          var device = FS.getDevice(stream.node.rdev);
          // override node's stream ops with the device's
          stream.stream_ops = device.stream_ops;
          // forward the open call
          if (stream.stream_ops.open) {
            stream.stream_ops.open(stream);
          }
        },llseek:function () {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }},major:function (dev) {
        return ((dev) >> 8);
      },minor:function (dev) {
        return ((dev) & 0xff);
      },makedev:function (ma, mi) {
        return ((ma) << 8 | (mi));
      },registerDevice:function (dev, ops) {
        FS.devices[dev] = { stream_ops: ops };
      },getDevice:function (dev) {
        return FS.devices[dev];
      },getMounts:function (mount) {
        var mounts = [];
        var check = [mount];
  
        while (check.length) {
          var m = check.pop();
  
          mounts.push(m);
  
          check.push.apply(check, m.mounts);
        }
  
        return mounts;
      },syncfs:function (populate, callback) {
        if (typeof(populate) === 'function') {
          callback = populate;
          populate = false;
        }
  
        var mounts = FS.getMounts(FS.root.mount);
        var completed = 0;
  
        function done(err) {
          if (err) {
            if (!done.errored) {
              done.errored = true;
              return callback(err);
            }
            return;
          }
          if (++completed >= mounts.length) {
            callback(null);
          }
        };
  
        // sync all mounts
        mounts.forEach(function (mount) {
          if (!mount.type.syncfs) {
            return done(null);
          }
          mount.type.syncfs(mount, populate, done);
        });
      },mount:function (type, opts, mountpoint) {
        var root = mountpoint === '/';
        var pseudo = !mountpoint;
        var node;
  
        if (root && FS.root) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        } else if (!root && !pseudo) {
          var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
          mountpoint = lookup.path;  // use the absolute path
          node = lookup.node;
  
          if (FS.isMountpoint(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
          }
  
          if (!FS.isDir(node.mode)) {
            throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
          }
        }
  
        var mount = {
          type: type,
          opts: opts,
          mountpoint: mountpoint,
          mounts: []
        };
  
        // create a root node for the fs
        var mountRoot = type.mount(mount);
        mountRoot.mount = mount;
        mount.root = mountRoot;
  
        if (root) {
          FS.root = mountRoot;
        } else if (node) {
          // set as a mountpoint
          node.mounted = mount;
  
          // add the new mount to the current mount's children
          if (node.mount) {
            node.mount.mounts.push(mount);
          }
        }
  
        return mountRoot;
      },unmount:function (mountpoint) {
        var lookup = FS.lookupPath(mountpoint, { follow_mount: false });
  
        if (!FS.isMountpoint(lookup.node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
  
        // destroy the nodes for this mount, and all its child mounts
        var node = lookup.node;
        var mount = node.mounted;
        var mounts = FS.getMounts(mount);
  
        Object.keys(FS.nameTable).forEach(function (hash) {
          var current = FS.nameTable[hash];
  
          while (current) {
            var next = current.name_next;
  
            if (mounts.indexOf(current.mount) !== -1) {
              FS.destroyNode(current);
            }
  
            current = next;
          }
        });
  
        // no longer a mountpoint
        node.mounted = null;
  
        // remove this mount from the child mounts
        var idx = node.mount.mounts.indexOf(mount);
        assert(idx !== -1);
        node.mount.mounts.splice(idx, 1);
      },lookup:function (parent, name) {
        return parent.node_ops.lookup(parent, name);
      },mknod:function (path, mode, dev) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var err = FS.mayCreate(parent, name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.mknod) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.mknod(parent, name, mode, dev);
      },create:function (path, mode) {
        mode = mode !== undefined ? mode : 438 /* 0666 */;
        mode &= 4095;
        mode |= 32768;
        return FS.mknod(path, mode, 0);
      },mkdir:function (path, mode) {
        mode = mode !== undefined ? mode : 511 /* 0777 */;
        mode &= 511 | 512;
        mode |= 16384;
        return FS.mknod(path, mode, 0);
      },mkdev:function (path, mode, dev) {
        if (typeof(dev) === 'undefined') {
          dev = mode;
          mode = 438 /* 0666 */;
        }
        mode |= 8192;
        return FS.mknod(path, mode, dev);
      },symlink:function (oldpath, newpath) {
        var lookup = FS.lookupPath(newpath, { parent: true });
        var parent = lookup.node;
        var newname = PATH.basename(newpath);
        var err = FS.mayCreate(parent, newname);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.symlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return parent.node_ops.symlink(parent, newname, oldpath);
      },rename:function (old_path, new_path) {
        var old_dirname = PATH.dirname(old_path);
        var new_dirname = PATH.dirname(new_path);
        var old_name = PATH.basename(old_path);
        var new_name = PATH.basename(new_path);
        // parents must exist
        var lookup, old_dir, new_dir;
        try {
          lookup = FS.lookupPath(old_path, { parent: true });
          old_dir = lookup.node;
          lookup = FS.lookupPath(new_path, { parent: true });
          new_dir = lookup.node;
        } catch (e) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // need to be part of the same mount
        if (old_dir.mount !== new_dir.mount) {
          throw new FS.ErrnoError(ERRNO_CODES.EXDEV);
        }
        // source must exist
        var old_node = FS.lookupNode(old_dir, old_name);
        // old path should not be an ancestor of the new path
        var relative = PATH.relative(old_path, new_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        // new path should not be an ancestor of the old path
        relative = PATH.relative(new_path, old_dirname);
        if (relative.charAt(0) !== '.') {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTEMPTY);
        }
        // see if the new path already exists
        var new_node;
        try {
          new_node = FS.lookupNode(new_dir, new_name);
        } catch (e) {
          // not fatal
        }
        // early out if nothing needs to change
        if (old_node === new_node) {
          return;
        }
        // we'll need to delete the old entry
        var isdir = FS.isDir(old_node.mode);
        var err = FS.mayDelete(old_dir, old_name, isdir);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // need delete permissions if we'll be overwriting.
        // need create permissions if new doesn't already exist.
        err = new_node ?
          FS.mayDelete(new_dir, new_name, isdir) :
          FS.mayCreate(new_dir, new_name);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!old_dir.node_ops.rename) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(old_node) || (new_node && FS.isMountpoint(new_node))) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        // if we are going to change the parent, check write permissions
        if (new_dir !== old_dir) {
          err = FS.nodePermissions(old_dir, 'w');
          if (err) {
            throw new FS.ErrnoError(err);
          }
        }
        // remove the node from the lookup hash
        FS.hashRemoveNode(old_node);
        // do the underlying fs rename
        try {
          old_dir.node_ops.rename(old_node, new_dir, new_name);
        } catch (e) {
          throw e;
        } finally {
          // add the node back to the hash (in case node_ops.rename
          // changed its name)
          FS.hashAddNode(old_node);
        }
      },rmdir:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, true);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.rmdir) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.rmdir(parent, name);
        FS.destroyNode(node);
      },readdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        if (!node.node_ops.readdir) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        return node.node_ops.readdir(node);
      },unlink:function (path) {
        var lookup = FS.lookupPath(path, { parent: true });
        var parent = lookup.node;
        var name = PATH.basename(path);
        var node = FS.lookupNode(parent, name);
        var err = FS.mayDelete(parent, name, false);
        if (err) {
          // POSIX says unlink should set EPERM, not EISDIR
          if (err === ERRNO_CODES.EISDIR) err = ERRNO_CODES.EPERM;
          throw new FS.ErrnoError(err);
        }
        if (!parent.node_ops.unlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isMountpoint(node)) {
          throw new FS.ErrnoError(ERRNO_CODES.EBUSY);
        }
        parent.node_ops.unlink(parent, name);
        FS.destroyNode(node);
      },readlink:function (path) {
        var lookup = FS.lookupPath(path);
        var link = lookup.node;
        if (!link.node_ops.readlink) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        return link.node_ops.readlink(link);
      },stat:function (path, dontFollow) {
        var lookup = FS.lookupPath(path, { follow: !dontFollow });
        var node = lookup.node;
        if (!node.node_ops.getattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        return node.node_ops.getattr(node);
      },lstat:function (path) {
        return FS.stat(path, true);
      },chmod:function (path, mode, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          mode: (mode & 4095) | (node.mode & ~4095),
          timestamp: Date.now()
        });
      },lchmod:function (path, mode) {
        FS.chmod(path, mode, true);
      },fchmod:function (fd, mode) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chmod(stream.node, mode);
      },chown:function (path, uid, gid, dontFollow) {
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: !dontFollow });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        node.node_ops.setattr(node, {
          timestamp: Date.now()
          // we ignore the uid / gid for now
        });
      },lchown:function (path, uid, gid) {
        FS.chown(path, uid, gid, true);
      },fchown:function (fd, uid, gid) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        FS.chown(stream.node, uid, gid);
      },truncate:function (path, len) {
        if (len < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var node;
        if (typeof path === 'string') {
          var lookup = FS.lookupPath(path, { follow: true });
          node = lookup.node;
        } else {
          node = path;
        }
        if (!node.node_ops.setattr) {
          throw new FS.ErrnoError(ERRNO_CODES.EPERM);
        }
        if (FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!FS.isFile(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var err = FS.nodePermissions(node, 'w');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        node.node_ops.setattr(node, {
          size: len,
          timestamp: Date.now()
        });
      },ftruncate:function (fd, len) {
        var stream = FS.getStream(fd);
        if (!stream) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        FS.truncate(stream.node, len);
      },utime:function (path, atime, mtime) {
        var lookup = FS.lookupPath(path, { follow: true });
        var node = lookup.node;
        node.node_ops.setattr(node, {
          timestamp: Math.max(atime, mtime)
        });
      },open:function (path, flags, mode, fd_start, fd_end) {
        flags = typeof flags === 'string' ? FS.modeStringToFlags(flags) : flags;
        mode = typeof mode === 'undefined' ? 438 /* 0666 */ : mode;
        if ((flags & 64)) {
          mode = (mode & 4095) | 32768;
        } else {
          mode = 0;
        }
        var node;
        if (typeof path === 'object') {
          node = path;
        } else {
          path = PATH.normalize(path);
          try {
            var lookup = FS.lookupPath(path, {
              follow: !(flags & 131072)
            });
            node = lookup.node;
          } catch (e) {
            // ignore
          }
        }
        // perhaps we need to create the node
        if ((flags & 64)) {
          if (node) {
            // if O_CREAT and O_EXCL are set, error out if the node already exists
            if ((flags & 128)) {
              throw new FS.ErrnoError(ERRNO_CODES.EEXIST);
            }
          } else {
            // node doesn't exist, try to create it
            node = FS.mknod(path, mode, 0);
          }
        }
        if (!node) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOENT);
        }
        // can't truncate a device
        if (FS.isChrdev(node.mode)) {
          flags &= ~512;
        }
        // check permissions
        var err = FS.mayOpen(node, flags);
        if (err) {
          throw new FS.ErrnoError(err);
        }
        // do truncation if necessary
        if ((flags & 512)) {
          FS.truncate(node, 0);
        }
        // we've already handled these, don't pass down to the underlying vfs
        flags &= ~(128 | 512);
  
        // register the stream with the filesystem
        var stream = FS.createStream({
          node: node,
          path: FS.getPath(node),  // we want the absolute path to the node
          flags: flags,
          seekable: true,
          position: 0,
          stream_ops: node.stream_ops,
          // used by the file family libc calls (fopen, fwrite, ferror, etc.)
          ungotten: [],
          error: false
        }, fd_start, fd_end);
        // call the new stream's open function
        if (stream.stream_ops.open) {
          stream.stream_ops.open(stream);
        }
        if (Module['logReadFiles'] && !(flags & 1)) {
          if (!FS.readFiles) FS.readFiles = {};
          if (!(path in FS.readFiles)) {
            FS.readFiles[path] = 1;
            Module['printErr']('read file: ' + path);
          }
        }
        return stream;
      },close:function (stream) {
        try {
          if (stream.stream_ops.close) {
            stream.stream_ops.close(stream);
          }
        } catch (e) {
          throw e;
        } finally {
          FS.closeStream(stream.fd);
        }
      },llseek:function (stream, offset, whence) {
        if (!stream.seekable || !stream.stream_ops.llseek) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        return stream.stream_ops.llseek(stream, offset, whence);
      },read:function (stream, buffer, offset, length, position) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.read) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        var bytesRead = stream.stream_ops.read(stream, buffer, offset, length, position);
        if (!seeking) stream.position += bytesRead;
        return bytesRead;
      },write:function (stream, buffer, offset, length, position, canOwn) {
        if (length < 0 || position < 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (FS.isDir(stream.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.EISDIR);
        }
        if (!stream.stream_ops.write) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        var seeking = true;
        if (typeof position === 'undefined') {
          position = stream.position;
          seeking = false;
        } else if (!stream.seekable) {
          throw new FS.ErrnoError(ERRNO_CODES.ESPIPE);
        }
        if (stream.flags & 1024) {
          // seek to the end before writing in append mode
          FS.llseek(stream, 0, 2);
        }
        var bytesWritten = stream.stream_ops.write(stream, buffer, offset, length, position, canOwn);
        if (!seeking) stream.position += bytesWritten;
        return bytesWritten;
      },allocate:function (stream, offset, length) {
        if (offset < 0 || length <= 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
        }
        if ((stream.flags & 2097155) === 0) {
          throw new FS.ErrnoError(ERRNO_CODES.EBADF);
        }
        if (!FS.isFile(stream.node.mode) && !FS.isDir(node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        if (!stream.stream_ops.allocate) {
          throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
        }
        stream.stream_ops.allocate(stream, offset, length);
      },mmap:function (stream, buffer, offset, length, position, prot, flags) {
        // TODO if PROT is PROT_WRITE, make sure we have write access
        if ((stream.flags & 2097155) === 1) {
          throw new FS.ErrnoError(ERRNO_CODES.EACCES);
        }
        if (!stream.stream_ops.mmap) {
          throw new FS.ErrnoError(ERRNO_CODES.ENODEV);
        }
        return stream.stream_ops.mmap(stream, buffer, offset, length, position, prot, flags);
      },ioctl:function (stream, cmd, arg) {
        if (!stream.stream_ops.ioctl) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTTY);
        }
        return stream.stream_ops.ioctl(stream, cmd, arg);
      },readFile:function (path, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'r';
        opts.encoding = opts.encoding || 'binary';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var ret;
        var stream = FS.open(path, opts.flags);
        var stat = FS.stat(path);
        var length = stat.size;
        var buf = new Uint8Array(length);
        FS.read(stream, buf, 0, length, 0);
        if (opts.encoding === 'utf8') {
          ret = '';
          var utf8 = new Runtime.UTF8Processor();
          for (var i = 0; i < length; i++) {
            ret += utf8.processCChar(buf[i]);
          }
        } else if (opts.encoding === 'binary') {
          ret = buf;
        }
        FS.close(stream);
        return ret;
      },writeFile:function (path, data, opts) {
        opts = opts || {};
        opts.flags = opts.flags || 'w';
        opts.encoding = opts.encoding || 'utf8';
        if (opts.encoding !== 'utf8' && opts.encoding !== 'binary') {
          throw new Error('Invalid encoding type "' + opts.encoding + '"');
        }
        var stream = FS.open(path, opts.flags, opts.mode);
        if (opts.encoding === 'utf8') {
          var utf8 = new Runtime.UTF8Processor();
          var buf = new Uint8Array(utf8.processJSString(data));
          FS.write(stream, buf, 0, buf.length, 0, opts.canOwn);
        } else if (opts.encoding === 'binary') {
          FS.write(stream, data, 0, data.length, 0, opts.canOwn);
        }
        FS.close(stream);
      },cwd:function () {
        return FS.currentPath;
      },chdir:function (path) {
        var lookup = FS.lookupPath(path, { follow: true });
        if (!FS.isDir(lookup.node.mode)) {
          throw new FS.ErrnoError(ERRNO_CODES.ENOTDIR);
        }
        var err = FS.nodePermissions(lookup.node, 'x');
        if (err) {
          throw new FS.ErrnoError(err);
        }
        FS.currentPath = lookup.path;
      },createDefaultDirectories:function () {
        FS.mkdir('/tmp');
      },createDefaultDevices:function () {
        // create /dev
        FS.mkdir('/dev');
        // setup /dev/null
        FS.registerDevice(FS.makedev(1, 3), {
          read: function() { return 0; },
          write: function() { return 0; }
        });
        FS.mkdev('/dev/null', FS.makedev(1, 3));
        // setup /dev/tty and /dev/tty1
        // stderr needs to print output using Module['printErr']
        // so we register a second tty just for it.
        TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
        TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
        FS.mkdev('/dev/tty', FS.makedev(5, 0));
        FS.mkdev('/dev/tty1', FS.makedev(6, 0));
        // we're not going to emulate the actual shm device,
        // just create the tmp dirs that reside in it commonly
        FS.mkdir('/dev/shm');
        FS.mkdir('/dev/shm/tmp');
      },createStandardStreams:function () {
        // TODO deprecate the old functionality of a single
        // input / output callback and that utilizes FS.createDevice
        // and instead require a unique set of stream ops
  
        // by default, we symlink the standard streams to the
        // default tty devices. however, if the standard streams
        // have been overwritten we create a unique device for
        // them instead.
        if (Module['stdin']) {
          FS.createDevice('/dev', 'stdin', Module['stdin']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdin');
        }
        if (Module['stdout']) {
          FS.createDevice('/dev', 'stdout', null, Module['stdout']);
        } else {
          FS.symlink('/dev/tty', '/dev/stdout');
        }
        if (Module['stderr']) {
          FS.createDevice('/dev', 'stderr', null, Module['stderr']);
        } else {
          FS.symlink('/dev/tty1', '/dev/stderr');
        }
  
        // open default streams for the stdin, stdout and stderr devices
        var stdin = FS.open('/dev/stdin', 'r');
        HEAP32[((_stdin)>>2)]=FS.getPtrForStream(stdin);
        assert(stdin.fd === 0, 'invalid handle for stdin (' + stdin.fd + ')');
  
        var stdout = FS.open('/dev/stdout', 'w');
        HEAP32[((_stdout)>>2)]=FS.getPtrForStream(stdout);
        assert(stdout.fd === 1, 'invalid handle for stdout (' + stdout.fd + ')');
  
        var stderr = FS.open('/dev/stderr', 'w');
        HEAP32[((_stderr)>>2)]=FS.getPtrForStream(stderr);
        assert(stderr.fd === 2, 'invalid handle for stderr (' + stderr.fd + ')');
      },ensureErrnoError:function () {
        if (FS.ErrnoError) return;
        FS.ErrnoError = function ErrnoError(errno) {
          this.errno = errno;
          for (var key in ERRNO_CODES) {
            if (ERRNO_CODES[key] === errno) {
              this.code = key;
              break;
            }
          }
          this.message = ERRNO_MESSAGES[errno];
          if (this.stack) this.stack = demangleAll(this.stack);
        };
        FS.ErrnoError.prototype = new Error();
        FS.ErrnoError.prototype.constructor = FS.ErrnoError;
        // Some errors may happen quite a bit, to avoid overhead we reuse them (and suffer a lack of stack info)
        [ERRNO_CODES.ENOENT].forEach(function(code) {
          FS.genericErrors[code] = new FS.ErrnoError(code);
          FS.genericErrors[code].stack = '<generic error, no stack>';
        });
      },staticInit:function () {
        FS.ensureErrnoError();
  
        FS.nameTable = new Array(4096);
  
        FS.mount(MEMFS, {}, '/');
  
        FS.createDefaultDirectories();
        FS.createDefaultDevices();
      },init:function (input, output, error) {
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureErrnoError();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        Module['stdin'] = input || Module['stdin'];
        Module['stdout'] = output || Module['stdout'];
        Module['stderr'] = error || Module['stderr'];
  
        FS.createStandardStreams();
      },quit:function () {
        FS.init.initialized = false;
        for (var i = 0; i < FS.streams.length; i++) {
          var stream = FS.streams[i];
          if (!stream) {
            continue;
          }
          FS.close(stream);
        }
      },getMode:function (canRead, canWrite) {
        var mode = 0;
        if (canRead) mode |= 292 | 73;
        if (canWrite) mode |= 146;
        return mode;
      },joinPath:function (parts, forceRelative) {
        var path = PATH.join.apply(null, parts);
        if (forceRelative && path[0] == '/') path = path.substr(1);
        return path;
      },absolutePath:function (relative, base) {
        return PATH.resolve(base, relative);
      },standardizePath:function (path) {
        return PATH.normalize(path);
      },findObject:function (path, dontResolveLastLink) {
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },analyzePath:function (path, dontResolveLastLink) {
        // operate from within the context of the symlink's target
        try {
          var lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          path = lookup.path;
        } catch (e) {
        }
        var ret = {
          isRoot: false, exists: false, error: 0, name: null, path: null, object: null,
          parentExists: false, parentPath: null, parentObject: null
        };
        try {
          var lookup = FS.lookupPath(path, { parent: true });
          ret.parentExists = true;
          ret.parentPath = lookup.path;
          ret.parentObject = lookup.node;
          ret.name = PATH.basename(path);
          lookup = FS.lookupPath(path, { follow: !dontResolveLastLink });
          ret.exists = true;
          ret.path = lookup.path;
          ret.object = lookup.node;
          ret.name = lookup.node.name;
          ret.isRoot = lookup.path === '/';
        } catch (e) {
          ret.error = e.errno;
        };
        return ret;
      },createFolder:function (parent, name, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.mkdir(path, mode);
      },createPath:function (parent, path, canRead, canWrite) {
        parent = typeof parent === 'string' ? parent : FS.getPath(parent);
        var parts = path.split('/').reverse();
        while (parts.length) {
          var part = parts.pop();
          if (!part) continue;
          var current = PATH.join2(parent, part);
          try {
            FS.mkdir(current);
          } catch (e) {
            // ignore EEXIST
          }
          parent = current;
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(canRead, canWrite);
        return FS.create(path, mode);
      },createDataFile:function (parent, name, data, canRead, canWrite, canOwn) {
        var path = name ? PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name) : parent;
        var mode = FS.getMode(canRead, canWrite);
        var node = FS.create(path, mode);
        if (data) {
          if (typeof data === 'string') {
            var arr = new Array(data.length);
            for (var i = 0, len = data.length; i < len; ++i) arr[i] = data.charCodeAt(i);
            data = arr;
          }
          // make sure we can write to the file
          FS.chmod(node, mode | 146);
          var stream = FS.open(node, 'w');
          FS.write(stream, data, 0, data.length, 0, canOwn);
          FS.close(stream);
          FS.chmod(node, mode);
        }
        return node;
      },createDevice:function (parent, name, input, output) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        var mode = FS.getMode(!!input, !!output);
        if (!FS.createDevice.major) FS.createDevice.major = 64;
        var dev = FS.makedev(FS.createDevice.major++, 0);
        // Create a fake device that a set of stream ops to emulate
        // the old behavior.
        FS.registerDevice(dev, {
          open: function(stream) {
            stream.seekable = false;
          },
          close: function(stream) {
            // flush any pending line data
            if (output && output.buffer && output.buffer.length) {
              output(10);
            }
          },
          read: function(stream, buffer, offset, length, pos /* ignored */) {
            var bytesRead = 0;
            for (var i = 0; i < length; i++) {
              var result;
              try {
                result = input();
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
              if (result === undefined && bytesRead === 0) {
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              buffer[offset+i] = result;
            }
            if (bytesRead) {
              stream.node.timestamp = Date.now();
            }
            return bytesRead;
          },
          write: function(stream, buffer, offset, length, pos) {
            for (var i = 0; i < length; i++) {
              try {
                output(buffer[offset+i]);
              } catch (e) {
                throw new FS.ErrnoError(ERRNO_CODES.EIO);
              }
            }
            if (length) {
              stream.node.timestamp = Date.now();
            }
            return i;
          }
        });
        return FS.mkdev(path, mode, dev);
      },createLink:function (parent, name, target, canRead, canWrite) {
        var path = PATH.join2(typeof parent === 'string' ? parent : FS.getPath(parent), name);
        return FS.symlink(target, path);
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
        // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
        function LazyUint8Array() {
          this.lengthKnown = false;
          this.chunks = []; // Loaded chunks. Index is the chunk number
        }
        LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
          if (idx > this.length-1 || idx < 0) {
            return undefined;
          }
          var chunkOffset = idx % this.chunkSize;
          var chunkNum = Math.floor(idx / this.chunkSize);
          return this.getter(chunkNum)[chunkOffset];
        }
        LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
          this.getter = getter;
        }
        LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
            // Find length
            var xhr = new XMLHttpRequest();
            xhr.open('HEAD', url, false);
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            var datalength = Number(xhr.getResponseHeader("Content-length"));
            var header;
            var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
            var chunkSize = 1024*1024; // Chunk size in bytes
  
            if (!hasByteServing) chunkSize = datalength;
  
            // Function to get a range from the remote URL.
            var doXHR = (function(from, to) {
              if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
              if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
  
              // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
              var xhr = new XMLHttpRequest();
              xhr.open('GET', url, false);
              if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
  
              // Some hints to the browser that we want binary data.
              if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
              if (xhr.overrideMimeType) {
                xhr.overrideMimeType('text/plain; charset=x-user-defined');
              }
  
              xhr.send(null);
              if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
              if (xhr.response !== undefined) {
                return new Uint8Array(xhr.response || []);
              } else {
                return intArrayFromString(xhr.responseText || '', true);
              }
            });
            var lazyArray = this;
            lazyArray.setDataGetter(function(chunkNum) {
              var start = chunkNum * chunkSize;
              var end = (chunkNum+1) * chunkSize - 1; // including this byte
              end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
                lazyArray.chunks[chunkNum] = doXHR(start, end);
              }
              if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
              return lazyArray.chunks[chunkNum];
            });
  
            this._length = datalength;
            this._chunkSize = chunkSize;
            this.lengthKnown = true;
        }
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          var lazyArray = new LazyUint8Array();
          Object.defineProperty(lazyArray, "length", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._length;
              }
          });
          Object.defineProperty(lazyArray, "chunkSize", {
              get: function() {
                  if(!this.lengthKnown) {
                      this.cacheLength();
                  }
                  return this._chunkSize;
              }
          });
  
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        var node = FS.createFile(parent, name, properties, canRead, canWrite);
        // This is a total hack, but I want to get this lazy file code out of the
        // core of MEMFS. If we want to keep this lazy file concept I feel it should
        // be its own thin LAZYFS proxying calls to MEMFS.
        if (properties.contents) {
          node.contents = properties.contents;
        } else if (properties.url) {
          node.contents = null;
          node.url = properties.url;
        }
        // override each stream op with one that tries to force load the lazy file first
        var stream_ops = {};
        var keys = Object.keys(node.stream_ops);
        keys.forEach(function(key) {
          var fn = node.stream_ops[key];
          stream_ops[key] = function forceLoadLazyFile() {
            if (!FS.forceLoadFile(node)) {
              throw new FS.ErrnoError(ERRNO_CODES.EIO);
            }
            return fn.apply(null, arguments);
          };
        });
        // use a custom read function
        stream_ops.read = function stream_ops_read(stream, buffer, offset, length, position) {
          if (!FS.forceLoadFile(node)) {
            throw new FS.ErrnoError(ERRNO_CODES.EIO);
          }
          var contents = stream.node.contents;
          if (position >= contents.length)
            return 0;
          var size = Math.min(contents.length - position, length);
          assert(size >= 0);
          if (contents.slice) { // normal array
            for (var i = 0; i < size; i++) {
              buffer[offset + i] = contents[position + i];
            }
          } else {
            for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
              buffer[offset + i] = contents.get(position + i);
            }
          }
          return size;
        };
        node.stream_ops = stream_ops;
        return node;
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn) {
        Browser.init();
        // TODO we should allow people to just pass in a complete filename instead
        // of parent and name being that we just join them anyways
        var fullname = name ? PATH.resolve(PATH.join2(parent, name)) : parent;
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite, canOwn);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },indexedDB:function () {
        return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
      },DB_NAME:function () {
        return 'EM_FS_' + window.location.pathname;
      },DB_VERSION:20,DB_STORE_NAME:"FILE_DATA",saveFilesToDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
          console.log('creating db');
          var db = openRequest.result;
          db.createObjectStore(FS.DB_STORE_NAME);
        };
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          var transaction = db.transaction([FS.DB_STORE_NAME], 'readwrite');
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var putRequest = files.put(FS.analyzePath(path).object.contents, path);
            putRequest.onsuccess = function putRequest_onsuccess() { ok++; if (ok + fail == total) finish() };
            putRequest.onerror = function putRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      },loadFilesFromDB:function (paths, onload, onerror) {
        onload = onload || function(){};
        onerror = onerror || function(){};
        var indexedDB = FS.indexedDB();
        try {
          var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
        } catch (e) {
          return onerror(e);
        }
        openRequest.onupgradeneeded = onerror; // no database to load from
        openRequest.onsuccess = function openRequest_onsuccess() {
          var db = openRequest.result;
          try {
            var transaction = db.transaction([FS.DB_STORE_NAME], 'readonly');
          } catch(e) {
            onerror(e);
            return;
          }
          var files = transaction.objectStore(FS.DB_STORE_NAME);
          var ok = 0, fail = 0, total = paths.length;
          function finish() {
            if (fail == 0) onload(); else onerror();
          }
          paths.forEach(function(path) {
            var getRequest = files.get(path);
            getRequest.onsuccess = function getRequest_onsuccess() {
              if (FS.analyzePath(path).exists) {
                FS.unlink(path);
              }
              FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
              ok++;
              if (ok + fail == total) finish();
            };
            getRequest.onerror = function getRequest_onerror() { fail++; if (ok + fail == total) finish() };
          });
          transaction.onerror = onerror;
        };
        openRequest.onerror = onerror;
      }};
  
  
  
  
  function _mkport() { throw 'TODO' }var SOCKFS={mount:function (mount) {
        return FS.createNode(null, '/', 16384 | 511 /* 0777 */, 0);
      },createSocket:function (family, type, protocol) {
        var streaming = type == 1;
        if (protocol) {
          assert(streaming == (protocol == 6)); // if SOCK_STREAM, must be tcp
        }
  
        // create our internal socket structure
        var sock = {
          family: family,
          type: type,
          protocol: protocol,
          server: null,
          peers: {},
          pending: [],
          recv_queue: [],
          sock_ops: SOCKFS.websocket_sock_ops
        };
  
        // create the filesystem node to store the socket structure
        var name = SOCKFS.nextname();
        var node = FS.createNode(SOCKFS.root, name, 49152, 0);
        node.sock = sock;
  
        // and the wrapping stream that enables library functions such
        // as read and write to indirectly interact with the socket
        var stream = FS.createStream({
          path: name,
          node: node,
          flags: FS.modeStringToFlags('r+'),
          seekable: false,
          stream_ops: SOCKFS.stream_ops
        });
  
        // map the new stream to the socket structure (sockets have a 1:1
        // relationship with a stream)
        sock.stream = stream;
  
        return sock;
      },getSocket:function (fd) {
        var stream = FS.getStream(fd);
        if (!stream || !FS.isSocket(stream.node.mode)) {
          return null;
        }
        return stream.node.sock;
      },stream_ops:{poll:function (stream) {
          var sock = stream.node.sock;
          return sock.sock_ops.poll(sock);
        },ioctl:function (stream, request, varargs) {
          var sock = stream.node.sock;
          return sock.sock_ops.ioctl(sock, request, varargs);
        },read:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          var msg = sock.sock_ops.recvmsg(sock, length);
          if (!msg) {
            // socket is closed
            return 0;
          }
          buffer.set(msg.buffer, offset);
          return msg.buffer.length;
        },write:function (stream, buffer, offset, length, position /* ignored */) {
          var sock = stream.node.sock;
          return sock.sock_ops.sendmsg(sock, buffer, offset, length);
        },close:function (stream) {
          var sock = stream.node.sock;
          sock.sock_ops.close(sock);
        }},nextname:function () {
        if (!SOCKFS.nextname.current) {
          SOCKFS.nextname.current = 0;
        }
        return 'socket[' + (SOCKFS.nextname.current++) + ']';
      },websocket_sock_ops:{createPeer:function (sock, addr, port) {
          var ws;
  
          if (typeof addr === 'object') {
            ws = addr;
            addr = null;
            port = null;
          }
  
          if (ws) {
            // for sockets that've already connected (e.g. we're the server)
            // we can inspect the _socket property for the address
            if (ws._socket) {
              addr = ws._socket.remoteAddress;
              port = ws._socket.remotePort;
            }
            // if we're just now initializing a connection to the remote,
            // inspect the url property
            else {
              var result = /ws[s]?:\/\/([^:]+):(\d+)/.exec(ws.url);
              if (!result) {
                throw new Error('WebSocket URL must be in the format ws(s)://address:port');
              }
              addr = result[1];
              port = parseInt(result[2], 10);
            }
          } else {
            // create the actual websocket object and connect
            try {
              // runtimeConfig gets set to true if WebSocket runtime configuration is available.
              var runtimeConfig = (Module['websocket'] && ('object' === typeof Module['websocket']));
  
              // The default value is 'ws://' the replace is needed because the compiler replaces "//" comments with '#'
              // comments without checking context, so we'd end up with ws:#, the replace swaps the "#" for "//" again.
              var url = 'ws:#'.replace('#', '//');
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['url']) {
                  url = Module['websocket']['url']; // Fetch runtime WebSocket URL config.
                }
              }
  
              if (url === 'ws://' || url === 'wss://') { // Is the supplied URL config just a prefix, if so complete it.
                url = url + addr + ':' + port;
              }
  
              // Make the WebSocket subprotocol (Sec-WebSocket-Protocol) default to binary if no configuration is set.
              var subProtocols = 'binary'; // The default value is 'binary'
  
              if (runtimeConfig) {
                if ('string' === typeof Module['websocket']['subprotocol']) {
                  subProtocols = Module['websocket']['subprotocol']; // Fetch runtime WebSocket subprotocol config.
                }
              }
  
              // The regex trims the string (removes spaces at the beginning and end, then splits the string by
              // <any space>,<any space> into an Array. Whitespace removal is important for Websockify and ws.
              subProtocols = subProtocols.replace(/^ +| +$/g,"").split(/ *, */);
  
              // The node ws library API for specifying optional subprotocol is slightly different than the browser's.
              var opts = ENVIRONMENT_IS_NODE ? {'protocol': subProtocols.toString()} : subProtocols;
  
              // If node we use the ws library.
              var WebSocket = ENVIRONMENT_IS_NODE ? require('ws') : window['WebSocket'];
              ws = new WebSocket(url, opts);
              ws.binaryType = 'arraybuffer';
            } catch (e) {
              throw new FS.ErrnoError(ERRNO_CODES.EHOSTUNREACH);
            }
          }
  
  
          var peer = {
            addr: addr,
            port: port,
            socket: ws,
            dgram_send_queue: []
          };
  
          SOCKFS.websocket_sock_ops.addPeer(sock, peer);
          SOCKFS.websocket_sock_ops.handlePeerEvents(sock, peer);
  
          // if this is a bound dgram socket, send the port number first to allow
          // us to override the ephemeral port reported to us by remotePort on the
          // remote end.
          if (sock.type === 2 && typeof sock.sport !== 'undefined') {
            peer.dgram_send_queue.push(new Uint8Array([
                255, 255, 255, 255,
                'p'.charCodeAt(0), 'o'.charCodeAt(0), 'r'.charCodeAt(0), 't'.charCodeAt(0),
                ((sock.sport & 0xff00) >> 8) , (sock.sport & 0xff)
            ]));
          }
  
          return peer;
        },getPeer:function (sock, addr, port) {
          return sock.peers[addr + ':' + port];
        },addPeer:function (sock, peer) {
          sock.peers[peer.addr + ':' + peer.port] = peer;
        },removePeer:function (sock, peer) {
          delete sock.peers[peer.addr + ':' + peer.port];
        },handlePeerEvents:function (sock, peer) {
          var first = true;
  
          var handleOpen = function () {
            try {
              var queued = peer.dgram_send_queue.shift();
              while (queued) {
                peer.socket.send(queued);
                queued = peer.dgram_send_queue.shift();
              }
            } catch (e) {
              // not much we can do here in the way of proper error handling as we've already
              // lied and said this data was sent. shut it down.
              peer.socket.close();
            }
          };
  
          function handleMessage(data) {
            assert(typeof data !== 'string' && data.byteLength !== undefined);  // must receive an ArrayBuffer
            data = new Uint8Array(data);  // make a typed array view on the array buffer
  
  
            // if this is the port message, override the peer's port with it
            var wasfirst = first;
            first = false;
            if (wasfirst &&
                data.length === 10 &&
                data[0] === 255 && data[1] === 255 && data[2] === 255 && data[3] === 255 &&
                data[4] === 'p'.charCodeAt(0) && data[5] === 'o'.charCodeAt(0) && data[6] === 'r'.charCodeAt(0) && data[7] === 't'.charCodeAt(0)) {
              // update the peer's port and it's key in the peer map
              var newport = ((data[8] << 8) | data[9]);
              SOCKFS.websocket_sock_ops.removePeer(sock, peer);
              peer.port = newport;
              SOCKFS.websocket_sock_ops.addPeer(sock, peer);
              return;
            }
  
            sock.recv_queue.push({ addr: peer.addr, port: peer.port, data: data });
          };
  
          if (ENVIRONMENT_IS_NODE) {
            peer.socket.on('open', handleOpen);
            peer.socket.on('message', function(data, flags) {
              if (!flags.binary) {
                return;
              }
              handleMessage((new Uint8Array(data)).buffer);  // copy from node Buffer -> ArrayBuffer
            });
            peer.socket.on('error', function() {
              // don't throw
            });
          } else {
            peer.socket.onopen = handleOpen;
            peer.socket.onmessage = function peer_socket_onmessage(event) {
              handleMessage(event.data);
            };
          }
        },poll:function (sock) {
          if (sock.type === 1 && sock.server) {
            // listen sockets should only say they're available for reading
            // if there are pending clients.
            return sock.pending.length ? (64 | 1) : 0;
          }
  
          var mask = 0;
          var dest = sock.type === 1 ?  // we only care about the socket state for connection-based sockets
            SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport) :
            null;
  
          if (sock.recv_queue.length ||
              !dest ||  // connection-less sockets are always ready to read
              (dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {  // let recv return 0 once closed
            mask |= (64 | 1);
          }
  
          if (!dest ||  // connection-less sockets are always ready to write
              (dest && dest.socket.readyState === dest.socket.OPEN)) {
            mask |= 4;
          }
  
          if ((dest && dest.socket.readyState === dest.socket.CLOSING) ||
              (dest && dest.socket.readyState === dest.socket.CLOSED)) {
            mask |= 16;
          }
  
          return mask;
        },ioctl:function (sock, request, arg) {
          switch (request) {
            case 21531:
              var bytes = 0;
              if (sock.recv_queue.length) {
                bytes = sock.recv_queue[0].data.length;
              }
              HEAP32[((arg)>>2)]=bytes;
              return 0;
            default:
              return ERRNO_CODES.EINVAL;
          }
        },close:function (sock) {
          // if we've spawned a listen server, close it
          if (sock.server) {
            try {
              sock.server.close();
            } catch (e) {
            }
            sock.server = null;
          }
          // close any peer connections
          var peers = Object.keys(sock.peers);
          for (var i = 0; i < peers.length; i++) {
            var peer = sock.peers[peers[i]];
            try {
              peer.socket.close();
            } catch (e) {
            }
            SOCKFS.websocket_sock_ops.removePeer(sock, peer);
          }
          return 0;
        },bind:function (sock, addr, port) {
          if (typeof sock.saddr !== 'undefined' || typeof sock.sport !== 'undefined') {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already bound
          }
          sock.saddr = addr;
          sock.sport = port || _mkport();
          // in order to emulate dgram sockets, we need to launch a listen server when
          // binding on a connection-less socket
          // note: this is only required on the server side
          if (sock.type === 2) {
            // close the existing server if it exists
            if (sock.server) {
              sock.server.close();
              sock.server = null;
            }
            // swallow error operation not supported error that occurs when binding in the
            // browser where this isn't supported
            try {
              sock.sock_ops.listen(sock, 0);
            } catch (e) {
              if (!(e instanceof FS.ErrnoError)) throw e;
              if (e.errno !== ERRNO_CODES.EOPNOTSUPP) throw e;
            }
          }
        },connect:function (sock, addr, port) {
          if (sock.server) {
            throw new FS.ErrnoError(ERRNO_CODS.EOPNOTSUPP);
          }
  
          // TODO autobind
          // if (!sock.addr && sock.type == 2) {
          // }
  
          // early out if we're already connected / in the middle of connecting
          if (typeof sock.daddr !== 'undefined' && typeof sock.dport !== 'undefined') {
            var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
            if (dest) {
              if (dest.socket.readyState === dest.socket.CONNECTING) {
                throw new FS.ErrnoError(ERRNO_CODES.EALREADY);
              } else {
                throw new FS.ErrnoError(ERRNO_CODES.EISCONN);
              }
            }
          }
  
          // add the socket to our peer list and set our
          // destination address / port to match
          var peer = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
          sock.daddr = peer.addr;
          sock.dport = peer.port;
  
          // always "fail" in non-blocking mode
          throw new FS.ErrnoError(ERRNO_CODES.EINPROGRESS);
        },listen:function (sock, backlog) {
          if (!ENVIRONMENT_IS_NODE) {
            throw new FS.ErrnoError(ERRNO_CODES.EOPNOTSUPP);
          }
          if (sock.server) {
             throw new FS.ErrnoError(ERRNO_CODES.EINVAL);  // already listening
          }
          var WebSocketServer = require('ws').Server;
          var host = sock.saddr;
          sock.server = new WebSocketServer({
            host: host,
            port: sock.sport
            // TODO support backlog
          });
  
          sock.server.on('connection', function(ws) {
            if (sock.type === 1) {
              var newsock = SOCKFS.createSocket(sock.family, sock.type, sock.protocol);
  
              // create a peer on the new socket
              var peer = SOCKFS.websocket_sock_ops.createPeer(newsock, ws);
              newsock.daddr = peer.addr;
              newsock.dport = peer.port;
  
              // push to queue for accept to pick up
              sock.pending.push(newsock);
            } else {
              // create a peer on the listen socket so calling sendto
              // with the listen socket and an address will resolve
              // to the correct client
              SOCKFS.websocket_sock_ops.createPeer(sock, ws);
            }
          });
          sock.server.on('closed', function() {
            sock.server = null;
          });
          sock.server.on('error', function() {
            // don't throw
          });
        },accept:function (listensock) {
          if (!listensock.server) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
          var newsock = listensock.pending.shift();
          newsock.stream.flags = listensock.stream.flags;
          return newsock;
        },getname:function (sock, peer) {
          var addr, port;
          if (peer) {
            if (sock.daddr === undefined || sock.dport === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            }
            addr = sock.daddr;
            port = sock.dport;
          } else {
            // TODO saddr and sport will be set for bind()'d UDP sockets, but what
            // should we be returning for TCP sockets that've been connect()'d?
            addr = sock.saddr || 0;
            port = sock.sport || 0;
          }
          return { addr: addr, port: port };
        },sendmsg:function (sock, buffer, offset, length, addr, port) {
          if (sock.type === 2) {
            // connection-less sockets will honor the message address,
            // and otherwise fall back to the bound destination address
            if (addr === undefined || port === undefined) {
              addr = sock.daddr;
              port = sock.dport;
            }
            // if there was no address to fall back to, error out
            if (addr === undefined || port === undefined) {
              throw new FS.ErrnoError(ERRNO_CODES.EDESTADDRREQ);
            }
          } else {
            // connection-based sockets will only use the bound
            addr = sock.daddr;
            port = sock.dport;
          }
  
          // find the peer for the destination address
          var dest = SOCKFS.websocket_sock_ops.getPeer(sock, addr, port);
  
          // early out if not connected with a connection-based socket
          if (sock.type === 1) {
            if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
              throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
            } else if (dest.socket.readyState === dest.socket.CONNECTING) {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // create a copy of the incoming data to send, as the WebSocket API
          // doesn't work entirely with an ArrayBufferView, it'll just send
          // the entire underlying buffer
          var data;
          if (buffer instanceof Array || buffer instanceof ArrayBuffer) {
            data = buffer.slice(offset, offset + length);
          } else {  // ArrayBufferView
            data = buffer.buffer.slice(buffer.byteOffset + offset, buffer.byteOffset + offset + length);
          }
  
          // if we're emulating a connection-less dgram socket and don't have
          // a cached connection, queue the buffer to send upon connect and
          // lie, saying the data was sent now.
          if (sock.type === 2) {
            if (!dest || dest.socket.readyState !== dest.socket.OPEN) {
              // if we're not connected, open a new connection
              if (!dest || dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                dest = SOCKFS.websocket_sock_ops.createPeer(sock, addr, port);
              }
              dest.dgram_send_queue.push(data);
              return length;
            }
          }
  
          try {
            // send the actual data
            dest.socket.send(data);
            return length;
          } catch (e) {
            throw new FS.ErrnoError(ERRNO_CODES.EINVAL);
          }
        },recvmsg:function (sock, length) {
          // http://pubs.opengroup.org/onlinepubs/7908799/xns/recvmsg.html
          if (sock.type === 1 && sock.server) {
            // tcp servers should not be recv()'ing on the listen socket
            throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
          }
  
          var queued = sock.recv_queue.shift();
          if (!queued) {
            if (sock.type === 1) {
              var dest = SOCKFS.websocket_sock_ops.getPeer(sock, sock.daddr, sock.dport);
  
              if (!dest) {
                // if we have a destination address but are not connected, error out
                throw new FS.ErrnoError(ERRNO_CODES.ENOTCONN);
              }
              else if (dest.socket.readyState === dest.socket.CLOSING || dest.socket.readyState === dest.socket.CLOSED) {
                // return null if the socket has closed
                return null;
              }
              else {
                // else, our socket is in a valid state but truly has nothing available
                throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
              }
            } else {
              throw new FS.ErrnoError(ERRNO_CODES.EAGAIN);
            }
          }
  
          // queued.data will be an ArrayBuffer if it's unadulterated, but if it's
          // requeued TCP data it'll be an ArrayBufferView
          var queuedLength = queued.data.byteLength || queued.data.length;
          var queuedOffset = queued.data.byteOffset || 0;
          var queuedBuffer = queued.data.buffer || queued.data;
          var bytesRead = Math.min(length, queuedLength);
          var res = {
            buffer: new Uint8Array(queuedBuffer, queuedOffset, bytesRead),
            addr: queued.addr,
            port: queued.port
          };
  
  
          // push back any unread data for TCP connections
          if (sock.type === 1 && bytesRead < queuedLength) {
            var bytesRemaining = queuedLength - bytesRead;
            queued.data = new Uint8Array(queuedBuffer, queuedOffset + bytesRead, bytesRemaining);
            sock.recv_queue.unshift(queued);
          }
  
          return res;
        }}};function _send(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _write(fd, buf, len);
    }
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.write(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }
  
  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) return -1;
      return stream.fd;
    }function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var fd = _fileno(stream);
      var bytesWritten = _write(fd, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        var streamObj = FS.getStreamFromPtr(stream);
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }
  
  
  function _strlen(ptr) {
      ptr = ptr|0;
      var curr = 0;
      curr = ptr;
      while (HEAP8[(curr)]) {
        curr = (curr + 1)|0;
      }
      return (curr - ptr)|0;
    }
  
  function __reallyNegative(x) {
      return x < 0 || (x === 0 && (1/x) === -Infinity);
    }function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = HEAPF64[(((varargs)+(argIndex))>>3)];
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+8))>>2)]];
          argIndex += 8; // each 32-bit chunk is in a 64-bit block
  
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Math.max(Runtime.getNativeFieldSize(type), Runtime.getAlignSize(type, null, true));
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[((textIndex+1)|0)];
        if (curr == 37) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          var flagPadSign = false;
          flagsLoop: while (1) {
            switch (next) {
              case 43:
                flagAlwaysSigned = true;
                break;
              case 45:
                flagLeftAlign = true;
                break;
              case 35:
                flagAlternative = true;
                break;
              case 48:
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              case 32:
                flagPadSign = true;
                break;
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          }
  
          // Handle width.
          var width = 0;
          if (next == 42) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
          } else {
            while (next >= 48 && next <= 57) {
              width = width * 10 + (next - 48);
              textIndex++;
              next = HEAP8[((textIndex+1)|0)];
            }
          }
  
          // Handle precision.
          var precisionSet = false, precision = -1;
          if (next == 46) {
            precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[((textIndex+1)|0)];
            if (next == 42) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[((textIndex+1)|0)];
                if (precisionChr < 48 ||
                    precisionChr > 57) break;
                precision = precision * 10 + (precisionChr - 48);
                textIndex++;
              }
            }
            next = HEAP8[((textIndex+1)|0)];
          }
          if (precision < 0) {
            precision = 6; // Standard default.
            precisionSet = false;
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 104) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[((textIndex+2)|0)];
              if (nextNext == 108) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[((textIndex+1)|0)];
  
          // Handle type specifier.
          switch (String.fromCharCode(next)) {
            case 'd': case 'i': case 'u': case 'o': case 'x': case 'X': case 'p': {
              // Integer.
              var signed = next == 100 || next == 105;
              argSize = argSize || 4;
              var currArg = getNextArg('i' + (argSize * 8));
              var origArg = currArg;
              var argText;
              // Flatten i64-1 [low, high] into a (slightly rounded) double
              if (argSize == 8) {
                currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 117);
              }
              // Truncate to requested size.
              if (argSize <= 4) {
                var limit = Math.pow(256, argSize) - 1;
                currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
              }
              // Format the number.
              var currAbsArg = Math.abs(currArg);
              var prefix = '';
              if (next == 100 || next == 105) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], null); else
                argText = reSign(currArg, 8 * argSize, 1).toString(10);
              } else if (next == 117) {
                if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
                argText = unSign(currArg, 8 * argSize, 1).toString(10);
                currArg = Math.abs(currArg);
              } else if (next == 111) {
                argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
              } else if (next == 120 || next == 88) {
                prefix = (flagAlternative && currArg != 0) ? '0x' : '';
                if (argSize == 8 && i64Math) {
                  if (origArg[1]) {
                    argText = (origArg[1]>>>0).toString(16);
                    var lower = (origArg[0]>>>0).toString(16);
                    while (lower.length < 8) lower = '0' + lower;
                    argText += lower;
                  } else {
                    argText = (origArg[0]>>>0).toString(16);
                  }
                } else
                if (currArg < 0) {
                  // Represent negative numbers in hex as 2's complement.
                  currArg = -currArg;
                  argText = (currAbsArg - 1).toString(16);
                  var buffer = [];
                  for (var i = 0; i < argText.length; i++) {
                    buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                  }
                  argText = buffer.join('');
                  while (argText.length < argSize * 2) argText = 'f' + argText;
                } else {
                  argText = currAbsArg.toString(16);
                }
                if (next == 88) {
                  prefix = prefix.toUpperCase();
                  argText = argText.toUpperCase();
                }
              } else if (next == 112) {
                if (currAbsArg === 0) {
                  argText = '(nil)';
                } else {
                  prefix = '0x';
                  argText = currAbsArg.toString(16);
                }
              }
              if (precisionSet) {
                while (argText.length < precision) {
                  argText = '0' + argText;
                }
              }
  
              // Add sign if needed
              if (currArg >= 0) {
                if (flagAlwaysSigned) {
                  prefix = '+' + prefix;
                } else if (flagPadSign) {
                  prefix = ' ' + prefix;
                }
              }
  
              // Move sign to prefix so we zero-pad after the sign
              if (argText.charAt(0) == '-') {
                prefix = '-' + prefix;
                argText = argText.substr(1);
              }
  
              // Add padding.
              while (prefix.length + argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad) {
                    argText = '0' + argText;
                  } else {
                    prefix = ' ' + prefix;
                  }
                }
              }
  
              // Insert the result into the buffer.
              argText = prefix + argText;
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 'f': case 'F': case 'e': case 'E': case 'g': case 'G': {
              // Float.
              var currArg = getNextArg('double');
              var argText;
              if (isNaN(currArg)) {
                argText = 'nan';
                flagZeroPad = false;
              } else if (!isFinite(currArg)) {
                argText = (currArg < 0 ? '-' : '') + 'inf';
                flagZeroPad = false;
              } else {
                var isGeneral = false;
                var effectivePrecision = Math.min(precision, 20);
  
                // Convert g/G to f/F or e/E, as per:
                // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
                if (next == 103 || next == 71) {
                  isGeneral = true;
                  precision = precision || 1;
                  var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                  if (precision > exponent && exponent >= -4) {
                    next = ((next == 103) ? 'f' : 'F').charCodeAt(0);
                    precision -= exponent + 1;
                  } else {
                    next = ((next == 103) ? 'e' : 'E').charCodeAt(0);
                    precision--;
                  }
                  effectivePrecision = Math.min(precision, 20);
                }
  
                if (next == 101 || next == 69) {
                  argText = currArg.toExponential(effectivePrecision);
                  // Make sure the exponent has at least 2 digits.
                  if (/[eE][-+]\d$/.test(argText)) {
                    argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                  }
                } else if (next == 102 || next == 70) {
                  argText = currArg.toFixed(effectivePrecision);
                  if (currArg === 0 && __reallyNegative(currArg)) {
                    argText = '-' + argText;
                  }
                }
  
                var parts = argText.split('e');
                if (isGeneral && !flagAlternative) {
                  // Discard trailing zeros and periods.
                  while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                         (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                    parts[0] = parts[0].slice(0, -1);
                  }
                } else {
                  // Make sure we have a period in alternative mode.
                  if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                  // Zero pad until required precision.
                  while (precision > effectivePrecision++) parts[0] += '0';
                }
                argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
                // Capitalize 'E' if needed.
                if (next == 69) argText = argText.toUpperCase();
  
                // Add sign.
                if (currArg >= 0) {
                  if (flagAlwaysSigned) {
                    argText = '+' + argText;
                  } else if (flagPadSign) {
                    argText = ' ' + argText;
                  }
                }
              }
  
              // Add padding.
              while (argText.length < width) {
                if (flagLeftAlign) {
                  argText += ' ';
                } else {
                  if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                    argText = argText[0] + '0' + argText.slice(1);
                  } else {
                    argText = (flagZeroPad ? '0' : ' ') + argText;
                  }
                }
              }
  
              // Adjust case.
              if (next < 97) argText = argText.toUpperCase();
  
              // Insert the result into the buffer.
              argText.split('').forEach(function(chr) {
                ret.push(chr.charCodeAt(0));
              });
              break;
            }
            case 's': {
              // String.
              var arg = getNextArg('i8*');
              var argLength = arg ? _strlen(arg) : '(null)'.length;
              if (precisionSet) argLength = Math.min(argLength, precision);
              if (!flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              if (arg) {
                for (var i = 0; i < argLength; i++) {
                  ret.push(HEAPU8[((arg++)|0)]);
                }
              } else {
                ret = ret.concat(intArrayFromString('(null)'.substr(0, argLength), true));
              }
              if (flagLeftAlign) {
                while (argLength < width--) {
                  ret.push(32);
                }
              }
              break;
            }
            case 'c': {
              // Character.
              if (flagLeftAlign) ret.push(getNextArg('i8'));
              while (--width > 0) {
                ret.push(32);
              }
              if (!flagLeftAlign) ret.push(getNextArg('i8'));
              break;
            }
            case 'n': {
              // Write the length written so far to the next parameter.
              var ptr = getNextArg('i32*');
              HEAP32[((ptr)>>2)]=ret.length;
              break;
            }
            case '%': {
              // Literal percent sign.
              ret.push(curr);
              break;
            }
            default: {
              // Unknown specifiers remain untouched.
              for (var i = startTextIndex; i < textIndex + 2; i++) {
                ret.push(HEAP8[(i)]);
              }
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }

  function ___assert_fail(condition, filename, line, func) {
      ABORT = true;
      throw 'Assertion failed: ' + Pointer_stringify(condition) + ', at: ' + [filename ? Pointer_stringify(filename) : 'unknown filename', line, func ? Pointer_stringify(func) : 'unknown function'] + ' at ' + stackTrace();
    }

  function _llvm_lifetime_start() {}

  function _llvm_lifetime_end() {}

  function _htonl(value) {
      return ((value & 0xff) << 24) + ((value & 0xff00) << 8) +
             ((value & 0xff0000) >>> 8) + ((value & 0xff000000) >>> 24);
    }

  var _ntohl=_htonl;

  
  function _htons(value) {
      return ((value & 0xff) << 8) + ((value & 0xff00) >> 8);
    }var _ntohs=_htons;


  var _llvm_memcpy_p0i8_p0i8_i64=_memcpy;

  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        FS.close(stream);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _fcntl(fildes, cmd, varargs, dup2) {
      // int fcntl(int fildes, int cmd, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/fcntl.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      switch (cmd) {
        case 0:
          var arg = HEAP32[((varargs)>>2)];
          if (arg < 0) {
            ___setErrNo(ERRNO_CODES.EINVAL);
            return -1;
          }
          var newStream;
          try {
            newStream = FS.open(stream.path, stream.flags, 0, arg);
          } catch (e) {
            FS.handleFSError(e);
            return -1;
          }
          return newStream.fd;
        case 1:
        case 2:
          return 0;  // FD_CLOEXEC makes no sense for a single process.
        case 3:
          return stream.flags;
        case 4:
          var arg = HEAP32[((varargs)>>2)];
          stream.flags |= arg;
          return 0;
        case 12:
        case 12:
          var arg = HEAP32[((varargs)>>2)];
          var offset = 0;
          // We're always unlocked.
          HEAP16[(((arg)+(offset))>>1)]=2;
          return 0;
        case 13:
        case 14:
        case 13:
        case 14:
          // Pretend that the locking is successful.
          return 0;
        case 8:
        case 9:
          // These are for sockets. We don't have them fully implemented yet.
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
        default:
          ___setErrNo(ERRNO_CODES.EINVAL);
          return -1;
      }
      // Should never be reached. Only to silence strict warnings.
      return -1;
    }

  function _setsockopt(fd, level, optname, optval, optlen) {
      return 0;
    }

  function _gettimeofday(ptr) {
      var now = Date.now();
      HEAP32[((ptr)>>2)]=Math.floor(now/1000); // seconds
      HEAP32[(((ptr)+(4))>>2)]=Math.floor((now-1000*Math.floor(now/1000))*1000); // microseconds
      return 0;
    }

  
  
  function __inet_pton4_raw(str) {
      var b = str.split('.');
      for (var i = 0; i < 4; i++) {
        var tmp = Number(b[i]);
        if (isNaN(tmp)) return null;
        b[i] = tmp;
      }
      return (b[0] | (b[1] << 8) | (b[2] << 16) | (b[3] << 24)) >>> 0;
    }
  
  function __inet_pton6_raw(str) {
      var words;
      var w, offset, z, i;
      /* http://home.deds.nl/~aeron/regex/ */
      var valid6regx = /^((?=.*::)(?!.*::.+::)(::)?([\dA-F]{1,4}:(:|\b)|){5}|([\dA-F]{1,4}:){6})((([\dA-F]{1,4}((?!\3)::|:\b|$))|(?!\2\3)){2}|(((2[0-4]|1\d|[1-9])?\d|25[0-5])\.?\b){4})$/i
      var parts = [];
      if (!valid6regx.test(str)) {
        return null;
      }
      if (str === "::") {
        return [0, 0, 0, 0, 0, 0, 0, 0];
      }
      // Z placeholder to keep track of zeros when splitting the string on ":"
      if (str.indexOf("::") === 0) {
        str = str.replace("::", "Z:"); // leading zeros case
      } else {
        str = str.replace("::", ":Z:");
      }
  
      if (str.indexOf(".") > 0) {
        // parse IPv4 embedded stress
        str = str.replace(new RegExp('[.]', 'g'), ":");
        words = str.split(":");
        words[words.length-4] = parseInt(words[words.length-4]) + parseInt(words[words.length-3])*256;
        words[words.length-3] = parseInt(words[words.length-2]) + parseInt(words[words.length-1])*256;
        words = words.slice(0, words.length-2);
      } else {
        words = str.split(":");
      }
  
      offset = 0; z = 0;
      for (w=0; w < words.length; w++) {
        if (typeof words[w] === 'string') {
          if (words[w] === 'Z') {
            // compressed zeros - write appropriate number of zero words
            for (z = 0; z < (8 - words.length+1); z++) {
              parts[w+z] = 0;
            }
            offset = z-1;
          } else {
            // parse hex to field to 16-bit value and write it in network byte-order
            parts[w+offset] = _htons(parseInt(words[w],16));
          }
        } else {
          // parsed IPv4 words
          parts[w+offset] = words[w];
        }
      }
      return [
        (parts[1] << 16) | parts[0],
        (parts[3] << 16) | parts[2],
        (parts[5] << 16) | parts[4],
        (parts[7] << 16) | parts[6]
      ];
    }var DNS={address_map:{id:1,addrs:{},names:{}},lookup_name:function (name) {
        // If the name is already a valid ipv4 / ipv6 address, don't generate a fake one.
        var res = __inet_pton4_raw(name);
        if (res) {
          return name;
        }
        res = __inet_pton6_raw(name);
        if (res) {
          return name;
        }
  
        // See if this name is already mapped.
        var addr;
  
        if (DNS.address_map.addrs[name]) {
          addr = DNS.address_map.addrs[name];
        } else {
          var id = DNS.address_map.id++;
          assert(id < 65535, 'exceeded max address mappings of 65535');
  
          addr = '172.29.' + (id & 0xff) + '.' + (id & 0xff00);
  
          DNS.address_map.names[addr] = name;
          DNS.address_map.addrs[name] = addr;
        }
  
        return addr;
      },lookup_addr:function (addr) {
        if (DNS.address_map.names[addr]) {
          return DNS.address_map.names[addr];
        }
  
        return null;
      }};
  
  
  var Sockets={BUFFER_SIZE:10240,MAX_BUFFER_SIZE:10485760,nextFd:1,fds:{},nextport:1,maxport:65535,peer:null,connections:{},portmap:{},localAddr:4261412874,addrPool:[33554442,50331658,67108874,83886090,100663306,117440522,134217738,150994954,167772170,184549386,201326602,218103818,234881034]};
  
  function __inet_ntop4_raw(addr) {
      return (addr & 0xff) + '.' + ((addr >> 8) & 0xff) + '.' + ((addr >> 16) & 0xff) + '.' + ((addr >> 24) & 0xff)
    }
  
  function __inet_ntop6_raw(ints) {
      //  ref:  http://www.ietf.org/rfc/rfc2373.txt - section 2.5.4
      //  Format for IPv4 compatible and mapped  128-bit IPv6 Addresses
      //  128-bits are split into eight 16-bit words
      //  stored in network byte order (big-endian)
      //  |                80 bits               | 16 |      32 bits        |
      //  +-----------------------------------------------------------------+
      //  |               10 bytes               |  2 |      4 bytes        |
      //  +--------------------------------------+--------------------------+
      //  +               5 words                |  1 |      2 words        |
      //  +--------------------------------------+--------------------------+
      //  |0000..............................0000|0000|    IPv4 ADDRESS     | (compatible)
      //  +--------------------------------------+----+---------------------+
      //  |0000..............................0000|FFFF|    IPv4 ADDRESS     | (mapped)
      //  +--------------------------------------+----+---------------------+
      var str = "";
      var word = 0;
      var longest = 0;
      var lastzero = 0;
      var zstart = 0;
      var len = 0;
      var i = 0;
      var parts = [
        ints[0] & 0xffff,
        (ints[0] >> 16),
        ints[1] & 0xffff,
        (ints[1] >> 16),
        ints[2] & 0xffff,
        (ints[2] >> 16),
        ints[3] & 0xffff,
        (ints[3] >> 16)
      ];
  
      // Handle IPv4-compatible, IPv4-mapped, loopback and any/unspecified addresses
  
      var hasipv4 = true;
      var v4part = "";
      // check if the 10 high-order bytes are all zeros (first 5 words)
      for (i = 0; i < 5; i++) {
        if (parts[i] !== 0) { hasipv4 = false; break; }
      }
  
      if (hasipv4) {
        // low-order 32-bits store an IPv4 address (bytes 13 to 16) (last 2 words)
        v4part = __inet_ntop4_raw(parts[6] | (parts[7] << 16));
        // IPv4-mapped IPv6 address if 16-bit value (bytes 11 and 12) == 0xFFFF (6th word)
        if (parts[5] === -1) {
          str = "::ffff:";
          str += v4part;
          return str;
        }
        // IPv4-compatible IPv6 address if 16-bit value (bytes 11 and 12) == 0x0000 (6th word)
        if (parts[5] === 0) {
          str = "::";
          //special case IPv6 addresses
          if(v4part === "0.0.0.0") v4part = ""; // any/unspecified address
          if(v4part === "0.0.0.1") v4part = "1";// loopback address
          str += v4part;
          return str;
        }
      }
  
      // Handle all other IPv6 addresses
  
      // first run to find the longest contiguous zero words
      for (word = 0; word < 8; word++) {
        if (parts[word] === 0) {
          if (word - lastzero > 1) {
            len = 0;
          }
          lastzero = word;
          len++;
        }
        if (len > longest) {
          longest = len;
          zstart = word - longest + 1;
        }
      }
  
      for (word = 0; word < 8; word++) {
        if (longest > 1) {
          // compress contiguous zeros - to produce "::"
          if (parts[word] === 0 && word >= zstart && word < (zstart + longest) ) {
            if (word === zstart) {
              str += ":";
              if (zstart === 0) str += ":"; //leading zeros case
            }
            continue;
          }
        }
        // converts 16-bit words from big-endian to little-endian before converting to hex string
        str += Number(_ntohs(parts[word] & 0xffff)).toString(16);
        str += word < 7 ? ":" : "";
      }
      return str;
    }function __read_sockaddr(sa, salen) {
      // family / port offsets are common to both sockaddr_in and sockaddr_in6
      var family = HEAP16[((sa)>>1)];
      var port = _ntohs(HEAP16[(((sa)+(2))>>1)]);
      var addr;
  
      switch (family) {
        case 2:
          if (salen !== 16) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = HEAP32[(((sa)+(4))>>2)];
          addr = __inet_ntop4_raw(addr);
          break;
        case 10:
          if (salen !== 28) {
            return { errno: ERRNO_CODES.EINVAL };
          }
          addr = [
            HEAP32[(((sa)+(8))>>2)],
            HEAP32[(((sa)+(12))>>2)],
            HEAP32[(((sa)+(16))>>2)],
            HEAP32[(((sa)+(20))>>2)]
          ];
          addr = __inet_ntop6_raw(addr);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
  
      return { family: family, addr: addr, port: port };
    }function _sendto(fd, message, length, flags, dest_addr, dest_len) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
      // read the address and port to send to
      var info = __read_sockaddr(dest_addr, dest_len);
      if (info.errno) {
        ___setErrNo(info.errno);
        return -1;
      }
      var port = info.port;
      var addr = DNS.lookup_addr(info.addr) || info.addr;
  
      // send the message
      try {
        var slab = HEAP8;
        return sock.sock_ops.sendmsg(sock, slab, message, length, addr, port);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function ___errno_location() {
      return ___errno_state;
    }

  
  var ___DEFAULT_POLLMASK=5;function _select(nfds, readfds, writefds, exceptfds, timeout) {
      // readfds are supported,
      // writefds checks socket open status
      // exceptfds not supported
      // timeout is always 0 - fully async
      assert(nfds <= 64, 'nfds must be less than or equal to 64');  // fd sets have 64 bits
      assert(!exceptfds, 'exceptfds not supported');
  
      var total = 0;
      
      var srcReadLow = (readfds ? HEAP32[((readfds)>>2)] : 0),
          srcReadHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0);
      var srcWriteLow = (writefds ? HEAP32[((writefds)>>2)] : 0),
          srcWriteHigh = (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0);
      var srcExceptLow = (exceptfds ? HEAP32[((exceptfds)>>2)] : 0),
          srcExceptHigh = (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      var dstReadLow = 0,
          dstReadHigh = 0;
      var dstWriteLow = 0,
          dstWriteHigh = 0;
      var dstExceptLow = 0,
          dstExceptHigh = 0;
  
      var allLow = (readfds ? HEAP32[((readfds)>>2)] : 0) |
                   (writefds ? HEAP32[((writefds)>>2)] : 0) |
                   (exceptfds ? HEAP32[((exceptfds)>>2)] : 0);
      var allHigh = (readfds ? HEAP32[(((readfds)+(4))>>2)] : 0) |
                    (writefds ? HEAP32[(((writefds)+(4))>>2)] : 0) |
                    (exceptfds ? HEAP32[(((exceptfds)+(4))>>2)] : 0);
  
      function get(fd, low, high, val) {
        return (fd < 32 ? (low & val) : (high & val));
      }
  
      for (var fd = 0; fd < nfds; fd++) {
        var mask = 1 << (fd % 32);
        if (!(get(fd, allLow, allHigh, mask))) {
          continue;  // index isn't in the set
        }
  
        var stream = FS.getStream(fd);
        if (!stream) {
          ___setErrNo(ERRNO_CODES.EBADF);
          return -1;
        }
  
        var flags = ___DEFAULT_POLLMASK;
  
        if (stream.stream_ops.poll) {
          flags = stream.stream_ops.poll(stream);
        }
  
        if ((flags & 1) && get(fd, srcReadLow, srcReadHigh, mask)) {
          fd < 32 ? (dstReadLow = dstReadLow | mask) : (dstReadHigh = dstReadHigh | mask);
          total++;
        }
        if ((flags & 4) && get(fd, srcWriteLow, srcWriteHigh, mask)) {
          fd < 32 ? (dstWriteLow = dstWriteLow | mask) : (dstWriteHigh = dstWriteHigh | mask);
          total++;
        }
        if ((flags & 2) && get(fd, srcExceptLow, srcExceptHigh, mask)) {
          fd < 32 ? (dstExceptLow = dstExceptLow | mask) : (dstExceptHigh = dstExceptHigh | mask);
          total++;
        }
      }
  
      if (readfds) {
        HEAP32[((readfds)>>2)]=dstReadLow;
        HEAP32[(((readfds)+(4))>>2)]=dstReadHigh;
      }
      if (writefds) {
        HEAP32[((writefds)>>2)]=dstWriteLow;
        HEAP32[(((writefds)+(4))>>2)]=dstWriteHigh;
      }
      if (exceptfds) {
        HEAP32[((exceptfds)>>2)]=dstExceptLow;
        HEAP32[(((exceptfds)+(4))>>2)]=dstExceptHigh;
      }
      
      return total;
    }

  function _srand(seed) {
      HEAP32[((___rand_seed)>>2)]=seed
    }

  function _socket(family, type, protocol) {
      var sock = SOCKFS.createSocket(family, type, protocol);
      assert(sock.stream.fd < 64); // select() assumes socket fd values are in 0..63
      return sock.stream.fd;
    }

  
  function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          writeAsciiToMemory(msg, strerrbuf);
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  function _bind(fd, addrp, addrlen) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
      var info = __read_sockaddr(addrp, addrlen);
      if (info.errno) {
        ___setErrNo(info.errno);
        return -1;
      }
      var port = info.port;
      var addr = DNS.lookup_addr(info.addr) || info.addr;
  
      try {
        sock.sock_ops.bind(sock, addr, port);
        return 0;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function __inet_ntop4(src, dst, size) {
      var addr = HEAP32[((src)>>2)];
      var str = __inet_ntop4_raw(addr);
      if (str.length+1 > size) {
        ___setErrNo(ERRNO_CODES.ENOSPC);
        return 0;
      }
      writeStringToMemory(str, dst);
      return dst;
    }
  
  function __inet_ntop6(src, dst, size) {
      var addr = [
        HEAP32[((src)>>2)], HEAP32[(((src)+(4))>>2)],
        HEAP32[(((src)+(8))>>2)], HEAP32[(((src)+(12))>>2)]
      ];
      var str = __inet_ntop6_raw(addr);
      if (str.length+1 > size) {
        ___setErrNo(ERRNO_CODES.ENOSPC);
        return 0;
      }
      writeStringToMemory(str, dst);
      return dst;
    }function _inet_ntop(af, src, dst, size) {
      // http://pubs.opengroup.org/onlinepubs/9699919799/functions/inet_ntop.html
      switch (af) {
        case 2:
          return __inet_ntop4(src, dst, size);
        case 10:
          return __inet_ntop6(src, dst, size);
        default:
          ___setErrNo(ERRNO_CODES.EAFNOSUPPORT);
          return 0;
      }
    }


  function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, Math.max(n - 1, 0));
      if (s < 0) {
        s = -s;
        var buf = _malloc(limit+1);
        HEAP32[((s)>>2)]=buf;
        s = buf;
      }
      for (var i = 0; i < limit; i++) {
        HEAP8[(((s)+(i))|0)]=result[i];
      }
      if (limit < n || (n === undefined)) HEAP8[(((s)+(i))|0)]=0;
      return result.length;
    }

  
  function __inet_pton4(src, dst) {
      var ret = __inet_pton4_raw(Pointer_stringify(src));
      if (ret === null) {
        return 0;
      }
      HEAP32[((dst)>>2)]=ret;
      return 1;
    }
  
  function __inet_pton6(src, dst) {
      var ints = __inet_pton6_raw(Pointer_stringify(src));
      if (ints === null) {
        return 0;
      }
      for (var i = 0; i < 4; i++) {
        HEAP32[(((dst)+(i*4))>>2)]=ints[i];
      }
      return 1;
    }function _inet_pton(af, src, dst) {
      // http://pubs.opengroup.org/onlinepubs/9699919799/functions/inet_pton.html
      switch (af) {
        case 2:
          return __inet_pton4(src, dst);
        case 10:
          return __inet_pton6(src, dst);
        default:
          ___setErrNo(ERRNO_CODES.EAFNOSUPPORT);
          return -1;
      }
    }

  
  function __write_sockaddr(sa, family, addr, port) {
      switch (family) {
        case 2:
          addr = __inet_pton4_raw(addr);
          HEAP16[((sa)>>1)]=family;
          HEAP32[(((sa)+(4))>>2)]=addr;
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        case 10:
          addr = __inet_pton6_raw(addr);
          HEAP32[((sa)>>2)]=family;
          HEAP32[(((sa)+(8))>>2)]=addr[0];
          HEAP32[(((sa)+(12))>>2)]=addr[1];
          HEAP32[(((sa)+(16))>>2)]=addr[2];
          HEAP32[(((sa)+(20))>>2)]=addr[3];
          HEAP16[(((sa)+(2))>>1)]=_htons(port);
          break;
        default:
          return { errno: ERRNO_CODES.EAFNOSUPPORT };
      }
      // kind of lame, but let's match _read_sockaddr's interface
      return {};
    }function _getaddrinfo(node, service, hint, out) {
      // Note getaddrinfo currently only returns a single addrinfo with ai_next defaulting to NULL. When NULL
      // hints are specified or ai_family set to AF_UNSPEC or ai_socktype or ai_protocol set to 0 then we
      // really should provide a linked list of suitable addrinfo values.
      var addrs = [];
      var canon = null;
      var addr = 0;
      var port = 0;
      var flags = 0;
      var family = 0;
      var type = 0;
      var proto = 0;
      var ai, last;
  
      function allocaddrinfo(family, type, proto, canon, addr, port) {
        var sa, salen, ai;
        var res;
  
        salen = family === 10 ?
          28 :
          16;
        addr = family === 10 ?
          __inet_ntop6_raw(addr) :
          __inet_ntop4_raw(addr);
        sa = _malloc(salen);
        res = __write_sockaddr(sa, family, addr, port);
        assert(!res.errno);
  
        ai = _malloc(32);
        HEAP32[(((ai)+(4))>>2)]=family;
        HEAP32[(((ai)+(8))>>2)]=type;
        HEAP32[(((ai)+(12))>>2)]=proto;
        if (canon) {
          HEAP32[(((ai)+(24))>>2)]=canon;
        }
        HEAP32[(((ai)+(20))>>2)]=sa;
        if (family === 10) {
          HEAP32[(((ai)+(16))>>2)]=28;
        } else {
          HEAP32[(((ai)+(16))>>2)]=16;
        }
        HEAP32[(((ai)+(28))>>2)]=0;
  
        return ai;
      }
  
      if (hint) {
        flags = HEAP32[((hint)>>2)];
        family = HEAP32[(((hint)+(4))>>2)];
        type = HEAP32[(((hint)+(8))>>2)];
        proto = HEAP32[(((hint)+(12))>>2)];
      }
      if (type && !proto) {
        proto = type === 2 ? 17 : 6;
      }
      if (!type && proto) {
        type = proto === 17 ? 2 : 1;
      }
  
      // If type or proto are set to zero in hints we should really be returning multiple addrinfo values, but for
      // now default to a TCP STREAM socket so we can at least return a sensible addrinfo given NULL hints.
      if (proto === 0) {
        proto = 6;
      }
      if (type === 0) {
        type = 1;
      }
  
      if (!node && !service) {
        return -2;
      }
      if (flags & ~(1|2|4|
          1024|8|16|32)) {
        return -1;
      }
      if (hint !== 0 && (HEAP32[((hint)>>2)] & 2) && !node) {
        return -1;
      }
      if (flags & 32) {
        // TODO
        return -2;
      }
      if (type !== 0 && type !== 1 && type !== 2) {
        return -7;
      }
      if (family !== 0 && family !== 2 && family !== 10) {
        return -6;
      }
  
      if (service) {
        service = Pointer_stringify(service);
        port = parseInt(service, 10);
  
        if (isNaN(port)) {
          if (flags & 1024) {
            return -2;
          }
          // TODO support resolving well-known service names from:
          // http://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.txt
          return -8;
        }
      }
  
      if (!node) {
        if (family === 0) {
          family = 2;
        }
        if ((flags & 1) === 0) {
          if (family === 2) {
            addr = _htonl(2130706433);
          } else {
            addr = [0, 0, 0, 1];
          }
        }
        ai = allocaddrinfo(family, type, proto, null, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
  
      //
      // try as a numeric address
      //
      node = Pointer_stringify(node);
      addr = __inet_pton4_raw(node);
      if (addr !== null) {
        // incoming node is a valid ipv4 address
        if (family === 0 || family === 2) {
          family = 2;
        }
        else if (family === 10 && (flags & 8)) {
          addr = [0, 0, _htonl(0xffff), addr];
          family = 10;
        } else {
          return -2;
        }
      } else {
        addr = __inet_pton6_raw(node);
        if (addr !== null) {
          // incoming node is a valid ipv6 address
          if (family === 0 || family === 10) {
            family = 10;
          } else {
            return -2;
          }
        }
      }
      if (addr != null) {
        ai = allocaddrinfo(family, type, proto, node, addr, port);
        HEAP32[((out)>>2)]=ai;
        return 0;
      }
      if (flags & 4) {
        return -2;
      }
  
      //
      // try as a hostname
      //
      // resolve the hostname to a temporary fake address
      node = DNS.lookup_name(node);
      addr = __inet_pton4_raw(node);
      if (family === 0) {
        family = 2;
      } else if (family === 10) {
        addr = [0, 0, _htonl(0xffff), addr];
      }
      ai = allocaddrinfo(family, type, proto, null, addr, port);
      HEAP32[((out)>>2)]=ai;
      return 0;
    }

  function _freeaddrinfo(ai) {
      var sa = HEAP32[(((ai)+(20))>>2)];
      _free(sa);
      _free(ai);
    }

  function _recvfrom(fd, buf, len, flags, addr, addrlen) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
      // read from the socket
      var msg;
      try {
        msg = sock.sock_ops.recvmsg(sock, len);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
  
      if (!msg) {
        // socket is closed
        return 0;
      }
  
      // write the source address out
      if (addr) {
        var res = __write_sockaddr(addr, sock.family, DNS.lookup_name(msg.addr), msg.port);
        assert(!res.errno);
      }
      // write the buffer out
      HEAPU8.set(msg.buffer, buf);
  
      return msg.buffer.byteLength;
    }


  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret;
      }
      return ret;
    }

  var _llvm_memset_p0i8_i64=_memset;

  function _abort() {
      Module['abort']();
    }

  
  function _recv(fd, buf, len, flags) {
      var sock = SOCKFS.getSocket(fd);
      if (!sock) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      // TODO honor flags
      return _read(fd, buf, len);
    }
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte, offset);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.getStream(fildes);
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
  
  
      try {
        var slab = HEAP8;
        return FS.read(stream, slab, buf, nbyte);
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  function _access(path, amode) {
      // int access(const char *path, int amode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/access.html
      path = Pointer_stringify(path);
      if (amode & ~7) {
        // need a valid mode
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      }
      var node;
      try {
        var lookup = FS.lookupPath(path, { follow: true });
        node = lookup.node;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
      var perms = '';
      if (amode & 4) perms += 'r';
      if (amode & 2) perms += 'w';
      if (amode & 1) perms += 'x';
      if (perms /* otherwise, they've just passed F_OK */ && FS.nodePermissions(node, perms)) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      }
      return 0;
    }

  function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      var mode = HEAP32[((varargs)>>2)];
      path = Pointer_stringify(path);
      try {
        var stream = FS.open(path, oflag, mode);
        return stream.fd;
      } catch (e) {
        FS.handleFSError(e);
        return -1;
      }
    }

  
  function _atexit(func, arg) {
      __ATEXIT__.unshift({ func: func, arg: arg });
    }var ___cxa_atexit=_atexit;

  
  
  function __getFloat(text) {
      return /^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?/.exec(text);
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[32] = 1;
        __scanString.whiteSpace[9] = 1;
        __scanString.whiteSpace[10] = 1;
        __scanString.whiteSpace[11] = 1;
        __scanString.whiteSpace[12] = 1;
        __scanString.whiteSpace[13] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function get() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function unget() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length;) {
        if (format[formatIndex] === '%' && format[formatIndex+1] == 'n') {
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          HEAP32[((argPtr)>>2)]=soFar;
          formatIndex += 2;
          continue;
        }
  
        if (format[formatIndex] === '%') {
          var nextC = format.indexOf('c', formatIndex+1);
          if (nextC > 0) {
            var maxx = 1;
            if (nextC > formatIndex+1) {
              var sub = format.substring(formatIndex+1, nextC);
              maxx = parseInt(sub);
              if (maxx != sub) maxx = 0;
            }
            if (maxx) {
              var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
              argIndex += Runtime.getAlignSize('void*', null, true);
              fields++;
              for (var i = 0; i < maxx; i++) {
                next = get();
                HEAP8[((argPtr++)|0)]=next;
                if (next === 0) return i > 0 ? fields : fields-1; // we failed to read the full length of this field
              }
              formatIndex += nextC - formatIndex + 1;
              continue;
            }
          }
        }
  
        // handle %[...]
        if (format[formatIndex] === '%' && format.indexOf('[', formatIndex+1) > 0) {
          var match = /\%([0-9]*)\[(\^)?(\]?[^\]]*)\]/.exec(format.substring(formatIndex));
          if (match) {
            var maxNumCharacters = parseInt(match[1]) || Infinity;
            var negateScanList = (match[2] === '^');
            var scanList = match[3];
  
            // expand "middle" dashs into character sets
            var middleDashMatch;
            while ((middleDashMatch = /([^\-])\-([^\-])/.exec(scanList))) {
              var rangeStartCharCode = middleDashMatch[1].charCodeAt(0);
              var rangeEndCharCode = middleDashMatch[2].charCodeAt(0);
              for (var expanded = ''; rangeStartCharCode <= rangeEndCharCode; expanded += String.fromCharCode(rangeStartCharCode++));
              scanList = scanList.replace(middleDashMatch[1] + '-' + middleDashMatch[2], expanded);
            }
  
            var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
            argIndex += Runtime.getAlignSize('void*', null, true);
            fields++;
  
            for (var i = 0; i < maxNumCharacters; i++) {
              next = get();
              if (negateScanList) {
                if (scanList.indexOf(String.fromCharCode(next)) < 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              } else {
                if (scanList.indexOf(String.fromCharCode(next)) >= 0) {
                  HEAP8[((argPtr++)|0)]=next;
                } else {
                  unget();
                  break;
                }
              }
            }
  
            // write out null-terminating character
            HEAP8[((argPtr++)|0)]=0;
            formatIndex += match[0].length;
            
            continue;
          }
        }      
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        }
        unget();
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var suppressAssignment = false;
          if (format[formatIndex] == '*') {
            suppressAssignment = true;
            formatIndex++;
          }
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= 48 &&
                 format[formatIndex].charCodeAt(0) <= 57) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if (format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f' || type == 'e' || type == 'g' ||
              type == 'F' || type == 'E' || type == 'G') {
            next = get();
            while (next > 0 && (!(next in __scanString.whiteSpace)))  {
              buffer.push(String.fromCharCode(next));
              next = get();
            }
            var m = __getFloat(buffer.join(''));
            var last = m ? m[0].length : 0;
            for (var i = 0; i < buffer.length - last + 1; i++) {
              unget();
            }
            buffer.length = last;
          } else {
            next = get();
            var first = true;
            
            // Strip the optional 0x prefix for %x.
            if ((type == 'x' || type == 'X') && (next == 48)) {
              var peek = get();
              if (peek == 120 || peek == 88) {
                next = get();
              } else {
                unget();
              }
            }
            
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= 48 && next <= 57) ||
                                                                     (first && next == 45))) ||
                   ((type === 'x' || type === 'X') && (next >= 48 && next <= 57 ||
                                     next >= 97 && next <= 102 ||
                                     next >= 65 && next <= 70))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
                first = false;
              } else {
                break;
              }
            }
            unget();
          }
          if (buffer.length === 0) return 0;  // Failure.
          if (suppressAssignment) continue;
  
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getAlignSize('void*', null, true);
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if (longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,(tempDouble=parseInt(text, 10),Math_abs(tempDouble) >= 1 ? (tempDouble > 0 ? Math_min(Math_floor((tempDouble)/4294967296), 4294967295)>>>0 : (~~(Math_ceil((tempDouble - +(((~~(tempDouble)))>>>0))/4294967296)))>>>0) : 0)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'X':
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16);
              break;
            case 'F':
            case 'f':
            case 'E':
            case 'e':
            case 'G':
            case 'g':
            case 'E':
              // fallthrough intended
              if (long_) {
                HEAPF64[((argPtr)>>3)]=parseFloat(text);
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text);
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[(((argPtr)+(j))|0)]=array[j];
              }
              break;
          }
          fields++;
        } else if (format[formatIndex].charCodeAt(0) in __scanString.whiteSpace) {
          next = get();
          while (next in __scanString.whiteSpace) {
            if (next <= 0) break mainLoop;  // End of input.
            next = get();
          }
          unget(next);
          formatIndex++;
        } else {
          // Not a specifier.
          next = get();
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
          formatIndex++;
        }
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      function get() { return HEAP8[(((s)+(index++))|0)]; };
      function unget() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  
  function __ZSt18uncaught_exceptionv() { // std::uncaught_exception()
      return !!__ZSt18uncaught_exceptionv.uncaught_exception;
    }
  
  
  
  function ___cxa_is_number_type(type) {
      var isNumber = false;
      try { if (type == __ZTIi) isNumber = true } catch(e){}
      try { if (type == __ZTIj) isNumber = true } catch(e){}
      try { if (type == __ZTIl) isNumber = true } catch(e){}
      try { if (type == __ZTIm) isNumber = true } catch(e){}
      try { if (type == __ZTIx) isNumber = true } catch(e){}
      try { if (type == __ZTIy) isNumber = true } catch(e){}
      try { if (type == __ZTIf) isNumber = true } catch(e){}
      try { if (type == __ZTId) isNumber = true } catch(e){}
      try { if (type == __ZTIe) isNumber = true } catch(e){}
      try { if (type == __ZTIc) isNumber = true } catch(e){}
      try { if (type == __ZTIa) isNumber = true } catch(e){}
      try { if (type == __ZTIh) isNumber = true } catch(e){}
      try { if (type == __ZTIs) isNumber = true } catch(e){}
      try { if (type == __ZTIt) isNumber = true } catch(e){}
      return isNumber;
    }function ___cxa_does_inherit(definiteType, possibilityType, possibility) {
      if (possibility == 0) return false;
      if (possibilityType == 0 || possibilityType == definiteType)
        return true;
      var possibility_type_info;
      if (___cxa_is_number_type(possibilityType)) {
        possibility_type_info = possibilityType;
      } else {
        var possibility_type_infoAddr = HEAP32[((possibilityType)>>2)] - 8;
        possibility_type_info = HEAP32[((possibility_type_infoAddr)>>2)];
      }
      switch (possibility_type_info) {
      case 0: // possibility is a pointer
        // See if definite type is a pointer
        var definite_type_infoAddr = HEAP32[((definiteType)>>2)] - 8;
        var definite_type_info = HEAP32[((definite_type_infoAddr)>>2)];
        if (definite_type_info == 0) {
          // Also a pointer; compare base types of pointers
          var defPointerBaseAddr = definiteType+8;
          var defPointerBaseType = HEAP32[((defPointerBaseAddr)>>2)];
          var possPointerBaseAddr = possibilityType+8;
          var possPointerBaseType = HEAP32[((possPointerBaseAddr)>>2)];
          return ___cxa_does_inherit(defPointerBaseType, possPointerBaseType, possibility);
        } else
          return false; // one pointer and one non-pointer
      case 1: // class with no base class
        return false;
      case 2: // class with base class
        var parentTypeAddr = possibilityType + 8;
        var parentType = HEAP32[((parentTypeAddr)>>2)];
        return ___cxa_does_inherit(definiteType, parentType, possibility);
      default:
        return false; // some unencountered type
      }
    }
  
  
  
  var ___cxa_last_thrown_exception=0;function ___resumeException(ptr) {
      if (!___cxa_last_thrown_exception) { ___cxa_last_thrown_exception = ptr; }
      throw ptr;
    }
  
  var ___cxa_exception_header_size=8;function ___cxa_find_matching_catch(thrown, throwntype) {
      if (thrown == -1) thrown = ___cxa_last_thrown_exception;
      header = thrown - ___cxa_exception_header_size;
      if (throwntype == -1) throwntype = HEAP32[((header)>>2)];
      var typeArray = Array.prototype.slice.call(arguments, 2);
  
      // If throwntype is a pointer, this means a pointer has been
      // thrown. When a pointer is thrown, actually what's thrown
      // is a pointer to the pointer. We'll dereference it.
      if (throwntype != 0 && !___cxa_is_number_type(throwntype)) {
        var throwntypeInfoAddr= HEAP32[((throwntype)>>2)] - 8;
        var throwntypeInfo= HEAP32[((throwntypeInfoAddr)>>2)];
        if (throwntypeInfo == 0)
          thrown = HEAP32[((thrown)>>2)];
      }
      // The different catch blocks are denoted by different types.
      // Due to inheritance, those types may not precisely match the
      // type of the thrown object. Find one which matches, and
      // return the type of the catch block which should be called.
      for (var i = 0; i < typeArray.length; i++) {
        if (___cxa_does_inherit(typeArray[i], throwntype, thrown))
          return tempRet0 = typeArray[i],thrown;
      }
      // Shouldn't happen unless we have bogus data in typeArray
      // or encounter a type for which emscripten doesn't have suitable
      // typeinfo defined. Best-efforts match just in case.
      return tempRet0 = throwntype,thrown;
    }function ___gxx_personality_v0() {
    }

  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }

  function _emscripten_asm_const(code) {
      Runtime.getAsmConst(code, 0)();
    }

  function _llvm_umul_with_overflow_i32(x, y) {
      x = x>>>0;
      y = y>>>0;
      return tempRet0 = x*y > 4294967295,(x*y)>>>0;
    }

  function __embind_register_function() {
  Module['printErr']('missing function: _embind_register_function'); abort(-1);
  }

  
  var ___cxa_caught_exceptions=[];function ___cxa_begin_catch(ptr) {
      __ZSt18uncaught_exceptionv.uncaught_exception--;
      ___cxa_caught_exceptions.push(___cxa_last_thrown_exception);
      return ptr;
    }

  
  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
      Module['exit'](status);
    }function _exit(status) {
      __exit(status);
    }function __ZSt9terminatev() {
      _exit(-1234);
    }

  function ___cxa_allocate_exception(size) {
      var ptr = _malloc(size + ___cxa_exception_header_size);
      return ptr + ___cxa_exception_header_size;
    }

  function ___cxa_free_exception(ptr) {
      try {
        return _free(ptr - ___cxa_exception_header_size);
      } catch(e) { // XXX FIXME
        Module.printErr('exception during cxa_free_exception: ' + e);
      }
    }

  function ___cxa_throw(ptr, type, destructor) {
      if (!___cxa_throw.initialized) {
        try {
          HEAP32[((__ZTVN10__cxxabiv119__pointer_type_infoE)>>2)]=0; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv117__class_type_infoE)>>2)]=1; // Workaround for libcxxabi integration bug
        } catch(e){}
        try {
          HEAP32[((__ZTVN10__cxxabiv120__si_class_type_infoE)>>2)]=2; // Workaround for libcxxabi integration bug
        } catch(e){}
        ___cxa_throw.initialized = true;
      }
      var header = ptr - ___cxa_exception_header_size;
      HEAP32[((header)>>2)]=type;
      HEAP32[(((header)+(4))>>2)]=destructor;
      ___cxa_last_thrown_exception = ptr;
      if (!("uncaught_exception" in __ZSt18uncaught_exceptionv)) {
        __ZSt18uncaught_exceptionv.uncaught_exception = 1;
      } else {
        __ZSt18uncaught_exceptionv.uncaught_exception++;
      }
      throw ptr;
    }

  function __embind_register_value_object_field() {
  Module['printErr']('missing function: _embind_register_value_object_field'); abort(-1);
  }

  function __embind_finalize_value_object() {
  Module['printErr']('missing function: _embind_finalize_value_object'); abort(-1);
  }

  function __embind_register_value_object() {
  Module['printErr']('missing function: _embind_register_value_object'); abort(-1);
  }

  
  function _memmove(dest, src, num) {
      dest = dest|0; src = src|0; num = num|0;
      var ret = 0;
      if (((src|0) < (dest|0)) & ((dest|0) < ((src + num)|0))) {
        // Unlikely case: Copy backwards in a safe manner
        ret = dest;
        src = (src + num)|0;
        dest = (dest + num)|0;
        while ((num|0) > 0) {
          dest = (dest - 1)|0;
          src = (src - 1)|0;
          num = (num - 1)|0;
          HEAP8[(dest)]=HEAP8[(src)];
        }
        dest = ret;
      } else {
        _memcpy(dest, src, num) | 0;
      }
      return dest | 0;
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function __embind_register_class_function() {
  Module['printErr']('missing function: _embind_register_class_function'); abort(-1);
  }

  function __emval_undefined() {
  Module['printErr']('missing function: _emval_undefined'); abort(-1);
  }

  function __emval_take_value() {
  Module['printErr']('missing function: _emval_take_value'); abort(-1);
  }

  function __emval_decref() {
  Module['printErr']('missing function: _emval_decref'); abort(-1);
  }

  function __emval_incref() {
  Module['printErr']('missing function: _emval_incref'); abort(-1);
  }

  function __embind_register_class_constructor() {
  Module['printErr']('missing function: _embind_register_class_constructor'); abort(-1);
  }

  function __embind_register_class() {
  Module['printErr']('missing function: _embind_register_class'); abort(-1);
  }

  function ___cxa_end_catch() {
      if (___cxa_end_catch.rethrown) {
        ___cxa_end_catch.rethrown = false;
        return;
      }
      // Clear state flag.
      __THREW__ = 0;
      // Call destructor if one is registered then clear it.
      var ptr = ___cxa_caught_exceptions.pop();
      if (ptr) {
        header = ptr - ___cxa_exception_header_size;
        var destructor = HEAP32[(((header)+(4))>>2)];
        if (destructor) {
          Runtime.dynCall('vi', destructor, [ptr]);
          HEAP32[(((header)+(4))>>2)]=0;
        }
        ___cxa_free_exception(ptr);
        ___cxa_last_thrown_exception = 0;
      }
    }

  function __embind_register_void() {
  Module['printErr']('missing function: _embind_register_void'); abort(-1);
  }

  function __embind_register_bool() {
  Module['printErr']('missing function: _embind_register_bool'); abort(-1);
  }

  function __embind_register_std_string() {
  Module['printErr']('missing function: _embind_register_std_string'); abort(-1);
  }

  function __embind_register_std_wstring() {
  Module['printErr']('missing function: _embind_register_std_wstring'); abort(-1);
  }

  function __embind_register_emval() {
  Module['printErr']('missing function: _embind_register_emval'); abort(-1);
  }

  function __embind_register_memory_view() {
  Module['printErr']('missing function: _embind_register_memory_view'); abort(-1);
  }

  function __embind_register_float() {
  Module['printErr']('missing function: _embind_register_float'); abort(-1);
  }

  function __embind_register_integer() {
  Module['printErr']('missing function: _embind_register_integer'); abort(-1);
  }

  function _pthread_mutex_lock() {}

  function _pthread_mutex_unlock() {}

  function ___cxa_guard_acquire(variable) {
      if (!HEAP8[(variable)]) { // ignore SAFE_HEAP stuff because llvm mixes i64 and i8 here
        HEAP8[(variable)]=1;
        return 1;
      }
      return 0;
    }

  function ___cxa_guard_release() {}

  function _pthread_cond_broadcast() {
      return 0;
    }

  function _pthread_cond_wait() {
      return 0;
    }



  function _ungetc(c, stream) {
      // int ungetc(int c, FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/ungetc.html
      stream = FS.getStreamFromPtr(stream);
      if (!stream) {
        return -1;
      }
      if (c === -1) {
        // do nothing for EOF character
        return c;
      }
      c = unSign(c & 0xFF);
      stream.ungotten.push(c);
      stream.eof = false;
      return c;
    }

  
  
  function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) {
        return 0;
      }
      var bytesRead = 0;
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return 0;
      }
      while (streamObj.ungotten.length && bytesToRead > 0) {
        HEAP8[((ptr++)|0)]=streamObj.ungotten.pop();
        bytesToRead--;
        bytesRead++;
      }
      var err = _read(streamObj.fd, ptr, bytesToRead);
      if (err == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      }
      bytesRead += err;
      if (bytesRead < bytesToRead) streamObj.eof = true;
      return Math.floor(bytesRead / size);
    }function _fgetc(stream) {
      // int fgetc(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fgetc.html
      var streamObj = FS.getStreamFromPtr(stream);
      if (!streamObj) return -1;
      if (streamObj.eof || streamObj.error) return -1;
      var ret = _fread(_fgetc.ret, 1, 1, stream);
      if (ret == 0) {
        return -1;
      } else if (ret == -1) {
        streamObj.error = true;
        return -1;
      } else {
        return HEAPU8[((_fgetc.ret)|0)];
      }
    }var _getc=_fgetc;

  function __ZNSt9exceptionD2Ev() {}

  function ___cxa_rethrow() {
      ___cxa_end_catch.rethrown = true;
      var ptr = ___cxa_caught_exceptions.pop();
      throw ptr;
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 30: return PAGE_SIZE;
        case 132:
        case 133:
        case 12:
        case 137:
        case 138:
        case 15:
        case 235:
        case 16:
        case 17:
        case 18:
        case 19:
        case 20:
        case 149:
        case 13:
        case 10:
        case 236:
        case 153:
        case 9:
        case 21:
        case 22:
        case 159:
        case 154:
        case 14:
        case 77:
        case 78:
        case 139:
        case 80:
        case 81:
        case 79:
        case 82:
        case 68:
        case 67:
        case 164:
        case 11:
        case 29:
        case 47:
        case 48:
        case 95:
        case 52:
        case 51:
        case 46:
          return 200809;
        case 27:
        case 246:
        case 127:
        case 128:
        case 23:
        case 24:
        case 160:
        case 161:
        case 181:
        case 182:
        case 242:
        case 183:
        case 184:
        case 243:
        case 244:
        case 245:
        case 165:
        case 178:
        case 179:
        case 49:
        case 50:
        case 168:
        case 169:
        case 175:
        case 170:
        case 171:
        case 172:
        case 97:
        case 76:
        case 32:
        case 173:
        case 35:
          return -1;
        case 176:
        case 177:
        case 7:
        case 155:
        case 8:
        case 157:
        case 125:
        case 126:
        case 92:
        case 93:
        case 129:
        case 130:
        case 131:
        case 94:
        case 91:
          return 1;
        case 74:
        case 60:
        case 69:
        case 70:
        case 4:
          return 1024;
        case 31:
        case 42:
        case 72:
          return 32;
        case 87:
        case 26:
        case 33:
          return 2147483647;
        case 34:
        case 1:
          return 47839;
        case 38:
        case 36:
          return 99;
        case 43:
        case 37:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 28: return 32768;
        case 44: return 32767;
        case 75: return 16384;
        case 39: return 1000;
        case 89: return 700;
        case 71: return 256;
        case 40: return 255;
        case 2: return 100;
        case 180: return 64;
        case 25: return 20;
        case 5: return 16;
        case 6: return 6;
        case 73: return 4;
        case 84: return 1;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function ___cxa_guard_abort() {}

  
  function _isxdigit(chr) {
      return (chr >= 48 && chr <= 57) ||
             (chr >= 97 && chr <= 102) ||
             (chr >= 65 && chr <= 70);
    }function _isxdigit_l(chr) {
      return _isxdigit(chr); // no locale support yet
    }

  
  function _isdigit(chr) {
      return chr >= 48 && chr <= 57;
    }function _isdigit_l(chr) {
      return _isdigit(chr); // no locale support yet
    }

  function _catopen(name, oflag) {
      // nl_catd catopen (const char *name, int oflag)
      return -1;
    }

  function _catgets(catd, set_id, msg_id, s) {
      // char *catgets (nl_catd catd, int set_id, int msg_id, const char *s)
      return s;
    }

  function _catclose(catd) {
      // int catclose (nl_catd catd)
      return 0;
    }

  function _newlocale(mask, locale, base) {
      return _malloc(4);
    }

  function _freelocale(locale) {
      _free(locale);
    }

  function ___ctype_b_loc() {
      // http://refspecs.freestandards.org/LSB_3.0.0/LSB-Core-generic/LSB-Core-generic/baselib---ctype-b-loc.html
      var me = ___ctype_b_loc;
      if (!me.ret) {
        var values = [
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,2,8195,8194,8194,8194,8194,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,24577,49156,49156,49156,
          49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,49156,55304,55304,55304,55304,55304,55304,55304,55304,
          55304,55304,49156,49156,49156,49156,49156,49156,49156,54536,54536,54536,54536,54536,54536,50440,50440,50440,50440,50440,
          50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,50440,49156,49156,49156,49156,49156,
          49156,54792,54792,54792,54792,54792,54792,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,50696,
          50696,50696,50696,50696,50696,50696,50696,49156,49156,49156,49156,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
          0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0
        ];
        var i16size = 2;
        var arr = _malloc(values.length * i16size);
        for (var i = 0; i < values.length; i++) {
          HEAP16[(((arr)+(i * i16size))>>1)]=values[i];
        }
        me.ret = allocate([arr + 128 * i16size], 'i16*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_tolower_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-tolower-loc.html
      var me = ___ctype_tolower_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,91,92,93,94,95,96,97,98,99,100,101,102,103,
          104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,
          134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,
          164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,
          194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,
          224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,
          254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  function ___ctype_toupper_loc() {
      // http://refspecs.freestandards.org/LSB_3.1.1/LSB-Core-generic/LSB-Core-generic/libutil---ctype-toupper-loc.html
      var me = ___ctype_toupper_loc;
      if (!me.ret) {
        var values = [
          128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,
          158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,
          188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,
          218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,
          248,249,250,251,252,253,254,-1,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,
          33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,
          73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,
          81,82,83,84,85,86,87,88,89,90,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,
          145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,
          175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,
          205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,
          235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255
        ];
        var i32size = 4;
        var arr = _malloc(values.length * i32size);
        for (var i = 0; i < values.length; i++) {
          HEAP32[(((arr)+(i * i32size))>>2)]=values[i];
        }
        me.ret = allocate([arr + 128 * i32size], 'i32*', ALLOC_NORMAL);
      }
      return me.ret;
    }

  
  
  function __isLeapYear(year) {
        return year%4 === 0 && (year%100 !== 0 || year%400 === 0);
    }
  
  function __arraySum(array, index) {
      var sum = 0;
      for (var i = 0; i <= index; sum += array[i++]);
      return sum;
    }
  
  
  var __MONTH_DAYS_LEAP=[31,29,31,30,31,30,31,31,30,31,30,31];
  
  var __MONTH_DAYS_REGULAR=[31,28,31,30,31,30,31,31,30,31,30,31];function __addDays(date, days) {
      var newDate = new Date(date.getTime());
      while(days > 0) {
        var leap = __isLeapYear(newDate.getFullYear());
        var currentMonth = newDate.getMonth();
        var daysInCurrentMonth = (leap ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR)[currentMonth];
  
        if (days > daysInCurrentMonth-newDate.getDate()) {
          // we spill over to next month
          days -= (daysInCurrentMonth-newDate.getDate()+1);
          newDate.setDate(1);
          if (currentMonth < 11) {
            newDate.setMonth(currentMonth+1)
          } else {
            newDate.setMonth(0);
            newDate.setFullYear(newDate.getFullYear()+1);
          }
        } else {
          // we stay in current month 
          newDate.setDate(newDate.getDate()+days);
          return newDate;
        }
      }
  
      return newDate;
    }function _strftime(s, maxsize, format, tm) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      
      var date = {
        tm_sec: HEAP32[((tm)>>2)],
        tm_min: HEAP32[(((tm)+(4))>>2)],
        tm_hour: HEAP32[(((tm)+(8))>>2)],
        tm_mday: HEAP32[(((tm)+(12))>>2)],
        tm_mon: HEAP32[(((tm)+(16))>>2)],
        tm_year: HEAP32[(((tm)+(20))>>2)],
        tm_wday: HEAP32[(((tm)+(24))>>2)],
        tm_yday: HEAP32[(((tm)+(28))>>2)],
        tm_isdst: HEAP32[(((tm)+(32))>>2)]
      };
  
      var pattern = Pointer_stringify(format);
  
      // expand format
      var EXPANSION_RULES_1 = {
        '%c': '%a %b %d %H:%M:%S %Y',     // Replaced by the locale's appropriate date and time representation - e.g., Mon Aug  3 14:02:01 2013
        '%D': '%m/%d/%y',                 // Equivalent to %m / %d / %y
        '%F': '%Y-%m-%d',                 // Equivalent to %Y - %m - %d
        '%h': '%b',                       // Equivalent to %b
        '%r': '%I:%M:%S %p',              // Replaced by the time in a.m. and p.m. notation
        '%R': '%H:%M',                    // Replaced by the time in 24-hour notation
        '%T': '%H:%M:%S',                 // Replaced by the time
        '%x': '%m/%d/%y',                 // Replaced by the locale's appropriate date representation
        '%X': '%H:%M:%S',                 // Replaced by the locale's appropriate date representation
      };
      for (var rule in EXPANSION_RULES_1) {
        pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_1[rule]);
      }
  
      var WEEKDAYS = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      var MONTHS = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
  
      function leadingSomething(value, digits, character) {
        var str = typeof value === 'number' ? value.toString() : (value || '');
        while (str.length < digits) {
          str = character[0]+str;
        }
        return str;
      };
  
      function leadingNulls(value, digits) {
        return leadingSomething(value, digits, '0');
      };
  
      function compareByDay(date1, date2) {
        function sgn(value) {
          return value < 0 ? -1 : (value > 0 ? 1 : 0);
        };
  
        var compare;
        if ((compare = sgn(date1.getFullYear()-date2.getFullYear())) === 0) {
          if ((compare = sgn(date1.getMonth()-date2.getMonth())) === 0) {
            compare = sgn(date1.getDate()-date2.getDate());
          }
        }
        return compare;
      };
  
      function getFirstWeekStartDate(janFourth) {
          switch (janFourth.getDay()) {
            case 0: // Sunday
              return new Date(janFourth.getFullYear()-1, 11, 29);
            case 1: // Monday
              return janFourth;
            case 2: // Tuesday
              return new Date(janFourth.getFullYear(), 0, 3);
            case 3: // Wednesday
              return new Date(janFourth.getFullYear(), 0, 2);
            case 4: // Thursday
              return new Date(janFourth.getFullYear(), 0, 1);
            case 5: // Friday
              return new Date(janFourth.getFullYear()-1, 11, 31);
            case 6: // Saturday
              return new Date(janFourth.getFullYear()-1, 11, 30);
          }
      };
  
      function getWeekBasedYear(date) {
          var thisDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          var janFourthThisYear = new Date(thisDate.getFullYear(), 0, 4);
          var janFourthNextYear = new Date(thisDate.getFullYear()+1, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          if (compareByDay(firstWeekStartThisYear, thisDate) <= 0) {
            // this date is after the start of the first week of this year
            if (compareByDay(firstWeekStartNextYear, thisDate) <= 0) {
              return thisDate.getFullYear()+1;
            } else {
              return thisDate.getFullYear();
            }
          } else { 
            return thisDate.getFullYear()-1;
          }
      };
  
      var EXPANSION_RULES_2 = {
        '%a': function(date) {
          return WEEKDAYS[date.tm_wday].substring(0,3);
        },
        '%A': function(date) {
          return WEEKDAYS[date.tm_wday];
        },
        '%b': function(date) {
          return MONTHS[date.tm_mon].substring(0,3);
        },
        '%B': function(date) {
          return MONTHS[date.tm_mon];
        },
        '%C': function(date) {
          var year = date.tm_year+1900;
          return leadingNulls(Math.floor(year/100),2);
        },
        '%d': function(date) {
          return leadingNulls(date.tm_mday, 2);
        },
        '%e': function(date) {
          return leadingSomething(date.tm_mday, 2, ' ');
        },
        '%g': function(date) {
          // %g, %G, and %V give values according to the ISO 8601:2000 standard week-based year. 
          // In this system, weeks begin on a Monday and week 1 of the year is the week that includes 
          // January 4th, which is also the week that includes the first Thursday of the year, and 
          // is also the first week that contains at least four days in the year. 
          // If the first Monday of January is the 2nd, 3rd, or 4th, the preceding days are part of 
          // the last week of the preceding year; thus, for Saturday 2nd January 1999, 
          // %G is replaced by 1998 and %V is replaced by 53. If December 29th, 30th, 
          // or 31st is a Monday, it and any following days are part of week 1 of the following year. 
          // Thus, for Tuesday 30th December 1997, %G is replaced by 1998 and %V is replaced by 01.
          
          return getWeekBasedYear(date).toString().substring(2);
        },
        '%G': function(date) {
          return getWeekBasedYear(date);
        },
        '%H': function(date) {
          return leadingNulls(date.tm_hour, 2);
        },
        '%I': function(date) {
          return leadingNulls(date.tm_hour < 13 ? date.tm_hour : date.tm_hour-12, 2);
        },
        '%j': function(date) {
          // Day of the year (001-366)
          return leadingNulls(date.tm_mday+__arraySum(__isLeapYear(date.tm_year+1900) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, date.tm_mon-1), 3);
        },
        '%m': function(date) {
          return leadingNulls(date.tm_mon+1, 2);
        },
        '%M': function(date) {
          return leadingNulls(date.tm_min, 2);
        },
        '%n': function() {
          return '\n';
        },
        '%p': function(date) {
          if (date.tm_hour > 0 && date.tm_hour < 13) {
            return 'AM';
          } else {
            return 'PM';
          }
        },
        '%S': function(date) {
          return leadingNulls(date.tm_sec, 2);
        },
        '%t': function() {
          return '\t';
        },
        '%u': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay() || 7;
        },
        '%U': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Sunday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year+1900, 0, 1);
          var firstSunday = janFirst.getDay() === 0 ? janFirst : __addDays(janFirst, 7-janFirst.getDay());
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
          
          // is target date after the first Sunday?
          if (compareByDay(firstSunday, endDate) < 0) {
            // calculate difference in days between first Sunday and endDate
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstSundayUntilEndJanuary = 31-firstSunday.getDate();
            var days = firstSundayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
  
          return compareByDay(firstSunday, janFirst) === 0 ? '01': '00';
        },
        '%V': function(date) {
          // Replaced by the week number of the year (Monday as the first day of the week) 
          // as a decimal number [01,53]. If the week containing 1 January has four 
          // or more days in the new year, then it is considered week 1. 
          // Otherwise, it is the last week of the previous year, and the next week is week 1. 
          // Both January 4th and the first Thursday of January are always in week 1. [ tm_year, tm_wday, tm_yday]
          var janFourthThisYear = new Date(date.tm_year+1900, 0, 4);
          var janFourthNextYear = new Date(date.tm_year+1901, 0, 4);
  
          var firstWeekStartThisYear = getFirstWeekStartDate(janFourthThisYear);
          var firstWeekStartNextYear = getFirstWeekStartDate(janFourthNextYear);
  
          var endDate = __addDays(new Date(date.tm_year+1900, 0, 1), date.tm_yday);
  
          if (compareByDay(endDate, firstWeekStartThisYear) < 0) {
            // if given date is before this years first week, then it belongs to the 53rd week of last year
            return '53';
          } 
  
          if (compareByDay(firstWeekStartNextYear, endDate) <= 0) {
            // if given date is after next years first week, then it belongs to the 01th week of next year
            return '01';
          }
  
          // given date is in between CW 01..53 of this calendar year
          var daysDifference;
          if (firstWeekStartThisYear.getFullYear() < date.tm_year+1900) {
            // first CW of this year starts last year
            daysDifference = date.tm_yday+32-firstWeekStartThisYear.getDate()
          } else {
            // first CW of this year starts this year
            daysDifference = date.tm_yday+1-firstWeekStartThisYear.getDate();
          }
          return leadingNulls(Math.ceil(daysDifference/7), 2);
        },
        '%w': function(date) {
          var day = new Date(date.tm_year+1900, date.tm_mon+1, date.tm_mday, 0, 0, 0, 0);
          return day.getDay();
        },
        '%W': function(date) {
          // Replaced by the week number of the year as a decimal number [00,53]. 
          // The first Monday of January is the first day of week 1; 
          // days in the new year before this are in week 0. [ tm_year, tm_wday, tm_yday]
          var janFirst = new Date(date.tm_year, 0, 1);
          var firstMonday = janFirst.getDay() === 1 ? janFirst : __addDays(janFirst, janFirst.getDay() === 0 ? 1 : 7-janFirst.getDay()+1);
          var endDate = new Date(date.tm_year+1900, date.tm_mon, date.tm_mday);
  
          // is target date after the first Monday?
          if (compareByDay(firstMonday, endDate) < 0) {
            var februaryFirstUntilEndMonth = __arraySum(__isLeapYear(endDate.getFullYear()) ? __MONTH_DAYS_LEAP : __MONTH_DAYS_REGULAR, endDate.getMonth()-1)-31;
            var firstMondayUntilEndJanuary = 31-firstMonday.getDate();
            var days = firstMondayUntilEndJanuary+februaryFirstUntilEndMonth+endDate.getDate();
            return leadingNulls(Math.ceil(days/7), 2);
          }
          return compareByDay(firstMonday, janFirst) === 0 ? '01': '00';
        },
        '%y': function(date) {
          // Replaced by the last two digits of the year as a decimal number [00,99]. [ tm_year]
          return (date.tm_year+1900).toString().substring(2);
        },
        '%Y': function(date) {
          // Replaced by the year as a decimal number (for example, 1997). [ tm_year]
          return date.tm_year+1900;
        },
        '%z': function(date) {
          // Replaced by the offset from UTC in the ISO 8601:2000 standard format ( +hhmm or -hhmm ),
          // or by no characters if no timezone is determinable. 
          // For example, "-0430" means 4 hours 30 minutes behind UTC (west of Greenwich). 
          // If tm_isdst is zero, the standard time offset is used. 
          // If tm_isdst is greater than zero, the daylight savings time offset is used. 
          // If tm_isdst is negative, no characters are returned. 
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%Z': function(date) {
          // Replaced by the timezone name or abbreviation, or by no bytes if no timezone information exists. [ tm_isdst]
          // FIXME: we cannot determine time zone (or can we?)
          return '';
        },
        '%%': function() {
          return '%';
        }
      };
      for (var rule in EXPANSION_RULES_2) {
        if (pattern.indexOf(rule) >= 0) {
          pattern = pattern.replace(new RegExp(rule, 'g'), EXPANSION_RULES_2[rule](date));
        }
      }
  
      var bytes = intArrayFromString(pattern, false);
      if (bytes.length > maxsize) {
        return 0;
      } 
  
      writeArrayToMemory(bytes, s);
      return bytes.length-1;
    }function _strftime_l(s, maxsize, format, tm) {
      return _strftime(s, maxsize, format, tm); // no locale support yet
    }

  
  
  
  function _isspace(chr) {
      return (chr == 32) || (chr >= 9 && chr <= 13);
    }
  function __parseInt64(str, endptr, base, min, max, unsign) {
      var isNegative = false;
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      if (HEAP8[(str)] == 45) {
        str++;
        isNegative = true;
      } else if (HEAP8[(str)] == 43) {
        str++;
      }
  
      // Find base.
      var ok = false;
      var finalBase = base;
      if (!finalBase) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            finalBase = 16;
            str += 2;
          } else {
            finalBase = 8;
            ok = true; // we saw an initial zero, perhaps the entire thing is just "0"
          }
        }
      } else if (finalBase==16) {
        if (HEAP8[(str)] == 48) {
          if (HEAP8[((str+1)|0)] == 120 ||
              HEAP8[((str+1)|0)] == 88) {
            str += 2;
          }
        }
      }
      if (!finalBase) finalBase = 10;
      var start = str;
  
      // Get digits.
      var chr;
      while ((chr = HEAP8[(str)]) != 0) {
        var digit = parseInt(String.fromCharCode(chr), finalBase);
        if (isNaN(digit)) {
          break;
        } else {
          str++;
          ok = true;
        }
      }
  
      if (!ok) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return tempRet0 = 0,0;
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str;
      }
  
      try {
        var numberString = isNegative ? '-'+Pointer_stringify(start, str - start) : Pointer_stringify(start, str - start);
        i64Math.fromString(numberString, finalBase, min, max, unsign);
      } catch(e) {
        ___setErrNo(ERRNO_CODES.ERANGE); // not quite correct
      }
  
      return tempRet0 = HEAP32[(((tempDoublePtr)+(4))>>2)],HEAP32[((tempDoublePtr)>>2)];
    }function _strtoull(str, endptr, base) {
      return __parseInt64(str, endptr, base, 0, '18446744073709551615', true);  // ULONG_MAX.
    }function _strtoull_l(str, endptr, base) {
      return _strtoull(str, endptr, base); // no locale support yet
    }

  
  function _strtoll(str, endptr, base) {
      return __parseInt64(str, endptr, base, '-9223372036854775808', '9223372036854775807');  // LLONG_MIN, LLONG_MAX.
    }function _strtoll_l(str, endptr, base) {
      return _strtoll(str, endptr, base); // no locale support yet
    }

  function _uselocale(locale) {
      return 0;
    }

  var _llvm_va_start=undefined;

  
  function _asprintf(s, format, varargs) {
      return _sprintf(-s, format, varargs);
    }function _vasprintf(s, format, va_arg) {
      return _asprintf(s, format, HEAP32[((va_arg)>>2)]);
    }

  function _llvm_va_end() {}

  function _vsnprintf(s, n, format, va_arg) {
      return _snprintf(s, n, format, HEAP32[((va_arg)>>2)]);
    }

  function _vsscanf(s, format, va_arg) {
      return _sscanf(s, format, HEAP32[((va_arg)>>2)]);
    }


  var _fabs=Math_abs;

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
      // We control the "dynamic" memory - DYNAMIC_BASE to DYNAMICTOP
      var self = _sbrk;
      if (!self.called) {
        DYNAMICTOP = alignMemoryPage(DYNAMICTOP); // make sure we start out aligned
        self.called = true;
        assert(Runtime.dynamicAlloc);
        self.alloc = Runtime.dynamicAlloc;
        Runtime.dynamicAlloc = function() { abort('cannot dynamically allocate, sbrk now has control') };
      }
      var ret = DYNAMICTOP;
      if (bytes != 0) self.alloc(bytes);
      return ret;  // Previous break location.
    }

  function ___cxa_call_unexpected(exception) {
      Module.printErr('Unexpected exception thrown, this is not properly supported - aborting');
      ABORT = true;
      throw exception;
    }

  
  function _copysign(a, b) {
      return __reallyNegative(a) === __reallyNegative(b) ? a : -a;
    }var _copysignl=_copysign;

  
  function _fmod(x, y) {
      return x % y;
    }var _fmodl=_fmod;






  var Browser={mainLoop:{scheduler:null,method:"",shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},isFullScreen:false,pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],init:function () {
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = []; // needs to exist even in workers
  
        if (Browser.initted || ENVIRONMENT_IS_WORKER) return;
        Browser.initted = true;
  
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : undefined;
        if (!Module.noImageDecoding && typeof Browser.URLObject === 'undefined') {
          console.log("warning: Browser does not support creating object URLs. Built-in browser image decoding will not be available.");
          Module.noImageDecoding = true;
        }
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function imagePlugin_canHandle(name) {
          return !Module.noImageDecoding && /\.(jpg|jpeg|png|bmp)$/i.test(name);
        };
        imagePlugin['handle'] = function imagePlugin_handle(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: Browser.getMimetype(name) });
              if (b.size !== byteArray.length) { // Safari bug #118630
                // Safari's Blob can only take an ArrayBuffer
                b = new Blob([(new Uint8Array(byteArray)).buffer], { type: Browser.getMimetype(name) });
              }
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function img_onload() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function img_onerror(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function audioPlugin_canHandle(name) {
          return !Module.noAudioDecoding && name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function audioPlugin_handle(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: Browser.getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function audio_onerror(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            Browser.safeSetTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
  
        // Canvas event setup
  
        var canvas = Module['canvas'];
        
        // forced aspect ratio can be enabled by defining 'forcedAspectRatio' on Module
        // Module['forcedAspectRatio'] = 4 / 3;
        
        canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                    canvas['mozRequestPointerLock'] ||
                                    canvas['webkitRequestPointerLock'] ||
                                    canvas['msRequestPointerLock'] ||
                                    function(){};
        canvas.exitPointerLock = document['exitPointerLock'] ||
                                 document['mozExitPointerLock'] ||
                                 document['webkitExitPointerLock'] ||
                                 document['msExitPointerLock'] ||
                                 function(){}; // no-op if function does not exist
        canvas.exitPointerLock = canvas.exitPointerLock.bind(document);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas ||
                                document['msPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
        document.addEventListener('mspointerlockchange', pointerLockChange, false);
  
        if (Module['elementPointerLock']) {
          canvas.addEventListener("click", function(ev) {
            if (!Browser.pointerLock && canvas.requestPointerLock) {
              canvas.requestPointerLock();
              ev.preventDefault();
            }
          }, false);
        }
      },createContext:function (canvas, useWebGL, setInModule, webGLContextAttributes) {
        var ctx;
        var errorInfo = '?';
        function onContextCreationError(event) {
          errorInfo = event.statusMessage || errorInfo;
        }
        try {
          if (useWebGL) {
            var contextAttributes = {
              antialias: false,
              alpha: false
            };
  
            if (webGLContextAttributes) {
              for (var attribute in webGLContextAttributes) {
                contextAttributes[attribute] = webGLContextAttributes[attribute];
              }
            }
  
  
            canvas.addEventListener('webglcontextcreationerror', onContextCreationError, false);
            try {
              ['experimental-webgl', 'webgl'].some(function(webglId) {
                return ctx = canvas.getContext(webglId, contextAttributes);
              });
            } finally {
              canvas.removeEventListener('webglcontextcreationerror', onContextCreationError, false);
            }
          } else {
            ctx = canvas.getContext('2d');
          }
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas: ' + [errorInfo, e]);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          GLctx = Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
          Browser.init();
        }
        return ctx;
      },destroyContext:function (canvas, useWebGL, setInModule) {},fullScreenHandlersInstalled:false,lockPointer:undefined,resizeCanvas:undefined,requestFullScreen:function (lockPointer, resizeCanvas) {
        Browser.lockPointer = lockPointer;
        Browser.resizeCanvas = resizeCanvas;
        if (typeof Browser.lockPointer === 'undefined') Browser.lockPointer = true;
        if (typeof Browser.resizeCanvas === 'undefined') Browser.resizeCanvas = false;
  
        var canvas = Module['canvas'];
        function fullScreenChange() {
          Browser.isFullScreen = false;
          var canvasContainer = canvas.parentNode;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement'] ||
               document['msFullScreenElement'] || document['msFullscreenElement'] ||
               document['webkitCurrentFullScreenElement']) === canvasContainer) {
            canvas.cancelFullScreen = document['cancelFullScreen'] ||
                                      document['mozCancelFullScreen'] ||
                                      document['webkitCancelFullScreen'] ||
                                      document['msExitFullscreen'] ||
                                      document['exitFullscreen'] ||
                                      function() {};
            canvas.cancelFullScreen = canvas.cancelFullScreen.bind(document);
            if (Browser.lockPointer) canvas.requestPointerLock();
            Browser.isFullScreen = true;
            if (Browser.resizeCanvas) Browser.setFullScreenCanvasSize();
          } else {
            
            // remove the full screen specific parent of the canvas again to restore the HTML structure from before going full screen
            canvasContainer.parentNode.insertBefore(canvas, canvasContainer);
            canvasContainer.parentNode.removeChild(canvasContainer);
            
            if (Browser.resizeCanvas) Browser.setWindowedCanvasSize();
          }
          if (Module['onFullScreen']) Module['onFullScreen'](Browser.isFullScreen);
          Browser.updateCanvasDimensions(canvas);
        }
  
        if (!Browser.fullScreenHandlersInstalled) {
          Browser.fullScreenHandlersInstalled = true;
          document.addEventListener('fullscreenchange', fullScreenChange, false);
          document.addEventListener('mozfullscreenchange', fullScreenChange, false);
          document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
          document.addEventListener('MSFullscreenChange', fullScreenChange, false);
        }
  
        // create a new parent to ensure the canvas has no siblings. this allows browsers to optimize full screen performance when its parent is the full screen root
        var canvasContainer = document.createElement("div");
        canvas.parentNode.insertBefore(canvasContainer, canvas);
        canvasContainer.appendChild(canvas);
        
        // use parent of canvas as full screen root to allow aspect ratio correction (Firefox stretches the root to screen size)
        canvasContainer.requestFullScreen = canvasContainer['requestFullScreen'] ||
                                            canvasContainer['mozRequestFullScreen'] ||
                                            canvasContainer['msRequestFullscreen'] ||
                                           (canvasContainer['webkitRequestFullScreen'] ? function() { canvasContainer['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvasContainer.requestFullScreen();
      },requestAnimationFrame:function requestAnimationFrame(func) {
        if (typeof window === 'undefined') { // Provide fallback to setTimeout if window is undefined (e.g. in Node.js)
          setTimeout(func, 1000/60);
        } else {
          if (!window.requestAnimationFrame) {
            window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                           window['mozRequestAnimationFrame'] ||
                                           window['webkitRequestAnimationFrame'] ||
                                           window['msRequestAnimationFrame'] ||
                                           window['oRequestAnimationFrame'] ||
                                           window['setTimeout'];
          }
          window.requestAnimationFrame(func);
        }
      },safeCallback:function (func) {
        return function() {
          if (!ABORT) return func.apply(null, arguments);
        };
      },safeRequestAnimationFrame:function (func) {
        return Browser.requestAnimationFrame(function() {
          if (!ABORT) func();
        });
      },safeSetTimeout:function (func, timeout) {
        return setTimeout(function() {
          if (!ABORT) func();
        }, timeout);
      },safeSetInterval:function (func, timeout) {
        return setInterval(function() {
          if (!ABORT) func();
        }, timeout);
      },getMimetype:function (name) {
        return {
          'jpg': 'image/jpeg',
          'jpeg': 'image/jpeg',
          'png': 'image/png',
          'bmp': 'image/bmp',
          'ogg': 'audio/ogg',
          'wav': 'audio/wav',
          'mp3': 'audio/mpeg'
        }[name.substr(name.lastIndexOf('.')+1)];
      },getUserMedia:function (func) {
        if(!window.getUserMedia) {
          window.getUserMedia = navigator['getUserMedia'] ||
                                navigator['mozGetUserMedia'];
        }
        window.getUserMedia(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },getMouseWheelDelta:function (event) {
        return Math.max(-1, Math.min(1, event.type === 'DOMMouseScroll' ? event.detail : -event.wheelDelta));
      },mouseX:0,mouseY:0,mouseMovementX:0,mouseMovementY:0,touches:{},lastTouches:{},calculateMouseEvent:function (event) { // event should be mousemove, mousedown or mouseup
        if (Browser.pointerLock) {
          // When the pointer is locked, calculate the coordinates
          // based on the movement of the mouse.
          // Workaround for Firefox bug 764498
          if (event.type != 'mousemove' &&
              ('mozMovementX' in event)) {
            Browser.mouseMovementX = Browser.mouseMovementY = 0;
          } else {
            Browser.mouseMovementX = Browser.getMovementX(event);
            Browser.mouseMovementY = Browser.getMovementY(event);
          }
          
          // check if SDL is available
          if (typeof SDL != "undefined") {
          	Browser.mouseX = SDL.mouseX + Browser.mouseMovementX;
          	Browser.mouseY = SDL.mouseY + Browser.mouseMovementY;
          } else {
          	// just add the mouse delta to the current absolut mouse position
          	// FIXME: ideally this should be clamped against the canvas size and zero
          	Browser.mouseX += Browser.mouseMovementX;
          	Browser.mouseY += Browser.mouseMovementY;
          }        
        } else {
          // Otherwise, calculate the movement based on the changes
          // in the coordinates.
          var rect = Module["canvas"].getBoundingClientRect();
          var cw = Module["canvas"].width;
          var ch = Module["canvas"].height;
  
          // Neither .scrollX or .pageXOffset are defined in a spec, but
          // we prefer .scrollX because it is currently in a spec draft.
          // (see: http://www.w3.org/TR/2013/WD-cssom-view-20131217/)
          var scrollX = ((typeof window.scrollX !== 'undefined') ? window.scrollX : window.pageXOffset);
          var scrollY = ((typeof window.scrollY !== 'undefined') ? window.scrollY : window.pageYOffset);
          // If this assert lands, it's likely because the browser doesn't support scrollX or pageXOffset
          // and we have no viable fallback.
          assert((typeof scrollX !== 'undefined') && (typeof scrollY !== 'undefined'), 'Unable to retrieve scroll position, mouse positions likely broken.');
  
          if (event.type === 'touchstart' || event.type === 'touchend' || event.type === 'touchmove') {
            var touch = event.touch;
            if (touch === undefined) {
              return; // the "touch" property is only defined in SDL
  
            }
            var adjustedX = touch.pageX - (scrollX + rect.left);
            var adjustedY = touch.pageY - (scrollY + rect.top);
  
            adjustedX = adjustedX * (cw / rect.width);
            adjustedY = adjustedY * (ch / rect.height);
  
            var coords = { x: adjustedX, y: adjustedY };
            
            if (event.type === 'touchstart') {
              Browser.lastTouches[touch.identifier] = coords;
              Browser.touches[touch.identifier] = coords;
            } else if (event.type === 'touchend' || event.type === 'touchmove') {
              Browser.lastTouches[touch.identifier] = Browser.touches[touch.identifier];
              Browser.touches[touch.identifier] = { x: adjustedX, y: adjustedY };
            } 
            return;
          }
  
          var x = event.pageX - (scrollX + rect.left);
          var y = event.pageY - (scrollY + rect.top);
  
          // the canvas might be CSS-scaled compared to its backbuffer;
          // SDL-using content will want mouse coordinates in terms
          // of backbuffer units.
          x = x * (cw / rect.width);
          y = y * (ch / rect.height);
  
          Browser.mouseMovementX = x - Browser.mouseX;
          Browser.mouseMovementY = y - Browser.mouseY;
          Browser.mouseX = x;
          Browser.mouseY = y;
        }
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function xhr_onload() {
          if (xhr.status == 200 || (xhr.status == 0 && xhr.response)) { // file URLs can return 0
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror, noRunDep) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          if (!noRunDep) removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        if (!noRunDep) addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        Browser.updateCanvasDimensions(canvas, width, height);
        if (!noUpdates) Browser.updateResizeListeners();
      },windowedWidth:0,windowedHeight:0,setFullScreenCanvasSize:function () {
        // check if SDL is available   
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags | 0x00800000; // set SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },setWindowedCanvasSize:function () {
        // check if SDL is available       
        if (typeof SDL != "undefined") {
        	var flags = HEAPU32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)];
        	flags = flags & ~0x00800000; // clear SDL_FULLSCREEN flag
        	HEAP32[((SDL.screen+Runtime.QUANTUM_SIZE*0)>>2)]=flags
        }
        Browser.updateResizeListeners();
      },updateCanvasDimensions:function (canvas, wNative, hNative) {
        if (wNative && hNative) {
          canvas.widthNative = wNative;
          canvas.heightNative = hNative;
        } else {
          wNative = canvas.widthNative;
          hNative = canvas.heightNative;
        }
        var w = wNative;
        var h = hNative;
        if (Module['forcedAspectRatio'] && Module['forcedAspectRatio'] > 0) {
          if (w/h < Module['forcedAspectRatio']) {
            w = Math.round(h * Module['forcedAspectRatio']);
          } else {
            h = Math.round(w / Module['forcedAspectRatio']);
          }
        }
        if (((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
             document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
             document['fullScreenElement'] || document['fullscreenElement'] ||
             document['msFullScreenElement'] || document['msFullscreenElement'] ||
             document['webkitCurrentFullScreenElement']) === canvas.parentNode) && (typeof screen != 'undefined')) {
           var factor = Math.min(screen.width / w, screen.height / h);
           w = Math.round(w * factor);
           h = Math.round(h * factor);
        }
        if (Browser.resizeCanvas) {
          if (canvas.width  != w) canvas.width  = w;
          if (canvas.height != h) canvas.height = h;
          if (typeof canvas.style != 'undefined') {
            canvas.style.removeProperty( "width");
            canvas.style.removeProperty("height");
          }
        } else {
          if (canvas.width  != wNative) canvas.width  = wNative;
          if (canvas.height != hNative) canvas.height = hNative;
          if (typeof canvas.style != 'undefined') {
            if (w != wNative || h != hNative) {
              canvas.style.setProperty( "width", w + "px", "important");
              canvas.style.setProperty("height", h + "px", "important");
            } else {
              canvas.style.removeProperty( "width");
              canvas.style.removeProperty("height");
            }
          }
        }
      }};
FS.staticInit();__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___errno_state = Runtime.staticAlloc(4); HEAP32[((___errno_state)>>2)]=0;
__ATINIT__.unshift({ func: function() { TTY.init() } });__ATEXIT__.push({ func: function() { TTY.shutdown() } });TTY.utf8 = new Runtime.UTF8Processor();
if (ENVIRONMENT_IS_NODE) { var fs = require("fs"); NODEFS.staticInit(); }
__ATINIT__.push({ func: function() { SOCKFS.root = FS.mount(SOCKFS, {}, null); } });
_fgetc.ret = allocate([0], "i8", ALLOC_STATIC);
Module["requestFullScreen"] = function Module_requestFullScreen(lockPointer, resizeCanvas) { Browser.requestFullScreen(lockPointer, resizeCanvas) };
  Module["requestAnimationFrame"] = function Module_requestAnimationFrame(func) { Browser.requestAnimationFrame(func) };
  Module["setCanvasSize"] = function Module_setCanvasSize(width, height, noUpdates) { Browser.setCanvasSize(width, height, noUpdates) };
  Module["pauseMainLoop"] = function Module_pauseMainLoop() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function Module_resumeMainLoop() { Browser.mainLoop.resume() };
  Module["getUserMedia"] = function Module_getUserMedia() { Browser.getUserMedia() }
STACK_BASE = STACKTOP = Runtime.alignMemory(STATICTOP);

staticSealed = true; // seal the static portion of memory

STACK_MAX = STACK_BASE + 5242880;

DYNAMIC_BASE = DYNAMICTOP = Runtime.alignMemory(STACK_MAX);

assert(DYNAMIC_BASE < TOTAL_MEMORY, "TOTAL_MEMORY not big enough for stack");



var FUNCTION_TABLE = [0,0,__ZNSt3__18messagesIwED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNKSt3__18numpunctIcE12do_falsenameEv,0,__ZNKSt3__120__time_get_c_storageIwE3__rEv,0,_handle_LANdiscovery,0,__ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt12length_errorD0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__Z4saveRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__17codecvtIwc11__mbstate_tED2Ev,0,__ZN10emscripten8internal12operator_newINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEJEEEPT_DpT0_,0,__ZNSt3__110__stdinbufIcED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__110__stdinbufIcE9pbackfailEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv,0,__ZNSt3__110__stdinbufIwED0Ev,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt11logic_errorD0Ev,0,__ZNSt3__17codecvtIDsc11__mbstate_tED0Ev,0,__ZNKSt3__17collateIcE7do_hashEPKcS3_,0,__ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__120__time_get_c_storageIwE8__monthsEv,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,_dht_load_state_callback,0,__ZNKSt3__15ctypeIcE10do_toupperEPcPKc,0,__ZN10emscripten8internal7InvokerIPNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEJEE6invokeEPFS8_vE,0,__ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv,0,_crypto_onetimeauth_poly1305_ref,0,__ZNKSt3__15ctypeIwE10do_tolowerEPwPKw,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv,0,__ZNSt3__17collateIcED1Ev,0,__ZNSt3__18ios_base7failureD2Ev,0,__ZN10emscripten8internal14raw_destructorINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEEEvPT_,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNSt9bad_allocD2Ev,0,__ZNKSt3__110moneypunctIcLb1EE11do_groupingEv,0,__ZNSt3__16locale5facetD0Ev,0,__ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_,0,__ZNKSt3__120__time_get_c_storageIwE3__cEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx,0,__ZNSt3__15ctypeIcED0Ev,0,__ZNSt3__16vectorI7ContactNS_9allocatorIS1_EEE9push_backERKS1_,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd,0,__ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb,0,__ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,_handle_data_response,0,__ZN10emscripten8internal12MemberAccessI7ContactNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E,0,_friend_request,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEE3getERKS7_j,0,__ZNSt3__18messagesIcED1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__weeksEv,0,_name_change,0,__ZNKSt3__18numpunctIwE11do_groupingEv,0,__ZNSt3__16locale5facet16__on_zero_sharedEv,0,__ZN10emscripten8internal7InvokerIbJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbSA_EPNS0_11BindingTypeIS8_EUt_E,0,__ZNKSt3__15ctypeIwE8do_widenEc,0,__ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc,0,_handle_ping_response,0,__ZNSt3__110__stdinbufIcE5uflowEv,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv,0,__ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv,0,_handle_send_1,0,_handle_send_2,0,__ZNKSt3__15ctypeIcE8do_widenEc,0,__ZNSt3__110moneypunctIwLb0EED0Ev,0,__Z7setNameRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,_cmp_entry367,0,__ZNSt3__16locale5__impD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv,0,__ZNSt3__16vectorI7ContactNS_9allocatorIS1_EEED1Ev,0,__ZNKSt3__15ctypeIcE10do_toupperEc,0,__Z9bootstrapRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS7_,0,__ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv,0,_cryptopacket_handle,0,__ZNSt3__18numpunctIcED2Ev,0,_handle_announce_request,0,__ZNKSt3__18numpunctIcE11do_groupingEv,0,__ZNK10__cxxabiv116__shim_type_info5noop1Ev,0,__ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEjRKS4_EbS8_JjSA_EE6invokeEPSC_PS7_jPS4_,0,__ZN10__cxxabiv119__pointer_type_infoD0Ev,0,__ZNSt3__16locale2id6__initEv,0,_handle_group,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__120__time_get_c_storageIwE3__xEv,0,__ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv,0,__ZNSt3__110__stdinbufIwE9pbackfailEj,0,__ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorI7ContactNS3_9allocatorIS5_EEEEjES2_SA_JjEE6invokeEPSC_PS8_j,0,__Z9setStatusi,0,__ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc,0,__ZNSt3__18numpunctIcED0Ev,0,__ZNSt3__111__stdoutbufIcE8overflowEi,0,__Z11getContactsv,0,__ZNSt3__119__iostream_categoryD1Ev,0,__ZNKSt3__120__time_get_c_storageIwE7__am_pmEv,0,__ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE,0,__ZNKSt3__18messagesIcE8do_closeEi,0,__ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt,0,__ZNSt13runtime_errorD2Ev,0,__ZNKSt3__15ctypeIwE10do_toupperEw,0,__ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc,0,__ZN10emscripten8internal12MemberAccessI7ContactiE7setWireIS2_EEvRKMS2_iRT_i,0,__Z4loadRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv,0,__Z12changeNospamv,0,__ZN10emscripten8internal12MemberAccessI7ContactlE7setWireIS2_EEvRKMS2_lRT_l,0,__ZNSt3__17collateIwED1Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm,0,__ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNKSt8bad_cast4whatEv,0,_messenger_load_state_callback_old,0,__ZNSt3__110moneypunctIcLb0EED1Ev,0,_handle_recv_3,0,__ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__18numpunctIwED2Ev,0,__ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv,0,_handle_getnodes,0,__ZNSt3__15ctypeIwED0Ev,0,__ZNKSt13runtime_error4whatEv,0,__ZN10emscripten8internal14raw_destructorI7ContactEEvPT_,0,_free,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,_friend_message,0,__ZN10emscripten8internal7InvokerIbJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiSA_EE6invokeEPFbSA_iSA_EPNS0_11BindingTypeIS8_EUt_EiSH_,0,__ZNSt3__117__widen_from_utf8ILj32EED0Ev,0,__ZN10__cxxabiv123__fundamental_type_infoD0Ev,0,__ZNKSt3__18numpunctIwE16do_thousands_sepEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNSt3__110__stdinbufIwED1Ev,0,__ZNKSt3__18numpunctIcE16do_decimal_pointEv,0,__ZN10emscripten8internal15raw_constructorI7ContactJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE,0,__ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv,0,__ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__120__time_get_c_storageIcE3__xEv,0,_handle_handshake,0,__ZNSt3__17collateIwED0Ev,0,__ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__Z6updatev,0,_handle_data_request,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_,0,__ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE,0,__ZNSt11logic_errorD2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy,0,_friend_already_added,0,__ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__18numpunctIwE16do_decimal_pointEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv,0,__ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__Z16setStatusMessageRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__110moneypunctIcLb0EE11do_groupingEv,0,__ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv,0,__ZNSt3__17codecvtIDic11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv,0,__ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__120__time_get_c_storageIcE3__XEv,0,_handle_hardening,0,__ZNKSt3__15ctypeIwE9do_narrowEwc,0,__ZN10emscripten8internal12VectorAccessINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEE3setERS7_jRKS4_,0,__ZNSt3__110__stdinbufIcE9underflowEv,0,__ZNSt3__111__stdoutbufIwE4syncEv,0,__ZNSt3__110moneypunctIwLb0EED1Ev,0,__ZN10emscripten8internal12MemberAccessI7ContactlE7getWireIS2_EElRKMS2_lRKT_,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEKFjvEjPKS7_JEE6invokeERKS9_SB_,0,_status_message,0,__ZNKSt3__16vectorI7ContactNS_9allocatorIS1_EEE4sizeEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17collateIwE7do_hashEPKwS3_,0,_handle_dht_fakeid,0,_cmp_entry,0,__ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv,0,__ZNSt3__18ios_baseD0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv,0,_handle_SYNC,0,__ZNSt3__110moneypunctIcLb1EED0Ev,0,__ZNSt9bad_allocD0Ev,0,__Z5setupv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev,0,_handle_sendnodes,0,__ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE,0,___cxx_global_array_dtor53,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci,0,___cxx_global_array_dtor56,0,__ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_,0,_handle_fakeid_announce,0,_handle_send_initial,0,__ZN10emscripten8internal7InvokerIbJEE6invokeEPFbvE,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev,0,__ZN10__cxxabiv120__si_class_type_infoD0Ev,0,__ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_,0,__Z11sendMessageiRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__15ctypeIcE10do_tolowerEc,0,__ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv,0,__ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc,0,__ZNSt3__17codecvtIcc11__mbstate_tED0Ev,0,__ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv,0,__ZNKSt3__120__time_get_c_storageIcE7__weeksEv,0,__ZNKSt3__18numpunctIwE11do_truenameEv,0,__Z16getStatusMessagev,0,__ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIwE9underflowEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_base7failureD0Ev,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__18ios_base4InitD2Ev,0,__ZNKSt3__15ctypeIwE5do_isEtw,0,__ZNSt3__110moneypunctIwLb1EED0Ev,0,__Z13removeContacti,0,__ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm,0,__ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv,0,__ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE,0,___cxx_global_array_dtor105,0,__ZNK10__cxxabiv116__shim_type_info5noop2Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi,0,__ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,__ZNKSt9bad_alloc4whatEv,0,_handle_NATping,0,__ZNSt3__111__stdoutbufIcED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv,0,__ZN10emscripten8internal7InvokerIbJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_EE6invokeEPFbSA_SA_EPNS0_11BindingTypeIS8_EUt_ESH_,0,__ZN10emscripten8internal13getActualTypeINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEEEPKNS0_7_TYPEIDEPT_,0,__ZNSt3__16locale5__impD0Ev,0,__ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi,0,__ZNKSt3__119__iostream_category4nameEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__110moneypunctIwLb1EE11do_groupingEv,0,_friendreq_handlepacket,0,__ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNSt8bad_castD0Ev,0,__ZNKSt3__15ctypeIcE9do_narrowEcc,0,__ZN10emscripten8internal7InvokerIbJiEE6invokeEPFbiEi,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNSt3__112__do_nothingEPv,0,__ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,___cxx_global_array_dtor81,0,__ZNSt3__110moneypunctIcLb0EED0Ev,0,__ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv,0,__ZNKSt3__18numpunctIwE12do_falsenameEv,0,__ZNSt3__17collateIcED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv,0,_handle_data,0,__ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv,0,__ZNSt3__111__stdoutbufIcED0Ev,0,__ZNSt3__16locale5facetD2Ev,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev,0,__Z5getIdv,0,__ZNSt3__112system_errorD0Ev,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__111__stdoutbufIwED0Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv,0,__ZNSt3__110__stdinbufIwE5uflowEv,0,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKS8_EE6invokeEPFS8_SA_EPNS0_11BindingTypeIS8_EUt_E,0,__ZNKSt3__18numpunctIcE11do_truenameEv,0,__ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_,0,__ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv,0,__ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe,0,__ZNSt3__17codecvtIwc11__mbstate_tED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__18numpunctIcE16do_thousands_sepEv,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZN10emscripten8internal7InvokerIbJiRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbiSA_EiPNS0_11BindingTypeIS8_EUt_E,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv,0,__ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj,0,__ZNSt3__18numpunctIwED0Ev,0,_crypto_onetimeauth_poly1305_ref_verify,0,_crypto_onetimeauth_poly1305_ref_implementation_name,0,_handle_sendnodes_ipv6,0,__ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE,0,__ZNKSt3__15ctypeIwE10do_tolowerEw,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv,0,__ZNSt3__111__stdoutbufIcE4syncEv,0,__ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev,0,__ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj,0,__Z7cleanupv,0,__ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE,0,__ZNKSt3__17collateIwE12do_transformEPKwS3_,0,__ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx,0,__ZN10emscripten8internal12MemberAccessI7ContactiE7getWireIS2_EEiRKMS2_iRKT_,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd,0,__ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm,0,__ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl,0,__ZNSt8bad_castD2Ev,0,__ZN10__cxxabiv121__vmi_class_type_infoD0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv,0,__ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNKSt3__120__time_get_c_storageIcE3__rEv,0,__ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE,0,__ZNKSt3__15ctypeIwE10do_toupperEPwPKw,0,__ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj,0,__ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEFvRKS4_EvPS7_JS9_EE6invokeERKSB_SC_PS4_,0,__ZNKSt3__114error_category23default_error_conditionEi,0,__ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18messagesIwE8do_closeEi,0,_handle_announce_response,0,__ZNSt3__112system_errorD2Ev,0,__Z10addContactRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_,0,__ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv,0,__ZNKSt3__110moneypunctIwLb0EE11do_groupingEv,0,__ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv,0,__ZN10emscripten8internal7InvokerIRKNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEJEE6invokeEPFS9_vE,0,__ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv,0,__ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__120__time_get_c_storageIcE8__monthsEv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNSt3__111__stdoutbufIwE6xsputnEPKwi,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf,0,__ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv,0,__ZNKSt3__114error_category10equivalentERKNS_10error_codeEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv,0,__ZNKSt11logic_error4whatEv,0,__ZNKSt3__119__iostream_category7messageEi,0,__ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv,0,__Z7getNamev,0,__ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_,0,__ZNKSt3__17collateIcE12do_transformEPKcS3_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi,0,__ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv,0,__ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv,0,__ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEE6invokeEPFS8_vE,0,__ZNSt3__18messagesIcED0Ev,0,__ZNKSt3__15ctypeIcE10do_tolowerEPcPKc,0,__Z9getStatusv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc,0,__ZNKSt3__120__time_get_c_storageIcE7__am_pmEv,0,__ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv,0,__ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw,0,__ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv,0,_messenger_load_state_callback,0,__ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib,0,__ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j,0,__ZNSt3__18ios_baseD2Ev,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev,0,__ZNSt3__110__stdinbufIcED0Ev,0,__ZN10emscripten8internal12MemberAccessI7ContactNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_,0,__ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv,0,__ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm,0,__ZNSt3__119__iostream_categoryD0Ev,0,__ZNSt3__110moneypunctIwLb1EED1Ev,0,__ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv,0,__ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE,0,_handle_recv_2,0,_handle_recv_1,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev,0,__ZNSt3__110moneypunctIcLb1EED1Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj,0,__ZNKSt3__120__time_get_c_storageIcE3__cEv,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci,0,__ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_,0,__ZNKSt3__120__time_get_c_storageIwE3__XEv,0,__ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm,0,__ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,__ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev,0,__ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi,0,__ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev,0,__ZNSt3__111__stdoutbufIwE8overflowEj,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl,0,__ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd,0,__ZNSt3__116__narrow_to_utf8ILj32EED0Ev,0,__ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__111__stdoutbufIcE6xsputnEPKci,0,__ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb,0,___cxx_global_array_dtor,0,_handle_ping_request,0,__ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZN10__cxxabiv117__class_type_infoD0Ev,0,__ZNSt3__18messagesIwED1Ev,0,__ZNSt3__111__stdoutbufIwED1Ev,0,__ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE,0,__ZN10__cxxabiv116__shim_type_infoD2Ev,0,__ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_,0,__ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv,0,__ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev,0,__ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE,0,__ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_,0,__ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv,0,__ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv,0,__ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev,0,__ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi,0,__ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev,0,__ZNSt3__15ctypeIcED2Ev,0,__ZNSt13runtime_errorD0Ev,0,__ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev,0,___cxx_global_array_dtor120,0];

// EMSCRIPTEN_START_FUNCS

function _Assoc_add_entry($assoc,$id,$ippts_send,$ipp_recv,$used){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $pos_check_i_i=sp;
 var $1=($assoc|0)==0;
 var $2=($id|0)==0;
 var $or_cond=$1|$2;
 var $3=($ippts_send|0)==0;
 var $or_cond2=$or_cond|$3;
 if($or_cond2){label=95;break;}else{label=2;break;}
 case 2: 
 var $5=(($assoc)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){var $sum_07_i=0;var $i_08_i=0;label=3;break;}else{var $81=$6;label=20;break;}
 case 3: 
 var $i_08_i;
 var $sum_07_i;
 var $8=(($assoc+4+$i_08_i)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10|$sum_07_i;
 var $12=((($i_08_i)+(1))|0);
 var $13=($12>>>0)<32;
 if($13){var $sum_07_i=$11;var $i_08_i=$12;label=3;break;}else{label=4;break;}
 case 4: 
 var $15=(($assoc+4)|0);
 var $16=($11|0)==0;
 if($16){label=95;break;}else{var $i_01_i_i=0;var $res_02_i_i=430329474;label=5;break;}
 case 5: 
 var $res_02_i_i;
 var $i_01_i_i;
 var $17=$res_02_i_i<<1;
 var $18=(($assoc+4+$i_01_i_i)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20^$17;
 var $22=$res_02_i_i>>>31;
 var $23=((($21)+($22))|0);
 var $24=((($i_01_i_i)+(1))|0);
 var $25=($24>>>0)<32;
 if($25){var $i_01_i_i=$24;var $res_02_i_i=$23;label=5;break;}else{label=6;break;}
 case 6: 
 var $26=(($assoc+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(((($23>>>0))%(($27>>>0)))&-1);
 var $29=($28|0)==0;
 var $30=($29&1);
 var $_res_0_i_i=((($30)+($23))|0);
 HEAP32[(($5)>>2)]=$_res_0_i_i;
 var $assoc_idx_i1=(($assoc+36)|0);
 var $assoc_idx_val_i2=HEAP32[(($assoc_idx_i1)>>2)];
 var $31=(($assoc_idx_val_i2)&255);
 var $32=($31&255)>8;
 if($32){var $_01_i_i_i5=$31;var $retval_02_i_i_i4=0;var $pos_03_i_i_i3=0;label=7;break;}else{var $retval_0_lcssa_i_i_i13=0;var $pos_0_lcssa_i_i_i12=0;var $_lcssa_in_i_i_i11=$31;label=9;break;}
 case 7: 
 var $pos_03_i_i_i3;
 var $retval_02_i_i_i4;
 var $_01_i_i_i5;
 var $33=$retval_02_i_i_i4<<8;
 var $34=((($pos_03_i_i_i3)+(1))&255);
 var $35=($pos_03_i_i_i3&255);
 var $36=(($assoc+4+$35)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=((($_01_i_i_i5)-(8))&255);
 var $_masked_i_i_i6=$33&65280;
 var $phitmp_i_i_i7=$38|$_masked_i_i_i6;
 var $40=($39&255)>8;
 if($40){var $_01_i_i_i5=$39;var $retval_02_i_i_i4=$phitmp_i_i_i7;var $pos_03_i_i_i3=$34;label=7;break;}else{label=8;break;}
 case 8: 
 var $phitmp6_i_i_i9=($34&255);
 var $retval_0_lcssa_i_i_i13=$phitmp_i_i_i7;var $pos_0_lcssa_i_i_i12=$phitmp6_i_i_i9;var $_lcssa_in_i_i_i11=$39;label=9;break;
 case 9: 
 var $_lcssa_in_i_i_i11;
 var $pos_0_lcssa_i_i_i12;
 var $retval_0_lcssa_i_i_i13;
 var $_lcssa_i_i_i14=($_lcssa_in_i_i_i11&255);
 var $41=$retval_0_lcssa_i_i_i13<<$_lcssa_i_i_i14;
 var $42=(($assoc+4+$pos_0_lcssa_i_i_i12)|0);
 var $43=HEAP8[($42)];
 var $44=($43&255);
 var $45=(((8)-($_lcssa_i_i_i14))|0);
 var $46=$44>>>($45>>>0);
 var $47=$46|$41;
 var $48=$47&65535;
 var $49=(($assoc+48)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(((($_res_0_i_i>>>0))%(($27>>>0)))&-1);
 var $52=(($50+($48<<2))|0);
 var $_pre=HEAP32[(($52)>>2)];
 var $i1_03_i=1;var $pos_04_i17=$51;var $56=$_res_0_i_i;var $assoc_idx1_val_i47=$27;label=12;break;
 case 10: 
 var $54=($i1_03_i>>>0)<5;
 var $_pre_i=HEAP32[(($5)>>2)];
 if($54){label=11;break;}else{label=19;break;}
 case 11: 
 var $phitmp_i16=((($i1_03_i)+(1))|0);
 var $i1_03_i=$phitmp_i16;var $pos_04_i17=$75;var $56=$_pre_i;var $assoc_idx1_val_i47=$assoc_idx1_val_i;label=12;break;
 case 12: 
 var $assoc_idx1_val_i47;
 var $56;
 var $pos_04_i17;
 var $i1_03_i;
 var $57=(($_pre+((($pos_04_i17)*(560))&-1))|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==($56|0);
 if($59){label=13;break;}else{var $assoc_idx1_val_i=$assoc_idx1_val_i47;label=17;break;}
 case 13: 
 var $61=(($_pre+((($pos_04_i17)*(560))&-1)+96)|0);
 var $_03_i_i_i=32;var $l_04_i_i_i=$61;var $r_05_i_i_i=$15;label=14;break;
 case 14: 
 var $r_05_i_i_i;
 var $l_04_i_i_i;
 var $_03_i_i_i;
 var $62=HEAP8[($l_04_i_i_i)];
 var $63=HEAP8[($r_05_i_i_i)];
 var $64=(($62<<24)>>24)==(($63<<24)>>24);
 if($64){label=15;break;}else{var $assoc_idx1_val_i=$assoc_idx1_val_i47;label=17;break;}
 case 15: 
 var $66=((($_03_i_i_i)-(1))|0);
 var $67=(($l_04_i_i_i+1)|0);
 var $68=(($r_05_i_i_i+1)|0);
 var $69=($66|0)==0;
 if($69){label=16;break;}else{var $_03_i_i_i=$66;var $l_04_i_i_i=$67;var $r_05_i_i_i=$68;label=14;break;}
 case 16: 
 HEAP32[(($57)>>2)]=0;
 var $assoc_idx1_val_i_pre=HEAP32[(($26)>>2)];
 var $assoc_idx1_val_i=$assoc_idx1_val_i_pre;label=17;break;
 case 17: 
 var $assoc_idx1_val_i;
 var $70=(((($pos_04_i17>>>0))%(($assoc_idx1_val_i>>>0)))&-1);
 var $71$0=$70;
 var $71$1=0;
 var $$etemp$0$0=101;
 var $$etemp$0$1=0;
 var $72$0=___muldi3($71$0,$71$1,$$etemp$0$0,$$etemp$0$1);var $72$1=tempRet0;
 var $73$0=$assoc_idx1_val_i;
 var $73$1=0;
 var $74$0=___uremdi3($72$0,$72$1,$73$0,$73$1);var $74$1=tempRet0;
 var $75$0=$74$0;
 var $75=$75$0;
 var $76=($75|0)==0;
 if($76){label=18;break;}else{label=10;break;}
 case 18: 
 var $78=HEAP32[((_stderr)>>2)];
 var $79=_fprintf($78,4584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$pos_04_i17,HEAP32[(((tempVarArgs)+(8))>>2)]=$assoc_idx1_val_i,HEAP32[(((tempVarArgs)+(16))>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 ___assert_fail(4568,3176,234,4656);
 throw "Reached an unreachable!";
 case 19: 
 var $80=($_pre_i|0)==0;
 if($80){label=95;break;}else{var $81=$_pre_i;label=20;break;}
 case 20: 
 var $81;
 var $82=(($ippts_send+20)|0);
 var $83=(((((HEAPU8[($82)])|(HEAPU8[((($82)+(1))|0)]<<8))<<16)>>16));
 var $84=(($83<<16)>>16)==0;
 if($84){label=95;break;}else{label=21;break;}
 case 21: 
 var $85=(($ippts_send)|0);
 var $86=HEAP8[($85)];
 var $phitmp=(($86<<24)>>24)==0;
 if($phitmp){label=95;break;}else{label=22;break;}
 case 22: 
 var $88=($ipp_recv|0)==0;
 if($88){var $_01=0;label=25;break;}else{label=23;break;}
 case 23: 
 var $90=(($ipp_recv+20)|0);
 var $91=(((((HEAPU8[($90)])|(HEAPU8[((($90)+(1))|0)]<<8))<<16)>>16));
 var $92=(($91<<16)>>16)==0;
 if($92){var $_01=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $94=(($ipp_recv)|0);
 var $95=HEAP8[($94)];
 var $phitmp34=(($95<<24)>>24)==0;
 var $phitmp35=($phitmp34?0:$ipp_recv);
 var $_01=$phitmp35;label=25;break;
 case 25: 
 var $_01;
 var $i_01_i=0;var $res_02_i=430329474;label=26;break;
 case 26: 
 var $res_02_i;
 var $i_01_i;
 var $97=$res_02_i<<1;
 var $98=(($id+$i_01_i)|0);
 var $99=HEAP8[($98)];
 var $100=($99&255);
 var $101=$100^$97;
 var $102=$res_02_i>>>31;
 var $103=((($101)+($102))|0);
 var $104=((($i_01_i)+(1))|0);
 var $105=($104>>>0)<32;
 if($105){var $i_01_i=$104;var $res_02_i=$103;label=26;break;}else{label=27;break;}
 case 27: 
 var $106=(($assoc+44)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(((($103>>>0))%(($107>>>0)))&-1);
 var $109=($108|0)==0;
 var $110=($109&1);
 var $_res_0_i=((($110)+($103))|0);
 var $111=($_res_0_i|0)==($81|0);
 if($111){label=28;break;}else{label=31;break;}
 case 28: 
 var $113=(($assoc+4)|0);
 var $_03_i_i=32;var $l_04_i_i=$id;var $r_05_i_i=$113;label=29;break;
 case 29: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $114=HEAP8[($l_04_i_i)];
 var $115=HEAP8[($r_05_i_i)];
 var $116=(($114<<24)>>24)==(($115<<24)>>24);
 if($116){label=30;break;}else{label=31;break;}
 case 30: 
 var $118=((($_03_i_i)-(1))|0);
 var $119=(($l_04_i_i+1)|0);
 var $120=(($r_05_i_i+1)|0);
 var $121=($118|0)==0;
 if($121){label=95;break;}else{var $_03_i_i=$118;var $l_04_i_i=$119;var $r_05_i_i=$120;label=29;break;}
 case 31: 
 var $assoc_idx_i=(($assoc+36)|0);
 var $assoc_idx_val_i=HEAP32[(($assoc_idx_i)>>2)];
 var $122=(($assoc_idx_val_i)&255);
 var $123=($122&255)>8;
 if($123){var $_01_i_i_i=$122;var $retval_02_i_i_i=0;var $pos_03_i_i_i=0;label=32;break;}else{var $retval_0_lcssa_i_i_i=0;var $pos_0_lcssa_i_i_i=0;var $_lcssa_in_i_i_i=$122;label=34;break;}
 case 32: 
 var $pos_03_i_i_i;
 var $retval_02_i_i_i;
 var $_01_i_i_i;
 var $124=$retval_02_i_i_i<<8;
 var $125=((($pos_03_i_i_i)+(1))&255);
 var $126=($pos_03_i_i_i&255);
 var $127=(($id+$126)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=((($_01_i_i_i)-(8))&255);
 var $_masked_i_i_i=$124&65280;
 var $phitmp_i_i_i=$129|$_masked_i_i_i;
 var $131=($130&255)>8;
 if($131){var $_01_i_i_i=$130;var $retval_02_i_i_i=$phitmp_i_i_i;var $pos_03_i_i_i=$125;label=32;break;}else{label=33;break;}
 case 33: 
 var $phitmp6_i_i_i=($125&255);
 var $retval_0_lcssa_i_i_i=$phitmp_i_i_i;var $pos_0_lcssa_i_i_i=$phitmp6_i_i_i;var $_lcssa_in_i_i_i=$130;label=34;break;
 case 34: 
 var $_lcssa_in_i_i_i;
 var $pos_0_lcssa_i_i_i;
 var $retval_0_lcssa_i_i_i;
 var $_lcssa_i_i_i=($_lcssa_in_i_i_i&255);
 var $132=$retval_0_lcssa_i_i_i<<$_lcssa_i_i_i;
 var $133=(($id+$pos_0_lcssa_i_i_i)|0);
 var $134=HEAP8[($133)];
 var $135=($134&255);
 var $136=(((8)-($_lcssa_i_i_i))|0);
 var $137=$135>>>($136>>>0);
 var $138=$137|$132;
 var $139=$138&65535;
 var $140=(($assoc+48)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(((($_res_0_i>>>0))%(($107>>>0)))&-1);
 var $143=(($141+($139<<2))|0);
 var $144=HEAP32[(($143)>>2)];
 var $coll_03_i=1;var $pos_04_i=$142;label=37;break;
 case 35: 
 var $146=($coll_03_i>>>0)<5;
 if($146){label=36;break;}else{label=43;break;}
 case 36: 
 var $phitmp_i=((($coll_03_i)+(1))|0);
 var $coll_03_i=$phitmp_i;var $pos_04_i=$167;label=37;break;
 case 37: 
 var $pos_04_i;
 var $coll_03_i;
 var $148=(($144+((($pos_04_i)*(560))&-1))|0);
 var $149=(($148)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==($_res_0_i|0);
 if($151){label=38;break;}else{label=41;break;}
 case 38: 
 var $153=(($144+((($pos_04_i)*(560))&-1)+96)|0);
 var $_03_i_i24=32;var $l_04_i_i23=$153;var $r_05_i_i22=$id;label=39;break;
 case 39: 
 var $r_05_i_i22;
 var $l_04_i_i23;
 var $_03_i_i24;
 var $154=HEAP8[($l_04_i_i23)];
 var $155=HEAP8[($r_05_i_i22)];
 var $156=(($154<<24)>>24)==(($155<<24)>>24);
 if($156){label=40;break;}else{label=41;break;}
 case 40: 
 var $158=((($_03_i_i24)-(1))|0);
 var $159=(($l_04_i_i23+1)|0);
 var $160=(($r_05_i_i22+1)|0);
 var $161=($158|0)==0;
 if($161){label=75;break;}else{var $_03_i_i24=$158;var $l_04_i_i23=$159;var $r_05_i_i22=$160;label=39;break;}
 case 41: 
 var $162=(((($pos_04_i>>>0))%(($107>>>0)))&-1);
 var $163$0=$162;
 var $163$1=0;
 var $$etemp$1$0=101;
 var $$etemp$1$1=0;
 var $164$0=___muldi3($163$0,$163$1,$$etemp$1$0,$$etemp$1$1);var $164$1=tempRet0;
 var $165$0=$107;
 var $165$1=0;
 var $166$0=___uremdi3($164$0,$164$1,$165$0,$165$1);var $166$1=tempRet0;
 var $167$0=$166$0;
 var $167=$167$0;
 var $168=($167|0)==0;
 if($168){label=42;break;}else{label=35;break;}
 case 42: 
 var $170=HEAP32[((_stderr)>>2)];
 var $171=_fprintf($170,4584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$pos_04_i,HEAP32[(((tempVarArgs)+(8))>>2)]=$107,HEAP32[(((tempVarArgs)+(16))>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 ___assert_fail(4568,3176,234,4656);
 throw "Reached an unreachable!";
 case 43: 
 var $173=($_01|0)!=0;
 var $174=$pos_check_i_i;
 var $$etemp$2$0=24;
 var $$etemp$2$1=0;

 if($123){var $_01_i_i_i_i=$122;var $retval_02_i_i_i_i=0;var $pos_03_i_i_i_i=0;label=44;break;}else{var $retval_0_lcssa_i_i_i_i=0;var $pos_0_lcssa_i_i_i_i=0;var $_lcssa_in_i_i_i_i=$122;label=46;break;}
 case 44: 
 var $pos_03_i_i_i_i;
 var $retval_02_i_i_i_i;
 var $_01_i_i_i_i;
 var $175=$retval_02_i_i_i_i<<8;
 var $176=((($pos_03_i_i_i_i)+(1))&255);
 var $177=($pos_03_i_i_i_i&255);
 var $178=(($id+$177)|0);
 var $179=HEAP8[($178)];
 var $180=($179&255);
 var $181=((($_01_i_i_i_i)-(8))&255);
 var $_masked_i_i_i_i=$175&65280;
 var $phitmp_i_i_i_i=$180|$_masked_i_i_i_i;
 var $182=($181&255)>8;
 if($182){var $_01_i_i_i_i=$181;var $retval_02_i_i_i_i=$phitmp_i_i_i_i;var $pos_03_i_i_i_i=$176;label=44;break;}else{label=45;break;}
 case 45: 
 var $phitmp6_i_i_i_i=($176&255);
 var $retval_0_lcssa_i_i_i_i=$phitmp_i_i_i_i;var $pos_0_lcssa_i_i_i_i=$phitmp6_i_i_i_i;var $_lcssa_in_i_i_i_i=$181;label=46;break;
 case 46: 
 var $_lcssa_in_i_i_i_i;
 var $pos_0_lcssa_i_i_i_i;
 var $retval_0_lcssa_i_i_i_i;
 var $_lcssa_i_i_i_i=($_lcssa_in_i_i_i_i&255);
 var $183=$retval_0_lcssa_i_i_i_i<<$_lcssa_i_i_i_i;
 var $184=(($id+$pos_0_lcssa_i_i_i_i)|0);
 var $185=HEAP8[($184)];
 var $186=($185&255);
 var $187=(((8)-($_lcssa_i_i_i_i))|0);
 var $188=$186>>>($187>>>0);
 var $189=$188|$183;
 var $190=$189&65535;
 HEAP32[(($174)>>2)]=0; HEAP32[((($174)+(4))>>2)]=0; HEAP32[((($174)+(8))>>2)]=0; HEAP32[((($174)+(12))>>2)]=0; HEAP32[((($174)+(16))>>2)]=0; HEAP32[((($174)+(20))>>2)]=0;
 var $191=(($141+($190<<2))|0);
 var $192=HEAP32[(($191)>>2)];
 var $ld$3$0=13552;
 var $193$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $193$1=HEAP32[(($ld$4$1)>>2)];
 var $pos_07_i_i=$142;var $coll_08_i_i=0;label=48;break;
 case 47: 
 var $195=($223>>>0)<5;
 if($195){var $pos_07_i_i=$221;var $coll_08_i_i=$223;label=48;break;}else{label=55;break;}
 case 48: 
 var $coll_08_i_i;
 var $pos_07_i_i;
 var $197=(($192+((($pos_07_i_i)*(560))&-1))|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($198|0)==0;
 if($199){var $pos_07_i5_ph_i=$pos_07_i_i;label=61;break;}else{label=49;break;}
 case 49: 
 var $201=(($192+((($pos_07_i_i)*(560))&-1)+24)|0);
 var $ld$5$0=(($201)|0);
 var $202$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($201+4)|0);
 var $202$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=1800;
 var $$etemp$7$1=0;
 var $203$0=_i64Add($202$0,$202$1,$$etemp$7$0,$$etemp$7$1);var $203$1=tempRet0;
 var $204=(($203$1>>>0) > ($193$1>>>0)) | (((($203$1>>>0) == ($193$1>>>0) & ($203$0>>>0) >  ($193$0>>>0))));
 if($204){var $check_0_i_i=2;label=51;break;}else{label=50;break;}
 case 50: 
 var $206=(($192+((($pos_07_i_i)*(560))&-1)+32)|0);
 var $ld$8$0=(($206)|0);
 var $207$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($206+4)|0);
 var $207$1=HEAP32[(($ld$9$1)>>2)];
 var $$etemp$10$0=600;
 var $$etemp$10$1=0;
 var $208$0=_i64Add($207$0,$207$1,$$etemp$10$0,$$etemp$10$1);var $208$1=tempRet0;
 var $209=(($208$1>>>0) > ($193$1>>>0)) | (((($208$1>>>0) == ($193$1>>>0) & ($208$0>>>0) >  ($193$0>>>0))));
 var $__i_i=($209&1);
 var $check_0_i_i=$__i_i;label=51;break;
 case 51: 
 var $check_0_i_i;
 var $211=(($pos_check_i_i+($check_0_i_i<<2))|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=52;break;}else{label=53;break;}
 case 52: 
 var $215=((($pos_07_i_i)+(1))|0);
 HEAP32[(($211)>>2)]=$215;
 label=53;break;
 case 53: 
 var $217=(((($pos_07_i_i>>>0))%(($107>>>0)))&-1);
 var $218$0=$217;
 var $218$1=0;
 var $$etemp$11$0=101;
 var $$etemp$11$1=0;
 var $219$0=___muldi3($218$0,$218$1,$$etemp$11$0,$$etemp$11$1);var $219$1=tempRet0;
 var $220$0=___uremdi3($219$0,$219$1,$165$0,$165$1);var $220$1=tempRet0;
 var $221$0=$220$0;
 var $221=$221$0;
 var $222=($221|0)==0;
 var $223=((($coll_08_i_i)+(1))|0);
 if($222){label=54;break;}else{label=47;break;}
 case 54: 
 var $225=HEAP32[((_stderr)>>2)];
 var $226=_fprintf($225,4584,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 24)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$pos_07_i_i,HEAP32[(((tempVarArgs)+(8))>>2)]=$107,HEAP32[(((tempVarArgs)+(16))>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 ___assert_fail(4568,3176,234,4656);
 throw "Reached an unreachable!";
 case 55: 
 var $228=(($used<<24)>>24)==0;
 if($228){label=56;break;}else{var $232=3;label=57;break;}
 case 56: 
 var $230=($173?2:1);
 var $232=$230;label=57;break;
 case 57: 
 var $232;
 var $i_04_i_i=0;label=59;break;
 case 58: 
 var $234=($239>>>0)<($232>>>0);
 if($234){var $i_04_i_i=$239;label=59;break;}else{label=95;break;}
 case 59: 
 var $i_04_i_i;
 var $236=(($pos_check_i_i+($i_04_i_i<<2))|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=($237|0)==0;
 var $239=((($i_04_i_i)+(1))|0);
 if($238){label=58;break;}else{label=60;break;}
 case 60: 
 var $241=((($237)-(1))|0);
 var $pos_07_i5_ph_i=$241;label=61;break;
 case 61: 
 var $pos_07_i5_ph_i;
 var $$etemp$12$0=24;
 var $$etemp$12$1=0;

 var $242=(($192+((($pos_07_i5_ph_i)*(560))&-1))|0);
 var $243=$242;
 _memset($243, 0, 560)|0;
 var $244=($242|0)==0;
 if($244){label=95;break;}else{label=62;break;}
 case 62: 
 var $246=HEAP8[($85)];
 if((($246<<24)>>24)==2){ label=63;break;}else if((($246<<24)>>24)==10){ label=64;break;}else{label=95;break;}
 case 63: 
 var $248=(($192+((($pos_07_i5_ph_i)*(560))&-1)+128)|0);
 var $_0_i3_ph_i=$248;label=65;break;
 case 64: 
 var $250=(($192+((($pos_07_i5_ph_i)*(560))&-1)+344)|0);
 var $_0_i3_ph_i=$250;label=65;break;
 case 65: 
 var $_0_i3_ph_i;
 var $252=(($242)|0);
 HEAP32[(($252)>>2)]=$_res_0_i;
 var $253=(($192+((($pos_07_i5_ph_i)*(560))&-1)+96)|0);
 assert(32 % 1 === 0);(_memcpy($253, $id, 32)|0);
 var $254=(($used<<24)>>24)==0;
 if($254){label=67;break;}else{label=66;break;}
 case 66: 
 var $256=(($192+((($pos_07_i5_ph_i)*(560))&-1)+16)|0);
 var $st$13$0=(($256)|0);
 HEAP32[(($st$13$0)>>2)]=$193$0;
 var $st$14$1=(($256+4)|0);
 HEAP32[(($st$14$1)>>2)]=$193$1;
 label=67;break;
 case 67: 
 if($173){label=68;break;}else{label=71;break;}
 case 68: 
 var $259=(($_01+20)|0);
 var $260=(((((HEAPU8[($259)])|(HEAPU8[((($259)+(1))|0)]<<8))<<16)>>16));
 var $261=(($260<<16)>>16)==0;
 if($261){label=71;break;}else{label=69;break;}
 case 69: 
 var $262=(($_01)|0);
 var $263=HEAP8[($262)];
 var $phitmp36=(($263<<24)>>24)==0;
 var $phitmp37=($phitmp36?0:$_01);
 var $264=($phitmp37|0)==0;
 if($264){label=71;break;}else{label=70;break;}
 case 70: 
 var $266=(($ippts_send+24)|0);
 var $ld$15$0=(($266)|0);
 var $267$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($266+4)|0);
 var $267$1=HEAP32[(($ld$16$1)>>2)];
 var $268=(($192+((($pos_07_i5_ph_i)*(560))&-1)+24)|0);
 var $st$17$0=(($268)|0);
 HEAP32[(($st$17$0)>>2)]=$267$0;
 var $st$18$1=(($268+4)|0);
 HEAP32[(($st$18$1)>>2)]=$267$1;
 var $269=HEAP8[($85)];
 var $270=($269&255);
 var $271=(($192+((($pos_07_i5_ph_i)*(560))&-1)+40)|0);
 HEAP16[(($271)>>1)]=$270;
 var $272=(($_0_i3_ph_i)|0);
 assert(24 % 1 === 0);(_memcpy($272, $85, 24)|0);
 var $ld$19$0=(($266)|0);
 var $273$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($266+4)|0);
 var $273$1=HEAP32[(($ld$20$1)>>2)];
 var $274=(($_0_i3_ph_i+24)|0);
 var $st$21$0=(($274)|0);
 HEAP32[(($st$21$0)>>2)]=$273$0;
 var $st$22$1=(($274+4)|0);
 HEAP32[(($st$22$1)>>2)]=$273$1;
 var $275=(($_0_i3_ph_i+184)|0);
 var $276=(($phitmp37)|0);
 assert(24 % 1 === 0);(_memcpy($275, $276, 24)|0);
 var $277=(($_0_i3_ph_i+208)|0);
 var $st$23$0=(($277)|0);
 HEAP32[(($st$23$0)>>2)]=$193$0;
 var $st$24$1=(($277+4)|0);
 HEAP32[(($st$24$1)>>2)]=$193$1;
 label=95;break;
 case 71: 
 var $_idx_val_i=HEAP8[($85)];
 if((($_idx_val_i<<24)>>24)==2){ label=72;break;}else if((($_idx_val_i<<24)>>24)==10){ label=73;break;}else{label=95;break;}
 case 72: 
 var $279=(($192+((($pos_07_i5_ph_i)*(560))&-1)+44)|0);
 var $_0_i4_ph_i=$279;label=74;break;
 case 73: 
 var $281=(($192+((($pos_07_i5_ph_i)*(560))&-1)+68)|0);
 var $_0_i4_ph_i=$281;label=74;break;
 case 74: 
 var $_0_i4_ph_i;
 var $283=(($ippts_send+24)|0);
 var $ld$25$0=(($283)|0);
 var $284$0=HEAP32[(($ld$25$0)>>2)];
 var $ld$26$1=(($283+4)|0);
 var $284$1=HEAP32[(($ld$26$1)>>2)];
 var $285=(($192+((($pos_07_i5_ph_i)*(560))&-1)+32)|0);
 var $st$27$0=(($285)|0);
 HEAP32[(($st$27$0)>>2)]=$284$0;
 var $st$28$1=(($285+4)|0);
 HEAP32[(($st$28$1)>>2)]=$284$1;
 var $286=HEAP8[($85)];
 var $287=($286&255);
 var $288=(($192+((($pos_07_i5_ph_i)*(560))&-1)+42)|0);
 HEAP16[(($288)>>1)]=$287;
 var $289=(($_0_i4_ph_i)|0);
 assert(24 % 1 === 0);(_memcpy($289, $85, 24)|0);
 label=95;break;
 case 75: 
 var $290=($148|0)==0;
 if($290){label=95;break;}else{label=76;break;}
 case 76: 
 if((($86<<24)>>24)==2){ label=77;break;}else if((($86<<24)>>24)==10){ label=78;break;}else{label=95;break;}
 case 77: 
 var $293=(($144+((($pos_04_i)*(560))&-1)+128)|0);
 var $_0_i_ph_i=$293;label=79;break;
 case 78: 
 var $295=(($144+((($pos_04_i)*(560))&-1)+344)|0);
 var $_0_i_ph_i=$295;label=79;break;
 case 79: 
 var $_0_i_ph_i;
 var $297=(($used<<24)>>24)==0;
 if($297){label=81;break;}else{label=80;break;}
 case 80: 
 var $ld$29$0=13552;
 var $299$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=13556;
 var $299$1=HEAP32[(($ld$30$1)>>2)];
 var $300=(($144+((($pos_04_i)*(560))&-1)+16)|0);
 var $st$31$0=(($300)|0);
 HEAP32[(($st$31$0)>>2)]=$299$0;
 var $st$32$1=(($300+4)|0);
 HEAP32[(($st$32$1)>>2)]=$299$1;
 label=81;break;
 case 81: 
 var $302=($_01|0)==0;
 if($302){label=83;break;}else{label=82;break;}
 case 82: 
 var $304=(($_0_i_ph_i)|0);
 assert(24 % 1 === 0);(_memcpy($304, $85, 24)|0);
 var $305=(($ippts_send+24)|0);
 var $ld$33$0=(($305)|0);
 var $306$0=HEAP32[(($ld$33$0)>>2)];
 var $ld$34$1=(($305+4)|0);
 var $306$1=HEAP32[(($ld$34$1)>>2)];
 var $307=(($_0_i_ph_i+24)|0);
 var $st$35$0=(($307)|0);
 HEAP32[(($st$35$0)>>2)]=$306$0;
 var $st$36$1=(($307+4)|0);
 HEAP32[(($st$36$1)>>2)]=$306$1;
 var $308=(($_0_i_ph_i+184)|0);
 var $309=(($_01)|0);
 assert(24 % 1 === 0);(_memcpy($308, $309, 24)|0);
 var $ld$37$0=13552;
 var $310$0=HEAP32[(($ld$37$0)>>2)];
 var $ld$38$1=13556;
 var $310$1=HEAP32[(($ld$38$1)>>2)];
 var $311=(($_0_i_ph_i+208)|0);
 var $st$39$0=(($311)|0);
 HEAP32[(($st$39$0)>>2)]=$310$0;
 var $st$40$1=(($311+4)|0);
 HEAP32[(($st$40$1)>>2)]=$310$1;
 var $312=(($144+((($pos_04_i)*(560))&-1)+24)|0);
 var $st$41$0=(($312)|0);
 HEAP32[(($st$41$0)>>2)]=$310$0;
 var $st$42$1=(($312+4)|0);
 HEAP32[(($st$42$1)>>2)]=$310$1;
 var $313=HEAP8[($85)];
 var $314=($313&255);
 var $315=(($144+((($pos_04_i)*(560))&-1)+40)|0);
 HEAP16[(($315)>>1)]=$314;
 label=95;break;
 case 83: 
 var $316=HEAP8[($85)];
 var $phitmp39=(($316<<24)>>24)==0;
 if($phitmp39){label=95;break;}else{label=84;break;}
 case 84: 
 var $318=(($ippts_send)|0);
 if((($316<<24)>>24)==2){ label=85;break;}else if((($316<<24)>>24)==10){ label=86;break;}else{label=95;break;}
 case 85: 
 var $320=(($144+((($pos_04_i)*(560))&-1)+44)|0);
 var $heard_0_i_i=$320;label=87;break;
 case 86: 
 var $322=(($144+((($pos_04_i)*(560))&-1)+68)|0);
 var $heard_0_i_i=$322;label=87;break;
 case 87: 
 var $heard_0_i_i;
 var $324=(($heard_0_i_i+20)|0);
 var $325=(((((HEAPU8[($324)])|(HEAPU8[((($324)+(1))|0)]<<8))<<16)>>16));
 var $326=(($83<<16)>>16)==(($325<<16)>>16);
 if($326){label=88;break;}else{label=89;break;}
 case 88: 
 var $327=(($heard_0_i_i)|0);
 var $328=_ip_equal($318,$327);
 var $phitmp40=($328|0)==0;
 if($phitmp40){label=89;break;}else{label=95;break;}
 case 89: 
 var $329=(($heard_0_i_i+20)|0);
 var $330=(((((HEAPU8[($329)])|(HEAPU8[((($329)+(1))|0)]<<8))<<16)>>16));
 var $331=(($330<<16)>>16)==0;
 var $_pre51=(($heard_0_i_i)|0);
 if($331){var $_pre_phi=$_pre51;label=91;break;}else{label=90;break;}
 case 90: 
 var $332=HEAP8[($_pre51)];
 var $phitmp41=(($332<<24)>>24)==0;
 if($phitmp41){var $_pre_phi=$_pre51;label=91;break;}else{label=92;break;}
 case 91: 
 var $_pre_phi;
 assert(24 % 1 === 0);(_memcpy($_pre_phi, $85, 24)|0);
 var $333=(($ippts_send+24)|0);
 var $ld$43$0=(($333)|0);
 var $334$0=HEAP32[(($ld$43$0)>>2)];
 var $ld$44$1=(($333+4)|0);
 var $334$1=HEAP32[(($ld$44$1)>>2)];
 var $335=(($144+((($pos_04_i)*(560))&-1)+32)|0);
 var $st$45$0=(($335)|0);
 HEAP32[(($st$45$0)>>2)]=$334$0;
 var $st$46$1=(($335+4)|0);
 HEAP32[(($st$46$1)>>2)]=$334$1;
 var $336=HEAP8[($85)];
 var $337=($336&255);
 var $338=(($144+((($pos_04_i)*(560))&-1)+42)|0);
 HEAP16[(($338)>>1)]=$337;
 label=95;break;
 case 92: 
 var $340=_LAN_ip($318);
 var $341=($340|0)!=0;
 var $342=(($heard_0_i_i)|0);
 var $343=_LAN_ip($342);
 var $344=($343|0)==0;
 var $or_cond1_i_i=$341|$344;
 var $_pre_i_i=(($144+((($pos_04_i)*(560))&-1)+32)|0);
 if($or_cond1_i_i){label=94;break;}else{label=93;break;}
 case 93: 
 var $ld$47$0=(($_pre_i_i)|0);
 var $346$0=HEAP32[(($ld$47$0)>>2)];
 var $ld$48$1=(($_pre_i_i+4)|0);
 var $346$1=HEAP32[(($ld$48$1)>>2)];
 var $$etemp$49$0=600;
 var $$etemp$49$1=0;
 var $347$0=_i64Add($346$0,$346$1,$$etemp$49$0,$$etemp$49$1);var $347$1=tempRet0;
 var $ld$50$0=13552;
 var $348$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=13556;
 var $348$1=HEAP32[(($ld$51$1)>>2)];
 var $349=(($347$1>>>0) > ($348$1>>>0)) | (((($347$1>>>0) == ($348$1>>>0) & ($347$0>>>0) >  ($348$0>>>0))));
 if($349){label=95;break;}else{label=94;break;}
 case 94: 
 assert(24 % 1 === 0);(_memcpy($_pre51, $85, 24)|0);
 var $350=(($ippts_send+24)|0);
 var $ld$52$0=(($350)|0);
 var $351$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=(($350+4)|0);
 var $351$1=HEAP32[(($ld$53$1)>>2)];
 var $st$54$0=(($_pre_i_i)|0);
 HEAP32[(($st$54$0)>>2)]=$351$0;
 var $st$55$1=(($_pre_i_i+4)|0);
 HEAP32[(($st$55$1)>>2)]=$351$1;
 var $352=HEAP8[($85)];
 var $353=($352&255);
 var $354=(($144+((($pos_04_i)*(560))&-1)+42)|0);
 HEAP16[(($354)>>1)]=$353;
 label=95;break;
 case 95: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _friendreq_handlepacket($object,$source_pubkey,$packet,$length){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($length|0)==0;
 if($1){var $_0=1;label=15;break;}else{label=2;break;}
 case 2: 
 var $3=$object;
 var $4=(($object+8)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==0;
 if($6){var $_0=1;label=15;break;}else{label=3;break;}
 case 3: 
 var $8=((($length)-(1))|0);
 var $9=($8>>>0)<5;
 if($9){var $_0=1;label=15;break;}else{var $i_01_i=0;label=5;break;}
 case 4: 
 var $11=((($i_01_i)+(1))|0);
 var $12=($11>>>0)<32;
 if($12){var $i_01_i=$11;label=5;break;}else{var $_03_i=4;var $l_04_i_pn=$packet;var $r_05_i=$object;label=8;break;}
 case 5: 
 var $i_01_i;
 var $13=(($3+28+($i_01_i<<5))|0);
 var $_03_i_i=32;var $l_04_i_i=$13;var $r_05_i_i=$source_pubkey;label=6;break;
 case 6: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $14=HEAP8[($l_04_i_i)];
 var $15=HEAP8[($r_05_i_i)];
 var $16=(($14<<24)>>24)==(($15<<24)>>24);
 if($16){label=7;break;}else{label=4;break;}
 case 7: 
 var $18=((($_03_i_i)-(1))|0);
 var $19=(($l_04_i_i+1)|0);
 var $20=(($r_05_i_i+1)|0);
 var $21=($18|0)==0;
 if($21){var $_0=1;label=15;break;}else{var $_03_i_i=$18;var $l_04_i_i=$19;var $r_05_i_i=$20;label=6;break;}
 case 8: 
 var $r_05_i;
 var $l_04_i_pn;
 var $_03_i;
 var $l_04_i=(($l_04_i_pn+1)|0);
 var $22=HEAP8[($l_04_i)];
 var $23=HEAP8[($r_05_i)];
 var $24=(($22<<24)>>24)==(($23<<24)>>24);
 if($24){label=9;break;}else{var $_0=1;label=15;break;}
 case 9: 
 var $26=((($_03_i)-(1))|0);
 var $27=(($r_05_i+1)|0);
 var $28=($26|0)==0;
 if($28){label=10;break;}else{var $_03_i=$26;var $l_04_i_pn=$l_04_i;var $r_05_i=$27;label=8;break;}
 case 10: 
 var $29=(($object+20)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==0;
 if($32){label=12;break;}else{label=11;break;}
 case 11: 
 var $34=(($object+24)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=FUNCTION_TABLE[$31]($source_pubkey,$36);
 var $38=($37|0)==0;
 if($38){label=12;break;}else{var $_0=1;label=15;break;}
 case 12: 
 var $40=(($object+1052)|0);
 var $41=$40;
 var $42=HEAP16[(($41)>>1)];
 var $43=($42&65535)>31;
 if($43){label=13;break;}else{var $45=$42;label=14;break;}
 case 13: 
 HEAP16[(($41)>>1)]=0;
 var $45=0;label=14;break;
 case 14: 
 var $45;
 var $46=($45&65535);
 var $47=(($3+28+($46<<5))|0);
 assert(32 % 1 === 0);(_memcpy($47, $source_pubkey, 32)|0);
 var $48=HEAP16[(($41)>>1)];
 var $49=((($48)+(1))&65535);
 HEAP16[(($41)>>1)]=$49;
 var $50=((($length)-(5))|0);
 var $51=((($length)-(4))|0);
 var $52=_llvm_stacksave();
 var $53=STACKTOP;STACKTOP = (STACKTOP + $51)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $54=(($packet+5)|0);
 assert($50 % 1 === 0);(_memcpy($53, $54, $50)|0);
 var $55=(($53+$50)|0);
 HEAP8[($55)]=0;
 var $56=(($object+4)|0);
 var $57=$56;
 var $58=HEAP32[(($57)>>2)];
 var $59=(($object+12)|0);
 var $60=$59;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($50)&65535);
 var $63=(($object+16)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$58]($61,$source_pubkey,$53,$62,$65);
 _llvm_stackrestore($52);
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _LAN_ip($ip){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip; $ip=STACKTOP;STACKTOP = (STACKTOP + 20)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ip41=sp;
 var $1=(($ip)|0);
 var $2=HEAP8[($1)];
 if((($2<<24)>>24)==2){ label=2;break;}else if((($2<<24)>>24)==10){ label=8;break;}else{label=24;break;}
 case 2: 
 var $4=(($ip+4)|0);
 var $5=$4;
 var $6=HEAP8[($5)];
 var $7=(($1+5)|0);
 var $8=HEAP8[($7)];
 var $9=(($1+6)|0);
 var $10=HEAP8[($9)];
 switch((($6<<24)>>24)){case 127:case 10:{ var $_0=0;label=25;break;}case -84:{ label=3;break;}case -64:{ label=4;break;}case -87:{ label=5;break;}case 100:{ label=7;break;}default:{label=24;break;}}break;
 case 3: 
 var $_off=((($8)-(16))&255);
 var $12=($_off&255)<16;
 if($12){var $_0=0;label=25;break;}else{label=24;break;}
 case 4: 
 var $_old=(($8<<24)>>24)==-88;
 if($_old){var $_0=0;label=25;break;}else{label=24;break;}
 case 5: 
 var $_old2=(($8<<24)>>24)==-2;
 if($_old2){label=6;break;}else{label=24;break;}
 case 6: 
 if((($10<<24)>>24)==-1|(($10<<24)>>24)==0){ label=24;break;}else{var $_0=0;label=25;break;}
 case 7: 
 var $16=$8&-64;
 var $17=(($16<<24)>>24)==64;
 if($17){var $_0=0;label=25;break;}else{label=24;break;}
 case 8: 
 var $19=(($ip+4)|0);
 var $20=$19;
 var $21=$19;
 var $22=HEAP8[($21)];
 if((($22<<24)>>24)==-2){ label=11;break;}else if((($22<<24)>>24)==-1){ label=9;break;}else{label=12;break;}
 case 9: 
 var $24=(($20+1)|0);
 var $25=HEAP8[($24)];
 var $26=($25&255)<3;
 if($26){label=10;break;}else{label=12;break;}
 case 10: 
 var $28=(($20+15)|0);
 var $29=HEAP8[($28)];
 var $30=(($29<<24)>>24)==1;
 if($30){var $_0=0;label=25;break;}else{label=12;break;}
 case 11: 
 var $_phi_trans_insert=(($20+1)|0);
 var $_pre=HEAP8[($_phi_trans_insert)];
 var $32=$_pre&-64;
 var $33=(($32<<24)>>24)==-128;
 if($33){var $_0=0;label=25;break;}else{label=12;break;}
 case 12: 
 var $34=$19;
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=13;break;}else{label=24;break;}
 case 13: 
 var $38=(($34+4)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){label=14;break;}else{label=24;break;}
 case 14: 
 var $42=(($ip+12)|0);
 var $43=$42;
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24)==0;
 if($45){label=15;break;}else{label=19;break;}
 case 15: 
 var $47=(($21+9)|0);
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24)==0;
 if($49){label=16;break;}else{label=19;break;}
 case 16: 
 var $51=(($21+10)|0);
 var $52=HEAP8[($51)];
 var $53=(($52<<24)>>24)==-1;
 if($53){label=17;break;}else{label=19;break;}
 case 17: 
 var $55=(($21+11)|0);
 var $56=HEAP8[($55)];
 var $57=(($56<<24)>>24)==-1;
 if($57){label=18;break;}else{label=19;break;}
 case 18: 
 var $59=(($ip41)|0);
 HEAP8[($59)]=2;
 var $60=$19;
 var $61=(($60+12)|0);
 var $62=((((HEAPU8[($61)])|(HEAPU8[((($61)+(1))|0)]<<8)|(HEAPU8[((($61)+(2))|0)]<<16)|(HEAPU8[((($61)+(3))|0)]<<24))|0));
 var $63=(($ip41+4)|0);
 var $64=$63;
 tempBigInt=$62;HEAP8[($64)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($64)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($64)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($64)+(3))|0)]=tempBigInt&0xff;
 var $65=_LAN_ip($ip41);
 var $_0=$65;label=25;break;
 case 19: 
 var $67=$42;
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=20;break;}else{label=24;break;}
 case 20: 
 var $71=(($21+12)|0);
 var $72=HEAP8[($71)];
 var $73=(($72<<24)>>24)==0;
 if($73){label=21;break;}else{label=24;break;}
 case 21: 
 var $75=(($21+13)|0);
 var $76=HEAP8[($75)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=22;break;}else{label=24;break;}
 case 22: 
 var $79=(($21+14)|0);
 var $80=HEAP8[($79)];
 var $81=(($80<<24)>>24)==0;
 if($81){label=23;break;}else{label=24;break;}
 case 23: 
 var $83=(($21+15)|0);
 var $84=HEAP8[($83)];
 var $85=(($84<<24)>>24)==1;
 if($85){var $_0=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $_0=-1;label=25;break;
 case 25: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_LANdiscovery($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $source1=sp;
 var $1=(($source)|0);
 var $2=_LAN_ip($1);
 var $3=($2|0)!=-1;
 var $4=($length|0)==33;
 var $or_cond=$3&$4;
 if($or_cond){label=2;break;}else{var $_0=1;label=3;break;}
 case 2: 
 var $6=$object;
 var $7=(($packet+1)|0);
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $8=(($object+14900)|0);
 var $9=_getnodes($6,$source1,$7,$8,0);
 var $_0=0;label=3;break;
 case 3: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _m_addfriend($m,$address,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $checksum_i=sp;
 var $client_id=(sp)+(8);
 var $1=($length&65535);
 var $2=($length&65535)>983;
 if($2){var $_0=-1;label=33;break;}else{label=2;break;}
 case 2: 
 var $4=(($client_id)|0);
 assert(32 % 1 === 0);(_memcpy($4, $address, 32)|0);
 var $5=$checksum_i;
 var $$etemp$0$0=2;
 var $$etemp$0$1=0;

 var $tmpcast_i=$checksum_i;
 HEAP16[(($checksum_i)>>1)]=0;
 var $i_01_i=0;label=3;break;
 case 3: 
 var $i_01_i;
 var $7=(($address+$i_01_i)|0);
 var $8=HEAP8[($7)];
 var $9=$i_01_i&1;
 var $10=(($tmpcast_i+$9)|0);
 var $11=HEAP8[($10)];
 var $12=$11^$8;
 HEAP8[($10)]=$12;
 var $13=((($i_01_i)+(1))|0);
 var $14=($13>>>0)<36;
 if($14){var $i_01_i=$13;label=3;break;}else{label=4;break;}
 case 4: 
 var $15=HEAP16[(($checksum_i)>>1)];
 var $$etemp$1$0=2;
 var $$etemp$1$1=0;

 var $16=(($address+36)|0);
 var $17=$16;
 var $18=(((((HEAPU8[($17)])|(HEAPU8[((($17)+(1))|0)]<<8))<<16)>>16));
 var $19=(($18<<16)>>16)==(($15<<16)>>16);
 if($19){label=5;break;}else{var $_0=-6;label=33;break;}
 case 5: 
 var $21=(($length<<16)>>16)==0;
 if($21){var $_0=-2;label=33;break;}else{label=6;break;}
 case 6: 
 var $23=(($m+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $_03_i_i=32;var $l_04_i_i=$4;var $r_05_i_i=$25;label=7;break;
 case 7: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $26=HEAP8[($l_04_i_i)];
 var $27=HEAP8[($r_05_i_i)];
 var $28=(($26<<24)>>24)==(($27<<24)>>24);
 if($28){label=8;break;}else{label=9;break;}
 case 8: 
 var $30=((($_03_i_i)-(1))|0);
 var $31=(($l_04_i_i+1)|0);
 var $32=(($r_05_i_i+1)|0);
 var $33=($30|0)==0;
 if($33){var $_0=-3;label=33;break;}else{var $_03_i_i=$30;var $l_04_i_i=$31;var $r_05_i_i=$32;label=7;break;}
 case 9: 
 var $34=(($m+2228)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 var $_pre9=(($m+2224)|0);
 var $37=HEAP32[(($_pre9)>>2)];
 if($36){label=10;break;}else{var $i_01_i1=0;label=11;break;}
 case 10: 
 var $38=(($37)|0);
 var $71=1;var $70=$38;label=22;break;
 case 11: 
 var $i_01_i1;
 var $39=(($37+((($i_01_i1)*(14072))&-1)+52)|0);
 var $40=HEAP8[($39)];
 var $41=(($40<<24)>>24)==0;
 if($41){label=15;break;}else{label=12;break;}
 case 12: 
 var $43=(($37+((($i_01_i1)*(14072))&-1))|0);
 var $_03_i_i3=32;var $l_04_i_i2=$4;var $r_05_i_i1=$43;label=13;break;
 case 13: 
 var $r_05_i_i1;
 var $l_04_i_i2;
 var $_03_i_i3;
 var $44=HEAP8[($l_04_i_i2)];
 var $45=HEAP8[($r_05_i_i1)];
 var $46=(($44<<24)>>24)==(($45<<24)>>24);
 if($46){label=14;break;}else{label=15;break;}
 case 14: 
 var $48=((($_03_i_i3)-(1))|0);
 var $49=(($l_04_i_i2+1)|0);
 var $50=(($r_05_i_i1+1)|0);
 var $51=($48|0)==0;
 if($51){label=16;break;}else{var $_03_i_i3=$48;var $l_04_i_i2=$49;var $r_05_i_i1=$50;label=13;break;}
 case 15: 
 var $52=((($i_01_i1)+(1))|0);
 var $53=($52>>>0)<($35>>>0);
 if($53){var $i_01_i1=$52;label=11;break;}else{label=20;break;}
 case 16: 
 var $54=($i_01_i1|0)==-1;
 if($54){label=20;break;}else{label=17;break;}
 case 17: 
 var $56=($40&255)>2;
 if($56){var $_0=-4;label=33;break;}else{label=18;break;}
 case 18: 
 var $58=(($address+32)|0);
 var $59=$58;
 var $60=((((HEAPU8[($59)])|(HEAPU8[((($59)+(1))|0)]<<8)|(HEAPU8[((($59)+(2))|0)]<<16)|(HEAPU8[((($59)+(3))|0)]<<24))|0));
 var $61=(($37+((($i_01_i1)*(14072))&-1)+1240)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=($62|0)==($60|0);
 if($63){var $_0=-4;label=33;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($61)>>2)]=$60;
 var $_0=-7;label=33;break;
 case 20: 
 var $65=((($35)+(1))|0);
 var $66=($65|0)==0;
 var $67=(($37)|0);
 if($66){label=21;break;}else{var $71=$65;var $70=$67;label=22;break;}
 case 21: 
 _free($67);
 var $storemerge=0;label=24;break;
 case 22: 
 var $70;
 var $71;
 var $72=((($71)*(14072))&-1);
 var $73=_realloc($70,$72);
 var $74=($73|0)==0;
 if($74){var $_0=-8;label=33;break;}else{label=23;break;}
 case 23: 
 var $76=$73;
 var $storemerge=$76;label=24;break;
 case 24: 
 var $storemerge;
 HEAP32[(($_pre9)>>2)]=$storemerge;
 var $78=HEAP32[(($34)>>2)];
 var $79=(($storemerge+((($78)*(14072))&-1))|0);
 _memset($79, 0, 14072)|0;
 var $80=(($m+20)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=_onion_addfriend($81,$4);
 var $83=($82|0)==-1;
 if($83){var $_0=-5;label=33;break;}else{label=25;break;}
 case 25: 
 var $84=HEAP32[(($_pre9)>>2)];
 var $i_05=0;label=27;break;
 case 26: 
 var $86=HEAP32[(($34)>>2)];
 var $87=($92>>>0)>($86>>>0);
 if($87){var $_0=-5;label=33;break;}else{var $i_05=$92;label=27;break;}
 case 27: 
 var $i_05;
 var $89=(($84+((($i_05)*(14072))&-1)+52)|0);
 var $90=HEAP8[($89)];
 var $91=(($90<<24)>>24)==0;
 var $92=((($i_05)+(1))|0);
 if($91){label=28;break;}else{label=26;break;}
 case 28: 
 var $94=(($84+((($i_05)*(14072))&-1)+32)|0);
 HEAP32[(($94)>>2)]=$82;
 HEAP8[($89)]=1;
 var $95=HEAP32[(($_pre9)>>2)];
 var $96=(($95+((($i_05)*(14072))&-1)+36)|0);
 HEAP32[(($96)>>2)]=-1;
 var $97=(($95+((($i_05)*(14072))&-1)+40)|0);
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $st$3$0=(($97)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($97+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 var $98=(($95+((($i_05)*(14072))&-1)+48)|0);
 HEAP32[(($98)>>2)]=5;
 var $99=(($95+((($i_05)*(14072))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($99, $4, 32)|0);
 var $100=_malloc(1);
 var $101=($100|0)==0;
 if($101){label=31;break;}else{label=29;break;}
 case 29: 
 var $103=((($100)-(4))|0);
 var $104=$103;
 var $105=HEAP32[(($104)>>2)];
 var $106=$105&3;
 var $107=($106|0)==0;
 if($107){label=31;break;}else{label=30;break;}
 case 30: 
 HEAP8[($100)]=0;
 label=31;break;
 case 31: 
 var $109=HEAP32[(($_pre9)>>2)];
 var $110=(($109+((($i_05)*(14072))&-1)+1212)|0);
 HEAP32[(($110)>>2)]=$100;
 var $111=HEAP32[(($_pre9)>>2)];
 var $112=(($111+((($i_05)*(14072))&-1)+1216)|0);
 HEAP16[(($112)>>1)]=1;
 var $113=(($111+((($i_05)*(14072))&-1)+1220)|0);
 HEAP32[(($113)>>2)]=0;
 var $114=HEAP32[(($_pre9)>>2)];
 var $115=(($114+((($i_05)*(14072))&-1)+1227)|0);
 HEAP8[($115)]=0;
 var $116=HEAP32[(($_pre9)>>2)];
 var $117=(($116+((($i_05)*(14072))&-1)+53)|0);
 assert($1 % 1 === 0);(_memcpy($117, $data, $1)|0);
 var $118=HEAP32[(($_pre9)>>2)];
 var $119=(($118+((($i_05)*(14072))&-1)+1228)|0);
 HEAP16[(($119)>>1)]=$length;
 var $120=(($118+((($i_05)*(14072))&-1)+1232)|0);
 HEAP32[(($120)>>2)]=0;
 var $121=(($118+((($i_05)*(14072))&-1)+1236)|0);
 HEAP8[($121)]=1;
 var $122=HEAP32[(($_pre9)>>2)];
 var $123=(($122+((($i_05)*(14072))&-1)+1240)|0);
 var $124=(($address+32)|0);
 var $125=$124;
 var $126=((((HEAPU8[($125)])|(HEAPU8[((($125)+(1))|0)]<<8)|(HEAPU8[((($125)+(2))|0)]<<16)|(HEAPU8[((($125)+(3))|0)]<<24))|0));
 tempBigInt=$126;HEAP8[($123)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($123)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($123)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($123)+(3))|0)]=tempBigInt&0xff;
 var $127=HEAP32[(($34)>>2)];
 var $128=($127|0)==($i_05|0);
 if($128){label=32;break;}else{var $_0=$i_05;label=33;break;}
 case 32: 
 HEAP32[(($34)>>2)]=$92;
 var $_0=$i_05;label=33;break;
 case 33: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _m_addfriend_norequest($m,$client_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($m+2228)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 var $_pre8=(($m+2224)|0);
 var $4=HEAP32[(($_pre8)>>2)];
 if($3){label=2;break;}else{var $i_01_i=0;label=3;break;}
 case 2: 
 var $5=(($4)|0);
 var $28=1;var $27=$5;label=11;break;
 case 3: 
 var $i_01_i;
 var $6=(($4+((($i_01_i)*(14072))&-1)+52)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=7;break;}else{label=4;break;}
 case 4: 
 var $10=(($4+((($i_01_i)*(14072))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$client_id;var $r_05_i_i=$10;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $11=HEAP8[($l_04_i_i)];
 var $12=HEAP8[($r_05_i_i)];
 var $13=(($11<<24)>>24)==(($12<<24)>>24);
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 var $15=((($_03_i_i)-(1))|0);
 var $16=(($l_04_i_i+1)|0);
 var $17=(($r_05_i_i+1)|0);
 var $18=($15|0)==0;
 if($18){label=8;break;}else{var $_03_i_i=$15;var $l_04_i_i=$16;var $r_05_i_i=$17;label=5;break;}
 case 7: 
 var $19=((($i_01_i)+(1))|0);
 var $20=($19>>>0)<($2>>>0);
 if($20){var $i_01_i=$19;label=3;break;}else{label=9;break;}
 case 8: 
 var $21=($i_01_i|0)==-1;
 if($21){label=9;break;}else{var $_0=-1;label=25;break;}
 case 9: 
 var $22=((($2)+(1))|0);
 var $23=($22|0)==0;
 var $24=(($4)|0);
 if($23){label=10;break;}else{var $28=$22;var $27=$24;label=11;break;}
 case 10: 
 _free($24);
 var $35=0;label=13;break;
 case 11: 
 var $27;
 var $28;
 var $29=((($28)*(14072))&-1);
 var $30=_realloc($27,$29);
 var $31=($30|0)==0;
 if($31){var $_0=-8;label=25;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 var $35=$33;label=13;break;
 case 13: 
 var $35;
 HEAP32[(($_pre8)>>2)]=$35;
 var $36=(($m+4)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+12)|0);
 var $_03_i_i3=32;var $l_04_i_i2=$client_id;var $r_05_i_i1=$38;label=14;break;
 case 14: 
 var $r_05_i_i1;
 var $l_04_i_i2;
 var $_03_i_i3;
 var $39=HEAP8[($l_04_i_i2)];
 var $40=HEAP8[($r_05_i_i1)];
 var $41=(($39<<24)>>24)==(($40<<24)>>24);
 if($41){label=15;break;}else{label=16;break;}
 case 15: 
 var $43=((($_03_i_i3)-(1))|0);
 var $44=(($l_04_i_i2+1)|0);
 var $45=(($r_05_i_i1+1)|0);
 var $46=($43|0)==0;
 if($46){var $_0=-3;label=25;break;}else{var $_03_i_i3=$43;var $l_04_i_i2=$44;var $r_05_i_i1=$45;label=14;break;}
 case 16: 
 var $47=HEAP32[(($1)>>2)];
 var $48=(($35+((($47)*(14072))&-1))|0);
 _memset($48, 0, 14072)|0;
 var $49=(($m+20)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=_onion_addfriend($50,$client_id);
 var $52=($51|0)==-1;
 if($52){var $_0=-5;label=25;break;}else{label=17;break;}
 case 17: 
 var $53=HEAP32[(($_pre8)>>2)];
 var $i_04=0;label=19;break;
 case 18: 
 var $55=HEAP32[(($1)>>2)];
 var $56=($61>>>0)>($55>>>0);
 if($56){var $_0=-1;label=25;break;}else{var $i_04=$61;label=19;break;}
 case 19: 
 var $i_04;
 var $58=(($53+((($i_04)*(14072))&-1)+52)|0);
 var $59=HEAP8[($58)];
 var $60=(($59<<24)>>24)==0;
 var $61=((($i_04)+(1))|0);
 if($60){label=20;break;}else{label=18;break;}
 case 20: 
 var $63=(($53+((($i_04)*(14072))&-1)+32)|0);
 HEAP32[(($63)>>2)]=$51;
 HEAP8[($58)]=3;
 var $64=HEAP32[(($_pre8)>>2)];
 var $65=(($64+((($i_04)*(14072))&-1)+36)|0);
 HEAP32[(($65)>>2)]=-1;
 var $66=(($64+((($i_04)*(14072))&-1)+40)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($66)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($66+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $67=(($64+((($i_04)*(14072))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($67, $client_id, 32)|0);
 var $68=_malloc(1);
 var $69=($68|0)==0;
 if($69){label=23;break;}else{label=21;break;}
 case 21: 
 var $71=((($68)-(4))|0);
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=$73&3;
 var $75=($74|0)==0;
 if($75){label=23;break;}else{label=22;break;}
 case 22: 
 HEAP8[($68)]=0;
 label=23;break;
 case 23: 
 var $77=HEAP32[(($_pre8)>>2)];
 var $78=(($77+((($i_04)*(14072))&-1)+1212)|0);
 HEAP32[(($78)>>2)]=$68;
 var $79=HEAP32[(($_pre8)>>2)];
 var $80=(($79+((($i_04)*(14072))&-1)+1216)|0);
 HEAP16[(($80)>>1)]=1;
 var $81=(($79+((($i_04)*(14072))&-1)+1220)|0);
 HEAP32[(($81)>>2)]=0;
 var $82=HEAP32[(($_pre8)>>2)];
 var $83=(($82+((($i_04)*(14072))&-1)+1227)|0);
 HEAP8[($83)]=0;
 var $84=HEAP32[(($_pre8)>>2)];
 var $85=(($84+((($i_04)*(14072))&-1)+1232)|0);
 HEAP32[(($85)>>2)]=0;
 var $86=(($84+((($i_04)*(14072))&-1)+1236)|0);
 HEAP8[($86)]=1;
 var $87=HEAP32[(($1)>>2)];
 var $88=($87|0)==($i_04|0);
 if($88){label=24;break;}else{var $_0=$i_04;label=25;break;}
 case 24: 
 HEAP32[(($1)>>2)]=$61;
 var $_0=$i_04;label=25;break;
 case 25: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _write_cryptpacket_id($m,$friendnumber,$packet_id,$data,$length){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $m_idx=(($m+2228)|0);
 var $m_idx_val=HEAP32[(($m_idx)>>2)];
 var $1=($m_idx_val>>>0)<=($friendnumber>>>0);
 var $2=($length>>>0)>1023;
 var $or_cond=$1|$2;
 if($or_cond){var $_0=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $4=(($m+2224)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+((($friendnumber)*(14072))&-1)+52)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==4;
 if($8){label=3;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $10=((($length)+(1))|0);
 var $11=_llvm_stacksave();
 var $12=STACKTOP;STACKTOP = (STACKTOP + $10)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP8[($12)]=$packet_id;
 var $13=($length|0)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($12+1)|0);
 assert($length % 1 === 0);(_memcpy($15, $data, $length)|0);
 label=5;break;
 case 5: 
 var $17=(($m+4)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=HEAP32[(($4)>>2)];
 var $20=(($19+((($friendnumber)*(14072))&-1)+36)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=_write_cryptpacket($18,$21,$12,$10);
 _llvm_stackrestore($11);
 var $_0=$22;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _friend_already_added($client_id,$data){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($data+2228)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){var $_0_i=-1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($data+2224)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $i_01_i=0;label=3;break;
 case 3: 
 var $i_01_i;
 var $8=(($7+((($i_01_i)*(14072))&-1)+52)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=7;break;}else{label=4;break;}
 case 4: 
 var $12=(($7+((($i_01_i)*(14072))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$client_id;var $r_05_i_i=$12;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $13=HEAP8[($l_04_i_i)];
 var $14=HEAP8[($r_05_i_i)];
 var $15=(($13<<24)>>24)==(($14<<24)>>24);
 if($15){label=6;break;}else{label=7;break;}
 case 6: 
 var $17=((($_03_i_i)-(1))|0);
 var $18=(($l_04_i_i+1)|0);
 var $19=(($r_05_i_i+1)|0);
 var $20=($17|0)==0;
 if($20){var $_0_i=$i_01_i;label=8;break;}else{var $_03_i_i=$17;var $l_04_i_i=$18;var $r_05_i_i=$19;label=5;break;}
 case 7: 
 var $21=((($i_01_i)+(1))|0);
 var $22=($21>>>0)<($3>>>0);
 if($22){var $i_01_i=$21;label=3;break;}else{var $_0_i=-1;label=8;break;}
 case 8: 
 var $_0_i;
 var $not_=($_0_i|0)!=-1;
 var $_=(($not_<<31)>>31);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_group($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $source416_i=sp;
 var $nonce_i_i=(sp)+(24);
 var $temp_i_i=(sp)+(48);
 var $contents_i_i=(sp)+(1072);
 var $ippts_send_i_i=(sp)+(1416);
 var $ipp_recv_i_i=(sp)+(1448);
 var $source4_i=(sp)+(1472);
 var $packet_i_i_i_i=(sp)+(1496);
 var $ip_port1_i_i_i=(sp)+(2520);
 var $contents_i_i_i=(sp)+(2544);
 var $source1_i_i=(sp)+(2888);
 var $source1_i=(sp)+(2912);
 var $public_key_i=(sp)+(2936);
 var $data_i=(sp)+(2968);
 var $number_i=(sp)+(3992);
 var $source1=(sp)+(4000);
 var $1=($length>>>0)<33;
 if($1){var $_0=1;label=169;break;}else{label=2;break;}
 case 2: 
 var $2=(($object+2244)|0);
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=($4|0)==0;
 if($5){var $_0=1;label=169;break;}else{label=3;break;}
 case 3: 
 var $6=(($object+2240)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $i_02=0;label=4;break;
 case 4: 
 var $i_02;
 var $9=(($8+($i_02<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=168;break;}else{label=5;break;}
 case 5: 
 var $13=(($10+4)|0);
 var $_03_i_i=32;var $l_04_i_i_pn=$packet;var $r_05_i_i=$13;label=6;break;
 case 6: 
 var $r_05_i_i;
 var $l_04_i_i_pn;
 var $_03_i_i;
 var $l_04_i_i=(($l_04_i_i_pn+1)|0);
 var $14=HEAP8[($l_04_i_i)];
 var $15=HEAP8[($r_05_i_i)];
 var $16=(($14<<24)>>24)==(($15<<24)>>24);
 if($16){label=7;break;}else{label=168;break;}
 case 7: 
 var $18=((($_03_i_i)-(1))|0);
 var $19=(($r_05_i_i+1)|0);
 var $20=($18|0)==0;
 if($20){label=8;break;}else{var $_03_i_i=$18;var $l_04_i_i_pn=$l_04_i_i;var $r_05_i_i=$19;label=6;break;}
 case 8: 
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $21=(($source416_i)|0);
 var $$etemp$0$0=24;
 var $$etemp$0$1=0;

 var $22=(($source4_i)|0);
 var $$etemp$1$0=24;
 var $$etemp$1$1=0;

 var $23=(($source1_i)|0);
 var $$etemp$2$0=24;
 var $$etemp$2$1=0;

 var $24=(($public_key_i)|0);
 var $$etemp$3$0=32;
 var $$etemp$3$1=0;

 var $$etemp$4$0=1;
 var $$etemp$4$1=0;

 var $25=($length>>>0)>1024;
 if($25){var $_0=1;label=169;break;}else{label=9;break;}
 case 9: 
 var $27=(($data_i)|0);
 var $$etemp$5$0=1024;
 var $$etemp$5$1=0;

 var $28=(($10+36)|0);
 var $29=(($length)&65535);
 var $30=_handle_request($13,$28,$24,$27,$number_i,$packet,$29);
 var $31=($30|0)<1;
 if($31){var $_0=1;label=169;break;}else{var $_03_i_i_i=32;var $l_04_i_i_i=$13;var $r_05_i_i_i=$24;label=10;break;}
 case 10: 
 var $r_05_i_i_i;
 var $l_04_i_i_i;
 var $_03_i_i_i;
 var $32=HEAP8[($l_04_i_i_i)];
 var $33=HEAP8[($r_05_i_i_i)];
 var $34=(($32<<24)>>24)==(($33<<24)>>24);
 if($34){label=11;break;}else{label=12;break;}
 case 11: 
 var $36=((($_03_i_i_i)-(1))|0);
 var $37=(($l_04_i_i_i+1)|0);
 var $38=(($r_05_i_i_i+1)|0);
 var $39=($36|0)==0;
 if($39){var $_0=1;label=169;break;}else{var $_03_i_i_i=$36;var $l_04_i_i_i=$37;var $r_05_i_i_i=$38;label=10;break;}
 case 12: 
 var $40=(($10+456)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){var $_0=1;label=169;break;}else{label=13;break;}
 case 13: 
 var $43=(($10+68)|0);
 var $44=HEAP32[(($43)>>2)];
 var $i_01_i_i=0;label=15;break;
 case 14: 
 var $46=((($i_01_i_i)+(1))|0);
 var $47=($46>>>0)<($41>>>0);
 if($47){var $i_01_i_i=$46;label=15;break;}else{var $_0=1;label=169;break;}
 case 15: 
 var $i_01_i_i;
 var $49=(($44+((($i_01_i_i)*(232))&-1))|0);
 var $_03_i_i4_i=32;var $l_04_i_i3_i=$49;var $r_05_i_i2_i=$24;label=16;break;
 case 16: 
 var $r_05_i_i2_i;
 var $l_04_i_i3_i;
 var $_03_i_i4_i;
 var $50=HEAP8[($l_04_i_i3_i)];
 var $51=HEAP8[($r_05_i_i2_i)];
 var $52=(($50<<24)>>24)==(($51<<24)>>24);
 if($52){label=17;break;}else{label=14;break;}
 case 17: 
 var $54=((($_03_i_i4_i)-(1))|0);
 var $55=(($l_04_i_i3_i+1)|0);
 var $56=(($r_05_i_i2_i+1)|0);
 var $57=($54|0)==0;
 if($57){label=18;break;}else{var $_03_i_i4_i=$54;var $l_04_i_i3_i=$55;var $r_05_i_i2_i=$56;label=16;break;}
 case 18: 
 var $58=($i_01_i_i|0)==-1;
 if($58){var $_0=1;label=169;break;}else{label=19;break;}
 case 19: 
 var $60=HEAP8[($number_i)];
 var $61=($60&255);
 if(($61|0)==50){ label=130;break;}else if(($61|0)==48){ label=20;break;}else if(($61|0)==49){ label=77;break;}else{var $_0=1;label=169;break;}
 case 20: 
 assert(24 % 1 === 0);HEAP32[(($23)>>2)]=HEAP32[(($tmp)>>2)];HEAP32[((($23)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)];HEAP32[((($23)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)];HEAP32[((($23)+(12))>>2)]=HEAP32[((($tmp)+(12))>>2)];HEAP32[((($23)+(16))>>2)]=HEAP32[((($tmp)+(16))>>2)];HEAP32[((($23)+(20))>>2)]=HEAP32[((($tmp)+(20))>>2)];
 var $63=(($source1_i_i)|0);
 var $$etemp$6$0=24;
 var $$etemp$6$1=0;

 var $64=($30|0)==8;
 var $65=($41>>>0)>($i_01_i_i>>>0);
 var $or_cond=$64&$65;
 if($or_cond){label=21;break;}else{var $_0=1;label=169;break;}
 case 21: 
 var $67=$data_i;
 var $ld$7$0=(($67)|0);
 var $68$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($67+4)|0);
 var $68$1=HEAP32[(($ld$8$1)>>2)];
 assert(24 % 1 === 0);HEAP32[(($63)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($63)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($63)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];HEAP32[((($63)+(12))>>2)]=HEAP32[((($23)+(12))>>2)];HEAP32[((($63)+(16))>>2)]=HEAP32[((($23)+(16))>>2)];HEAP32[((($63)+(20))>>2)]=HEAP32[((($23)+(20))>>2)];
 var $69=(($ip_port1_i_i_i)|0);
 var $$etemp$9$0=24;
 var $$etemp$9$1=0;

 var $70=$contents_i_i_i;
 var $$etemp$10$0=344;
 var $$etemp$10$1=0;

 var $71=(($contents_i_i_i)|0);
 var $st$11$0=(($71)|0);
 HEAP32[(($st$11$0)>>2)]=$68$0;
 var $st$12$1=(($71+4)|0);
 HEAP32[(($st$12$1)>>2)]=$68$1;
 var $72=(($10+128)|0);
 var $ld$13$0=(($72)|0);
 var $73$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($72+4)|0);
 var $73$1=HEAP32[(($ld$14$1)>>2)];
 var $$etemp$15$0=30;
 var $$etemp$15$1=0;
 var $74$0=_i64Add($73$0,$73$1,$$etemp$15$0,$$etemp$15$1);var $74$1=tempRet0;
 var $ld$16$0=13552;
 var $75$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=13556;
 var $75$1=HEAP32[(($ld$17$1)>>2)];
 var $76=(($74$1>>>0) > ($75$1>>>0)) | (((($74$1>>>0) == ($75$1>>>0) & ($74$0>>>0) >  ($75$0>>>0))));
 if($76){label=22;break;}else{var $j_1_i_i_i=0;label=25;break;}
 case 22: 
 var $78=(($contents_i_i_i+8)|0);
 var $79=(($10+72)|0);
 assert(32 % 1 === 0);(_memcpy($78, $79, 32)|0);
 var $80=(($contents_i_i_i+40)|0);
 var $81=(($10+104)|0);
 assert(24 % 1 === 0);(_memcpy($80, $81, 24)|0);
 var $82=(($contents_i_i_i+41)|0);
 HEAP8[($82)]=0;
 var $83=(($contents_i_i_i+42)|0);
 HEAP8[($83)]=0;
 var $84=(($contents_i_i_i+43)|0);
 HEAP8[($84)]=0;
 var $85=HEAP8[($80)];
 if((($85<<24)>>24)==2){ label=23;break;}else if((($85<<24)>>24)==10){ label=24;break;}else{var $j_1_i_i_i=1;label=25;break;}
 case 23: 
 HEAP8[($80)]=2;
 var $j_1_i_i_i=1;label=25;break;
 case 24: 
 HEAP8[($80)]=10;
 var $j_1_i_i_i=1;label=25;break;
 case 25: 
 var $j_1_i_i_i;
 var $88=(($10+192)|0);
 var $ld$18$0=(($88)|0);
 var $89$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($88+4)|0);
 var $89$1=HEAP32[(($ld$19$1)>>2)];
 var $$etemp$20$0=30;
 var $$etemp$20$1=0;
 var $90$0=_i64Add($89$0,$89$1,$$etemp$20$0,$$etemp$20$1);var $90$1=tempRet0;
 var $91=(($90$1>>>0) > ($75$1>>>0)) | (((($90$1>>>0) == ($75$1>>>0) & ($90$0>>>0) >  ($75$0>>>0))));
 if($91){label=34;break;}else{var $j_1_1_i_i_i=$j_1_i_i_i;label=38;break;}
 case 26: 
 var $92=((($j_1_5_i_i_i)*(56))&-1);
 var $93=(($packet_i_i_i_i)|0);
 var $$etemp$21$0=1024;
 var $$etemp$21$1=0;

 var $94=(($nonce_i_i)|0);
 var $$etemp$22$0=24;
 var $$etemp$22$1=0;

 var $95=((($92)+(114))|0);
 var $96=($95>>>0)>1024;
 if($96){label=31;break;}else{label=27;break;}
 case 27: 
 var $98=((($92)+(8))|0);
 var $99=((($92)+(9))|0);
 var $100=(($temp_i_i)|0);
 var $$etemp$23$0=1024;
 var $$etemp$23$1=0;

 var $101=(($temp_i_i+1)|0);
 assert($98 % 1 === 0);(_memcpy($101, $70, $98)|0);
 HEAP8[($100)]=49;
 var $_b_i_i_i=HEAP8[(136)];
 if($_b_i_i_i){var $i_01_i_i_i_i=0;label=29;break;}else{label=28;break;}
 case 28: 
 var $$etemp$25$0=24;
 var $$etemp$25$1=0;
 var $$etemp$24=15032;
 _randombytes($$etemp$24,$$etemp$25$0,$$etemp$25$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i_i=0;label=29;break;
 case 29: 
 var $i_01_i_i_i_i;
 var $103=((15032+$i_01_i_i_i_i)|0);
 var $104=HEAP8[($103)];
 var $105=((($104)+(1))&255);
 HEAP8[($103)]=$105;
 var $106=(($105<<24)>>24)==0;
 var $107=((($i_01_i_i_i_i)+(1))|0);
 var $108=($107>>>0)<24;
 var $or_cond_i_i_i_i=$106&$108;
 if($or_cond_i_i_i_i){var $i_01_i_i_i_i=$107;label=29;break;}else{label=30;break;}
 case 30: 
 assert(24 % 1 === 0);(_memcpy($94, 15032, 24)|0);
 var $109=(($packet_i_i_i_i+89)|0);
 var $110=_encrypt_data($202,$28,$94,$100,$99,$109);
 var $111=($110|0)==-1;
 if($111){label=31;break;}else{label=32;break;}
 case 31: 
 var $$etemp$26$0=24;
 var $$etemp$26$1=0;

 HEAP8[($93)]=48;
 label=61;break;
 case 32: 
 HEAP8[($93)]=32;
 var $112=(($packet_i_i_i_i+1)|0);
 assert(32 % 1 === 0);(_memcpy($112, $202, 32)|0);
 var $113=(($packet_i_i_i_i+33)|0);
 assert(32 % 1 === 0);(_memcpy($113, $13, 32)|0);
 var $114=(($packet_i_i_i_i+65)|0);
 assert(24 % 1 === 0);(_memcpy($114, $94, 24)|0);
 var $115=((($110)+(89))|0);
 var $$etemp$27$0=24;
 var $$etemp$27$1=0;

 HEAP8[($93)]=48;
 var $116=($115|0)==-1;
 if($116){label=61;break;}else{label=33;break;}
 case 33: 
 var $118=(($10)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=_sendpacket($119,$ip_port1_i_i_i,$93,$115);
 label=61;break;
 case 34: 
 var $122=(($contents_i_i_i+8+((($j_1_i_i_i)*(56))&-1))|0);
 var $123=(($10+136)|0);
 assert(32 % 1 === 0);(_memcpy($122, $123, 32)|0);
 var $124=(($contents_i_i_i+8+((($j_1_i_i_i)*(56))&-1)+32)|0);
 var $125=(($10+168)|0);
 assert(24 % 1 === 0);(_memcpy($124, $125, 24)|0);
 var $126=(($contents_i_i_i+8+((($j_1_i_i_i)*(56))&-1)+33)|0);
 HEAP8[($126)]=0;
 var $127=(($contents_i_i_i+8+((($j_1_i_i_i)*(56))&-1)+34)|0);
 HEAP8[($127)]=0;
 var $128=(($contents_i_i_i+8+((($j_1_i_i_i)*(56))&-1)+35)|0);
 HEAP8[($128)]=0;
 var $129=HEAP8[($124)];
 if((($129<<24)>>24)==2){ label=35;break;}else if((($129<<24)>>24)==10){ label=36;break;}else{label=37;break;}
 case 35: 
 HEAP8[($124)]=2;
 label=37;break;
 case 36: 
 HEAP8[($124)]=10;
 label=37;break;
 case 37: 
 var $132=((($j_1_i_i_i)+(1))|0);
 var $j_1_1_i_i_i=$132;label=38;break;
 case 38: 
 var $j_1_1_i_i_i;
 var $134=(($10+256)|0);
 var $ld$28$0=(($134)|0);
 var $135$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($134+4)|0);
 var $135$1=HEAP32[(($ld$29$1)>>2)];
 var $$etemp$30$0=30;
 var $$etemp$30$1=0;
 var $136$0=_i64Add($135$0,$135$1,$$etemp$30$0,$$etemp$30$1);var $136$1=tempRet0;
 var $137=(($136$1>>>0) > ($75$1>>>0)) | (((($136$1>>>0) == ($75$1>>>0) & ($136$0>>>0) >  ($75$0>>>0))));
 if($137){label=39;break;}else{var $j_1_2_i_i_i=$j_1_1_i_i_i;label=43;break;}
 case 39: 
 var $139=(($contents_i_i_i+8+((($j_1_1_i_i_i)*(56))&-1))|0);
 var $140=(($10+200)|0);
 assert(32 % 1 === 0);(_memcpy($139, $140, 32)|0);
 var $141=(($contents_i_i_i+8+((($j_1_1_i_i_i)*(56))&-1)+32)|0);
 var $142=(($10+232)|0);
 assert(24 % 1 === 0);(_memcpy($141, $142, 24)|0);
 var $143=(($contents_i_i_i+8+((($j_1_1_i_i_i)*(56))&-1)+33)|0);
 HEAP8[($143)]=0;
 var $144=(($contents_i_i_i+8+((($j_1_1_i_i_i)*(56))&-1)+34)|0);
 HEAP8[($144)]=0;
 var $145=(($contents_i_i_i+8+((($j_1_1_i_i_i)*(56))&-1)+35)|0);
 HEAP8[($145)]=0;
 var $146=HEAP8[($141)];
 if((($146<<24)>>24)==2){ label=40;break;}else if((($146<<24)>>24)==10){ label=41;break;}else{label=42;break;}
 case 40: 
 HEAP8[($141)]=2;
 label=42;break;
 case 41: 
 HEAP8[($141)]=10;
 label=42;break;
 case 42: 
 var $149=((($j_1_1_i_i_i)+(1))|0);
 var $j_1_2_i_i_i=$149;label=43;break;
 case 43: 
 var $j_1_2_i_i_i;
 var $151=(($10+320)|0);
 var $ld$31$0=(($151)|0);
 var $152$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($151+4)|0);
 var $152$1=HEAP32[(($ld$32$1)>>2)];
 var $$etemp$33$0=30;
 var $$etemp$33$1=0;
 var $153$0=_i64Add($152$0,$152$1,$$etemp$33$0,$$etemp$33$1);var $153$1=tempRet0;
 var $154=(($153$1>>>0) > ($75$1>>>0)) | (((($153$1>>>0) == ($75$1>>>0) & ($153$0>>>0) >  ($75$0>>>0))));
 if($154){label=44;break;}else{var $j_1_3_i_i_i=$j_1_2_i_i_i;label=48;break;}
 case 44: 
 var $156=(($contents_i_i_i+8+((($j_1_2_i_i_i)*(56))&-1))|0);
 var $157=(($10+264)|0);
 assert(32 % 1 === 0);(_memcpy($156, $157, 32)|0);
 var $158=(($contents_i_i_i+8+((($j_1_2_i_i_i)*(56))&-1)+32)|0);
 var $159=(($10+296)|0);
 assert(24 % 1 === 0);(_memcpy($158, $159, 24)|0);
 var $160=(($contents_i_i_i+8+((($j_1_2_i_i_i)*(56))&-1)+33)|0);
 HEAP8[($160)]=0;
 var $161=(($contents_i_i_i+8+((($j_1_2_i_i_i)*(56))&-1)+34)|0);
 HEAP8[($161)]=0;
 var $162=(($contents_i_i_i+8+((($j_1_2_i_i_i)*(56))&-1)+35)|0);
 HEAP8[($162)]=0;
 var $163=HEAP8[($158)];
 if((($163<<24)>>24)==2){ label=45;break;}else if((($163<<24)>>24)==10){ label=46;break;}else{label=47;break;}
 case 45: 
 HEAP8[($158)]=2;
 label=47;break;
 case 46: 
 HEAP8[($158)]=10;
 label=47;break;
 case 47: 
 var $166=((($j_1_2_i_i_i)+(1))|0);
 var $j_1_3_i_i_i=$166;label=48;break;
 case 48: 
 var $j_1_3_i_i_i;
 var $168=(($10+384)|0);
 var $ld$34$0=(($168)|0);
 var $169$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=(($168+4)|0);
 var $169$1=HEAP32[(($ld$35$1)>>2)];
 var $$etemp$36$0=30;
 var $$etemp$36$1=0;
 var $170$0=_i64Add($169$0,$169$1,$$etemp$36$0,$$etemp$36$1);var $170$1=tempRet0;
 var $171=(($170$1>>>0) > ($75$1>>>0)) | (((($170$1>>>0) == ($75$1>>>0) & ($170$0>>>0) >  ($75$0>>>0))));
 if($171){label=49;break;}else{var $j_1_4_i_i_i=$j_1_3_i_i_i;label=53;break;}
 case 49: 
 var $173=(($contents_i_i_i+8+((($j_1_3_i_i_i)*(56))&-1))|0);
 var $174=(($10+328)|0);
 assert(32 % 1 === 0);(_memcpy($173, $174, 32)|0);
 var $175=(($contents_i_i_i+8+((($j_1_3_i_i_i)*(56))&-1)+32)|0);
 var $176=(($10+360)|0);
 assert(24 % 1 === 0);(_memcpy($175, $176, 24)|0);
 var $177=(($contents_i_i_i+8+((($j_1_3_i_i_i)*(56))&-1)+33)|0);
 HEAP8[($177)]=0;
 var $178=(($contents_i_i_i+8+((($j_1_3_i_i_i)*(56))&-1)+34)|0);
 HEAP8[($178)]=0;
 var $179=(($contents_i_i_i+8+((($j_1_3_i_i_i)*(56))&-1)+35)|0);
 HEAP8[($179)]=0;
 var $180=HEAP8[($175)];
 if((($180<<24)>>24)==2){ label=50;break;}else if((($180<<24)>>24)==10){ label=51;break;}else{label=52;break;}
 case 50: 
 HEAP8[($175)]=2;
 label=52;break;
 case 51: 
 HEAP8[($175)]=10;
 label=52;break;
 case 52: 
 var $183=((($j_1_3_i_i_i)+(1))|0);
 var $j_1_4_i_i_i=$183;label=53;break;
 case 53: 
 var $j_1_4_i_i_i;
 var $185=(($10+448)|0);
 var $ld$37$0=(($185)|0);
 var $186$0=HEAP32[(($ld$37$0)>>2)];
 var $ld$38$1=(($185+4)|0);
 var $186$1=HEAP32[(($ld$38$1)>>2)];
 var $$etemp$39$0=30;
 var $$etemp$39$1=0;
 var $187$0=_i64Add($186$0,$186$1,$$etemp$39$0,$$etemp$39$1);var $187$1=tempRet0;
 var $188=(($187$1>>>0) > ($75$1>>>0)) | (((($187$1>>>0) == ($75$1>>>0) & ($187$0>>>0) >  ($75$0>>>0))));
 if($188){label=54;break;}else{var $j_1_5_i_i_i=$j_1_4_i_i_i;label=58;break;}
 case 54: 
 var $190=(($contents_i_i_i+8+((($j_1_4_i_i_i)*(56))&-1))|0);
 var $191=(($10+392)|0);
 assert(32 % 1 === 0);(_memcpy($190, $191, 32)|0);
 var $192=(($contents_i_i_i+8+((($j_1_4_i_i_i)*(56))&-1)+32)|0);
 var $193=(($10+424)|0);
 assert(24 % 1 === 0);(_memcpy($192, $193, 24)|0);
 var $194=(($contents_i_i_i+8+((($j_1_4_i_i_i)*(56))&-1)+33)|0);
 HEAP8[($194)]=0;
 var $195=(($contents_i_i_i+8+((($j_1_4_i_i_i)*(56))&-1)+34)|0);
 HEAP8[($195)]=0;
 var $196=(($contents_i_i_i+8+((($j_1_4_i_i_i)*(56))&-1)+35)|0);
 HEAP8[($196)]=0;
 var $197=HEAP8[($192)];
 if((($197<<24)>>24)==2){ label=55;break;}else if((($197<<24)>>24)==10){ label=56;break;}else{label=57;break;}
 case 55: 
 HEAP8[($192)]=2;
 label=57;break;
 case 56: 
 HEAP8[($192)]=10;
 label=57;break;
 case 57: 
 var $200=((($j_1_4_i_i_i)+(1))|0);
 var $j_1_5_i_i_i=$200;label=58;break;
 case 58: 
 var $j_1_5_i_i_i;
 var $201=HEAP32[(($43)>>2)];
 var $202=(($201+((($i_01_i_i)*(232))&-1))|0);
 assert(24 % 1 === 0);HEAP32[(($69)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($69)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($69)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];HEAP32[((($69)+(12))>>2)]=HEAP32[((($63)+(12))>>2)];HEAP32[((($69)+(16))>>2)]=HEAP32[((($63)+(16))>>2)];HEAP32[((($69)+(20))>>2)]=HEAP32[((($63)+(20))>>2)];
 var $_03_i_i54_i=32;var $l_04_i_i53_i=$13;var $r_05_i_i52_i=$202;label=59;break;
 case 59: 
 var $r_05_i_i52_i;
 var $l_04_i_i53_i;
 var $_03_i_i54_i;
 var $203=HEAP8[($l_04_i_i53_i)];
 var $204=HEAP8[($r_05_i_i52_i)];
 var $205=(($203<<24)>>24)==(($204<<24)>>24);
 if($205){label=60;break;}else{label=26;break;}
 case 60: 
 var $207=((($_03_i_i54_i)-(1))|0);
 var $208=(($l_04_i_i53_i+1)|0);
 var $209=(($r_05_i_i52_i+1)|0);
 var $210=($207|0)==0;
 if($210){label=61;break;}else{var $_03_i_i54_i=$207;var $l_04_i_i53_i=$208;var $r_05_i_i52_i=$209;label=59;break;}
 case 61: 
 var $$etemp$40$0=24;
 var $$etemp$40$1=0;

 var $211=HEAP32[(($43)>>2)];
 var $212=(($211+((($i_01_i_i)*(232))&-1))|0);
 var $_03_i_i49_i=32;var $l_04_i_i48_i=$13;var $r_05_i_i47_i=$212;label=62;break;
 case 62: 
 var $r_05_i_i47_i;
 var $l_04_i_i48_i;
 var $_03_i_i49_i;
 var $213=HEAP8[($l_04_i_i48_i)];
 var $214=HEAP8[($r_05_i_i47_i)];
 var $215=(($213<<24)>>24)==(($214<<24)>>24);
 if($215){label=63;break;}else{label=64;break;}
 case 63: 
 var $217=((($_03_i_i49_i)-(1))|0);
 var $218=(($l_04_i_i48_i+1)|0);
 var $219=(($r_05_i_i47_i+1)|0);
 var $220=($217|0)==0;
 if($220){var $_0=0;label=169;break;}else{var $_03_i_i49_i=$217;var $l_04_i_i48_i=$218;var $r_05_i_i47_i=$219;label=62;break;}
 case 64: 
 var $ld$41$0=13552;
 var $221$0=HEAP32[(($ld$41$0)>>2)];
 var $ld$42$1=13556;
 var $221$1=HEAP32[(($ld$42$1)>>2)];
 var $i_01_i_i_i=0;var $j_02_i_i_i=0;label=65;break;
 case 65: 
 var $j_02_i_i_i;
 var $i_01_i_i_i;
 var $222=(($10+72+($i_01_i_i_i<<6)+56)|0);
 var $ld$43$0=(($222)|0);
 var $223$0=HEAP32[(($ld$43$0)>>2)];
 var $ld$44$1=(($222+4)|0);
 var $223$1=HEAP32[(($ld$44$1)>>2)];
 var $$etemp$45$0=30;
 var $$etemp$45$1=0;
 var $224$0=_i64Add($223$0,$223$1,$$etemp$45$0,$$etemp$45$1);var $224$1=tempRet0;
 var $225=(($224$1>>>0) > ($221$1>>>0)) | (((($224$1>>>0) == ($221$1>>>0) & ($224$0>>>0) >  ($221$0>>>0))));
 if($225){label=67;break;}else{label=66;break;}
 case 66: 
 var $227=((($j_02_i_i_i)+(1))|0);
 var $j_1_i3_i_i=$227;label=74;break;
 case 67: 
 var $229=(($10+72+($i_01_i_i_i<<6))|0);
 var $_03_i_i44_i=32;var $l_04_i_i43_i=$229;var $r_05_i_i42_i=$212;label=68;break;
 case 68: 
 var $r_05_i_i42_i;
 var $l_04_i_i43_i;
 var $_03_i_i44_i;
 var $230=HEAP8[($l_04_i_i43_i)];
 var $231=HEAP8[($r_05_i_i42_i)];
 var $232=(($230<<24)>>24)==(($231<<24)>>24);
 if($232){label=69;break;}else{var $i_03_i_i_i=0;label=71;break;}
 case 69: 
 var $234=((($_03_i_i44_i)-(1))|0);
 var $235=(($l_04_i_i43_i+1)|0);
 var $236=(($r_05_i_i42_i+1)|0);
 var $237=($234|0)==0;
 if($237){var $_0=0;label=169;break;}else{var $_03_i_i44_i=$234;var $l_04_i_i43_i=$235;var $r_05_i_i42_i=$236;label=68;break;}
 case 70: 
 var $239=($258>>>0)<32;
 if($239){var $i_03_i_i_i=$258;label=71;break;}else{var $_0_i4_i_i=0;label=73;break;}
 case 71: 
 var $i_03_i_i_i;
 var $240=(($10+4+$i_03_i_i_i)|0);
 var $241=HEAP8[($240)];
 var $242=(($241<<24)>>24);
 var $243=(($10+72+($i_01_i_i_i<<6)+$i_03_i_i_i)|0);
 var $244=HEAP8[($243)];
 var $245=(($244<<24)>>24);
 var $246=((($242)-($245))|0);
 var $ispos_i_i_i=($246|0)>-1;
 var $neg_i_i_i=(((-$246))|0);
 var $247=($ispos_i_i_i?$246:$neg_i_i_i);
 var $248=(($211+((($i_01_i_i)*(232))&-1)+$i_03_i_i_i)|0);
 var $249=HEAP8[($248)];
 var $250=(($249<<24)>>24);
 var $251=((($242)-($250))|0);
 var $ispos1_i_i_i=($251|0)>-1;
 var $neg2_i_i_i=(((-$251))|0);
 var $252=($ispos1_i_i_i?$251:$neg2_i_i_i);
 var $253=$247&255;
 var $254=$252&255;
 var $255=($253>>>0)<($254>>>0);
 if($255){var $_0_i4_i_i=0;label=73;break;}else{label=72;break;}
 case 72: 
 var $257=($253>>>0)>($254>>>0);
 var $258=((($i_03_i_i_i)+(1))|0);
 if($257){var $_0_i4_i_i=1;label=73;break;}else{label=70;break;}
 case 73: 
 var $_0_i4_i_i;
 var $_j_0_i_i_i=((($_0_i4_i_i)+($j_02_i_i_i))|0);
 var $j_1_i3_i_i=$_j_0_i_i_i;label=74;break;
 case 74: 
 var $j_1_i3_i_i;
 var $260=((($i_01_i_i_i)+(1))|0);
 var $261=($260>>>0)<6;
 if($261){var $i_01_i_i_i=$260;var $j_02_i_i_i=$j_1_i3_i_i;label=65;break;}else{label=75;break;}
 case 75: 
 var $262=($j_1_i3_i_i|0)>0;
 if($262){label=76;break;}else{var $_0=0;label=169;break;}
 case 76: 
 _send_getnodes($10,$source1_i,$i_01_i_i);
 var $_0=0;label=169;break;
 case 77: 
 assert(24 % 1 === 0);HEAP32[(($22)>>2)]=HEAP32[(($tmp)>>2)];HEAP32[((($22)+(4))>>2)]=HEAP32[((($tmp)+(4))>>2)];HEAP32[((($22)+(8))>>2)]=HEAP32[((($tmp)+(8))>>2)];HEAP32[((($22)+(12))>>2)]=HEAP32[((($tmp)+(12))>>2)];HEAP32[((($22)+(16))>>2)]=HEAP32[((($tmp)+(16))>>2)];HEAP32[((($22)+(20))>>2)]=HEAP32[((($tmp)+(20))>>2)];
 var $265=(($ippts_send_i_i)|0);
 var $$etemp$46$0=32;
 var $$etemp$46$1=0;

 var $266=(($ipp_recv_i_i)|0);
 var $$etemp$47$0=24;
 var $$etemp$47$1=0;

 var $267=($41>>>0)>($i_01_i_i>>>0);
 if($267){label=78;break;}else{var $_0=1;label=169;break;}
 case 78: 
 var $len_off_i_i=((($30)-(8))|0);
 var $269=($len_off_i_i>>>0)<337;
 var $270=(((($len_off_i_i>>>0))%(56))&-1);
 var $271=($270|0)==0;
 var $or_cond_i_i=$269&$271;
 if($or_cond_i_i){label=79;break;}else{var $_0=1;label=169;break;}
 case 79: 
 var $273=(($44+((($i_01_i_i)*(232))&-1)+40)|0);
 var $ld$48$0=(($273)|0);
 var $274$0=HEAP32[(($ld$48$0)>>2)];
 var $ld$49$1=(($273+4)|0);
 var $274$1=HEAP32[(($ld$49$1)>>2)];
 var $$etemp$50$0=5;
 var $$etemp$50$1=0;
 var $275$0=_i64Add($274$0,$274$1,$$etemp$50$0,$$etemp$50$1);var $275$1=tempRet0;
 var $ld$51$0=13552;
 var $276$0=HEAP32[(($ld$51$0)>>2)];
 var $ld$52$1=13556;
 var $276$1=HEAP32[(($ld$52$1)>>2)];
 var $277=(($275$1>>>0) > ($276$1>>>0)) | (((($275$1>>>0) == ($276$1>>>0) & ($275$0>>>0) >  ($276$0>>>0))));
 if($277){label=80;break;}else{var $_0=1;label=169;break;}
 case 80: 
 var $279=$contents_i_i;
 var $$etemp$53$0=344;
 var $$etemp$53$1=0;

 assert($30 % 1 === 0);(_memcpy($279, $27, $30)|0);
 var $280=(($contents_i_i)|0);
 var $ld$54$0=(($280)|0);
 var $281$0=HEAP32[(($ld$54$0)>>2)];
 var $ld$55$1=(($280+4)|0);
 var $281$1=HEAP32[(($ld$55$1)>>2)];
 var $282=HEAP32[(($43)>>2)];
 var $283=(($282+((($i_01_i_i)*(232))&-1)+32)|0);
 var $ld$56$0=(($283)|0);
 var $284$0=HEAP32[(($ld$56$0)>>2)];
 var $ld$57$1=(($283+4)|0);
 var $284$1=HEAP32[(($ld$57$1)>>2)];
 var $285=(($281$0|0) == ($284$0|0)) & (($281$1|0) == ($284$1|0));
 if($285){label=81;break;}else{var $_0=1;label=169;break;}
 case 81: 
 var $287=(((($len_off_i_i>>>0))/(56))&-1);
 var $288=(($ippts_send_i_i+24)|0);
 var $st$58$0=(($288)|0);
 HEAP32[(($st$58$0)>>2)]=$276$0;
 var $st$59$1=(($288+4)|0);
 HEAP32[(($st$59$1)>>2)]=$276$1;
 var $289=$287&65535;
 var $290=($289|0)==0;
 var $_pre_i_i=(($10+640)|0);
 if($290){var $i_0_lcssa_i_i=0;var $371=$282;label=112;break;}else{var $i_08_i_i=0;label=82;break;}
 case 82: 
 var $i_08_i_i;
 var $291=(($contents_i_i+8+((($i_08_i_i)*(56))&-1))|0);
 var $_03_i_i38_i=32;var $l_04_i_i37_i=$13;var $r_05_i_i36_i=$291;label=83;break;
 case 83: 
 var $r_05_i_i36_i;
 var $l_04_i_i37_i;
 var $_03_i_i38_i;
 var $292=HEAP8[($l_04_i_i37_i)];
 var $293=HEAP8[($r_05_i_i36_i)];
 var $294=(($292<<24)>>24)==(($293<<24)>>24);
 if($294){label=84;break;}else{label=85;break;}
 case 84: 
 var $296=((($_03_i_i38_i)-(1))|0);
 var $297=(($l_04_i_i37_i+1)|0);
 var $298=(($r_05_i_i36_i+1)|0);
 var $299=($296|0)==0;
 if($299){label=110;break;}else{var $_03_i_i38_i=$296;var $l_04_i_i37_i=$297;var $r_05_i_i36_i=$298;label=83;break;}
 case 85: 
 var $ld$60$0=13552;
 var $300$0=HEAP32[(($ld$60$0)>>2)];
 var $ld$61$1=13556;
 var $300$1=HEAP32[(($ld$61$1)>>2)];
 var $i_01_i_i9_i=0;var $j_02_i_i8_i=0;label=86;break;
 case 86: 
 var $j_02_i_i8_i;
 var $i_01_i_i9_i;
 var $301=(($10+72+($i_01_i_i9_i<<6)+56)|0);
 var $ld$62$0=(($301)|0);
 var $302$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($301+4)|0);
 var $302$1=HEAP32[(($ld$63$1)>>2)];
 var $$etemp$64$0=30;
 var $$etemp$64$1=0;
 var $303$0=_i64Add($302$0,$302$1,$$etemp$64$0,$$etemp$64$1);var $303$1=tempRet0;
 var $304=(($303$1>>>0) > ($300$1>>>0)) | (((($303$1>>>0) == ($300$1>>>0) & ($303$0>>>0) >  ($300$0>>>0))));
 if($304){label=88;break;}else{label=87;break;}
 case 87: 
 var $306=((($j_02_i_i8_i)+(1))|0);
 var $j_1_i_i19_i=$306;label=95;break;
 case 88: 
 var $308=(($10+72+($i_01_i_i9_i<<6))|0);
 var $_03_i_i33_i=32;var $l_04_i_i32_i=$308;var $r_05_i_i31_i=$291;label=89;break;
 case 89: 
 var $r_05_i_i31_i;
 var $l_04_i_i32_i;
 var $_03_i_i33_i;
 var $309=HEAP8[($l_04_i_i32_i)];
 var $310=HEAP8[($r_05_i_i31_i)];
 var $311=(($309<<24)>>24)==(($310<<24)>>24);
 if($311){label=90;break;}else{var $i_03_i_i11_i=0;label=92;break;}
 case 90: 
 var $313=((($_03_i_i33_i)-(1))|0);
 var $314=(($l_04_i_i32_i+1)|0);
 var $315=(($r_05_i_i31_i+1)|0);
 var $316=($313|0)==0;
 if($316){label=110;break;}else{var $_03_i_i33_i=$313;var $l_04_i_i32_i=$314;var $r_05_i_i31_i=$315;label=89;break;}
 case 91: 
 var $318=($337>>>0)<32;
 if($318){var $i_03_i_i11_i=$337;label=92;break;}else{var $_0_i2_i_i=0;label=94;break;}
 case 92: 
 var $i_03_i_i11_i;
 var $319=(($10+4+$i_03_i_i11_i)|0);
 var $320=HEAP8[($319)];
 var $321=(($320<<24)>>24);
 var $322=(($10+72+($i_01_i_i9_i<<6)+$i_03_i_i11_i)|0);
 var $323=HEAP8[($322)];
 var $324=(($323<<24)>>24);
 var $325=((($321)-($324))|0);
 var $ispos_i_i12_i=($325|0)>-1;
 var $neg_i_i13_i=(((-$325))|0);
 var $326=($ispos_i_i12_i?$325:$neg_i_i13_i);
 var $327=(($contents_i_i+8+((($i_08_i_i)*(56))&-1)+$i_03_i_i11_i)|0);
 var $328=HEAP8[($327)];
 var $329=(($328<<24)>>24);
 var $330=((($321)-($329))|0);
 var $ispos1_i_i14_i=($330|0)>-1;
 var $neg2_i_i15_i=(((-$330))|0);
 var $331=($ispos1_i_i14_i?$330:$neg2_i_i15_i);
 var $332=$326&255;
 var $333=$331&255;
 var $334=($332>>>0)<($333>>>0);
 if($334){var $_0_i2_i_i=0;label=94;break;}else{label=93;break;}
 case 93: 
 var $336=($332>>>0)>($333>>>0);
 var $337=((($i_03_i_i11_i)+(1))|0);
 if($336){var $_0_i2_i_i=1;label=94;break;}else{label=91;break;}
 case 94: 
 var $_0_i2_i_i;
 var $_j_0_i_i17_i=((($_0_i2_i_i)+($j_02_i_i8_i))|0);
 var $j_1_i_i19_i=$_j_0_i_i17_i;label=95;break;
 case 95: 
 var $j_1_i_i19_i;
 var $339=((($i_01_i_i9_i)+(1))|0);
 var $340=($339>>>0)<6;
 if($340){var $i_01_i_i9_i=$339;var $j_02_i_i8_i=$j_1_i_i19_i;label=86;break;}else{label=96;break;}
 case 96: 
 var $341=($j_1_i_i19_i|0)>0;
 if($341){label=97;break;}else{label=110;break;}
 case 97: 
 var $343=HEAP32[(($40)>>2)];
 var $344=($343|0)==0;
 if($344){label=104;break;}else{label=98;break;}
 case 98: 
 var $345=HEAP32[(($43)>>2)];
 var $i_01_i3_i_i=0;label=100;break;
 case 99: 
 var $347=((($i_01_i3_i_i)+(1))|0);
 var $348=($347>>>0)<($343>>>0);
 if($348){var $i_01_i3_i_i=$347;label=100;break;}else{label=104;break;}
 case 100: 
 var $i_01_i3_i_i;
 var $349=(($345+((($i_01_i3_i_i)*(232))&-1))|0);
 var $_03_i_i28_i=32;var $l_04_i_i27_i=$349;var $r_05_i_i26_i=$291;label=101;break;
 case 101: 
 var $r_05_i_i26_i;
 var $l_04_i_i27_i;
 var $_03_i_i28_i;
 var $350=HEAP8[($l_04_i_i27_i)];
 var $351=HEAP8[($r_05_i_i26_i)];
 var $352=(($350<<24)>>24)==(($351<<24)>>24);
 if($352){label=102;break;}else{label=99;break;}
 case 102: 
 var $354=((($_03_i_i28_i)-(1))|0);
 var $355=(($l_04_i_i27_i+1)|0);
 var $356=(($r_05_i_i26_i+1)|0);
 var $357=($354|0)==0;
 if($357){label=103;break;}else{var $_03_i_i28_i=$354;var $l_04_i_i27_i=$355;var $r_05_i_i26_i=$356;label=101;break;}
 case 103: 
 var $358=($i_01_i3_i_i|0)==-1;
 if($358){label=104;break;}else{var $peern_05_i_i=$i_01_i3_i_i;label=105;break;}
 case 104: 
 var $359=_addpeer($10,$291);
 var $360=($359|0)==-1;
 if($360){label=110;break;}else{var $peern_05_i_i=$359;label=105;break;}
 case 105: 
 var $peern_05_i_i;
 var $361=(($contents_i_i+8+((($i_08_i_i)*(56))&-1)+32)|0);
 var $362=(($361)|0);
 var $363=HEAP8[($362)];
 if((($363<<24)>>24)==2){ label=106;break;}else if((($363<<24)>>24)==10){ label=107;break;}else{label=108;break;}
 case 106: 
 HEAP8[($362)]=2;
 label=108;break;
 case 107: 
 HEAP8[($362)]=10;
 label=108;break;
 case 108: 
 _send_getnodes($10,$361,$peern_05_i_i);
 var $366=HEAP32[(($_pre_i_i)>>2)];
 var $367=($366|0)==0;
 if($367){label=110;break;}else{label=109;break;}
 case 109: 
 assert(24 % 1 === 0);HEAP32[(($265)>>2)]=HEAP32[(($362)>>2)];HEAP32[((($265)+(4))>>2)]=HEAP32[((($362)+(4))>>2)];HEAP32[((($265)+(8))>>2)]=HEAP32[((($362)+(8))>>2)];HEAP32[((($265)+(12))>>2)]=HEAP32[((($362)+(12))>>2)];HEAP32[((($265)+(16))>>2)]=HEAP32[((($362)+(16))>>2)];HEAP32[((($265)+(20))>>2)]=HEAP32[((($362)+(20))>>2)];
 _Assoc_add_entry($366,$291,$ippts_send_i_i,0,0);
 label=110;break;
 case 110: 
 var $369=((($i_08_i_i)+(1))|0);
 var $370=($369>>>0)<($289>>>0);
 if($370){var $i_08_i_i=$369;label=82;break;}else{label=111;break;}
 case 111: 
 var $_pre39=HEAP32[(($43)>>2)];
 var $i_0_lcssa_i_i=$289;var $371=$_pre39;label=112;break;
 case 112: 
 var $371;
 var $i_0_lcssa_i_i;
 var $372=(($371+((($i_01_i_i)*(232))&-1))|0);
 assert(24 % 1 === 0);HEAP32[(($21)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($21)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($21)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];HEAP32[((($21)+(12))>>2)]=HEAP32[((($22)+(12))>>2)];HEAP32[((($21)+(16))>>2)]=HEAP32[((($22)+(16))>>2)];HEAP32[((($21)+(20))>>2)]=HEAP32[((($22)+(20))>>2)];
 var $i_09_i_i=0;label=115;break;
 case 113: 
 var $374=((($i_09_i_i)+(1))|0);
 var $375=($374>>>0)<6;
 if($375){var $i_09_i_i=$374;label=115;break;}else{label=114;break;}
 case 114: 
 var $ld$65$0=13552;
 var $376$0=HEAP32[(($ld$65$0)>>2)];
 var $ld$66$1=13556;
 var $376$1=HEAP32[(($ld$66$1)>>2)];
 var $i_17_i_i=0;label=120;break;
 case 115: 
 var $i_09_i_i;
 var $378=(($10+72+($i_09_i_i<<6))|0);
 var $_03_i_i_i_i=32;var $l_04_i_i_i_i=$378;var $r_05_i_i_i_i=$372;label=116;break;
 case 116: 
 var $r_05_i_i_i_i;
 var $l_04_i_i_i_i;
 var $_03_i_i_i_i;
 var $379=HEAP8[($l_04_i_i_i_i)];
 var $380=HEAP8[($r_05_i_i_i_i)];
 var $381=(($379<<24)>>24)==(($380<<24)>>24);
 if($381){label=117;break;}else{label=113;break;}
 case 117: 
 var $383=((($_03_i_i_i_i)-(1))|0);
 var $384=(($l_04_i_i_i_i+1)|0);
 var $385=(($r_05_i_i_i_i+1)|0);
 var $386=($383|0)==0;
 if($386){label=118;break;}else{var $_03_i_i_i_i=$383;var $l_04_i_i_i_i=$384;var $r_05_i_i_i_i=$385;label=116;break;}
 case 118: 
 var $ld$67$0=13552;
 var $387$0=HEAP32[(($ld$67$0)>>2)];
 var $ld$68$1=13556;
 var $387$1=HEAP32[(($ld$68$1)>>2)];
 var $388=(($10+72+($i_09_i_i<<6)+56)|0);
 var $st$69$0=(($388)|0);
 HEAP32[(($st$69$0)>>2)]=$387$0;
 var $st$70$1=(($388+4)|0);
 HEAP32[(($st$70$1)>>2)]=$387$1;
 var $_0_i_i=0;label=128;break;
 case 119: 
 var $390=($395>>>0)<6;
 if($390){var $i_17_i_i=$395;label=120;break;}else{var $i_23_i_i=0;label=122;break;}
 case 120: 
 var $i_17_i_i;
 var $391=(($10+72+($i_17_i_i<<6)+56)|0);
 var $ld$71$0=(($391)|0);
 var $392$0=HEAP32[(($ld$71$0)>>2)];
 var $ld$72$1=(($391+4)|0);
 var $392$1=HEAP32[(($ld$72$1)>>2)];
 var $$etemp$73$0=30;
 var $$etemp$73$1=0;
 var $393$0=_i64Add($392$0,$392$1,$$etemp$73$0,$$etemp$73$1);var $393$1=tempRet0;
 var $394=(($393$1>>>0) > ($376$1>>>0)) | (((($393$1>>>0) == ($376$1>>>0) & ($393$0>>>0) >  ($376$0>>>0))));
 var $395=((($i_17_i_i)+(1))|0);
 if($394){label=119;break;}else{label=121;break;}
 case 121: 
 var $397=(($10+72+($i_17_i_i<<6))|0);
 assert(32 % 1 === 0);(_memcpy($397, $372, 32)|0);
 var $398=(($10+72+($i_17_i_i<<6)+32)|0);
 assert(24 % 1 === 0);(_memcpy($398, $21, 24)|0);
 var $st$74$0=(($391)|0);
 HEAP32[(($st$74$0)>>2)]=$376$0;
 var $st$75$1=(($391+4)|0);
 HEAP32[(($st$75$1)>>2)]=$376$1;
 var $_0_i_i=0;label=128;break;
 case 122: 
 var $i_23_i_i;
 var $i_03_i_i20_i=0;label=124;break;
 case 123: 
 var $400=($420>>>0)<32;
 if($400){var $i_03_i_i20_i=$420;label=124;break;}else{label=127;break;}
 case 124: 
 var $i_03_i_i20_i;
 var $402=(($10+4+$i_03_i_i20_i)|0);
 var $403=HEAP8[($402)];
 var $404=(($403<<24)>>24);
 var $405=(($10+72+($i_23_i_i<<6)+$i_03_i_i20_i)|0);
 var $406=HEAP8[($405)];
 var $407=(($406<<24)>>24);
 var $408=((($404)-($407))|0);
 var $ispos_i_i21_i=($408|0)>-1;
 var $neg_i_i22_i=(((-$408))|0);
 var $409=($ispos_i_i21_i?$408:$neg_i_i22_i);
 var $410=(($371+((($i_01_i_i)*(232))&-1)+$i_03_i_i20_i)|0);
 var $411=HEAP8[($410)];
 var $412=(($411<<24)>>24);
 var $413=((($404)-($412))|0);
 var $ispos1_i_i23_i=($413|0)>-1;
 var $neg2_i_i24_i=(((-$413))|0);
 var $414=($ispos1_i_i23_i?$413:$neg2_i_i24_i);
 var $415=$409&255;
 var $416=$414&255;
 var $417=($415>>>0)<($416>>>0);
 if($417){label=127;break;}else{label=125;break;}
 case 125: 
 var $419=($415>>>0)>($416>>>0);
 var $420=((($i_03_i_i20_i)+(1))|0);
 if($419){label=126;break;}else{label=123;break;}
 case 126: 
 var $422=(($10+72+($i_23_i_i<<6))|0);
 assert(32 % 1 === 0);(_memcpy($422, $372, 32)|0);
 var $423=(($10+72+($i_23_i_i<<6)+32)|0);
 assert(24 % 1 === 0);(_memcpy($423, $21, 24)|0);
 var $424=(($10+72+($i_23_i_i<<6)+56)|0);
 var $st$76$0=(($424)|0);
 HEAP32[(($st$76$0)>>2)]=$376$0;
 var $st$77$1=(($424+4)|0);
 HEAP32[(($st$77$1)>>2)]=$376$1;
 var $_0_i_i=0;label=128;break;
 case 127: 
 var $426=((($i_23_i_i)+(1))|0);
 var $427=($426>>>0)<6;
 if($427){var $i_23_i_i=$426;label=122;break;}else{var $_0_i_i=-1;label=128;break;}
 case 128: 
 var $_0_i_i;
 var $428=HEAP32[(($_pre_i_i)>>2)];
 var $429=($428|0)==0;
 if($429){var $_0=0;label=169;break;}else{label=129;break;}
 case 129: 
 var $431=HEAP32[(($43)>>2)];
 var $432=(($431+((($i_01_i_i)*(232))&-1)+48)|0);
 assert(24 % 1 === 0);(_memcpy($265, $432, 24)|0);
 var $433=(($431+((($i_01_i_i)*(232))&-1)+40)|0);
 var $ld$78$0=(($433)|0);
 var $434$0=HEAP32[(($ld$78$0)>>2)];
 var $ld$79$1=(($433+4)|0);
 var $434$1=HEAP32[(($ld$79$1)>>2)];
 var $st$80$0=(($288)|0);
 HEAP32[(($st$80$0)>>2)]=$434$0;
 var $st$81$1=(($288+4)|0);
 HEAP32[(($st$81$1)>>2)]=$434$1;
 assert(24 % 1 === 0);(_memcpy($266, $22, 24)|0);
 var $435=(($contents_i_i+8+((($i_0_lcssa_i_i)*(56))&-1))|0);
 var $436=($_0_i_i|0)==0;
 var $437=($436&1);
 _Assoc_add_entry($428,$435,$ippts_send_i_i,$ipp_recv_i_i,$437);
 var $_0=0;label=169;break;
 case 130: 
 var $439=($30>>>0)<37;
 if($439){var $_0=1;label=169;break;}else{var $i_01_i_i22_i=0;label=132;break;}
 case 131: 
 var $441=((($i_01_i_i22_i)+(1))|0);
 var $442=($441>>>0)<($41>>>0);
 if($442){var $i_01_i_i22_i=$441;label=132;break;}else{label=136;break;}
 case 132: 
 var $i_01_i_i22_i;
 var $443=(($44+((($i_01_i_i22_i)*(232))&-1))|0);
 var $_03_i_i13_i=32;var $l_04_i_i12_i=$443;var $r_05_i_i11_i=$27;label=133;break;
 case 133: 
 var $r_05_i_i11_i;
 var $l_04_i_i12_i;
 var $_03_i_i13_i;
 var $444=HEAP8[($l_04_i_i12_i)];
 var $445=HEAP8[($r_05_i_i11_i)];
 var $446=(($444<<24)>>24)==(($445<<24)>>24);
 if($446){label=134;break;}else{label=131;break;}
 case 134: 
 var $448=((($_03_i_i13_i)-(1))|0);
 var $449=(($l_04_i_i12_i+1)|0);
 var $450=(($r_05_i_i11_i+1)|0);
 var $451=($448|0)==0;
 if($451){label=135;break;}else{var $_03_i_i13_i=$448;var $l_04_i_i12_i=$449;var $r_05_i_i11_i=$450;label=133;break;}
 case 135: 
 var $452=($i_01_i_i22_i|0)==-1;
 if($452){label=136;break;}else{var $peernum_011_i_i=$i_01_i_i22_i;var $459=$44;label=139;break;}
 case 136: 
 var $453=(($data_i+36)|0);
 var $454=HEAP8[($453)];
 var $455=(($454<<24)>>24)==24;
 if($455){var $_0=1;label=169;break;}else{label=137;break;}
 case 137: 
 var $457=_addpeer($10,$27);
 var $458=($457|0)==-1;
 if($458){var $_0=1;label=169;break;}else{label=138;break;}
 case 138: 
 var $_pre41=HEAP32[(($43)>>2)];
 var $peernum_011_i_i=$457;var $459=$_pre41;label=139;break;
 case 139: 
 var $459;
 var $peernum_011_i_i;
 var $460=(($459+((($peernum_011_i_i)*(232))&-1)+222)|0);
 var $461=HEAP8[($460)];
 var $462=(($461<<24)>>24)==0;
 if($462){label=140;break;}else{var $_0=1;label=169;break;}
 case 140: 
 var $ld$82$0=13552;
 var $464$0=HEAP32[(($ld$82$0)>>2)];
 var $ld$83$1=13556;
 var $464$1=HEAP32[(($ld$83$1)>>2)];
 var $465=(($459+((($peernum_011_i_i)*(232))&-1)+72)|0);
 var $st$84$0=(($465)|0);
 HEAP32[(($st$84$0)>>2)]=$464$0;
 var $st$85$1=(($465+4)|0);
 HEAP32[(($st$85$1)>>2)]=$464$1;
 var $466=(($data_i+32)|0);
 var $467=$466;
 var $468=HEAP32[(($467)>>2)];
 var $469=_htonl($468);
 var $470=(($459+((($peernum_011_i_i)*(232))&-1)+88)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=($471|0)==0;
 if($472){label=141;break;}else{label=142;break;}
 case 141: 
 HEAP32[(($470)>>2)]=$469;
 label=143;break;
 case 142: 
 var $475=((($469)-($471))|0);
 var $476=($475>>>0)>64;
 var $477=($469|0)==($471|0);
 var $or_cond_i27_i=$476|$477;
 if($or_cond_i27_i){var $_0=1;label=169;break;}else{label=143;break;}
 case 143: 
 HEAP32[(($470)>>2)]=$469;
 var $479=(($data_i+37)|0);
 var $480=((($30)+(65499))|0);
 var $481=(($480)&65535);
 var $482=(($data_i+36)|0);
 var $483=HEAP8[($482)];
 var $484=($483&255);
 switch(($484|0)){case 0:{ label=144;break;}case 16:{ label=146;break;}case 24:{ label=153;break;}case 48:{ label=156;break;}case 64:{ label=163;break;}case 63:{ label=165;break;}default:{var $_0=1;label=169;break;}}break;
 case 144: 
 var $486=$480&65535;
 var $487=($486|0)==0;
 if($487){label=145;break;}else{var $_0=1;label=169;break;}
 case 145: 
 var $488=(($459+((($peernum_011_i_i)*(232))&-1)+80)|0);
 var $st$86$0=(($488)|0);
 HEAP32[(($st$86$0)>>2)]=$464$0;
 var $st$87$1=(($488+4)|0);
 HEAP32[(($st$87$1)>>2)]=$464$1;
 label=167;break;
 case 146: 
 var $490=$480&65535;
 var $491=($490|0)==32;
 if($491){label=147;break;}else{var $_0=1;label=169;break;}
 case 147: 
 var $492=_addpeer($10,$479);
 var $493=(($10+496)|0);
 var $494=(($10+624)|0);
 var $495=HEAP16[(($494)>>1)];
 var $496=($495&65535)>128;
 if($496){label=152;break;}else{label=148;break;}
 case 148: 
 var $498=($495&65535);
 var $499=((($498)+(37))|0);
 var $500=($499>>>0)>1024;
 if($500){label=152;break;}else{label=149;break;}
 case 149: 
 var $502=(($packet_i_i_i_i)|0);
 var $$etemp$88$0=1024;
 var $$etemp$88$1=0;

 var $503=(($10+460)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=((($504)+(1))|0);
 var $506=($505|0)==0;
 var $__i_i_i_i_i=($506?1:$505);
 HEAP32[(($503)>>2)]=$__i_i_i_i_i;
 var $507=_htonl($__i_i_i_i_i);
 assert(32 % 1 === 0);(_memcpy($502, $13, 32)|0);
 var $508=(($packet_i_i_i_i+32)|0);
 var $509=$508;
 tempBigInt=$507;HEAP8[($509)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($509)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($509)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($509)+(3))|0)]=tempBigInt&0xff;
 var $510=(($495<<16)>>16)==0;
 if($510){label=151;break;}else{label=150;break;}
 case 150: 
 var $512=(($packet_i_i_i_i+37)|0);
 assert($498 % 1 === 0);(_memcpy($512, $493, $498)|0);
 label=151;break;
 case 151: 
 var $514=(($packet_i_i_i_i+36)|0);
 HEAP8[($514)]=48;
 var $515=(($499)&65535);
 var $516=_sendto_allpeers($10,$502,$515);
 var $$etemp$89$0=1024;
 var $$etemp$89$1=0;

 label=152;break;
 case 152: 
 var $ld$90$0=13552;
 var $517$0=HEAP32[(($ld$90$0)>>2)];
 var $ld$91$1=13556;
 var $517$1=HEAP32[(($ld$91$1)>>2)];
 var $$etemp$92$0=-165;
 var $$etemp$92$1=-1;
 var $518$0=_i64Add($517$0,$517$1,$$etemp$92$0,$$etemp$92$1);var $518$1=tempRet0;
 var $519=(($10+632)|0);
 var $st$93$0=(($519)|0);
 HEAP32[(($st$93$0)>>2)]=$518$0;
 var $st$94$1=(($519+4)|0);
 HEAP32[(($st$94$1)>>2)]=$518$1;
 label=167;break;
 case 153: 
 var $521=$480&65535;
 var $522=($521|0)==0;
 if($522){label=154;break;}else{var $_0=1;label=169;break;}
 case 154: 
 var $523=HEAP32[(($40)>>2)];
 var $524=($523>>>0)>($peernum_011_i_i>>>0);
 if($524){label=155;break;}else{label=167;break;}
 case 155: 
 HEAP8[($460)]=1;
 var $526=HEAP32[(($43)>>2)];
 var $527=(($526+((($peernum_011_i_i)*(232))&-1)+224)|0);
 var $st$95$0=(($527)|0);
 HEAP32[(($st$95$0)>>2)]=$464$0;
 var $st$96$1=(($527+4)|0);
 HEAP32[(($st$96$1)>>2)]=$464$1;
 label=167;break;
 case 156: 
 var $529=$480&65535;
 var $530=($529>>>0)>128;
 var $531=($529|0)==0;
 var $or_cond1_i_i=$530|$531;
 if($or_cond1_i_i){var $_0=1;label=169;break;}else{label=157;break;}
 case 157: 
 var $532=($481&65535)>128;
 var $533=(($481<<16)>>16)==0;
 var $or_cond_i_i_i=$532|$533;
 if($or_cond_i_i_i){label=167;break;}else{label=158;break;}
 case 158: 
 var $535=(($459+((($peernum_011_i_i)*(232))&-1)+220)|0);
 var $536=HEAP16[(($535)>>1)];
 var $537=(($536<<16)>>16)==(($481<<16)>>16);
 var $538=(($459+((($peernum_011_i_i)*(232))&-1)+92)|0);
 if($537){var $_03_i_i6=$529;var $l_04_i_i5=$538;var $r_05_i_i4=$479;label=159;break;}else{label=161;break;}
 case 159: 
 var $r_05_i_i4;
 var $l_04_i_i5;
 var $_03_i_i6;
 var $539=HEAP8[($l_04_i_i5)];
 var $540=HEAP8[($r_05_i_i4)];
 var $541=(($539<<24)>>24)==(($540<<24)>>24);
 if($541){label=160;break;}else{label=161;break;}
 case 160: 
 var $543=((($_03_i_i6)-(1))|0);
 var $544=(($l_04_i_i5+1)|0);
 var $545=(($r_05_i_i4+1)|0);
 var $546=($543|0)==0;
 if($546){label=167;break;}else{var $_03_i_i6=$543;var $l_04_i_i5=$544;var $r_05_i_i4=$545;label=159;break;}
 case 161: 
 assert($529 % 1 === 0);(_memcpy($538, $479, $529)|0);
 var $547=HEAP32[(($43)>>2)];
 var $548=(($547+((($peernum_011_i_i)*(232))&-1)+220)|0);
 HEAP16[(($548)>>1)]=$481;
 var $549=(($10+480)|0);
 var $550=HEAP32[(($549)>>2)];
 var $551=($550|0)==0;
 if($551){label=167;break;}else{label=162;break;}
 case 162: 
 var $553=(($10+484)|0);
 var $554=HEAP32[(($553)>>2)];
 FUNCTION_TABLE[$550]($10,$peernum_011_i_i,2,$554);
 label=167;break;
 case 163: 
 var $556=(($10+464)|0);
 var $557=HEAP32[(($556)>>2)];
 var $558=($557|0)==0;
 if($558){label=167;break;}else{label=164;break;}
 case 164: 
 var $559=(($10+468)|0);
 var $560=HEAP32[(($559)>>2)];
 FUNCTION_TABLE[$557]($10,$peernum_011_i_i,$479,$481,$560);
 label=167;break;
 case 165: 
 var $562=(($10+472)|0);
 var $563=HEAP32[(($562)>>2)];
 var $564=($563|0)==0;
 if($564){label=167;break;}else{label=166;break;}
 case 166: 
 var $565=(($10+476)|0);
 var $566=HEAP32[(($565)>>2)];
 FUNCTION_TABLE[$563]($10,$peernum_011_i_i,$479,$481,$566);
 label=167;break;
 case 167: 
 var $567=(($30)&65535);
 var $568=_sendto_allpeers($10,$27,$567);
 var $_0=0;label=169;break;
 case 168: 
 var $569=((($i_02)+(1))|0);
 var $570=($569>>>0)<($4>>>0);
 if($570){var $i_02=$569;label=4;break;}else{var $_0=1;label=169;break;}
 case 169: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _do_friends($m){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+6608)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(8);
 var $3=(sp)+(16);
 var $zero_i26_sroa_0=(sp)+(40);
 var $temp_plain_i_i=(sp)+(64);
 var $temp_encrypted_i_i=(sp)+(1120);
 var $a_i1_i_i=(sp)+(2160);
 var $a_i_i_i=(sp)+(2168);
 var $ip_port1_i_i=(sp)+(2176);
 var $_sroa_10_i_i=(sp)+(2200);
 var $_sroa_12_i_i=(sp)+(2216);
 var $_sroa_17_i_i=(sp)+(2232);
 var $_sroa_21_i_i=(sp)+(3264);
 var $ip_port2_i=(sp)+(3272);
 var $zero_i_i_sroa_0=(sp)+(3296);
 var $temp_i_i=(sp)+(3320);
 var $nonce_i_i=(sp)+(3376);
 var $c_ip_i=(sp)+(3400);
 var $friendip4=(sp)+(3424);
 var $temp_i=(sp)+(3448);
 var $packet_i_i=(sp)+(4472);
 var $zero_i_sroa_0=(sp)+(5496);
 var $typing_i=(sp)+(5520);
 var $4=(sp)+(5528);
 var $temp=(sp)+(5536);
 var $friendip_sroa_0=(sp)+(6560);
 var $_sroa_0=(sp)+(6584);
 var $5=(($temp)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $ld$1$0=13552;
 var $6$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=13556;
 var $6$1=HEAP32[(($ld$2$1)>>2)];
 var $7=(($m+2228)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=251;break;}else{label=2;break;}
 case 2: 
 var $10=(($m+2224)|0);
 var $11=(($m+20)|0);
 var $12=(($m+4)|0);
 var $13=(($m+1208)|0);
 var $14=(($m+1080)|0);
 var $15=(($m+1210)|0);
 var $16=(($m+2218)|0);
 var $17=(($m+2220)|0);
 var $18=(($temp+1)|0);
 var $19=(($m+2272)|0);
 var $20=(($m+2276)|0);
 var $21=(($m+2280)|0);
 var $22=(($m+2316)|0);
 var $23=(($m+2288)|0);
 var $24=(($m+2292)|0);
 var $25=(($m+2296)|0);
 var $26=(($m+2300)|0);
 var $27=(($temp+5)|0);
 var $28=(($m+2256)|0);
 var $29=(($m+2260)|0);
 var $30=(($m+2264)|0);
 var $31=(($m+2268)|0);
 var $32=(($m+2304)|0);
 var $33=$18;
 var $34=(($m+2308)|0);
 var $35=(($m+2336)|0);
 var $36=(($m+2340)|0);
 var $37=(($m+2244)|0);
 var $38=(($m+2240)|0);
 var $39=(($temp+33)|0);
 var $40=(($temp+2)|0);
 var $41=$40;
 var $42=(($temp+10)|0);
 var $43=(($m+2368)|0);
 var $44=(($m+2372)|0);
 var $45=(($temp+3)|0);
 var $46=(($temp+4)|0);
 var $47=(($packet_i_i)|0);
 var $48=(($packet_i_i+1)|0);
 var $49=(($packet_i_i+2)|0);
 var $50=(($m+2376)|0);
 var $51=(($m+2380)|0);
 var $52=(($m+2384)|0);
 var $53=(($m+2388)|0);
 var $54=(($m+2392)|0);
 var $55=(($m+2396)|0);
 var $56=(($temp_i)|0);
 var $57=(($temp_i+1)|0);
 var $58=$57;
 var $59=(($temp_i+5)|0);
 var $60=(($friendip_sroa_0)|0);
 var $61=(($friendip4)|0);
 var $62=(($friendip4+20)|0);
 var $63=(($friendip4+22)|0);
 var $64=(($ip_port2_i)|0);
 var $65=(($c_ip_i)|0);
 var $66=(($ip_port1_i_i)|0);
 var $67=$_sroa_10_i_i;
 var $68=$_sroa_12_i_i;
 var $69=(($_sroa_17_i_i)|0);
 var $70=(($_sroa_21_i_i)|0);
 var $71=(($nonce_i_i)|0);
 var $72=(($temp_i_i)|0);
 var $73=(($temp_i_i+24)|0);
 var $74=(($temp_i+57)|0);
 var $75=(($temp_i+33)|0);
 var $76=$a_i_i_i;
 var $77=(($a_i_i_i)|0);
 var $78=(($a_i_i_i+4)|0);
 var $79=$a_i1_i_i;
 var $80=(($a_i1_i_i)|0);
 var $81=(($a_i1_i_i+4)|0);
 var $82=(($ip_port1_i_i+20)|0);
 var $83=(($ip_port1_i_i)|0);
 var $84=(($zero_i_i_sroa_0)|0);
 var $85=(($c_ip_i+20)|0);
 var $86=(($c_ip_i)|0);
 var $87=(($friendip4)|0);
 var $88=(($temp_plain_i_i)|0);
 var $89=(($temp_encrypted_i_i)|0);
 var $90=(($temp_encrypted_i_i+16)|0);
 var $91=(($temp_plain_i_i+32)|0);
 var $92=(($temp_i+32)|0);
 var $93=$92;
 var $94=(($temp_i+37)|0);
 var $95=(($temp_i+36)|0);
 var $96=(($zero_i_sroa_0)|0);
 var $97=(($zero_i26_sroa_0)|0);
 var $98=(($_sroa_0)|0);
 var $99=(($3)|0);
 var $100=(($3+20)|0);
 var $101=(($3+22)|0);
 var $102=$2;
 var $tmpcast_i=$2;
 var $103=$1;
 var $tmpcast_i30=$1;
 var $104=$46;
 var $i_019=0;var $friendip_sroa_1_0=0;var $friendip_sroa_2_0=0;label=3;break;
 case 3: 
 var $friendip_sroa_2_0;
 var $friendip_sroa_1_0;
 var $i_019;
 var $105=HEAP32[(($10)>>2)];
 var $106=(($105+((($i_019)*(14072))&-1)+52)|0);
 var $107=HEAP8[($106)];
 var $108=(($107<<24)>>24)==1;
 if($108){label=4;break;}else{var $149=$105;label=16;break;}
 case 4: 
 var $110=HEAP32[(($11)>>2)];
 var $111=(($105+((($i_019)*(14072))&-1))|0);
 var $112=(($105+((($i_019)*(14072))&-1)+1228)|0);
 var $113=HEAP16[(($112)>>1)];
 var $114=($113&65535);
 var $115=((($114)+(4))|0);
 var $116=($115>>>0)>1024;
 if($116){var $149=$105;label=16;break;}else{label=5;break;}
 case 5: 
 var $118=(($105+((($i_019)*(14072))&-1)+1240)|0);
 var $119=(($105+((($i_019)*(14072))&-1)+53)|0);
 var $120=HEAP32[(($118)>>2)];
 var $$etemp$3$0=1024;
 var $$etemp$3$1=0;

 HEAP8[($56)]=32;
 tempBigInt=$120;HEAP8[($58)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($58)+(3))|0)]=tempBigInt&0xff;
 assert($114 % 1 === 0);(_memcpy($59, $119, $114)|0);
 var $121=(($110+12)|0);
 var $122=HEAP16[(($121)>>1)];
 var $123=(($122<<16)>>16)==0;
 if($123){var $149=$105;label=16;break;}else{label=6;break;}
 case 6: 
 var $124=(($110+8)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($122&65535);
 var $i_01_i_i=0;label=7;break;
 case 7: 
 var $i_01_i_i;
 var $128=(($125+((($i_01_i_i)*(2600))&-1))|0);
 var $129=HEAP8[($128)];
 var $130=(($129<<24)>>24)==0;
 if($130){label=11;break;}else{label=8;break;}
 case 8: 
 var $132=(($125+((($i_01_i_i)*(2600))&-1)+35)|0);
 var $_03_i_i_i=32;var $l_04_i_i_i=$111;var $r_05_i_i_i=$132;label=9;break;
 case 9: 
 var $r_05_i_i_i;
 var $l_04_i_i_i;
 var $_03_i_i_i;
 var $133=HEAP8[($l_04_i_i_i)];
 var $134=HEAP8[($r_05_i_i_i)];
 var $135=(($133<<24)>>24)==(($134<<24)>>24);
 if($135){label=10;break;}else{label=11;break;}
 case 10: 
 var $137=((($_03_i_i_i)-(1))|0);
 var $138=(($l_04_i_i_i+1)|0);
 var $139=(($r_05_i_i_i+1)|0);
 var $140=($137|0)==0;
 if($140){label=12;break;}else{var $_03_i_i_i=$137;var $l_04_i_i_i=$138;var $r_05_i_i_i=$139;label=9;break;}
 case 11: 
 var $141=((($i_01_i_i)+(1))|0);
 var $142=($141>>>0)<($126>>>0);
 if($142){var $i_01_i_i=$141;label=7;break;}else{var $149=$105;label=16;break;}
 case 12: 
 var $143=($i_01_i_i|0)==-1;
 if($143){var $149=$105;label=16;break;}else{label=13;break;}
 case 13: 
 var $144=((($114)+(5))|0);
 var $145=_send_onion_data($110,$i_01_i_i,$56,$144);
 var $not_=($145|0)>0;
 if($not_){label=15;break;}else{label=14;break;}
 case 14: 
 var $_pre53_pre=HEAP32[(($10)>>2)];
 var $149=$_pre53_pre;label=16;break;
 case 15: 
 _set_friend_status($m,$i_019,2);
 var $147=HEAP32[(($10)>>2)];
 var $148=(($147+((($i_019)*(14072))&-1)+40)|0);
 var $st$4$0=(($148)|0);
 HEAP32[(($st$4$0)>>2)]=$6$0;
 var $st$5$1=(($148+4)|0);
 HEAP32[(($st$5$1)>>2)]=$6$1;
 var $149=$147;label=16;break;
 case 16: 
 var $149;
 var $150=(($149+((($i_019)*(14072))&-1)+52)|0);
 var $151=HEAP8[($150)];
 var $_off=((($151)-(2))&255);
 var $switch=($_off&255)<2;
 if($switch){label=17;break;}else{var $friendip_sroa_1_2=$friendip_sroa_1_0;var $friendip_sroa_2_2=$friendip_sroa_2_0;var $504=$149;label=102;break;}
 case 17: 
 var $153=(($151<<24)>>24)==2;
 if($153){label=18;break;}else{var $165=$149;label=20;break;}
 case 18: 
 var $155=(($149+((($i_019)*(14072))&-1)+40)|0);
 var $ld$6$0=(($155)|0);
 var $156$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($155+4)|0);
 var $156$1=HEAP32[(($ld$7$1)>>2)];
 var $157=(($149+((($i_019)*(14072))&-1)+48)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159$0=$158;
 var $159$1=0;
 var $160$0=_i64Add($159$0,$159$1,$156$0,$156$1);var $160$1=tempRet0;
 var $161=(($160$1>>>0) < ($6$1>>>0)) | (((($160$1>>>0) == ($6$1>>>0) & ($160$0>>>0) <  ($6$0>>>0))));
 if($161){label=19;break;}else{var $165=$149;label=20;break;}
 case 19: 
 _set_friend_status($m,$i_019,1);
 var $163=HEAP32[(($157)>>2)];
 var $164=$163<<1;
 HEAP32[(($157)>>2)]=$164;
 var $_pre=HEAP32[(($10)>>2)];
 var $165=$_pre;label=20;break;
 case 20: 
 var $165;
 var $166=HEAP32[(($11)>>2)];
 var $167=(($165+((($i_019)*(14072))&-1)+32)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($166+12)|0);
 var $170=HEAP16[(($169)>>1)];
 var $171=($170&65535);
 var $172=($171>>>0)>($168>>>0);
 if($172){label=21;break;}else{var $_0_i=-1;var $234=$friendip_sroa_1_0;var $friendip_sroa_2_1=$friendip_sroa_2_0;label=38;break;}
 case 21: 
 var $174=(($166+8)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+((($168)*(2600))&-1))|0);
 var $177=HEAP8[($176)];
 var $178=(($177<<24)>>24)==0;
 if($178){var $_0_i=-1;var $234=$friendip_sroa_1_0;var $friendip_sroa_2_1=$friendip_sroa_2_0;label=38;break;}else{label=22;break;}
 case 22: 
 var $180=(($175+((($168)*(2600))&-1)+2)|0);
 var $181=HEAP8[($180)];
 var $182=(($181<<24)>>24)==0;
 if($182){var $_0_i=-1;var $234=$friendip_sroa_1_0;var $friendip_sroa_2_1=$friendip_sroa_2_0;label=38;break;}else{label=23;break;}
 case 23: 
 var $184=(($166)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(($175+((($168)*(2600))&-1)+3)|0);
 HEAP32[(($60)>>2)]=0; HEAP32[((($60)+(4))>>2)]=0; HEAP32[((($60)+(8))>>2)]=0; HEAP32[((($60)+(12))>>2)]=0; HEAP32[((($60)+(16))>>2)]=0;
 var $187=(($185+14968)|0);
 var $188=HEAP16[(($187)>>1)];
 var $189=(($188<<16)>>16)==0;
 if($189){var $_0_i=-1;var $234=0;var $friendip_sroa_2_1=$friendip_sroa_2_0;label=38;break;}else{label=24;break;}
 case 24: 
 var $190=(($185+14964)|0);
 var $191=HEAP32[(($190)>>2)];
 var $i_08_i_i=0;label=26;break;
 case 25: 
 var $193=((($i_08_i_i)+(1))|0);
 var $194=($188&65535);
 var $195=($193>>>0)<($194>>>0);
 if($195){var $i_08_i_i=$193;label=26;break;}else{var $_0_i=-1;var $234=0;var $friendip_sroa_2_1=$friendip_sroa_2_0;label=38;break;}
 case 26: 
 var $i_08_i_i;
 var $197=(($191+((($i_08_i_i)*(3808))&-1))|0);
 var $_03_i_i3_i_i=32;var $l_04_i_i2_i_i=$197;var $r_05_i_i1_i_i=$186;label=27;break;
 case 27: 
 var $r_05_i_i1_i_i;
 var $l_04_i_i2_i_i;
 var $_03_i_i3_i_i;
 var $198=HEAP8[($l_04_i_i2_i_i)];
 var $199=HEAP8[($r_05_i_i1_i_i)];
 var $200=(($198<<24)>>24)==(($199<<24)>>24);
 if($200){label=28;break;}else{label=25;break;}
 case 28: 
 var $202=((($_03_i_i3_i_i)-(1))|0);
 var $203=(($l_04_i_i2_i_i+1)|0);
 var $204=(($r_05_i_i1_i_i+1)|0);
 var $205=($202|0)==0;
 if($205){label=29;break;}else{var $_03_i_i3_i_i=$202;var $l_04_i_i2_i_i=$203;var $r_05_i_i1_i_i=$204;label=27;break;}
 case 29: 
 var $ld$8$0=13552;
 var $206$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=13556;
 var $206$1=HEAP32[(($ld$9$1)>>2)];
 var $j_05_i_i=0;label=30;break;
 case 30: 
 var $j_05_i_i;
 var $207=(($191+((($i_08_i_i)*(3808))&-1)+32+((($j_05_i_i)*(464))&-1))|0);
 var $_03_i_i_i_i=32;var $l_04_i_i_i_i=$207;var $r_05_i_i_i_i=$186;label=31;break;
 case 31: 
 var $r_05_i_i_i_i;
 var $l_04_i_i_i_i;
 var $_03_i_i_i_i;
 var $208=HEAP8[($l_04_i_i_i_i)];
 var $209=HEAP8[($r_05_i_i_i_i)];
 var $210=(($208<<24)>>24)==(($209<<24)>>24);
 if($210){label=32;break;}else{label=37;break;}
 case 32: 
 var $212=((($_03_i_i_i_i)-(1))|0);
 var $213=(($l_04_i_i_i_i+1)|0);
 var $214=(($r_05_i_i_i_i+1)|0);
 var $215=($212|0)==0;
 if($215){label=33;break;}else{var $_03_i_i_i_i=$212;var $l_04_i_i_i_i=$213;var $r_05_i_i_i_i=$214;label=31;break;}
 case 33: 
 var $216=(($191+((($i_08_i_i)*(3808))&-1)+32+((($j_05_i_i)*(464))&-1)+248)|0);
 var $217=(($191+((($i_08_i_i)*(3808))&-1)+32+((($j_05_i_i)*(464))&-1)+32)|0);
 var $assoc_02_i_i=$216;var $a_03_i_i=0;label=34;break;
 case 34: 
 var $a_03_i_i;
 var $assoc_02_i_i;
 var $219=(($assoc_02_i_i+24)|0);
 var $ld$10$0=(($219)|0);
 var $220$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($219+4)|0);
 var $220$1=HEAP32[(($ld$11$1)>>2)];
 var $$etemp$12$0=122;
 var $$etemp$12$1=0;
 var $221$0=_i64Add($220$0,$220$1,$$etemp$12$0,$$etemp$12$1);var $221$1=tempRet0;
 var $222=(($221$1>>>0) > ($206$1>>>0)) | (((($221$1>>>0) == ($206$1>>>0) & ($221$0>>>0) >  ($206$0>>>0))));
 if($222){label=35;break;}else{label=36;break;}
 case 35: 
 var $224=(($assoc_02_i_i)|0);
 assert(20 % 1 === 0);(_memcpy($60, $224, 20)|0);
 var $225=(($assoc_02_i_i+20)|0);
 var $226=(((((HEAPU8[($225)])|(HEAPU8[((($225)+(1))|0)]<<8))<<16)>>16));
 var $227=(($assoc_02_i_i+22)|0);
 var $228=(((((HEAPU8[($227)])|(HEAPU8[((($227)+(1))|0)]<<8))<<16)>>16));
 var $_0_i=1;var $234=$226;var $friendip_sroa_2_1=$228;label=38;break;
 case 36: 
 var $230=((($a_03_i_i)+(1))|0);
 var $231=($230>>>0)<2;
 if($231){var $assoc_02_i_i=$217;var $a_03_i_i=$230;label=34;break;}else{label=37;break;}
 case 37: 
 var $232=((($j_05_i_i)+(1))|0);
 var $233=($232>>>0)<8;
 if($233){var $j_05_i_i=$232;label=30;break;}else{var $_0_i=0;var $234=0;var $friendip_sroa_2_1=$friendip_sroa_2_0;label=38;break;}
 case 38: 
 var $friendip_sroa_2_1;
 var $234;
 var $_0_i;
 var $235=HEAP32[(($12)>>2)];
 var $236=(($165+((($i_019)*(14072))&-1)+36)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=(($235+8)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=($239>>>0)>($237>>>0);
 if($240){label=39;break;}else{label=40;break;}
 case 39: 
 var $241=(($235+4)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=(($242+((($237)*(224))&-1)+208)|0);
 var $244=HEAP8[($243)];
 var $245=($244&255);
 if(($245|0)==3){ label=100;break;}else if(($245|0)==4){ label=101;break;}else if(($245|0)==0){ label=40;break;}else{var $friendip_sroa_1_2=$234;var $friendip_sroa_2_2=$friendip_sroa_2_1;var $504=$165;label=102;break;}
 case 40: 
 var $246=($_0_i|0)==1;
 if($246){label=41;break;}else{var $friendip_sroa_1_2=$234;var $friendip_sroa_2_2=$friendip_sroa_2_1;var $504=$165;label=102;break;}
 case 41: 
 var $248=(($165+((($i_019)*(14072))&-1))|0);
 assert(20 % 1 === 0);HEAP32[(($61)>>2)]=HEAP32[(($60)>>2)];HEAP32[((($61)+(4))>>2)]=HEAP32[((($60)+(4))>>2)];HEAP32[((($61)+(8))>>2)]=HEAP32[((($60)+(8))>>2)];HEAP32[((($61)+(12))>>2)]=HEAP32[((($60)+(12))>>2)];HEAP32[((($61)+(16))>>2)]=HEAP32[((($60)+(16))>>2)];
 HEAP16[(($62)>>1)]=$234;
 HEAP16[(($63)>>1)]=$friendip_sroa_2_1;
 var $$etemp$13$0=24;
 var $$etemp$13$1=0;

 var $$etemp$14$0=24;
 var $$etemp$14$1=0;

 var $249=HEAP32[(($238)>>2)];
 var $250=($249|0)==0;
 var $_pre12_i=(($235+4)|0);
 var $251=HEAP32[(($_pre12_i)>>2)];
 if($250){label=42;break;}else{var $i_01_i_i6=0;label=43;break;}
 case 42: 
 var $252=(($251)|0);
 var $292=1;var $291=$252;label=56;break;
 case 43: 
 var $i_01_i_i6;
 var $253=(($251+((($i_01_i_i6)*(224))&-1)+208)|0);
 var $254=HEAP8[($253)];
 var $255=(($254<<24)>>24)==0;
 if($255){label=47;break;}else{label=44;break;}
 case 44: 
 var $257=(($251+((($i_01_i_i6)*(224))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$248;var $r_05_i_i=$257;label=45;break;
 case 45: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $258=HEAP8[($l_04_i_i)];
 var $259=HEAP8[($r_05_i_i)];
 var $260=(($258<<24)>>24)==(($259<<24)>>24);
 if($260){label=46;break;}else{label=47;break;}
 case 46: 
 var $262=((($_03_i_i)-(1))|0);
 var $263=(($l_04_i_i+1)|0);
 var $264=(($r_05_i_i+1)|0);
 var $265=($262|0)==0;
 if($265){label=48;break;}else{var $_03_i_i=$262;var $l_04_i_i=$263;var $r_05_i_i=$264;label=45;break;}
 case 47: 
 var $266=((($i_01_i_i6)+(1))|0);
 var $267=($266>>>0)<($249>>>0);
 if($267){var $i_01_i_i6=$266;label=43;break;}else{var $286=$249;var $285=$251;label=54;break;}
 case 48: 
 var $268=($i_01_i_i6|0)==-1;
 if($268){var $286=$249;var $285=$251;label=54;break;}else{label=49;break;}
 case 49: 
 var $270=(($235)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(($251+((($i_01_i_i6)*(224))&-1)+210)|0);
 var $273=HEAP16[(($272)>>1)];
 var $274=($273&65535);
 var $$etemp$15$0=20;
 var $$etemp$15$1=0;

 var $275=(($271+8)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($276>>>0)>($274>>>0);
 if($277){label=51;break;}else{label=50;break;}
 case 50: 
 HEAP32[(($84)>>2)]=0; HEAP32[((($84)+(4))>>2)]=0; HEAP32[((($84)+(8))>>2)]=0; HEAP32[((($84)+(12))>>2)]=0; HEAP32[((($84)+(16))>>2)]=0;
 assert(20 % 1 === 0);(_memcpy($65, $84, 20)|0);
 tempBigInt=0;HEAP8[($85)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($85)+(1))|0)]=tempBigInt&0xff;
 var $$etemp$16$0=20;
 var $$etemp$16$1=0;

 label=53;break;
 case 51: 
 var $278=(($271+4)|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=$279;
 var $281=(($280+((($274)*(1160))&-1))|0);
 assert(24 % 1 === 0);(_memcpy($65, $281, 24)|0);
 var $_pre58=(((((HEAPU8[($85)])|(HEAPU8[((($85)+(1))|0)]<<8))<<16)>>16));
 var $$etemp$17$0=20;
 var $$etemp$17$1=0;

 var $282=(($_pre58<<16)>>16)!=0;
 var $283=(($_pre58<<16)>>16)==(($234<<16)>>16);
 var $or_cond89=$282&$283;
 if($or_cond89){label=52;break;}else{label=53;break;}
 case 52: 
 var $284=_ip_equal($86,$87);
 var $phitmp40=($284|0)==0;
 if($phitmp40){label=53;break;}else{var $_0_i12=-1;label=99;break;}
 case 53: 
 var $_pre_i9=HEAP32[(($238)>>2)];
 var $_pre57=HEAP32[(($_pre12_i)>>2)];
 var $286=$_pre_i9;var $285=$_pre57;label=54;break;
 case 54: 
 var $285;
 var $286;
 var $287=((($286)+(1))|0);
 var $288=($287|0)==0;
 var $289=(($285)|0);
 if($288){label=55;break;}else{var $292=$287;var $291=$289;label=56;break;}
 case 55: 
 _free($289);
 HEAP32[(($_pre12_i)>>2)]=0;
 var $_0_i12=-1;label=99;break;
 case 56: 
 var $291;
 var $292;
 var $293=((($292)*(224))&-1);
 var $294=_realloc($291,$293);
 var $295=($294|0)==0;
 if($295){var $_0_i12=-1;label=99;break;}else{label=57;break;}
 case 57: 
 var $297=$294;
 HEAP32[(($_pre12_i)>>2)]=$297;
 var $298=HEAP32[(($238)>>2)];
 var $299=(($297+((($298)*(224))&-1))|0);
 _memset($299, 0, 224)|0;
 var $300=(($297+((($298)*(224))&-1)+210)|0);
 HEAP16[(($300)>>1)]=-1;
 var $i_07_i=0;label=59;break;
 case 58: 
 var $302=($307>>>0)>($298>>>0);
 if($302){var $_0_i12=-1;label=99;break;}else{var $i_07_i=$307;label=59;break;}
 case 59: 
 var $i_07_i;
 var $304=(($297+((($i_07_i)*(224))&-1)+208)|0);
 var $305=HEAP8[($304)];
 var $306=(($305<<24)>>24)==0;
 var $307=((($i_07_i)+(1))|0);
 if($306){label=60;break;}else{label=58;break;}
 case 60: 
 var $309=(($235)|0);
 var $310=HEAP32[(($309)>>2)];
 assert(24 % 1 === 0);HEAP32[(($64)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($64)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($64)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];HEAP32[((($64)+(12))>>2)]=HEAP32[((($61)+(12))>>2)];HEAP32[((($64)+(16))>>2)]=HEAP32[((($61)+(16))>>2)];HEAP32[((($64)+(20))>>2)]=HEAP32[((($61)+(20))>>2)];
 var $$etemp$18$0=24;
 var $$etemp$18$1=0;

 var $$etemp$19$0=16;
 var $$etemp$19$1=0;

 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1031;
 var $$etemp$21$1=0;

 var $$etemp$22$0=6;
 var $$etemp$22$1=0;

 assert(24 % 1 === 0);HEAP32[(($66)>>2)]=HEAP32[(($61)>>2)];HEAP32[((($66)+(4))>>2)]=HEAP32[((($61)+(4))>>2)];HEAP32[((($66)+(8))>>2)]=HEAP32[((($61)+(8))>>2)];HEAP32[((($66)+(12))>>2)]=HEAP32[((($61)+(12))>>2)];HEAP32[((($66)+(16))>>2)]=HEAP32[((($61)+(16))>>2)];HEAP32[((($66)+(20))>>2)]=HEAP32[((($61)+(20))>>2)];
 var $311=(($310+4)|0);
 var $312=(($310+8)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=($313|0)==0;
 var $_pre87=HEAP32[(($311)>>2)];
 if($314){var $352=0;var $351=$_pre87;label=73;break;}else{label=61;break;}
 case 61: 
 var $315=$_pre87;
 var $316=HEAP16[(($82)>>1)];
 var $tmp_01_i_i_i=$315;var $tmp_i_02_i_i_i=0;label=62;break;
 case 62: 
 var $tmp_i_02_i_i_i;
 var $tmp_01_i_i_i;
 var $318=(($tmp_01_i_i_i+24)|0);
 var $319=HEAP8[($318)];
 var $320=(($319<<24)>>24)==0;
 var $321=($tmp_01_i_i_i|0)==0;
 var $or_cond90=$320|$321;
 if($or_cond90){label=65;break;}else{label=63;break;}
 case 63: 
 var $323=(($tmp_01_i_i_i+20)|0);
 var $324=(((((HEAPU8[($323)])|(HEAPU8[((($323)+(1))|0)]<<8))<<16)>>16));
 var $325=(($324<<16)>>16)!=0;
 var $326=(($324<<16)>>16)==(($316<<16)>>16);
 var $or_cond91=$325&$326;
 if($or_cond91){label=64;break;}else{label=65;break;}
 case 64: 
 var $327=(($tmp_01_i_i_i)|0);
 var $328=_ip_equal($327,$83);
 var $phitmp39=($328|0)==0;
 if($phitmp39){label=65;break;}else{label=66;break;}
 case 65: 
 var $329=((($tmp_i_02_i_i_i)+(1))|0);
 var $330=(($315+((($329)*(1160))&-1))|0);
 var $331=($329>>>0)<($313>>>0);
 if($331){var $tmp_01_i_i_i=$330;var $tmp_i_02_i_i_i=$329;label=62;break;}else{var $tmp_i_011_i_i=0;var $tmp_012_i_i=$315;label=70;break;}
 case 66: 
 var $332=($tmp_i_02_i_i_i|0)==-1;
 if($332){var $tmp_i_011_i_i=0;var $tmp_012_i_i=$315;label=70;break;}else{label=67;break;}
 case 67: 
 var $334=($313>>>0)>($tmp_i_02_i_i_i>>>0);
 if($334){label=68;break;}else{var $_0_i6_i=$tmp_i_02_i_i_i;label=89;break;}
 case 68: 
 var $336=(($315+((($tmp_i_02_i_i_i)*(1160))&-1)+24)|0);
 var $337=HEAP8[($336)];
 var $338=(($337<<24)>>24)==0;
 if($338){var $_0_i6_i=$tmp_i_02_i_i_i;label=89;break;}else{label=69;break;}
 case 69: 
 var $340=(($315+((($tmp_i_02_i_i_i)*(1160))&-1)+64)|0);
 var $$etemp$23$0=-1;
 var $$etemp$23$1=-1;
 var $st$24$0=(($340)|0);
 HEAP32[(($st$24$0)>>2)]=$$etemp$23$0;
 var $st$25$1=(($340+4)|0);
 HEAP32[(($st$25$1)>>2)]=$$etemp$23$1;
 var $341=(($315+((($tmp_i_02_i_i_i)*(1160))&-1)+1153)|0);
 HEAP8[($341)]=1;
 var $342=(($315+((($tmp_i_02_i_i_i)*(1160))&-1)+25)|0);
 HEAP8[($342)]=0;
 var $_0_i6_i=$tmp_i_02_i_i_i;label=89;break;
 case 70: 
 var $tmp_012_i_i;
 var $tmp_i_011_i_i;
 var $343=(($tmp_012_i_i+24)|0);
 var $344=HEAP8[($343)];
 var $345=(($344<<24)>>24)==0;
 if($345){label=72;break;}else{label=71;break;}
 case 71: 
 var $347=((($tmp_i_011_i_i)+(1))|0);
 var $348=(($315+((($347)*(1160))&-1))|0);
 var $349=($347>>>0)<($313>>>0);
 if($349){var $tmp_i_011_i_i=$347;var $tmp_012_i_i=$348;label=70;break;}else{var $352=$313;var $351=$_pre87;label=73;break;}
 case 72: 
 var $350=($tmp_i_011_i_i|0)==-1;
 if($350){var $352=$313;var $351=$_pre87;label=73;break;}else{var $connection_id_1_i_i=$tmp_i_011_i_i;var $362=$_pre87;label=75;break;}
 case 73: 
 var $351;
 var $352;
 var $353=(($310+12)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=((($352)+(1))|0);
 var $356=(Math_imul($355,$354)|0);
 var $357=_realloc($351,$356);
 var $358=($357|0)==0;
 if($358){var $_0_i6_i=-1;label=89;break;}else{label=74;break;}
 case 74: 
 HEAP32[(($311)>>2)]=$357;
 var $360=HEAP32[(($312)>>2)];
 var $361=((($360)+(1))|0);
 HEAP32[(($312)>>2)]=$361;
 var $connection_id_1_i_i=$360;var $362=$357;label=75;break;
 case 75: 
 var $362;
 var $connection_id_1_i_i;
 var $363=$362;
 var $364=(($363+((($connection_id_1_i_i)*(1160))&-1))|0);
 _memset($364, 0, 1160)|0;
 var $365=_handshake_id($310,$ip_port2_i);
 var $366=_rand();
 var $367=(((($366|0))%(5))&-1);
 var $368=((($367)+(5))|0);
 var $369=(($368)&255);
 HEAP32[(($67)>>2)]=0; HEAP32[((($67)+(4))>>2)]=0; HEAP32[((($67)+(8))>>2)]=0; HEAP32[((($67)+(12))>>2)]=0;
 HEAP32[(($68)>>2)]=0; HEAP32[((($68)+(4))>>2)]=0; HEAP32[((($68)+(8))>>2)]=0;
 _memset($69, 0, 1031)|0;
 HEAP16[(($70)>>1)]=0; HEAP16[((($70)+(2))>>1)]=0; HEAP16[((($70)+(4))>>1)]=0;
 var $$etemp$26$0=8;
 var $$etemp$26$1=0;

 var $370=_gettimeofday($a_i_i_i,0);
 var $371=HEAP32[(($77)>>2)];
 var $372$0=$371;
 var $372$1=((((($371|0)<0))|0)?-1:0);
 var $$etemp$27$0=1000000;
 var $$etemp$27$1=0;
 var $373$0=___muldi3($372$0,$372$1,$$etemp$27$0,$$etemp$27$1);var $373$1=tempRet0;
 var $374=HEAP32[(($78)>>2)];
 var $375$0=$374;
 var $375$1=((((($374|0)<0))|0)?-1:0);
 var $376$0=_i64Add($373$0,$373$1,$375$0,$375$1);var $376$1=tempRet0;
 var $$etemp$28$0=8;
 var $$etemp$28$1=0;

 var $$etemp$29$0=8;
 var $$etemp$29$1=0;

 var $377=_gettimeofday($a_i1_i_i,0);
 var $378=HEAP32[(($80)>>2)];
 var $379$0=$378;
 var $379$1=((((($378|0)<0))|0)?-1:0);
 var $$etemp$30$0=1000000;
 var $$etemp$30$1=0;
 var $380$0=___muldi3($379$0,$379$1,$$etemp$30$0,$$etemp$30$1);var $380$1=tempRet0;
 var $381=HEAP32[(($81)>>2)];
 var $382$0=$381;
 var $382$1=((((($381|0)<0))|0)?-1:0);
 var $383$0=_i64Add($380$0,$380$1,$382$0,$382$1);var $383$1=tempRet0;
 var $$etemp$31$0=8;
 var $$etemp$31$1=0;

 assert(24 % 1 === 0);(_memcpy($364, $64, 24)|0);
 var $384=(($363+((($connection_id_1_i_i)*(1160))&-1)+24)|0);
 HEAP8[($384)]=1;
 var $385=(($363+((($connection_id_1_i_i)*(1160))&-1)+25)|0);
 HEAP8[($385)]=0;
 var $386=(($363+((($connection_id_1_i_i)*(1160))&-1)+26)|0);
 HEAP16[(($386)>>1)]=2;
 var $387=(($363+((($connection_id_1_i_i)*(1160))&-1)+28)|0);
 HEAP32[(($387)>>2)]=30;
 var $388=(($363+((($connection_id_1_i_i)*(1160))&-1)+32)|0);
 var $$etemp$32$0=0;
 var $$etemp$32$1=0;
 var $st$33$0=(($388)|0);
 HEAP32[(($st$33$0)>>2)]=$$etemp$32$0;
 var $st$34$1=(($388+4)|0);
 HEAP32[(($st$34$1)>>2)]=$$etemp$32$1;
 var $389=(($363+((($connection_id_1_i_i)*(1160))&-1)+40)|0);
 var $st$35$0=(($389)|0);
 HEAP32[(($st$35$0)>>2)]=$376$0;
 var $st$36$1=(($389+4)|0);
 HEAP32[(($st$36$1)>>2)]=$376$1;
 var $390=(($363+((($connection_id_1_i_i)*(1160))&-1)+48)|0);
 var $st$37$0=(($390)|0);
 HEAP32[(($st$37$0)>>2)]=$383$0;
 var $st$38$1=(($390+4)|0);
 HEAP32[(($st$38$1)>>2)]=$383$1;
 var $391=(($363+((($connection_id_1_i_i)*(1160))&-1)+56)|0);
 var $$etemp$39$0=0;
 var $$etemp$39$1=0;
 var $st$40$0=(($391)|0);
 HEAP32[(($st$40$0)>>2)]=$$etemp$39$0;
 var $st$41$1=(($391+4)|0);
 HEAP32[(($st$41$1)>>2)]=$$etemp$39$1;
 var $392=(($363+((($connection_id_1_i_i)*(1160))&-1)+64)|0);
 var $$etemp$42$0=-1;
 var $$etemp$42$1=-1;
 var $st$43$0=(($392)|0);
 HEAP32[(($st$43$0)>>2)]=$$etemp$42$0;
 var $st$44$1=(($392+4)|0);
 HEAP32[(($st$44$1)>>2)]=$$etemp$42$1;
 var $393=(($363+((($connection_id_1_i_i)*(1160))&-1)+72)|0);
 var $394=$393;
 assert(16 % 1 === 0);HEAP32[(($394)>>2)]=HEAP32[(($67)>>2)];HEAP32[((($394)+(4))>>2)]=HEAP32[((($67)+(4))>>2)];HEAP32[((($394)+(8))>>2)]=HEAP32[((($67)+(8))>>2)];HEAP32[((($394)+(12))>>2)]=HEAP32[((($67)+(12))>>2)];
 var $395=(($363+((($connection_id_1_i_i)*(1160))&-1)+88)|0);
 HEAP32[(($395)>>2)]=$365;
 var $396=(($363+((($connection_id_1_i_i)*(1160))&-1)+92)|0);
 var $397=$396;
 assert(12 % 1 === 0);HEAP32[(($397)>>2)]=HEAP32[(($68)>>2)];HEAP32[((($397)+(4))>>2)]=HEAP32[((($68)+(4))>>2)];HEAP32[((($397)+(8))>>2)]=HEAP32[((($68)+(8))>>2)];
 var $398=(($363+((($connection_id_1_i_i)*(1160))&-1)+104)|0);
 HEAP32[(($398)>>2)]=$365;
 var $399=(($363+((($connection_id_1_i_i)*(1160))&-1)+108)|0);
 HEAP32[(($399)>>2)]=0;
 var $400=(($363+((($connection_id_1_i_i)*(1160))&-1)+112)|0);
 HEAP32[(($400)>>2)]=$365;
 var $401=(($363+((($connection_id_1_i_i)*(1160))&-1)+116)|0);
 HEAP32[(($401)>>2)]=$365;
 var $402=(($363+((($connection_id_1_i_i)*(1160))&-1)+120)|0);
 var $403=$402;
 assert(1031 % 1 === 0);(_memcpy($403, $69, 1031)|0);
 var $404=(($363+((($connection_id_1_i_i)*(1160))&-1)+1151)|0);
 HEAP8[($404)]=0;
 var $405=(($363+((($connection_id_1_i_i)*(1160))&-1)+1152)|0);
 HEAP8[($405)]=$369;
 var $406=(($363+((($connection_id_1_i_i)*(1160))&-1)+1153)|0);
 HEAP8[($406)]=1;
 var $407=(($364+1154)|0);
 assert(6 % 1 === 0);HEAP16[(($407)>>1)]=HEAP16[(($70)>>1)];HEAP16[((($407)+(2))>>1)]=HEAP16[((($70)+(2))>>1)];HEAP16[((($407)+(4))>>1)]=HEAP16[((($70)+(4))>>1)];
 var $408=_malloc(4104);
 var $409=($408|0)==0;
 if($409){var $_0_i7_i_i=-1;label=81;break;}else{label=76;break;}
 case 76: 
 var $411=((($408)-(4))|0);
 var $412=$411;
 var $413=HEAP32[(($412)>>2)];
 var $414=$413&3;
 var $415=($414|0)==0;
 if($415){label=78;break;}else{label=77;break;}
 case 77: 
 _memset($408, 0, 4104)|0;
 label=78;break;
 case 78: 
 var $416=$408;
 var $417=HEAP32[(($393)>>2)];
 var $418=($417|0)==0;
 if($418){label=80;break;}else{label=79;break;}
 case 79: 
 var $419=(($417)|0);
 _free($419);
 HEAP32[(($393)>>2)]=$416;
 var $_0_i7_i_i=4;label=81;break;
 case 80: 
 HEAP32[(($393)>>2)]=$416;
 var $_0_i7_i_i=4;label=81;break;
 case 81: 
 var $_0_i7_i_i;
 var $421=(($363+((($connection_id_1_i_i)*(1160))&-1)+76)|0);
 HEAP32[(($421)>>2)]=$_0_i7_i_i;
 var $422=(($363+((($connection_id_1_i_i)*(1160))&-1)+80)|0);
 var $423=_malloc(4104);
 var $424=($423|0)==0;
 if($424){label=84;break;}else{label=82;break;}
 case 82: 
 var $426=((($423)-(4))|0);
 var $427=$426;
 var $428=HEAP32[(($427)>>2)];
 var $429=$428&3;
 var $430=($429|0)==0;
 if($430){label=85;break;}else{label=83;break;}
 case 83: 
 _memset($423, 0, 4104)|0;
 label=85;break;
 case 84: 
 var $431=(($363+((($connection_id_1_i_i)*(1160))&-1)+84)|0);
 HEAP32[(($431)>>2)]=-1;
 label=88;break;
 case 85: 
 var $432=$423;
 var $433=HEAP32[(($422)>>2)];
 var $434=($433|0)==0;
 if($434){label=87;break;}else{label=86;break;}
 case 86: 
 var $435=(($433)|0);
 _free($435);
 label=87;break;
 case 87: 
 HEAP32[(($422)>>2)]=$432;
 var $436=(($363+((($connection_id_1_i_i)*(1160))&-1)+84)|0);
 HEAP32[(($436)>>2)]=4;
 var $437=HEAP32[(($421)>>2)];
 var $438=($437|0)==-1;
 if($438){label=88;break;}else{var $_0_i6_i=$connection_id_1_i_i;label=89;break;}
 case 88: 
 var $440=HEAP32[(($393)>>2)];
 var $441=(($440)|0);
 _free($441);
 var $442=HEAP32[(($422)>>2)];
 var $443=(($442)|0);
 _free($443);
 _memset($364, 0, 1160)|0;
 var $_0_i6_i=-1;label=89;break;
 case 89: 
 var $_0_i6_i;
 var $$etemp$45$0=24;
 var $$etemp$45$1=0;

 var $$etemp$46$0=16;
 var $$etemp$46$1=0;

 var $$etemp$47$0=12;
 var $$etemp$47$1=0;

 var $$etemp$48$0=1031;
 var $$etemp$48$1=0;

 var $$etemp$49$0=6;
 var $$etemp$49$1=0;

 var $444=($_0_i6_i|0)==-1;
 if($444){var $_0_i12=-1;label=99;break;}else{label=90;break;}
 case 90: 
 var $446=(($_0_i6_i)&65535);
 var $447=HEAP32[(($_pre12_i)>>2)];
 var $448=(($447+((($i_07_i)*(224))&-1)+210)|0);
 HEAP16[(($448)>>1)]=$446;
 var $449=(($447+((($i_07_i)*(224))&-1)+208)|0);
 HEAP8[($449)]=1;
 var $450=HEAP32[(($_pre12_i)>>2)];
 var $451=(($450+((($i_07_i)*(224))&-1)+32)|0);
 var $$etemp$50$0=24;
 var $$etemp$50$1=0;
 _randombytes($451,$$etemp$50$0,$$etemp$50$1);
 var $452=HEAP32[(($_pre12_i)>>2)];
 var $453=(($452+((($i_07_i)*(224))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($453, $248, 32)|0);
 var $454=HEAP32[(($_pre12_i)>>2)];
 var $455=(($454+((($i_07_i)*(224))&-1)+80)|0);
 var $456=(($454+((($i_07_i)*(224))&-1)+112)|0);
 var $$etemp$51$0=32;
 var $$etemp$51$1=0;
 _randombytes($456,$$etemp$51$0,$$etemp$51$1);
 _crypto_scalarmult_curve25519_ref($455,$456,440);
 var $ld$52$0=13552;
 var $457$0=HEAP32[(($ld$52$0)>>2)];
 var $ld$53$1=13556;
 var $457$1=HEAP32[(($ld$53$1)>>2)];
 var $$etemp$54$0=10;
 var $$etemp$54$1=0;
 var $458$0=_i64Add($457$0,$457$1,$$etemp$54$0,$$etemp$54$1);var $458$1=tempRet0;
 var $459=HEAP32[(($_pre12_i)>>2)];
 var $460=(($459+((($i_07_i)*(224))&-1)+216)|0);
 var $st$55$0=(($460)|0);
 HEAP32[(($st$55$0)>>2)]=$458$0;
 var $st$56$1=(($460+4)|0);
 HEAP32[(($st$56$1)>>2)]=$458$1;
 var $461=HEAP32[(($238)>>2)];
 var $462=($461|0)==($i_07_i|0);
 if($462){label=91;break;}else{label=92;break;}
 case 91: 
 HEAP32[(($238)>>2)]=$307;
 label=92;break;
 case 92: 
 var $465=(($459+((($i_07_i)*(224))&-1)+32)|0);
 var $466=(($459+((($i_07_i)*(224))&-1)+80)|0);
 var $$etemp$57$0=24;
 var $$etemp$57$1=0;

 var $$etemp$58$0=1024;
 var $$etemp$58$1=0;

 var $$etemp$59$0=56;
 var $$etemp$59$1=0;

 var $_b_i_i_i=HEAP8[(136)];
 if($_b_i_i_i){var $i_01_i_i_i_i=0;label=94;break;}else{label=93;break;}
 case 93: 
 var $$etemp$61$0=24;
 var $$etemp$61$1=0;
 var $$etemp$60=15032;
 _randombytes($$etemp$60,$$etemp$61$0,$$etemp$61$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i_i=0;label=94;break;
 case 94: 
 var $i_01_i_i_i_i;
 var $468=((15032+$i_01_i_i_i_i)|0);
 var $469=HEAP8[($468)];
 var $470=((($469)+(1))&255);
 HEAP8[($468)]=$470;
 var $471=(($470<<24)>>24)==0;
 var $472=((($i_01_i_i_i_i)+(1))|0);
 var $473=($472>>>0)<24;
 var $or_cond_i_i_i_i=$471&$473;
 if($or_cond_i_i_i_i){var $i_01_i_i_i_i=$472;label=94;break;}else{label=95;break;}
 case 95: 
 assert(24 % 1 === 0);(_memcpy($71, 15032, 24)|0);
 assert(24 % 1 === 0);(_memcpy($72, $465, 24)|0);
 assert(32 % 1 === 0);(_memcpy($73, $466, 32)|0);
 var $474=(($235+44)|0);
 var $475=_encrypt_data($248,$474,$71,$72,56,$74);
 var $476=($475|0)==-1;
 if($476){var $_0_i12=-1;label=99;break;}else{label=96;break;}
 case 96: 
 HEAP8[($56)]=2;
 var $477=(($235+12)|0);
 assert(32 % 1 === 0);(_memcpy($57, $477, 32)|0);
 assert(24 % 1 === 0);(_memcpy($75, $71, 24)|0);
 var $478=HEAP32[(($309)>>2)];
 var $479=((($475)+(57))|0);
 var $480=_write_packet($478,$_0_i6_i,$56,$479);
 var $phitmp_i11=($480|0)==1;
 var $$etemp$62$0=56;
 var $$etemp$62$1=0;

 var $$etemp$63$0=1024;
 var $$etemp$63$1=0;

 var $$etemp$64$0=24;
 var $$etemp$64$1=0;

 if($phitmp_i11){label=97;break;}else{var $_0_i12=-1;label=99;break;}
 case 97: 
 var $482=HEAP32[(($_pre12_i)>>2)];
 var $i_01_i3_i=0;label=98;break;
 case 98: 
 var $i_01_i3_i;
 var $484=(($482+((($i_07_i)*(224))&-1)+32+$i_01_i3_i)|0);
 var $485=HEAP8[($484)];
 var $486=((($485)+(1))&255);
 HEAP8[($484)]=$486;
 var $487=(($486<<24)>>24)==0;
 var $488=((($i_01_i3_i)+(1))|0);
 var $489=($488>>>0)<24;
 var $or_cond_i_i=$487&$489;
 if($or_cond_i_i){var $i_01_i3_i=$488;label=98;break;}else{var $_0_i12=$i_07_i;label=99;break;}
 case 99: 
 var $_0_i12;
 var $$etemp$65$0=24;
 var $$etemp$65$1=0;

 var $$etemp$66$0=24;
 var $$etemp$66$1=0;

 var $490=HEAP32[(($10)>>2)];
 var $491=(($490+((($i_019)*(14072))&-1)+36)|0);
 HEAP32[(($491)>>2)]=$_0_i12;
 var $friendip_sroa_1_2=$234;var $friendip_sroa_2_2=$friendip_sroa_2_1;var $504=$490;label=102;break;
 case 100: 
 _set_friend_status($m,$i_019,4);
 var $493=HEAP32[(($10)>>2)];
 var $494=(($493+((($i_019)*(14072))&-1)+1208)|0);
 HEAP8[($494)]=0;
 var $495=HEAP32[(($10)>>2)];
 var $496=(($495+((($i_019)*(14072))&-1)+1224)|0);
 HEAP8[($496)]=0;
 var $497=HEAP32[(($10)>>2)];
 var $498=(($497+((($i_019)*(14072))&-1)+1218)|0);
 HEAP8[($498)]=0;
 var $499=HEAP32[(($10)>>2)];
 var $500=(($499+((($i_019)*(14072))&-1)+1248)|0);
 var $st$67$0=(($500)|0);
 HEAP32[(($st$67$0)>>2)]=$6$0;
 var $st$68$1=(($500+4)|0);
 HEAP32[(($st$68$1)>>2)]=$6$1;
 var $friendip_sroa_1_2=$234;var $friendip_sroa_2_2=$friendip_sroa_2_1;var $504=$499;label=102;break;
 case 101: 
 _crypto_kill($235,$237);
 var $502=HEAP32[(($10)>>2)];
 var $503=(($502+((($i_019)*(14072))&-1)+36)|0);
 HEAP32[(($503)>>2)]=-1;
 var $friendip_sroa_1_2=$234;var $friendip_sroa_2_2=$friendip_sroa_2_1;var $504=$502;label=102;break;
 case 102: 
 var $504;
 var $friendip_sroa_2_2;
 var $friendip_sroa_1_2;
 var $505=(($504+((($i_019)*(14072))&-1)+52)|0);
 var $506=HEAP8[($505)];
 var $507=(($506<<24)>>24)==4;
 if($507){var $508=$504;label=103;break;}else{label=250;break;}
 case 103: 
 var $508;
 var $509=(($508+((($i_019)*(14072))&-1)+1208)|0);
 var $510=HEAP8[($509)];
 var $511=(($510<<24)>>24)==0;
 if($511){label=104;break;}else{label=107;break;}
 case 104: 
 var $513=HEAP16[(($13)>>1)];
 var $514=($513&65535)>128;
 var $515=(($513<<16)>>16)==0;
 var $or_cond_i=$514|$515;
 if($or_cond_i){label=107;break;}else{label=105;break;}
 case 105: 
 var $516=($513&65535);
 var $517=_write_cryptpacket_id($m,$i_019,48,$14,$516);
 var $518=($517|0)==0;
 if($518){label=107;break;}else{label=106;break;}
 case 106: 
 var $520=HEAP32[(($10)>>2)];
 var $521=(($520+((($i_019)*(14072))&-1)+1208)|0);
 HEAP8[($521)]=1;
 label=107;break;
 case 107: 
 var $522=HEAP32[(($10)>>2)];
 var $523=(($522+((($i_019)*(14072))&-1)+1218)|0);
 var $524=HEAP8[($523)];
 var $525=(($524<<24)>>24)==0;
 if($525){label=108;break;}else{label=110;break;}
 case 108: 
 var $527=HEAP16[(($16)>>1)];
 var $528=($527&65535);
 var $529=_write_cryptpacket_id($m,$i_019,49,$15,$528);
 var $530=($529|0)==0;
 if($530){label=110;break;}else{label=109;break;}
 case 109: 
 var $532=HEAP32[(($10)>>2)];
 var $533=(($532+((($i_019)*(14072))&-1)+1218)|0);
 HEAP8[($533)]=1;
 label=110;break;
 case 110: 
 var $534=HEAP32[(($10)>>2)];
 var $535=(($534+((($i_019)*(14072))&-1)+1224)|0);
 var $536=HEAP8[($535)];
 var $537=(($536<<24)>>24)==0;
 if($537){label=111;break;}else{label=113;break;}
 case 111: 
 var $539=HEAP32[(($17)>>2)];
 var $540=(($539)&255);
 var $$etemp$69$0=1;
 var $$etemp$69$1=0;

 HEAP8[($4)]=$540;
 var $541=_write_cryptpacket_id($m,$i_019,50,$4,1);
 var $$etemp$70$0=1;
 var $$etemp$70$1=0;

 var $542=($541|0)==0;
 if($542){label=113;break;}else{label=112;break;}
 case 112: 
 var $544=HEAP32[(($10)>>2)];
 var $545=(($544+((($i_019)*(14072))&-1)+1224)|0);
 HEAP8[($545)]=1;
 label=113;break;
 case 113: 
 var $546=HEAP32[(($10)>>2)];
 var $547=(($546+((($i_019)*(14072))&-1)+1226)|0);
 var $548=HEAP8[($547)];
 var $549=(($548<<24)>>24)==0;
 if($549){label=114;break;}else{label=116;break;}
 case 114: 
 var $551=(($546+((($i_019)*(14072))&-1)+1225)|0);
 var $552=HEAP8[($551)];
 var $$etemp$71$0=1;
 var $$etemp$71$1=0;

 HEAP8[($typing_i)]=$552;
 var $553=_write_cryptpacket_id($m,$i_019,51,$typing_i,1);
 var $$etemp$72$0=1;
 var $$etemp$72$1=0;

 var $554=($553|0)==0;
 if($554){label=116;break;}else{label=115;break;}
 case 115: 
 var $556=HEAP32[(($10)>>2)];
 var $557=(($556+((($i_019)*(14072))&-1)+1226)|0);
 HEAP8[($557)]=1;
 label=116;break;
 case 116: 
 var $558=HEAP32[(($10)>>2)];
 var $559=(($558+((($i_019)*(14072))&-1)+1256)|0);
 var $ld$73$0=(($559)|0);
 var $560$0=HEAP32[(($ld$73$0)>>2)];
 var $ld$74$1=(($559+4)|0);
 var $560$1=HEAP32[(($ld$74$1)>>2)];
 var $$etemp$75$0=5;
 var $$etemp$75$1=0;
 var $561$0=_i64Add($560$0,$560$1,$$etemp$75$0,$$etemp$75$1);var $561$1=tempRet0;
 var $562=(($561$1>>>0) < ($6$1>>>0)) | (((($561$1>>>0) == ($6$1>>>0) & ($561$0>>>0) <  ($6$0>>>0))));
 if($562){label=117;break;}else{var $570=$558;label=120;break;}
 case 117: 
 var $564=_write_cryptpacket_id($m,$i_019,0,0,0);
 var $565=($564|0)==1;
 if($565){label=119;break;}else{label=118;break;}
 case 118: 
 var $_pre54=HEAP32[(($10)>>2)];
 var $570=$_pre54;label=120;break;
 case 119: 
 var $ld$76$0=13552;
 var $567$0=HEAP32[(($ld$76$0)>>2)];
 var $ld$77$1=13556;
 var $567$1=HEAP32[(($ld$77$1)>>2)];
 var $568=HEAP32[(($10)>>2)];
 var $569=(($568+((($i_019)*(14072))&-1)+1256)|0);
 var $st$78$0=(($569)|0);
 HEAP32[(($st$78$0)>>2)]=$567$0;
 var $st$79$1=(($569+4)|0);
 HEAP32[(($st$79$1)>>2)]=$567$1;
 var $570=$568;label=120;break;
 case 120: 
 var $570;
 var $571=HEAP32[(($12)>>2)];
 var $572=(($570+((($i_019)*(14072))&-1)+36)|0);
 var $573=HEAP32[(($572)>>2)];
 var $c_idx_i=(($571+8)|0);
 var $c_idx_val_i=HEAP32[(($c_idx_i)>>2)];
 var $574=($c_idx_val_i>>>0)>($573>>>0);
 if($574){label=121;break;}else{label=245;break;}
 case 121: 
 var $576=(($571+4)|0);
 var $577=HEAP32[(($576)>>2)];
 var $578=(($577+((($573)*(224))&-1)+208)|0);
 var $579=HEAP8[($578)];
 var $580=(($579<<24)>>24)==3;
 if($580){label=122;break;}else{label=245;break;}
 case 122: 
 var $$etemp$80$0=1024;
 var $$etemp$80$1=0;

 var $582=(($571)|0);
 var $583=HEAP32[(($582)>>2)];
 var $584=(($577+((($573)*(224))&-1)+210)|0);
 var $585=HEAP16[(($584)>>1)];
 var $586=($585&65535);
 var $587=(($583+8)|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=($588>>>0)>($586>>>0);
 if($589){label=123;break;}else{label=245;break;}
 case 123: 
 var $591=(($583+4)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=$592;
 var $594=(($593+((($586)*(1160))&-1)+24)|0);
 var $595=HEAP8[($594)];
 var $596=(($595<<24)>>24)==0;
 if($596){label=245;break;}else{label=124;break;}
 case 124: 
 var $597=(($593+((($586)*(1160))&-1)+96)|0);
 var $598=HEAP32[(($597)>>2)];
 var $599=(($593+((($586)*(1160))&-1)+120)|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=($598|0)==($600|0);
 if($601){label=245;break;}else{label=125;break;}
 case 125: 
 var $602=(($593+((($586)*(1160))&-1)+84)|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=(((($600>>>0))%(($603>>>0)))&-1);
 var $605=$604&65535;
 var $606=(($593+((($586)*(1160))&-1)+80)|0);
 var $607=HEAP32[(($606)>>2)];
 var $608=(($607+((($605)*(1026))&-1)+1024)|0);
 var $609=HEAP16[(($608)>>1)];
 var $610=(($607+((($605)*(1026))&-1))|0);
 var $611=($609&65535);
 assert($611 % 1 === 0);(_memcpy($56, $610, $611)|0);
 var $612=((($600)+(1))|0);
 HEAP32[(($599)>>2)]=$612;
 HEAP16[(($608)>>1)]=0;
 var $613=(($609<<16)>>16)==0;
 if($613){label=245;break;}else{label=126;break;}
 case 126: 
 var $615=HEAP8[($56)];
 var $616=(($615<<24)>>24)==3;
 if($616){label=127;break;}else{label=245;break;}
 case 127: 
 var $length_off_i_i=((($611)-(18))|0);
 var $618=($length_off_i_i>>>0)>1007;
 if($618){label=245;break;}else{label=128;break;}
 case 128: 
 var $620=((($611)-(1))|0);
 var $621=(($577+((($573)*(224))&-1)+32)|0);
 var $622=(($577+((($573)*(224))&-1)+176)|0);
 var $$etemp$81$0=1056;
 var $$etemp$81$1=0;

 var $$etemp$82$0=1040;
 var $$etemp$82$1=0;

 _memset($89, 0, 1040)|0;
 assert($620 % 1 === 0);(_memcpy($90, $57, $620)|0);
 var $623=((($611)+(15))|0);
 var $624$0=$623;
 var $624$1=0;
 var $625=_crypto_secretbox_xsalsa20poly1305_open($88,$89,$624$0,$624$1,$621,$622);
 var $626=($625|0)==-1;
 if($626){label=245;break;}else{var $check_01_i_i_i=0;var $i_02_i_i_i=0;label=129;break;}
 case 129: 
 var $i_02_i_i_i;
 var $check_01_i_i_i;
 var $627=(($temp_plain_i_i+$i_02_i_i_i)|0);
 var $628=HEAP8[($627)];
 var $629=$628|$check_01_i_i_i;
 var $630=((($i_02_i_i_i)+(1))|0);
 var $631=($630>>>0)<32;
 if($631){var $check_01_i_i_i=$629;var $i_02_i_i_i=$630;label=129;break;}else{label=130;break;}
 case 130: 
 var $632=(($629<<24)>>24)==0;
 if($632){label=131;break;}else{label=245;break;}
 case 131: 
 var $633=((($611)-(17))|0);
 assert($633 % 1 === 0);(_memcpy($5, $91, $633)|0);
 var $634=($633|0)==-1;
 if($634){label=245;break;}else{label=132;break;}
 case 132: 
 var $636=HEAP32[(($576)>>2)];
 var $i_01_i_i15=0;label=133;break;
 case 133: 
 var $i_01_i_i15;
 var $638=(($636+((($573)*(224))&-1)+32+$i_01_i_i15)|0);
 var $639=HEAP8[($638)];
 var $640=((($639)+(1))&255);
 HEAP8[($638)]=$640;
 var $641=(($640<<24)>>24)==0;
 var $642=((($i_01_i_i15)+(1))|0);
 var $643=($642>>>0)<24;
 var $or_cond_i_i16=$641&$643;
 if($or_cond_i_i16){var $i_01_i_i15=$642;label=133;break;}else{label=134;break;}
 case 134: 
 var $644=($633|0)>0;
 if($644){label=135;break;}else{label=245;break;}
 case 135: 
 var $646=HEAP8[($5)];
 var $647=((($611)-(18))|0);
 var $648=($646&255);
 switch(($648|0)){case 0:{ label=136;break;}case 48:{ label=138;break;}case 49:{ label=142;break;}case 50:{ label=151;break;}case 51:{ label=156;break;}case 64:{ label=159;break;}case 63:{ label=165;break;}case 65:{ label=171;break;}case 144:{ label=174;break;}case 145:{ label=177;break;}case 80:{ label=199;break;}case 81:{ label=205;break;}case 82:{ label=238;break;}case 69:{ label=242;break;}default:{label=137;break;}}break;
 case 136: 
 var $650=HEAP32[(($10)>>2)];
 var $651=(($650+((($i_019)*(14072))&-1)+1248)|0);
 var $st$83$0=(($651)|0);
 HEAP32[(($st$83$0)>>2)]=$6$0;
 var $st$84$1=(($651+4)|0);
 HEAP32[(($st$84$1)>>2)]=$6$1;
 label=137;break;
 case 137: 
 var $652=HEAP32[(($10)>>2)];
 var $653=(($652+((($i_019)*(14072))&-1)+52)|0);
 var $654=HEAP8[($653)];
 var $655=(($654<<24)>>24)==4;
 if($655){var $508=$652;label=103;break;}else{label=250;break;}
 case 138: 
 var $657=($647>>>0)>128;
 var $658=($647|0)==0;
 var $or_cond=$657|$658;
 if($or_cond){label=137;break;}else{label=139;break;}
 case 139: 
 var $660=_llvm_stacksave();
 var $661=STACKTOP;STACKTOP = (STACKTOP + $633)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert($647 % 1 === 0);(_memcpy($661, $18, $647)|0);
 var $662=(($661+$647)|0);
 HEAP8[($662)]=0;
 var $663=HEAP32[(($19)>>2)];
 var $664=($663|0)==0;
 var $_pre56=(($647)&65535);
 if($664){label=141;break;}else{label=140;break;}
 case 140: 
 var $666=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$663]($m,$i_019,$661,$_pre56,$666);
 label=141;break;
 case 141: 
 var $667=HEAP32[(($10)>>2)];
 var $668=(($667+((($i_019)*(14072))&-1)+1077)|0);
 assert($647 % 1 === 0);(_memcpy($668, $661, $647)|0);
 var $669=HEAP32[(($10)>>2)];
 var $670=(($669+((($i_019)*(14072))&-1)+1206)|0);
 HEAP16[(($670)>>1)]=$_pre56;
 _llvm_stackrestore($660);
 label=137;break;
 case 142: 
 var $672=($647|0)==0;
 var $673=($647>>>0)>1007;
 var $or_cond3=$672|$673;
 if($or_cond3){label=137;break;}else{label=143;break;}
 case 143: 
 var $675=_llvm_stacksave();
 var $676=STACKTOP;STACKTOP = (STACKTOP + $633)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert($647 % 1 === 0);(_memcpy($676, $18, $647)|0);
 var $677=(($676+$647)|0);
 HEAP8[($677)]=0;
 var $678=HEAP32[(($21)>>2)];
 var $679=($678|0)==0;
 if($679){label=145;break;}else{label=144;break;}
 case 144: 
 var $681=(($647)&65535);
 var $682=HEAP32[(($22)>>2)];
 FUNCTION_TABLE[$678]($m,$i_019,$676,$681,$682);
 label=145;break;
 case 145: 
 var $m_idx_val_i=HEAP32[(($7)>>2)];
 var $684=($m_idx_val_i>>>0)>($i_019>>>0);
 if($684){label=146;break;}else{label=150;break;}
 case 146: 
 var $686=(($647)&65535);
 var $687=$647&65535;
 var $688=((($687)+(1))|0);
 var $689=_malloc($688);
 var $690=($689|0)==0;
 if($690){label=149;break;}else{label=147;break;}
 case 147: 
 var $692=((($689)-(4))|0);
 var $693=$692;
 var $694=HEAP32[(($693)>>2)];
 var $695=$694&3;
 var $696=($695|0)==0;
 if($696){label=149;break;}else{label=148;break;}
 case 148: 
 _memset($689, 0, $688)|0;
 label=149;break;
 case 149: 
 assert($687 % 1 === 0);(_memcpy($689, $676, $687)|0);
 var $698=HEAP32[(($10)>>2)];
 var $699=(($698+((($i_019)*(14072))&-1)+1212)|0);
 var $700=HEAP32[(($699)>>2)];
 _free($700);
 var $701=HEAP32[(($10)>>2)];
 var $702=(($701+((($i_019)*(14072))&-1)+1212)|0);
 HEAP32[(($702)>>2)]=$689;
 var $703=HEAP32[(($10)>>2)];
 var $704=(($703+((($i_019)*(14072))&-1)+1216)|0);
 HEAP16[(($704)>>1)]=$686;
 label=150;break;
 case 150: 
 _llvm_stackrestore($675);
 label=137;break;
 case 151: 
 var $706=($647|0)==1;
 if($706){label=152;break;}else{label=137;break;}
 case 152: 
 var $708=HEAP8[($18)];
 var $709=($708&255)>2;
 if($709){label=137;break;}else{label=153;break;}
 case 153: 
 var $711=HEAP32[(($23)>>2)];
 var $712=($711|0)==0;
 if($712){label=155;break;}else{label=154;break;}
 case 154: 
 var $714=HEAP32[(($24)>>2)];
 FUNCTION_TABLE[$711]($m,$i_019,$708,$714);
 label=155;break;
 case 155: 
 var $m_idx_val=HEAP32[(($10)>>2)];
 var $716=($708&255);
 var $717=(($m_idx_val+((($i_019)*(14072))&-1)+1220)|0);
 HEAP32[(($717)>>2)]=$716;
 label=137;break;
 case 156: 
 var $719=($647|0)==1;
 if($719){label=157;break;}else{label=137;break;}
 case 157: 
 var $721=HEAP8[($18)];
 var $m_idx4_val=HEAP32[(($10)>>2)];
 var $722=(($m_idx4_val+((($i_019)*(14072))&-1)+1227)|0);
 HEAP8[($722)]=$721;
 var $723=HEAP32[(($25)>>2)];
 var $724=($723|0)==0;
 if($724){label=137;break;}else{label=158;break;}
 case 158: 
 var $726=HEAP32[(($26)>>2)];
 FUNCTION_TABLE[$723]($m,$i_019,$721,$726);
 label=137;break;
 case 159: 
 var $728=($647>>>0)<5;
 if($728){label=137;break;}else{label=160;break;}
 case 160: 
 var $730=((($611)+(65514))|0);
 var $731=(($730)&65535);
 var $732=$730&65535;
 var $733=((($732)+(1))|0);
 var $734=_llvm_stacksave();
 var $735=STACKTOP;STACKTOP = (STACKTOP + $733)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert($732 % 1 === 0);(_memcpy($735, $27, $732)|0);
 var $736=(($735+$732)|0);
 HEAP8[($736)]=0;
 var $737=HEAP32[(($10)>>2)];
 var $738=(($737+((($i_019)*(14072))&-1)+1236)|0);
 var $739=HEAP8[($738)];
 var $740=(($739<<24)>>24)==0;
 if($740){label=162;break;}else{label=161;break;}
 case 161: 
 var $742=_write_cryptpacket_id($m,$i_019,65,$18,4);
 label=162;break;
 case 162: 
 var $744=HEAP32[(($28)>>2)];
 var $745=($744|0)==0;
 if($745){label=164;break;}else{label=163;break;}
 case 163: 
 var $747=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$744]($m,$i_019,$735,$731,$747);
 label=164;break;
 case 164: 
 _llvm_stackrestore($734);
 label=137;break;
 case 165: 
 var $750=($647>>>0)<5;
 if($750){label=137;break;}else{label=166;break;}
 case 166: 
 var $752=((($611)+(65514))|0);
 var $753=(($752)&65535);
 var $754=$752&65535;
 var $755=((($754)+(1))|0);
 var $756=_llvm_stacksave();
 var $757=STACKTOP;STACKTOP = (STACKTOP + $755)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert($754 % 1 === 0);(_memcpy($757, $27, $754)|0);
 var $758=(($757+$754)|0);
 HEAP8[($758)]=0;
 var $759=HEAP32[(($10)>>2)];
 var $760=(($759+((($i_019)*(14072))&-1)+1236)|0);
 var $761=HEAP8[($760)];
 var $762=(($761<<24)>>24)==0;
 if($762){label=168;break;}else{label=167;break;}
 case 167: 
 var $764=_write_cryptpacket_id($m,$i_019,65,$18,4);
 label=168;break;
 case 168: 
 var $766=HEAP32[(($30)>>2)];
 var $767=($766|0)==0;
 if($767){label=170;break;}else{label=169;break;}
 case 169: 
 var $769=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$766]($m,$i_019,$757,$753,$769);
 label=170;break;
 case 170: 
 _llvm_stackrestore($756);
 label=137;break;
 case 171: 
 var $772=($647>>>0)<4;
 if($772){label=137;break;}else{label=172;break;}
 case 172: 
 var $774=HEAP32[(($32)>>2)];
 var $775=($774|0)==0;
 if($775){label=137;break;}else{label=173;break;}
 case 173: 
 var $777=((((HEAPU8[($33)])|(HEAPU8[((($33)+(1))|0)]<<8)|(HEAPU8[((($33)+(2))|0)]<<16)|(HEAPU8[((($33)+(3))|0)]<<24))|0));
 var $778=_htonl($777);
 var $779=HEAP32[(($34)>>2)];
 FUNCTION_TABLE[$774]($m,$i_019,$778,$779);
 label=137;break;
 case 174: 
 var $781=($647|0)==32;
 if($781){label=175;break;}else{label=137;break;}
 case 175: 
 var $783=HEAP32[(($35)>>2)];
 var $784=($783|0)==0;
 if($784){label=137;break;}else{label=176;break;}
 case 176: 
 var $786=HEAP32[(($36)>>2)];
 FUNCTION_TABLE[$783]($m,$i_019,$18,$786);
 label=137;break;
 case 177: 
 var $788=($647|0)==64;
 if($788){label=178;break;}else{label=137;break;}
 case 178: 
 var $790=HEAP32[(($37)>>2)];
 var $791=($790|0)==0;
 if($791){label=137;break;}else{label=179;break;}
 case 179: 
 var $792=HEAP32[(($38)>>2)];
 var $i_01_i=0;label=180;break;
 case 180: 
 var $i_01_i;
 var $793=(($792+($i_01_i<<2))|0);
 var $794=HEAP32[(($793)>>2)];
 var $795=($794|0)==0;
 if($795){label=184;break;}else{label=181;break;}
 case 181: 
 var $797=(($794+4)|0);
 var $_03_i_i20=32;var $l_04_i_i19=$797;var $r_05_i_i18=$18;label=182;break;
 case 182: 
 var $r_05_i_i18;
 var $l_04_i_i19;
 var $_03_i_i20;
 var $798=HEAP8[($l_04_i_i19)];
 var $799=HEAP8[($r_05_i_i18)];
 var $800=(($798<<24)>>24)==(($799<<24)>>24);
 if($800){label=183;break;}else{label=184;break;}
 case 183: 
 var $802=((($_03_i_i20)-(1))|0);
 var $803=(($l_04_i_i19+1)|0);
 var $804=(($r_05_i_i18+1)|0);
 var $805=($802|0)==0;
 if($805){label=185;break;}else{var $_03_i_i20=$802;var $l_04_i_i19=$803;var $r_05_i_i18=$804;label=182;break;}
 case 184: 
 var $806=((($i_01_i)+(1))|0);
 var $807=($806>>>0)<($790>>>0);
 if($807){var $i_01_i=$806;label=180;break;}else{label=137;break;}
 case 185: 
 var $808=($i_01_i|0)==-1;
 if($808){label=137;break;}else{label=186;break;}
 case 186: 
 var $m_idx5_val=HEAP32[(($10)>>2)];
 var $810=(($m_idx5_val+((($i_019)*(14072))&-1)+13808)|0);
 var $811=HEAP16[(($810)>>1)];
 var $812=($811&65535)<64;
 var $phitmp_i=($811&65535);
 var $phitmp__i=($812?$phitmp_i:64);
 var $813=($phitmp__i|0)==0;
 if($813){label=137;break;}else{label=187;break;}
 case 187: 
 var $814=((($i_01_i)+(1))|0);
 var $i_01_i8=0;label=189;break;
 case 188: 
 var $816=($821>>>0)<($phitmp__i>>>0);
 if($816){var $i_01_i8=$821;label=189;break;}else{label=137;break;}
 case 189: 
 var $i_01_i8;
 var $818=(($m_idx5_val+((($i_019)*(14072))&-1)+13552+($i_01_i8<<2))|0);
 var $819=HEAP32[(($818)>>2)];
 var $820=($819|0)==($814|0);
 var $821=((($i_01_i8)+(1))|0);
 if($820){label=190;break;}else{label=188;break;}
 case 190: 
 var $823=_addpeer($794,$39);
 var $$etemp$85$0=1024;
 var $$etemp$85$1=0;

 var $824=(($794+460)|0);
 var $825=HEAP32[(($824)>>2)];
 var $826=((($825)+(1))|0);
 var $827=($826|0)==0;
 var $__i_i=($827?1:$826);
 HEAP32[(($824)>>2)]=$__i_i;
 var $828=_htonl($__i_i);
 assert(32 % 1 === 0);(_memcpy($56, $797, 32)|0);
 tempBigInt=$828;HEAP8[($93)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($93)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($93)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($93)+(3))|0)]=tempBigInt&0xff;
 assert(32 % 1 === 0);(_memcpy($94, $39, 32)|0);
 HEAP8[($95)]=16;
 var $829=_sendto_allpeers($794,$56,69);
 var $$etemp$86$0=1024;
 var $$etemp$86$1=0;

 var $830=HEAP32[(($38)>>2)];
 var $831=(($830+($i_01_i<<2))|0);
 var $832=HEAP32[(($831)>>2)];
 var $$etemp$87$0=20;
 var $$etemp$87$1=0;

 HEAP32[(($96)>>2)]=0; HEAP32[((($96)+(4))>>2)]=0; HEAP32[((($96)+(8))>>2)]=0; HEAP32[((($96)+(12))>>2)]=0; HEAP32[((($96)+(16))>>2)]=0;
 var $m_idx_val_i11=HEAP32[(($7)>>2)];
 var $833=($m_idx_val_i11>>>0)>($i_019>>>0);
 if($833){label=192;break;}else{label=191;break;}
 case 191: 
 assert(20 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];HEAP32[((($98)+(12))>>2)]=HEAP32[((($96)+(12))>>2)];HEAP32[((($98)+(16))>>2)]=HEAP32[((($96)+(16))>>2)];
 var $_sroa_2_1=0;var $_sroa_1_1=0;label=198;break;
 case 192: 
 var $836=HEAP32[(($10)>>2)];
 var $837=(($836+((($i_019)*(14072))&-1)+36)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=HEAP32[(($12)>>2)];
 var $840=(($839+8)|0);
 var $841=HEAP32[(($840)>>2)];
 var $842=($841>>>0)>($838>>>0);
 if($842){label=193;break;}else{label=194;break;}
 case 193: 
 var $843=(($839+4)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=(($844+((($838)*(224))&-1)+208)|0);
 var $846=HEAP8[($845)];
 var $phitmp37=(($846<<24)>>24)==3;
 if($phitmp37){label=195;break;}else{label=194;break;}
 case 194: 
 assert(20 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($96)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($96)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($96)+(8))>>2)];HEAP32[((($98)+(12))>>2)]=HEAP32[((($96)+(12))>>2)];HEAP32[((($98)+(16))>>2)]=HEAP32[((($96)+(16))>>2)];
 var $_sroa_2_1=0;var $_sroa_1_1=0;label=198;break;
 case 195: 
 var $848=(($839)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850=(($844+((($838)*(224))&-1)+210)|0);
 var $851=HEAP16[(($850)>>1)];
 var $852=($851&65535);
 var $$etemp$88$0=20;
 var $$etemp$88$1=0;

 var $853=(($849+8)|0);
 var $854=HEAP32[(($853)>>2)];
 var $855=($854>>>0)>($852>>>0);
 if($855){label=196;break;}else{label=197;break;}
 case 196: 
 var $857=(($849+4)|0);
 var $858=HEAP32[(($857)>>2)];
 var $859=$858;
 var $860=(($859+((($852)*(1160))&-1))|0);
 assert(20 % 1 === 0);(_memcpy($98, $860, 20)|0);
 var $861=(($860+20)|0);
 var $862=$861;
 var $863=(((((HEAPU8[($862)])|(HEAPU8[((($862)+(1))|0)]<<8))<<16)>>16));
 var $864=(($860+22)|0);
 var $865=$864;
 var $866=(((((HEAPU8[($865)])|(HEAPU8[((($865)+(1))|0)]<<8))<<16)>>16));
 var $_sroa_2_1=$866;var $_sroa_1_1=$863;label=198;break;
 case 197: 
 HEAP32[(($97)>>2)]=0; HEAP32[((($97)+(4))>>2)]=0; HEAP32[((($97)+(8))>>2)]=0; HEAP32[((($97)+(12))>>2)]=0; HEAP32[((($97)+(16))>>2)]=0;
 assert(20 % 1 === 0);HEAP32[(($98)>>2)]=HEAP32[(($97)>>2)];HEAP32[((($98)+(4))>>2)]=HEAP32[((($97)+(4))>>2)];HEAP32[((($98)+(8))>>2)]=HEAP32[((($97)+(8))>>2)];HEAP32[((($98)+(12))>>2)]=HEAP32[((($97)+(12))>>2)];HEAP32[((($98)+(16))>>2)]=HEAP32[((($97)+(16))>>2)];
 var $_sroa_2_1=0;var $_sroa_1_1=0;label=198;break;
 case 198: 
 var $_sroa_1_1;
 var $_sroa_2_1;
 var $$etemp$89$0=20;
 var $$etemp$89$1=0;

 assert(20 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($98)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($98)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($98)+(8))>>2)];HEAP32[((($99)+(12))>>2)]=HEAP32[((($98)+(12))>>2)];HEAP32[((($99)+(16))>>2)]=HEAP32[((($98)+(16))>>2)];
 HEAP16[(($100)>>1)]=$_sroa_1_1;
 HEAP16[(($101)>>1)]=$_sroa_2_1;
 var $868=_addpeer($832,$39);
 _send_getnodes($832,$3,$868);
 label=137;break;
 case 199: 
 var $870=($647>>>0)<10;
 if($870){label=137;break;}else{label=200;break;}
 case 200: 
 var $872=HEAP8[($18)];
 var $$etemp$90$0=8;
 var $$etemp$90$1=0;

 var $i_01_i29=0;label=201;break;
 case 201: 
 var $i_01_i29;
 var $874=(((7)-($i_01_i29))|0);
 var $_sum35=((($874)+(2))|0);
 var $875=(($temp+$_sum35)|0);
 var $876=HEAP8[($875)];
 var $877=(($tmpcast_i+$i_01_i29)|0);
 HEAP8[($877)]=$876;
 var $878=((($i_01_i29)+(1))|0);
 var $879=($878>>>0)<8;
 if($879){var $i_01_i29=$878;label=201;break;}else{label=202;break;}
 case 202: 
 var $ld$91$0=(($2)|0);
 var $880$0=HEAP32[(($ld$91$0)>>2)];
 var $ld$92$1=(($2+4)|0);
 var $880$1=HEAP32[(($ld$92$1)>>2)];
 var $st$93$0=(($41)|0);
 tempBigInt=$880$0;HEAP8[($st$93$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$93$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$93$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$93$0)+(3))|0)]=tempBigInt&0xff;
 var $st$94$1=(($41+4)|0);
 tempBigInt=$880$1;HEAP8[($st$94$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$94$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$94$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$94$1)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$95$0=8;
 var $$etemp$95$1=0;

 var $881=($872&255);
 var $882=HEAP32[(($10)>>2)];
 var $883=(($882+((($i_019)*(14072))&-1)+7408+((($881)*(24))&-1)+16)|0);
 HEAP8[($883)]=1;
 var $884=HEAP32[(($10)>>2)];
 var $885=(($884+((($i_019)*(14072))&-1)+7408+((($881)*(24))&-1))|0);
 var $st$96$0=(($885)|0);
 HEAP32[(($st$96$0)>>2)]=$880$0;
 var $st$97$1=(($885+4)|0);
 HEAP32[(($st$97$1)>>2)]=$880$1;
 var $886=(($884+((($i_019)*(14072))&-1)+7408+((($881)*(24))&-1)+8)|0);
 var $$etemp$98$0=0;
 var $$etemp$98$1=0;
 var $st$99$0=(($886)|0);
 HEAP32[(($st$99$0)>>2)]=$$etemp$98$0;
 var $st$100$1=(($886+4)|0);
 HEAP32[(($st$100$1)>>2)]=$$etemp$98$1;
 var $887=((($611)-(27))|0);
 var $888=((($611)-(26))|0);
 var $889=_llvm_stacksave();
 var $890=STACKTOP;STACKTOP = (STACKTOP + $888)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert($887 % 1 === 0);(_memcpy($890, $42, $887)|0);
 var $891=(($890+$887)|0);
 HEAP8[($891)]=0;
 var $892=HEAP32[(($43)>>2)];
 var $893=($892|0)==0;
 if($893){label=204;break;}else{label=203;break;}
 case 203: 
 var $895=(($887)&65535);
 var $896=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$892]($m,$i_019,$872,$880$0,$880$1,$890,$895,$896);
 label=204;break;
 case 204: 
 _llvm_stackrestore($889);
 label=137;break;
 case 205: 
 var $899=($647>>>0)<3;
 if($899){label=137;break;}else{label=206;break;}
 case 206: 
 var $901=HEAP8[($18)];
 var $902=HEAP8[($40)];
 var $903=HEAP8[($45)];
 var $904=((($609)-(21))&65535);
 var $905=($901&255)>1;
 if($905){label=137;break;}else{label=207;break;}
 case 207: 
 var $907=(($901<<24)>>24)==0;
 var $908=($902&255);
 var $909=HEAP32[(($10)>>2)];
 if($907){label=208;break;}else{label=220;break;}
 case 208: 
 var $911=(($909+((($i_019)*(14072))&-1)+7408+((($908)*(24))&-1)+16)|0);
 var $912=HEAP8[($911)];
 var $913=(($912<<24)>>24)==0;
 if($913){label=209;break;}else{label=214;break;}
 case 209: 
 HEAP8[($911)]=6;
 var $m_idx_val_i_i=HEAP32[(($7)>>2)];
 var $915=($m_idx_val_i_i>>>0)>($i_019>>>0);
 if($915){label=210;break;}else{label=213;break;}
 case 210: 
 var $917=HEAP32[(($10)>>2)];
 var $918=(($917+((($i_019)*(14072))&-1)+7408+((($908)*(24))&-1)+16)|0);
 var $919=HEAP8[($918)];
 var $920=(($919<<24)>>24)==0;
 if($920){label=213;break;}else{label=211;break;}
 case 211: 
 var $$etemp$101$0=1024;
 var $$etemp$101$1=0;

 HEAP8[($47)]=1;
 HEAP8[($48)]=$902;
 HEAP8[($49)]=2;
 var $922=_write_cryptpacket_id($m,$i_019,81,$47,3);
 var $923=($922|0)==0;
 if($923){label=213;break;}else{label=212;break;}
 case 212: 
 var $925=HEAP32[(($10)>>2)];
 var $926=(($925+((($i_019)*(14072))&-1)+7408+((($908)*(24))&-1)+16)|0);
 HEAP8[($926)]=0;
 label=213;break;
 case 213: 
 var $927=HEAP32[(($10)>>2)];
 var $928=(($927+((($i_019)*(14072))&-1)+7408+((($908)*(24))&-1)+16)|0);
 HEAP8[($928)]=0;
 label=137;break;
 case 214: 
 var $930=($903&255);
 if(($930|0)==0){ label=215;break;}else if(($930|0)==1){ label=217;break;}else if(($930|0)==2|($930|0)==3){ label=219;break;}else{label=137;break;}
 case 215: 
 var $932=(($912<<24)>>24)==5;
 if($932){label=137;break;}else{label=216;break;}
 case 216: 
 HEAP8[($911)]=3;
 label=236;break;
 case 217: 
 var $935=(($912<<24)>>24)==5;
 if($935){label=137;break;}else{label=218;break;}
 case 218: 
 HEAP8[($911)]=2;
 label=236;break;
 case 219: 
 HEAP8[($911)]=0;
 label=236;break;
 case 220: 
 var $939=(($909+((($i_019)*(14072))&-1)+1264+((($908)*(24))&-1)+16)|0);
 var $940=HEAP8[($939)];
 var $941=(($940<<24)>>24)==0;
 if($941){label=221;break;}else{label=226;break;}
 case 221: 
 HEAP8[($939)]=6;
 var $m_idx_val_i4_i=HEAP32[(($7)>>2)];
 var $943=($m_idx_val_i4_i>>>0)>($i_019>>>0);
 if($943){label=222;break;}else{label=225;break;}
 case 222: 
 var $945=HEAP32[(($10)>>2)];
 var $946=(($945+((($i_019)*(14072))&-1)+1264+((($908)*(24))&-1)+16)|0);
 var $947=HEAP8[($946)];
 var $948=(($947<<24)>>24)==0;
 if($948){label=225;break;}else{label=223;break;}
 case 223: 
 var $$etemp$102$0=1024;
 var $$etemp$102$1=0;

 HEAP8[($47)]=0;
 HEAP8[($48)]=$902;
 HEAP8[($49)]=2;
 var $950=_write_cryptpacket_id($m,$i_019,81,$47,3);
 var $951=($950|0)==0;
 if($951){label=225;break;}else{label=224;break;}
 case 224: 
 var $953=HEAP32[(($10)>>2)];
 var $954=(($953+((($i_019)*(14072))&-1)+1264+((($908)*(24))&-1)+16)|0);
 HEAP8[($954)]=0;
 label=225;break;
 case 225: 
 var $955=HEAP32[(($10)>>2)];
 var $956=(($955+((($i_019)*(14072))&-1)+1264+((($908)*(24))&-1)+16)|0);
 HEAP8[($956)]=0;
 label=137;break;
 case 226: 
 var $958=($903&255);
 switch(($958|0)){case 0:{ label=227;break;}case 1:{ label=229;break;}case 2:case 3:{ label=231;break;}case 4:{ label=232;break;}default:{label=137;break;}}break;
 case 227: 
 var $960=(($940<<24)>>24)==5;
 if($960){label=137;break;}else{label=228;break;}
 case 228: 
 HEAP8[($939)]=3;
 label=236;break;
 case 229: 
 var $963=(($940<<24)>>24)==5;
 if($963){label=236;break;}else{label=230;break;}
 case 230: 
 HEAP8[($939)]=2;
 label=236;break;
 case 231: 
 HEAP8[($939)]=0;
 label=236;break;
 case 232: 
 var $967=(($940<<24)>>24)==4;
 var $968=(($904<<16)>>16)==8;
 var $or_cond_i12=$967&$968;
 if($or_cond_i12){label=233;break;}else{label=137;break;}
 case 233: 
 HEAP8[($939)]=5;
 var $$etemp$103$0=8;
 var $$etemp$103$1=0;

 var $i_01_i31=0;label=234;break;
 case 234: 
 var $i_01_i31;
 var $971=(((7)-($i_01_i31))|0);
 var $_sum=((($971)+(4))|0);
 var $972=(($temp+$_sum)|0);
 var $973=HEAP8[($972)];
 var $974=(($tmpcast_i30+$i_01_i31)|0);
 HEAP8[($974)]=$973;
 var $975=((($i_01_i31)+(1))|0);
 var $976=($975>>>0)<8;
 if($976){var $i_01_i31=$975;label=234;break;}else{label=235;break;}
 case 235: 
 var $ld$104$0=(($1)|0);
 var $977$0=HEAP32[(($ld$104$0)>>2)];
 var $ld$105$1=(($1+4)|0);
 var $977$1=HEAP32[(($ld$105$1)>>2)];
 var $st$106$0=(($104)|0);
 tempBigInt=$977$0;HEAP8[($st$106$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$106$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$106$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$106$0)+(3))|0)]=tempBigInt&0xff;
 var $st$107$1=(($104+4)|0);
 tempBigInt=$977$1;HEAP8[($st$107$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$107$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$107$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$107$1)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$108$0=8;
 var $$etemp$108$1=0;

 label=236;break;
 case 236: 
 var $979=HEAP32[(($50)>>2)];
 var $980=($979|0)==0;
 if($980){label=137;break;}else{label=237;break;}
 case 237: 
 var $982=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$979]($m,$i_019,$901,$902,$903,$46,$904,$982);
 label=137;break;
 case 238: 
 var $984=($647>>>0)<2;
 if($984){label=137;break;}else{label=239;break;}
 case 239: 
 var $986=HEAP8[($18)];
 var $987=($986&255);
 var $988=HEAP32[(($10)>>2)];
 var $989=(($988+((($i_019)*(14072))&-1)+7408+((($987)*(24))&-1)+16)|0);
 var $990=HEAP8[($989)];
 var $991=(($990<<24)>>24)==0;
 if($991){label=137;break;}else{label=240;break;}
 case 240: 
 var $993=((($611)-(19))|0);
 var $994$0=$993;
 var $994$1=0;
 var $995=(($988+((($i_019)*(14072))&-1)+7408+((($987)*(24))&-1)+8)|0);
 var $ld$109$0=(($995)|0);
 var $996$0=HEAP32[(($ld$109$0)>>2)];
 var $ld$110$1=(($995+4)|0);
 var $996$1=HEAP32[(($ld$110$1)>>2)];
 var $997$0=_i64Add($996$0,$996$1,$994$0,$994$1);var $997$1=tempRet0;
 var $st$111$0=(($995)|0);
 HEAP32[(($st$111$0)>>2)]=$997$0;
 var $st$112$1=(($995+4)|0);
 HEAP32[(($st$112$1)>>2)]=$997$1;
 var $998=HEAP32[(($52)>>2)];
 var $999=($998|0)==0;
 if($999){label=137;break;}else{label=241;break;}
 case 241: 
 var $1001=(($993)&65535);
 var $1002=HEAP32[(($53)>>2)];
 FUNCTION_TABLE[$998]($m,$i_019,$986,$40,$1001,$1002);
 label=137;break;
 case 242: 
 var $1004=($647|0)==0;
 if($1004){label=137;break;}else{label=243;break;}
 case 243: 
 var $1006=HEAP32[(($54)>>2)];
 var $1007=($1006|0)==0;
 if($1007){label=137;break;}else{label=244;break;}
 case 244: 
 var $1009=(($647)&65535);
 var $1010=HEAP32[(($55)>>2)];
 FUNCTION_TABLE[$1006]($m,$i_019,$18,$1009,$1010);
 label=137;break;
 case 245: 
 var $1011=HEAP32[(($12)>>2)];
 var $1012=HEAP32[(($10)>>2)];
 var $1013=(($1012+((($i_019)*(14072))&-1)+36)|0);
 var $1014=HEAP32[(($1013)>>2)];
 var $1015=(($1011+8)|0);
 var $1016=HEAP32[(($1015)>>2)];
 var $1017=($1016>>>0)>($1014>>>0);
 if($1017){label=246;break;}else{var $1025=$1012;label=248;break;}
 case 246: 
 var $1018=(($1011+4)|0);
 var $1019=HEAP32[(($1018)>>2)];
 var $1020=(($1019+((($1014)*(224))&-1)+208)|0);
 var $1021=HEAP8[($1020)];
 var $phitmp=(($1021<<24)>>24)==4;
 if($phitmp){label=247;break;}else{var $1025=$1012;label=248;break;}
 case 247: 
 _crypto_kill($1011,$1014);
 var $1023=HEAP32[(($10)>>2)];
 var $1024=(($1023+((($i_019)*(14072))&-1)+36)|0);
 HEAP32[(($1024)>>2)]=-1;
 _set_friend_status($m,$i_019,3);
 var $_pre59=HEAP32[(($10)>>2)];
 var $1025=$_pre59;label=248;break;
 case 248: 
 var $1025;
 var $1026=(($1025+((($i_019)*(14072))&-1)+1248)|0);
 var $ld$113$0=(($1026)|0);
 var $1027$0=HEAP32[(($ld$113$0)>>2)];
 var $ld$114$1=(($1026+4)|0);
 var $1027$1=HEAP32[(($ld$114$1)>>2)];
 var $$etemp$115$0=10;
 var $$etemp$115$1=0;
 var $1028$0=_i64Add($1027$0,$1027$1,$$etemp$115$0,$$etemp$115$1);var $1028$1=tempRet0;
 var $1029=(($1028$1>>>0) < ($6$1>>>0)) | (((($1028$1>>>0) == ($6$1>>>0) & ($1028$0>>>0) <  ($6$0>>>0))));
 if($1029){label=249;break;}else{label=250;break;}
 case 249: 
 var $1031=HEAP32[(($12)>>2)];
 var $1032=(($1025+((($i_019)*(14072))&-1)+36)|0);
 var $1033=HEAP32[(($1032)>>2)];
 _crypto_kill($1031,$1033);
 var $1034=HEAP32[(($10)>>2)];
 var $1035=(($1034+((($i_019)*(14072))&-1)+36)|0);
 HEAP32[(($1035)>>2)]=-1;
 _set_friend_status($m,$i_019,3);
 label=250;break;
 case 250: 
 var $1036=((($i_019)+(1))|0);
 var $1037=HEAP32[(($7)>>2)];
 var $1038=($1036>>>0)<($1037>>>0);
 if($1038){var $i_019=$1036;var $friendip_sroa_1_0=$friendip_sroa_1_2;var $friendip_sroa_2_0=$friendip_sroa_2_2;label=3;break;}else{label=251;break;}
 case 251: 
 var $$etemp$116$0=1024;
 var $$etemp$116$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _set_friend_status($m,$friendnumber,$status){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $zero_i_sroa_0=sp;
 var $zero_i_i_i_sroa_0=(sp)+(24);
 var $temp_ip_port_i_i_sroa_0=(sp)+(48);
 var $1=(($status<<24)>>24)==0;
 var $_pre=(($m+2224)|0);
 if($1){label=42;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP32[(($_pre)>>2)];
 var $4=(($3+((($friendnumber)*(14072))&-1)+52)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==4;
 var $7=(($status<<24)>>24)==4;
 var $8=($7&1);
 var $9=(($m+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($3+((($friendnumber)*(14072))&-1)+32)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($10+12)|0);
 var $14=HEAP16[(($13)>>1)];
 var $15=($14&65535);
 var $16=($15>>>0)>($12>>>0);
 if($16){label=3;break;}else{label=8;break;}
 case 3: 
 var $18=(($10+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+((($12)*(2600))&-1)+1)|0);
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 HEAP8[($20)]=$8;
 label=8;break;
 case 5: 
 var $22=HEAP8[($20)];
 var $23=(($22<<24)>>24)==1;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 var $ld$0$0=13552;
 var $25$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $25$1=HEAP32[(($ld$1$1)>>2)];
 var $26=(($19+((($12)*(2600))&-1)+1376)|0);
 var $st$2$0=(($26)|0);
 HEAP32[(($st$2$0)>>2)]=$25$0;
 var $st$3$1=(($26+4)|0);
 HEAP32[(($st$3$1)>>2)]=$25$1;
 label=7;break;
 case 7: 
 HEAP8[($20)]=0;
 var $27=HEAP32[(($18)>>2)];
 var $28=(($27+((($12)*(2600))&-1)+1368)|0);
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($28)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($28+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 label=8;break;
 case 8: 
 var $29=$7^$6;
 if($29){label=9;break;}else{label=42;break;}
 case 9: 
 if($6){var $i_01_i_i=0;label=10;break;}else{label=25;break;}
 case 10: 
 var $i_01_i_i;
 var $31=HEAP32[(($_pre)>>2)];
 var $32=(($31+((($friendnumber)*(14072))&-1)+1264+((($i_01_i_i)*(24))&-1)+16)|0);
 var $33=HEAP8[($32)];
 var $34=(($33<<24)>>24)==0;
 if($34){var $37=$31;label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($32)]=4;
 var $_pre_i_i=HEAP32[(($_pre)>>2)];
 var $37=$_pre_i_i;label=12;break;
 case 12: 
 var $37;
 var $38=(($37+((($friendnumber)*(14072))&-1)+7408+((($i_01_i_i)*(24))&-1)+16)|0);
 var $39=HEAP8[($38)];
 var $40=(($39<<24)>>24)==0;
 if($40){label=14;break;}else{label=13;break;}
 case 13: 
 HEAP8[($38)]=4;
 label=14;break;
 case 14: 
 var $43=((($i_01_i_i)+(1))|0);
 var $44=($43>>>0)<256;
 if($44){var $i_01_i_i=$43;label=10;break;}else{label=15;break;}
 case 15: 
 var $45=(($m+2236)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=($46|0)==0;
 if($47){label=38;break;}else{label=16;break;}
 case 16: 
 var $48=(($m+2232)|0);
 var $49=HEAP32[(($48)>>2)];
 var $i_04_i_i=0;label=18;break;
 case 17: 
 var $51=($56>>>0)<($46>>>0);
 if($51){var $i_04_i_i=$56;label=18;break;}else{label=38;break;}
 case 18: 
 var $i_04_i_i;
 var $53=(($49+((($i_04_i_i)*(28))&-1))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==($friendnumber|0);
 var $56=((($i_04_i_i)+(1))|0);
 if($55){label=19;break;}else{label=17;break;}
 case 19: 
 var $58=((($46)-(1))|0);
 HEAP32[(($45)>>2)]=$58;
 var $59=($58|0)==($i_04_i_i|0);
 if($59){var $67=$i_04_i_i;var $66=$49;label=21;break;}else{label=20;break;}
 case 20: 
 var $61=(($49+((($i_04_i_i)*(28))&-1))|0);
 var $62=$61;
 var $63=(($49+((($58)*(28))&-1))|0);
 var $64=$63;
 assert(28 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($64)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($64)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($64)+(8))>>2)];HEAP32[((($62)+(12))>>2)]=HEAP32[((($64)+(12))>>2)];HEAP32[((($62)+(16))>>2)]=HEAP32[((($64)+(16))>>2)];HEAP32[((($62)+(20))>>2)]=HEAP32[((($64)+(20))>>2)];HEAP32[((($62)+(24))>>2)]=HEAP32[((($64)+(24))>>2)];
 var $_pr_i_i=HEAP32[(($45)>>2)];
 var $_pre_i1_i=HEAP32[(($48)>>2)];
 var $67=$_pr_i_i;var $66=$_pre_i1_i;label=21;break;
 case 21: 
 var $66;
 var $67;
 var $68=($67|0)==0;
 var $69=$66;
 if($68){label=22;break;}else{label=23;break;}
 case 22: 
 _free($69);
 HEAP32[(($48)>>2)]=0;
 label=38;break;
 case 23: 
 var $72=((($67)*(28))&-1);
 var $73=_realloc($69,$72);
 var $74=($73|0)==0;
 if($74){label=38;break;}else{label=24;break;}
 case 24: 
 var $76=$73;
 HEAP32[(($48)>>2)]=$76;
 label=38;break;
 case 25: 
 var $78=(($temp_ip_port_i_i_sroa_0)|0);
 var $$etemp$7$0=20;
 var $$etemp$7$1=0;

 var $m_idx_i_i=(($m+2228)|0);
 var $m_idx_val_i_i=HEAP32[(($m_idx_i_i)>>2)];
 var $79=($m_idx_val_i_i>>>0)>($friendnumber>>>0);
 if($79){label=26;break;}else{label=38;break;}
 case 26: 
 var $81=(($zero_i_i_i_sroa_0)|0);
 var $$etemp$8$0=20;
 var $$etemp$8$1=0;

 HEAP32[(($81)>>2)]=0; HEAP32[((($81)+(4))>>2)]=0; HEAP32[((($81)+(8))>>2)]=0; HEAP32[((($81)+(12))>>2)]=0; HEAP32[((($81)+(16))>>2)]=0;
 var $82=HEAP32[(($_pre)>>2)];
 var $83=(($82+((($friendnumber)*(14072))&-1)+36)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($m+4)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+8)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=($88>>>0)>($84>>>0);
 if($89){label=27;break;}else{label=28;break;}
 case 27: 
 var $90=(($86+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+((($84)*(224))&-1)+208)|0);
 var $93=HEAP8[($92)];
 var $phitmp=(($93<<24)>>24)==3;
 if($phitmp){label=29;break;}else{label=28;break;}
 case 28: 
 assert(20 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($81)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($81)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($81)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($81)+(12))>>2)];HEAP32[((($78)+(16))>>2)]=HEAP32[((($81)+(16))>>2)];
 var $$etemp$9$0=20;
 var $$etemp$9$1=0;

 label=38;break;
 case 29: 
 var $95=(($86)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($91+((($84)*(224))&-1)+210)|0);
 var $98=HEAP16[(($97)>>1)];
 var $99=($98&65535);
 var $100=(($zero_i_sroa_0)|0);
 var $$etemp$10$0=20;
 var $$etemp$10$1=0;

 var $101=(($96+8)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=($102>>>0)>($99>>>0);
 if($103){label=31;break;}else{label=30;break;}
 case 30: 
 HEAP32[(($100)>>2)]=0; HEAP32[((($100)+(4))>>2)]=0; HEAP32[((($100)+(8))>>2)]=0; HEAP32[((($100)+(12))>>2)]=0; HEAP32[((($100)+(16))>>2)]=0;
 assert(20 % 1 === 0);HEAP32[(($78)>>2)]=HEAP32[(($100)>>2)];HEAP32[((($78)+(4))>>2)]=HEAP32[((($100)+(4))>>2)];HEAP32[((($78)+(8))>>2)]=HEAP32[((($100)+(8))>>2)];HEAP32[((($78)+(12))>>2)]=HEAP32[((($100)+(12))>>2)];HEAP32[((($78)+(16))>>2)]=HEAP32[((($100)+(16))>>2)];
 var $$etemp$11$0=20;
 var $$etemp$11$1=0;

 var $$etemp$12$0=20;
 var $$etemp$12$1=0;

 label=38;break;
 case 31: 
 var $104=(($96+4)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=$105;
 var $107=(($106+((($99)*(1160))&-1))|0);
 assert(20 % 1 === 0);(_memcpy($78, $107, 20)|0);
 var $108=(($107+20)|0);
 var $109=$108;
 var $110=(((((HEAPU8[($109)])|(HEAPU8[((($109)+(1))|0)]<<8))<<16)>>16));
 var $111=(($107+22)|0);
 var $112=$111;
 var $113=(((((HEAPU8[($112)])|(HEAPU8[((($112)+(1))|0)]<<8))<<16)>>16));
 var $$etemp$13$0=20;
 var $$etemp$13$1=0;

 var $$etemp$14$0=20;
 var $$etemp$14$1=0;

 var $114=(($110<<16)>>16)==0;
 if($114){label=38;break;}else{label=32;break;}
 case 32: 
 var $115=(($m+2236)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($116|0)==0;
 var $118=(($m+2232)|0);
 var $119=HEAP32[(($118)>>2)];
 if($117){var $_lcssa2_i_i=28;label=36;break;}else{var $i_08_i_i=0;label=34;break;}
 case 33: 
 var $121=($125>>>0)<($116>>>0);
 if($121){var $i_08_i_i=$125;label=34;break;}else{label=35;break;}
 case 34: 
 var $i_08_i_i;
 var $122=(($119+((($i_08_i_i)*(28))&-1))|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=($123|0)==($friendnumber|0);
 var $125=((($i_08_i_i)+(1))|0);
 if($124){label=38;break;}else{label=33;break;}
 case 35: 
 var $phitmp_i_i=((($116)*(28))&-1);
 var $phitmp13_i_i=((($phitmp_i_i)+(28))|0);
 var $_lcssa2_i_i=$phitmp13_i_i;label=36;break;
 case 36: 
 var $_lcssa2_i_i;
 var $127=$119;
 var $128=_realloc($127,$_lcssa2_i_i);
 var $129=$128;
 var $130=($128|0)==0;
 if($130){label=38;break;}else{label=37;break;}
 case 37: 
 HEAP32[(($118)>>2)]=$129;
 var $132=HEAP32[(($115)>>2)];
 var $133=(($129+((($132)*(28))&-1))|0);
 HEAP32[(($133)>>2)]=$friendnumber;
 var $134=(($129+((($132)*(28))&-1)+4)|0);
 assert(20 % 1 === 0);(_memcpy($134, $78, 20)|0);
 var $135=(($134+20)|0);
 var $136=$135;
 tempBigInt=$110;HEAP8[($136)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($136)+(1))|0)]=tempBigInt&0xff;
 var $137=(($134+22)|0);
 var $138=$137;
 tempBigInt=$113;HEAP8[($138)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($138)+(1))|0)]=tempBigInt&0xff;
 var $139=((($132)+(1))|0);
 HEAP32[(($115)>>2)]=$139;
 label=38;break;
 case 38: 
 var $140=(($m+2320)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=($141|0)==0;
 if($142){label=40;break;}else{label=39;break;}
 case 39: 
 var $144=(($m+2324)|0);
 var $145=HEAP32[(($144)>>2)];
 FUNCTION_TABLE[$141]($m,$friendnumber,$8,$145);
 label=40;break;
 case 40: 
 var $147=(($m+2328)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=($148|0)==0;
 if($149){label=42;break;}else{label=41;break;}
 case 41: 
 var $151=(($m+2332)|0);
 var $152=HEAP32[(($151)>>2)];
 FUNCTION_TABLE[$148]($m,$friendnumber,$8,$152);
 label=42;break;
 case 42: 
 var $153=HEAP32[(($_pre)>>2)];
 var $154=(($153+((($friendnumber)*(14072))&-1)+52)|0);
 HEAP8[($154)]=$status;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _messenger_save($m,$data){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $temp_sroa_1_i=(sp)+(8);
 var $temp_sroa_2_i=(sp)+(40);
 var $lastonline_i=(sp)+(2224);
 var $2=$data;
 HEAP32[(($2)>>2)]=0;
 var $3=(($data+4)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=367860511;
 var $5=(($data+8)|0);
 var $6=$5;
 HEAP32[(($6)>>2)]=68;
 var $7=(($data+12)|0);
 var $8=$7;
 HEAP32[(($8)>>2)]=30277633;
 var $9=(($data+16)|0);
 var $10=(($m+24)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=$9;
 HEAP32[(($12)>>2)]=$11;
 var $13=(($m+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($data+20)|0);
 var $16=(($14+12)|0);
 assert(32 % 1 === 0);(_memcpy($15, $16, 32)|0);
 var $17=(($data+52)|0);
 var $18=(($14+44)|0);
 assert(32 % 1 === 0);(_memcpy($17, $18, 32)|0);
 var $19=(($data+84)|0);
 var $20=(($m+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $i_01_i5=0;var $num_02_i=0;label=2;break;
 case 2: 
 var $num_02_i;
 var $i_01_i5;
 var $23=(($21+8+((($i_01_i5)*(464))&-1)+56)|0);
 var $ld$0$0=(($23)|0);
 var $24$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($23+4)|0);
 var $24$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $25=(($24$0|0) == ($$etemp$2$0|0)) & (($24$1|0) == ($$etemp$2$1|0));
 if($25){label=3;break;}else{label=4;break;}
 case 3: 
 var $27=(($21+8+((($i_01_i5)*(464))&-1)+272)|0);
 var $ld$3$0=(($27)|0);
 var $28$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$4$1)>>2)];
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $29=(($28$0|0) == ($$etemp$5$0|0)) & (($28$1|0) == ($$etemp$5$1|0));
 if($29){var $num_1_i6=$num_02_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $31=((($num_02_i)+(1))|0);
 var $num_1_i6=$31;label=5;break;
 case 5: 
 var $num_1_i6;
 var $33=((($i_01_i5)+(1))|0);
 var $34=($33>>>0)<32;
 if($34){var $i_01_i5=$33;var $num_02_i=$num_1_i6;label=2;break;}else{label=6;break;}
 case 6: 
 var $35=(($21+14968)|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=($36&65535);
 var $38=((($37)*(3808))&-1);
 var $39=$38|12;
 var $40=((($num_1_i6)*(464))&-1);
 var $41=$40|8;
 var $42=((($41)+($39))|0);
 var $43=$19;
 HEAP32[(($43)>>2)]=$42;
 var $44=(($data+88)|0);
 var $45=$44;
 HEAP32[(($45)>>2)]=30277634;
 var $46=(($data+92)|0);
 var $47=$46;
 HEAP32[(($47)>>2)]=22609933;
 var $48=(($data+96)|0);
 var $49=$48;
 HEAP32[(($49)>>2)]=$38;
 var $50=(($data+100)|0);
 var $51=$50;
 HEAP32[(($51)>>2)]=298713091;
 var $52=(($data+104)|0);
 var $53=(($21+14964)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54)|0);
 assert($38 % 1 === 0);(_memcpy($52, $55, $38)|0);
 var $num_06_i=0;var $i_07_i=0;label=7;break;
 case 7: 
 var $i_07_i;
 var $num_06_i;
 var $57=(($21+8+((($i_07_i)*(464))&-1)+56)|0);
 var $ld$6$0=(($57)|0);
 var $58$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($57+4)|0);
 var $58$1=HEAP32[(($ld$7$1)>>2)];
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $59=(($58$0|0) == ($$etemp$8$0|0)) & (($58$1|0) == ($$etemp$8$1|0));
 if($59){label=8;break;}else{label=9;break;}
 case 8: 
 var $61=(($21+8+((($i_07_i)*(464))&-1)+272)|0);
 var $ld$9$0=(($61)|0);
 var $62$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$10$1)>>2)];
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $63=(($62$0|0) == ($$etemp$11$0|0)) & (($62$1|0) == ($$etemp$11$1|0));
 if($63){var $num_1_i3=$num_06_i;label=10;break;}else{label=9;break;}
 case 9: 
 var $65=((($num_06_i)+(1))|0);
 var $num_1_i3=$65;label=10;break;
 case 10: 
 var $num_1_i3;
 var $67=((($i_07_i)+(1))|0);
 var $68=($67>>>0)<32;
 if($68){var $num_06_i=$num_1_i3;var $i_07_i=$67;label=7;break;}else{label=11;break;}
 case 11: 
 var $_sum15=((($39)+(92))|0);
 var $70=(($data+$_sum15)|0);
 var $71=((($num_1_i3)*(464))&-1);
 var $72=$70;
 HEAP32[(($72)>>2)]=$71;
 var $_sum16=((($39)+(96))|0);
 var $73=(($data+$_sum16)|0);
 var $74=$73;
 HEAP32[(($74)>>2)]=298713092;
 var $75=($num_1_i3|0)==0;
 if($75){label=17;break;}else{label=12;break;}
 case 12: 
 var $_sum17=((($39)+(100))|0);
 var $77=(($data+$_sum17)|0);
 var $78=$77;
 var $num_23_i=0;var $i_14_i=0;label=13;break;
 case 13: 
 var $i_14_i;
 var $num_23_i;
 var $80=(($21+8+((($i_14_i)*(464))&-1)+56)|0);
 var $ld$12$0=(($80)|0);
 var $81$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($80+4)|0);
 var $81$1=HEAP32[(($ld$13$1)>>2)];
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $82=(($81$0|0) == ($$etemp$14$0|0)) & (($81$1|0) == ($$etemp$14$1|0));
 if($82){label=14;break;}else{label=15;break;}
 case 14: 
 var $84=(($21+8+((($i_14_i)*(464))&-1)+272)|0);
 var $ld$15$0=(($84)|0);
 var $85$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($84+4)|0);
 var $85$1=HEAP32[(($ld$16$1)>>2)];
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $86=(($85$0|0) == ($$etemp$17$0|0)) & (($85$1|0) == ($$etemp$17$1|0));
 if($86){var $num_3_i=$num_23_i;label=16;break;}else{label=15;break;}
 case 15: 
 var $88=((($num_23_i)+(1))|0);
 var $89=(($78+((($num_23_i)*(464))&-1))|0);
 var $90=(($21+8+((($i_14_i)*(464))&-1))|0);
 assert(464 % 1 === 0);(_memcpy($89, $90, 464)|0);
 var $num_3_i=$88;label=16;break;
 case 16: 
 var $num_3_i;
 var $92=((($i_14_i)+(1))|0);
 var $93=($92>>>0)<32;
 if($93){var $num_23_i=$num_3_i;var $i_14_i=$92;label=13;break;}else{label=17;break;}
 case 17: 
 var $_sum=((($42)+(92))|0);
 var $94=(($data+$_sum)|0);
 var $95=(($m+2228)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==0;
 if($97){var $ret_0_lcssa_i_i=0;label=21;break;}else{label=18;break;}
 case 18: 
 var $98=(($m+2224)|0);
 var $99=HEAP32[(($98)>>2)];
 var $ret_01_i_i=0;var $i_02_i_i=0;label=19;break;
 case 19: 
 var $i_02_i_i;
 var $ret_01_i_i;
 var $101=(($99+((($i_02_i_i)*(14072))&-1)+52)|0);
 var $102=HEAP8[($101)];
 var $not__i_i=(($102<<24)>>24)!=0;
 var $103=($not__i_i&1);
 var $ret_0__i_i=((($103)+($ret_01_i_i))|0);
 var $104=((($i_02_i_i)+(1))|0);
 var $105=($104>>>0)<($96>>>0);
 if($105){var $ret_01_i_i=$ret_0__i_i;var $i_02_i_i=$104;label=19;break;}else{label=20;break;}
 case 20: 
 var $phitmp_i=((($ret_0__i_i)*(2216))&-1);
 var $ret_0_lcssa_i_i=$phitmp_i;label=21;break;
 case 21: 
 var $ret_0_lcssa_i_i;
 var $106=$94;
 HEAP32[(($106)>>2)]=$ret_0_lcssa_i_i;
 var $_sum1=((($42)+(96))|0);
 var $107=(($data+$_sum1)|0);
 var $108=$107;
 HEAP32[(($108)>>2)]=30277635;
 var $_sum2=((($42)+(100))|0);
 var $109=$lastonline_i;
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $110=HEAP32[(($95)>>2)];
 var $111=($110|0)==0;
 if($111){label=31;break;}else{label=22;break;}
 case 22: 
 var $112=(($m+2224)|0);
 var $113=(($temp_sroa_1_i)|0);
 var $114=(($temp_sroa_2_i)|0);
 var $_sum_i=((($42)+(133))|0);
 var $115=(($temp_sroa_2_i+1025)|0);
 var $116=$115;
 var $117=(($temp_sroa_2_i+2171)|0);
 var $118=$117;
 var $119=(($temp_sroa_2_i+1027)|0);
 var $120=(($temp_sroa_2_i+1155)|0);
 var $121=$120;
 var $122=(($temp_sroa_2_i+1157)|0);
 var $123=(($temp_sroa_2_i+2165)|0);
 var $124=$123;
 var $125=(($temp_sroa_2_i+2167)|0);
 var $126=$1;
 var $tmpcast_i=$1;
 var $127=(($temp_sroa_2_i+2175)|0);
 var $128=$127;
 var $i_02_i=0;var $num_03_i=0;var $129=$110;label=23;break;
 case 23: 
 var $129;
 var $num_03_i;
 var $i_02_i;
 var $130=HEAP32[(($112)>>2)];
 var $131=(($130+((($i_02_i)*(14072))&-1)+52)|0);
 var $132=HEAP8[($131)];
 var $133=(($132<<24)>>24)==0;
 if($133){var $num_1_i=$num_03_i;var $177=$129;label=30;break;}else{label=24;break;}
 case 24: 
 var $$etemp$19$0=32;
 var $$etemp$19$1=0;

 var $$etemp$20$0=2183;
 var $$etemp$20$1=0;

 _memset($114, 0, 2183)|0;
 var $135=(($130+((($i_02_i)*(14072))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($113, $135, 32)|0);
 var $136=($132&255)<3;
 if($136){label=25;break;}else{label=26;break;}
 case 25: 
 var $138=(($130+((($i_02_i)*(14072))&-1)+53)|0);
 var $139=(($130+((($i_02_i)*(14072))&-1)+1228)|0);
 var $140=HEAP16[(($139)>>1)];
 var $141=($140&65535);
 assert($141 % 1 === 0);(_memcpy($114, $138, $141)|0);
 var $142=_htons($140);
 tempBigInt=$142;HEAP8[($116)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($116)+(1))|0)]=tempBigInt&0xff;
 var $143=(($130+((($i_02_i)*(14072))&-1)+1240)|0);
 var $144=HEAP32[(($143)>>2)];
 tempBigInt=$144;HEAP8[($118)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($118)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($118)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($118)+(3))|0)]=tempBigInt&0xff;
 label=29;break;
 case 26: 
 var $146=(($130+((($i_02_i)*(14072))&-1)+1077)|0);
 var $147=(($130+((($i_02_i)*(14072))&-1)+1206)|0);
 var $148=HEAP16[(($147)>>1)];
 var $149=($148&65535);
 assert($149 % 1 === 0);(_memcpy($119, $146, $149)|0);
 var $150=_htons($148);
 tempBigInt=$150;HEAP8[($121)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($121)+(1))|0)]=tempBigInt&0xff;
 var $151=(($130+((($i_02_i)*(14072))&-1)+1212)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($130+((($i_02_i)*(14072))&-1)+1216)|0);
 var $154=HEAP16[(($153)>>1)];
 var $155=($154&65535);
 assert($155 % 1 === 0);(_memcpy($122, $152, $155)|0);
 var $156=_htons($154);
 tempBigInt=$156;HEAP8[($124)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($124)+(1))|0)]=tempBigInt&0xff;
 var $157=(($130+((($i_02_i)*(14072))&-1)+1220)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158)&255);
 HEAP8[($125)]=$159;
 var $160=(($130+((($i_02_i)*(14072))&-1)+1248)|0);
 var $ld$21$0=(($160)|0);
 var $161$0=((((HEAPU8[($ld$21$0)])|(HEAPU8[((($ld$21$0)+(1))|0)]<<8)|(HEAPU8[((($ld$21$0)+(2))|0)]<<16)|(HEAPU8[((($ld$21$0)+(3))|0)]<<24))|0));
 var $ld$22$1=(($160+4)|0);
 var $161$1=((((HEAPU8[($ld$22$1)])|(HEAPU8[((($ld$22$1)+(1))|0)]<<8)|(HEAPU8[((($ld$22$1)+(2))|0)]<<16)|(HEAPU8[((($ld$22$1)+(3))|0)]<<24))|0));
 var $st$23$0=(($lastonline_i)|0);
 HEAP32[(($st$23$0)>>2)]=$161$0;
 var $st$24$1=(($lastonline_i+4)|0);
 HEAP32[(($st$24$1)>>2)]=$161$1;
 var $$etemp$25$0=8;
 var $$etemp$25$1=0;

 var $i_01_i=0;label=27;break;
 case 27: 
 var $i_01_i;
 var $163=(((7)-($i_01_i))|0);
 var $164=(($109+$163)|0);
 var $165=HEAP8[($164)];
 var $166=(($tmpcast_i+$i_01_i)|0);
 HEAP8[($166)]=$165;
 var $167=((($i_01_i)+(1))|0);
 var $168=($167>>>0)<8;
 if($168){var $i_01_i=$167;label=27;break;}else{label=28;break;}
 case 28: 
 var $ld$26$0=(($1)|0);
 var $169$0=HEAP32[(($ld$26$0)>>2)];
 var $ld$27$1=(($1+4)|0);
 var $169$1=HEAP32[(($ld$27$1)>>2)];
 var $st$28$0=(($lastonline_i)|0);
 HEAP32[(($st$28$0)>>2)]=$169$0;
 var $st$29$1=(($lastonline_i+4)|0);
 HEAP32[(($st$29$1)>>2)]=$169$1;
 var $$etemp$30$0=8;
 var $$etemp$30$1=0;

 var $st$31$0=(($128)|0);
 tempBigInt=$169$0;HEAP8[($st$31$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$31$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$31$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$31$0)+(3))|0)]=tempBigInt&0xff;
 var $st$32$1=(($128+4)|0);
 tempBigInt=$169$1;HEAP8[($st$32$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$32$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$32$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$32$1)+(3))|0)]=tempBigInt&0xff;
 label=29;break;
 case 29: 
 var $171=((($num_03_i)*(2216))&-1);
 var $_sum3=((($171)+($_sum2))|0);
 var $172=(($data+$_sum3)|0);
 HEAP8[($172)]=$132;
 var $_sum1_i=$171|1;
 var $_sum4=((($_sum1_i)+($_sum2))|0);
 var $173=(($data+$_sum4)|0);
 assert(32 % 1 === 0);(_memcpy($173, $113, 32)|0);
 var $_sum5=((($_sum_i)+($171))|0);
 var $174=(($data+$_sum5)|0);
 assert(2183 % 1 === 0);(_memcpy($174, $114, 2183)|0);
 var $175=((($num_03_i)+(1))|0);
 var $$etemp$33$0=32;
 var $$etemp$33$1=0;

 var $$etemp$34$0=2183;
 var $$etemp$34$1=0;

 var $_pre_i=HEAP32[(($95)>>2)];
 var $num_1_i=$175;var $177=$_pre_i;label=30;break;
 case 30: 
 var $177;
 var $num_1_i;
 var $178=((($i_02_i)+(1))|0);
 var $179=($178>>>0)<($177>>>0);
 if($179){var $i_02_i=$178;var $num_03_i=$num_1_i;var $129=$177;label=23;break;}else{label=31;break;}
 case 31: 
 var $$etemp$35$0=8;
 var $$etemp$35$1=0;

 var $_sum6=((($ret_0_lcssa_i_i)+($_sum2))|0);
 var $180=(($data+$_sum6)|0);
 var $181=(($m+1208)|0);
 var $182=HEAP16[(($181)>>1)];
 var $183=($182&65535);
 var $184=$180;
 HEAP32[(($184)>>2)]=$183;
 var $_sum7=((($_sum6)+(4))|0);
 var $185=(($data+$_sum7)|0);
 var $186=$185;
 HEAP32[(($186)>>2)]=30277636;
 var $_sum8=((($_sum6)+(8))|0);
 var $187=(($data+$_sum8)|0);
 var $188=(($m+1080)|0);
 assert($183 % 1 === 0);(_memcpy($187, $188, $183)|0);
 var $_sum9=((($183)+($_sum8))|0);
 var $189=(($data+$_sum9)|0);
 var $190=(($m+2218)|0);
 var $191=HEAP16[(($190)>>1)];
 var $192=($191&65535);
 var $193=$189;
 HEAP32[(($193)>>2)]=$192;
 var $_sum10=((($_sum9)+(4))|0);
 var $194=(($data+$_sum10)|0);
 var $195=$194;
 HEAP32[(($195)>>2)]=30277637;
 var $_sum11=((($_sum9)+(8))|0);
 var $196=(($data+$_sum11)|0);
 var $197=(($m+1210)|0);
 assert($192 % 1 === 0);(_memcpy($196, $197, $192)|0);
 var $_sum12=((($_sum11)+($192))|0);
 var $198=(($data+$_sum12)|0);
 var $199=$198;
 HEAP32[(($199)>>2)]=1;
 var $_sum13=((($_sum12)+(4))|0);
 var $200=(($data+$_sum13)|0);
 var $201=$200;
 HEAP32[(($201)>>2)]=30277638;
 var $_sum14=((($_sum12)+(8))|0);
 var $202=(($data+$_sum14)|0);
 var $203=(($m+2220)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204)&255);
 HEAP8[($202)]=$205;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _messenger_load_state_callback($outer,$data,$length,$type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3304)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $packet_i_i_i=(sp)+(8);
 var $checksum_i_i=(sp)+(1032);
 var $temp_i=(sp)+(1040);
 var $lastonline_i=(sp)+(3256);
 var $address_i=(sp)+(3264);
 var $2=$outer;
 var $3=($type&65535);
 switch(($3|0)){case 1:{ label=2;break;}case 2:{ label=4;break;}case 4:{ label=46;break;}case 5:{ label=58;break;}case 6:{ label=63;break;}case 3:{ label=7;break;}default:{label=68;break;}}break;
 case 2: 
 var $5=($length|0)==68;
 if($5){label=3;break;}else{var $_0=-1;label=69;break;}
 case 3: 
 var $7=(($outer+24)|0);
 var $8=$data;
 var $9=HEAP32[(($8)>>2)];
 var $10=$7;
 HEAP32[(($10)>>2)]=$9;
 var $11=(($outer+4)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($data+4)|0);
 var $15=(($13+12)|0);
 assert(32 % 1 === 0);(_memcpy($15, $14, 32)|0);
 var $16=(($13+44)|0);
 var $17=(($data+36)|0);
 assert(32 % 1 === 0);(_memcpy($16, $17, 32)|0);
 var $_0=0;label=69;break;
 case 4: 
 var $19=(($outer+8)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($length>>>0)>4;
 if($22){label=5;break;}else{var $_0=0;label=69;break;}
 case 5: 
 var $24=$data;
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==22609933;
 if($26){label=6;break;}else{var $_0=0;label=69;break;}
 case 6: 
 var $28=$21;
 var $29=(($data+4)|0);
 var $30=((($length)-(4))|0);
 var $31=_load_state(56,$28,$29,$30,4558);
 var $_0=0;label=69;break;
 case 7: 
 var $33=$lastonline_i;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $34=(((($length>>>0))%(2216))&-1);
 var $35=($34|0)==0;
 if($35){var $old_data_0_i=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(((($length>>>0))%(2208))&-1);
 var $38=($37|0)==0;
 if($38){var $old_data_0_i=1;label=9;break;}else{var $_0=0;label=69;break;}
 case 9: 
 var $old_data_0_i;
 var $40=($old_data_0_i?2208:2216);
 var $41=(((($length>>>0))/(($40>>>0)))&-1);
 var $42=($41|0)==0;
 if($42){var $_0=0;label=69;break;}else{label=10;break;}
 case 10: 
 var $43=(($temp_i)|0);
 var $44=(($temp_i+1)|0);
 var $45=(($temp_i+1060)|0);
 var $46=(($temp_i+1188)|0);
 var $m_idx_i_i=(($outer+2228)|0);
 var $47=$m_idx_i_i;
 var $48=(($outer+2224)|0);
 var $49=$48;
 var $50=(($temp_i+2198)|0);
 var $51=(($temp_i+1190)|0);
 var $52=(($temp_i+2200)|0);
 var $53=(($temp_i+2208)|0);
 var $54=(($address_i)|0);
 var $55=(($address_i+32)|0);
 var $56=(($temp_i+2204)|0);
 var $57=$55;
 var $58=$checksum_i_i;
 var $tmpcast_i_i=$checksum_i_i;
 var $59=(($address_i+36)|0);
 var $60=$59;
 var $61=(($temp_i+33)|0);
 var $62=(($temp_i+1058)|0);
 if($old_data_0_i){var $i_03_us_i=0;label=12;break;}else{label=11;break;}
 case 11: 
 var $63=$1;
 var $tmpcast_i=$1;
 var $i_03_i=0;label=28;break;
 case 12: 
 var $i_03_us_i;
 var $$etemp$1$0=2216;
 var $$etemp$1$1=0;

 var $64=(Math_imul($i_03_us_i,$40)|0);
 var $65=(($data+$64)|0);
 assert($40 % 1 === 0);(_memcpy($43, $65, $40)|0);
 var $66=HEAP8[($43)];
 var $67=($66&255)>2;
 if($67){label=17;break;}else{label=13;break;}
 case 13: 
 var $69=(($66<<24)>>24)==0;
 if($69){label=27;break;}else{label=14;break;}
 case 14: 
 var $$etemp$2$0=38;
 var $$etemp$2$1=0;

 assert(32 % 1 === 0);(_memcpy($54, $44, 32)|0);
 var $71=HEAP32[(($56)>>2)];
 tempBigInt=$71;HEAP8[($57)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($57)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($57)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($57)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$3$0=2;
 var $$etemp$3$1=0;

 HEAP16[(($checksum_i_i)>>1)]=0;
 var $i_01_i_us_i=0;label=15;break;
 case 15: 
 var $i_01_i_us_i;
 var $73=(($address_i+$i_01_i_us_i)|0);
 var $74=HEAP8[($73)];
 var $75=$i_01_i_us_i&1;
 var $76=(($tmpcast_i_i+$75)|0);
 var $77=HEAP8[($76)];
 var $78=$77^$74;
 HEAP8[($76)]=$78;
 var $79=((($i_01_i_us_i)+(1))|0);
 var $80=($79>>>0)<36;
 if($80){var $i_01_i_us_i=$79;label=15;break;}else{label=16;break;}
 case 16: 
 var $81=HEAP16[(($checksum_i_i)>>1)];
 var $$etemp$4$0=2;
 var $$etemp$4$1=0;

 tempBigInt=$81;HEAP8[($60)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($60)+(1))|0)]=tempBigInt&0xff;
 var $82=HEAP16[(($62)>>1)];
 var $83=_htons($82);
 var $84=_m_addfriend($2,$54,$61,$83);
 var $$etemp$5$0=38;
 var $$etemp$5$1=0;

 label=27;break;
 case 17: 
 var $86=_m_addfriend_norequest($2,$44);
 var $87=HEAP16[(($46)>>1)];
 var $88=_htons($87);
 var $m_idx_val_i_us_i=HEAP32[(($47)>>2)];
 var $89=($m_idx_val_i_us_i>>>0)>($86>>>0);
 if($89){label=18;break;}else{var $m_idx_val_i2_us_i=$m_idx_val_i_us_i;label=20;break;}
 case 18: 
 var $91=($88&65535)>128;
 var $92=(($88<<16)>>16)==0;
 var $or_cond_i_us_i=$91|$92;
 if($or_cond_i_us_i){var $m_idx_val_i2_us_i=$m_idx_val_i_us_i;label=20;break;}else{label=19;break;}
 case 19: 
 var $94=($88&65535);
 var $95=HEAP32[(($49)>>2)];
 var $96=(($95+((($86)*(14072))&-1)+1206)|0);
 HEAP16[(($96)>>1)]=$88;
 var $97=(($95+((($86)*(14072))&-1)+1077)|0);
 assert($94 % 1 === 0);(_memcpy($97, $45, $94)|0);
 var $m_idx_val_i2_us_pre_i=HEAP32[(($47)>>2)];
 var $m_idx_val_i2_us_i=$m_idx_val_i2_us_pre_i;label=20;break;
 case 20: 
 var $m_idx_val_i2_us_i;
 var $98=HEAP16[(($50)>>1)];
 var $99=_htons($98);
 var $100=($m_idx_val_i2_us_i>>>0)>($86>>>0);
 if($100){label=22;break;}else{label=21;break;}
 case 21: 
 var $m_idx_val_us_pre_i=HEAP32[(($49)>>2)];
 var $m_idx_val_us_i=$m_idx_val_us_pre_i;label=26;break;
 case 22: 
 var $102=($99&65535);
 var $103=((($102)+(1))|0);
 var $104=_malloc($103);
 var $105=($104|0)==0;
 if($105){label=25;break;}else{label=23;break;}
 case 23: 
 var $107=((($104)-(4))|0);
 var $108=$107;
 var $109=HEAP32[(($108)>>2)];
 var $110=$109&3;
 var $111=($110|0)==0;
 if($111){label=25;break;}else{label=24;break;}
 case 24: 
 _memset($104, 0, $103)|0;
 label=25;break;
 case 25: 
 assert($102 % 1 === 0);(_memcpy($104, $51, $102)|0);
 var $113=HEAP32[(($49)>>2)];
 var $114=(($113+((($86)*(14072))&-1)+1212)|0);
 var $115=HEAP32[(($114)>>2)];
 _free($115);
 var $116=HEAP32[(($49)>>2)];
 var $117=(($116+((($86)*(14072))&-1)+1212)|0);
 HEAP32[(($117)>>2)]=$104;
 var $118=HEAP32[(($49)>>2)];
 var $119=(($118+((($86)*(14072))&-1)+1216)|0);
 HEAP16[(($119)>>1)]=$99;
 var $m_idx_val_us_i=$118;label=26;break;
 case 26: 
 var $m_idx_val_us_i;
 var $120=HEAP8[($52)];
 var $121=($120&255);
 var $122=(($m_idx_val_us_i+((($86)*(14072))&-1)+1220)|0);
 HEAP32[(($122)>>2)]=$121;
 label=27;break;
 case 27: 
 var $$etemp$6$0=2216;
 var $$etemp$6$1=0;

 var $124=((($i_03_us_i)+(1))|0);
 var $125=($124>>>0)<($41>>>0);
 if($125){var $i_03_us_i=$124;label=12;break;}else{var $_0=0;label=69;break;}
 case 28: 
 var $i_03_i;
 var $$etemp$7$0=2216;
 var $$etemp$7$1=0;

 var $126=(Math_imul($i_03_i,$40)|0);
 var $127=(($data+$126)|0);
 assert($40 % 1 === 0);(_memcpy($43, $127, $40)|0);
 var $128=HEAP8[($43)];
 var $129=($128&255)>2;
 if($129){label=29;break;}else{label=41;break;}
 case 29: 
 var $131=_m_addfriend_norequest($2,$44);
 var $132=HEAP16[(($46)>>1)];
 var $133=_htons($132);
 var $m_idx_val_i_i=HEAP32[(($47)>>2)];
 var $134=($m_idx_val_i_i>>>0)>($131>>>0);
 if($134){label=30;break;}else{var $m_idx_val_i2_i=$m_idx_val_i_i;label=32;break;}
 case 30: 
 var $136=($133&65535)>128;
 var $137=(($133<<16)>>16)==0;
 var $or_cond_i_i=$136|$137;
 if($or_cond_i_i){var $m_idx_val_i2_i=$m_idx_val_i_i;label=32;break;}else{label=31;break;}
 case 31: 
 var $139=($133&65535);
 var $140=HEAP32[(($49)>>2)];
 var $141=(($140+((($131)*(14072))&-1)+1206)|0);
 HEAP16[(($141)>>1)]=$133;
 var $142=(($140+((($131)*(14072))&-1)+1077)|0);
 assert($139 % 1 === 0);(_memcpy($142, $45, $139)|0);
 var $m_idx_val_i2_pre_i=HEAP32[(($47)>>2)];
 var $m_idx_val_i2_i=$m_idx_val_i2_pre_i;label=32;break;
 case 32: 
 var $m_idx_val_i2_i;
 var $143=HEAP16[(($50)>>1)];
 var $144=_htons($143);
 var $145=($m_idx_val_i2_i>>>0)>($131>>>0);
 if($145){label=34;break;}else{label=33;break;}
 case 33: 
 var $m_idx_val_pre_i=HEAP32[(($49)>>2)];
 var $m_idx_val_i=$m_idx_val_pre_i;label=38;break;
 case 34: 
 var $147=($144&65535);
 var $148=((($147)+(1))|0);
 var $149=_malloc($148);
 var $150=($149|0)==0;
 if($150){label=37;break;}else{label=35;break;}
 case 35: 
 var $152=((($149)-(4))|0);
 var $153=$152;
 var $154=HEAP32[(($153)>>2)];
 var $155=$154&3;
 var $156=($155|0)==0;
 if($156){label=37;break;}else{label=36;break;}
 case 36: 
 _memset($149, 0, $148)|0;
 label=37;break;
 case 37: 
 assert($147 % 1 === 0);(_memcpy($149, $51, $147)|0);
 var $158=HEAP32[(($49)>>2)];
 var $159=(($158+((($131)*(14072))&-1)+1212)|0);
 var $160=HEAP32[(($159)>>2)];
 _free($160);
 var $161=HEAP32[(($49)>>2)];
 var $162=(($161+((($131)*(14072))&-1)+1212)|0);
 HEAP32[(($162)>>2)]=$149;
 var $163=HEAP32[(($49)>>2)];
 var $164=(($163+((($131)*(14072))&-1)+1216)|0);
 HEAP16[(($164)>>1)]=$144;
 var $m_idx_val_i=$163;label=38;break;
 case 38: 
 var $m_idx_val_i;
 var $166=HEAP8[($52)];
 var $167=($166&255);
 var $168=(($m_idx_val_i+((($131)*(14072))&-1)+1220)|0);
 HEAP32[(($168)>>2)]=$167;
 var $ld$8$0=(($53)|0);
 var $169$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($53+4)|0);
 var $169$1=HEAP32[(($ld$9$1)>>2)];
 var $st$10$0=(($lastonline_i)|0);
 HEAP32[(($st$10$0)>>2)]=$169$0;
 var $st$11$1=(($lastonline_i+4)|0);
 HEAP32[(($st$11$1)>>2)]=$169$1;
 var $$etemp$12$0=8;
 var $$etemp$12$1=0;

 var $i_01_i4=0;label=39;break;
 case 39: 
 var $i_01_i4;
 var $171=(((7)-($i_01_i4))|0);
 var $172=(($33+$171)|0);
 var $173=HEAP8[($172)];
 var $174=(($tmpcast_i+$i_01_i4)|0);
 HEAP8[($174)]=$173;
 var $175=((($i_01_i4)+(1))|0);
 var $176=($175>>>0)<8;
 if($176){var $i_01_i4=$175;label=39;break;}else{label=40;break;}
 case 40: 
 var $ld$13$0=(($1)|0);
 var $177$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($1+4)|0);
 var $177$1=HEAP32[(($ld$14$1)>>2)];
 var $st$15$0=(($lastonline_i)|0);
 HEAP32[(($st$15$0)>>2)]=$177$0;
 var $st$16$1=(($lastonline_i+4)|0);
 HEAP32[(($st$16$1)>>2)]=$177$1;
 var $$etemp$17$0=8;
 var $$etemp$17$1=0;

 var $178=HEAP32[(($49)>>2)];
 var $179=(($178+((($131)*(14072))&-1)+1248)|0);
 var $st$18$0=(($179)|0);
 tempBigInt=$177$0;HEAP8[($st$18$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$18$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$18$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$18$0)+(3))|0)]=tempBigInt&0xff;
 var $st$19$1=(($179+4)|0);
 tempBigInt=$177$1;HEAP8[($st$19$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$19$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$19$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$19$1)+(3))|0)]=tempBigInt&0xff;
 label=45;break;
 case 41: 
 var $181=(($128<<24)>>24)==0;
 if($181){label=45;break;}else{label=42;break;}
 case 42: 
 var $$etemp$20$0=38;
 var $$etemp$20$1=0;

 assert(32 % 1 === 0);(_memcpy($54, $44, 32)|0);
 var $183=HEAP32[(($56)>>2)];
 tempBigInt=$183;HEAP8[($57)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($57)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($57)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($57)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$21$0=2;
 var $$etemp$21$1=0;

 HEAP16[(($checksum_i_i)>>1)]=0;
 var $i_01_i_i=0;label=43;break;
 case 43: 
 var $i_01_i_i;
 var $185=(($address_i+$i_01_i_i)|0);
 var $186=HEAP8[($185)];
 var $187=$i_01_i_i&1;
 var $188=(($tmpcast_i_i+$187)|0);
 var $189=HEAP8[($188)];
 var $190=$189^$186;
 HEAP8[($188)]=$190;
 var $191=((($i_01_i_i)+(1))|0);
 var $192=($191>>>0)<36;
 if($192){var $i_01_i_i=$191;label=43;break;}else{label=44;break;}
 case 44: 
 var $193=HEAP16[(($checksum_i_i)>>1)];
 var $$etemp$22$0=2;
 var $$etemp$22$1=0;

 tempBigInt=$193;HEAP8[($60)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($60)+(1))|0)]=tempBigInt&0xff;
 var $194=HEAP16[(($62)>>1)];
 var $195=_htons($194);
 var $196=_m_addfriend($2,$54,$61,$195);
 var $$etemp$23$0=38;
 var $$etemp$23$1=0;

 label=45;break;
 case 45: 
 var $$etemp$24$0=2216;
 var $$etemp$24$1=0;

 var $198=((($i_03_i)+(1))|0);
 var $199=($198>>>0)<($41>>>0);
 if($199){var $i_03_i=$198;label=28;break;}else{var $_0=0;label=69;break;}
 case 46: 
 var $201=($length|0)!=0;
 var $202=($length>>>0)<128;
 var $or_cond=$201&$202;
 if($or_cond){label=47;break;}else{var $_0=0;label=69;break;}
 case 47: 
 var $204=(($length)&65535);
 var $205=($204&65535)>128;
 var $206=(($204<<16)>>16)==0;
 var $or_cond_i=$205|$206;
 if($or_cond_i){var $_0=0;label=69;break;}else{label=48;break;}
 case 48: 
 var $208=$length&65535;
 var $209=(($outer+1080)|0);
 assert($208 % 1 === 0);(_memcpy($209, $data, $208)|0);
 var $210=(($outer+1208)|0);
 var $211=$210;
 HEAP16[(($211)>>1)]=$204;
 var $212=(($outer+2228)|0);
 var $213=$212;
 var $214=HEAP32[(($213)>>2)];
 var $215=($214|0)==0;
 if($215){label=50;break;}else{label=49;break;}
 case 49: 
 var $216=(($outer+2224)|0);
 var $217=$216;
 var $i_02_i=0;label=52;break;
 case 50: 
 var $218=(($outer+2244)|0);
 var $219=$218;
 var $220=HEAP32[(($219)>>2)];
 var $221=($220|0)==0;
 if($221){var $_0=0;label=69;break;}else{label=51;break;}
 case 51: 
 var $222=(($outer+2240)|0);
 var $223=$222;
 var $224=((($208)+(37))|0);
 var $225=($224>>>0)>1024;
 var $226=(($packet_i_i_i)|0);
 var $227=(($packet_i_i_i+32)|0);
 var $228=$227;
 var $229=(($packet_i_i_i+37)|0);
 var $230=(($packet_i_i_i+36)|0);
 var $231=(($224)&65535);
 var $i_11_i=0;var $238=$220;label=53;break;
 case 52: 
 var $i_02_i;
 var $233=HEAP32[(($217)>>2)];
 var $234=(($233+((($i_02_i)*(14072))&-1)+1208)|0);
 HEAP8[($234)]=0;
 var $235=((($i_02_i)+(1))|0);
 var $236=HEAP32[(($213)>>2)];
 var $237=($235>>>0)<($236>>>0);
 if($237){var $i_02_i=$235;label=52;break;}else{label=50;break;}
 case 53: 
 var $238;
 var $i_11_i;
 var $239=HEAP32[(($223)>>2)];
 var $240=(($239+($i_11_i<<2))|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)==0;
 if($242){var $255=$238;label=57;break;}else{label=54;break;}
 case 54: 
 var $244=(($241+496)|0);
 assert($208 % 1 === 0);(_memcpy($244, $data, $208)|0);
 var $245=(($241+624)|0);
 HEAP16[(($245)>>1)]=$204;
 if($225){label=56;break;}else{label=55;break;}
 case 55: 
 var $$etemp$25$0=1024;
 var $$etemp$25$1=0;

 var $247=(($241+460)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=((($248)+(1))|0);
 var $250=($249|0)==0;
 var $__i_i_i=($250?1:$249);
 HEAP32[(($247)>>2)]=$__i_i_i;
 var $251=_htonl($__i_i_i);
 var $252=(($241+4)|0);
 assert(32 % 1 === 0);(_memcpy($226, $252, 32)|0);
 tempBigInt=$251;HEAP8[($228)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($228)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($228)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($228)+(3))|0)]=tempBigInt&0xff;
 assert($208 % 1 === 0);(_memcpy($229, $244, $208)|0);
 HEAP8[($230)]=48;
 var $253=_sendto_allpeers($241,$226,$231);
 var $$etemp$26$0=1024;
 var $$etemp$26$1=0;

 label=56;break;
 case 56: 
 var $_pre_i=HEAP32[(($219)>>2)];
 var $255=$_pre_i;label=57;break;
 case 57: 
 var $255;
 var $256=((($i_11_i)+(1))|0);
 var $257=($256>>>0)<($255>>>0);
 if($257){var $i_11_i=$256;var $238=$255;label=53;break;}else{var $_0=0;label=69;break;}
 case 58: 
 var $259=($length|0)!=0;
 var $260=($length>>>0)<1007;
 var $or_cond3=$259&$260;
 if($or_cond3){label=59;break;}else{var $_0=0;label=69;break;}
 case 59: 
 var $262=(($length)&65535);
 var $263=($262&65535)>1007;
 if($263){var $_0=0;label=69;break;}else{label=60;break;}
 case 60: 
 var $265=$length&65535;
 var $266=(($outer+1210)|0);
 assert($265 % 1 === 0);(_memcpy($266, $data, $265)|0);
 var $267=(($outer+2218)|0);
 var $268=$267;
 HEAP16[(($268)>>1)]=$262;
 var $269=(($outer+2228)|0);
 var $270=$269;
 var $271=HEAP32[(($270)>>2)];
 var $272=($271|0)==0;
 if($272){var $_0=0;label=69;break;}else{label=61;break;}
 case 61: 
 var $273=(($outer+2224)|0);
 var $274=$273;
 var $i_01_i=0;label=62;break;
 case 62: 
 var $i_01_i;
 var $276=HEAP32[(($274)>>2)];
 var $277=(($276+((($i_01_i)*(14072))&-1)+1218)|0);
 HEAP8[($277)]=0;
 var $278=((($i_01_i)+(1))|0);
 var $279=HEAP32[(($270)>>2)];
 var $280=($278>>>0)<($279>>>0);
 if($280){var $i_01_i=$278;label=62;break;}else{var $_0=0;label=69;break;}
 case 63: 
 var $282=($length|0)==1;
 if($282){label=64;break;}else{var $_0=0;label=69;break;}
 case 64: 
 var $284=HEAP8[($data)];
 var $285=($284&255)>2;
 if($285){var $_0=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $287=($284&255);
 var $288=(($outer+2220)|0);
 var $289=$288;
 HEAP32[(($289)>>2)]=$287;
 var $290=(($outer+2228)|0);
 var $291=$290;
 var $292=HEAP32[(($291)>>2)];
 var $293=($292|0)==0;
 if($293){var $_0=0;label=69;break;}else{label=66;break;}
 case 66: 
 var $294=(($outer+2224)|0);
 var $295=$294;
 var $i_01_i8=0;label=67;break;
 case 67: 
 var $i_01_i8;
 var $297=HEAP32[(($295)>>2)];
 var $298=(($297+((($i_01_i8)*(14072))&-1)+1224)|0);
 HEAP8[($298)]=0;
 var $299=((($i_01_i8)+(1))|0);
 var $300=HEAP32[(($291)>>2)];
 var $301=($299>>>0)<($300>>>0);
 if($301){var $i_01_i8=$299;label=67;break;}else{var $_0=0;label=69;break;}
 case 68: 
 var $303=HEAP32[((_stderr)>>2)];
 var $304=_fprintf($303,3280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$length,HEAP32[(((tempVarArgs)+(8))>>2)]=$3,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_0=0;label=69;break;
 case 69: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _messenger_load_state_callback_old($outer,$data,$length,$type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $packet_i_i_i=sp;
 var $checksum_i=(sp)+(1024);
 var $address=(sp)+(1032);
 var $1=$outer;
 var $2=($type&65535);
 if(($2|0)==4){ label=19;break;}else if(($2|0)==1){ label=2;break;}else if(($2|0)==2){ label=4;break;}else if(($2|0)==3){ label=7;break;}else{label=31;break;}
 case 2: 
 var $4=($length|0)==68;
 if($4){label=3;break;}else{var $_0=-1;label=32;break;}
 case 3: 
 var $6=(($outer+24)|0);
 var $7=$data;
 var $8=HEAP32[(($7)>>2)];
 var $9=$6;
 HEAP32[(($9)>>2)]=$8;
 var $10=(($outer+4)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($data+4)|0);
 var $14=(($12+12)|0);
 assert(32 % 1 === 0);(_memcpy($14, $13, 32)|0);
 var $15=(($12+44)|0);
 var $16=(($data+36)|0);
 assert(32 % 1 === 0);(_memcpy($15, $16, 32)|0);
 var $_0=0;label=32;break;
 case 4: 
 var $18=(($outer+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=($length>>>0)>4;
 if($21){label=5;break;}else{var $_0=0;label=32;break;}
 case 5: 
 var $23=$data;
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==22609933;
 if($25){label=6;break;}else{var $_0=0;label=32;break;}
 case 6: 
 var $27=$20;
 var $28=(($data+4)|0);
 var $29=((($length)-(4))|0);
 var $30=_load_state(56,$27,$28,$29,4558);
 var $_0=0;label=32;break;
 case 7: 
 var $32=(((($length>>>0))%(14072))&-1);
 var $33=($32|0)==0;
 if($33){label=8;break;}else{var $_0=0;label=32;break;}
 case 8: 
 var $35=(((($length>>>0))/(14072))&-1);
 var $36=$data;
 var $37=$35&65535;
 var $38=($37|0)==0;
 if($38){var $_0=0;label=32;break;}else{label=9;break;}
 case 9: 
 var $m_idx_i=(($outer+2228)|0);
 var $39=$m_idx_i;
 var $40=(($outer+2224)|0);
 var $41=$40;
 var $42=(($address)|0);
 var $43=(($address+32)|0);
 var $44=$43;
 var $45=$checksum_i;
 var $tmpcast_i=$checksum_i;
 var $46=(($address+36)|0);
 var $47=$46;
 var $i_04=0;label=10;break;
 case 10: 
 var $i_04;
 var $49=(($36+((($i_04)*(14072))&-1))|0);
 var $50=(($36+((($i_04)*(14072))&-1)+52)|0);
 var $51=HEAP8[($50)];
 var $52=($51&255)>2;
 if($52){label=11;break;}else{label=14;break;}
 case 11: 
 var $54=(($49)|0);
 var $55=_m_addfriend_norequest($1,$54);
 var $56=(($36+((($i_04)*(14072))&-1)+1077)|0);
 var $57=(($36+((($i_04)*(14072))&-1)+1206)|0);
 var $58=HEAP16[(($57)>>1)];
 var $m_idx_val_i=HEAP32[(($39)>>2)];
 var $59=($m_idx_val_i>>>0)>($55>>>0);
 if($59){label=12;break;}else{label=18;break;}
 case 12: 
 var $61=($58&65535)>128;
 var $62=(($58<<16)>>16)==0;
 var $or_cond_i=$61|$62;
 if($or_cond_i){label=18;break;}else{label=13;break;}
 case 13: 
 var $64=($58&65535);
 var $65=HEAP32[(($41)>>2)];
 var $66=(($65+((($55)*(14072))&-1)+1206)|0);
 HEAP16[(($66)>>1)]=$58;
 var $67=(($65+((($55)*(14072))&-1)+1077)|0);
 assert($64 % 1 === 0);(_memcpy($67, $56, $64)|0);
 label=18;break;
 case 14: 
 var $69=(($51<<24)>>24)==0;
 if($69){label=18;break;}else{label=15;break;}
 case 15: 
 var $$etemp$0$0=38;
 var $$etemp$0$1=0;

 var $71=(($49)|0);
 assert(32 % 1 === 0);(_memcpy($42, $71, 32)|0);
 var $72=(($36+((($i_04)*(14072))&-1)+1240)|0);
 var $73=((((HEAPU8[($72)])|(HEAPU8[((($72)+(1))|0)]<<8)|(HEAPU8[((($72)+(2))|0)]<<16)|(HEAPU8[((($72)+(3))|0)]<<24))|0));
 tempBigInt=$73;HEAP8[($44)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($44)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($44)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($44)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$1$0=2;
 var $$etemp$1$1=0;

 HEAP16[(($checksum_i)>>1)]=0;
 var $i_01_i=0;label=16;break;
 case 16: 
 var $i_01_i;
 var $75=(($address+$i_01_i)|0);
 var $76=HEAP8[($75)];
 var $77=$i_01_i&1;
 var $78=(($tmpcast_i+$77)|0);
 var $79=HEAP8[($78)];
 var $80=$79^$76;
 HEAP8[($78)]=$80;
 var $81=((($i_01_i)+(1))|0);
 var $82=($81>>>0)<36;
 if($82){var $i_01_i=$81;label=16;break;}else{label=17;break;}
 case 17: 
 var $83=HEAP16[(($checksum_i)>>1)];
 var $$etemp$2$0=2;
 var $$etemp$2$1=0;

 tempBigInt=$83;HEAP8[($47)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($47)+(1))|0)]=tempBigInt&0xff;
 var $84=(($36+((($i_04)*(14072))&-1)+53)|0);
 var $85=(($36+((($i_04)*(14072))&-1)+1228)|0);
 var $86=HEAP16[(($85)>>1)];
 var $87=_m_addfriend($1,$42,$84,$86);
 var $$etemp$3$0=38;
 var $$etemp$3$1=0;

 label=18;break;
 case 18: 
 var $88=((($i_04)+(1))|0);
 var $89=($88>>>0)<($37>>>0);
 if($89){var $i_04=$88;label=10;break;}else{var $_0=0;label=32;break;}
 case 19: 
 var $91=($length|0)!=0;
 var $92=($length>>>0)<128;
 var $or_cond=$91&$92;
 if($or_cond){label=20;break;}else{var $_0=0;label=32;break;}
 case 20: 
 var $94=(($length)&65535);
 var $95=($94&65535)>128;
 var $96=(($94<<16)>>16)==0;
 var $or_cond_i2=$95|$96;
 if($or_cond_i2){var $_0=0;label=32;break;}else{label=21;break;}
 case 21: 
 var $98=$length&65535;
 var $99=(($outer+1080)|0);
 assert($98 % 1 === 0);(_memcpy($99, $data, $98)|0);
 var $100=(($outer+1208)|0);
 var $101=$100;
 HEAP16[(($101)>>1)]=$94;
 var $102=(($outer+2228)|0);
 var $103=$102;
 var $104=HEAP32[(($103)>>2)];
 var $105=($104|0)==0;
 if($105){label=23;break;}else{label=22;break;}
 case 22: 
 var $106=(($outer+2224)|0);
 var $107=$106;
 var $i_02_i=0;label=25;break;
 case 23: 
 var $108=(($outer+2244)|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $111=($110|0)==0;
 if($111){var $_0=0;label=32;break;}else{label=24;break;}
 case 24: 
 var $112=(($outer+2240)|0);
 var $113=$112;
 var $114=((($98)+(37))|0);
 var $115=($114>>>0)>1024;
 var $116=(($packet_i_i_i)|0);
 var $117=(($packet_i_i_i+32)|0);
 var $118=$117;
 var $119=(($packet_i_i_i+37)|0);
 var $120=(($packet_i_i_i+36)|0);
 var $121=(($114)&65535);
 var $i_11_i=0;var $128=$110;label=26;break;
 case 25: 
 var $i_02_i;
 var $123=HEAP32[(($107)>>2)];
 var $124=(($123+((($i_02_i)*(14072))&-1)+1208)|0);
 HEAP8[($124)]=0;
 var $125=((($i_02_i)+(1))|0);
 var $126=HEAP32[(($103)>>2)];
 var $127=($125>>>0)<($126>>>0);
 if($127){var $i_02_i=$125;label=25;break;}else{label=23;break;}
 case 26: 
 var $128;
 var $i_11_i;
 var $129=HEAP32[(($113)>>2)];
 var $130=(($129+($i_11_i<<2))|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=($131|0)==0;
 if($132){var $145=$128;label=30;break;}else{label=27;break;}
 case 27: 
 var $134=(($131+496)|0);
 assert($98 % 1 === 0);(_memcpy($134, $data, $98)|0);
 var $135=(($131+624)|0);
 HEAP16[(($135)>>1)]=$94;
 if($115){label=29;break;}else{label=28;break;}
 case 28: 
 var $$etemp$4$0=1024;
 var $$etemp$4$1=0;

 var $137=(($131+460)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=((($138)+(1))|0);
 var $140=($139|0)==0;
 var $__i_i_i=($140?1:$139);
 HEAP32[(($137)>>2)]=$__i_i_i;
 var $141=_htonl($__i_i_i);
 var $142=(($131+4)|0);
 assert(32 % 1 === 0);(_memcpy($116, $142, 32)|0);
 tempBigInt=$141;HEAP8[($118)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($118)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($118)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($118)+(3))|0)]=tempBigInt&0xff;
 assert($98 % 1 === 0);(_memcpy($119, $134, $98)|0);
 HEAP8[($120)]=48;
 var $143=_sendto_allpeers($131,$116,$121);
 var $$etemp$5$0=1024;
 var $$etemp$5$1=0;

 label=29;break;
 case 29: 
 var $_pre_i=HEAP32[(($109)>>2)];
 var $145=$_pre_i;label=30;break;
 case 30: 
 var $145;
 var $146=((($i_11_i)+(1))|0);
 var $147=($146>>>0)<($145>>>0);
 if($147){var $i_11_i=$146;var $128=$145;label=26;break;}else{var $_0=0;label=32;break;}
 case 31: 
 var $149=HEAP32[((_stderr)>>2)];
 var $150=_fprintf($149,3280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$length,HEAP32[(((tempVarArgs)+(8))>>2)]=$2,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_0=0;label=32;break;
 case 32: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _sendpacket($net,$ip_port,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $a_i=sp;
 var $addr=(sp)+(8);
 var $1=(($net+2048)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($2<<16)>>16)==2;
 var $4=(($ip_port)|0);
 var $5=HEAP8[($4)];
 if($3){label=2;break;}else{label=4;break;}
 case 2: 
 var $7=(($5<<24)>>24)==2;
 if($7){label=3;break;}else{var $_1=-1;label=14;break;}
 case 3: 
 var $8=$addr;
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 label=5;break;
 case 4: 
 var $10=$addr;
 var $$etemp$1$0=128;
 var $$etemp$1$1=0;

 if((($5<<24)>>24)==2){ label=5;break;}else if((($5<<24)>>24)==10){ label=8;break;}else{var $_1=-1;label=14;break;}
 case 5: 
 var $12=(($2<<16)>>16)==10;
 if($12){label=6;break;}else{label=7;break;}
 case 6: 
 var $14=$addr;
 var $15=(($addr)|0);
 HEAP16[(($15)>>1)]=10;
 var $16=(($ip_port+20)|0);
 var $17=(((((HEAPU8[($16)])|(HEAPU8[((($16)+(1))|0)]<<8))<<16)>>16));
 var $18=(($14+2)|0);
 HEAP16[(($18)>>1)]=$17;
 var $19=_htonl(65535);
 var $20=(($ip_port+4)|0);
 var $21=$20;
 var $22=((((HEAPU8[($21)])|(HEAPU8[((($21)+(1))|0)]<<8)|(HEAPU8[((($21)+(2))|0)]<<16)|(HEAPU8[((($21)+(3))|0)]<<24))|0));
 var $23=(($addr+8)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=0;
 var $25=(($addr+12)|0);
 var $26=$25;
 HEAP32[(($26)>>2)]=0;
 var $27=(($addr+16)|0);
 var $28=$27;
 HEAP32[(($28)>>2)]=$19;
 var $29=(($addr+20)|0);
 var $30=$29;
 HEAP32[(($30)>>2)]=$22;
 var $31=(($addr+4)|0);
 HEAP32[(($31)>>2)]=0;
 var $32=(($addr+24)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=0;
 var $addrsize_0=28;label=9;break;
 case 7: 
 var $35=$addr;
 var $36=(($addr)|0);
 HEAP16[(($36)>>1)]=2;
 var $37=(($addr+4)|0);
 var $38=(($ip_port+4)|0);
 var $39=$38;
 var $40=((((HEAPU8[($39)])|(HEAPU8[((($39)+(1))|0)]<<8)|(HEAPU8[((($39)+(2))|0)]<<16)|(HEAPU8[((($39)+(3))|0)]<<24))|0));
 HEAP32[(($37)>>2)]=$40;
 var $41=(($ip_port+20)|0);
 var $42=(((((HEAPU8[($41)])|(HEAPU8[((($41)+(1))|0)]<<8))<<16)>>16));
 var $43=(($35+2)|0);
 HEAP16[(($43)>>1)]=$42;
 var $addrsize_0=16;label=9;break;
 case 8: 
 var $45=$addr;
 var $46=(($addr)|0);
 HEAP16[(($46)>>1)]=10;
 var $47=(($ip_port+20)|0);
 var $48=(((((HEAPU8[($47)])|(HEAPU8[((($47)+(1))|0)]<<8))<<16)>>16));
 var $49=(($45+2)|0);
 HEAP16[(($49)>>1)]=$48;
 var $50=(($ip_port+4)|0);
 var $51=(($addr+8)|0);
 var $52=$50;
 assert(16 % 1 === 0);(_memcpy($51, $52, 16)|0);
 var $53=(($addr+4)|0);
 HEAP32[(($53)>>2)]=0;
 var $54=(($addr+24)|0);
 var $55=$54;
 HEAP32[(($55)>>2)]=0;
 var $addrsize_0=28;label=9;break;
 case 9: 
 var $addrsize_0;
 var $57=(($net+2052)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=$addr;
 var $60=_sendto($58,$data,$length,0,$59,$addrsize_0);
 var $61=($60|0)>-1;
 var $62=($60|0)==($length|0);
 var $or_cond=$61&$62;
 if($or_cond){label=10;break;}else{label=11;break;}
 case 10: 
 var $64=(($net+2056)|0);
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $st$3$0=(($64)|0);
 HEAP32[(($st$3$0)>>2)]=$$etemp$2$0;
 var $st$4$1=(($64+4)|0);
 HEAP32[(($st$4$1)>>2)]=$$etemp$2$1;
 var $_1=$length;label=14;break;
 case 11: 
 var $66=($60|0)<0;
 if($66){label=12;break;}else{var $_1=$60;label=14;break;}
 case 12: 
 var $68=___errno_location();
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==11;
 if($70){label=13;break;}else{var $_1=$60;label=14;break;}
 case 13: 
 var $72=$a_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $73=_gettimeofday($a_i,0);
 var $74=(($a_i)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76$0=$75;
 var $76$1=((((($75|0)<0))|0)?-1:0);
 var $$etemp$6$0=1000000;
 var $$etemp$6$1=0;
 var $77$0=___muldi3($76$0,$76$1,$$etemp$6$0,$$etemp$6$1);var $77$1=tempRet0;
 var $78=(($a_i+4)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80$0=$79;
 var $80$1=((((($79|0)<0))|0)?-1:0);
 var $81$0=_i64Add($77$0,$77$1,$80$0,$80$1);var $81$1=tempRet0;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $82=(($net+2056)|0);
 var $st$8$0=(($82)|0);
 HEAP32[(($st$8$0)>>2)]=$81$0;
 var $st$9$1=(($82+4)|0);
 HEAP32[(($st$9$1)>>2)]=$81$1;
 var $_1=$60;label=14;break;
 case 14: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _ip_equal($a,$b){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($a|0)==0;
 var $2=($b|0)==0;
 var $or_cond=$1|$2;
 if($or_cond){var $_0=0;label=23;break;}else{label=2;break;}
 case 2: 
 var $4=(($a)|0);
 var $5=HEAP8[($4)];
 var $6=(($b)|0);
 var $7=HEAP8[($6)];
 var $8=(($5<<24)>>24)==(($7<<24)>>24);
 var $9=(($5<<24)>>24)==2;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 if($9){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=(($a+4)|0);
 var $13=$12;
 var $14=((((HEAPU8[($13)])|(HEAPU8[((($13)+(1))|0)]<<8)|(HEAPU8[((($13)+(2))|0)]<<16)|(HEAPU8[((($13)+(3))|0)]<<24))|0));
 var $15=(($b+4)|0);
 var $16=$15;
 var $17=((((HEAPU8[($16)])|(HEAPU8[((($16)+(1))|0)]<<8)|(HEAPU8[((($16)+(2))|0)]<<16)|(HEAPU8[((($16)+(3))|0)]<<24))|0));
 var $18=($14|0)==($17|0);
 var $19=($18&1);
 var $_0=$19;label=23;break;
 case 5: 
 var $21=(($5<<24)>>24)==10;
 if($21){label=6;break;}else{var $_0=0;label=23;break;}
 case 6: 
 var $23=(($a+4)|0);
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 var $26=(($b+4)|0);
 var $27=$26;
 var $28=HEAP32[(($27)>>2)];
 var $29=((($25)-($28))|0);
 var $30=(($24+4)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=(($27+4)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=((($31)-($33))|0);
 var $35=$34|$29;
 var $36=(($a+12)|0);
 var $37=$36;
 var $38=HEAP32[(($37)>>2)];
 var $39=(($b+12)|0);
 var $40=$39;
 var $41=HEAP32[(($40)>>2)];
 var $42=((($38)-($41))|0);
 var $43=$35|$42;
 var $44=(($24+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($27+12)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=((($45)-($47))|0);
 var $49=$43|$48;
 var $50=($49|0)==0;
 var $51=($50&1);
 var $_0=$51;label=23;break;
 case 7: 
 var $53=(($7<<24)>>24)==10;
 var $or_cond1=$9&$53;
 if($or_cond1){label=8;break;}else{label=15;break;}
 case 8: 
 var $55=(($b+4)|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=9;break;}else{var $_0=0;label=23;break;}
 case 9: 
 var $60=(($56+4)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=($61|0)==0;
 if($62){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $64=$55;
 var $65=(($b+12)|0);
 var $66=$65;
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24)==0;
 if($68){label=11;break;}else{var $_0=0;label=23;break;}
 case 11: 
 var $70=(($64+9)|0);
 var $71=HEAP8[($70)];
 var $72=(($71<<24)>>24)==0;
 if($72){label=12;break;}else{var $_0=0;label=23;break;}
 case 12: 
 var $74=(($64+10)|0);
 var $75=HEAP8[($74)];
 var $76=(($75<<24)>>24)==-1;
 if($76){label=13;break;}else{var $_0=0;label=23;break;}
 case 13: 
 var $78=(($64+11)|0);
 var $79=HEAP8[($78)];
 var $80=(($79<<24)>>24)==-1;
 if($80){label=14;break;}else{var $_0=0;label=23;break;}
 case 14: 
 var $82=(($a+4)|0);
 var $83=$82;
 var $84=((((HEAPU8[($83)])|(HEAPU8[((($83)+(1))|0)]<<8)|(HEAPU8[((($83)+(2))|0)]<<16)|(HEAPU8[((($83)+(3))|0)]<<24))|0));
 var $85=$55;
 var $86=(($85+12)|0);
 var $87=((((HEAPU8[($86)])|(HEAPU8[((($86)+(1))|0)]<<8)|(HEAPU8[((($86)+(2))|0)]<<16)|(HEAPU8[((($86)+(3))|0)]<<24))|0));
 var $88=($84|0)==($87|0);
 var $89=($88&1);
 var $_0=$89;label=23;break;
 case 15: 
 var $91=(($5<<24)>>24)==10;
 var $92=(($7<<24)>>24)==2;
 var $or_cond2=$91&$92;
 if($or_cond2){label=16;break;}else{var $_0=0;label=23;break;}
 case 16: 
 var $94=(($a+4)|0);
 var $95=$94;
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==0;
 if($97){label=17;break;}else{var $_0=0;label=23;break;}
 case 17: 
 var $99=(($95+4)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){label=18;break;}else{var $_0=0;label=23;break;}
 case 18: 
 var $103=$94;
 var $104=(($a+12)|0);
 var $105=$104;
 var $106=HEAP8[($105)];
 var $107=(($106<<24)>>24)==0;
 if($107){label=19;break;}else{var $_0=0;label=23;break;}
 case 19: 
 var $109=(($103+9)|0);
 var $110=HEAP8[($109)];
 var $111=(($110<<24)>>24)==0;
 if($111){label=20;break;}else{var $_0=0;label=23;break;}
 case 20: 
 var $113=(($103+10)|0);
 var $114=HEAP8[($113)];
 var $115=(($114<<24)>>24)==-1;
 if($115){label=21;break;}else{var $_0=0;label=23;break;}
 case 21: 
 var $117=(($103+11)|0);
 var $118=HEAP8[($117)];
 var $119=(($118<<24)>>24)==-1;
 if($119){label=22;break;}else{var $_0=0;label=23;break;}
 case 22: 
 var $121=$94;
 var $122=(($121+12)|0);
 var $123=((((HEAPU8[($122)])|(HEAPU8[((($122)+(1))|0)]<<8)|(HEAPU8[((($122)+(2))|0)]<<16)|(HEAPU8[((($122)+(3))|0)]<<24))|0));
 var $124=(($b+4)|0);
 var $125=$124;
 var $126=((((HEAPU8[($125)])|(HEAPU8[((($125)+(1))|0)]<<8)|(HEAPU8[((($125)+(2))|0)]<<16)|(HEAPU8[((($125)+(3))|0)]<<24))|0));
 var $127=($123|0)==($126|0);
 var $128=($127&1);
 var $_0=$128;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_onion_packet($net,$path,$dest,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $dest; $dest=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($dest)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($dest)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($dest)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce=sp;
 var $1=((($length)+(241))|0);
 var $2=($1>>>0)>1024;
 var $3=($length|0)==0;
 var $or_cond=$2|$3;
 if($or_cond){var $_1=-1;label=10;break;}else{label=2;break;}
 case 2: 
 var $5=(($dest+1)|0);
 HEAP8[($5)]=0;
 var $6=(($dest+2)|0);
 HEAP8[($6)]=0;
 var $7=(($dest+3)|0);
 HEAP8[($7)]=0;
 var $8=(($dest)|0);
 var $9=HEAP8[($8)];
 if((($9<<24)>>24)==2){ label=3;break;}else if((($9<<24)>>24)==10){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($8)]=2;
 label=5;break;
 case 4: 
 HEAP8[($8)]=10;
 label=5;break;
 case 5: 
 var $12=((($length)+(24))|0);
 var $13=_llvm_stacksave();
 var $14=STACKTOP;STACKTOP = (STACKTOP + $12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert(24 % 1 === 0);(_memcpy($14, $8, 24)|0);
 var $15=(($14+24)|0);
 assert($length % 1 === 0);(_memcpy($15, $data, $length)|0);
 var $16=(($nonce)|0);
 var $$etemp$0$0=24;
 var $$etemp$0$1=0;
 _randombytes($16,$$etemp$0$0,$$etemp$0$1);
 var $17=((($length)+(96))|0);
 var $18=STACKTOP;STACKTOP = (STACKTOP + $17)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $19=(($path+240)|0);
 assert(24 % 1 === 0);(_memcpy($18, $19, 24)|0);
 var $20=(($18+24)|0);
 var $21=(($path+160)|0);
 assert(32 % 1 === 0);(_memcpy($20, $21, 32)|0);
 var $22=(($path+64)|0);
 var $23=(($18+56)|0);
 var $24=_encrypt_data_fast($22,$16,$14,$12,$23);
 var $25=((($length)+(40))|0);
 var $26=($24|0)==($25|0);
 if($26){label=6;break;}else{var $_0=-1;label=9;break;}
 case 6: 
 var $28=((($length)+(168))|0);
 var $29=STACKTOP;STACKTOP = (STACKTOP + $28)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $30=(($path+216)|0);
 assert(24 % 1 === 0);(_memcpy($29, $30, 24)|0);
 var $31=(($29+24)|0);
 var $32=(($path+128)|0);
 assert(32 % 1 === 0);(_memcpy($31, $32, 32)|0);
 var $33=(($path+32)|0);
 var $34=(($29+56)|0);
 var $35=_encrypt_data_fast($33,$16,$18,$17,$34);
 var $36=((($length)+(112))|0);
 var $37=($35|0)==($36|0);
 if($37){label=7;break;}else{var $_0=-1;label=9;break;}
 case 7: 
 var $39=STACKTOP;STACKTOP = (STACKTOP + $1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP8[($39)]=-128;
 var $40=(($39+1)|0);
 assert(24 % 1 === 0);(_memcpy($40, $16, 24)|0);
 var $41=(($39+25)|0);
 var $42=(($path+96)|0);
 assert(32 % 1 === 0);(_memcpy($41, $42, 32)|0);
 var $43=(($path)|0);
 var $44=(($39+57)|0);
 var $45=_encrypt_data_fast($43,$16,$29,$28,$44);
 var $46=((($length)+(184))|0);
 var $47=($45|0)==($46|0);
 if($47){label=8;break;}else{var $_0=-1;label=9;break;}
 case 8: 
 var $49=(($path+192)|0);
 var $50=_sendpacket($net,$49,$39,$1);
 var $not_=($50|0)!=($1|0);
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=9;break;
 case 9: 
 var $_0;
 _llvm_stackrestore($13);
 var $_1=$_0;label=10;break;
 case 10: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _send_onion_response($net,$dest,$data,$length,$ret){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $dest; $dest=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($dest)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($dest)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($dest)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];

 var $1=((($length)+(193))|0);
 var $2=STACKTOP;STACKTOP = (STACKTOP + $1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP8[($2)]=-116;
 var $3=(($2+1)|0);
 assert(192 % 1 === 0);(_memcpy($3, $ret, 192)|0);
 var $4=(($2+193)|0);
 assert($length % 1 === 0);(_memcpy($4, $data, $length)|0);
 var $5=_sendpacket($net,$dest,$2,$1);
 var $not_=($5|0)!=($1|0);
 var $_=(($not_<<31)>>31);
 STACKTOP=sp;return $_;
}


function _handle_send_initial($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $send_to_i=(sp)+(2096);
 var $data_i=(sp)+(2120);
 var $source1=(sp)+(3144);
 var $plain=(sp)+(3168);
 var $shared_key=(sp)+(4192);
 var $length_off=((($length)-(242))|0);
 var $1=($length_off>>>0)>782;
 if($1){var $_1=1;label=18;break;}else{label=2;break;}
 case 2: 
 var $3=(($object+40)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3600;
 var $$etemp$2$1=0;
 var $6$0=_i64Add($5$0,$5$1,$$etemp$2$0,$$etemp$2$1);var $6$1=tempRet0;
 var $ld$3$0=13552;
 var $7$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $7$1=HEAP32[(($ld$4$1)>>2)];
 var $8=(($6$1>>>0) > ($7$1>>>0)) | (((($6$1>>>0) == ($7$1>>>0) & ($6$0>>>0) >  ($7$0>>>0))));
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($object+8)|0);
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 _randombytes($10,$$etemp$5$0,$$etemp$5$1);
 var $ld$6$0=13552;
 var $11$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $11$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($4)|0);
 HEAP32[(($st$8$0)>>2)]=$11$0;
 var $st$9$1=(($4+4)|0);
 HEAP32[(($st$9$1)>>2)]=$11$1;
 label=4;break;
 case 4: 
 var $12=(($plain)|0);
 var $$etemp$10$0=1024;
 var $$etemp$10$1=0;

 var $13=(($object+48)|0);
 var $14=$13;
 var $15=(($shared_key)|0);
 var $16=$object;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+14932)|0);
 var $19=(($packet+1)|0);
 var $20=(($packet+25)|0);
 _get_shared_key($14,$15,$18,$20);
 var $length_off_i=((($length)-(74))|0);
 var $21=($length_off_i>>>0)>1007;
 if($21){label=9;break;}else{label=5;break;}
 case 5: 
 var $23=((($length)-(57))|0);
 var $24=(($packet+57)|0);
 var $25=(($temp_plain_i)|0);
 var $$etemp$11$0=1056;
 var $$etemp$11$1=0;

 var $26=(($temp_encrypted_i)|0);
 var $$etemp$12$0=1040;
 var $$etemp$12$1=0;

 _memset($26, 0, 1040)|0;
 var $27=(($temp_encrypted_i+16)|0);
 assert($23 % 1 === 0);(_memcpy($27, $24, $23)|0);
 var $28=((($length)-(41))|0);
 var $29$0=$28;
 var $29$1=0;
 var $30=_crypto_secretbox_xsalsa20poly1305_open($25,$26,$29$0,$29$1,$19,$15);
 var $31=($30|0)==-1;
 if($31){label=9;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=6;break;}
 case 6: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $32=(($temp_plain_i+$i_02_i_i)|0);
 var $33=HEAP8[($32)];
 var $34=$33|$check_01_i_i;
 var $35=((($i_02_i_i)+(1))|0);
 var $36=($35>>>0)<32;
 if($36){var $check_01_i_i=$34;var $i_02_i_i=$35;label=6;break;}else{label=7;break;}
 case 7: 
 var $37=(($34<<24)>>24)==0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=(($temp_plain_i+32)|0);
 var $39=((($length)-(73))|0);
 assert($39 % 1 === 0);(_memcpy($12, $38, $39)|0);
 var $_1_i2=$39;label=10;break;
 case 9: 
 var $40=($length|0)==72;
 if($40){var $_1_i2=-1;label=10;break;}else{var $_1=1;label=18;break;}
 case 10: 
 var $_1_i2;
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $42=(($send_to_i)|0);
 var $$etemp$13$0=24;
 var $$etemp$13$1=0;

 assert(24 % 1 === 0);(_memcpy($42, $12, 24)|0);
 var $43=HEAP8[($42)];
 if((($43<<24)>>24)==2){ label=11;break;}else if((($43<<24)>>24)==10){ label=12;break;}else{label=13;break;}
 case 11: 
 HEAP8[($42)]=2;
 label=13;break;
 case 12: 
 HEAP8[($42)]=10;
 label=13;break;
 case 13: 
 var $46=(($data_i)|0);
 var $$etemp$14$0=1024;
 var $$etemp$14$1=0;

 HEAP8[($46)]=-127;
 var $47=(($data_i+1)|0);
 assert(24 % 1 === 0);(_memcpy($47, $19, 24)|0);
 var $48=(($data_i+25)|0);
 var $49=((($_1_i2)-(24))|0);
 var $50=(($plain+24)|0);
 assert($49 % 1 === 0);(_memcpy($48, $50, $49)|0);
 var $51=((($_1_i2)+(1))|0);
 var $52=(($data_i+$51)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $$etemp$16$0=24;
 var $$etemp$16$1=0;
 var $$etemp$15=15032;
 _randombytes($$etemp$15,$$etemp$16$0,$$etemp$16$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=15;break;
 case 15: 
 var $i_01_i_i;
 var $54=((15032+$i_01_i_i)|0);
 var $55=HEAP8[($54)];
 var $56=((($55)+(1))&255);
 HEAP8[($54)]=$56;
 var $57=(($56<<24)>>24)==0;
 var $58=((($i_01_i_i)+(1))|0);
 var $59=($58>>>0)<24;
 var $or_cond_i_i=$57&$59;
 if($or_cond_i_i){var $i_01_i_i=$58;label=15;break;}else{label=16;break;}
 case 16: 
 assert(24 % 1 === 0);(_memcpy($52, 15032, 24)|0);
 var $60=(($object+8)|0);
 var $_sum_i=((($_1_i2)+(25))|0);
 var $61=(($data_i+$_sum_i)|0);
 var $62=_encrypt_data_symmetric($60,$52,$tmp,24,$61);
 var $63=($62|0)==40;
 if($63){label=17;break;}else{var $_1=1;label=18;break;}
 case 17: 
 var $65=((($_1_i2)+(65))|0);
 var $66=(($object+4)|0);
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=_sendpacket($68,$send_to_i,$46,$65);
 var $not__i=($69|0)!=($65|0);
 var $__i=($not__i&1);
 var $_1=$__i;label=18;break;
 case 18: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_send_1($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4288)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $plain=(sp)+(2096);
 var $shared_key=(sp)+(3120);
 var $send_to=(sp)+(3152);
 var $data=(sp)+(3176);
 var $ret_data=(sp)+(4200);
 var $length_off=((($length)-(234))|0);
 var $1=($length_off>>>0)>790;
 if($1){var $_2=1;label=18;break;}else{label=2;break;}
 case 2: 
 var $3=(($object+40)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3600;
 var $$etemp$2$1=0;
 var $6$0=_i64Add($5$0,$5$1,$$etemp$2$0,$$etemp$2$1);var $6$1=tempRet0;
 var $ld$3$0=13552;
 var $7$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $7$1=HEAP32[(($ld$4$1)>>2)];
 var $8=(($6$1>>>0) > ($7$1>>>0)) | (((($6$1>>>0) == ($7$1>>>0) & ($6$0>>>0) >  ($7$0>>>0))));
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($object+8)|0);
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 _randombytes($10,$$etemp$5$0,$$etemp$5$1);
 var $ld$6$0=13552;
 var $11$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $11$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($4)|0);
 HEAP32[(($st$8$0)>>2)]=$11$0;
 var $st$9$1=(($4+4)|0);
 HEAP32[(($st$9$1)>>2)]=$11$1;
 label=4;break;
 case 4: 
 var $12=(($plain)|0);
 var $$etemp$10$0=1024;
 var $$etemp$10$1=0;

 var $13=(($object+81968)|0);
 var $14=$13;
 var $15=(($shared_key)|0);
 var $16=$object;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+14932)|0);
 var $19=(($packet+1)|0);
 var $20=(($packet+25)|0);
 _get_shared_key($14,$15,$18,$20);
 var $length_off_i=((($length)-(138))|0);
 var $21=($length_off_i>>>0)>1007;
 if($21){label=9;break;}else{label=5;break;}
 case 5: 
 var $23=((($length)-(121))|0);
 var $24=(($packet+57)|0);
 var $25=(($temp_plain_i)|0);
 var $$etemp$11$0=1056;
 var $$etemp$11$1=0;

 var $26=(($temp_encrypted_i)|0);
 var $$etemp$12$0=1040;
 var $$etemp$12$1=0;

 _memset($26, 0, 1040)|0;
 var $27=(($temp_encrypted_i+16)|0);
 assert($23 % 1 === 0);(_memcpy($27, $24, $23)|0);
 var $28=((($length)-(105))|0);
 var $29$0=$28;
 var $29$1=0;
 var $30=_crypto_secretbox_xsalsa20poly1305_open($25,$26,$29$0,$29$1,$19,$15);
 var $31=($30|0)==-1;
 if($31){label=9;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=6;break;}
 case 6: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $32=(($temp_plain_i+$i_02_i_i)|0);
 var $33=HEAP8[($32)];
 var $34=$33|$check_01_i_i;
 var $35=((($i_02_i_i)+(1))|0);
 var $36=($35>>>0)<32;
 if($36){var $check_01_i_i=$34;var $i_02_i_i=$35;label=6;break;}else{label=7;break;}
 case 7: 
 var $37=(($34<<24)>>24)==0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=(($temp_plain_i+32)|0);
 var $39=((($length)-(137))|0);
 assert($39 % 1 === 0);(_memcpy($12, $38, $39)|0);
 var $_1_i1=$39;label=10;break;
 case 9: 
 var $40=($length|0)==136;
 if($40){var $_1_i1=-1;label=10;break;}else{var $_2=1;label=18;break;}
 case 10: 
 var $_1_i1;
 var $42=(($send_to)|0);
 assert(24 % 1 === 0);(_memcpy($42, $12, 24)|0);
 var $43=HEAP8[($42)];
 if((($43<<24)>>24)==2){ label=11;break;}else if((($43<<24)>>24)==10){ label=12;break;}else{label=13;break;}
 case 11: 
 HEAP8[($42)]=2;
 label=13;break;
 case 12: 
 HEAP8[($42)]=10;
 label=13;break;
 case 13: 
 var $46=(($data)|0);
 var $$etemp$13$0=1024;
 var $$etemp$13$1=0;

 HEAP8[($46)]=-126;
 var $47=(($data+1)|0);
 assert(24 % 1 === 0);(_memcpy($47, $19, 24)|0);
 var $48=(($data+25)|0);
 var $49=((($_1_i1)-(24))|0);
 var $50=(($plain+24)|0);
 assert($49 % 1 === 0);(_memcpy($48, $50, $49)|0);
 var $51=((($_1_i1)+(1))|0);
 var $52=(($data+$51)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $$etemp$15$0=24;
 var $$etemp$15$1=0;
 var $$etemp$14=15032;
 _randombytes($$etemp$14,$$etemp$15$0,$$etemp$15$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=15;break;
 case 15: 
 var $i_01_i_i;
 var $54=((15032+$i_01_i_i)|0);
 var $55=HEAP8[($54)];
 var $56=((($55)+(1))&255);
 HEAP8[($54)]=$56;
 var $57=(($56<<24)>>24)==0;
 var $58=((($i_01_i_i)+(1))|0);
 var $59=($58>>>0)<24;
 var $or_cond_i_i=$57&$59;
 if($or_cond_i_i){var $i_01_i_i=$58;label=15;break;}else{label=16;break;}
 case 16: 
 assert(24 % 1 === 0);(_memcpy($52, 15032, 24)|0);
 var $60=(($ret_data)|0);
 var $$etemp$16$0=88;
 var $$etemp$16$1=0;

 var $61=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($60, $61, 24)|0);
 var $62=(($ret_data+24)|0);
 var $63=((($length)-(64))|0);
 var $64=(($packet+$63)|0);
 assert(64 % 1 === 0);(_memcpy($62, $64, 64)|0);
 var $65=(($object+8)|0);
 var $_sum=((($_1_i1)+(25))|0);
 var $66=(($data+$_sum)|0);
 var $67=_encrypt_data_symmetric($65,$52,$60,88,$66);
 var $68=($67|0)==104;
 if($68){label=17;break;}else{var $_2=1;label=18;break;}
 case 17: 
 var $70=((($_1_i1)+(129))|0);
 var $71=(($object+4)|0);
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=_sendpacket($73,$send_to,$46,$70);
 var $not_=($74|0)!=($70|0);
 var $_=($not_&1);
 var $_2=$_;label=18;break;
 case 18: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_send_2($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4352)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $plain=(sp)+(2096);
 var $shared_key=(sp)+(3120);
 var $send_to=(sp)+(3152);
 var $data=(sp)+(3176);
 var $ret_data=(sp)+(4200);
 var $length_off=((($length)-(226))|0);
 var $1=($length_off>>>0)>798;
 if($1){var $_2=1;label=18;break;}else{label=2;break;}
 case 2: 
 var $3=(($object+40)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3600;
 var $$etemp$2$1=0;
 var $6$0=_i64Add($5$0,$5$1,$$etemp$2$0,$$etemp$2$1);var $6$1=tempRet0;
 var $ld$3$0=13552;
 var $7$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $7$1=HEAP32[(($ld$4$1)>>2)];
 var $8=(($6$1>>>0) > ($7$1>>>0)) | (((($6$1>>>0) == ($7$1>>>0) & ($6$0>>>0) >  ($7$0>>>0))));
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=(($object+8)|0);
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 _randombytes($10,$$etemp$5$0,$$etemp$5$1);
 var $ld$6$0=13552;
 var $11$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $11$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($4)|0);
 HEAP32[(($st$8$0)>>2)]=$11$0;
 var $st$9$1=(($4+4)|0);
 HEAP32[(($st$9$1)>>2)]=$11$1;
 label=4;break;
 case 4: 
 var $12=(($plain)|0);
 var $$etemp$10$0=1024;
 var $$etemp$10$1=0;

 var $13=(($object+163888)|0);
 var $14=$13;
 var $15=(($shared_key)|0);
 var $16=$object;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+14932)|0);
 var $19=(($packet+25)|0);
 _get_shared_key($14,$15,$18,$19);
 var $length_off_i=((($length)-(202))|0);
 var $20=($length_off_i>>>0)>1007;
 if($20){label=9;break;}else{label=5;break;}
 case 5: 
 var $22=((($length)-(185))|0);
 var $23=(($packet+57)|0);
 var $24=(($packet+1)|0);
 var $25=(($temp_plain_i)|0);
 var $$etemp$11$0=1056;
 var $$etemp$11$1=0;

 var $26=(($temp_encrypted_i)|0);
 var $$etemp$12$0=1040;
 var $$etemp$12$1=0;

 _memset($26, 0, 1040)|0;
 var $27=(($temp_encrypted_i+16)|0);
 assert($22 % 1 === 0);(_memcpy($27, $23, $22)|0);
 var $28=((($length)-(169))|0);
 var $29$0=$28;
 var $29$1=0;
 var $30=_crypto_secretbox_xsalsa20poly1305_open($25,$26,$29$0,$29$1,$24,$15);
 var $31=($30|0)==-1;
 if($31){label=9;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=6;break;}
 case 6: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $32=(($temp_plain_i+$i_02_i_i)|0);
 var $33=HEAP8[($32)];
 var $34=$33|$check_01_i_i;
 var $35=((($i_02_i_i)+(1))|0);
 var $36=($35>>>0)<32;
 if($36){var $check_01_i_i=$34;var $i_02_i_i=$35;label=6;break;}else{label=7;break;}
 case 7: 
 var $37=(($34<<24)>>24)==0;
 if($37){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=(($temp_plain_i+32)|0);
 var $39=((($length)-(201))|0);
 assert($39 % 1 === 0);(_memcpy($12, $38, $39)|0);
 var $_1_i1=$39;label=10;break;
 case 9: 
 var $40=($length|0)==200;
 if($40){var $_1_i1=-1;label=10;break;}else{var $_2=1;label=18;break;}
 case 10: 
 var $_1_i1;
 var $42=(($send_to)|0);
 assert(24 % 1 === 0);(_memcpy($42, $12, 24)|0);
 var $43=HEAP8[($42)];
 if((($43<<24)>>24)==2){ label=11;break;}else if((($43<<24)>>24)==10){ label=12;break;}else{label=13;break;}
 case 11: 
 HEAP8[($42)]=2;
 label=13;break;
 case 12: 
 HEAP8[($42)]=10;
 label=13;break;
 case 13: 
 var $46=(($data)|0);
 var $$etemp$13$0=1024;
 var $$etemp$13$1=0;

 var $47=((($_1_i1)-(24))|0);
 var $48=(($plain+24)|0);
 assert($47 % 1 === 0);(_memcpy($46, $48, $47)|0);
 var $49=(($data+$47)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $$etemp$15$0=24;
 var $$etemp$15$1=0;
 var $$etemp$14=15032;
 _randombytes($$etemp$14,$$etemp$15$0,$$etemp$15$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=15;break;
 case 15: 
 var $i_01_i_i;
 var $51=((15032+$i_01_i_i)|0);
 var $52=HEAP8[($51)];
 var $53=((($52)+(1))&255);
 HEAP8[($51)]=$53;
 var $54=(($53<<24)>>24)==0;
 var $55=((($i_01_i_i)+(1))|0);
 var $56=($55>>>0)<24;
 var $or_cond_i_i=$54&$56;
 if($or_cond_i_i){var $i_01_i_i=$55;label=15;break;}else{label=16;break;}
 case 16: 
 assert(24 % 1 === 0);(_memcpy($49, 15032, 24)|0);
 var $57=(($ret_data)|0);
 var $$etemp$16$0=152;
 var $$etemp$16$1=0;

 var $58=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($57, $58, 24)|0);
 var $59=(($ret_data+24)|0);
 var $60=((($length)-(128))|0);
 var $61=(($packet+$60)|0);
 assert(128 % 1 === 0);(_memcpy($59, $61, 128)|0);
 var $62=(($object+8)|0);
 var $63=(($data+$_1_i1)|0);
 var $64=_encrypt_data_symmetric($62,$49,$57,152,$63);
 var $65=($64|0)==168;
 if($65){label=17;break;}else{var $_2=1;label=18;break;}
 case 17: 
 var $67=((($_1_i1)+(168))|0);
 var $68=(($object+4)|0);
 var $69=$68;
 var $70=HEAP32[(($69)>>2)];
 var $71=_sendpacket($70,$send_to,$46,$67);
 var $not_=($71|0)!=($67|0);
 var $_=($not_&1);
 var $_2=$_;label=18;break;
 case 18: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_recv_3($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $plain=sp;
 var $send_to=(sp)+(152);
 var $data=(sp)+(176);
 var $length_off=((($length)-(194))|0);
 var $1=($length_off>>>0)>830;
 if($1){var $_2=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $3=(($object+40)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3600;
 var $$etemp$2$1=0;
 var $6$0=_i64Add($5$0,$5$1,$$etemp$2$0,$$etemp$2$1);var $6$1=tempRet0;
 var $ld$3$0=13552;
 var $7$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $7$1=HEAP32[(($ld$4$1)>>2)];
 var $8=(($6$1>>>0) > ($7$1>>>0)) | (((($6$1>>>0) == ($7$1>>>0) & ($6$0>>>0) >  ($7$0>>>0))));
 var $_pre=(($object+8)|0);
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 _randombytes($_pre,$$etemp$5$0,$$etemp$5$1);
 var $ld$6$0=13552;
 var $10$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $10$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($4)|0);
 HEAP32[(($st$8$0)>>2)]=$10$0;
 var $st$9$1=(($4+4)|0);
 HEAP32[(($st$9$1)>>2)]=$10$1;
 label=4;break;
 case 4: 
 var $11=(($plain)|0);
 var $$etemp$10$0=152;
 var $$etemp$10$1=0;

 var $12=(($packet+1)|0);
 var $13=(($packet+25)|0);
 var $14=_decrypt_data_symmetric($_pre,$12,$13,168,$11);
 var $15=($14|0)==152;
 if($15){label=5;break;}else{var $_2=1;label=6;break;}
 case 5: 
 var $17=(($send_to)|0);
 assert(24 % 1 === 0);(_memcpy($17, $11, 24)|0);
 var $18=(($data)|0);
 var $$etemp$11$0=1024;
 var $$etemp$11$1=0;

 HEAP8[($18)]=-115;
 var $19=(($data+1)|0);
 var $20=(($plain+24)|0);
 assert(128 % 1 === 0);(_memcpy($19, $20, 128)|0);
 var $21=(($data+129)|0);
 var $22=(($packet+193)|0);
 var $23=((($length)-(193))|0);
 assert($23 % 1 === 0);(_memcpy($21, $22, $23)|0);
 var $24=((($length)-(64))|0);
 var $25=(($object+4)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=_sendpacket($27,$send_to,$18,$24);
 var $not_=($28|0)!=($24|0);
 var $_=($not_&1);
 var $$etemp$12$0=1024;
 var $$etemp$12$1=0;

 var $_2=$_;label=6;break;
 case 6: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_recv_2($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $plain=sp;
 var $send_to=(sp)+(88);
 var $data=(sp)+(112);
 var $length_off=((($length)-(130))|0);
 var $1=($length_off>>>0)>894;
 if($1){var $_2=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $3=(($object+40)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3600;
 var $$etemp$2$1=0;
 var $6$0=_i64Add($5$0,$5$1,$$etemp$2$0,$$etemp$2$1);var $6$1=tempRet0;
 var $ld$3$0=13552;
 var $7$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $7$1=HEAP32[(($ld$4$1)>>2)];
 var $8=(($6$1>>>0) > ($7$1>>>0)) | (((($6$1>>>0) == ($7$1>>>0) & ($6$0>>>0) >  ($7$0>>>0))));
 var $_pre=(($object+8)|0);
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 _randombytes($_pre,$$etemp$5$0,$$etemp$5$1);
 var $ld$6$0=13552;
 var $10$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $10$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($4)|0);
 HEAP32[(($st$8$0)>>2)]=$10$0;
 var $st$9$1=(($4+4)|0);
 HEAP32[(($st$9$1)>>2)]=$10$1;
 label=4;break;
 case 4: 
 var $11=(($plain)|0);
 var $$etemp$10$0=88;
 var $$etemp$10$1=0;

 var $12=(($packet+1)|0);
 var $13=(($packet+25)|0);
 var $14=_decrypt_data_symmetric($_pre,$12,$13,104,$11);
 var $15=($14|0)==88;
 if($15){label=5;break;}else{var $_2=1;label=6;break;}
 case 5: 
 var $17=(($send_to)|0);
 assert(24 % 1 === 0);(_memcpy($17, $11, 24)|0);
 var $18=(($data)|0);
 var $$etemp$11$0=1024;
 var $$etemp$11$1=0;

 HEAP8[($18)]=-114;
 var $19=(($data+1)|0);
 var $20=(($plain+24)|0);
 assert(64 % 1 === 0);(_memcpy($19, $20, 64)|0);
 var $21=(($data+65)|0);
 var $22=(($packet+129)|0);
 var $23=((($length)-(129))|0);
 assert($23 % 1 === 0);(_memcpy($21, $22, $23)|0);
 var $24=((($length)-(64))|0);
 var $25=(($object+4)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=_sendpacket($27,$send_to,$18,$24);
 var $not_=($28|0)!=($24|0);
 var $_=($not_&1);
 var $$etemp$12$0=1024;
 var $$etemp$12$1=0;

 var $_2=$_;label=6;break;
 case 6: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_recv_1($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $send_to=sp;
 var $length_off=((($length)-(66))|0);
 var $1=($length_off>>>0)>958;
 if($1){var $_0=1;label=9;break;}else{label=2;break;}
 case 2: 
 var $3=(($object+40)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($4+4)|0);
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3600;
 var $$etemp$2$1=0;
 var $6$0=_i64Add($5$0,$5$1,$$etemp$2$0,$$etemp$2$1);var $6$1=tempRet0;
 var $ld$3$0=13552;
 var $7$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $7$1=HEAP32[(($ld$4$1)>>2)];
 var $8=(($6$1>>>0) > ($7$1>>>0)) | (((($6$1>>>0) == ($7$1>>>0) & ($6$0>>>0) >  ($7$0>>>0))));
 var $_pre=(($object+8)|0);
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;
 _randombytes($_pre,$$etemp$5$0,$$etemp$5$1);
 var $ld$6$0=13552;
 var $10$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $10$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($4)|0);
 HEAP32[(($st$8$0)>>2)]=$10$0;
 var $st$9$1=(($4+4)|0);
 HEAP32[(($st$9$1)>>2)]=$10$1;
 label=4;break;
 case 4: 
 var $11=(($packet+1)|0);
 var $12=(($packet+25)|0);
 var $13=(($send_to)|0);
 var $14=_decrypt_data_symmetric($_pre,$11,$12,40,$13);
 var $15=($14|0)==24;
 if($15){label=5;break;}else{var $_0=1;label=9;break;}
 case 5: 
 var $17=((($length)-(65))|0);
 var $18=(($object+245808)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=8;break;}else{label=6;break;}
 case 6: 
 var $23=HEAP8[($13)];
 if((($23<<24)>>24)==2|(($23<<24)>>24)==10){ label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($object+245812)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($packet+65)|0);
 var $29=(($17)&65535);
 var $30=FUNCTION_TABLE[$20]($27,$send_to,$28,$29);
 var $_0=$30;label=9;break;
 case 8: 
 var $32=(($object+4)|0);
 var $33=$32;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($packet+65)|0);
 var $36=_sendpacket($34,$send_to,$35,$17);
 var $not_=($36|0)!=($17|0);
 var $_=($not_&1);
 var $_0=$_;label=9;break;
 case 9: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_ping_request($ping,$ipp,$client_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ipp; $ipp=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ipp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ipp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ipp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ipp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ipp)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ipp)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $randnum_i=sp;
 var $ipp1=(sp)+(8);
 var $pk=(sp)+(32);
 var $ping_id=(sp)+(120);
 var $shared_key=(sp)+(128);
 var $1=(($pk)|0);
 var $$etemp$0$0=81;
 var $$etemp$0$1=0;

 var $2=_is_pinging($ping,$ipp);
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=17;break;}
 case 2: 
 var $5=(($ping)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$client_id;var $r_05_i_i=$7;label=3;break;
 case 3: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $8=HEAP8[($l_04_i_i)];
 var $9=HEAP8[($r_05_i_i)];
 var $10=(($8<<24)>>24)==(($9<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=((($_03_i_i)-(1))|0);
 var $13=(($l_04_i_i+1)|0);
 var $14=(($r_05_i_i+1)|0);
 var $15=($12|0)==0;
 if($15){label=17;break;}else{var $_03_i_i=$12;var $l_04_i_i=$13;var $r_05_i_i=$14;label=3;break;}
 case 5: 
 var $16=(($shared_key)|0);
 var $17=(($6+96896)|0);
 var $18=(($6+14932)|0);
 _get_shared_key($17,$16,$18,$client_id);
 var $tmp=(($ipp1)|0);
 var $tmp2=(($ipp)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $19=(($ping+36876)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($ping+36872)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($21)>>2)]=0;
 var $24=$20&511;
 HEAP32[(($19)>>2)]=$24;
 var $ld$1$0=13552;
 var $_pre$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=13556;
 var $_pre$1=HEAP32[(($ld$2$1)>>2)];
 var $48=$24;var $47=0;var $46$1=$_pre$1;var $46$0=$_pre$0;label=12;break;
 case 7: 
 var $25=$20&511;
 var $26=(($ping+8+((($25)*(72))&-1)+32)|0);
 var $ld$3$0=(($26)|0);
 var $27$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($26+4)|0);
 var $27$1=HEAP32[(($ld$4$1)>>2)];
 var $$etemp$5$0=3;
 var $$etemp$5$1=0;
 var $28$0=_i64Add($27$0,$27$1,$$etemp$5$0,$$etemp$5$1);var $28$1=tempRet0;
 var $ld$6$0=13552;
 var $29$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=13556;
 var $29$1=HEAP32[(($ld$7$1)>>2)];
 var $30=(($28$1>>>0) > ($29$1>>>0)) | (((($28$1>>>0) == ($29$1>>>0) & ($28$0>>>0) >  ($29$0>>>0))));
 if($30){var $new_pos_0_lcssa_i_i=$20;var $new_num_0_lcssa_i_i=$22;label=10;break;}else{var $new_num_03_i1_i=$22;var $new_pos_02_i2_i=$20;var $i_01_i3_i=0;label=8;break;}
 case 8: 
 var $i_01_i3_i;
 var $new_pos_02_i2_i;
 var $new_num_03_i1_i;
 var $31=((($new_pos_02_i2_i)+(1))|0);
 var $32=((($new_num_03_i1_i)-(1))|0);
 var $33=((($i_01_i3_i)+(1))|0);
 var $34=($33>>>0)<($22>>>0);
 if($34){label=9;break;}else{var $new_pos_0_lcssa_i_i=$31;var $new_num_0_lcssa_i_i=$32;label=10;break;}
 case 9: 
 var $35=((($20)+($33))|0);
 var $36=$35&511;
 var $37=(($ping+8+((($36)*(72))&-1)+32)|0);
 var $ld$8$0=(($37)|0);
 var $38$0=HEAP32[(($ld$8$0)>>2)];
 var $ld$9$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$9$1)>>2)];
 var $$etemp$10$0=3;
 var $$etemp$10$1=0;
 var $39$0=_i64Add($38$0,$38$1,$$etemp$10$0,$$etemp$10$1);var $39$1=tempRet0;
 var $40=(($39$1>>>0) > ($29$1>>>0)) | (((($39$1>>>0) == ($29$1>>>0) & ($39$0>>>0) >  ($29$0>>>0))));
 if($40){var $new_pos_0_lcssa_i_i=$31;var $new_num_0_lcssa_i_i=$32;label=10;break;}else{var $new_num_03_i1_i=$32;var $new_pos_02_i2_i=$31;var $i_01_i3_i=$33;label=8;break;}
 case 10: 
 var $new_num_0_lcssa_i_i;
 var $new_pos_0_lcssa_i_i;
 HEAP32[(($21)>>2)]=$new_num_0_lcssa_i_i;
 var $41=$new_pos_0_lcssa_i_i&511;
 HEAP32[(($19)>>2)]=$41;
 var $42=($new_num_0_lcssa_i_i|0)==512;
 if($42){label=11;break;}else{var $48=$41;var $47=$new_num_0_lcssa_i_i;var $46$1=$29$1;var $46$0=$29$0;label=12;break;}
 case 11: 
 HEAP32[(($21)>>2)]=511;
 var $44=((($new_pos_0_lcssa_i_i)+(1))|0);
 var $45=$44&511;
 HEAP32[(($19)>>2)]=$45;
 var $48=$45;var $47=511;var $46$1=$29$1;var $46$0=$29$0;label=12;break;
 case 12: 
 var $46$0;
 var $46$1;
 var $47;
 var $48;
 var $49=((($48)+($47))|0);
 var $50=$49&511;
 var $51=(($ping+8+((($50)*(72))&-1))|0);
 assert(24 % 1 === 0);(_memcpy($51, $tmp, 24)|0);
 var $52=(($ping+8+((($50)*(72))&-1)+32)|0);
 var $st$11$0=(($52)|0);
 HEAP32[(($st$11$0)>>2)]=$46$0;
 var $st$12$1=(($52+4)|0);
 HEAP32[(($st$12$1)>>2)]=$46$1;
 var $53=$randnum_i;
 var $$etemp$13$0=8;
 var $$etemp$13$1=0;

 var $$etemp$14$0=8;
 var $$etemp$14$1=0;
 _randombytes($53,$$etemp$14$0,$$etemp$14$1);
 var $ld$15$0=(($randnum_i)|0);
 var $54$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($randnum_i+4)|0);
 var $54$1=HEAP32[(($ld$16$1)>>2)];
 var $$etemp$17$0=8;
 var $$etemp$17$1=0;

 var $55=(($ping+8+((($50)*(72))&-1)+24)|0);
 var $st$18$0=(($55)|0);
 HEAP32[(($st$18$0)>>2)]=$54$0;
 var $st$19$1=(($55+4)|0);
 HEAP32[(($st$19$1)>>2)]=$54$1;
 var $56=(($ping+8+((($50)*(72))&-1)+40)|0);
 assert(32 % 1 === 0);(_memcpy($56, $16, 32)|0);
 var $57=HEAP32[(($21)>>2)];
 var $58=((($57)+(1))|0);
 HEAP32[(($21)>>2)]=$58;
 var $ld$20$0=(($55)|0);
 var $59$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($55+4)|0);
 var $59$1=HEAP32[(($ld$21$1)>>2)];
 var $st$22$0=(($ping_id)|0);
 HEAP32[(($st$22$0)>>2)]=$59$0;
 var $st$23$1=(($ping_id+4)|0);
 HEAP32[(($st$23$1)>>2)]=$59$1;
 HEAP8[($1)]=0;
 var $60=(($pk+1)|0);
 var $61=HEAP32[(($5)>>2)];
 var $62=(($61+14900)|0);
 assert(32 % 1 === 0);(_memcpy($60, $62, 32)|0);
 var $63=(($pk+33)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=14;break;}else{label=13;break;}
 case 13: 
 var $$etemp$25$0=24;
 var $$etemp$25$1=0;
 var $$etemp$24=15032;
 _randombytes($$etemp$24,$$etemp$25$0,$$etemp$25$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=14;break;
 case 14: 
 var $i_01_i_i;
 var $65=((15032+$i_01_i_i)|0);
 var $66=HEAP8[($65)];
 var $67=((($66)+(1))&255);
 HEAP8[($65)]=$67;
 var $68=(($67<<24)>>24)==0;
 var $69=((($i_01_i_i)+(1))|0);
 var $70=($69>>>0)<24;
 var $or_cond_i_i=$68&$70;
 if($or_cond_i_i){var $i_01_i_i=$69;label=14;break;}else{label=15;break;}
 case 15: 
 assert(24 % 1 === 0);(_memcpy($63, 15032, 24)|0);
 var $71=$ping_id;
 var $72=(($pk+57)|0);
 var $73=_encrypt_data_fast($16,$63,$71,8,$72);
 var $74=($73|0)==24;
 if($74){label=16;break;}else{label=17;break;}
 case 16: 
 var $76=HEAP32[(($5)>>2)];
 var $77=(($76+4)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=_sendpacket($78,$ipp,$1,81);
 label=17;break;
 case 17: 
 var $$etemp$26$0=81;
 var $$etemp$26$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _is_pinging($ping,$ipp){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ipp; $ipp=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ipp)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ipp)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ipp)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ipp)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ipp)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ipp)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($ipp)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){var $_0=0;label=14;break;}else{label=2;break;}
 case 2: 
 var $5=(($ping+36876)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($ping+36872)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=0;
 var $10=$6&511;
 HEAP32[(($5)>>2)]=$10;
 var $_0=0;label=14;break;
 case 4: 
 var $11=$6&511;
 var $12=(($ping+8+((($11)*(72))&-1)+32)|0);
 var $ld$0$0=(($12)|0);
 var $13$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($12+4)|0);
 var $13$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=3;
 var $$etemp$2$1=0;
 var $14$0=_i64Add($13$0,$13$1,$$etemp$2$0,$$etemp$2$1);var $14$1=tempRet0;
 var $ld$3$0=13552;
 var $15$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $15$1=HEAP32[(($ld$4$1)>>2)];
 var $16=(($14$1>>>0) > ($15$1>>>0)) | (((($14$1>>>0) == ($15$1>>>0) & ($14$0>>>0) >  ($15$0>>>0))));
 if($16){label=5;break;}else{var $new_num_03_i2=$8;var $new_pos_02_i3=$6;var $i_01_i4=0;label=6;break;}
 case 5: 
 HEAP32[(($7)>>2)]=$8;
 HEAP32[(($5)>>2)]=$11;
 var $_ph=$11;var $29=$8;label=9;break;
 case 6: 
 var $i_01_i4;
 var $new_pos_02_i3;
 var $new_num_03_i2;
 var $17=((($new_pos_02_i3)+(1))|0);
 var $18=((($new_num_03_i2)-(1))|0);
 var $19=((($i_01_i4)+(1))|0);
 var $20=($19>>>0)<($8>>>0);
 if($20){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=((($19)+($6))|0);
 var $22=$21&511;
 var $23=(($ping+8+((($22)*(72))&-1)+32)|0);
 var $ld$5$0=(($23)|0);
 var $24$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($23+4)|0);
 var $24$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=3;
 var $$etemp$7$1=0;
 var $25$0=_i64Add($24$0,$24$1,$$etemp$7$0,$$etemp$7$1);var $25$1=tempRet0;
 var $26=(($25$1>>>0) > ($15$1>>>0)) | (((($25$1>>>0) == ($15$1>>>0) & ($25$0>>>0) >  ($15$0>>>0))));
 if($26){label=8;break;}else{var $new_num_03_i2=$18;var $new_pos_02_i3=$17;var $i_01_i4=$19;label=6;break;}
 case 8: 
 HEAP32[(($7)>>2)]=$18;
 var $27=$17&511;
 HEAP32[(($5)>>2)]=$27;
 var $28=($18|0)==0;
 if($28){var $_0=0;label=14;break;}else{var $_ph=$27;var $29=$18;label=9;break;}
 case 9: 
 var $29;
 var $_ph;
 var $30=(($ipp+20)|0);
 var $31=(((((HEAPU8[($30)])|(HEAPU8[((($30)+(1))|0)]<<8))<<16)>>16));
 var $32=(($ipp)|0);
 var $i_01_us=0;label=11;break;
 case 10: 
 var $33=((($i_01_us)+(1))|0);
 var $34=($33>>>0)<($29>>>0);
 if($34){var $i_01_us=$33;label=11;break;}else{var $_0=0;label=14;break;}
 case 11: 
 var $i_01_us;
 var $35=((($_ph)+($i_01_us))|0);
 var $36=$35&511;
 var $37=(($ping+8+((($36)*(72))&-1)+20)|0);
 var $38=(((((HEAPU8[($37)])|(HEAPU8[((($37)+(1))|0)]<<8))<<16)>>16));
 var $39=(($38<<16)>>16)!=0;
 var $40=(($38<<16)>>16)==(($31<<16)>>16);
 var $or_cond=$39&$40;
 if($or_cond){label=12;break;}else{label=10;break;}
 case 12: 
 var $41=(($ping+8+((($36)*(72))&-1))|0);
 var $42=_ip_equal($41,$32);
 var $phitmp=($42|0)==0;
 if($phitmp){label=10;break;}else{label=13;break;}
 case 13: 
 var $43=((($36)+(1))|0);
 var $_0=$43;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_ping_request($_dht,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $source3_sroa_1=(sp)+(2096);
 var $1=(sp)+(2120);
 var $pk_i=(sp)+(2128);
 var $source1=(sp)+(2216);
 var $shared_key=(sp)+(2240);
 var $2=($length|0)==81;
 if($2){label=2;break;}else{var $_0=1;label=27;break;}
 case 2: 
 var $4=(($_dht+178816)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($packet+1)|0);
 var $8=(($6)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$7;var $r_05_i_i=$10;label=3;break;
 case 3: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $11=HEAP8[($l_04_i_i)];
 var $12=HEAP8[($r_05_i_i)];
 var $13=(($11<<24)>>24)==(($12<<24)>>24);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=((($_03_i_i)-(1))|0);
 var $16=(($l_04_i_i+1)|0);
 var $17=(($r_05_i_i+1)|0);
 var $18=($15|0)==0;
 if($18){var $_0=1;label=27;break;}else{var $_03_i_i=$15;var $l_04_i_i=$16;var $r_05_i_i=$17;label=3;break;}
 case 5: 
 var $19=(($shared_key)|0);
 var $20=(($_dht+14976)|0);
 var $21=$20;
 var $22=(($_dht+14932)|0);
 _get_shared_key($21,$19,$22,$7);
 var $23=(($packet+33)|0);
 var $24=(($packet+57)|0);
 var $25=(($temp_plain_i)|0);
 var $$etemp$0$0=1056;
 var $$etemp$0$1=0;

 var $26=(($temp_encrypted_i)|0);
 var $$etemp$1$0=1040;
 var $$etemp$1$1=0;

 _memset($26, 0, 1040)|0;
 var $27=(($temp_encrypted_i+16)|0);
 assert(24 % 1 === 0);(_memcpy($27, $24, 24)|0);
 var $$etemp$2$0=40;
 var $$etemp$2$1=0;
 var $28=_crypto_secretbox_xsalsa20poly1305_open($25,$26,$$etemp$2$0,$$etemp$2$1,$23,$19);
 var $29=($28|0)==-1;
 if($29){var $_0=1;label=27;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=6;break;}
 case 6: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $30=(($temp_plain_i+$i_02_i_i)|0);
 var $31=HEAP8[($30)];
 var $32=$31|$check_01_i_i;
 var $33=((($i_02_i_i)+(1))|0);
 var $34=($33>>>0)<32;
 if($34){var $check_01_i_i=$32;var $i_02_i_i=$33;label=6;break;}else{label=7;break;}
 case 7: 
 var $35=(($32<<24)>>24)==0;
 if($35){label=8;break;}else{var $_0=1;label=27;break;}
 case 8: 
 var $37=(($temp_plain_i+32)|0);
 var $38=$37;
 var $ld$3$0=(($38)|0);
 var $39$0=((((HEAPU8[($ld$3$0)])|(HEAPU8[((($ld$3$0)+(1))|0)]<<8)|(HEAPU8[((($ld$3$0)+(2))|0)]<<16)|(HEAPU8[((($ld$3$0)+(3))|0)]<<24))|0));
 var $ld$4$1=(($38+4)|0);
 var $39$1=((((HEAPU8[($ld$4$1)])|(HEAPU8[((($ld$4$1)+(1))|0)]<<8)|(HEAPU8[((($ld$4$1)+(2))|0)]<<16)|(HEAPU8[((($ld$4$1)+(3))|0)]<<24))|0));
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $40=$1;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $st$6$0=(($1)|0);
 HEAP32[(($st$6$0)>>2)]=$39$0;
 var $st$7$1=(($1+4)|0);
 HEAP32[(($st$7$1)>>2)]=$39$1;
 var $41=(($pk_i)|0);
 var $$etemp$8$0=81;
 var $$etemp$8$1=0;

 var $42=HEAP32[(($8)>>2)];
 var $43=(($42+14900)|0);
 var $_03_i_i6=32;var $l_04_i_i5=$7;var $r_05_i_i4=$43;label=9;break;
 case 9: 
 var $r_05_i_i4;
 var $l_04_i_i5;
 var $_03_i_i6;
 var $44=HEAP8[($l_04_i_i5)];
 var $45=HEAP8[($r_05_i_i4)];
 var $46=(($44<<24)>>24)==(($45<<24)>>24);
 if($46){label=10;break;}else{label=11;break;}
 case 10: 
 var $48=((($_03_i_i6)-(1))|0);
 var $49=(($l_04_i_i5+1)|0);
 var $50=(($r_05_i_i4+1)|0);
 var $51=($48|0)==0;
 if($51){label=16;break;}else{var $_03_i_i6=$48;var $l_04_i_i5=$49;var $r_05_i_i4=$50;label=9;break;}
 case 11: 
 HEAP8[($41)]=1;
 var $52=(($pk_i+1)|0);
 var $53=HEAP32[(($8)>>2)];
 var $54=(($53+14900)|0);
 assert(32 % 1 === 0);(_memcpy($52, $54, 32)|0);
 var $55=(($pk_i+33)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $$etemp$10$0=24;
 var $$etemp$10$1=0;
 var $$etemp$9=15032;
 _randombytes($$etemp$9,$$etemp$10$0,$$etemp$10$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=13;break;
 case 13: 
 var $i_01_i_i;
 var $57=((15032+$i_01_i_i)|0);
 var $58=HEAP8[($57)];
 var $59=((($58)+(1))&255);
 HEAP8[($57)]=$59;
 var $60=(($59<<24)>>24)==0;
 var $61=((($i_01_i_i)+(1))|0);
 var $62=($61>>>0)<24;
 var $or_cond_i_i=$60&$62;
 if($or_cond_i_i){var $i_01_i_i=$61;label=13;break;}else{label=14;break;}
 case 14: 
 assert(24 % 1 === 0);(_memcpy($55, 15032, 24)|0);
 var $63=(($pk_i+57)|0);
 var $64=_encrypt_data_fast($19,$55,$40,8,$63);
 var $65=($64|0)==24;
 if($65){label=15;break;}else{label=16;break;}
 case 15: 
 var $67=HEAP32[(($8)>>2)];
 var $68=(($67+4)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=_sendpacket($69,$source1,$41,81);
 label=16;break;
 case 16: 
 var $$etemp$11$0=81;
 var $$etemp$11$1=0;

 var $$etemp$12$0=8;
 var $$etemp$12$1=0;

 var $71=HEAP8[($tmp2)];
 var $72=(($source+1)|0);
 var $73=(($source3_sroa_1)|0);
 assert(23 % 1 === 0);(_memcpy($73, $72, 23)|0);
 var $74=(($71<<24)>>24)==0;
 if($74){var $_0=0;label=27;break;}else{var $i_06_i=0;label=19;break;}
 case 17: 
 var $76=($81>>>0)<16;
 if($76){var $i_06_i=$81;label=19;break;}else{label=18;break;}
 case 18: 
 var $77=HEAP32[(($8)>>2)];
 var $i_12_i=0;label=22;break;
 case 19: 
 var $i_06_i;
 var $78=(($6+36880+((($i_06_i)*(56))&-1)+32)|0);
 var $79=HEAP8[($78)];
 var $80=(($79<<24)>>24)==0;
 var $81=((($i_06_i)+(1))|0);
 if($80){label=20;break;}else{label=17;break;}
 case 20: 
 var $83=(($6+36880+((($i_06_i)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($83, $7, 32)|0);
 HEAP8[($78)]=$71;
 var $84=(($6+36880+((($i_06_i)*(56))&-1)+33)|0);
 assert(23 % 1 === 0);(_memcpy($84, $73, 23)|0);
 var $_0=0;label=27;break;
 case 21: 
 var $86=((($i_12_i)+(1))|0);
 var $87=($86>>>0)<16;
 if($87){var $i_12_i=$86;label=22;break;}else{var $_0=0;label=27;break;}
 case 22: 
 var $i_12_i;
 var $i_03_i=0;label=24;break;
 case 23: 
 var $89=($_sum>>>0)<32;
 if($89){var $i_03_i=$_sum;label=24;break;}else{label=21;break;}
 case 24: 
 var $i_03_i;
 var $91=(($77+14900+$i_03_i)|0);
 var $92=HEAP8[($91)];
 var $93=(($6+36880+((($i_12_i)*(56))&-1)+$i_03_i)|0);
 var $94=HEAP8[($93)];
 var $95=$94^$92;
 var $ispos_i=(($95<<24)>>24)>-1;
 var $neg_i=(((-$95))&255);
 var $96=($ispos_i?$95:$neg_i);
 var $_sum=((($i_03_i)+(1))|0);
 var $97=(($packet+$_sum)|0);
 var $98=HEAP8[($97)];
 var $99=$98^$92;
 var $ispos1_i=(($99<<24)>>24)>-1;
 var $neg2_i=(((-$99))&255);
 var $100=($ispos1_i?$99:$neg2_i);
 var $101=($96&255)<($100&255);
 if($101){label=21;break;}else{label=25;break;}
 case 25: 
 var $103=($96&255)>($100&255);
 if($103){label=26;break;}else{label=23;break;}
 case 26: 
 var $105=(($6+36880+((($i_12_i)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($105, $7, 32)|0);
 var $106=(($6+36880+((($i_12_i)*(56))&-1)+32)|0);
 HEAP8[($106)]=$71;
 var $107=(($106+1)|0);
 assert(23 % 1 === 0);(_memcpy($107, $73, 23)|0);
 var $_0=0;label=27;break;
 case 27: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_ping_response($_dht,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $1=$_dht;
 var $2=($length|0)==81;
 if($2){label=2;break;}else{var $_0=1;label=11;break;}
 case 2: 
 var $4=(($_dht+178816)|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($packet+1)|0);
 var $8=(($6)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$7;var $r_05_i_i=$10;label=3;break;
 case 3: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $11=HEAP8[($l_04_i_i)];
 var $12=HEAP8[($r_05_i_i)];
 var $13=(($11<<24)>>24)==(($12<<24)>>24);
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 var $15=((($_03_i_i)-(1))|0);
 var $16=(($l_04_i_i+1)|0);
 var $17=(($r_05_i_i+1)|0);
 var $18=($15|0)==0;
 if($18){var $_0=1;label=11;break;}else{var $_03_i_i=$15;var $l_04_i_i=$16;var $r_05_i_i=$17;label=3;break;}
 case 5: 
 var $19=_is_pinging($6,$source);
 var $20=($19|0)==0;
 if($20){var $_0=1;label=11;break;}else{label=6;break;}
 case 6: 
 var $22=((($19)-(1))|0);
 var $23=(($6+8+((($22)*(72))&-1)+40)|0);
 var $24=(($packet+33)|0);
 var $25=(($packet+57)|0);
 var $26=(($temp_plain_i)|0);
 var $$etemp$0$0=1056;
 var $$etemp$0$1=0;

 var $27=(($temp_encrypted_i)|0);
 var $$etemp$1$0=1040;
 var $$etemp$1$1=0;

 _memset($27, 0, 1040)|0;
 var $28=(($temp_encrypted_i+16)|0);
 assert(24 % 1 === 0);(_memcpy($28, $25, 24)|0);
 var $$etemp$2$0=40;
 var $$etemp$2$1=0;
 var $29=_crypto_secretbox_xsalsa20poly1305_open($26,$27,$$etemp$2$0,$$etemp$2$1,$24,$23);
 var $30=($29|0)==-1;
 if($30){var $_0=1;label=11;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=7;break;}
 case 7: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $31=(($temp_plain_i+$i_02_i_i)|0);
 var $32=HEAP8[($31)];
 var $33=$32|$check_01_i_i;
 var $34=((($i_02_i_i)+(1))|0);
 var $35=($34>>>0)<32;
 if($35){var $check_01_i_i=$33;var $i_02_i_i=$34;label=7;break;}else{label=8;break;}
 case 8: 
 var $36=(($33<<24)>>24)==0;
 if($36){label=9;break;}else{var $_0=1;label=11;break;}
 case 9: 
 var $38=(($temp_plain_i+32)|0);
 var $39=$38;
 var $ld$3$0=(($39)|0);
 var $40$0=((((HEAPU8[($ld$3$0)])|(HEAPU8[((($ld$3$0)+(1))|0)]<<8)|(HEAPU8[((($ld$3$0)+(2))|0)]<<16)|(HEAPU8[((($ld$3$0)+(3))|0)]<<24))|0));
 var $ld$4$1=(($39+4)|0);
 var $40$1=((((HEAPU8[($ld$4$1)])|(HEAPU8[((($ld$4$1)+(1))|0)]<<8)|(HEAPU8[((($ld$4$1)+(2))|0)]<<16)|(HEAPU8[((($ld$4$1)+(3))|0)]<<24))|0));
 var $41=(($6+8+((($22)*(72))&-1)+24)|0);
 var $ld$5$0=(($41)|0);
 var $42$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($41+4)|0);
 var $42$1=HEAP32[(($ld$6$1)>>2)];
 var $43=(($42$0|0) == ($40$0|0)) & (($42$1|0) == ($40$1|0));
 if($43){label=10;break;}else{var $_0=1;label=11;break;}
 case 10: 
 _addto_lists($1,$source,$7);
 var $_0=0;label=11;break;
 case 11: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _load_state($load_state_callback,$outer,$data,$length,$cookie_inner){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($load_state_callback|0)==0;
 var $2=($data|0)==0;
 var $or_cond=$1|$2;
 if($or_cond){label=4;break;}else{label=2;break;}
 case 2: 
 var $3=($length>>>0)>7;
 if($3){label=3;break;}else{var $_02_lcssa=$length;label=11;break;}
 case 3: 
 var $4=($cookie_inner&65535);
 var $_0215=$length;var $_0116=$data;label=5;break;
 case 4: 
 var $6=HEAP32[((_stderr)>>2)];
 var $7=_fwrite(3088,39,1,$6);
 var $_0=-1;label=12;break;
 case 5: 
 var $_0116;
 var $_0215;
 var $9=$_0116;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($_0116+4)|0);
 var $12=$11;
 var $13=HEAP32[(($12)>>2)];
 var $14=(($_0116+8)|0);
 var $15=((($_0215)-(8))|0);
 var $16=($15>>>0)<($10>>>0);
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=HEAP32[((_stderr)>>2)];
 var $19=_fprintf($18,3936,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$15,HEAP32[(((tempVarArgs)+(8))>>2)]=$10,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_0=-1;label=12;break;
 case 7: 
 var $21=$13>>>16;
 var $22=($21|0)==($4|0);
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 var $24=HEAP32[((_stderr)>>2)];
 var $25=_fprintf($24,2872,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$21,HEAP32[(((tempVarArgs)+(8))>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_0=-1;label=12;break;
 case 9: 
 var $27=(($13)&65535);
 var $28=FUNCTION_TABLE[$load_state_callback]($outer,$14,$10,$27);
 var $29=($28|0)==-1;
 if($29){var $_0=-1;label=12;break;}else{label=10;break;}
 case 10: 
 var $_sum=((($10)+(8))|0);
 var $31=(($_0116+$_sum)|0);
 var $32=((($15)-($10))|0);
 var $33=($32>>>0)>7;
 if($33){var $_0215=$32;var $_0116=$31;label=5;break;}else{var $_02_lcssa=$32;label=11;break;}
 case 11: 
 var $_02_lcssa;
 var $not_=($_02_lcssa|0)!=0;
 var $34=(($not_<<31)>>31);
 var $_0=$34;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _ClientPair_quick_sort($arr,$n){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1856)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_p_=sp;
 var $_t_=(sp)+(928);
 var $1=($n|0)<2;
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=(($_p_)|0);
 var $$etemp$0$0=928;
 var $$etemp$0$1=0;

 var $4=(((($n|0))/(2))&-1);
 var $5=(($arr+((($4)*(928))&-1))|0);
 assert(928 % 1 === 0);(_memcpy($3, $5, 928)|0);
 var $6=(($arr+((($n)*(928))&-1))|0);
 var $_sum=((($n)-(1))|0);
 var $7=(($arr+((($_sum)*(928))&-1))|0);
 var $8=($_sum|0)<0;
 if($8){var $_r__0_lcssa=$7;var $_l__0_ph5=$arr;label=14;break;}else{label=3;break;}
 case 3: 
 var $9=(($_t_)|0);
 var $_l__0_ph7=$arr;var $_r__0_ph8=$7;label=4;break;
 case 4: 
 var $_r__0_ph8;
 var $_l__0_ph7;
 var $_r__03=$_r__0_ph8;label=6;break;
 case 5: 
 var $11=((($_r__03)-(928))|0);
 var $12=($_l__0_ph7>>>0)>($11>>>0);
 if($12){var $_r__0_lcssa=$11;var $_l__0_ph5=$_l__0_ph7;label=14;break;}else{var $_r__03=$11;label=6;break;}
 case 6: 
 var $_r__03;
 var $i_03_i_i=0;label=8;break;
 case 7: 
 var $15=($30>>>0)<32;
 if($15){var $i_03_i_i=$30;label=8;break;}else{var $i_03_i_i1=0;label=11;break;}
 case 8: 
 var $i_03_i_i;
 var $17=(($_l__0_ph7+$i_03_i_i)|0);
 var $18=HEAP8[($17)];
 var $19=(($_l__0_ph7+464+$i_03_i_i)|0);
 var $20=HEAP8[($19)];
 var $21=$20^$18;
 var $ispos_i_i=(($21<<24)>>24)>-1;
 var $neg_i_i=(((-$21))&255);
 var $22=($ispos_i_i?$21:$neg_i_i);
 var $23=(($_p_+464+$i_03_i_i)|0);
 var $24=HEAP8[($23)];
 var $25=$24^$18;
 var $ispos1_i_i=(($25<<24)>>24)>-1;
 var $neg2_i_i=(((-$25))&255);
 var $26=($ispos1_i_i?$25:$neg2_i_i);
 var $27=($22&255)<($26&255);
 if($27){var $i_03_i_i1=0;label=11;break;}else{label=9;break;}
 case 9: 
 var $29=($22&255)>($26&255);
 var $30=((($i_03_i_i)+(1))|0);
 if($29){var $_r__0_ph_be=$_r__03;label=10;break;}else{label=7;break;}
 case 10: 
 var $_r__0_ph_be;
 var $_l__0_ph_be=(($_l__0_ph7+928)|0);
 var $31=($_l__0_ph_be>>>0)>($_r__0_ph_be>>>0);
 if($31){var $_r__0_lcssa=$_r__0_ph_be;var $_l__0_ph5=$_l__0_ph_be;label=14;break;}else{var $_l__0_ph7=$_l__0_ph_be;var $_r__0_ph8=$_r__0_ph_be;label=4;break;}
 case 11: 
 var $i_03_i_i1;
 var $32=(($_r__03+$i_03_i_i1)|0);
 var $33=HEAP8[($32)];
 var $34=(($_r__03+464+$i_03_i_i1)|0);
 var $35=HEAP8[($34)];
 var $36=$35^$33;
 var $ispos_i_i2=(($36<<24)>>24)>-1;
 var $neg_i_i3=(((-$36))&255);
 var $37=($ispos_i_i2?$36:$neg_i_i3);
 var $38=(($_p_+464+$i_03_i_i1)|0);
 var $39=HEAP8[($38)];
 var $40=$39^$33;
 var $ispos1_i_i4=(($40<<24)>>24)>-1;
 var $neg2_i_i5=(((-$40))&255);
 var $41=($ispos1_i_i4?$40:$neg2_i_i5);
 var $42=($37&255)<($41&255);
 if($42){label=5;break;}else{label=12;break;}
 case 12: 
 var $44=($37&255)<=($41&255);
 var $45=((($i_03_i_i1)+(1))|0);
 var $46=($45>>>0)<32;
 var $or_cond=$44&$46;
 if($or_cond){var $i_03_i_i1=$45;label=11;break;}else{label=13;break;}
 case 13: 
 var $48=((($_r__03)-(928))|0);
 var $$etemp$1$0=928;
 var $$etemp$1$1=0;

 var $49=(($_l__0_ph7)|0);
 assert(928 % 1 === 0);(_memcpy($9, $49, 928)|0);
 var $50=(($_r__03)|0);
 assert(928 % 1 === 0);(_memcpy($49, $50, 928)|0);
 assert(928 % 1 === 0);(_memcpy($50, $9, 928)|0);
 var $$etemp$2$0=928;
 var $$etemp$2$1=0;

 var $_r__0_ph_be=$48;label=10;break;
 case 14: 
 var $_l__0_ph5;
 var $_r__0_lcssa;
 var $51=$_r__0_lcssa;
 var $52=$arr;
 var $53=((($51)-($52))|0);
 var $54=(((($53|0))/(928))&-1);
 var $55=((($54)+(1))|0);
 _ClientPair_quick_sort($arr,$55);
 var $56=$6;
 var $57=$_l__0_ph5;
 var $58=((($56)-($57))|0);
 var $59=(((($58|0))/(928))&-1);
 _ClientPair_quick_sort($_l__0_ph5,$59);
 var $$etemp$3$0=928;
 var $$etemp$3$1=0;

 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _get_shared_key($shared_keys,$shared_key,$secret_key,$client_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_i_i_i=sp;
 var $1=(($client_id+30)|0);
 var $2=HEAP8[($1)];
 var $3=($2&255);
 var $4=$3<<2;
 var $ld$0$0=13552;
 var $5$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $5$1=HEAP32[(($ld$1$1)>>2)];
 var $num_03=-1;var $curr_04=0;var $i_05=0;label=2;break;
 case 2: 
 var $i_05;
 var $curr_04;
 var $num_03;
 var $6=((($4)+($i_05))|0);
 var $7=(($shared_keys+((($6)*(80))&-1)+68)|0);
 var $8=HEAP8[($7)];
 var $9=(($8<<24)>>24)==0;
 if($9){label=10;break;}else{label=3;break;}
 case 3: 
 var $11=(($shared_keys+((($6)*(80))&-1))|0);
 var $_03_i=32;var $l_04_i=$client_id;var $r_05_i=$11;label=4;break;
 case 4: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $12=HEAP8[($l_04_i)];
 var $13=HEAP8[($r_05_i)];
 var $14=(($12<<24)>>24)==(($13<<24)>>24);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=((($_03_i)-(1))|0);
 var $17=(($l_04_i+1)|0);
 var $18=(($r_05_i+1)|0);
 var $19=($16|0)==0;
 if($19){label=6;break;}else{var $_03_i=$16;var $l_04_i=$17;var $r_05_i=$18;label=4;break;}
 case 6: 
 var $20=(($shared_keys+((($6)*(80))&-1)+32)|0);
 assert(32 % 1 === 0);(_memcpy($shared_key, $20, 32)|0);
 var $21=(($shared_keys+((($6)*(80))&-1)+64)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($shared_keys+((($6)*(80))&-1)+72)|0);
 var $st$2$0=(($24)|0);
 HEAP32[(($st$2$0)>>2)]=$5$0;
 var $st$3$1=(($24+4)|0);
 HEAP32[(($st$3$1)>>2)]=$5$1;
 label=14;break;
 case 7: 
 var $25=($num_03|0)==0;
 if($25){var $curr_1=$curr_04;var $num_1=0;label=11;break;}else{label=8;break;}
 case 8: 
 var $27=(($shared_keys+((($6)*(80))&-1)+72)|0);
 var $ld$4$0=(($27)|0);
 var $28$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($27+4)|0);
 var $28$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=600;
 var $$etemp$6$1=0;
 var $29$0=_i64Add($28$0,$28$1,$$etemp$6$0,$$etemp$6$1);var $29$1=tempRet0;
 var $30=(($29$1>>>0) > ($5$1>>>0)) | (((($29$1>>>0) == ($5$1>>>0) & ($29$0>>>0) >  ($5$0>>>0))));
 if($30){label=9;break;}else{var $curr_1=$6;var $num_1=0;label=11;break;}
 case 9: 
 var $32=(($shared_keys+((($6)*(80))&-1)+64)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($num_03>>>0)>($33>>>0);
 var $_num_0=($34?$33:$num_03);
 var $_curr_0=($34?$6:$curr_04);
 var $curr_1=$_curr_0;var $num_1=$_num_0;label=11;break;
 case 10: 
 var $36=($num_03|0)==0;
 var $curr_0_=($36?$curr_04:$6);
 var $curr_1=$curr_0_;var $num_1=0;label=11;break;
 case 11: 
 var $num_1;
 var $curr_1;
 var $38=((($i_05)+(1))|0);
 var $39=($38>>>0)<4;
 if($39){var $num_03=$num_1;var $curr_04=$curr_1;var $i_05=$38;label=2;break;}else{label=12;break;}
 case 12: 
 var $41=(($s_i_i_i)|0);
 var $$etemp$7$0=32;
 var $$etemp$7$1=0;

 _crypto_scalarmult_curve25519_ref($41,$secret_key,$client_id);
 _crypto_core_hsalsa20($shared_key,14752,$41,104);
 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 var $42=($num_1|0)==-1;
 if($42){label=14;break;}else{label=13;break;}
 case 13: 
 var $44=(($shared_keys+((($curr_1)*(80))&-1)+68)|0);
 HEAP8[($44)]=1;
 var $45=(($shared_keys+((($curr_1)*(80))&-1)+64)|0);
 HEAP32[(($45)>>2)]=1;
 var $46=(($shared_keys+((($curr_1)*(80))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($46, $client_id, 32)|0);
 var $47=(($shared_keys+((($curr_1)*(80))&-1)+32)|0);
 assert(32 % 1 === 0);(_memcpy($47, $shared_key, 32)|0);
 var $48=(($shared_keys+((($curr_1)*(80))&-1)+72)|0);
 var $st$9$0=(($48)|0);
 HEAP32[(($st$9$0)>>2)]=$5$0;
 var $st$10$1=(($48+4)|0);
 HEAP32[(($st$10$1)>>2)]=$5$1;
 label=14;break;
 case 14: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _addto_lists($dht,$ip_port,$client_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ip_port24_sroa_1=sp;
 var $ip_port14_sroa_1=(sp)+(24);
 var $ip_port9_sroa_1=(sp)+(48);
 var $ip_port3_sroa_1=(sp)+(72);
 var $ip_port1_sroa_1=(sp)+(96);
 var $1=(($ip_port)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==10;
 if($3){label=2;break;}else{label=9;break;}
 case 2: 
 var $5=(($ip_port+4)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=9;break;}
 case 3: 
 var $10=(($6+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=4;break;}else{label=9;break;}
 case 4: 
 var $14=$5;
 var $15=(($ip_port+12)|0);
 var $16=$15;
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==0;
 if($18){label=5;break;}else{label=9;break;}
 case 5: 
 var $20=(($14+9)|0);
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24)==0;
 if($22){label=6;break;}else{label=9;break;}
 case 6: 
 var $24=(($14+10)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==-1;
 if($26){label=7;break;}else{label=9;break;}
 case 7: 
 var $28=(($14+11)|0);
 var $29=HEAP8[($28)];
 var $30=(($29<<24)>>24)==-1;
 if($30){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP8[($1)]=2;
 var $32=$5;
 var $33=(($32+12)|0);
 var $34=((((HEAPU8[($33)])|(HEAPU8[((($33)+(1))|0)]<<8)|(HEAPU8[((($33)+(2))|0)]<<16)|(HEAPU8[((($33)+(3))|0)]<<24))|0));
 tempBigInt=$34;HEAP8[($6)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($6)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($6)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($6)+(3))|0)]=tempBigInt&0xff;
 label=9;break;
 case 9: 
 var $36=(($dht+8)|0);
 var $37=_client_or_ip_port_in_list($36,32,$client_id,$ip_port);
 var $38=($37|0)==0;
 if($38){label=10;break;}else{var $used_1_ph=1;label=31;break;}
 case 10: 
 var $40=HEAP8[($1)];
 var $41=(($ip_port+1)|0);
 var $42=(($ip_port1_sroa_1)|0);
 assert(23 % 1 === 0);(_memcpy($42, $41, 23)|0);
 if((($40<<24)>>24)==2|(($40<<24)>>24)==10){ label=11;break;}else{label=16;break;}
 case 11: 
 var $ld$0$0=13552;
 var $43$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $43$1=HEAP32[(($ld$1$1)>>2)];
 var $i_04_i=0;label=12;break;
 case 12: 
 var $i_04_i;
 var $44=(($dht+8+((($i_04_i)*(464))&-1)+56)|0);
 var $ld$2$0=(($44)|0);
 var $45$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($44+4)|0);
 var $45$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=122;
 var $$etemp$4$1=0;
 var $46$0=_i64Add($45$0,$45$1,$$etemp$4$0,$$etemp$4$1);var $46$1=tempRet0;
 var $47=(($46$1>>>0) > ($43$1>>>0)) | (((($46$1>>>0) == ($43$1>>>0) & ($46$0>>>0) >  ($43$0>>>0))));
 if($47){label=14;break;}else{label=13;break;}
 case 13: 
 var $49=(($dht+8+((($i_04_i)*(464))&-1)+272)|0);
 var $ld$5$0=(($49)|0);
 var $50$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($49+4)|0);
 var $50$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=122;
 var $$etemp$7$1=0;
 var $51$0=_i64Add($50$0,$50$1,$$etemp$7$0,$$etemp$7$1);var $51$1=tempRet0;
 var $52=(($51$1>>>0) > ($43$1>>>0)) | (((($51$1>>>0) == ($43$1>>>0) & ($51$0>>>0) >  ($43$0>>>0))));
 if($52){label=14;break;}else{label=15;break;}
 case 14: 
 var $54=((($i_04_i)+(1))|0);
 var $55=($54>>>0)<32;
 if($55){var $i_04_i=$54;label=12;break;}else{label=16;break;}
 case 15: 
 var $56=(($dht+8+((($i_04_i)*(464))&-1)+32)|0);
 var $57=(($dht+8+((($i_04_i)*(464))&-1)+248)|0);
 var $58=(($40<<24)>>24)==2;
 var $__i=($58?$56:$57);
 var $_1_i=($58?$57:$56);
 var $59=(($dht+8+((($i_04_i)*(464))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($59, $client_id, 32)|0);
 var $60=(($__i)|0);
 HEAP8[($60)]=$40;
 var $61=(($__i+1)|0);
 assert(23 % 1 === 0);(_memcpy($61, $42, 23)|0);
 var $62=(($__i+24)|0);
 var $st$8$0=(($62)|0);
 HEAP32[(($st$8$0)>>2)]=$43$0;
 var $st$9$1=(($62+4)|0);
 HEAP32[(($st$9$1)>>2)]=$43$1;
 var $63=(($__i+184)|0);
 var $64=(($__i+208)|0);
 var $$etemp$10$0=0;
 var $$etemp$10$1=0;
 var $st$11$0=(($64)|0);
 HEAP32[(($st$11$0)>>2)]=$$etemp$10$0;
 var $st$12$1=(($64+4)|0);
 HEAP32[(($st$12$1)>>2)]=$$etemp$10$1;
 var $65=(($_1_i)|0);
 _memset($63, 0, 22)|0;
 _memset($65, 0, 216)|0;
 var $used_1_ph=1;label=31;break;
 case 16: 
 var $66=(($dht+14900)|0);
 var $67=(($ip_port3_sroa_1)|0);
 assert(23 % 1 === 0);(_memcpy($67, $41, 23)|0);
 if((($40<<24)>>24)==2|(($40<<24)>>24)==10){ label=17;break;}else{var $96=$40;label=23;break;}
 case 17: 
 _sort_list($36,32,$66);
 var $i_09_i=0;label=18;break;
 case 18: 
 var $i_09_i;
 var $_idx4_i=(($dht+8+((($i_09_i)*(464))&-1)+72)|0);
 var $_idx4_val_i=HEAP8[($_idx4_i)];
 var $_idx5_i=(($dht+8+((($i_09_i)*(464))&-1)+120)|0);
 var $_idx5_val_i=HEAP8[($_idx5_i)];
 var $_idx6_i=(($dht+8+((($i_09_i)*(464))&-1)+168)|0);
 var $_idx6_val_i=HEAP8[($_idx6_i)];
 var $70=$_idx5_val_i<<1;
 var $71=((($70)+($_idx4_val_i))&255);
 var $72=$_idx6_val_i<<2;
 var $73=((($71)+($72))&255);
 var $74=(($73<<24)>>24)==2;
 if($74){label=20;break;}else{label=19;break;}
 case 19: 
 var $_idx_i=(($dht+8+((($i_09_i)*(464))&-1)+288)|0);
 var $_idx_val_i=HEAP8[($_idx_i)];
 var $_idx2_i=(($dht+8+((($i_09_i)*(464))&-1)+336)|0);
 var $_idx2_val_i=HEAP8[($_idx2_i)];
 var $_idx3_i=(($dht+8+((($i_09_i)*(464))&-1)+384)|0);
 var $_idx3_val_i=HEAP8[($_idx3_i)];
 var $76=$_idx2_val_i<<1;
 var $77=((($76)+($_idx_val_i))&255);
 var $78=$_idx3_val_i<<2;
 var $79=((($77)+($78))&255);
 var $80=(($79<<24)>>24)==2;
 if($80){label=20;break;}else{label=21;break;}
 case 20: 
 var $82=((($i_09_i)+(1))|0);
 var $83=($82>>>0)<32;
 if($83){var $i_09_i=$82;label=18;break;}else{label=22;break;}
 case 21: 
 var $84=(($dht+8+((($i_09_i)*(464))&-1)+32)|0);
 var $85=(($dht+8+((($i_09_i)*(464))&-1)+248)|0);
 var $86=(($40<<24)>>24)==2;
 var $__i6=($86?$84:$85);
 var $_1_i7=($86?$85:$84);
 var $87=(($dht+8+((($i_09_i)*(464))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($87, $client_id, 32)|0);
 var $88=(($__i6)|0);
 HEAP8[($88)]=$40;
 var $89=(($__i6+1)|0);
 assert(23 % 1 === 0);(_memcpy($89, $67, 23)|0);
 var $ld$13$0=13552;
 var $90$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=13556;
 var $90$1=HEAP32[(($ld$14$1)>>2)];
 var $91=(($__i6+24)|0);
 var $st$15$0=(($91)|0);
 HEAP32[(($st$15$0)>>2)]=$90$0;
 var $st$16$1=(($91+4)|0);
 HEAP32[(($st$16$1)>>2)]=$90$1;
 var $92=(($__i6+184)|0);
 var $93=(($__i6+208)|0);
 var $$etemp$17$0=0;
 var $$etemp$17$1=0;
 var $st$18$0=(($93)|0);
 HEAP32[(($st$18$0)>>2)]=$$etemp$17$0;
 var $st$19$1=(($93+4)|0);
 HEAP32[(($st$19$1)>>2)]=$$etemp$17$1;
 var $94=(($_1_i7)|0);
 _memset($92, 0, 22)|0;
 _memset($94, 0, 216)|0;
 var $used_1_ph=1;label=31;break;
 case 22: 
 var $_pre75=HEAP8[($1)];
 var $96=$_pre75;label=23;break;
 case 23: 
 var $96;
 var $97=(($ip_port9_sroa_1)|0);
 assert(23 % 1 === 0);(_memcpy($97, $41, 23)|0);
 if((($96<<24)>>24)==2|(($96<<24)>>24)==10){ var $i_03_i=0;label=25;break;}else{var $used_1_ph=0;label=31;break;}
 case 24: 
 var $99=($113>>>0)<32;
 if($99){var $i_03_i=$113;label=25;break;}else{var $used_1_ph=0;label=31;break;}
 case 25: 
 var $i_03_i;
 var $100=(($dht+14900+$i_03_i)|0);
 var $101=HEAP8[($100)];
 var $102=(($dht+8+$i_03_i)|0);
 var $103=HEAP8[($102)];
 var $104=$103^$101;
 var $ispos_i=(($104<<24)>>24)>-1;
 var $neg_i=(((-$104))&255);
 var $105=($ispos_i?$104:$neg_i);
 var $106=(($client_id+$i_03_i)|0);
 var $107=HEAP8[($106)];
 var $108=$107^$101;
 var $ispos1_i=(($108<<24)>>24)>-1;
 var $neg2_i=(((-$108))&255);
 var $109=($ispos1_i?$108:$neg2_i);
 var $110=($105&255)<($109&255);
 if($110){var $used_1_ph=0;label=31;break;}else{label=26;break;}
 case 26: 
 var $112=($105&255)>($109&255);
 var $113=((($i_03_i)+(1))|0);
 if($112){label=27;break;}else{label=24;break;}
 case 27: 
 var $115=(($96<<24)>>24)==2;
 if($115){label=28;break;}else{label=29;break;}
 case 28: 
 var $117=(($dht+40)|0);
 var $118=(($dht+256)|0);
 var $ipptp_clear_0_i=$118;var $ipptp_write_0_i=$117;label=30;break;
 case 29: 
 var $120=(($dht+256)|0);
 var $121=(($dht+40)|0);
 var $ipptp_clear_0_i=$121;var $ipptp_write_0_i=$120;label=30;break;
 case 30: 
 var $ipptp_write_0_i;
 var $ipptp_clear_0_i;
 var $123=(($36)|0);
 assert(32 % 1 === 0);(_memcpy($123, $client_id, 32)|0);
 var $124=(($ipptp_write_0_i)|0);
 HEAP8[($124)]=$96;
 var $125=(($ipptp_write_0_i+1)|0);
 assert(23 % 1 === 0);(_memcpy($125, $97, 23)|0);
 var $ld$20$0=13552;
 var $126$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=13556;
 var $126$1=HEAP32[(($ld$21$1)>>2)];
 var $127=(($ipptp_write_0_i+24)|0);
 var $st$22$0=(($127)|0);
 HEAP32[(($st$22$0)>>2)]=$126$0;
 var $st$23$1=(($127+4)|0);
 HEAP32[(($st$23$1)>>2)]=$126$1;
 var $128=(($ipptp_write_0_i+184)|0);
 var $129=(($ipptp_write_0_i+208)|0);
 var $$etemp$24$0=0;
 var $$etemp$24$1=0;
 var $st$25$0=(($129)|0);
 HEAP32[(($st$25$0)>>2)]=$$etemp$24$0;
 var $st$26$1=(($129+4)|0);
 HEAP32[(($st$26$1)>>2)]=$$etemp$24$1;
 var $130=(($ipptp_clear_0_i)|0);
 _memset($128, 0, 22)|0;
 _memset($130, 0, 216)|0;
 var $used_1_ph=1;label=31;break;
 case 31: 
 var $used_1_ph;
 var $131=(($dht+14968)|0);
 var $132=HEAP16[(($131)>>1)];
 var $133=(($132<<16)>>16)==0;
 if($133){label=52;break;}else{label=32;break;}
 case 32: 
 var $134=(($dht+14964)|0);
 var $135=(($ip_port+1)|0);
 var $136=(($ip_port14_sroa_1)|0);
 var $137=(($ip_port24_sroa_1)|0);
 var $i_055=0;var $used_158=$used_1_ph;label=33;break;
 case 33: 
 var $used_158;
 var $i_055;
 var $138=HEAP32[(($134)>>2)];
 var $139=(($138+((($i_055)*(3808))&-1)+32)|0);
 var $140=_client_or_ip_port_in_list($139,8,$client_id,$ip_port);
 var $141=($140|0)==0;
 if($141){label=34;break;}else{label=50;break;}
 case 34: 
 var $143=HEAP32[(($134)>>2)];
 var $144=HEAP8[($1)];
 assert(23 % 1 === 0);(_memcpy($136, $135, 23)|0);
 if((($144<<24)>>24)==2|(($144<<24)>>24)==10){ label=35;break;}else{label=39;break;}
 case 35: 
 var $ld$27$0=13552;
 var $145$0=HEAP32[(($ld$27$0)>>2)];
 var $ld$28$1=13556;
 var $145$1=HEAP32[(($ld$28$1)>>2)];
 var $i_04_i18=0;label=36;break;
 case 36: 
 var $i_04_i18;
 var $146=(($143+((($i_055)*(3808))&-1)+32+((($i_04_i18)*(464))&-1)+56)|0);
 var $ld$29$0=(($146)|0);
 var $147$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($146+4)|0);
 var $147$1=HEAP32[(($ld$30$1)>>2)];
 var $$etemp$31$0=122;
 var $$etemp$31$1=0;
 var $148$0=_i64Add($147$0,$147$1,$$etemp$31$0,$$etemp$31$1);var $148$1=tempRet0;
 var $149=(($148$1>>>0) > ($145$1>>>0)) | (((($148$1>>>0) == ($145$1>>>0) & ($148$0>>>0) >  ($145$0>>>0))));
 if($149){label=38;break;}else{label=37;break;}
 case 37: 
 var $151=(($143+((($i_055)*(3808))&-1)+32+((($i_04_i18)*(464))&-1)+272)|0);
 var $ld$32$0=(($151)|0);
 var $152$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($151+4)|0);
 var $152$1=HEAP32[(($ld$33$1)>>2)];
 var $$etemp$34$0=122;
 var $$etemp$34$1=0;
 var $153$0=_i64Add($152$0,$152$1,$$etemp$34$0,$$etemp$34$1);var $153$1=tempRet0;
 var $154=(($153$1>>>0) > ($145$1>>>0)) | (((($153$1>>>0) == ($145$1>>>0) & ($153$0>>>0) >  ($145$0>>>0))));
 if($154){label=38;break;}else{label=49;break;}
 case 38: 
 var $156=((($i_04_i18)+(1))|0);
 var $157=($156>>>0)<8;
 if($157){var $i_04_i18=$156;label=36;break;}else{label=39;break;}
 case 39: 
 var $158=(($143+((($i_055)*(3808))&-1)+32)|0);
 var $159=(($143+((($i_055)*(3808))&-1))|0);
 assert(23 % 1 === 0);(_memcpy($137, $135, 23)|0);
 if((($144<<24)>>24)==2|(($144<<24)>>24)==10){ label=40;break;}else{var $_0_i31=0;label=48;break;}
 case 40: 
 _sort_list($158,8,$159);
 var $i_03_i34=0;label=42;break;
 case 41: 
 var $162=($177>>>0)<32;
 if($162){var $i_03_i34=$177;label=42;break;}else{var $_0_i31=0;label=48;break;}
 case 42: 
 var $i_03_i34;
 var $164=(($143+((($i_055)*(3808))&-1)+$i_03_i34)|0);
 var $165=HEAP8[($164)];
 var $166=(($143+((($i_055)*(3808))&-1)+32+$i_03_i34)|0);
 var $167=HEAP8[($166)];
 var $168=$167^$165;
 var $ispos_i35=(($168<<24)>>24)>-1;
 var $neg_i36=(((-$168))&255);
 var $169=($ispos_i35?$168:$neg_i36);
 var $170=(($client_id+$i_03_i34)|0);
 var $171=HEAP8[($170)];
 var $172=$171^$165;
 var $ispos1_i37=(($172<<24)>>24)>-1;
 var $neg2_i38=(((-$172))&255);
 var $173=($ispos1_i37?$172:$neg2_i38);
 var $174=($169&255)<($173&255);
 if($174){var $_0_i31=0;label=48;break;}else{label=43;break;}
 case 43: 
 var $176=($169&255)>($173&255);
 var $177=((($i_03_i34)+(1))|0);
 if($176){label=44;break;}else{label=41;break;}
 case 44: 
 var $179=(($144<<24)>>24)==2;
 if($179){label=45;break;}else{label=46;break;}
 case 45: 
 var $181=(($143+((($i_055)*(3808))&-1)+64)|0);
 var $182=(($143+((($i_055)*(3808))&-1)+280)|0);
 var $ipptp_clear_0_i30=$182;var $ipptp_write_0_i29=$181;label=47;break;
 case 46: 
 var $184=(($143+((($i_055)*(3808))&-1)+280)|0);
 var $185=(($143+((($i_055)*(3808))&-1)+64)|0);
 var $ipptp_clear_0_i30=$185;var $ipptp_write_0_i29=$184;label=47;break;
 case 47: 
 var $ipptp_write_0_i29;
 var $ipptp_clear_0_i30;
 var $187=(($158)|0);
 assert(32 % 1 === 0);(_memcpy($187, $client_id, 32)|0);
 var $188=(($ipptp_write_0_i29)|0);
 HEAP8[($188)]=$144;
 var $189=(($ipptp_write_0_i29+1)|0);
 assert(23 % 1 === 0);(_memcpy($189, $137, 23)|0);
 var $ld$35$0=13552;
 var $190$0=HEAP32[(($ld$35$0)>>2)];
 var $ld$36$1=13556;
 var $190$1=HEAP32[(($ld$36$1)>>2)];
 var $191=(($ipptp_write_0_i29+24)|0);
 var $st$37$0=(($191)|0);
 HEAP32[(($st$37$0)>>2)]=$190$0;
 var $st$38$1=(($191+4)|0);
 HEAP32[(($st$38$1)>>2)]=$190$1;
 var $192=(($ipptp_write_0_i29+184)|0);
 var $193=(($ipptp_write_0_i29+208)|0);
 var $$etemp$39$0=0;
 var $$etemp$39$1=0;
 var $st$40$0=(($193)|0);
 HEAP32[(($st$40$0)>>2)]=$$etemp$39$0;
 var $st$41$1=(($193+4)|0);
 HEAP32[(($st$41$1)>>2)]=$$etemp$39$1;
 var $194=(($ipptp_clear_0_i30)|0);
 _memset($192, 0, 22)|0;
 _memset($194, 0, 216)|0;
 var $_0_i31=1;label=48;break;
 case 48: 
 var $_0_i31;
 var $_used_1=((($_0_i31)+($used_158))|0);
 var $used_2=$_used_1;label=51;break;
 case 49: 
 var $196=(($143+((($i_055)*(3808))&-1)+32+((($i_04_i18)*(464))&-1)+32)|0);
 var $197=(($143+((($i_055)*(3808))&-1)+32+((($i_04_i18)*(464))&-1)+248)|0);
 var $198=(($144<<24)>>24)==2;
 var $__i20=($198?$196:$197);
 var $_1_i21=($198?$197:$196);
 var $199=(($143+((($i_055)*(3808))&-1)+32+((($i_04_i18)*(464))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($199, $client_id, 32)|0);
 var $200=(($__i20)|0);
 HEAP8[($200)]=$144;
 var $201=(($__i20+1)|0);
 assert(23 % 1 === 0);(_memcpy($201, $136, 23)|0);
 var $202=(($__i20+24)|0);
 var $st$42$0=(($202)|0);
 HEAP32[(($st$42$0)>>2)]=$145$0;
 var $st$43$1=(($202+4)|0);
 HEAP32[(($st$43$1)>>2)]=$145$1;
 var $203=(($__i20+184)|0);
 var $204=(($__i20+208)|0);
 var $$etemp$44$0=0;
 var $$etemp$44$1=0;
 var $st$45$0=(($204)|0);
 HEAP32[(($st$45$0)>>2)]=$$etemp$44$0;
 var $st$46$1=(($204+4)|0);
 HEAP32[(($st$46$1)>>2)]=$$etemp$44$1;
 var $205=(($_1_i21)|0);
 _memset($203, 0, 22)|0;
 _memset($205, 0, 216)|0;
 var $206=((($used_158)+(1))|0);
 var $used_2=$206;label=51;break;
 case 50: 
 var $208=((($used_158)+(1))|0);
 var $used_2=$208;label=51;break;
 case 51: 
 var $used_2;
 var $209=((($i_055)+(1))|0);
 var $210=HEAP16[(($131)>>1)];
 var $211=($210&65535);
 var $212=($209>>>0)<($211>>>0);
 if($212){var $i_055=$209;var $used_158=$used_2;label=33;break;}else{label=52;break;}
 case 52: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _client_or_ip_port_in_list($list,$length,$client_id,$ip_port){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=13552;
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=($length|0)==0;
 if($2){var $_0=0;label=23;break;}else{var $i_05=0;label=4;break;}
 case 2: 
 var $4=((($i_05)+(1))|0);
 var $5=($4>>>0)<($length>>>0);
 if($5){var $i_05=$4;label=4;break;}else{label=3;break;}
 case 3: 
 var $6=(($ip_port)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==2;
 var $9=(($ip_port+20)|0);
 var $10=(((((HEAPU8[($9)])|(HEAPU8[((($9)+(1))|0)]<<8))<<16)>>16));
 var $11=(($ip_port)|0);
 var $i_13=0;label=14;break;
 case 4: 
 var $i_05;
 var $12=(($list+((($i_05)*(464))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$12;var $r_05_i_i=$client_id;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $13=HEAP8[($l_04_i_i)];
 var $14=HEAP8[($r_05_i_i)];
 var $15=(($13<<24)>>24)==(($14<<24)>>24);
 if($15){label=6;break;}else{label=2;break;}
 case 6: 
 var $17=((($_03_i_i)-(1))|0);
 var $18=(($l_04_i_i+1)|0);
 var $19=(($r_05_i_i+1)|0);
 var $20=($17|0)==0;
 if($20){label=7;break;}else{var $_03_i_i=$17;var $l_04_i_i=$18;var $r_05_i_i=$19;label=5;break;}
 case 7: 
 var $21=(($ip_port)|0);
 var $22=(($ip_port)|0);
 var $23=HEAP8[($22)];
 if((($23<<24)>>24)==10){ label=11;break;}else if((($23<<24)>>24)==2){ label=8;break;}else{var $_0=1;label=23;break;}
 case 8: 
 var $25=(($list+((($i_05)*(464))&-1)+32)|0);
 var $26=(($25)|0);
 var $27=_LAN_ip($26);
 var $28=($27|0)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 var $30=_LAN_ip($21);
 var $31=($30|0)==0;
 if($31){var $_0=1;label=23;break;}else{label=10;break;}
 case 10: 
 var $33=(($25)|0);
 assert(24 % 1 === 0);(_memcpy($33, $22, 24)|0);
 var $34=(($list+((($i_05)*(464))&-1)+56)|0);
 var $st$2$0=(($34)|0);
 HEAP32[(($st$2$0)>>2)]=$1$0;
 var $st$3$1=(($34+4)|0);
 HEAP32[(($st$3$1)>>2)]=$1$1;
 var $_0=1;label=23;break;
 case 11: 
 var $36=(($list+((($i_05)*(464))&-1)+248)|0);
 var $37=(($36)|0);
 var $38=_LAN_ip($37);
 var $39=($38|0)==0;
 if($39){label=13;break;}else{label=12;break;}
 case 12: 
 var $41=_LAN_ip($21);
 var $42=($41|0)==0;
 if($42){var $_0=1;label=23;break;}else{label=13;break;}
 case 13: 
 var $44=(($36)|0);
 assert(24 % 1 === 0);(_memcpy($44, $22, 24)|0);
 var $45=(($list+((($i_05)*(464))&-1)+272)|0);
 var $st$4$0=(($45)|0);
 HEAP32[(($st$4$0)>>2)]=$1$0;
 var $st$5$1=(($45+4)|0);
 HEAP32[(($st$5$1)>>2)]=$1$1;
 var $_0=1;label=23;break;
 case 14: 
 var $i_13;
 if($8){label=15;break;}else{var $57=$7;label=18;break;}
 case 15: 
 var $47=(($list+((($i_13)*(464))&-1)+52)|0);
 var $48=(((((HEAPU8[($47)])|(HEAPU8[((($47)+(1))|0)]<<8))<<16)>>16));
 var $49=(($48<<16)>>16)!=0;
 var $50=(($48<<16)>>16)==(($10<<16)>>16);
 var $or_cond=$49&$50;
 if($or_cond){label=16;break;}else{label=22;break;}
 case 16: 
 var $51=(($list+((($i_13)*(464))&-1)+32)|0);
 var $52=_ip_equal($51,$11);
 var $phitmp4=($52|0)==0;
 if($phitmp4){label=22;break;}else{label=17;break;}
 case 17: 
 var $54=(($list+((($i_13)*(464))&-1)+56)|0);
 var $st$6$0=(($54)|0);
 HEAP32[(($st$6$0)>>2)]=$1$0;
 var $st$7$1=(($54+4)|0);
 HEAP32[(($st$7$1)>>2)]=$1$1;
 var $55=(($list+((($i_13)*(464))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($55, $client_id, 32)|0);
 var $56=(($list+((($i_13)*(464))&-1)+248)|0);
 _memset($56, 0, 216)|0;
 var $_0=1;label=23;break;
 case 18: 
 var $57;
 var $58=(($57<<24)>>24)==10;
 if($58){label=19;break;}else{label=22;break;}
 case 19: 
 var $60=(($list+((($i_13)*(464))&-1)+268)|0);
 var $61=(((((HEAPU8[($60)])|(HEAPU8[((($60)+(1))|0)]<<8))<<16)>>16));
 var $62=(($61<<16)>>16)!=0;
 var $63=(($61<<16)>>16)==(($10<<16)>>16);
 var $or_cond6=$62&$63;
 if($or_cond6){label=20;break;}else{label=22;break;}
 case 20: 
 var $64=(($list+((($i_13)*(464))&-1)+248)|0);
 var $65=_ip_equal($64,$11);
 var $phitmp3=($65|0)==0;
 if($phitmp3){label=22;break;}else{label=21;break;}
 case 21: 
 var $67=(($list+((($i_13)*(464))&-1)+272)|0);
 var $st$8$0=(($67)|0);
 HEAP32[(($st$8$0)>>2)]=$1$0;
 var $st$9$1=(($67+4)|0);
 HEAP32[(($st$9$1)>>2)]=$1$1;
 var $68=(($list+((($i_13)*(464))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($68, $client_id, 32)|0);
 var $69=(($list+((($i_13)*(464))&-1)+32)|0);
 _memset($69, 0, 216)|0;
 var $_0=1;label=23;break;
 case 22: 
 var $70=((($i_13)+(1))|0);
 var $71=($70>>>0)<($length>>>0);
 if($71){var $i_13=$70;label=14;break;}else{var $_0=0;label=23;break;}
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _DHT_addfriend($dht,$client_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $randnum_i=sp;
 var $1=(($dht+14968)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($2<<16)>>16)==0;
 var $_pre3=(($dht+14964)|0);
 var $_pre=HEAP32[(($_pre3)>>2)];
 if($3){var $19=0;var $18=$_pre;label=7;break;}else{var $i_01_i=0;label=3;break;}
 case 2: 
 var $5=((($i_01_i)+(1))|0);
 var $6=($2&65535);
 var $7=($5>>>0)<($6>>>0);
 if($7){var $i_01_i=$5;label=3;break;}else{var $19=$2;var $18=$_pre;label=7;break;}
 case 3: 
 var $i_01_i;
 var $8=(($_pre+((($i_01_i)*(3808))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$8;var $r_05_i_i=$client_id;label=4;break;
 case 4: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $9=HEAP8[($l_04_i_i)];
 var $10=HEAP8[($r_05_i_i)];
 var $11=(($9<<24)>>24)==(($10<<24)>>24);
 if($11){label=5;break;}else{label=2;break;}
 case 5: 
 var $13=((($_03_i_i)-(1))|0);
 var $14=(($l_04_i_i+1)|0);
 var $15=(($r_05_i_i+1)|0);
 var $16=($13|0)==0;
 if($16){label=6;break;}else{var $_03_i_i=$13;var $l_04_i_i=$14;var $r_05_i_i=$15;label=4;break;}
 case 6: 
 var $17=($i_01_i|0)==-1;
 if($17){var $19=$2;var $18=$_pre;label=7;break;}else{var $_0=1;label=9;break;}
 case 7: 
 var $18;
 var $19;
 var $20=(($18)|0);
 var $21=($19&65535);
 var $22=((($21)*(3808))&-1);
 var $23=((($22)+(3808))|0);
 var $24=_realloc($20,$23);
 var $25=$24;
 var $26=($24|0)==0;
 if($26){var $_0=1;label=9;break;}else{label=8;break;}
 case 8: 
 HEAP32[(($_pre3)>>2)]=$25;
 var $28=HEAP16[(($1)>>1)];
 var $29=($28&65535);
 var $30=(($25+((($29)*(3808))&-1))|0);
 _memset($30, 0, 3808)|0;
 assert(32 % 1 === 0);(_memcpy($30, $client_id, 32)|0);
 var $31=$randnum_i;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $$etemp$1$0=8;
 var $$etemp$1$1=0;
 _randombytes($31,$$etemp$1$0,$$etemp$1$1);
 var $ld$2$0=(($randnum_i)|0);
 var $32$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($randnum_i+4)|0);
 var $32$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;

 var $33=HEAP16[(($1)>>1)];
 var $34=($33&65535);
 var $35=HEAP32[(($_pre3)>>2)];
 var $36=(($35+((($34)*(3808))&-1)+3792)|0);
 var $st$5$0=(($36)|0);
 HEAP32[(($st$5$0)>>2)]=$32$0;
 var $st$6$1=(($36+4)|0);
 HEAP32[(($st$6$1)>>2)]=$32$1;
 var $37=((($33)+(1))&65535);
 HEAP16[(($1)>>1)]=$37;
 var $_0=0;label=9;break;
 case 9: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _DHT_delfriend($dht,$client_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($dht+14968)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($2<<16)>>16)==0;
 if($3){label=13;break;}else{label=2;break;}
 case 2: 
 var $4=(($dht+14964)|0);
 var $5=HEAP32[(($4)>>2)];
 var $i_03=0;label=4;break;
 case 3: 
 var $7=((($i_03)+(1))|0);
 var $8=($2&65535);
 var $9=($7>>>0)<($8>>>0);
 if($9){var $i_03=$7;label=4;break;}else{label=13;break;}
 case 4: 
 var $i_03;
 var $11=(($5+((($i_03)*(3808))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$11;var $r_05_i_i=$client_id;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $12=HEAP8[($l_04_i_i)];
 var $13=HEAP8[($r_05_i_i)];
 var $14=(($12<<24)>>24)==(($13<<24)>>24);
 if($14){label=6;break;}else{label=3;break;}
 case 6: 
 var $16=((($_03_i_i)-(1))|0);
 var $17=(($l_04_i_i+1)|0);
 var $18=(($r_05_i_i+1)|0);
 var $19=($16|0)==0;
 if($19){label=7;break;}else{var $_03_i_i=$16;var $l_04_i_i=$17;var $r_05_i_i=$18;label=5;break;}
 case 7: 
 var $20=((($2)-(1))&65535);
 HEAP16[(($1)>>1)]=$20;
 var $21=($20&65535);
 var $22=($21|0)==($i_03|0);
 if($22){var $27=$20;var $26=$5;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=(($5+((($21)*(3808))&-1))|0);
 assert(3808 % 1 === 0);(_memcpy($11, $24, 3808)|0);
 var $_pr=HEAP16[(($1)>>1)];
 var $_pre=HEAP32[(($4)>>2)];
 var $27=$_pr;var $26=$_pre;label=9;break;
 case 9: 
 var $26;
 var $27;
 var $28=(($27<<16)>>16)==0;
 var $29=(($26)|0);
 if($28){label=10;break;}else{label=11;break;}
 case 10: 
 _free($29);
 HEAP32[(($4)>>2)]=0;
 label=13;break;
 case 11: 
 var $32=($27&65535);
 var $33=((($32)*(3808))&-1);
 var $34=_realloc($29,$33);
 var $35=($34|0)==0;
 if($35){label=13;break;}else{label=12;break;}
 case 12: 
 var $37=$34;
 HEAP32[(($4)>>2)]=$37;
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _getnodes($dht,$ip_port,$public_key,$client_id,$sendback_node){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $plain_message=sp;
 var $encrypted_message=(sp)+(160);
 var $nonce=(sp)+(320);
 var $receiver=(sp)+(344);
 var $data=(sp)+(400);
 var $plain=(sp)+(672);
 var $encrypt=(sp)+(864);
 var $shared_key=(sp)+(1072);
 var $1=(($dht+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$public_key;var $r_05_i_i=$1;label=2;break;
 case 2: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $2=HEAP8[($l_04_i_i)];
 var $3=HEAP8[($r_05_i_i)];
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_03_i_i)-(1))|0);
 var $7=(($l_04_i_i+1)|0);
 var $8=(($r_05_i_i+1)|0);
 var $9=($6|0)==0;
 if($9){var $_2=-1;label=13;break;}else{var $_03_i_i=$6;var $l_04_i_i=$7;var $r_05_i_i=$8;label=2;break;}
 case 4: 
 var $10=(($plain_message)|0);
 var $$etemp$0$0=160;
 var $$etemp$0$1=0;

 _memset($10, 0, 160)|0;
 var $11=(($encrypted_message)|0);
 var $$etemp$1$0=160;
 var $$etemp$1$1=0;

 var $12=(($nonce)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=6;break;}else{label=5;break;}
 case 5: 
 var $$etemp$3$0=24;
 var $$etemp$3$1=0;
 var $$etemp$2=15032;
 _randombytes($$etemp$2,$$etemp$3$0,$$etemp$3$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=6;break;
 case 6: 
 var $i_01_i_i;
 var $14=((15032+$i_01_i_i)|0);
 var $15=HEAP8[($14)];
 var $16=((($15)+(1))&255);
 HEAP8[($14)]=$16;
 var $17=(($16<<24)>>24)==0;
 var $18=((($i_01_i_i)+(1))|0);
 var $19=($18>>>0)<24;
 var $or_cond_i_i=$17&$19;
 if($or_cond_i_i){var $i_01_i_i=$18;label=6;break;}else{label=7;break;}
 case 7: 
 assert(24 % 1 === 0);(_memcpy($12, 15032, 24)|0);
 assert(24 % 1 === 0);(_memcpy($11, 15032, 24)|0);
 var $ld$4$0=13552;
 var $20$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=13556;
 var $20$1=HEAP32[(($ld$5$1)>>2)];
 var $21=$plain_message;
 var $st$6$0=(($21)|0);
 HEAP32[(($st$6$0)>>2)]=$20$0;
 var $st$7$1=(($21+4)|0);
 HEAP32[(($st$7$1)>>2)]=$20$1;
 var $22=(($receiver)|0);
 var $$etemp$8$0=56;
 var $$etemp$8$1=0;

 assert(32 % 1 === 0);(_memcpy($22, $public_key, 32)|0);
 var $23=(($receiver+32)|0);
 var $24=(($ip_port)|0);
 assert(24 % 1 === 0);(_memcpy($23, $24, 24)|0);
 var $25=(($plain_message+8)|0);
 assert(56 % 1 === 0);(_memcpy($25, $22, 56)|0);
 var $26=($sendback_node|0)==0;
 var $27=(($plain_message+64)|0);
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($sendback_node)|0);
 assert(56 % 1 === 0);(_memcpy($27, $29, 56)|0);
 label=10;break;
 case 9: 
 HEAP32[(($27)>>2)]=0; HEAP32[((($27)+(4))>>2)]=0; HEAP32[((($27)+(8))>>2)]=0; HEAP32[((($27)+(12))>>2)]=0; HEAP32[((($27)+(16))>>2)]=0; HEAP32[((($27)+(20))>>2)]=0; HEAP32[((($27)+(24))>>2)]=0; HEAP32[((($27)+(28))>>2)]=0; HEAP32[((($27)+(32))>>2)]=0; HEAP32[((($27)+(36))>>2)]=0; HEAP32[((($27)+(40))>>2)]=0; HEAP32[((($27)+(44))>>2)]=0; HEAP32[((($27)+(48))>>2)]=0; HEAP32[((($27)+(52))>>2)]=0;
 label=10;break;
 case 10: 
 var $32=(($dht+14868)|0);
 var $33=(($encrypted_message+24)|0);
 var $34=_encrypt_data_symmetric($32,$12,$10,120,$33);
 var $35=($34|0)==136;
 if($35){label=11;break;}else{var $_2=-1;label=13;break;}
 case 11: 
 var $37=(($data)|0);
 var $$etemp$9$0=265;
 var $$etemp$9$1=0;

 var $38=(($plain)|0);
 var $$etemp$10$0=192;
 var $$etemp$10$1=0;

 var $39=(($encrypt)|0);
 var $$etemp$11$0=208;
 var $$etemp$11$1=0;

 assert(32 % 1 === 0);(_memcpy($38, $client_id, 32)|0);
 var $40=(($plain+32)|0);
 assert(160 % 1 === 0);(_memcpy($40, $11, 160)|0);
 var $41=(($shared_key)|0);
 var $42=(($dht+96896)|0);
 var $43=(($dht+14932)|0);
 _get_shared_key($42,$41,$43,$public_key);
 var $44=_encrypt_data_fast($41,$12,$38,192,$39);
 var $45=($44|0)==208;
 if($45){label=12;break;}else{var $_2=-1;label=13;break;}
 case 12: 
 HEAP8[($37)]=2;
 var $47=(($data+1)|0);
 assert(32 % 1 === 0);(_memcpy($47, $1, 32)|0);
 var $48=(($data+33)|0);
 assert(24 % 1 === 0);(_memcpy($48, $12, 24)|0);
 var $49=(($data+57)|0);
 assert(208 % 1 === 0);(_memcpy($49, $39, 208)|0);
 var $50=(($dht+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=_sendpacket($51,$ip_port,$37,265);
 var $_2=$52;label=13;break;
 case 13: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _route_tofriend($dht,$friend_id,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $friend_sent=sp;
 var $tmpcast=$friend_sent;
 var $ip_list=STACKTOP;STACKTOP = (STACKTOP + 192)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($dht+14968)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($2<<16)>>16)==0;
 if($3){var $_1=0;label=16;break;}else{label=2;break;}
 case 2: 
 var $4=(($dht+14964)|0);
 var $5=HEAP32[(($4)>>2)];
 var $i_01_i=0;label=4;break;
 case 3: 
 var $7=((($i_01_i)+(1))|0);
 var $8=($2&65535);
 var $9=($7>>>0)<($8>>>0);
 if($9){var $i_01_i=$7;label=4;break;}else{var $_1=0;label=16;break;}
 case 4: 
 var $i_01_i;
 var $11=(($5+((($i_01_i)*(3808))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$11;var $r_05_i_i=$friend_id;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $12=HEAP8[($l_04_i_i)];
 var $13=HEAP8[($r_05_i_i)];
 var $14=(($12<<24)>>24)==(($13<<24)>>24);
 if($14){label=6;break;}else{label=3;break;}
 case 6: 
 var $16=((($_03_i_i)-(1))|0);
 var $17=(($l_04_i_i+1)|0);
 var $18=(($r_05_i_i+1)|0);
 var $19=($16|0)==0;
 if($19){label=7;break;}else{var $_03_i_i=$16;var $l_04_i_i=$17;var $r_05_i_i=$18;label=5;break;}
 case 7: 
 var $20=($i_01_i|0)==-1;
 if($20){var $_1=0;label=16;break;}else{label=8;break;}
 case 8: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($friend_sent)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($friend_sent+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $22=(($ip_list)|0);
 var $$etemp$3$0=192;
 var $$etemp$3$1=0;

 var $23=(($ip_list)|0);
 var $24=(($i_01_i)&65535);
 var $25=_friend_iplist($dht,$23,$24);
 var $26=($25|0)<2;
 if($26){var $_1=0;label=16;break;}else{label=9;break;}
 case 9: 
 var $27=HEAP32[(($4)>>2)];
 var $28=(($dht+4)|0);
 var $sent_11_us=0;var $i_02_us=0;label=10;break;
 case 10: 
 var $i_02_us;
 var $sent_11_us;
 var $30=(($tmpcast+$i_02_us)|0);
 var $31=HEAP8[($30)];
 var $32=(($31<<24)>>24)==0;
 if($32){label=11;break;}else{var $sent_2_us=$sent_11_us;label=15;break;}
 case 11: 
 var $34=(($27+((($i_01_i)*(3808))&-1)+32+((($i_02_us)*(464))&-1)+216)|0);
 var $35=HEAP8[($34)];
 var $36=(($35<<24)>>24)==0;
 if($36){var $sent_2_us=$sent_11_us;label=15;break;}else{label=12;break;}
 case 12: 
 var $38=(($27+((($i_01_i)*(3808))&-1)+32+((($i_02_us)*(464))&-1)+240)|0);
 var $ld$4$0=(($38)|0);
 var $39$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=122;
 var $$etemp$6$1=0;
 var $40$0=_i64Add($39$0,$39$1,$$etemp$6$0,$$etemp$6$1);var $40$1=tempRet0;
 var $ld$7$0=13552;
 var $41$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=13556;
 var $41$1=HEAP32[(($ld$8$1)>>2)];
 var $42=(($40$1>>>0) > ($41$1>>>0)) | (((($40$1>>>0) == ($41$1>>>0) & ($40$0>>>0) >  ($41$0>>>0))));
 if($42){label=13;break;}else{var $sent_2_us=$sent_11_us;label=15;break;}
 case 13: 
 var $44=HEAP32[(($28)>>2)];
 var $45=(($27+((($i_01_i)*(3808))&-1)+32+((($i_02_us)*(464))&-1)+32)|0);
 var $46=_sendpacket($44,$45,$packet,$length);
 var $47=($46|0)==($length|0);
 if($47){label=14;break;}else{var $sent_2_us=$sent_11_us;label=15;break;}
 case 14: 
 var $49=((($sent_11_us)+(1))|0);
 HEAP8[($30)]=1;
 var $sent_2_us=$49;label=15;break;
 case 15: 
 var $sent_2_us;
 var $51=((($i_02_us)+(1))|0);
 var $52=($51>>>0)<8;
 if($52){var $sent_11_us=$sent_2_us;var $i_02_us=$51;label=10;break;}else{var $sent_11_1=$sent_2_us;var $i_02_1=0;label=17;break;}
 case 16: 
 var $_1;
 STACKTOP=sp;return $_1;
 case 17: 
 var $i_02_1;
 var $sent_11_1;
 var $53=(($tmpcast+$i_02_1)|0);
 var $54=HEAP8[($53)];
 var $55=(($54<<24)>>24)==0;
 if($55){label=18;break;}else{var $sent_2_1=$sent_11_1;label=22;break;}
 case 18: 
 var $57=(($27+((($i_01_i)*(3808))&-1)+32+((($i_02_1)*(464))&-1)+432)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24)==0;
 if($59){var $sent_2_1=$sent_11_1;label=22;break;}else{label=19;break;}
 case 19: 
 var $61=(($27+((($i_01_i)*(3808))&-1)+32+((($i_02_1)*(464))&-1)+456)|0);
 var $ld$9$0=(($61)|0);
 var $62$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($61+4)|0);
 var $62$1=HEAP32[(($ld$10$1)>>2)];
 var $$etemp$11$0=122;
 var $$etemp$11$1=0;
 var $63$0=_i64Add($62$0,$62$1,$$etemp$11$0,$$etemp$11$1);var $63$1=tempRet0;
 var $ld$12$0=13552;
 var $64$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=13556;
 var $64$1=HEAP32[(($ld$13$1)>>2)];
 var $65=(($63$1>>>0) > ($64$1>>>0)) | (((($63$1>>>0) == ($64$1>>>0) & ($63$0>>>0) >  ($64$0>>>0))));
 if($65){label=20;break;}else{var $sent_2_1=$sent_11_1;label=22;break;}
 case 20: 
 var $67=HEAP32[(($28)>>2)];
 var $68=(($27+((($i_01_i)*(3808))&-1)+32+((($i_02_1)*(464))&-1)+248)|0);
 var $69=_sendpacket($67,$68,$packet,$length);
 var $70=($69|0)==($length|0);
 if($70){label=21;break;}else{var $sent_2_1=$sent_11_1;label=22;break;}
 case 21: 
 var $72=((($sent_11_1)+(1))|0);
 HEAP8[($53)]=1;
 var $sent_2_1=$72;label=22;break;
 case 22: 
 var $sent_2_1;
 var $74=((($i_02_1)+(1))|0);
 var $75=($74>>>0)<8;
 if($75){var $sent_11_1=$sent_2_1;var $i_02_1=$74;label=17;break;}else{var $_1=$sent_2_1;label=16;break;}
  default: assert(0, "bad label: " + label);
 }

}


function _friend_iplist($dht,$ip_portlist,$friend_num){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+384)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ipv4s=sp;
 var $ipv6s=(sp)+(192);
 var $1=(($dht+14968)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535)>($friend_num&65535);
 if($3){label=2;break;}else{var $_1=-1;label=18;break;}
 case 2: 
 var $5=($friend_num&65535);
 var $6=(($dht+14964)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($ipv4s)|0);
 var $$etemp$0$0=192;
 var $$etemp$0$1=0;

 var $9=(($ipv6s)|0);
 var $$etemp$1$0=192;
 var $$etemp$1$1=0;

 var $10=(($7+((($5)*(3808))&-1))|0);
 var $ld$2$0=13552;
 var $11$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=13556;
 var $11$1=HEAP32[(($ld$3$1)>>2)];
 var $num_ipv4s_03=0;var $num_ipv6s_04=0;var $i_05=0;label=3;break;
 case 3: 
 var $i_05;
 var $num_ipv6s_04;
 var $num_ipv4s_03;
 var $13=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1)+216)|0);
 var $14=HEAP8[($13)];
 var $15=(($14<<24)>>24)==0;
 if($15){var $num_ipv4s_1=$num_ipv4s_03;label=6;break;}else{label=4;break;}
 case 4: 
 var $17=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1)+240)|0);
 var $ld$4$0=(($17)|0);
 var $18$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$5$1)>>2)];
 var $$etemp$6$0=122;
 var $$etemp$6$1=0;
 var $19$0=_i64Add($18$0,$18$1,$$etemp$6$0,$$etemp$6$1);var $19$1=tempRet0;
 var $20=(($19$1>>>0) > ($11$1>>>0)) | (((($19$1>>>0) == ($11$1>>>0) & ($19$0>>>0) >  ($11$0>>>0))));
 if($20){label=5;break;}else{var $num_ipv4s_1=$num_ipv4s_03;label=6;break;}
 case 5: 
 var $22=(($ipv4s+((($num_ipv4s_03)*(24))&-1))|0);
 assert(24 % 1 === 0);(_memcpy($22, $13, 24)|0);
 var $23=((($num_ipv4s_03)+(1))|0);
 var $num_ipv4s_1=$23;label=6;break;
 case 6: 
 var $num_ipv4s_1;
 var $25=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1)+432)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24)==0;
 if($27){var $num_ipv6s_1=$num_ipv6s_04;label=9;break;}else{label=7;break;}
 case 7: 
 var $29=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1)+456)|0);
 var $ld$7$0=(($29)|0);
 var $30$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($29+4)|0);
 var $30$1=HEAP32[(($ld$8$1)>>2)];
 var $$etemp$9$0=122;
 var $$etemp$9$1=0;
 var $31$0=_i64Add($30$0,$30$1,$$etemp$9$0,$$etemp$9$1);var $31$1=tempRet0;
 var $32=(($31$1>>>0) > ($11$1>>>0)) | (((($31$1>>>0) == ($11$1>>>0) & ($31$0>>>0) >  ($11$0>>>0))));
 if($32){label=8;break;}else{var $num_ipv6s_1=$num_ipv6s_04;label=9;break;}
 case 8: 
 var $34=(($ipv6s+((($num_ipv6s_04)*(24))&-1))|0);
 assert(24 % 1 === 0);(_memcpy($34, $25, 24)|0);
 var $35=((($num_ipv6s_04)+(1))|0);
 var $num_ipv6s_1=$35;label=9;break;
 case 9: 
 var $num_ipv6s_1;
 var $37=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$37;var $r_05_i_i=$10;label=10;break;
 case 10: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $38=HEAP8[($l_04_i_i)];
 var $39=HEAP8[($r_05_i_i)];
 var $40=(($38<<24)>>24)==(($39<<24)>>24);
 if($40){label=11;break;}else{label=14;break;}
 case 11: 
 var $42=((($_03_i_i)-(1))|0);
 var $43=(($l_04_i_i+1)|0);
 var $44=(($r_05_i_i+1)|0);
 var $45=($42|0)==0;
 if($45){label=12;break;}else{var $_03_i_i=$42;var $l_04_i_i=$43;var $r_05_i_i=$44;label=10;break;}
 case 12: 
 var $46=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1)+272)|0);
 var $ld$10$0=(($46)|0);
 var $47$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($46+4)|0);
 var $47$1=HEAP32[(($ld$11$1)>>2)];
 var $$etemp$12$0=122;
 var $$etemp$12$1=0;
 var $48$0=_i64Add($47$0,$47$1,$$etemp$12$0,$$etemp$12$1);var $48$1=tempRet0;
 var $49=(($48$1>>>0) > ($11$1>>>0)) | (((($48$1>>>0) == ($11$1>>>0) & ($48$0>>>0) >  ($11$0>>>0))));
 if($49){var $_1=0;label=18;break;}else{label=13;break;}
 case 13: 
 var $51=(($7+((($5)*(3808))&-1)+32+((($i_05)*(464))&-1)+56)|0);
 var $ld$13$0=(($51)|0);
 var $52$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($51+4)|0);
 var $52$1=HEAP32[(($ld$14$1)>>2)];
 var $$etemp$15$0=122;
 var $$etemp$15$1=0;
 var $53$0=_i64Add($52$0,$52$1,$$etemp$15$0,$$etemp$15$1);var $53$1=tempRet0;
 var $54=(($53$1>>>0) > ($11$1>>>0)) | (((($53$1>>>0) == ($11$1>>>0) & ($53$0>>>0) >  ($11$0>>>0))));
 if($54){var $_1=0;label=18;break;}else{label=14;break;}
 case 14: 
 var $55=((($i_05)+(1))|0);
 var $56=($55|0)<8;
 if($56){var $num_ipv4s_03=$num_ipv4s_1;var $num_ipv6s_04=$num_ipv6s_1;var $i_05=$55;label=3;break;}else{label=15;break;}
 case 15: 
 var $58=($num_ipv6s_1|0)<($num_ipv4s_1|0);
 var $59=(($ip_portlist)|0);
 if($58){label=17;break;}else{label=16;break;}
 case 16: 
 var $61=((($num_ipv6s_1)*(24))&-1);
 assert($61 % 1 === 0);(_memcpy($59, $9, $61)|0);
 var $_1=$num_ipv6s_1;label=18;break;
 case 17: 
 var $63=((($num_ipv4s_1)*(24))&-1);
 assert($63 % 1 === 0);(_memcpy($59, $8, $63)|0);
 var $_1=$num_ipv4s_1;label=18;break;
 case 18: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_getnodes($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2344)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $source1_sroa_1=(sp)+(2096);
 var $plain=(sp)+(2120);
 var $shared_key=(sp)+(2312);
 var $1=$object;
 var $2=($length|0)==265;
 if($2){label=2;break;}else{var $_1=1;label=19;break;}
 case 2: 
 var $4=(($packet+1)|0);
 var $5=(($object+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$4;var $r_05_i_i=$5;label=3;break;
 case 3: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $6=HEAP8[($l_04_i_i)];
 var $7=HEAP8[($r_05_i_i)];
 var $8=(($6<<24)>>24)==(($7<<24)>>24);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=((($_03_i_i)-(1))|0);
 var $11=(($l_04_i_i+1)|0);
 var $12=(($r_05_i_i+1)|0);
 var $13=($10|0)==0;
 if($13){var $_1=1;label=19;break;}else{var $_03_i_i=$10;var $l_04_i_i=$11;var $r_05_i_i=$12;label=3;break;}
 case 5: 
 var $14=(($plain)|0);
 var $$etemp$0$0=192;
 var $$etemp$0$1=0;

 var $15=(($shared_key)|0);
 var $16=(($object+14976)|0);
 var $17=$16;
 var $18=(($object+14932)|0);
 _get_shared_key($17,$15,$18,$4);
 var $19=(($packet+33)|0);
 var $20=(($packet+57)|0);
 var $21=(($temp_plain_i)|0);
 var $$etemp$1$0=1056;
 var $$etemp$1$1=0;

 var $22=(($temp_encrypted_i)|0);
 var $$etemp$2$0=1040;
 var $$etemp$2$1=0;

 _memset($22, 0, 1040)|0;
 var $23=(($temp_encrypted_i+16)|0);
 assert(208 % 1 === 0);(_memcpy($23, $20, 208)|0);
 var $$etemp$3$0=224;
 var $$etemp$3$1=0;
 var $24=_crypto_secretbox_xsalsa20poly1305_open($21,$22,$$etemp$3$0,$$etemp$3$1,$19,$15);
 var $25=($24|0)==-1;
 if($25){var $_1=1;label=19;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=6;break;}
 case 6: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $26=(($temp_plain_i+$i_02_i_i)|0);
 var $27=HEAP8[($26)];
 var $28=$27|$check_01_i_i;
 var $29=((($i_02_i_i)+(1))|0);
 var $30=($29>>>0)<32;
 if($30){var $check_01_i_i=$28;var $i_02_i_i=$29;label=6;break;}else{label=7;break;}
 case 7: 
 var $31=(($28<<24)>>24)==0;
 if($31){label=8;break;}else{var $_1=1;label=19;break;}
 case 8: 
 var $33=(($temp_plain_i+32)|0);
 assert(192 % 1 === 0);(_memcpy($14, $33, 192)|0);
 var $34=(($plain+32)|0);
 _sendnodes($1,$source,$4,$14,$34,$15);
 _sendnodes_ipv6($1,$source,$4,$14,$34,$15);
 var $35=(($object+178816)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($source)|0);
 var $39=HEAP8[($38)];
 var $40=(($source+1)|0);
 var $41=(($source1_sroa_1)|0);
 assert(23 % 1 === 0);(_memcpy($41, $40, 23)|0);
 var $42=(($39<<24)>>24)==0;
 if($42){var $_1=0;label=19;break;}else{var $i_06_i=0;label=11;break;}
 case 9: 
 var $44=($50>>>0)<16;
 if($44){var $i_06_i=$50;label=11;break;}else{label=10;break;}
 case 10: 
 var $45=(($37)|0);
 var $46=HEAP32[(($45)>>2)];
 var $i_12_i=0;label=14;break;
 case 11: 
 var $i_06_i;
 var $47=(($37+36880+((($i_06_i)*(56))&-1)+32)|0);
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24)==0;
 var $50=((($i_06_i)+(1))|0);
 if($49){label=12;break;}else{label=9;break;}
 case 12: 
 var $52=(($37+36880+((($i_06_i)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($52, $4, 32)|0);
 HEAP8[($47)]=$39;
 var $53=(($37+36880+((($i_06_i)*(56))&-1)+33)|0);
 assert(23 % 1 === 0);(_memcpy($53, $41, 23)|0);
 var $_1=0;label=19;break;
 case 13: 
 var $55=((($i_12_i)+(1))|0);
 var $56=($55>>>0)<16;
 if($56){var $i_12_i=$55;label=14;break;}else{var $_1=0;label=19;break;}
 case 14: 
 var $i_12_i;
 var $i_03_i_i=0;label=16;break;
 case 15: 
 var $59=($_sum>>>0)<32;
 if($59){var $i_03_i_i=$_sum;label=16;break;}else{label=13;break;}
 case 16: 
 var $i_03_i_i;
 var $61=(($46+14900+$i_03_i_i)|0);
 var $62=HEAP8[($61)];
 var $63=(($37+36880+((($i_12_i)*(56))&-1)+$i_03_i_i)|0);
 var $64=HEAP8[($63)];
 var $65=$64^$62;
 var $ispos_i_i=(($65<<24)>>24)>-1;
 var $neg_i_i=(((-$65))&255);
 var $66=($ispos_i_i?$65:$neg_i_i);
 var $_sum=((($i_03_i_i)+(1))|0);
 var $67=(($packet+$_sum)|0);
 var $68=HEAP8[($67)];
 var $69=$68^$62;
 var $ispos1_i_i=(($69<<24)>>24)>-1;
 var $neg2_i_i=(((-$69))&255);
 var $70=($ispos1_i_i?$69:$neg2_i_i);
 var $71=($66&255)<($70&255);
 if($71){label=13;break;}else{label=17;break;}
 case 17: 
 var $73=($66&255)>($70&255);
 if($73){label=18;break;}else{label=15;break;}
 case 18: 
 var $75=(($37+36880+((($i_12_i)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($75, $4, 32)|0);
 var $76=(($37+36880+((($i_12_i)*(56))&-1)+32)|0);
 HEAP8[($76)]=$39;
 var $77=(($76+1)|0);
 assert(23 % 1 === 0);(_memcpy($77, $41, 23)|0);
 var $_1=0;label=19;break;
 case 19: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_sendnodes($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+544)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $num_nodes=sp;
 var $sendback_node=(sp)+(8);
 var $ippts=(sp)+(64);
 var $nodes_list=(sp)+(96);
 var $1=$object;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 480)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_sub=(($2)|0);
 var $3=(($sendback_node)|0);
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $4=_handle_sendnodes_core($object,$source,$packet,$length,40,$_sub,480,$num_nodes,$sendback_node);
 var $5=($4|0)==0;
 if($5){label=2;break;}else{var $_0=1;label=8;break;}
 case 2: 
 var $7=HEAP32[(($num_nodes)>>2)];
 var $8=($7|0)==0;
 if($8){var $_0=0;label=8;break;}else{label=3;break;}
 case 3: 
 var $9=$2;
 var $ld$1$0=13552;
 var $10$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=13556;
 var $10$1=HEAP32[(($ld$2$1)>>2)];
 var $11=(($ippts)|0);
 var $12=(($ippts)|0);
 HEAP8[($12)]=2;
 var $13=(($ippts+24)|0);
 var $st$3$0=(($13)|0);
 HEAP32[(($st$3$0)>>2)]=$10$0;
 var $st$4$1=(($13+4)|0);
 HEAP32[(($st$4$1)>>2)]=$10$1;
 var $14=(($nodes_list)|0);
 var $$etemp$5$0=448;
 var $$etemp$5$1=0;

 var $extract_t2=(($7)&65535);
 var $15=(($ippts+4)|0);
 var $16=$15;
 var $17=(($ippts+20)|0);
 var $18=(($object+178816)|0);
 var $19=$18;
 var $20=(($packet+1)|0);
 var $i_01=0;label=4;break;
 case 4: 
 var $i_01;
 var $22=(($9+((($i_01)*(40))&-1)+32)|0);
 var $23=((((HEAPU8[($22)])|(HEAPU8[((($22)+(1))|0)]<<8)|(HEAPU8[((($22)+(2))|0)]<<16)|(HEAPU8[((($22)+(3))|0)]<<24))|0));
 if(($23|0)==0|($23|0)==-1){ label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($16)>>2)]=$23;
 var $25=(($9+((($i_01)*(40))&-1)+36)|0);
 var $26=(((((HEAPU8[($25)])|(HEAPU8[((($25)+(1))|0)]<<8))<<16)>>16));
 HEAP16[(($17)>>1)]=$26;
 var $27=HEAP32[(($19)>>2)];
 var $28=(($9+((($i_01)*(40))&-1))|0);
 _send_ping_request($27,$11,$28);
 _returnedip_ports($1,$11,$28,$20);
 var $29=(($nodes_list+((($i_01)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($29, $28, 32)|0);
 var $30=(($nodes_list+((($i_01)*(56))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($30, $12, 24)|0);
 label=6;break;
 case 6: 
 var $32=((($i_01)+(1))|0);
 var $33=($32>>>0)<($7>>>0);
 if($33){var $i_01=$32;label=4;break;}else{label=7;break;}
 case 7: 
 var $34=(($nodes_list)|0);
 _send_hardening_getnode_res($1,$sendback_node,$20,$34,$extract_t2);
 var $$etemp$6$0=448;
 var $$etemp$6$1=0;

 var $_0=0;label=8;break;
 case 8: 
 var $_0;
 var $$etemp$7$0=56;
 var $$etemp$7$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_sendnodes_ipv6($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $num_nodes=sp;
 var $sendback_node=(sp)+(8);
 var $1=$object;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 608)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_sub=(($2)|0);
 var $3=(($sendback_node)|0);
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $4=_handle_sendnodes_core($object,$source,$packet,$length,56,$_sub,608,$num_nodes,$sendback_node);
 var $5=($4|0)==0;
 if($5){label=2;break;}else{var $_0=1;label=10;break;}
 case 2: 
 var $7=HEAP32[(($num_nodes)>>2)];
 var $8=($7|0)==0;
 if($8){var $_0=0;label=10;break;}else{label=3;break;}
 case 3: 
 var $9=$2;
 var $10=(($packet+1)|0);
 var $11=(($7)&65535);
 _send_hardening_getnode_res($1,$sendback_node,$10,$9,$11);
 var $12=(($object+178816)|0);
 var $13=$12;
 var $i_01=0;label=4;break;
 case 4: 
 var $i_01;
 var $15=(($9+((($i_01)*(56))&-1)+32)|0);
 var $16=(($15)|0);
 var $17=HEAP8[($16)];
 if((($17<<24)>>24)==2){ label=5;break;}else if((($17<<24)>>24)==10){ label=6;break;}else{var $20=$17;label=7;break;}
 case 5: 
 HEAP8[($16)]=2;
 var $20=2;label=7;break;
 case 6: 
 HEAP8[($16)]=10;
 var $20=10;label=7;break;
 case 7: 
 var $20;
 var $21=(($9+((($i_01)*(56))&-1)+52)|0);
 var $22=(((((HEAPU8[($21)])|(HEAPU8[((($21)+(1))|0)]<<8))<<16)>>16));
 var $23=(($22<<16)>>16)==0;
 var $phitmp=(($20<<24)>>24)==0;
 var $or_cond=$23|$phitmp;
 if($or_cond){label=9;break;}else{label=8;break;}
 case 8: 
 var $25=HEAP32[(($13)>>2)];
 var $26=(($9+((($i_01)*(56))&-1))|0);
 _send_ping_request($25,$15,$26);
 _returnedip_ports($1,$15,$26,$10);
 label=9;break;
 case 9: 
 var $27=((($i_01)+(1))|0);
 var $28=($27>>>0)<($7>>>0);
 if($28){var $i_01=$27;label=4;break;}else{var $_0=0;label=10;break;}
 case 10: 
 var $_0;
 var $$etemp$1$0=56;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_NATping($object,$source,$source_pubkey,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2464)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce_i_i=sp;
 var $temp_i_i=(sp)+(24);
 var $ip_list_i_i=(sp)+(1048);
 var $packet_i=(sp)+(1432);
 var $randnum_i=(sp)+(2456);
 var $1=($length|0)==9;
 if($1){label=2;break;}else{var $_0=1;label=36;break;}
 case 2: 
 var $3=(($packet+1)|0);
 var $4=$3;
 var $ld$0$0=(($4)|0);
 var $5$0=((((HEAPU8[($ld$0$0)])|(HEAPU8[((($ld$0$0)+(1))|0)]<<8)|(HEAPU8[((($ld$0$0)+(2))|0)]<<16)|(HEAPU8[((($ld$0$0)+(3))|0)]<<24))|0));
 var $ld$1$1=(($4+4)|0);
 var $5$1=((((HEAPU8[($ld$1$1)])|(HEAPU8[((($ld$1$1)+(1))|0)]<<8)|(HEAPU8[((($ld$1$1)+(2))|0)]<<16)|(HEAPU8[((($ld$1$1)+(3))|0)]<<24))|0));
 var $6=(($object+14968)|0);
 var $7=$6;
 var $8=HEAP16[(($7)>>1)];
 var $9=(($8<<16)>>16)==0;
 if($9){var $_0=1;label=36;break;}else{label=3;break;}
 case 3: 
 var $10=(($object+14964)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $i_01_i=0;label=5;break;
 case 4: 
 var $14=((($i_01_i)+(1))|0);
 var $15=($8&65535);
 var $16=($14>>>0)<($15>>>0);
 if($16){var $i_01_i=$14;label=5;break;}else{var $_0=1;label=36;break;}
 case 5: 
 var $i_01_i;
 var $18=(($12+((($i_01_i)*(3808))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$18;var $r_05_i_i=$source_pubkey;label=6;break;
 case 6: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $19=HEAP8[($l_04_i_i)];
 var $20=HEAP8[($r_05_i_i)];
 var $21=(($19<<24)>>24)==(($20<<24)>>24);
 if($21){label=7;break;}else{label=4;break;}
 case 7: 
 var $23=((($_03_i_i)-(1))|0);
 var $24=(($l_04_i_i+1)|0);
 var $25=(($r_05_i_i+1)|0);
 var $26=($23|0)==0;
 if($26){label=8;break;}else{var $_03_i_i=$23;var $l_04_i_i=$24;var $r_05_i_i=$25;label=6;break;}
 case 8: 
 var $27=($i_01_i|0)==-1;
 if($27){var $_0=1;label=36;break;}else{label=9;break;}
 case 9: 
 var $29=HEAP8[($packet)];
 if((($29<<24)>>24)==0){ label=10;break;}else if((($29<<24)>>24)==1){ label=34;break;}else{var $_0=1;label=36;break;}
 case 10: 
 var $31=(($packet_i)|0);
 var $$etemp$2$0=1024;
 var $$etemp$2$1=0;

 var $32=(($object+14900)|0);
 var $33=(($object+14932)|0);
 var $34=(($nonce_i_i)|0);
 var $$etemp$3$0=24;
 var $$etemp$3$1=0;

 var $35=(($temp_i_i)|0);
 var $$etemp$4$0=1024;
 var $$etemp$4$1=0;

 var $36=(($temp_i_i+1)|0);
 HEAP8[($36)]=1;
 var $37=(($temp_i_i+2)|0);
 var $38=$37;
 var $st$5$0=(($38)|0);
 tempBigInt=$5$0;HEAP8[($st$5$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$5$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$5$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$5$0)+(3))|0)]=tempBigInt&0xff;
 var $st$6$1=(($38+4)|0);
 tempBigInt=$5$1;HEAP8[($st$6$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$6$1)+(3))|0)]=tempBigInt&0xff;
 HEAP8[($35)]=-2;
 var $_b_i_i_i=HEAP8[(136)];
 if($_b_i_i_i){var $i_01_i_i_i_i=0;label=12;break;}else{label=11;break;}
 case 11: 
 var $$etemp$8$0=24;
 var $$etemp$8$1=0;
 var $$etemp$7=15032;
 _randombytes($$etemp$7,$$etemp$8$0,$$etemp$8$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i_i=0;label=12;break;
 case 12: 
 var $i_01_i_i_i_i;
 var $40=((15032+$i_01_i_i_i_i)|0);
 var $41=HEAP8[($40)];
 var $42=((($41)+(1))&255);
 HEAP8[($40)]=$42;
 var $43=(($42<<24)>>24)==0;
 var $44=((($i_01_i_i_i_i)+(1))|0);
 var $45=($44>>>0)<24;
 var $or_cond_i_i_i_i=$43&$45;
 if($or_cond_i_i_i_i){var $i_01_i_i_i_i=$44;label=12;break;}else{label=13;break;}
 case 13: 
 assert(24 % 1 === 0);(_memcpy($34, 15032, 24)|0);
 var $46=(($packet_i+89)|0);
 var $47=_encrypt_data($source_pubkey,$33,$34,$35,10,$46);
 var $48=($47|0)==-1;
 if($48){label=33;break;}else{label=14;break;}
 case 14: 
 HEAP8[($31)]=32;
 var $49=(($packet_i+1)|0);
 assert(32 % 1 === 0);(_memcpy($49, $source_pubkey, 32)|0);
 var $50=(($packet_i+33)|0);
 assert(32 % 1 === 0);(_memcpy($50, $32, 32)|0);
 var $51=(($packet_i+65)|0);
 assert(24 % 1 === 0);(_memcpy($51, $34, 24)|0);
 var $52=((($47)+(89))|0);
 var $$etemp$9$0=24;
 var $$etemp$9$1=0;

 var $53=($52|0)==-1;
 if($53){label=33;break;}else{label=15;break;}
 case 15: 
 var $55=HEAP16[(($7)>>1)];
 var $56=(($55<<16)>>16)==0;
 if($56){label=33;break;}else{label=16;break;}
 case 16: 
 var $57=HEAP32[(($11)>>2)];
 var $i_01_i_i_i=0;label=18;break;
 case 17: 
 var $59=((($i_01_i_i_i)+(1))|0);
 var $60=($55&65535);
 var $61=($59>>>0)<($60>>>0);
 if($61){var $i_01_i_i_i=$59;label=18;break;}else{label=33;break;}
 case 18: 
 var $i_01_i_i_i;
 var $63=(($57+((($i_01_i_i_i)*(3808))&-1))|0);
 var $_03_i_i_i=32;var $l_04_i_i_i=$63;var $r_05_i_i_i=$source_pubkey;label=19;break;
 case 19: 
 var $r_05_i_i_i;
 var $l_04_i_i_i;
 var $_03_i_i_i;
 var $64=HEAP8[($l_04_i_i_i)];
 var $65=HEAP8[($r_05_i_i_i)];
 var $66=(($64<<24)>>24)==(($65<<24)>>24);
 if($66){label=20;break;}else{label=17;break;}
 case 20: 
 var $68=((($_03_i_i_i)-(1))|0);
 var $69=(($l_04_i_i_i+1)|0);
 var $70=(($r_05_i_i_i+1)|0);
 var $71=($68|0)==0;
 if($71){label=21;break;}else{var $_03_i_i_i=$68;var $l_04_i_i_i=$69;var $r_05_i_i_i=$70;label=19;break;}
 case 21: 
 var $72=($i_01_i_i_i|0)==-1;
 if($72){label=33;break;}else{label=22;break;}
 case 22: 
 var $73=(($ip_list_i_i)|0);
 var $$etemp$10$0=384;
 var $$etemp$10$1=0;

 var $ld$11$0=13552;
 var $74$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=13556;
 var $74$1=HEAP32[(($ld$12$1)>>2)];
 var $n_11_us_i_i=0;var $i_02_us_i_i=0;label=23;break;
 case 23: 
 var $i_02_us_i_i;
 var $n_11_us_i_i;
 var $76=(($57+((($i_01_i_i_i)*(3808))&-1)+32+((($i_02_us_i_i)*(464))&-1)+216)|0);
 var $77=HEAP8[($76)];
 var $78=(($77<<24)>>24)==0;
 if($78){var $n_2_us_i_i=$n_11_us_i_i;label=26;break;}else{label=24;break;}
 case 24: 
 var $80=(($57+((($i_01_i_i_i)*(3808))&-1)+32+((($i_02_us_i_i)*(464))&-1)+240)|0);
 var $ld$13$0=(($80)|0);
 var $81$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($80+4)|0);
 var $81$1=HEAP32[(($ld$14$1)>>2)];
 var $$etemp$15$0=122;
 var $$etemp$15$1=0;
 var $82$0=_i64Add($81$0,$81$1,$$etemp$15$0,$$etemp$15$1);var $82$1=tempRet0;
 var $83=(($82$1>>>0) > ($74$1>>>0)) | (((($82$1>>>0) == ($74$1>>>0) & ($82$0>>>0) >  ($74$0>>>0))));
 if($83){label=25;break;}else{var $n_2_us_i_i=$n_11_us_i_i;label=26;break;}
 case 25: 
 var $85=(($ip_list_i_i+((($n_11_us_i_i)*(24))&-1))|0);
 var $86=(($57+((($i_01_i_i_i)*(3808))&-1)+32+((($i_02_us_i_i)*(464))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($85, $86, 24)|0);
 var $87=((($n_11_us_i_i)+(1))|0);
 var $n_2_us_i_i=$87;label=26;break;
 case 26: 
 var $n_2_us_i_i;
 var $89=((($i_02_us_i_i)+(1))|0);
 var $90=($89>>>0)<8;
 if($90){var $n_11_us_i_i=$n_2_us_i_i;var $i_02_us_i_i=$89;label=23;break;}else{var $n_11_1_i_i=$n_2_us_i_i;var $i_02_1_i_i=0;label=28;break;}
 case 27: 
 var $92=(($object+4)|0);
 var $93=$92;
 var $94=HEAP32[(($93)>>2)];
 var $95=_rand();
 var $96=(((($95|0))%(($n_2_1_i_i|0)))&-1);
 var $97=(($ip_list_i_i+((($96)*(24))&-1))|0);
 var $98=_sendpacket($94,$97,$31,$52);
 label=33;break;
 case 28: 
 var $i_02_1_i_i;
 var $n_11_1_i_i;
 var $99=(($57+((($i_01_i_i_i)*(3808))&-1)+32+((($i_02_1_i_i)*(464))&-1)+432)|0);
 var $100=HEAP8[($99)];
 var $101=(($100<<24)>>24)==0;
 if($101){var $n_2_1_i_i=$n_11_1_i_i;label=31;break;}else{label=29;break;}
 case 29: 
 var $103=(($57+((($i_01_i_i_i)*(3808))&-1)+32+((($i_02_1_i_i)*(464))&-1)+456)|0);
 var $ld$16$0=(($103)|0);
 var $104$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($103+4)|0);
 var $104$1=HEAP32[(($ld$17$1)>>2)];
 var $$etemp$18$0=122;
 var $$etemp$18$1=0;
 var $105$0=_i64Add($104$0,$104$1,$$etemp$18$0,$$etemp$18$1);var $105$1=tempRet0;
 var $106=(($105$1>>>0) > ($74$1>>>0)) | (((($105$1>>>0) == ($74$1>>>0) & ($105$0>>>0) >  ($74$0>>>0))));
 if($106){label=30;break;}else{var $n_2_1_i_i=$n_11_1_i_i;label=31;break;}
 case 30: 
 var $108=(($ip_list_i_i+((($n_11_1_i_i)*(24))&-1))|0);
 var $109=(($57+((($i_01_i_i_i)*(3808))&-1)+32+((($i_02_1_i_i)*(464))&-1)+248)|0);
 assert(24 % 1 === 0);(_memcpy($108, $109, 24)|0);
 var $110=((($n_11_1_i_i)+(1))|0);
 var $n_2_1_i_i=$110;label=31;break;
 case 31: 
 var $n_2_1_i_i;
 var $112=((($i_02_1_i_i)+(1))|0);
 var $113=($112>>>0)<8;
 if($113){var $n_11_1_i_i=$n_2_1_i_i;var $i_02_1_i_i=$112;label=28;break;}else{label=32;break;}
 case 32: 
 var $114=($n_2_1_i_i|0)<1;
 if($114){label=33;break;}else{label=27;break;}
 case 33: 
 var $$etemp$19$0=1024;
 var $$etemp$19$1=0;

 var $ld$20$0=13552;
 var $115$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=13556;
 var $115$1=HEAP32[(($ld$21$1)>>2)];
 var $116=(($12+((($i_01_i)*(3808))&-1)+3784)|0);
 var $st$22$0=(($116)|0);
 HEAP32[(($st$22$0)>>2)]=$115$0;
 var $st$23$1=(($116+4)|0);
 HEAP32[(($st$23$1)>>2)]=$115$1;
 var $_0=0;label=36;break;
 case 34: 
 var $118=(($12+((($i_01_i)*(3808))&-1)+3792)|0);
 var $ld$24$0=(($118)|0);
 var $119$0=HEAP32[(($ld$24$0)>>2)];
 var $ld$25$1=(($118+4)|0);
 var $119$1=HEAP32[(($ld$25$1)>>2)];
 var $120=(($119$0|0) == ($5$0|0)) & (($119$1|0) == ($5$1|0));
 if($120){label=35;break;}else{var $_0=1;label=36;break;}
 case 35: 
 var $122=$randnum_i;
 var $$etemp$26$0=8;
 var $$etemp$26$1=0;

 var $$etemp$27$0=8;
 var $$etemp$27$1=0;
 _randombytes($122,$$etemp$27$0,$$etemp$27$1);
 var $ld$28$0=(($randnum_i)|0);
 var $123$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($randnum_i+4)|0);
 var $123$1=HEAP32[(($ld$29$1)>>2)];
 var $$etemp$30$0=8;
 var $$etemp$30$1=0;

 var $st$31$0=(($118)|0);
 HEAP32[(($st$31$0)>>2)]=$123$0;
 var $st$32$1=(($118+4)|0);
 HEAP32[(($st$32$1)>>2)]=$123$1;
 var $124=(($12+((($i_01_i)*(3808))&-1)+3760)|0);
 HEAP8[($124)]=1;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_hardening($object,$source,$source_pubkey,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $node=sp;
 var $tocheck_node=(sp)+(56);
 var $1=$object;
 var $2=($length>>>0)<2;
 if($2){var $_2=1;label=50;break;}else{label=2;break;}
 case 2: 
 var $4=HEAP8[($packet)];
 var $5=($4&255);
 if(($5|0)==2){ label=3;break;}else if(($5|0)==3){ label=5;break;}else{var $_2=1;label=50;break;}
 case 3: 
 var $7=($length|0)==384;
 if($7){label=4;break;}else{var $_2=1;label=50;break;}
 case 4: 
 var $9=(($node)|0);
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $10=(($tocheck_node)|0);
 var $$etemp$1$0=56;
 var $$etemp$1$1=0;

 var $11=(($node+32)|0);
 var $12=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($11, $12, 24)|0);
 assert(32 % 1 === 0);(_memcpy($9, $source_pubkey, 32)|0);
 var $13=(($packet+1)|0);
 assert(56 % 1 === 0);(_memcpy($10, $13, 56)|0);
 var $14=(($tocheck_node+32)|0);
 var $15=(($packet+57)|0);
 var $16=_getnodes($1,$14,$10,$15,$node);
 var $17=($16|0)==-1;
 var $_=($17&1);
 var $$etemp$2$0=56;
 var $$etemp$2$1=0;

 var $$etemp$3$0=56;
 var $$etemp$3$1=0;

 var $_2=$_;label=50;break;
 case 5: 
 var $19=($length>>>0)<34;
 if($19){var $_2=1;label=50;break;}else{label=6;break;}
 case 6: 
 var $21=((($length)-(33))|0);
 var $22=(((($21>>>0))%(56))&-1);
 var $23=($22|0)==0;
 if($23){label=7;break;}else{var $_2=1;label=50;break;}
 case 7: 
 var $25=(((($21>>>0))/(56))&-1);
 var $26=(($25)&65535);
 var $27=$25&65535;
 var $28=($27>>>0)>8;
 var $29=($27|0)==0;
 var $or_cond=$28|$29;
 if($or_cond){var $_2=1;label=50;break;}else{label=8;break;}
 case 8: 
 var $30=_llvm_stacksave();
 var $31=STACKTOP;STACKTOP = (STACKTOP + ((($27)*(56))&-1))|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $32=(($31)|0);
 var $33=(($packet+1)|0);
 var $34=(($packet+33)|0);
 var $35=((($27)*(56))&-1);
 assert($35 % 1 === 0);(_memcpy($32, $34, $35)|0);
 var $i_011=0;label=9;break;
 case 9: 
 var $i_011;
 var $37=(($31+((($i_011)*(56))&-1)+32)|0);
 var $38=HEAP8[($37)];
 if((($38<<24)>>24)==2){ label=10;break;}else if((($38<<24)>>24)==10){ label=11;break;}else{label=12;break;}
 case 10: 
 HEAP8[($37)]=2;
 label=12;break;
 case 11: 
 HEAP8[($37)]=10;
 label=12;break;
 case 12: 
 var $41=((($i_011)+(1))|0);
 var $42=($41>>>0)<($27>>>0);
 if($42){var $i_011=$41;label=9;break;}else{label=13;break;}
 case 13: 
 var $43=(($26<<16)>>16)==0;
 if($43){var $counter_0_lcssa_i=0;label=32;break;}else{label=14;break;}
 case 14: 
 var $44=(($object+14900)|0);
 var $ld$4$0=13552;
 var $45$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=13556;
 var $45$1=HEAP32[(($ld$5$1)>>2)];
 var $i_08_i=0;var $counter_09_i=0;label=15;break;
 case 15: 
 var $counter_09_i;
 var $i_08_i;
 var $47=(($31+((($i_08_i)*(56))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$47;var $r_05_i_i=$44;label=16;break;
 case 16: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $48=HEAP8[($l_04_i_i)];
 var $49=HEAP8[($r_05_i_i)];
 var $50=(($48<<24)>>24)==(($49<<24)>>24);
 if($50){label=17;break;}else{label=19;break;}
 case 17: 
 var $52=((($_03_i_i)-(1))|0);
 var $53=(($l_04_i_i+1)|0);
 var $54=(($r_05_i_i+1)|0);
 var $55=($52|0)==0;
 if($55){label=18;break;}else{var $_03_i_i=$52;var $l_04_i_i=$53;var $r_05_i_i=$54;label=16;break;}
 case 18: 
 var $56=((($counter_09_i)+(1))|0);
 var $counter_1_i=$56;label=31;break;
 case 19: 
 var $57=(($31+((($i_08_i)*(56))&-1)+32)|0);
 var $58=HEAP8[($57)];
 var $59=($58&255);
 if((($59<<16)>>16)==2){ var $i_03_us_i_i=0;label=20;break;}else if((($59<<16)>>16)==10){ var $i_03_us5_i_i=0;label=24;break;}else{var $counter_1_i=$counter_09_i;label=31;break;}
 case 20: 
 var $i_03_us_i_i;
 var $60=(($1+8+((($i_03_us_i_i)*(464))&-1))|0);
 var $_03_i19=32;var $l_04_i18=$60;var $r_05_i17=$47;label=21;break;
 case 21: 
 var $r_05_i17;
 var $l_04_i18;
 var $_03_i19;
 var $61=HEAP8[($l_04_i18)];
 var $62=HEAP8[($r_05_i17)];
 var $63=(($61<<24)>>24)==(($62<<24)>>24);
 if($63){label=22;break;}else{label=23;break;}
 case 22: 
 var $65=((($_03_i19)-(1))|0);
 var $66=(($l_04_i18+1)|0);
 var $67=(($r_05_i17+1)|0);
 var $68=($65|0)==0;
 if($68){label=28;break;}else{var $_03_i19=$65;var $l_04_i18=$66;var $r_05_i17=$67;label=21;break;}
 case 23: 
 var $69=((($i_03_us_i_i)+(1))|0);
 var $70=($69>>>0)<32;
 if($70){var $i_03_us_i_i=$69;label=20;break;}else{var $counter_1_i=$counter_09_i;label=31;break;}
 case 24: 
 var $i_03_us5_i_i;
 var $71=(($1+8+((($i_03_us5_i_i)*(464))&-1))|0);
 var $_03_i14=32;var $l_04_i13=$71;var $r_05_i12=$47;label=25;break;
 case 25: 
 var $r_05_i12;
 var $l_04_i13;
 var $_03_i14;
 var $72=HEAP8[($l_04_i13)];
 var $73=HEAP8[($r_05_i12)];
 var $74=(($72<<24)>>24)==(($73<<24)>>24);
 if($74){label=26;break;}else{label=27;break;}
 case 26: 
 var $76=((($_03_i14)-(1))|0);
 var $77=(($l_04_i13+1)|0);
 var $78=(($r_05_i12+1)|0);
 var $79=($76|0)==0;
 if($79){label=29;break;}else{var $_03_i14=$76;var $l_04_i13=$77;var $r_05_i12=$78;label=25;break;}
 case 27: 
 var $80=((($i_03_us5_i_i)+(1))|0);
 var $81=($80>>>0)<32;
 if($81){var $i_03_us5_i_i=$80;label=24;break;}else{var $counter_1_i=$counter_09_i;label=31;break;}
 case 28: 
 var $82=(($1+8+((($i_03_us_i_i)*(464))&-1)+32)|0);
 var $_0_i_ph_i=$82;label=30;break;
 case 29: 
 var $83=(($1+8+((($i_03_us5_i_i)*(464))&-1)+248)|0);
 var $_0_i_ph_i=$83;label=30;break;
 case 30: 
 var $_0_i_ph_i;
 var $85=(($_0_i_ph_i+24)|0);
 var $ld$6$0=(($85)|0);
 var $86$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($85+4)|0);
 var $86$1=HEAP32[(($ld$7$1)>>2)];
 var $$etemp$8$0=122;
 var $$etemp$8$1=0;
 var $87$0=_i64Add($86$0,$86$1,$$etemp$8$0,$$etemp$8$1);var $87$1=tempRet0;
 var $88=(($87$1>>>0) > ($45$1>>>0)) | (((($87$1>>>0) == ($45$1>>>0) & ($87$0>>>0) >  ($45$0>>>0))));
 var $89=($88&1);
 var $_counter_0_i=((($89)+($counter_09_i))|0);
 var $counter_1_i=$_counter_0_i;label=31;break;
 case 31: 
 var $counter_1_i;
 var $90=((($i_08_i)+(1))|0);
 var $91=($90>>>0)<($27>>>0);
 if($91){var $i_08_i=$90;var $counter_09_i=$counter_1_i;label=15;break;}else{var $counter_0_lcssa_i=$counter_1_i;label=32;break;}
 case 32: 
 var $counter_0_lcssa_i;
 var $92=((($27)+(2))|0);
 var $93=$92>>>1;
 var $94=($counter_0_lcssa_i>>>0)<($93>>>0);
 if($94){var $_1=1;label=49;break;}else{label=33;break;}
 case 33: 
 var $96=(($31+32)|0);
 var $97=HEAP8[($96)];
 var $98=($97&255);
 if((($98<<16)>>16)==2){ var $i_03_us_i=0;label=34;break;}else if((($98<<16)>>16)==10){ var $i_03_us5_i=0;label=38;break;}else{var $_1=1;label=49;break;}
 case 34: 
 var $i_03_us_i;
 var $99=(($1+8+((($i_03_us_i)*(464))&-1))|0);
 var $_03_i9=32;var $l_04_i8=$99;var $r_05_i7=$33;label=35;break;
 case 35: 
 var $r_05_i7;
 var $l_04_i8;
 var $_03_i9;
 var $100=HEAP8[($l_04_i8)];
 var $101=HEAP8[($r_05_i7)];
 var $102=(($100<<24)>>24)==(($101<<24)>>24);
 if($102){label=36;break;}else{label=37;break;}
 case 36: 
 var $104=((($_03_i9)-(1))|0);
 var $105=(($l_04_i8+1)|0);
 var $106=(($r_05_i7+1)|0);
 var $107=($104|0)==0;
 if($107){label=42;break;}else{var $_03_i9=$104;var $l_04_i8=$105;var $r_05_i7=$106;label=35;break;}
 case 37: 
 var $108=((($i_03_us_i)+(1))|0);
 var $109=($108>>>0)<32;
 if($109){var $i_03_us_i=$108;label=34;break;}else{var $_1=1;label=49;break;}
 case 38: 
 var $i_03_us5_i;
 var $110=(($1+8+((($i_03_us5_i)*(464))&-1))|0);
 var $_03_i4=32;var $l_04_i3=$110;var $r_05_i2=$33;label=39;break;
 case 39: 
 var $r_05_i2;
 var $l_04_i3;
 var $_03_i4;
 var $111=HEAP8[($l_04_i3)];
 var $112=HEAP8[($r_05_i2)];
 var $113=(($111<<24)>>24)==(($112<<24)>>24);
 if($113){label=40;break;}else{label=41;break;}
 case 40: 
 var $115=((($_03_i4)-(1))|0);
 var $116=(($l_04_i3+1)|0);
 var $117=(($r_05_i2+1)|0);
 var $118=($115|0)==0;
 if($118){label=43;break;}else{var $_03_i4=$115;var $l_04_i3=$116;var $r_05_i2=$117;label=39;break;}
 case 41: 
 var $119=((($i_03_us5_i)+(1))|0);
 var $120=($119>>>0)<32;
 if($120){var $i_03_us5_i=$119;label=38;break;}else{var $_1=1;label=49;break;}
 case 42: 
 var $121=(($1+8+((($i_03_us_i)*(464))&-1)+32)|0);
 var $_0_i_ph=$121;label=44;break;
 case 43: 
 var $122=(($1+8+((($i_03_us5_i)*(464))&-1)+248)|0);
 var $_0_i_ph=$122;label=44;break;
 case 44: 
 var $_0_i_ph;
 var $124=(($_0_i_ph+96)|0);
 var $ld$9$0=(($124)|0);
 var $125$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($124+4)|0);
 var $125$1=HEAP32[(($ld$10$1)>>2)];
 var $$etemp$11$0=120;
 var $$etemp$11$1=0;
 var $126$0=_i64Add($125$0,$125$1,$$etemp$11$0,$$etemp$11$1);var $126$1=tempRet0;
 var $ld$12$0=13552;
 var $127$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=13556;
 var $127$1=HEAP32[(($ld$13$1)>>2)];
 var $128=(($126$1>>>0) > ($127$1>>>0)) | (((($126$1>>>0) == ($127$1>>>0) & ($126$0>>>0) >  ($127$0>>>0))));
 if($128){label=45;break;}else{var $_1=1;label=49;break;}
 case 45: 
 var $130=(($_0_i_ph+104)|0);
 var $_03_i=32;var $l_04_i=$130;var $r_05_i=$source_pubkey;label=46;break;
 case 46: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $131=HEAP8[($l_04_i)];
 var $132=HEAP8[($r_05_i)];
 var $133=(($131<<24)>>24)==(($132<<24)>>24);
 if($133){label=47;break;}else{var $_1=1;label=49;break;}
 case 47: 
 var $135=((($_03_i)-(1))|0);
 var $136=(($l_04_i+1)|0);
 var $137=(($r_05_i+1)|0);
 var $138=($135|0)==0;
 if($138){label=48;break;}else{var $_03_i=$135;var $l_04_i=$136;var $r_05_i=$137;label=46;break;}
 case 48: 
 var $139=(($_0_i_ph+88)|0);
 HEAP8[($139)]=1;
 var $_1=0;label=49;break;
 case 49: 
 var $_1;
 _llvm_stackrestore($30);
 var $_2=$_1;label=50;break;
 case 50: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _dht_load_state_callback($outer,$data,$length,$type){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(24);
 var $3=$outer;
 var $4=($type&65535);
 if(($4|0)==4){ label=11;break;}else if(($4|0)==3){ label=2;break;}else{label=19;break;}
 case 2: 
 var $6=(((($length>>>0))%(3808))&-1);
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=20;break;}
 case 3: 
 var $9=$data;
 var $10=(((($length>>>0))/(3808))&-1);
 var $11=($length>>>0)>3807;
 if($11){var $i_05=0;label=4;break;}else{label=20;break;}
 case 4: 
 var $i_05;
 var $12=(($9+((($i_05)*(3808))&-1))|0);
 var $j_04=0;label=5;break;
 case 5: 
 var $j_04;
 var $14=(($9+((($i_05)*(3808))&-1)+32+((($j_04)*(464))&-1))|0);
 var $15=(($9+((($i_05)*(3808))&-1)+32+((($j_04)*(464))&-1)+56)|0);
 var $ld$0$0=(($15)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($15+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $17=(($16$0|0) == ($$etemp$2$0|0)) & (($16$1|0) == ($$etemp$2$1|0));
 if($17){label=7;break;}else{label=6;break;}
 case 6: 
 var $19=(($9+((($i_05)*(3808))&-1)+32+((($j_04)*(464))&-1)+32)|0);
 var $20=(($14)|0);
 var $21=_getnodes($3,$19,$20,$12,0);
 label=7;break;
 case 7: 
 var $23=(($9+((($i_05)*(3808))&-1)+32+((($j_04)*(464))&-1)+272)|0);
 var $ld$3$0=(($23)|0);
 var $24$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($23+4)|0);
 var $24$1=HEAP32[(($ld$4$1)>>2)];
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $25=(($24$0|0) == ($$etemp$5$0|0)) & (($24$1|0) == ($$etemp$5$1|0));
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 var $27=(($9+((($i_05)*(3808))&-1)+32+((($j_04)*(464))&-1)+248)|0);
 var $28=(($14)|0);
 var $29=_getnodes($3,$27,$28,$12,0);
 label=9;break;
 case 9: 
 var $31=((($j_04)+(1))|0);
 var $32=($31>>>0)<8;
 if($32){var $j_04=$31;label=5;break;}else{label=10;break;}
 case 10: 
 var $34=((($i_05)+(1))|0);
 var $35=($34>>>0)<($10>>>0);
 if($35){var $i_05=$34;label=4;break;}else{label=20;break;}
 case 11: 
 var $37=(((($length>>>0))%(464))&-1);
 var $38=($37|0)==0;
 if($38){label=12;break;}else{label=20;break;}
 case 12: 
 var $40=(((($length>>>0))/(464))&-1);
 var $41=$data;
 var $42=($length>>>0)>463;
 if($42){label=13;break;}else{label=20;break;}
 case 13: 
 var $tmp2=(($1)|0);
 var $43=(($outer+14900)|0);
 var $tmp=(($2)|0);
 var $i_17=0;label=14;break;
 case 14: 
 var $i_17;
 var $45=(($41+((($i_17)*(464))&-1))|0);
 var $46=(($41+((($i_17)*(464))&-1)+56)|0);
 var $ld$6$0=(($46)|0);
 var $47$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($46+4)|0);
 var $47$1=HEAP32[(($ld$7$1)>>2)];
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $48=(($47$0|0) == ($$etemp$8$0|0)) & (($47$1|0) == ($$etemp$8$1|0));
 if($48){label=16;break;}else{label=15;break;}
 case 15: 
 var $50=(($45)|0);
 var $tmp1=(($41+((($i_17)*(464))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp1, 24)|0);
 var $51=_getnodes($3,$2,$50,$43,0);
 label=16;break;
 case 16: 
 var $53=(($41+((($i_17)*(464))&-1)+272)|0);
 var $ld$9$0=(($53)|0);
 var $54$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($53+4)|0);
 var $54$1=HEAP32[(($ld$10$1)>>2)];
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $55=(($54$0|0) == ($$etemp$11$0|0)) & (($54$1|0) == ($$etemp$11$1|0));
 if($55){label=18;break;}else{label=17;break;}
 case 17: 
 var $57=(($45)|0);
 var $tmp3=(($41+((($i_17)*(464))&-1)+248)|0);
 assert(24 % 1 === 0);(_memcpy($tmp2, $tmp3, 24)|0);
 var $58=_getnodes($3,$1,$57,$43,0);
 label=18;break;
 case 18: 
 var $60=((($i_17)+(1))|0);
 var $61=($60>>>0)<($40>>>0);
 if($61){var $i_17=$60;label=14;break;}else{label=20;break;}
 case 19: 
 var $63=HEAP32[((_stderr)>>2)];
 var $64=_fprintf($63,2912,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$length,HEAP32[(((tempVarArgs)+(8))>>2)]=$4,tempVarArgs)); STACKTOP=tempVarArgs;
 label=20;break;
 case 20: 
 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}


function _do_ping_and_sendnode_requests($dht,$lastgetnode,$client_id,$list,$list_count,$bootstrap_times){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=13552;
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$list_count<<1;
 var $3=STACKTOP;STACKTOP = (STACKTOP + ((($2)*(4))&-1))|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $4=STACKTOP;STACKTOP = (STACKTOP + ((($2)*(4))&-1))|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=($list_count|0)==0;
 if($5){var $not_kill_0_lcssa9=0;label=13;break;}else{label=2;break;}
 case 2: 
 var $6=(($dht+178816)|0);
 var $num_nodes_05=0;var $not_kill_06=0;var $i_07=0;var $8$1=$1$1;var $8$0=$1$0;label=3;break;
 case 3: 
 var $8$0;
 var $8$1;
 var $i_07;
 var $not_kill_06;
 var $num_nodes_05;
 var $9=(($list+((($i_07)*(464))&-1))|0);
 var $10=(($list+((($i_07)*(464))&-1)+248)|0);
 var $11=(($9)|0);
 var $12=(($list+((($i_07)*(464))&-1)+32)|0);
 var $13=(($list+((($i_07)*(464))&-1)+272)|0);
 var $ld$2$0=(($13)|0);
 var $14$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($13+4)|0);
 var $14$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=300;
 var $$etemp$4$1=0;
 var $15$0=_i64Add($14$0,$14$1,$$etemp$4$0,$$etemp$4$1);var $15$1=tempRet0;
 var $16=(($15$1>>>0) > ($8$1>>>0)) | (((($15$1>>>0) == ($8$1>>>0) & ($15$0>>>0) >  ($8$0>>>0))));
 if($16){label=4;break;}else{var $not_kill_2=$not_kill_06;var $num_nodes_2=$num_nodes_05;var $36$1=$8$1;var $36$0=$8$0;label=8;break;}
 case 4: 
 var $18=((($not_kill_06)+(1))&255);
 var $19=(($list+((($i_07)*(464))&-1)+280)|0);
 var $ld$5$0=(($19)|0);
 var $20$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($19+4)|0);
 var $20$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=60;
 var $$etemp$7$1=0;
 var $21$0=_i64Add($20$0,$20$1,$$etemp$7$0,$$etemp$7$1);var $21$1=tempRet0;
 var $22=(($21$1>>>0) > ($8$1>>>0)) | (((($21$1>>>0) == ($8$1>>>0) & ($21$0>>>0) >  ($8$0>>>0))));
 if($22){var $28$1=$14$1;var $28$0=$14$0;var $27$1=$8$1;var $27$0=$8$0;label=6;break;}else{label=5;break;}
 case 5: 
 var $24=HEAP32[(($6)>>2)];
 var $25=(($10)|0);
 _send_ping_request($24,$25,$11);
 var $st$8$0=(($19)|0);
 HEAP32[(($st$8$0)>>2)]=$1$0;
 var $st$9$1=(($19+4)|0);
 HEAP32[(($st$9$1)>>2)]=$1$1;
 var $ld$10$0=(($13)|0);
 var $_pre$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=(($13+4)|0);
 var $_pre$1=HEAP32[(($ld$11$1)>>2)];
 var $ld$12$0=13552;
 var $_pre1$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=13556;
 var $_pre1$1=HEAP32[(($ld$13$1)>>2)];
 var $28$1=$_pre$1;var $28$0=$_pre$0;var $27$1=$_pre1$1;var $27$0=$_pre1$0;label=6;break;
 case 6: 
 var $27$0;
 var $27$1;
 var $28$0;
 var $28$1;
 var $$etemp$14$0=122;
 var $$etemp$14$1=0;
 var $29$0=_i64Add($28$0,$28$1,$$etemp$14$0,$$etemp$14$1);var $29$1=tempRet0;
 var $30=(($29$1>>>0) > ($27$1>>>0)) | (((($29$1>>>0) == ($27$1>>>0) & ($29$0>>>0) >  ($27$0>>>0))));
 if($30){label=7;break;}else{var $not_kill_2=$18;var $num_nodes_2=$num_nodes_05;var $36$1=$27$1;var $36$0=$27$0;label=8;break;}
 case 7: 
 var $32=(($3+($num_nodes_05<<2))|0);
 HEAP32[(($32)>>2)]=$9;
 var $33=(($4+($num_nodes_05<<2))|0);
 HEAP32[(($33)>>2)]=$10;
 var $34=((($num_nodes_05)+(1))|0);
 var $not_kill_2=$18;var $num_nodes_2=$34;var $36$1=$27$1;var $36$0=$27$0;label=8;break;
 case 8: 
 var $36$0;
 var $36$1;
 var $num_nodes_2;
 var $not_kill_2;
 var $37=(($list+((($i_07)*(464))&-1)+56)|0);
 var $ld$15$0=(($37)|0);
 var $38$0=HEAP32[(($ld$15$0)>>2)];
 var $ld$16$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$16$1)>>2)];
 var $$etemp$17$0=300;
 var $$etemp$17$1=0;
 var $39$0=_i64Add($38$0,$38$1,$$etemp$17$0,$$etemp$17$1);var $39$1=tempRet0;
 var $40=(($39$1>>>0) > ($36$1>>>0)) | (((($39$1>>>0) == ($36$1>>>0) & ($39$0>>>0) >  ($36$0>>>0))));
 if($40){label=14;break;}else{var $not_kill_2_1=$not_kill_2;var $num_nodes_2_1=$num_nodes_2;var $80$1=$36$1;var $80$0=$36$0;label=18;break;}
 case 9: 
 var $41=($num_nodes_2_1|0)==0;
 if($41){var $not_kill_0_lcssa9=$not_kill_2_1;label=13;break;}else{label=10;break;}
 case 10: 
 var $ld$18$0=(($lastgetnode)|0);
 var $43$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=(($lastgetnode+4)|0);
 var $43$1=HEAP32[(($ld$19$1)>>2)];
 var $$etemp$20$0=20;
 var $$etemp$20$1=0;
 var $44$0=_i64Add($43$0,$43$1,$$etemp$20$0,$$etemp$20$1);var $44$1=tempRet0;
 var $45=(($44$1>>>0) > ($80$1>>>0)) | (((($44$1>>>0) == ($80$1>>>0) & ($44$0>>>0) >  ($80$0>>>0))));
 if($45){label=11;break;}else{label=12;break;}
 case 11: 
 var $47=HEAP32[(($bootstrap_times)>>2)];
 var $48=($47>>>0)<10;
 if($48){label=12;break;}else{var $not_kill_0_lcssa9=$not_kill_2_1;label=13;break;}
 case 12: 
 var $50=_rand();
 var $51=(((($50>>>0))%(($num_nodes_2_1>>>0)))&-1);
 var $52=(($4+($51<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53)|0);
 var $55=(($3+($51<<2))|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56)|0);
 var $58=_getnodes($dht,$54,$57,$client_id,0);
 var $st$21$0=(($lastgetnode)|0);
 HEAP32[(($st$21$0)>>2)]=$1$0;
 var $st$22$1=(($lastgetnode+4)|0);
 HEAP32[(($st$22$1)>>2)]=$1$1;
 var $59=HEAP32[(($bootstrap_times)>>2)];
 var $60=((($59)+(1))|0);
 HEAP32[(($bootstrap_times)>>2)]=$60;
 var $not_kill_0_lcssa9=$not_kill_2_1;label=13;break;
 case 13: 
 var $not_kill_0_lcssa9;
 STACKTOP=sp;return $not_kill_0_lcssa9;
 case 14: 
 var $62=((($not_kill_2)+(1))&255);
 var $63=(($list+((($i_07)*(464))&-1)+64)|0);
 var $ld$23$0=(($63)|0);
 var $64$0=HEAP32[(($ld$23$0)>>2)];
 var $ld$24$1=(($63+4)|0);
 var $64$1=HEAP32[(($ld$24$1)>>2)];
 var $$etemp$25$0=60;
 var $$etemp$25$1=0;
 var $65$0=_i64Add($64$0,$64$1,$$etemp$25$0,$$etemp$25$1);var $65$1=tempRet0;
 var $66=(($65$1>>>0) > ($36$1>>>0)) | (((($65$1>>>0) == ($36$1>>>0) & ($65$0>>>0) >  ($36$0>>>0))));
 if($66){var $72$1=$38$1;var $72$0=$38$0;var $71$1=$36$1;var $71$0=$36$0;label=16;break;}else{label=15;break;}
 case 15: 
 var $68=HEAP32[(($6)>>2)];
 var $69=(($12)|0);
 _send_ping_request($68,$69,$11);
 var $st$26$0=(($63)|0);
 HEAP32[(($st$26$0)>>2)]=$1$0;
 var $st$27$1=(($63+4)|0);
 HEAP32[(($st$27$1)>>2)]=$1$1;
 var $ld$28$0=(($37)|0);
 var $_pre2$0=HEAP32[(($ld$28$0)>>2)];
 var $ld$29$1=(($37+4)|0);
 var $_pre2$1=HEAP32[(($ld$29$1)>>2)];
 var $ld$30$0=13552;
 var $_pre3$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=13556;
 var $_pre3$1=HEAP32[(($ld$31$1)>>2)];
 var $72$1=$_pre2$1;var $72$0=$_pre2$0;var $71$1=$_pre3$1;var $71$0=$_pre3$0;label=16;break;
 case 16: 
 var $71$0;
 var $71$1;
 var $72$0;
 var $72$1;
 var $$etemp$32$0=122;
 var $$etemp$32$1=0;
 var $73$0=_i64Add($72$0,$72$1,$$etemp$32$0,$$etemp$32$1);var $73$1=tempRet0;
 var $74=(($73$1>>>0) > ($71$1>>>0)) | (((($73$1>>>0) == ($71$1>>>0) & ($73$0>>>0) >  ($71$0>>>0))));
 if($74){label=17;break;}else{var $not_kill_2_1=$62;var $num_nodes_2_1=$num_nodes_2;var $80$1=$71$1;var $80$0=$71$0;label=18;break;}
 case 17: 
 var $76=(($3+($num_nodes_2<<2))|0);
 HEAP32[(($76)>>2)]=$9;
 var $77=(($4+($num_nodes_2<<2))|0);
 HEAP32[(($77)>>2)]=$12;
 var $78=((($num_nodes_2)+(1))|0);
 var $not_kill_2_1=$62;var $num_nodes_2_1=$78;var $80$1=$71$1;var $80$0=$71$0;label=18;break;
 case 18: 
 var $80$0;
 var $80$1;
 var $num_nodes_2_1;
 var $not_kill_2_1;
 var $81=((($i_07)+(1))|0);
 var $82=($81>>>0)<($list_count>>>0);
 if($82){var $num_nodes_05=$num_nodes_2_1;var $not_kill_06=$not_kill_2_1;var $i_07=$81;var $8$1=$80$1;var $8$0=$80$0;label=3;break;}else{label=9;break;}
  default: assert(0, "bad label: " + label);
 }

}


function _handle_sendnodes_core($object,$source,$packet,$length,$node_format_size,$plain,$plain_length,$num_nodes_out,$sendback_node){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2368)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $plain_message_i=(sp)+(2096);
 var $test_i=(sp)+(2256);
 var $source1=(sp)+(2312);
 var $shared_key=(sp)+(2336);
 var $1=($plain_length&65535);
 var $2=$node_format_size<<3;
 var $3=((($2)+(160))|0);
 var $4=($1|0)==($3|0);
 if($4){label=2;break;}else{var $_0=1;label=19;break;}
 case 2: 
 var $6=$object;
 var $7=($length>>>0)<234;
 if($7){var $_0=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $9=((($length)-(233))|0);
 var $10=(((($9>>>0))%(($node_format_size>>>0)))&-1);
 var $11=($10|0)==0;
 if($11){label=4;break;}else{var $_0=1;label=19;break;}
 case 4: 
 var $13=(((($9>>>0))/(($node_format_size>>>0)))&-1);
 var $14=($13>>>0)>8;
 if($14){var $_0=1;label=19;break;}else{label=5;break;}
 case 5: 
 var $16=(($shared_key)|0);
 var $17=(($packet+1)|0);
 var $18=(($object+96896)|0);
 var $19=$18;
 var $20=(($object+14932)|0);
 _get_shared_key($19,$16,$20,$17);
 var $21=(Math_imul($13,$node_format_size)|0);
 var $22=((($21)+(160))|0);
 var $length_off_i=((($21)+(159))|0);
 var $23=($length_off_i>>>0)>1007;
 if($23){label=10;break;}else{label=6;break;}
 case 6: 
 var $25=((($21)+(176))|0);
 var $26=(($packet+57)|0);
 var $27=(($packet+33)|0);
 var $28=(($temp_plain_i)|0);
 var $$etemp$0$0=1056;
 var $$etemp$0$1=0;

 var $29=(($temp_encrypted_i)|0);
 var $$etemp$1$0=1040;
 var $$etemp$1$1=0;

 _memset($29, 0, 1040)|0;
 var $30=(($temp_encrypted_i+16)|0);
 assert($25 % 1 === 0);(_memcpy($30, $26, $25)|0);
 var $31=((($21)+(192))|0);
 var $32$0=$31;
 var $32$1=0;
 var $33=_crypto_secretbox_xsalsa20poly1305_open($28,$29,$32$0,$32$1,$27,$16);
 var $34=($33|0)==-1;
 if($34){label=10;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=7;break;}
 case 7: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $35=(($temp_plain_i+$i_02_i_i)|0);
 var $36=HEAP8[($35)];
 var $37=$36|$check_01_i_i;
 var $38=((($i_02_i_i)+(1))|0);
 var $39=($38>>>0)<32;
 if($39){var $check_01_i_i=$37;var $i_02_i_i=$38;label=7;break;}else{label=8;break;}
 case 8: 
 var $40=(($37<<24)>>24)==0;
 if($40){label=9;break;}else{label=10;break;}
 case 9: 
 var $41=(($temp_plain_i+32)|0);
 assert($22 % 1 === 0);(_memcpy($plain, $41, $22)|0);
 label=11;break;
 case 10: 
 var $42=($22|0)==-1;
 if($42){label=11;break;}else{var $_0=1;label=19;break;}
 case 11: 
 var $44=(($plain+$21)|0);
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $45=(($plain_message_i)|0);
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 var $46=(($object+14868)|0);
 var $_sum=((($21)+(24))|0);
 var $47=(($plain+$_sum)|0);
 var $48=_decrypt_data_symmetric($46,$44,$47,136,$45);
 var $49=($48|0)==120;
 if($49){label=12;break;}else{var $_0=1;label=19;break;}
 case 12: 
 var $51=$plain_message_i;
 var $ld$3$0=(($51)|0);
 var $52$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($51+4)|0);
 var $52$1=HEAP32[(($ld$4$1)>>2)];
 var $ld$5$0=13552;
 var $53$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=13556;
 var $53$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=3;
 var $$etemp$7$1=0;
 var $54$0=_i64Add($52$0,$52$1,$$etemp$7$0,$$etemp$7$1);var $54$1=tempRet0;
 var $55=(($54$1>>>0) < ($53$1>>>0)) | (((($54$1>>>0) == ($53$1>>>0) & ($54$0>>>0) <  ($53$0>>>0))));
 var $56=(($53$1>>>0) < ($52$1>>>0)) | (((($53$1>>>0) == ($52$1>>>0) & ($53$0>>>0) <  ($52$0>>>0))));
 var $or_cond_i=$55|$56;
 if($or_cond_i){var $_0=1;label=19;break;}else{label=13;break;}
 case 13: 
 var $58=(($test_i)|0);
 var $$etemp$8$0=56;
 var $$etemp$8$1=0;

 var $59=(($plain_message_i+8)|0);
 assert(56 % 1 === 0);(_memcpy($58, $59, 56)|0);
 var $60=(($test_i+52)|0);
 var $61=(((((HEAPU8[($60)])|(HEAPU8[((($60)+(1))|0)]<<8))<<16)>>16));
 var $62=(($61<<16)>>16)==0;
 if($62){var $_0=1;label=19;break;}else{label=14;break;}
 case 14: 
 var $64=(($source1+20)|0);
 var $65=HEAP16[(($64)>>1)];
 var $66=(($61<<16)>>16)==(($65<<16)>>16);
 if($66){label=15;break;}else{var $_0=1;label=19;break;}
 case 15: 
 var $67=(($test_i+32)|0);
 var $68=(($source1)|0);
 var $69=_ip_equal($67,$68);
 var $phitmp=($69|0)==0;
 if($phitmp){var $_0=1;label=19;break;}else{var $_03_i=32;var $l_04_i=$58;var $r_05_i=$17;label=16;break;}
 case 16: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $70=HEAP8[($l_04_i)];
 var $71=HEAP8[($r_05_i)];
 var $72=(($70<<24)>>24)==(($71<<24)>>24);
 if($72){label=17;break;}else{var $_0=1;label=19;break;}
 case 17: 
 var $74=((($_03_i)-(1))|0);
 var $75=(($l_04_i+1)|0);
 var $76=(($r_05_i+1)|0);
 var $77=($74|0)==0;
 if($77){label=18;break;}else{var $_03_i=$74;var $l_04_i=$75;var $r_05_i=$76;label=16;break;}
 case 18: 
 var $78=(($sendback_node)|0);
 var $79=(($plain_message_i+64)|0);
 assert(56 % 1 === 0);(_memcpy($78, $79, 56)|0);
 var $$etemp$9$0=160;
 var $$etemp$9$1=0;

 _addto_lists($6,$source,$17);
 HEAP32[(($num_nodes_out)>>2)]=$13;
 var $_0=0;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_hardening_getnode_res($dht,$sendto,$queried_client_id,$list,$num_nodes){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2072)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce_i=sp;
 var $temp_i=(sp)+(24);
 var $packet=(sp)+(1048);
 var $1=(($sendto+32)|0);
 var $2=(($1)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=10;break;}else{label=2;break;}
 case 2: 
 var $6=(($packet)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $7=($num_nodes&65535);
 var $8=((($7)*(56))&-1);
 var $9=((($8)+(33))|0);
 var $10=_llvm_stacksave();
 var $11=STACKTOP;STACKTOP = (STACKTOP + $9)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP8[($11)]=3;
 var $12=(($11+1)|0);
 assert(32 % 1 === 0);(_memcpy($12, $queried_client_id, 32)|0);
 var $13=(($11+33)|0);
 var $14=(($list)|0);
 assert($8 % 1 === 0);(_memcpy($13, $14, $8)|0);
 var $15=(($dht+14900)|0);
 var $16=(($dht+14932)|0);
 var $17=(($sendto)|0);
 var $18=(($nonce_i)|0);
 var $$etemp$1$0=24;
 var $$etemp$1$1=0;

 var $19=((($8)+(139))|0);
 var $20=($19>>>0)>1024;
 if($20){label=9;break;}else{label=3;break;}
 case 3: 
 var $22=((($8)+(34))|0);
 var $23=(($temp_i)|0);
 var $$etemp$2$0=1024;
 var $$etemp$2$1=0;

 var $24=(($temp_i+1)|0);
 assert($9 % 1 === 0);(_memcpy($24, $11, $9)|0);
 HEAP8[($23)]=48;
 var $_b_i_i=HEAP8[(136)];
 if($_b_i_i){var $i_01_i_i_i=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $$etemp$4$0=24;
 var $$etemp$4$1=0;
 var $$etemp$3=15032;
 _randombytes($$etemp$3,$$etemp$4$0,$$etemp$4$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i=0;label=5;break;
 case 5: 
 var $i_01_i_i_i;
 var $26=((15032+$i_01_i_i_i)|0);
 var $27=HEAP8[($26)];
 var $28=((($27)+(1))&255);
 HEAP8[($26)]=$28;
 var $29=(($28<<24)>>24)==0;
 var $30=((($i_01_i_i_i)+(1))|0);
 var $31=($30>>>0)<24;
 var $or_cond_i_i_i=$29&$31;
 if($or_cond_i_i_i){var $i_01_i_i_i=$30;label=5;break;}else{label=6;break;}
 case 6: 
 assert(24 % 1 === 0);(_memcpy($18, 15032, 24)|0);
 var $32=(($packet+89)|0);
 var $33=_encrypt_data($17,$16,$18,$23,$22,$32);
 var $34=($33|0)==-1;
 if($34){label=9;break;}else{label=7;break;}
 case 7: 
 HEAP8[($6)]=32;
 var $35=(($packet+1)|0);
 assert(32 % 1 === 0);(_memcpy($35, $17, 32)|0);
 var $36=(($packet+33)|0);
 assert(32 % 1 === 0);(_memcpy($36, $15, 32)|0);
 var $37=(($packet+65)|0);
 assert(24 % 1 === 0);(_memcpy($37, $18, 24)|0);
 var $38=((($33)+(89))|0);
 var $$etemp$5$0=24;
 var $$etemp$5$1=0;

 var $39=($38|0)==-1;
 if($39){label=9;break;}else{label=8;break;}
 case 8: 
 var $41=(($dht+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=_sendpacket($42,$1,$6,$38);
 label=9;break;
 case 9: 
 _llvm_stackrestore($10);
 var $$etemp$6$0=1024;
 var $$etemp$6$1=0;

 label=10;break;
 case 10: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _returnedip_ports($dht,$ip_port,$client_id,$nodeclient_id){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=13552;
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=(($ip_port)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)==10;
 if($4){label=2;break;}else{var $37=$3;label=9;break;}
 case 2: 
 var $6=(($ip_port+4)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $37=10;label=9;break;}
 case 3: 
 var $11=(($7+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{var $37=10;label=9;break;}
 case 4: 
 var $15=$6;
 var $16=(($ip_port+12)|0);
 var $17=$16;
 var $18=HEAP8[($17)];
 var $19=(($18<<24)>>24)==0;
 if($19){label=5;break;}else{var $37=10;label=9;break;}
 case 5: 
 var $21=(($15+9)|0);
 var $22=HEAP8[($21)];
 var $23=(($22<<24)>>24)==0;
 if($23){label=6;break;}else{var $37=10;label=9;break;}
 case 6: 
 var $25=(($15+10)|0);
 var $26=HEAP8[($25)];
 var $27=(($26<<24)>>24)==-1;
 if($27){label=7;break;}else{var $37=10;label=9;break;}
 case 7: 
 var $29=(($15+11)|0);
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24)==-1;
 if($31){label=8;break;}else{var $37=10;label=9;break;}
 case 8: 
 HEAP8[($2)]=2;
 var $33=$6;
 var $34=(($33+12)|0);
 var $35=((((HEAPU8[($34)])|(HEAPU8[((($34)+(1))|0)]<<8)|(HEAPU8[((($34)+(2))|0)]<<16)|(HEAPU8[((($34)+(3))|0)]<<24))|0));
 tempBigInt=$35;HEAP8[($7)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($7)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($7)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($7)+(3))|0)]=tempBigInt&0xff;
 var $37=2;label=9;break;
 case 9: 
 var $37;
 var $38=(($dht+14900)|0);
 var $_03_i_i13=32;var $l_04_i_i12=$client_id;var $r_05_i_i11=$38;label=10;break;
 case 10: 
 var $r_05_i_i11;
 var $l_04_i_i12;
 var $_03_i_i13;
 var $39=HEAP8[($l_04_i_i12)];
 var $40=HEAP8[($r_05_i_i11)];
 var $41=(($39<<24)>>24)==(($40<<24)>>24);
 if($41){label=11;break;}else{label=12;break;}
 case 11: 
 var $43=((($_03_i_i13)-(1))|0);
 var $44=(($l_04_i_i12+1)|0);
 var $45=(($r_05_i_i11+1)|0);
 var $46=($43|0)==0;
 if($46){var $i_02=0;label=15;break;}else{var $_03_i_i13=$43;var $l_04_i_i12=$44;var $r_05_i_i11=$45;label=10;break;}
 case 12: 
 var $47=(($dht+14968)|0);
 var $48=HEAP16[(($47)>>1)];
 var $49=(($48<<16)>>16)==0;
 if($49){label=32;break;}else{label=13;break;}
 case 13: 
 var $50=(($dht+14964)|0);
 var $51=HEAP32[(($50)>>2)];
 var $i_110=0;label=21;break;
 case 14: 
 var $53=((($i_02)+(1))|0);
 var $54=($53>>>0)<32;
 if($54){var $i_02=$53;label=15;break;}else{label=32;break;}
 case 15: 
 var $i_02;
 var $55=(($dht+8+((($i_02)*(464))&-1))|0);
 var $_03_i_i8=32;var $l_04_i_i7=$nodeclient_id;var $r_05_i_i6=$55;label=16;break;
 case 16: 
 var $r_05_i_i6;
 var $l_04_i_i7;
 var $_03_i_i8;
 var $56=HEAP8[($l_04_i_i7)];
 var $57=HEAP8[($r_05_i_i6)];
 var $58=(($56<<24)>>24)==(($57<<24)>>24);
 if($58){label=17;break;}else{label=14;break;}
 case 17: 
 var $60=((($_03_i_i8)-(1))|0);
 var $61=(($l_04_i_i7+1)|0);
 var $62=(($r_05_i_i6+1)|0);
 var $63=($60|0)==0;
 if($63){label=18;break;}else{var $_03_i_i8=$60;var $l_04_i_i7=$61;var $r_05_i_i6=$62;label=16;break;}
 case 18: 
 if((($37<<24)>>24)==2){ label=19;break;}else if((($37<<24)>>24)==10){ label=20;break;}else{label=32;break;}
 case 19: 
 var $65=(($dht+8+((($i_02)*(464))&-1)+216)|0);
 assert(24 % 1 === 0);(_memcpy($65, $2, 24)|0);
 var $66=(($dht+8+((($i_02)*(464))&-1)+240)|0);
 var $st$2$0=(($66)|0);
 HEAP32[(($st$2$0)>>2)]=$1$0;
 var $st$3$1=(($66+4)|0);
 HEAP32[(($st$3$1)>>2)]=$1$1;
 label=32;break;
 case 20: 
 var $68=(($dht+8+((($i_02)*(464))&-1)+432)|0);
 assert(24 % 1 === 0);(_memcpy($68, $2, 24)|0);
 var $69=(($dht+8+((($i_02)*(464))&-1)+456)|0);
 var $st$4$0=(($69)|0);
 HEAP32[(($st$4$0)>>2)]=$1$0;
 var $st$5$1=(($69+4)|0);
 HEAP32[(($st$5$1)>>2)]=$1$1;
 label=32;break;
 case 21: 
 var $i_110;
 var $71=(($51+((($i_110)*(3808))&-1))|0);
 var $_03_i_i3=32;var $l_04_i_i2=$client_id;var $r_05_i_i1=$71;label=22;break;
 case 22: 
 var $r_05_i_i1;
 var $l_04_i_i2;
 var $_03_i_i3;
 var $72=HEAP8[($l_04_i_i2)];
 var $73=HEAP8[($r_05_i_i1)];
 var $74=(($72<<24)>>24)==(($73<<24)>>24);
 if($74){label=23;break;}else{label=31;break;}
 case 23: 
 var $76=((($_03_i_i3)-(1))|0);
 var $77=(($l_04_i_i2+1)|0);
 var $78=(($r_05_i_i1+1)|0);
 var $79=($76|0)==0;
 if($79){var $j_06=0;label=25;break;}else{var $_03_i_i3=$76;var $l_04_i_i2=$77;var $r_05_i_i1=$78;label=22;break;}
 case 24: 
 var $81=((($j_06)+(1))|0);
 var $82=($81>>>0)<8;
 if($82){var $j_06=$81;label=25;break;}else{label=31;break;}
 case 25: 
 var $j_06;
 var $83=(($51+((($i_110)*(3808))&-1)+32+((($j_06)*(464))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$nodeclient_id;var $r_05_i_i=$83;label=26;break;
 case 26: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $84=HEAP8[($l_04_i_i)];
 var $85=HEAP8[($r_05_i_i)];
 var $86=(($84<<24)>>24)==(($85<<24)>>24);
 if($86){label=27;break;}else{label=24;break;}
 case 27: 
 var $88=((($_03_i_i)-(1))|0);
 var $89=(($l_04_i_i+1)|0);
 var $90=(($r_05_i_i+1)|0);
 var $91=($88|0)==0;
 if($91){label=28;break;}else{var $_03_i_i=$88;var $l_04_i_i=$89;var $r_05_i_i=$90;label=26;break;}
 case 28: 
 if((($37<<24)>>24)==2){ label=29;break;}else if((($37<<24)>>24)==10){ label=30;break;}else{label=32;break;}
 case 29: 
 var $93=(($51+((($i_110)*(3808))&-1)+32+((($j_06)*(464))&-1)+216)|0);
 assert(24 % 1 === 0);(_memcpy($93, $2, 24)|0);
 var $94=HEAP32[(($50)>>2)];
 var $95=(($94+((($i_110)*(3808))&-1)+32+((($j_06)*(464))&-1)+240)|0);
 var $st$6$0=(($95)|0);
 HEAP32[(($st$6$0)>>2)]=$1$0;
 var $st$7$1=(($95+4)|0);
 HEAP32[(($st$7$1)>>2)]=$1$1;
 label=32;break;
 case 30: 
 var $97=(($51+((($i_110)*(3808))&-1)+32+((($j_06)*(464))&-1)+432)|0);
 assert(24 % 1 === 0);(_memcpy($97, $2, 24)|0);
 var $98=HEAP32[(($50)>>2)];
 var $99=(($98+((($i_110)*(3808))&-1)+32+((($j_06)*(464))&-1)+456)|0);
 var $st$8$0=(($99)|0);
 HEAP32[(($st$8$0)>>2)]=$1$0;
 var $st$9$1=(($99+4)|0);
 HEAP32[(($st$9$1)>>2)]=$1$1;
 label=32;break;
 case 31: 
 var $100=((($i_110)+(1))|0);
 var $101=($48&65535);
 var $102=($100>>>0)<($101>>>0);
 if($102){var $i_110=$100;label=21;break;}else{label=32;break;}
 case 32: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _sendnodes($dht,$ip_port,$public_key,$client_id,$encrypted_data,$shared_encryption_key){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+480)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $num_nodes_i_i=sp;
 var $nodes_list=(sp)+(8);
 var $nonce=(sp)+(456);
 var $1=(($dht+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$public_key;var $r_05_i_i=$1;label=2;break;
 case 2: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $2=HEAP8[($l_04_i_i)];
 var $3=HEAP8[($r_05_i_i)];
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_03_i_i)-(1))|0);
 var $7=(($l_04_i_i+1)|0);
 var $8=(($r_05_i_i+1)|0);
 var $9=($6|0)==0;
 if($9){label=26;break;}else{var $_03_i_i=$6;var $l_04_i_i=$7;var $r_05_i_i=$8;label=2;break;}
 case 4: 
 var $10=_llvm_stacksave();
 var $11=STACKTOP;STACKTOP = (STACKTOP + 553)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_sub=(($11)|0);
 var $12=(($nodes_list)|0);
 var $$etemp$0$0=448;
 var $$etemp$0$1=0;

 var $13=(($nodes_list)|0);
 var $14=(($ip_port)|0);
 var $15=_LAN_ip($14);
 var $16=($15|0)==0;
 var $17=($16&1);
 _memset($12, 0, 448)|0;
 var $18=$num_nodes_i_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[(($num_nodes_i_i)>>2)]=0;
 var $19=(($dht+8)|0);
 _get_close_nodes_inner($dht,$client_id,$13,2,$19,32,$num_nodes_i_i,$17,1);
 var $20=(($dht+14968)|0);
 var $21=HEAP16[(($20)>>1)];
 var $22=(($21<<16)>>16)==0;
 if($22){label=7;break;}else{label=5;break;}
 case 5: 
 var $23=(($dht+14964)|0);
 var $i_01_i_i=0;label=6;break;
 case 6: 
 var $i_01_i_i;
 var $25=HEAP32[(($23)>>2)];
 var $26=(($25+((($i_01_i_i)*(3808))&-1)+32)|0);
 _get_close_nodes_inner($dht,$client_id,$13,2,$26,8,$num_nodes_i_i,$17,0);
 var $27=((($i_01_i_i)+(1))|0);
 var $28=HEAP16[(($20)>>1)];
 var $29=($28&65535);
 var $30=($27>>>0)<($29>>>0);
 if($30){var $i_01_i_i=$27;label=6;break;}else{label=7;break;}
 case 7: 
 var $31=HEAP32[(($num_nodes_i_i)>>2)];
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $32=($31|0)==0;
 if($32){label=25;break;}else{label=8;break;}
 case 8: 
 var $33=STACKTOP;STACKTOP = (STACKTOP + 480)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $34=STACKTOP;STACKTOP = (STACKTOP + 496)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_sub2=(($34)|0);
 var $_sub1=(($33)|0);
 var $35=(($nonce)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i2=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $$etemp$4$0=24;
 var $$etemp$4$1=0;
 var $$etemp$3=15032;
 _randombytes($$etemp$3,$$etemp$4$0,$$etemp$4$1);
 HEAP8[(136)]=1;
 var $i_01_i_i2=0;label=10;break;
 case 10: 
 var $i_01_i_i2;
 var $37=((15032+$i_01_i_i2)|0);
 var $38=HEAP8[($37)];
 var $39=((($38)+(1))&255);
 HEAP8[($37)]=$39;
 var $40=(($39<<24)>>24)==0;
 var $41=((($i_01_i_i2)+(1))|0);
 var $42=($41>>>0)<24;
 var $or_cond_i_i=$40&$42;
 if($or_cond_i_i){var $i_01_i_i2=$41;label=10;break;}else{label=11;break;}
 case 11: 
 assert(24 % 1 === 0);(_memcpy($35, 15032, 24)|0);
 var $43=$33;
 var $i_03=0;var $num_nodes_ok_06=0;label=12;break;
 case 12: 
 var $num_nodes_ok_06;
 var $i_03;
 var $45=(($43+((($num_nodes_ok_06)*(40))&-1))|0);
 var $46=(($nodes_list+((($i_03)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($45, $46, 32)|0);
 var $47=(($nodes_list+((($i_03)*(56))&-1)+52)|0);
 var $48=(((((HEAPU8[($47)])|(HEAPU8[((($47)+(1))|0)]<<8))<<16)>>16));
 var $49=(($43+((($num_nodes_ok_06)*(40))&-1)+32)|0);
 var $50=(($43+((($num_nodes_ok_06)*(40))&-1)+36)|0);
 tempBigInt=$48;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;
 var $51=(($nodes_list+((($i_03)*(56))&-1)+32)|0);
 var $52=HEAP8[($51)];
 if((($52<<24)>>24)==10){ label=13;break;}else if((($52<<24)>>24)==2){ label=20;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 13: 
 var $54=(($nodes_list+((($i_03)*(56))&-1)+36)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=14;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 14: 
 var $59=(($55+4)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=($60|0)==0;
 if($61){label=15;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 15: 
 var $63=$54;
 var $64=(($nodes_list+((($i_03)*(56))&-1)+44)|0);
 var $65=$64;
 var $66=HEAP8[($65)];
 var $67=(($66<<24)>>24)==0;
 if($67){label=16;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 16: 
 var $69=(($63+9)|0);
 var $70=HEAP8[($69)];
 var $71=(($70<<24)>>24)==0;
 if($71){label=17;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 17: 
 var $73=(($63+10)|0);
 var $74=HEAP8[($73)];
 var $75=(($74<<24)>>24)==-1;
 if($75){label=18;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 18: 
 var $77=(($63+11)|0);
 var $78=HEAP8[($77)];
 var $79=(($78<<24)>>24)==-1;
 if($79){label=19;break;}else{var $num_nodes_ok_1=$num_nodes_ok_06;label=22;break;}
 case 19: 
 var $81=$54;
 var $82=(($81+12)|0);
 var $83=((((HEAPU8[($82)])|(HEAPU8[((($82)+(1))|0)]<<8)|(HEAPU8[((($82)+(2))|0)]<<16)|(HEAPU8[((($82)+(3))|0)]<<24))|0));
 var $84=(($49)|0);
 tempBigInt=$83;HEAP8[($84)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($84)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($84)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($84)+(3))|0)]=tempBigInt&0xff;
 label=21;break;
 case 20: 
 var $_phi_trans_insert=(($nodes_list+((($i_03)*(56))&-1)+36)|0);
 var $_phi_trans_insert4=$_phi_trans_insert;
 var $_pre=((((HEAPU8[($_phi_trans_insert4)])|(HEAPU8[((($_phi_trans_insert4)+(1))|0)]<<8)|(HEAPU8[((($_phi_trans_insert4)+(2))|0)]<<16)|(HEAPU8[((($_phi_trans_insert4)+(3))|0)]<<24))|0));
 var $86=(($49)|0);
 tempBigInt=$_pre;HEAP8[($86)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($86)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($86)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($86)+(3))|0)]=tempBigInt&0xff;
 label=21;break;
 case 21: 
 var $88=((($num_nodes_ok_06)+(1))|0);
 var $num_nodes_ok_1=$88;label=22;break;
 case 22: 
 var $num_nodes_ok_1;
 var $89=((($i_03)+(1))|0);
 var $90=($89>>>0)<($31>>>0);
 if($90){var $i_03=$89;var $num_nodes_ok_06=$num_nodes_ok_1;label=12;break;}else{label=23;break;}
 case 23: 
 var $91=($num_nodes_ok_1>>>0)<($31>>>0);
 var $num_nodes_ok_0_=($91?$num_nodes_ok_1:$31);
 var $92=((($num_nodes_ok_0_)*(40))&-1);
 var $93=(($33+$92)|0);
 assert(160 % 1 === 0);(_memcpy($93, $encrypted_data, 160)|0);
 var $94=((($92)+(160))|0);
 var $95=_encrypt_data_fast($shared_encryption_key,$35,$_sub1,$94,$_sub2);
 var $96=((($92)+(176))|0);
 var $97=($95|0)==($96|0);
 if($97){label=24;break;}else{label=25;break;}
 case 24: 
 HEAP8[($_sub)]=3;
 var $99=(($11+1)|0);
 assert(32 % 1 === 0);(_memcpy($99, $1, 32)|0);
 var $100=(($11+33)|0);
 assert(24 % 1 === 0);(_memcpy($100, $35, 24)|0);
 var $101=(($11+57)|0);
 assert($95 % 1 === 0);(_memcpy($101, $_sub2, $95)|0);
 var $102=(($dht+4)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=((($95)+(57))|0);
 var $105=_sendpacket($103,$ip_port,$_sub,$104);
 label=25;break;
 case 25: 
 var $$etemp$5$0=448;
 var $$etemp$5$1=0;

 _llvm_stackrestore($10);
 label=26;break;
 case 26: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _sendnodes_ipv6($dht,$ip_port,$public_key,$client_id,$encrypted_data,$shared_encryption_key){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+480)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $num_nodes_i_i=sp;
 var $nodes_list=(sp)+(8);
 var $nonce=(sp)+(456);
 var $1=(($dht+14900)|0);
 var $_03_i_i=32;var $l_04_i_i=$public_key;var $r_05_i_i=$1;label=2;break;
 case 2: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $2=HEAP8[($l_04_i_i)];
 var $3=HEAP8[($r_05_i_i)];
 var $4=(($2<<24)>>24)==(($3<<24)>>24);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=((($_03_i_i)-(1))|0);
 var $7=(($l_04_i_i+1)|0);
 var $8=(($r_05_i_i+1)|0);
 var $9=($6|0)==0;
 if($9){label=19;break;}else{var $_03_i_i=$6;var $l_04_i_i=$7;var $r_05_i_i=$8;label=2;break;}
 case 4: 
 var $10=_llvm_stacksave();
 var $11=STACKTOP;STACKTOP = (STACKTOP + 681)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_sub=(($11)|0);
 var $12=(($nodes_list)|0);
 var $$etemp$0$0=448;
 var $$etemp$0$1=0;

 var $13=(($nodes_list)|0);
 var $14=(($ip_port)|0);
 var $15=_LAN_ip($14);
 var $16=($15|0)==0;
 var $17=($16&1);
 _memset($12, 0, 448)|0;
 var $18=$num_nodes_i_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP32[(($num_nodes_i_i)>>2)]=0;
 var $19=(($dht+8)|0);
 _get_close_nodes_inner($dht,$client_id,$13,10,$19,32,$num_nodes_i_i,$17,1);
 var $20=(($dht+14968)|0);
 var $21=HEAP16[(($20)>>1)];
 var $22=(($21<<16)>>16)==0;
 if($22){label=7;break;}else{label=5;break;}
 case 5: 
 var $23=(($dht+14964)|0);
 var $i_01_i_i=0;label=6;break;
 case 6: 
 var $i_01_i_i;
 var $25=HEAP32[(($23)>>2)];
 var $26=(($25+((($i_01_i_i)*(3808))&-1)+32)|0);
 _get_close_nodes_inner($dht,$client_id,$13,10,$26,8,$num_nodes_i_i,$17,0);
 var $27=((($i_01_i_i)+(1))|0);
 var $28=HEAP16[(($20)>>1)];
 var $29=($28&65535);
 var $30=($27>>>0)<($29>>>0);
 if($30){var $i_01_i_i=$27;label=6;break;}else{label=7;break;}
 case 7: 
 var $31=HEAP32[(($num_nodes_i_i)>>2)];
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $32=($31|0)==0;
 if($32){label=18;break;}else{label=8;break;}
 case 8: 
 var $33=STACKTOP;STACKTOP = (STACKTOP + 608)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $34=STACKTOP;STACKTOP = (STACKTOP + 624)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $_sub2=(($34)|0);
 var $_sub1=(($33)|0);
 var $35=(($nonce)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i2=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $$etemp$4$0=24;
 var $$etemp$4$1=0;
 var $$etemp$3=15032;
 _randombytes($$etemp$3,$$etemp$4$0,$$etemp$4$1);
 HEAP8[(136)]=1;
 var $i_01_i_i2=0;label=10;break;
 case 10: 
 var $i_01_i_i2;
 var $37=((15032+$i_01_i_i2)|0);
 var $38=HEAP8[($37)];
 var $39=((($38)+(1))&255);
 HEAP8[($37)]=$39;
 var $40=(($39<<24)>>24)==0;
 var $41=((($i_01_i_i2)+(1))|0);
 var $42=($41>>>0)<24;
 var $or_cond_i_i=$40&$42;
 if($or_cond_i_i){var $i_01_i_i2=$41;label=10;break;}else{label=11;break;}
 case 11: 
 assert(24 % 1 === 0);(_memcpy($35, 15032, 24)|0);
 var $i_03=0;label=12;break;
 case 12: 
 var $i_03;
 var $44=(($nodes_list+((($i_03)*(56))&-1)+33)|0);
 HEAP8[($44)]=0;
 var $45=(($nodes_list+((($i_03)*(56))&-1)+34)|0);
 HEAP8[($45)]=0;
 var $46=(($nodes_list+((($i_03)*(56))&-1)+35)|0);
 HEAP8[($46)]=0;
 var $47=(($nodes_list+((($i_03)*(56))&-1)+32)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==2){ label=13;break;}else if((($48<<24)>>24)==10){ label=14;break;}else{label=15;break;}
 case 13: 
 HEAP8[($47)]=2;
 label=15;break;
 case 14: 
 HEAP8[($47)]=10;
 label=15;break;
 case 15: 
 var $51=((($i_03)+(1))|0);
 var $52=($51>>>0)<($31>>>0);
 if($52){var $i_03=$51;label=12;break;}else{label=16;break;}
 case 16: 
 var $53=((($31)*(56))&-1);
 assert($53 % 1 === 0);(_memcpy($_sub1, $12, $53)|0);
 var $54=(($33+$53)|0);
 assert(160 % 1 === 0);(_memcpy($54, $encrypted_data, 160)|0);
 var $55=((($53)+(160))|0);
 var $56=_encrypt_data_fast($shared_encryption_key,$35,$_sub1,$55,$_sub2);
 var $57=((($53)+(176))|0);
 var $58=($56|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP8[($_sub)]=4;
 var $60=(($11+1)|0);
 assert(32 % 1 === 0);(_memcpy($60, $1, 32)|0);
 var $61=(($11+33)|0);
 assert(24 % 1 === 0);(_memcpy($61, $35, 24)|0);
 var $62=(($11+57)|0);
 assert($56 % 1 === 0);(_memcpy($62, $_sub2, $56)|0);
 var $63=(($dht+4)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=((($56)+(57))|0);
 var $66=_sendpacket($64,$ip_port,$_sub,$65);
 label=18;break;
 case 18: 
 var $$etemp$5$0=448;
 var $$etemp$5$1=0;

 _llvm_stackrestore($10);
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _sort_list($list,$length,$comp_client_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+464)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $cd=sp;
 var $1=(($cd)|0);
 var $$etemp$0$0=464;
 var $$etemp$0$1=0;

 var $2=STACKTOP;STACKTOP = (STACKTOP + ((($length)*(928))&-1))|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 assert(32 % 1 === 0);(_memcpy($1, $comp_client_id, 32)|0);
 var $3=($length|0)==0;
 if($3){label=2;break;}else{var $i_02=0;label=3;break;}
 case 2: 
 _ClientPair_quick_sort($2,0);
 label=6;break;
 case 3: 
 var $i_02;
 var $4=(($2+((($i_02)*(928))&-1))|0);
 assert(464 % 1 === 0);(_memcpy($4, $1, 464)|0);
 var $5=(($2+((($i_02)*(928))&-1)+464)|0);
 var $6=(($list+((($i_02)*(464))&-1))|0);
 assert(464 % 1 === 0);(_memcpy($5, $6, 464)|0);
 var $7=((($i_02)+(1))|0);
 var $8=($7>>>0)<($length>>>0);
 if($8){var $i_02=$7;label=3;break;}else{label=4;break;}
 case 4: 
 _ClientPair_quick_sort($2,$length);
 var $i_11=0;label=5;break;
 case 5: 
 var $i_11;
 var $9=(($list+((($i_11)*(464))&-1))|0);
 var $10=(($2+((($i_11)*(928))&-1)+464)|0);
 assert(464 % 1 === 0);(_memcpy($9, $10, 464)|0);
 var $11=((($i_11)+(1))|0);
 var $12=($11>>>0)<($length>>>0);
 if($12){var $i_11=$11;label=5;break;}else{label=6;break;}
 case 6: 
 var $$etemp$1$0=464;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _get_close_nodes_inner($dht,$client_id,$nodes_list,$sa_family,$client_list,$client_list_length,$num_nodes_ptr,$is_LAN,$want_good){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 if((($sa_family<<16)>>16)==2|(($sa_family<<16)>>16)==10){ label=2;break;}else{label=36;break;}
 case 2: 
 var $2=HEAP32[(($num_nodes_ptr)>>2)];
 var $3=($client_list_length|0)==0;
 if($3){var $num_nodes_0_lcssa=$2;label=35;break;}else{label=3;break;}
 case 3: 
 var $4=(($sa_family<<16)>>16)==2;
 var $5=(($dht+4)|0);
 var $6=(($is_LAN<<24)>>24)==0;
 var $7=(($want_good<<24)>>24)==0;
 var $ld$0$0=13552;
 var $8$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $8$1=HEAP32[(($ld$1$1)>>2)];
 var $i_011=0;var $num_nodes_013=$2;label=4;break;
 case 4: 
 var $num_nodes_013;
 var $i_011;
 var $10=(($client_list+((($i_011)*(464))&-1))|0);
 var $i_01_i=0;label=6;break;
 case 5: 
 var $12=((($i_01_i)+(1))|0);
 var $13=($12>>>0)<8;
 if($13){var $i_01_i=$12;label=6;break;}else{label=9;break;}
 case 6: 
 var $i_01_i;
 var $15=(($nodes_list+((($i_01_i)*(56))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$15;var $r_05_i_i=$10;label=7;break;
 case 7: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $16=HEAP8[($l_04_i_i)];
 var $17=HEAP8[($r_05_i_i)];
 var $18=(($16<<24)>>24)==(($17<<24)>>24);
 if($18){label=8;break;}else{label=5;break;}
 case 8: 
 var $20=((($_03_i_i)-(1))|0);
 var $21=(($l_04_i_i+1)|0);
 var $22=(($r_05_i_i+1)|0);
 var $23=($20|0)==0;
 if($23){var $num_nodes_1=$num_nodes_013;label=34;break;}else{var $_03_i_i=$20;var $l_04_i_i=$21;var $r_05_i_i=$22;label=7;break;}
 case 9: 
 if($4){label=10;break;}else{label=11;break;}
 case 10: 
 var $26=(($client_list+((($i_011)*(464))&-1)+32)|0);
 var $ipptp_0=$26;label=12;break;
 case 11: 
 var $28=(($client_list+((($i_011)*(464))&-1)+248)|0);
 var $ipptp_0=$28;label=12;break;
 case 12: 
 var $ipptp_0;
 var $30=(($ipptp_0+24)|0);
 var $ld$2$0=(($30)|0);
 var $31$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=122;
 var $$etemp$4$1=0;
 var $32$0=_i64Add($31$0,$31$1,$$etemp$4$0,$$etemp$4$1);var $32$1=tempRet0;
 var $33=(($32$1>>>0) > ($8$1>>>0)) | (((($32$1>>>0) == ($8$1>>>0) & ($32$0>>>0) >  ($8$0>>>0))));
 if($33){label=13;break;}else{var $num_nodes_1=$num_nodes_013;label=34;break;}
 case 13: 
 var $35=(($ipptp_0)|0);
 var $36=(($ipptp_0)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=HEAP32[(($5)>>2)];
 var $40=(($39+2048)|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=(($41<<16)>>16)==10;
 var $43=(($37<<24)>>24)==10;
 var $or_cond=$42&$43;
 if($or_cond){label=14;break;}else{var $ip_treat_as_family_0=$38;label=20;break;}
 case 14: 
 var $45=(($ipptp_0+4)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=15;break;}else{var $ip_treat_as_family_0=$38;label=20;break;}
 case 15: 
 var $50=(($46+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($51|0)==0;
 if($52){label=16;break;}else{var $ip_treat_as_family_0=$38;label=20;break;}
 case 16: 
 var $54=$45;
 var $55=(($ipptp_0+12)|0);
 var $56=$55;
 var $57=HEAP8[($56)];
 var $58=(($57<<24)>>24)==0;
 if($58){label=17;break;}else{var $ip_treat_as_family_0=$38;label=20;break;}
 case 17: 
 var $60=(($54+9)|0);
 var $61=HEAP8[($60)];
 var $62=(($61<<24)>>24)==0;
 if($62){label=18;break;}else{var $ip_treat_as_family_0=$38;label=20;break;}
 case 18: 
 var $64=(($54+10)|0);
 var $65=HEAP8[($64)];
 var $66=(($65<<24)>>24)==-1;
 if($66){label=19;break;}else{var $ip_treat_as_family_0=$38;label=20;break;}
 case 19: 
 var $68=(($54+11)|0);
 var $69=HEAP8[($68)];
 var $70=(($69<<24)>>24)==-1;
 var $_=($70?2:$38);
 var $ip_treat_as_family_0=$_;label=20;break;
 case 20: 
 var $ip_treat_as_family_0;
 var $72=(($ip_treat_as_family_0<<16)>>16)==(($sa_family<<16)>>16);
 if($72){label=21;break;}else{var $num_nodes_1=$num_nodes_013;label=34;break;}
 case 21: 
 var $74=_LAN_ip($35);
 var $75=($74|0)==0;
 var $or_cond1=$75&$6;
 if($or_cond1){var $num_nodes_1=$num_nodes_013;label=34;break;}else{label=22;break;}
 case 22: 
 var $or_cond2=$75|$7;
 if($or_cond2){label=26;break;}else{label=23;break;}
 case 23: 
 var $_idx=(($ipptp_0+40)|0);
 var $_idx_val=HEAP8[($_idx)];
 var $_idx3=(($ipptp_0+88)|0);
 var $_idx3_val=HEAP8[($_idx3)];
 var $_idx4=(($ipptp_0+136)|0);
 var $_idx4_val=HEAP8[($_idx4)];
 var $78=$_idx3_val<<1;
 var $79=((($78)+($_idx_val))&255);
 var $80=$_idx4_val<<2;
 var $81=((($79)+($80))&255);
 var $82=(($81<<24)>>24)==2;
 if($82){label=26;break;}else{var $_03_i_i3=32;var $l_04_i_i2=$client_id;var $r_05_i_i1=$10;label=24;break;}
 case 24: 
 var $r_05_i_i1;
 var $l_04_i_i2;
 var $_03_i_i3;
 var $83=HEAP8[($l_04_i_i2)];
 var $84=HEAP8[($r_05_i_i1)];
 var $85=(($83<<24)>>24)==(($84<<24)>>24);
 if($85){label=25;break;}else{var $num_nodes_1=$num_nodes_013;label=34;break;}
 case 25: 
 var $87=((($_03_i_i3)-(1))|0);
 var $88=(($l_04_i_i2+1)|0);
 var $89=(($r_05_i_i1+1)|0);
 var $90=($87|0)==0;
 if($90){label=26;break;}else{var $_03_i_i3=$87;var $l_04_i_i2=$88;var $r_05_i_i1=$89;label=24;break;}
 case 26: 
 var $91=($num_nodes_013>>>0)<8;
 if($91){label=27;break;}else{var $j_010=0;label=28;break;}
 case 27: 
 var $93=(($nodes_list+((($num_nodes_013)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($93, $10, 32)|0);
 var $94=(($nodes_list+((($num_nodes_013)*(56))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($94, $36, 24)|0);
 var $95=((($num_nodes_013)+(1))|0);
 var $num_nodes_1=$95;label=34;break;
 case 28: 
 var $j_010;
 var $i_03_i=0;label=30;break;
 case 29: 
 var $97=($112>>>0)<32;
 if($97){var $i_03_i=$112;label=30;break;}else{label=33;break;}
 case 30: 
 var $i_03_i;
 var $99=(($client_id+$i_03_i)|0);
 var $100=HEAP8[($99)];
 var $101=(($nodes_list+((($j_010)*(56))&-1)+$i_03_i)|0);
 var $102=HEAP8[($101)];
 var $103=$102^$100;
 var $ispos_i=(($103<<24)>>24)>-1;
 var $neg_i=(((-$103))&255);
 var $104=($ispos_i?$103:$neg_i);
 var $105=(($client_list+((($i_011)*(464))&-1)+$i_03_i)|0);
 var $106=HEAP8[($105)];
 var $107=$106^$100;
 var $ispos1_i=(($107<<24)>>24)>-1;
 var $neg2_i=(((-$107))&255);
 var $108=($ispos1_i?$107:$neg2_i);
 var $109=($104&255)<($108&255);
 if($109){label=33;break;}else{label=31;break;}
 case 31: 
 var $111=($104&255)>($108&255);
 var $112=((($i_03_i)+(1))|0);
 if($111){label=32;break;}else{label=29;break;}
 case 32: 
 var $114=(($nodes_list+((($j_010)*(56))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($114, $10, 32)|0);
 var $115=(($nodes_list+((($j_010)*(56))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($115, $36, 24)|0);
 var $num_nodes_1=$num_nodes_013;label=34;break;
 case 33: 
 var $117=((($j_010)+(1))|0);
 var $118=($117|0)<8;
 if($118){var $j_010=$117;label=28;break;}else{var $num_nodes_1=$num_nodes_013;label=34;break;}
 case 34: 
 var $num_nodes_1;
 var $119=((($i_011)+(1))|0);
 var $120=($119>>>0)<($client_list_length>>>0);
 if($120){var $i_011=$119;var $num_nodes_013=$num_nodes_1;label=4;break;}else{var $num_nodes_0_lcssa=$num_nodes_1;label=35;break;}
 case 35: 
 var $num_nodes_0_lcssa;
 HEAP32[(($num_nodes_ptr)>>2)]=$num_nodes_0_lcssa;
 label=36;break;
 case 36: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _addpeer($chat,$client_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($chat+456)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 var $_pre4=(($chat+68)|0);
 var $_pre3=HEAP32[(($_pre4)>>2)];
 if($3){var $18=0;var $17=$_pre3;label=7;break;}else{var $i_01_i=0;label=3;break;}
 case 2: 
 var $5=((($i_01_i)+(1))|0);
 var $6=($5>>>0)<($2>>>0);
 if($6){var $i_01_i=$5;label=3;break;}else{var $18=$2;var $17=$_pre3;label=7;break;}
 case 3: 
 var $i_01_i;
 var $7=(($_pre3+((($i_01_i)*(232))&-1))|0);
 var $_03_i_i=32;var $l_04_i_i=$7;var $r_05_i_i=$client_id;label=4;break;
 case 4: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $8=HEAP8[($l_04_i_i)];
 var $9=HEAP8[($r_05_i_i)];
 var $10=(($8<<24)>>24)==(($9<<24)>>24);
 if($10){label=5;break;}else{label=2;break;}
 case 5: 
 var $12=((($_03_i_i)-(1))|0);
 var $13=(($l_04_i_i+1)|0);
 var $14=(($r_05_i_i+1)|0);
 var $15=($12|0)==0;
 if($15){label=6;break;}else{var $_03_i_i=$12;var $l_04_i_i=$13;var $r_05_i_i=$14;label=4;break;}
 case 6: 
 var $16=($i_01_i|0)==-1;
 if($16){var $18=$2;var $17=$_pre3;label=7;break;}else{var $_0=$i_01_i;label=11;break;}
 case 7: 
 var $17;
 var $18;
 var $19=(($17)|0);
 var $20=((($18)*(232))&-1);
 var $21=((($20)+(232))|0);
 var $22=_realloc($19,$21);
 var $23=$22;
 var $24=($22|0)==0;
 if($24){var $_0=-1;label=11;break;}else{label=8;break;}
 case 8: 
 var $26=HEAP32[(($1)>>2)];
 var $27=(($23+((($26)*(232))&-1))|0);
 _memset($27, 0, 232)|0;
 HEAP32[(($_pre4)>>2)]=$23;
 assert(32 % 1 === 0);(_memcpy($27, $client_id, 32)|0);
 var $ld$0$0=13552;
 var $28$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $28$1=HEAP32[(($ld$1$1)>>2)];
 var $29=HEAP32[(($1)>>2)];
 var $30=HEAP32[(($_pre4)>>2)];
 var $31=(($30+((($29)*(232))&-1)+72)|0);
 var $st$2$0=(($31)|0);
 HEAP32[(($st$2$0)>>2)]=$28$0;
 var $st$3$1=(($31+4)|0);
 HEAP32[(($st$3$1)>>2)]=$28$1;
 var $32=(($30+((($29)*(232))&-1)+80)|0);
 var $st$4$0=(($32)|0);
 HEAP32[(($st$4$0)>>2)]=$28$0;
 var $st$5$1=(($32+4)|0);
 HEAP32[(($st$5$1)>>2)]=$28$1;
 var $33=((($29)+(1))|0);
 HEAP32[(($1)>>2)]=$33;
 var $34=(($chat+480)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){var $41=$33;label=10;break;}else{label=9;break;}
 case 9: 
 var $38=(($chat+484)|0);
 var $39=HEAP32[(($38)>>2)];
 FUNCTION_TABLE[$35]($chat,$29,0,$39);
 var $_pre=HEAP32[(($1)>>2)];
 var $41=$_pre;label=10;break;
 case 10: 
 var $41;
 var $42=((($41)-(1))|0);
 var $_0=$42;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_getnodes($chat,$ip_port,$peernum){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $ip_port; $ip_port=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($ip_port)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($ip_port)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($ip_port)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($ip_port)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($ip_port)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($ip_port)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce_i=sp;
 var $temp_i=(sp)+(24);
 var $randnum_i=(sp)+(1048);
 var $packet_i=(sp)+(1056);
 var $ip_port1=(sp)+(2080);
 var $ippts=(sp)+(2104);
 var $1=(($chat+456)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2>>>0)>($peernum>>>0);
 if($3){label=2;break;}else{label=15;break;}
 case 2: 
 var $5=(($chat+68)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($6+((($peernum)*(232))&-1)+40)|0);
 var $ld$0$0=(($7)|0);
 var $8$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($7+4)|0);
 var $8$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=5;
 var $$etemp$2$1=0;
 var $9$0=_i64Add($8$0,$8$1,$$etemp$2$0,$$etemp$2$1);var $9$1=tempRet0;
 var $ld$3$0=13552;
 var $10$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $10$1=HEAP32[(($ld$4$1)>>2)];
 var $11=(($9$1>>>0) > ($10$1>>>0)) | (((($9$1>>>0) == ($10$1>>>0) & ($9$0>>>0) >  ($10$0>>>0))));
 if($11){label=15;break;}else{label=3;break;}
 case 3: 
 var $13=$randnum_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $$etemp$6$0=8;
 var $$etemp$6$1=0;
 _randombytes($13,$$etemp$6$0,$$etemp$6$1);
 var $ld$7$0=(($randnum_i)|0);
 var $14$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($randnum_i+4)|0);
 var $14$1=HEAP32[(($ld$8$1)>>2)];
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $ld$10$0=13552;
 var $15$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=13556;
 var $15$1=HEAP32[(($ld$11$1)>>2)];
 var $16=HEAP32[(($5)>>2)];
 var $17=(($16+((($peernum)*(232))&-1)+40)|0);
 var $st$12$0=(($17)|0);
 HEAP32[(($st$12$0)>>2)]=$15$0;
 var $st$13$1=(($17+4)|0);
 HEAP32[(($st$13$1)>>2)]=$15$1;
 var $18=(($16+((($peernum)*(232))&-1)+32)|0);
 var $st$14$0=(($18)|0);
 HEAP32[(($st$14$0)>>2)]=$14$0;
 var $st$15$1=(($18+4)|0);
 HEAP32[(($st$15$1)>>2)]=$14$1;
 var $19=(($16+((($peernum)*(232))&-1)+48)|0);
 var $20=(($ip_port)|0);
 assert(24 % 1 === 0);(_memcpy($19, $20, 24)|0);
 var $21=(($chat+640)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=(($ippts+24)|0);
 var $st$16$0=(($25)|0);
 HEAP32[(($st$16$0)>>2)]=$15$0;
 var $st$17$1=(($25+4)|0);
 HEAP32[(($st$17$1)>>2)]=$15$1;
 var $26=(($ippts)|0);
 assert(24 % 1 === 0);(_memcpy($26, $20, 24)|0);
 var $27=HEAP32[(($5)>>2)];
 var $28=(($27+((($peernum)*(232))&-1))|0);
 _Assoc_add_entry($22,$28,$ippts,0,1);
 label=5;break;
 case 5: 
 var $30=HEAP32[(($5)>>2)];
 var $31=(($30+((($peernum)*(232))&-1))|0);
 var $tmp=(($ip_port1)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $20, 24)|0);
 var $32=(($chat+4)|0);
 var $_03_i_i=32;var $l_04_i_i=$32;var $r_05_i_i=$31;label=6;break;
 case 6: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $33=HEAP8[($l_04_i_i)];
 var $34=HEAP8[($r_05_i_i)];
 var $35=(($33<<24)>>24)==(($34<<24)>>24);
 if($35){label=7;break;}else{label=8;break;}
 case 7: 
 var $37=((($_03_i_i)-(1))|0);
 var $38=(($l_04_i_i+1)|0);
 var $39=(($r_05_i_i+1)|0);
 var $40=($37|0)==0;
 if($40){label=15;break;}else{var $_03_i_i=$37;var $l_04_i_i=$38;var $r_05_i_i=$39;label=6;break;}
 case 8: 
 var $41=(($packet_i)|0);
 var $$etemp$18$0=1024;
 var $$etemp$18$1=0;

 var $42=(($chat+36)|0);
 var $43=(($nonce_i)|0);
 var $$etemp$19$0=24;
 var $$etemp$19$1=0;

 var $44=(($temp_i)|0);
 var $$etemp$20$0=1024;
 var $$etemp$20$1=0;

 var $45=(($temp_i+1)|0);
 var $46=$45;
 var $st$21$0=(($46)|0);
 tempBigInt=$14$0;HEAP8[($st$21$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$21$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$21$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$21$0)+(3))|0)]=tempBigInt&0xff;
 var $st$22$1=(($46+4)|0);
 tempBigInt=$14$1;HEAP8[($st$22$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$22$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$22$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$22$1)+(3))|0)]=tempBigInt&0xff;
 HEAP8[($44)]=48;
 var $_b_i_i=HEAP8[(136)];
 if($_b_i_i){var $i_01_i_i_i=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $$etemp$24$0=24;
 var $$etemp$24$1=0;
 var $$etemp$23=15032;
 _randombytes($$etemp$23,$$etemp$24$0,$$etemp$24$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i=0;label=10;break;
 case 10: 
 var $i_01_i_i_i;
 var $48=((15032+$i_01_i_i_i)|0);
 var $49=HEAP8[($48)];
 var $50=((($49)+(1))&255);
 HEAP8[($48)]=$50;
 var $51=(($50<<24)>>24)==0;
 var $52=((($i_01_i_i_i)+(1))|0);
 var $53=($52>>>0)<24;
 var $or_cond_i_i_i=$51&$53;
 if($or_cond_i_i_i){var $i_01_i_i_i=$52;label=10;break;}else{label=11;break;}
 case 11: 
 assert(24 % 1 === 0);(_memcpy($43, 15032, 24)|0);
 var $54=(($packet_i+89)|0);
 var $55=_encrypt_data($31,$42,$43,$44,9,$54);
 var $56=($55|0)==-1;
 if($56){label=12;break;}else{label=13;break;}
 case 12: 
 var $$etemp$25$0=24;
 var $$etemp$25$1=0;

 HEAP8[($41)]=48;
 label=15;break;
 case 13: 
 HEAP8[($41)]=32;
 var $57=(($packet_i+1)|0);
 assert(32 % 1 === 0);(_memcpy($57, $31, 32)|0);
 var $58=(($packet_i+33)|0);
 assert(32 % 1 === 0);(_memcpy($58, $32, 32)|0);
 var $59=(($packet_i+65)|0);
 assert(24 % 1 === 0);(_memcpy($59, $43, 24)|0);
 var $60=((($55)+(89))|0);
 var $$etemp$26$0=24;
 var $$etemp$26$1=0;

 HEAP8[($41)]=48;
 var $61=($60|0)==-1;
 if($61){label=15;break;}else{label=14;break;}
 case 14: 
 var $63=(($chat)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=_sendpacket($64,$ip_port1,$41,$60);
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _delpeer($chat,$peernum){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($chat+456)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2>>>0)>($peernum>>>0);
 if($3){label=2;break;}else{label=15;break;}
 case 2: 
 var $4=(($chat+68)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+((($peernum)*(232))&-1))|0);
 var $i_02=0;label=4;break;
 case 3: 
 var $8=((($i_02)+(1))|0);
 var $9=($8>>>0)<6;
 if($9){var $i_02=$8;label=4;break;}else{label=8;break;}
 case 4: 
 var $i_02;
 var $11=(($chat+72+($i_02<<6))|0);
 var $_03_i_i=32;var $l_04_i_i=$11;var $r_05_i_i=$6;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $12=HEAP8[($l_04_i_i)];
 var $13=HEAP8[($r_05_i_i)];
 var $14=(($12<<24)>>24)==(($13<<24)>>24);
 if($14){label=6;break;}else{label=3;break;}
 case 6: 
 var $16=((($_03_i_i)-(1))|0);
 var $17=(($l_04_i_i+1)|0);
 var $18=(($r_05_i_i+1)|0);
 var $19=($16|0)==0;
 if($19){label=7;break;}else{var $_03_i_i=$16;var $l_04_i_i=$17;var $r_05_i_i=$18;label=5;break;}
 case 7: 
 var $20=(($chat+72+($i_02<<6)+56)|0);
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($20)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($20+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 label=8;break;
 case 8: 
 var $21=((($2)-(1))|0);
 HEAP32[(($1)>>2)]=$21;
 var $22=($21|0)==0;
 if($22){label=9;break;}else{label=10;break;}
 case 9: 
 var $24=HEAP32[(($4)>>2)];
 var $25=(($24)|0);
 _free($25);
 HEAP32[(($4)>>2)]=0;
 label=15;break;
 case 10: 
 var $27=($21|0)==($peernum|0);
 if($27){var $32=$peernum;label=12;break;}else{label=11;break;}
 case 11: 
 var $29=HEAP32[(($4)>>2)];
 var $30=(($29+((($peernum)*(232))&-1))|0);
 var $31=(($29+((($21)*(232))&-1))|0);
 assert(232 % 1 === 0);(_memcpy($30, $31, 232)|0);
 var $_pre=HEAP32[(($1)>>2)];
 var $32=$_pre;label=12;break;
 case 12: 
 var $32;
 var $33=HEAP32[(($4)>>2)];
 var $34=(($33)|0);
 var $35=((($32)*(232))&-1);
 var $36=_realloc($34,$35);
 var $37=($36|0)==0;
 if($37){label=15;break;}else{label=13;break;}
 case 13: 
 var $39=$36;
 HEAP32[(($4)>>2)]=$39;
 var $40=(($chat+480)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){label=15;break;}else{label=14;break;}
 case 14: 
 var $44=(($chat+484)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$41]($chat,$peernum,1,$45);
 label=15;break;
 case 15: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _sendto_allpeers($chat,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce_i=sp;
 var $temp_i=(sp)+(24);
 var $packet_i=(sp)+(1048);
 var $1=(sp)+(2072);
 var $tmp=(($1)|0);
 var $2=(($chat+4)|0);
 var $3=($length&65535);
 var $4=(($packet_i)|0);
 var $5=(($chat+36)|0);
 var $6=(($chat)|0);
 var $7=(($nonce_i)|0);
 var $8=((($3)+(106))|0);
 var $9=($8>>>0)>1024;
 var $10=((($3)+(1))|0);
 var $11=(($temp_i)|0);
 var $12=(($temp_i+1)|0);
 var $13=(($packet_i+89)|0);
 var $14=(($packet_i+1)|0);
 var $15=(($packet_i+33)|0);
 var $16=(($packet_i+65)|0);
 var $sent_03=0;var $i_04=0;label=2;break;
 case 2: 
 var $i_04;
 var $sent_03;
 var $18=(($chat+72+($i_04<<6)+32)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24)==0;
 if($20){var $sent_1=$sent_03;label=16;break;}else{label=3;break;}
 case 3: 
 var $22=(($chat+72+($i_04<<6)+56)|0);
 var $ld$0$0=(($22)|0);
 var $23$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($22+4)|0);
 var $23$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=30;
 var $$etemp$2$1=0;
 var $24$0=_i64Add($23$0,$23$1,$$etemp$2$0,$$etemp$2$1);var $24$1=tempRet0;
 var $ld$3$0=13552;
 var $25$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $25$1=HEAP32[(($ld$4$1)>>2)];
 var $26=(($24$1>>>0) > ($25$1>>>0)) | (((($24$1>>>0) == ($25$1>>>0) & ($24$0>>>0) >  ($25$0>>>0))));
 if($26){label=4;break;}else{var $sent_1=$sent_03;label=16;break;}
 case 4: 
 var $28=(($chat+72+($i_04<<6))|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $18, 24)|0);
 var $_03_i_i=32;var $l_04_i_i=$2;var $r_05_i_i=$28;label=5;break;
 case 5: 
 var $r_05_i_i;
 var $l_04_i_i;
 var $_03_i_i;
 var $29=HEAP8[($l_04_i_i)];
 var $30=HEAP8[($r_05_i_i)];
 var $31=(($29<<24)>>24)==(($30<<24)>>24);
 if($31){label=6;break;}else{label=7;break;}
 case 6: 
 var $33=((($_03_i_i)-(1))|0);
 var $34=(($l_04_i_i+1)|0);
 var $35=(($r_05_i_i+1)|0);
 var $36=($33|0)==0;
 if($36){var $_1_i=0;label=15;break;}else{var $_03_i_i=$33;var $l_04_i_i=$34;var $r_05_i_i=$35;label=5;break;}
 case 7: 
 var $$etemp$5$0=1024;
 var $$etemp$5$1=0;

 var $$etemp$6$0=24;
 var $$etemp$6$1=0;

 if($9){label=12;break;}else{label=8;break;}
 case 8: 
 var $$etemp$7$0=1024;
 var $$etemp$7$1=0;

 assert($3 % 1 === 0);(_memcpy($12, $data, $3)|0);
 HEAP8[($11)]=50;
 var $_b_i_i=HEAP8[(136)];
 if($_b_i_i){var $i_01_i_i_i=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $$etemp$9$0=24;
 var $$etemp$9$1=0;
 var $$etemp$8=15032;
 _randombytes($$etemp$8,$$etemp$9$0,$$etemp$9$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i=0;label=10;break;
 case 10: 
 var $i_01_i_i_i;
 var $39=((15032+$i_01_i_i_i)|0);
 var $40=HEAP8[($39)];
 var $41=((($40)+(1))&255);
 HEAP8[($39)]=$41;
 var $42=(($41<<24)>>24)==0;
 var $43=((($i_01_i_i_i)+(1))|0);
 var $44=($43>>>0)<24;
 var $or_cond_i_i_i=$42&$44;
 if($or_cond_i_i_i){var $i_01_i_i_i=$43;label=10;break;}else{label=11;break;}
 case 11: 
 assert(24 % 1 === 0);(_memcpy($7, 15032, 24)|0);
 var $45=_encrypt_data($28,$5,$7,$11,$10,$13);
 var $46=($45|0)==-1;
 if($46){label=12;break;}else{label=13;break;}
 case 12: 
 var $$etemp$10$0=24;
 var $$etemp$10$1=0;

 HEAP8[($4)]=48;
 var $_1_i=0;label=15;break;
 case 13: 
 assert(32 % 1 === 0);(_memcpy($14, $28, 32)|0);
 assert(32 % 1 === 0);(_memcpy($15, $2, 32)|0);
 assert(24 % 1 === 0);(_memcpy($16, $7, 24)|0);
 var $47=((($45)+(89))|0);
 var $$etemp$11$0=24;
 var $$etemp$11$1=0;

 HEAP8[($4)]=48;
 var $48=($47|0)==-1;
 if($48){var $_1_i=0;label=15;break;}else{label=14;break;}
 case 14: 
 var $50=HEAP32[(($6)>>2)];
 var $51=_sendpacket($50,$1,$4,$47);
 var $phitmp=($51|0)==($47|0);
 var $phitmp2=($phitmp&1);
 var $_1_i=$phitmp2;label=15;break;
 case 15: 
 var $_1_i;
 var $_sent_0=((($_1_i)+($sent_03))&65535);
 var $sent_1=$_sent_0;label=16;break;
 case 16: 
 var $sent_1;
 var $53=((($i_04)+(1))|0);
 var $54=($53>>>0)<6;
 if($54){var $sent_03=$sent_1;var $i_04=$53;label=2;break;}else{label=17;break;}
 case 17: 
 var $56=(($sent_1)&255);
 STACKTOP=sp;return $56;
  default: assert(0, "bad label: " + label);
 }

}


function _handshake_id($ludp,$source){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $randnum_i_i10=sp;
 var $randnum_i_i8=(sp)+(8);
 var $randnum_i_i6=(sp)+(16);
 var $randnum_i_i4=(sp)+(24);
 var $randnum_i_i2=(sp)+(32);
 var $randnum_i_i=(sp)+(40);
 var $randnum_i=(sp)+(48);
 var $1=(($source+20)|0);
 var $2=$1;
 var $3=HEAP8[($2)];
 var $4=($3&255);
 var $5=(($ludp+16+($4<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $11=$6;label=3;break;}
 case 2: 
 var $9=$randnum_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $$etemp$1$0=4;
 var $$etemp$1$1=0;
 _randombytes($9,$$etemp$1$0,$$etemp$1$1);
 var $10=HEAP32[(($randnum_i)>>2)];
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 HEAP32[(($5)>>2)]=$10;
 var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12=(($2+1)|0);
 var $13=HEAP8[($12)];
 var $14=($13&255);
 var $15=(($ludp+1040+($14<<2))|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=4;break;}else{var $21=$16;label=5;break;}
 case 4: 
 var $19=$randnum_i_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $$etemp$4$0=4;
 var $$etemp$4$1=0;
 _randombytes($19,$$etemp$4$0,$$etemp$4$1);
 var $20=HEAP32[(($randnum_i_i)>>2)];
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 HEAP32[(($15)>>2)]=$20;
 var $21=$20;label=5;break;
 case 5: 
 var $21;
 var $22=$21^$11;
 var $23=(($source)|0);
 var $24=HEAP8[($23)];
 if((($24<<24)>>24)==10){ label=15;break;}else if((($24<<24)>>24)==2){ label=6;break;}else{var $id_3=$22;label=19;break;}
 case 6: 
 var $25=(($source+4)|0);
 var $26=$25;
 var $27=$25;
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=(($ludp+2064+($29<<2))|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==0;
 if($32){label=7;break;}else{var $36=$31;label=8;break;}
 case 7: 
 var $34=$randnum_i_i2;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=4;
 var $$etemp$7$1=0;
 _randombytes($34,$$etemp$7$0,$$etemp$7$1);
 var $35=HEAP32[(($randnum_i_i2)>>2)];
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 HEAP32[(($30)>>2)]=$35;
 var $36=$35;label=8;break;
 case 8: 
 var $36;
 var $37=$36^$22;
 var $38=(($26+1)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=(($ludp+3088+($40<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=9;break;}else{var $47=$42;label=10;break;}
 case 9: 
 var $45=$randnum_i_i4;
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;
 _randombytes($45,$$etemp$10$0,$$etemp$10$1);
 var $46=HEAP32[(($randnum_i_i4)>>2)];
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 HEAP32[(($41)>>2)]=$46;
 var $47=$46;label=10;break;
 case 10: 
 var $47;
 var $48=$47^$37;
 var $49=(($26+2)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=(($ludp+4112+($51<<2))|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($53|0)==0;
 if($54){label=11;break;}else{var $58=$53;label=12;break;}
 case 11: 
 var $56=$randnum_i_i6;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;
 _randombytes($56,$$etemp$13$0,$$etemp$13$1);
 var $57=HEAP32[(($randnum_i_i6)>>2)];
 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 HEAP32[(($52)>>2)]=$57;
 var $58=$57;label=12;break;
 case 12: 
 var $58;
 var $59=$58^$48;
 var $60=(($26+3)|0);
 var $61=HEAP8[($60)];
 var $62=($61&255);
 var $63=(($ludp+5136+($62<<2))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){label=13;break;}else{var $69=$64;label=14;break;}
 case 13: 
 var $67=$randnum_i_i8;
 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;
 _randombytes($67,$$etemp$16$0,$$etemp$16$1);
 var $68=HEAP32[(($randnum_i_i8)>>2)];
 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 HEAP32[(($63)>>2)]=$68;
 var $69=$68;label=14;break;
 case 14: 
 var $69;
 var $70=$69^$59;
 var $id_3=$70;label=19;break;
 case 15: 
 var $71=(($source+4)|0);
 var $72=$71;
 var $73=$randnum_i_i10;
 var $i_21=2;var $id_22=$22;var $k1_03=0;label=16;break;
 case 16: 
 var $k1_03;
 var $id_22;
 var $i_21;
 var $75=((($i_21)+(1))|0);
 var $76=(($72+$k1_03)|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=(($ludp+16+($i_21<<10)+($78<<2))|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)==0;
 if($81){label=17;break;}else{var $84=$80;label=18;break;}
 case 17: 
 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;
 _randombytes($73,$$etemp$19$0,$$etemp$19$1);
 var $83=HEAP32[(($randnum_i_i10)>>2)];
 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 HEAP32[(($79)>>2)]=$83;
 var $84=$83;label=18;break;
 case 18: 
 var $84;
 var $85=$84^$id_22;
 var $86=((($k1_03)+(1))|0);
 var $87=($86|0)<16;
 if($87){var $i_21=$75;var $id_22=$85;var $k1_03=$86;label=16;break;}else{var $id_3=$85;label=19;break;}
 case 19: 
 var $id_3;
 var $88=($id_3|0)==0;
 var $_id_3=($88?1:$id_3);
 STACKTOP=sp;return $_id_3;
  default: assert(0, "bad label: " + label);
 }

}


function _kill_connection($ludp,$connection_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $randnum_i2=sp;
 var $randnum_i1=(sp)+(8);
 var $randnum_i=(sp)+(16);
 var $1=(sp)+(24);
 var $2=(($ludp+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3>>>0)>($connection_id>>>0);
 if($4){label=2;break;}else{label=16;break;}
 case 2: 
 var $6=(($ludp+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($8+((($connection_id)*(1160))&-1)+24)|0);
 var $10=HEAP8[($9)];
 var $11=(($10<<24)>>24)==0;
 if($11){label=16;break;}else{label=3;break;}
 case 3: 
 HEAP8[($9)]=0;
 var $tmp=(($1)|0);
 var $tmp1=(($8+((($connection_id)*(1160))&-1))|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp1, 24)|0);
 var $13=HEAP8[($tmp)];
 if((($13<<24)>>24)==2){ label=4;break;}else if((($13<<24)>>24)==10){ label=5;break;}else{label=7;break;}
 case 4: 
 var $15=$randnum_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $$etemp$1$0=4;
 var $$etemp$1$1=0;
 _randombytes($15,$$etemp$1$0,$$etemp$1$1);
 var $16=HEAP32[(($randnum_i)>>2)];
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $_tr1_i=(($16)&255);
 var $17=$_tr1_i&3;
 var $rand_0_i=$17;label=6;break;
 case 5: 
 var $19=$randnum_i1;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $$etemp$4$0=4;
 var $$etemp$4$1=0;
 _randombytes($19,$$etemp$4$0,$$etemp$4$1);
 var $20=HEAP32[(($randnum_i1)>>2)];
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $_tr_i=(($20)&255);
 var $21=$_tr_i&15;
 var $rand_0_i=$21;label=6;break;
 case 6: 
 var $rand_0_i;
 var $23=$randnum_i2;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=4;
 var $$etemp$7$1=0;
 _randombytes($23,$$etemp$7$0,$$etemp$7$1);
 var $24=HEAP32[(($randnum_i2)>>2)];
 var $$etemp$8$0=4;
 var $$etemp$8$1=0;

 var $25=($rand_0_i&255);
 var $26=(($1+4)|0);
 var $27=$26;
 var $28=(($27+$25)|0);
 var $29=HEAP8[($28)];
 var $30=($29&255);
 var $31=((($25)+(2))|0);
 var $32=(($ludp+16+($31<<10)+($30<<2))|0);
 HEAP32[(($32)>>2)]=$24;
 label=7;break;
 case 7: 
 var $33=(($8+((($connection_id)*(1160))&-1)+72)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34)|0);
 _free($35);
 var $36=(($8+((($connection_id)*(1160))&-1)+80)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37)|0);
 _free($38);
 _memset($tmp1, 0, 1160)|0;
 var $39=HEAP32[(($2)>>2)];
 var $i_0_i=$39;label=8;break;
 case 8: 
 var $i_0_i;
 var $41=($i_0_i|0)==0;
 if($41){var $i_0_lcssa_i=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $43=((($i_0_i)-(1))|0);
 var $44=HEAP32[(($6)>>2)];
 var $45=$44;
 var $46=(($45+((($43)*(1160))&-1)+24)|0);
 var $47=HEAP8[($46)];
 var $48=(($47<<24)>>24)==0;
 if($48){var $i_0_i=$43;label=8;break;}else{var $i_0_lcssa_i=$i_0_i;label=10;break;}
 case 10: 
 var $i_0_lcssa_i;
 var $50=($39|0)==($i_0_lcssa_i|0);
 if($50){label=16;break;}else{label=11;break;}
 case 11: 
 var $52=((($39)-($i_0_lcssa_i))|0);
 var $53=($39>>>0)<($52>>>0);
 if($53){label=16;break;}else{label=12;break;}
 case 12: 
 var $55=($i_0_lcssa_i|0)==0;
 var $56=HEAP32[(($6)>>2)];
 if($55){label=13;break;}else{label=14;break;}
 case 13: 
 _free($56);
 HEAP32[(($6)>>2)]=0;
 HEAP32[(($2)>>2)]=0;
 label=16;break;
 case 14: 
 var $59=(($ludp+12)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(Math_imul($60,$i_0_lcssa_i)|0);
 var $62=_realloc($56,$61);
 var $63=($62|0)==0;
 if($63){label=16;break;}else{label=15;break;}
 case 15: 
 var $65=HEAP32[(($2)>>2)];
 var $66=((($65)-($52))|0);
 HEAP32[(($2)>>2)]=$66;
 HEAP32[(($6)>>2)]=$62;
 label=16;break;
 case 16: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _write_packet($ludp,$connection_id,$data,$length){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($ludp+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2>>>0)>($connection_id>>>0);
 if($3){label=2;break;}else{var $_0=0;label=21;break;}
 case 2: 
 var $4=(($ludp+4)|0);
 var $5=($length>>>0)>1024;
 var $6=($length|0)==0;
 var $or_cond=$5|$6;
 var $7=$2;label=3;break;
 case 3: 
 var $7;
 var $8=HEAP32[(($4)>>2)];
 var $9=$8;
 var $10=(($9+((($connection_id)*(1160))&-1)+24)|0);
 var $11=HEAP8[($10)];
 var $12=(($11<<24)>>24)==0;
 var $brmerge=$12|$or_cond;
 if($brmerge){var $_0=0;label=21;break;}else{label=4;break;}
 case 4: 
 var $13=(($9+((($connection_id)*(1160))&-1)+112)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($9+((($connection_id)*(1160))&-1)+116)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=((($14)-($16))|0);
 var $18=($17>>>0)<1024;
 var $19=($7>>>0)>($connection_id>>>0);
 var $or_cond19=$18&$19;
 if($or_cond19){label=5;break;}else{var $_0=0;label=21;break;}
 case 5: 
 var $20=(($9+((($connection_id)*(1160))&-1)+28)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=(((($21>>>0))/(20))&-1);
 var $23=($22>>>0);
 var $24=($23)*((1.5));
 var $25=($24>=0 ? Math_floor($24) : Math_ceil($24));
 var $26=($25>>>0)>1024;
 var $__i=($26?1024:$25);
 var $27=($__i>>>0)<16;
 var $___i=($27?16:$__i);
 var $28=($___i>>>0)>($17>>>0);
 if($28){label=6;break;}else{var $_0=0;label=21;break;}
 case 6: 
 var $29=(($9+((($connection_id)*(1160))&-1)+76)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($17>>>0)<($30>>>0);
 var $32=($30|0)==0;
 var $or_cond2=$31|$32;
 if($or_cond2){label=20;break;}else{label=7;break;}
 case 7: 
 var $34=(($9+((($connection_id)*(1160))&-1)+72)|0);
 var $35=$30<<1;
 var $36=($35>>>0)>1024;
 var $_new_length_i=($36?1024:$35);
 var $37=($17>>>0)>($_new_length_i>>>0);
 if($37){label=17;break;}else{label=8;break;}
 case 8: 
 var $39=($_new_length_i|0)==($30|0);
 if($39){var $_0_i4=$30;label=18;break;}else{label=9;break;}
 case 9: 
 var $41=((($_new_length_i)*(1026))&-1);
 var $42=_malloc($41);
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=10;break;}
 case 10: 
 var $45=((($42)-(4))|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=$47&3;
 var $49=($48|0)==0;
 if($49){label=12;break;}else{label=11;break;}
 case 11: 
 _memset($42, 0, $41)|0;
 label=12;break;
 case 12: 
 var $52=$42;
 var $53=HEAP32[(($34)>>2)];
 var $54=($53|0)==0;
 if($54){label=14;break;}else{label=13;break;}
 case 13: 
 var $55=($16|0)==($14|0);
 if($55){label=16;break;}else{var $i_02_i=$16;label=15;break;}
 case 14: 
 HEAP32[(($34)>>2)]=$52;
 var $_0_i4=$_new_length_i;label=18;break;
 case 15: 
 var $i_02_i;
 var $57=(((($i_02_i>>>0))%(($_new_length_i>>>0)))&-1);
 var $58=(($52+((($57)*(1026))&-1))|0);
 var $59=(((($i_02_i>>>0))%(($30>>>0)))&-1);
 var $60=(($53+((($59)*(1026))&-1))|0);
 assert(1026 % 1 === 0);(_memcpy($58, $60, 1026)|0);
 var $61=((($i_02_i)+(1))|0);
 var $62=($61|0)==($14|0);
 if($62){label=16;break;}else{var $i_02_i=$61;label=15;break;}
 case 16: 
 var $63=(($53)|0);
 _free($63);
 HEAP32[(($34)>>2)]=$52;
 var $_0_i4=$_new_length_i;label=18;break;
 case 17: 
 HEAP32[(($29)>>2)]=-1;
 var $_0=0;label=21;break;
 case 18: 
 var $_0_i4;
 HEAP32[(($29)>>2)]=$_0_i4;
 var $64=($_0_i4|0)==-1;
 if($64){var $_0=0;label=21;break;}else{label=19;break;}
 case 19: 
 HEAP32[(($29)>>2)]=$_0_i4;
 var $65=HEAP32[(($1)>>2)];
 var $66=($65>>>0)>($connection_id>>>0);
 if($66){var $7=$65;label=3;break;}else{var $_0=0;label=21;break;}
 case 20: 
 var $68=(((($14>>>0))%(($30>>>0)))&-1);
 var $69=(($9+((($connection_id)*(1160))&-1)+72)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+((($68)*(1026))&-1))|0);
 assert($length % 1 === 0);(_memcpy($71, $data, $length)|0);
 var $72=(($length)&65535);
 var $73=HEAP32[(($69)>>2)];
 var $74=(($73+((($68)*(1026))&-1)+1024)|0);
 HEAP16[(($74)>>1)]=$72;
 var $75=HEAP32[(($13)>>2)];
 var $76=((($75)+(1))|0);
 HEAP32[(($13)>>2)]=$76;
 var $_0=1;label=21;break;
 case 21: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_handshake($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $packet_i=sp;
 var $source6=(sp)+(16);
 var $source1=(sp)+(40);
 var $1=$object;
 var $2=($length|0)==9;
 if($2){label=2;break;}else{var $_0=1;label=16;break;}
 case 2: 
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $4=(($object+4)|0);
 var $5=$4;
 var $6=(($object+8)|0);
 var $7=$6;
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){var $_0_i=-1;var $30=0;label=8;break;}else{label=3;break;}
 case 3: 
 var $10=HEAP32[(($5)>>2)];
 var $11=$10;
 var $12=(($source1+20)|0);
 var $13=HEAP16[(($12)>>1)];
 var $14=(($source1)|0);
 var $tmp_01_i=$11;var $tmp_i_02_i=0;label=4;break;
 case 4: 
 var $tmp_i_02_i;
 var $tmp_01_i;
 var $16=(($tmp_01_i+24)|0);
 var $17=HEAP8[($16)];
 var $18=(($17<<24)>>24)==0;
 var $19=($tmp_01_i|0)==0;
 var $or_cond=$18|$19;
 if($or_cond){label=7;break;}else{label=5;break;}
 case 5: 
 var $21=(($tmp_01_i+20)|0);
 var $22=(((((HEAPU8[($21)])|(HEAPU8[((($21)+(1))|0)]<<8))<<16)>>16));
 var $23=(($22<<16)>>16)!=0;
 var $24=(($22<<16)>>16)==(($13<<16)>>16);
 var $or_cond2=$23&$24;
 if($or_cond2){label=6;break;}else{label=7;break;}
 case 6: 
 var $25=(($tmp_01_i)|0);
 var $26=_ip_equal($25,$14);
 var $phitmp=($26|0)==0;
 if($phitmp){label=7;break;}else{var $_0_i=$tmp_i_02_i;var $30=$8;label=8;break;}
 case 7: 
 var $27=((($tmp_i_02_i)+(1))|0);
 var $28=(($11+((($27)*(1160))&-1))|0);
 var $29=($27>>>0)<($8>>>0);
 if($29){var $tmp_01_i=$28;var $tmp_i_02_i=$27;label=4;break;}else{var $_0_i=-1;var $30=$8;label=8;break;}
 case 8: 
 var $30;
 var $_0_i;
 var $31=(($packet+1)|0);
 var $32=$31;
 var $33=((((HEAPU8[($32)])|(HEAPU8[((($32)+(1))|0)]<<8)|(HEAPU8[((($32)+(2))|0)]<<16)|(HEAPU8[((($32)+(3))|0)]<<24))|0));
 var $34=_htonl($33);
 var $35=(($packet+5)|0);
 var $36=$35;
 var $37=((((HEAPU8[($36)])|(HEAPU8[((($36)+(1))|0)]<<8)|(HEAPU8[((($36)+(2))|0)]<<16)|(HEAPU8[((($36)+(3))|0)]<<24))|0));
 var $38=_htonl($37);
 var $39=($38|0)==0;
 if($39){label=9;break;}else{label=12;break;}
 case 9: 
 var $41=($30>>>0)>($_0_i>>>0);
 if($41){label=10;break;}else{label=11;break;}
 case 10: 
 var $42=HEAP32[(($5)>>2)];
 var $43=$42;
 var $44=(($43+((($_0_i)*(1160))&-1)+24)|0);
 var $45=HEAP8[($44)];
 var $_off=((($45)-(3))&255);
 var $switch=($_off&255)<2;
 if($switch){label=12;break;}else{label=11;break;}
 case 11: 
 var $46=_handshake_id($1,$source);
 var $_idx=$object;
 var $_idx_val=HEAP32[(($_idx)>>2)];
 var $tmp7=(($source6)|0);
 assert(24 % 1 === 0);(_memcpy($tmp7, $tmp2, 24)|0);
 var $47=(($packet_i)|0);
 var $$etemp$0$0=9;
 var $$etemp$0$1=0;

 HEAP8[($47)]=16;
 var $48=_htonl($46);
 var $49=(($packet_i+1)|0);
 var $50=$49;
 tempBigInt=$48;HEAP8[($50)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($50)+(3))|0)]=tempBigInt&0xff;
 var $51=_htonl($34);
 var $52=(($packet_i+5)|0);
 var $53=$52;
 tempBigInt=$51;HEAP8[($53)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(3))|0)]=tempBigInt&0xff;
 var $54=_sendpacket($_idx_val,$source6,$47,9);
 var $$etemp$1$0=9;
 var $$etemp$1$1=0;

 var $_0=0;label=16;break;
 case 12: 
 var $55=($30>>>0)>($_0_i>>>0);
 if($55){label=13;break;}else{var $_0=1;label=16;break;}
 case 13: 
 var $56=HEAP32[(($5)>>2)];
 var $57=$56;
 var $58=(($57+((($_0_i)*(1160))&-1)+24)|0);
 var $59=HEAP8[($58)];
 var $60=(($59<<24)>>24)==1;
 if($60){label=14;break;}else{var $_0=1;label=16;break;}
 case 14: 
 var $62=(($57+((($_0_i)*(1160))&-1)+88)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($38|0)==($63|0);
 if($64){label=15;break;}else{var $_0=0;label=16;break;}
 case 15: 
 HEAP8[($58)]=2;
 var $66=(($57+((($_0_i)*(1160))&-1)+100)|0);
 HEAP32[(($66)>>2)]=$38;
 var $67=(($57+((($_0_i)*(1160))&-1)+108)|0);
 HEAP32[(($67)>>2)]=$34;
 var $68=(($57+((($_0_i)*(1160))&-1)+96)|0);
 HEAP32[(($68)>>2)]=$34;
 var $69=(($57+((($_0_i)*(1160))&-1)+120)|0);
 HEAP32[(($69)>>2)]=$34;
 var $_0=0;label=16;break;
 case 16: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_SYNC($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $a_i6=sp;
 var $a_i4=(sp)+(8);
 var $a_i3=(sp)+(16);
 var $a_i=(sp)+(24);
 var $ip_port1_i_i=(sp)+(32);
 var $_sroa_10_i_i=(sp)+(56);
 var $_sroa_14_i_i=(sp)+(1136);
 var $source1_i=(sp)+(1144);
 var $source5=(sp)+(1168);
 var $source1=(sp)+(1192);
 var $1=$object;
 var $length_off_i=((($length)-(10))|0);
 var $2=($length_off_i>>>0)>1024;
 if($2){var $_1=1;label=56;break;}else{label=2;break;}
 case 2: 
 var $3=((($length)+(2))|0);
 var $4=$3&3;
 var $5=($4|0)==0;
 if($5){label=3;break;}else{var $_1=1;label=56;break;}
 case 3: 
 var $7=((($length)+(262134))|0);
 var $8=$7>>>2;
 var $9=(($8)&65535);
 var $10=$8&65535;
 var $11=_llvm_stacksave();
 var $12=STACKTOP;STACKTOP = (STACKTOP + ((($10)*(4))&-1))|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $13=(($packet+1)|0);
 var $14=HEAP8[($13)];
 var $15=(($packet+2)|0);
 var $16=$15;
 var $17=((((HEAPU8[($16)])|(HEAPU8[((($16)+(1))|0)]<<8)|(HEAPU8[((($16)+(2))|0)]<<16)|(HEAPU8[((($16)+(3))|0)]<<24))|0));
 var $18=_htonl($17);
 var $19=(($packet+6)|0);
 var $20=$19;
 var $21=((((HEAPU8[($20)])|(HEAPU8[((($20)+(1))|0)]<<8)|(HEAPU8[((($20)+(2))|0)]<<16)|(HEAPU8[((($20)+(3))|0)]<<24))|0));
 var $22=_htonl($21);
 var $23=($10|0)==0;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=$12;
 var $26=(($packet+10)|0);
 var $27=$10<<2;
 assert($27 % 1 === 0);(_memcpy($25, $26, $27)|0);
 label=5;break;
 case 5: 
 var $tmp=(($source1)|0);
 var $tmp2=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp2, 24)|0);
 var $29=(($object+4)|0);
 var $30=$29;
 var $31=(($object+8)|0);
 var $32=$31;
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=12;break;}else{label=6;break;}
 case 6: 
 var $35=HEAP32[(($30)>>2)];
 var $36=$35;
 var $37=(($source1+20)|0);
 var $38=HEAP16[(($37)>>1)];
 var $39=(($source1)|0);
 var $tmp_01_i=$36;var $tmp_i_02_i=0;label=7;break;
 case 7: 
 var $tmp_i_02_i;
 var $tmp_01_i;
 var $41=(($tmp_01_i+24)|0);
 var $42=HEAP8[($41)];
 var $43=(($42<<24)>>24)==0;
 var $44=($tmp_01_i|0)==0;
 var $or_cond=$43|$44;
 if($or_cond){label=10;break;}else{label=8;break;}
 case 8: 
 var $46=(($tmp_01_i+20)|0);
 var $47=(((((HEAPU8[($46)])|(HEAPU8[((($46)+(1))|0)]<<8))<<16)>>16));
 var $48=(($47<<16)>>16)!=0;
 var $49=(($47<<16)>>16)==(($38<<16)>>16);
 var $or_cond9=$48&$49;
 if($or_cond9){label=9;break;}else{label=10;break;}
 case 9: 
 var $50=(($tmp_01_i)|0);
 var $51=_ip_equal($50,$39);
 var $phitmp=($51|0)==0;
 if($phitmp){label=10;break;}else{label=11;break;}
 case 10: 
 var $52=((($tmp_i_02_i)+(1))|0);
 var $53=(($36+((($52)*(1160))&-1))|0);
 var $54=($52>>>0)<($33>>>0);
 if($54){var $tmp_01_i=$53;var $tmp_i_02_i=$52;label=7;break;}else{label=12;break;}
 case 11: 
 var $55=($tmp_i_02_i|0)==-1;
 if($55){label=12;break;}else{label=41;break;}
 case 12: 
 var $tmp6=(($source5)|0);
 assert(24 % 1 === 0);(_memcpy($tmp6, $tmp2, 24)|0);
 var $56=(($source1_i)|0);
 var $$etemp$0$0=24;
 var $$etemp$0$1=0;

 var $57=_handshake_id($1,$source5);
 var $58=($57|0)==($18|0);
 if($58){label=13;break;}else{var $_0=-1;label=55;break;}
 case 13: 
 assert(24 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($tmp6)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($tmp6)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($tmp6)+(8))>>2)];HEAP32[((($56)+(12))>>2)]=HEAP32[((($tmp6)+(12))>>2)];HEAP32[((($56)+(16))>>2)]=HEAP32[((($tmp6)+(16))>>2)];HEAP32[((($56)+(20))>>2)]=HEAP32[((($tmp6)+(20))>>2)];
 var $60=(($ip_port1_i_i)|0);
 var $$etemp$1$0=24;
 var $$etemp$1$1=0;

 var $61=(($_sroa_10_i_i)|0);
 var $$etemp$2$0=1079;
 var $$etemp$2$1=0;

 var $62=(($_sroa_14_i_i)|0);
 var $$etemp$3$0=6;
 var $$etemp$3$1=0;

 assert(24 % 1 === 0);HEAP32[(($60)>>2)]=HEAP32[(($tmp6)>>2)];HEAP32[((($60)+(4))>>2)]=HEAP32[((($tmp6)+(4))>>2)];HEAP32[((($60)+(8))>>2)]=HEAP32[((($tmp6)+(8))>>2)];HEAP32[((($60)+(12))>>2)]=HEAP32[((($tmp6)+(12))>>2)];HEAP32[((($60)+(16))>>2)]=HEAP32[((($tmp6)+(16))>>2)];HEAP32[((($60)+(20))>>2)]=HEAP32[((($tmp6)+(20))>>2)];
 var $63=HEAP32[(($32)>>2)];
 var $64=($63|0)==0;
 var $_pre_pre_i_i_pre=HEAP32[(($30)>>2)];
 if($64){var $95=$_pre_pre_i_i_pre;var $94=0;label=23;break;}else{label=14;break;}
 case 14: 
 var $65=$_pre_pre_i_i_pre;
 var $66=(($ip_port1_i_i+20)|0);
 var $67=HEAP16[(($66)>>1)];
 var $68=(($ip_port1_i_i)|0);
 var $tmp_01_i_i_i=$65;var $tmp_i_02_i_i_i=0;label=15;break;
 case 15: 
 var $tmp_i_02_i_i_i;
 var $tmp_01_i_i_i;
 var $70=(($tmp_01_i_i_i+24)|0);
 var $71=HEAP8[($70)];
 var $72=(($71<<24)>>24)==0;
 var $73=($tmp_01_i_i_i|0)==0;
 var $or_cond10=$72|$73;
 if($or_cond10){label=18;break;}else{label=16;break;}
 case 16: 
 var $75=(($tmp_01_i_i_i+20)|0);
 var $76=(((((HEAPU8[($75)])|(HEAPU8[((($75)+(1))|0)]<<8))<<16)>>16));
 var $77=(($76<<16)>>16)!=0;
 var $78=(($76<<16)>>16)==(($67<<16)>>16);
 var $or_cond11=$77&$78;
 if($or_cond11){label=17;break;}else{label=18;break;}
 case 17: 
 var $79=(($tmp_01_i_i_i)|0);
 var $80=_ip_equal($79,$68);
 var $phitmp7=($80|0)==0;
 if($phitmp7){label=18;break;}else{label=19;break;}
 case 18: 
 var $81=((($tmp_i_02_i_i_i)+(1))|0);
 var $82=(($65+((($81)*(1160))&-1))|0);
 var $83=($81>>>0)<($63>>>0);
 if($83){var $tmp_01_i_i_i=$82;var $tmp_i_02_i_i_i=$81;label=15;break;}else{var $tmp_i_010_i_i=0;var $tmp_011_i_i=$65;label=20;break;}
 case 19: 
 var $84=($tmp_i_02_i_i_i|0)==-1;
 if($84){var $tmp_i_010_i_i=0;var $tmp_011_i_i=$65;label=20;break;}else{var $_0_i_i=-1;label=39;break;}
 case 20: 
 var $tmp_011_i_i;
 var $tmp_i_010_i_i;
 var $85=(($tmp_011_i_i+24)|0);
 var $86=HEAP8[($85)];
 var $87=(($86<<24)>>24)==0;
 if($87){label=22;break;}else{label=21;break;}
 case 21: 
 var $89=((($tmp_i_010_i_i)+(1))|0);
 var $90=(($65+((($89)*(1160))&-1))|0);
 var $91=($89>>>0)<($63>>>0);
 if($91){var $tmp_i_010_i_i=$89;var $tmp_011_i_i=$90;label=20;break;}else{var $95=$_pre_pre_i_i_pre;var $94=$63;label=23;break;}
 case 22: 
 var $93=($tmp_i_010_i_i|0)==-1;
 if($93){var $95=$_pre_pre_i_i_pre;var $94=$63;label=23;break;}else{var $connection_id_1_i_i=$tmp_i_010_i_i;var $107=$_pre_pre_i_i_pre;label=25;break;}
 case 23: 
 var $94;
 var $95;
 var $96=(($object+12)|0);
 var $97=$96;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($94)+(1))|0);
 var $100=(Math_imul($98,$99)|0);
 var $101=_realloc($95,$100);
 var $102=($101|0)==0;
 if($102){var $_0_i_i=-1;label=39;break;}else{label=24;break;}
 case 24: 
 HEAP32[(($30)>>2)]=$101;
 var $104=HEAP32[(($32)>>2)];
 var $105=((($104)+(1))|0);
 HEAP32[(($32)>>2)]=$105;
 var $connection_id_1_i_i=$104;var $107=$101;label=25;break;
 case 25: 
 var $107;
 var $connection_id_1_i_i;
 var $108=$107;
 var $109=(($108+((($connection_id_1_i_i)*(1160))&-1))|0);
 _memset($109, 0, 1160)|0;
 var $110=_rand();
 var $111=(((($110|0))%(5))&-1);
 var $112=((($111)+(5))|0);
 var $113=(($112)&255);
 _memset($61, 0, 1079)|0;
 HEAP16[(($62)>>1)]=0; HEAP16[((($62)+(2))>>1)]=0; HEAP16[((($62)+(4))>>1)]=0;
 var $114=$a_i;
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;

 var $115=_gettimeofday($a_i,0);
 var $116=(($a_i)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118$0=$117;
 var $118$1=((((($117|0)<0))|0)?-1:0);
 var $$etemp$5$0=1000000;
 var $$etemp$5$1=0;
 var $119$0=___muldi3($118$0,$118$1,$$etemp$5$0,$$etemp$5$1);var $119$1=tempRet0;
 var $120=(($a_i+4)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122$0=$121;
 var $122$1=((((($121|0)<0))|0)?-1:0);
 var $123$0=_i64Add($119$0,$119$1,$122$0,$122$1);var $123$1=tempRet0;
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;

 var $124=$a_i3;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $125=_gettimeofday($a_i3,0);
 var $126=(($a_i3)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128$0=$127;
 var $128$1=((((($127|0)<0))|0)?-1:0);
 var $$etemp$8$0=1000000;
 var $$etemp$8$1=0;
 var $129$0=___muldi3($128$0,$128$1,$$etemp$8$0,$$etemp$8$1);var $129$1=tempRet0;
 var $130=(($a_i3+4)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132$0=$131;
 var $132$1=((((($131|0)<0))|0)?-1:0);
 var $133$0=_i64Add($129$0,$129$1,$132$0,$132$1);var $133$1=tempRet0;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $134=$a_i4;
 var $$etemp$10$0=8;
 var $$etemp$10$1=0;

 var $135=_gettimeofday($a_i4,0);
 var $136=(($a_i4)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138$0=$137;
 var $138$1=((((($137|0)<0))|0)?-1:0);
 var $$etemp$11$0=1000000;
 var $$etemp$11$1=0;
 var $139$0=___muldi3($138$0,$138$1,$$etemp$11$0,$$etemp$11$1);var $139$1=tempRet0;
 var $140=(($a_i4+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142$0=$141;
 var $142$1=((((($141|0)<0))|0)?-1:0);
 var $143$0=_i64Add($139$0,$139$1,$142$0,$142$1);var $143$1=tempRet0;
 var $$etemp$12$0=8;
 var $$etemp$12$1=0;

 var $_mask_i_i=$112&255;
 var $144$0=$_mask_i_i;
 var $144$1=0;
 var $$etemp$13$0=1000000;
 var $$etemp$13$1=0;
 var $145$0=___muldi3($144$0,$144$1,$$etemp$13$0,$$etemp$13$1);var $145$1=tempRet0;
 var $146$0=_i64Add($143$0,$143$1,$145$0,$145$1);var $146$1=tempRet0;
 assert(24 % 1 === 0);(_memcpy($109, $56, 24)|0);
 var $147=(($108+((($connection_id_1_i_i)*(1160))&-1)+24)|0);
 HEAP8[($147)]=2;
 var $148=(($108+((($connection_id_1_i_i)*(1160))&-1)+25)|0);
 HEAP8[($148)]=2;
 var $149=(($108+((($connection_id_1_i_i)*(1160))&-1)+26)|0);
 HEAP16[(($149)>>1)]=2;
 var $150=(($108+((($connection_id_1_i_i)*(1160))&-1)+28)|0);
 HEAP32[(($150)>>2)]=30;
 var $151=(($108+((($connection_id_1_i_i)*(1160))&-1)+32)|0);
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $st$15$0=(($151)|0);
 HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
 var $st$16$1=(($151+4)|0);
 HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
 var $152=(($108+((($connection_id_1_i_i)*(1160))&-1)+40)|0);
 var $st$17$0=(($152)|0);
 HEAP32[(($st$17$0)>>2)]=$123$0;
 var $st$18$1=(($152+4)|0);
 HEAP32[(($st$18$1)>>2)]=$123$1;
 var $153=(($108+((($connection_id_1_i_i)*(1160))&-1)+48)|0);
 var $st$19$0=(($153)|0);
 HEAP32[(($st$19$0)>>2)]=$133$0;
 var $st$20$1=(($153+4)|0);
 HEAP32[(($st$20$1)>>2)]=$133$1;
 var $154=(($108+((($connection_id_1_i_i)*(1160))&-1)+56)|0);
 var $$etemp$21$0=0;
 var $$etemp$21$1=0;
 var $st$22$0=(($154)|0);
 HEAP32[(($st$22$0)>>2)]=$$etemp$21$0;
 var $st$23$1=(($154+4)|0);
 HEAP32[(($st$23$1)>>2)]=$$etemp$21$1;
 var $155=(($108+((($connection_id_1_i_i)*(1160))&-1)+64)|0);
 var $st$24$0=(($155)|0);
 HEAP32[(($st$24$0)>>2)]=$146$0;
 var $st$25$1=(($155+4)|0);
 HEAP32[(($st$25$1)>>2)]=$146$1;
 var $156=(($108+((($connection_id_1_i_i)*(1160))&-1)+72)|0);
 var $157=$156;
 assert(1079 % 1 === 0);(_memcpy($157, $61, 1079)|0);
 var $158=(($108+((($connection_id_1_i_i)*(1160))&-1)+1151)|0);
 HEAP8[($158)]=127;
 var $159=(($108+((($connection_id_1_i_i)*(1160))&-1)+1152)|0);
 HEAP8[($159)]=$113;
 var $160=(($108+((($connection_id_1_i_i)*(1160))&-1)+1153)|0);
 HEAP8[($160)]=0;
 var $161=(($109+1154)|0);
 assert(6 % 1 === 0);HEAP16[(($161)>>1)]=HEAP16[(($62)>>1)];HEAP16[((($161)+(2))>>1)]=HEAP16[((($62)+(2))>>1)];HEAP16[((($161)+(4))>>1)]=HEAP16[((($62)+(4))>>1)];
 var $162=_malloc(4104);
 var $163=($162|0)==0;
 if($163){var $_0_i4_i_i=-1;label=31;break;}else{label=26;break;}
 case 26: 
 var $165=((($162)-(4))|0);
 var $166=$165;
 var $167=HEAP32[(($166)>>2)];
 var $168=$167&3;
 var $169=($168|0)==0;
 if($169){label=28;break;}else{label=27;break;}
 case 27: 
 _memset($162, 0, 4104)|0;
 label=28;break;
 case 28: 
 var $172=$162;
 var $173=HEAP32[(($156)>>2)];
 var $174=($173|0)==0;
 if($174){label=30;break;}else{label=29;break;}
 case 29: 
 var $175=(($173)|0);
 _free($175);
 HEAP32[(($156)>>2)]=$172;
 var $_0_i4_i_i=4;label=31;break;
 case 30: 
 HEAP32[(($156)>>2)]=$172;
 var $_0_i4_i_i=4;label=31;break;
 case 31: 
 var $_0_i4_i_i;
 var $177=(($108+((($connection_id_1_i_i)*(1160))&-1)+76)|0);
 HEAP32[(($177)>>2)]=$_0_i4_i_i;
 var $178=(($108+((($connection_id_1_i_i)*(1160))&-1)+80)|0);
 var $179=_malloc(4104);
 var $180=($179|0)==0;
 if($180){label=34;break;}else{label=32;break;}
 case 32: 
 var $182=((($179)-(4))|0);
 var $183=$182;
 var $184=HEAP32[(($183)>>2)];
 var $185=$184&3;
 var $186=($185|0)==0;
 if($186){label=35;break;}else{label=33;break;}
 case 33: 
 _memset($179, 0, 4104)|0;
 label=35;break;
 case 34: 
 var $188=(($108+((($connection_id_1_i_i)*(1160))&-1)+84)|0);
 HEAP32[(($188)>>2)]=-1;
 label=38;break;
 case 35: 
 var $190=$179;
 var $191=HEAP32[(($178)>>2)];
 var $192=($191|0)==0;
 if($192){label=37;break;}else{label=36;break;}
 case 36: 
 var $193=(($191)|0);
 _free($193);
 label=37;break;
 case 37: 
 HEAP32[(($178)>>2)]=$190;
 var $194=(($108+((($connection_id_1_i_i)*(1160))&-1)+84)|0);
 HEAP32[(($194)>>2)]=4;
 var $195=HEAP32[(($177)>>2)];
 var $196=($195|0)==-1;
 if($196){label=38;break;}else{var $_0_i_i=$connection_id_1_i_i;label=39;break;}
 case 38: 
 var $198=HEAP32[(($156)>>2)];
 var $199=(($198)|0);
 _free($199);
 var $200=HEAP32[(($178)>>2)];
 var $201=(($200)|0);
 _free($201);
 _memset($109, 0, 1160)|0;
 var $_0_i_i=-1;label=39;break;
 case 39: 
 var $_0_i_i;
 var $$etemp$26$0=24;
 var $$etemp$26$1=0;

 var $$etemp$27$0=1079;
 var $$etemp$27$1=0;

 var $$etemp$28$0=6;
 var $$etemp$28$1=0;

 var $202=($_0_i_i|0)==-1;
 if($202){var $_0=-1;label=55;break;}else{label=40;break;}
 case 40: 
 var $204=HEAP32[(($30)>>2)];
 var $205=$204;
 var $206=(($205+((($_0_i_i)*(1160))&-1)+100)|0);
 HEAP32[(($206)>>2)]=$18;
 var $207=(($205+((($_0_i_i)*(1160))&-1)+104)|0);
 HEAP32[(($207)>>2)]=$18;
 var $208=(($205+((($_0_i_i)*(1160))&-1)+112)|0);
 HEAP32[(($208)>>2)]=$18;
 var $209=(($205+((($_0_i_i)*(1160))&-1)+116)|0);
 HEAP32[(($209)>>2)]=$18;
 var $210=(($205+((($_0_i_i)*(1160))&-1)+108)|0);
 HEAP32[(($210)>>2)]=$22;
 var $211=(($205+((($_0_i_i)*(1160))&-1)+96)|0);
 HEAP32[(($211)>>2)]=$22;
 var $212=(($205+((($_0_i_i)*(1160))&-1)+120)|0);
 HEAP32[(($212)>>2)]=$22;
 var $_0=$_0_i_i;label=55;break;
 case 41: 
 var $214=(($36+((($tmp_i_02_i)*(1160))&-1)+24)|0);
 var $215=HEAP8[($214)];
 if((($215<<24)>>24)==2){ label=42;break;}else if((($215<<24)>>24)==3){ label=45;break;}else{var $_0=0;label=55;break;}
 case 42: 
 var $217=(($36+((($tmp_i_02_i)*(1160))&-1)+100)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($218|0)==($18|0);
 if($219){label=43;break;}else{var $_0=1;label=55;break;}
 case 43: 
 var $221=(($36+((($tmp_i_02_i)*(1160))&-1)+108)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($222|0)==($22|0);
 if($223){label=44;break;}else{var $_0=1;label=55;break;}
 case 44: 
 HEAP8[($214)]=3;
 var $225=(($36+((($tmp_i_02_i)*(1160))&-1)+1150)|0);
 HEAP8[($225)]=$14;
 var $226=(($36+((($tmp_i_02_i)*(1160))&-1)+1151)|0);
 var $227=HEAP8[($226)];
 var $228=((($227)+(1))&255);
 HEAP8[($226)]=$228;
 _send_SYNC($1,$tmp_i_02_i);
 var $_0=0;label=55;break;
 case 45: 
 var $230=(($36+((($tmp_i_02_i)*(1160))&-1)+1150)|0);
 var $231=HEAP8[($230)];
 var $232=(($36+((($tmp_i_02_i)*(1160))&-1)+100)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=((($18)-($233))|0);
 var $235=(($36+((($tmp_i_02_i)*(1160))&-1)+108)|0);
 var $236=(($36+((($tmp_i_02_i)*(1160))&-1)+76)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=($234>>>0)>($237>>>0);
 if($238){var $_0=1;label=55;break;}else{label=46;break;}
 case 46: 
 var $240=((($14)-($231))&255);
 var $241=HEAP32[(($235)>>2)];
 var $242=((($22)-($241))|0);
 var $notlhs_i=($242>>>0)<1025;
 var $notrhs_i=(($231<<24)>>24)!=(($14<<24)>>24);
 var $or_cond_not_i=$notrhs_i&$notlhs_i;
 var $243=($240&255)<8;
 var $or_cond1_i=$or_cond_not_i&$243;
 if($or_cond1_i){label=47;break;}else{var $_0=1;label=55;break;}
 case 47: 
 HEAP32[(($232)>>2)]=$18;
 HEAP32[(($235)>>2)]=$22;
 var $245=(($36+((($tmp_i_02_i)*(1160))&-1)+116)|0);
 HEAP32[(($245)>>2)]=$18;
 var $246=$a_i6;
 var $$etemp$29$0=8;
 var $$etemp$29$1=0;

 var $247=_gettimeofday($a_i6,0);
 var $248=(($a_i6)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250$0=$249;
 var $250$1=((((($249|0)<0))|0)?-1:0);
 var $$etemp$30$0=1000000;
 var $$etemp$30$1=0;
 var $251$0=___muldi3($250$0,$250$1,$$etemp$30$0,$$etemp$30$1);var $251$1=tempRet0;
 var $252=(($a_i6+4)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254$0=$253;
 var $254$1=((((($253|0)<0))|0)?-1:0);
 var $255$0=_i64Add($251$0,$251$1,$254$0,$254$1);var $255$1=tempRet0;
 var $$etemp$31$0=8;
 var $$etemp$31$1=0;

 var $256=(($36+((($tmp_i_02_i)*(1160))&-1)+48)|0);
 var $st$32$0=(($256)|0);
 HEAP32[(($st$32$0)>>2)]=$255$0;
 var $st$33$1=(($256+4)|0);
 HEAP32[(($st$33$1)>>2)]=$255$1;
 HEAP8[($230)]=$14;
 var $257=(($36+((($tmp_i_02_i)*(1160))&-1)+1151)|0);
 var $258=HEAP8[($257)];
 var $259=((($258)+(1))&255);
 HEAP8[($257)]=$259;
 var $260=(($9<<16)>>16)==0;
 if($260){label=49;break;}else{var $i_01_i=0;label=48;break;}
 case 48: 
 var $i_01_i;
 var $261=(($12+($i_01_i<<2))|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=_htonl($262);
 var $264=(($36+((($tmp_i_02_i)*(1160))&-1)+124+($i_01_i<<2))|0);
 HEAP32[(($264)>>2)]=$263;
 var $265=((($i_01_i)+(1))|0);
 var $266=($265>>>0)<($10>>>0);
 if($266){var $i_01_i=$265;label=48;break;}else{label=49;break;}
 case 49: 
 var $267=(($36+((($tmp_i_02_i)*(1160))&-1)+1148)|0);
 HEAP16[(($267)>>1)]=$9;
 var $268=(($36+((($tmp_i_02_i)*(1160))&-1)+112)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=HEAP32[(($245)>>2)];
 var $271=($269|0)==($270|0);
 var $272=(($36+((($tmp_i_02_i)*(1160))&-1)+28)|0);
 var $273=HEAP32[(($272)>>2)];
 if($271){label=50;break;}else{label=51;break;}
 case 50: 
 var $275=$273>>>3;
 var $276=((($273)-($275))|0);
 var $277=($276>>>0)<30;
 var $__i_i=($277?30:$276);
 HEAP32[(($272)>>2)]=$__i_i;
 var $_0=0;label=55;break;
 case 51: 
 var $279=(($36+((($tmp_i_02_i)*(1160))&-1)+26)|0);
 var $280=HEAP16[(($279)>>1)];
 var $281=($280&65535);
 var $282=(((($273>>>0))/(($281>>>0)))&-1);
 var $283=$282>>>2;
 var $284=($283>>>0)>=($10>>>0);
 var $285=($9&65535)<11;
 var $or_cond_i_i=$284|$285;
 if($or_cond_i_i){label=52;break;}else{label=53;break;}
 case 52: 
 var $287=$273>>>2;
 var $288=((($273)+(1))|0);
 var $289=((($288)+($287))|0);
 HEAP32[(($272)>>2)]=$289;
 var $290=HEAP32[(($236)>>2)];
 var $291=(Math_imul($290,$281)|0);
 var $292=($289>>>0)>($291>>>0);
 var $_2_i_i=($292?$291:$289);
 var $storemerge_i_i=$_2_i_i;label=54;break;
 case 53: 
 var $294=$273>>>3;
 var $295=((($273)-($294))|0);
 var $storemerge_i_i=$295;label=54;break;
 case 54: 
 var $storemerge_i_i;
 HEAP32[(($272)>>2)]=$storemerge_i_i;
 var $_0=0;label=55;break;
 case 55: 
 var $_0;
 _llvm_stackrestore($11);
 var $_1=$_0;label=56;break;
 case 56: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_data($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $a_i=sp;
 var $source2=(sp)+(8);
 var $tmp=(($source2)|0);
 var $tmp3=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $tmp3, 24)|0);
 var $1=(($object+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){var $_0=1;label=36;break;}else{label=2;break;}
 case 2: 
 var $5=(($object+4)|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($source2+20)|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=(($source2)|0);
 var $tmp_01_i=$8;var $tmp_i_02_i=0;label=3;break;
 case 3: 
 var $tmp_i_02_i;
 var $tmp_01_i;
 var $13=(($tmp_01_i+24)|0);
 var $14=HEAP8[($13)];
 var $15=(($14<<24)>>24)==0;
 var $16=($tmp_01_i|0)==0;
 var $or_cond=$15|$16;
 if($or_cond){label=6;break;}else{label=4;break;}
 case 4: 
 var $18=(($tmp_01_i+20)|0);
 var $19=(((((HEAPU8[($18)])|(HEAPU8[((($18)+(1))|0)]<<8))<<16)>>16));
 var $20=(($19<<16)>>16)!=0;
 var $21=(($19<<16)>>16)==(($10<<16)>>16);
 var $or_cond2=$20&$21;
 if($or_cond2){label=5;break;}else{label=6;break;}
 case 5: 
 var $22=(($tmp_01_i)|0);
 var $23=_ip_equal($22,$11);
 var $phitmp=($23|0)==0;
 if($phitmp){label=6;break;}else{label=7;break;}
 case 6: 
 var $24=((($tmp_i_02_i)+(1))|0);
 var $25=(($8+((($24)*(1160))&-1))|0);
 var $26=($24>>>0)<($3>>>0);
 if($26){var $tmp_01_i=$25;var $tmp_i_02_i=$24;label=3;break;}else{var $_0=1;label=36;break;}
 case 7: 
 var $27=($tmp_i_02_i|0)==-1;
 if($27){var $_0=1;label=36;break;}else{label=8;break;}
 case 8: 
 var $29=(($8+((($tmp_i_02_i)*(1160))&-1)+24)|0);
 var $30=HEAP8[($29)];
 var $31=(($30<<24)>>24)==3;
 if($31){label=9;break;}else{var $_0=1;label=36;break;}
 case 9: 
 var $length_off=((($length)-(6))|0);
 var $33=($length_off>>>0)>1023;
 if($33){var $_0=1;label=36;break;}else{label=10;break;}
 case 10: 
 var $35=((($length)+(65531))|0);
 var $36=(($35)&65535);
 var $37=(($packet+1)|0);
 var $38=$37;
 var $39=((((HEAPU8[($38)])|(HEAPU8[((($38)+(1))|0)]<<8)|(HEAPU8[((($38)+(2))|0)]<<16)|(HEAPU8[((($38)+(3))|0)]<<24))|0));
 var $40=_htonl($39);
 var $41=(($packet+5)|0);
 var $42=$35&65535;
 var $43=($36&65535)>1024;
 if($43){var $_0=1;label=36;break;}else{label=11;break;}
 case 11: 
 var $45=(($8+((($tmp_i_02_i)*(1160))&-1)+96)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=((($40)-($46))|0);
 var $48=($47>>>0)>1024;
 if($48){var $_0=0;label=36;break;}else{label=12;break;}
 case 12: 
 var $50=(($8+((($tmp_i_02_i)*(1160))&-1)+84)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=($47>>>0)>($51>>>0);
 if($52){label=14;break;}else{label=13;break;}
 case 13: 
 var $_pre5_i=(($8+((($tmp_i_02_i)*(1160))&-1)+120)|0);
 var $95=$51;var $94=$46;var $_pre_phi_i=$_pre5_i;label=27;break;
 case 14: 
 var $54=(($8+((($tmp_i_02_i)*(1160))&-1)+1153)|0);
 var $55=HEAP8[($54)];
 var $56=(($55<<24)>>24)==0;
 if($56){var $_0=0;label=36;break;}else{label=15;break;}
 case 15: 
 var $58=(($8+((($tmp_i_02_i)*(1160))&-1)+80)|0);
 var $59=$47<<1;
 var $60=(($8+((($tmp_i_02_i)*(1160))&-1)+120)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=((($61)+($51))|0);
 var $63=($59>>>0)>1024;
 var $_new_length_i_i=($63?1024:$59);
 var $64=($51>>>0)>($_new_length_i_i>>>0);
 if($64){var $_0=0;label=36;break;}else{label=16;break;}
 case 16: 
 var $66=($_new_length_i_i|0)==($51|0);
 if($66){var $_0_i_i=$51;label=25;break;}else{label=17;break;}
 case 17: 
 var $68=((($_new_length_i_i)*(1026))&-1);
 var $69=_malloc($68);
 var $70=($69|0)==0;
 if($70){var $_0=0;label=36;break;}else{label=18;break;}
 case 18: 
 var $72=((($69)-(4))|0);
 var $73=$72;
 var $74=HEAP32[(($73)>>2)];
 var $75=$74&3;
 var $76=($75|0)==0;
 if($76){label=20;break;}else{label=19;break;}
 case 19: 
 _memset($69, 0, $68)|0;
 label=20;break;
 case 20: 
 var $79=$69;
 var $80=HEAP32[(($58)>>2)];
 var $81=($80|0)==0;
 if($81){label=22;break;}else{label=21;break;}
 case 21: 
 var $82=($51|0)==0;
 if($82){label=24;break;}else{var $i_02_i_i=$61;label=23;break;}
 case 22: 
 HEAP32[(($58)>>2)]=$79;
 var $_0_i_i=$_new_length_i_i;label=25;break;
 case 23: 
 var $i_02_i_i;
 var $84=(((($i_02_i_i>>>0))%(($_new_length_i_i>>>0)))&-1);
 var $85=(($79+((($84)*(1026))&-1))|0);
 var $86=(((($i_02_i_i>>>0))%(($51>>>0)))&-1);
 var $87=(($80+((($86)*(1026))&-1))|0);
 assert(1026 % 1 === 0);(_memcpy($85, $87, 1026)|0);
 var $88=((($i_02_i_i)+(1))|0);
 var $89=($88|0)==($62|0);
 if($89){label=24;break;}else{var $i_02_i_i=$88;label=23;break;}
 case 24: 
 var $90=(($80)|0);
 _free($90);
 HEAP32[(($58)>>2)]=$79;
 var $_0_i_i=$_new_length_i_i;label=25;break;
 case 25: 
 var $_0_i_i;
 var $91=($_0_i_i|0)==-1;
 if($91){var $_0=0;label=36;break;}else{label=26;break;}
 case 26: 
 HEAP32[(($50)>>2)]=$_0_i_i;
 var $_pre_i4=HEAP32[(($45)>>2)];
 var $95=$_0_i_i;var $94=$_pre_i4;var $_pre_phi_i=$60;label=27;break;
 case 27: 
 var $_pre_phi_i;
 var $94;
 var $95;
 var $96=HEAP32[(($_pre_phi_i)>>2)];
 var $97=((($96)+($95))|0);
 var $98=(($8+((($tmp_i_02_i)*(1160))&-1)+108)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=((($40)-($99))|0);
 var $101=($94|0)==($97|0);
 if($101){var $129=$95;label=32;break;}else{var $i_02_i=$94;label=29;break;}
 case 28: 
 var $103=($105|0)==($97|0);
 if($103){var $129=$95;label=32;break;}else{var $i_02_i=$105;label=29;break;}
 case 29: 
 var $i_02_i;
 var $104=($i_02_i|0)==($40|0);
 var $105=((($i_02_i)+(1))|0);
 if($104){label=30;break;}else{label=28;break;}
 case 30: 
 var $107=(((($40>>>0))%(($95>>>0)))&-1);
 var $108=(($8+((($tmp_i_02_i)*(1160))&-1)+80)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=(($109+((($107)*(1026))&-1))|0);
 assert($42 % 1 === 0);(_memcpy($110, $41, $42)|0);
 var $111=HEAP32[(($50)>>2)];
 var $112=(((($40>>>0))%(($111>>>0)))&-1);
 var $113=HEAP32[(($108)>>2)];
 var $114=(($113+((($112)*(1026))&-1)+1024)|0);
 HEAP16[(($114)>>1)]=$36;
 var $115=$a_i;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $116=_gettimeofday($a_i,0);
 var $117=(($a_i)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119$0=$118;
 var $119$1=((((($118|0)<0))|0)?-1:0);
 var $$etemp$1$0=1000000;
 var $$etemp$1$1=0;
 var $120$0=___muldi3($119$0,$119$1,$$etemp$1$0,$$etemp$1$1);var $120$1=tempRet0;
 var $121=(($a_i+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123$0=$122;
 var $123$1=((((($122|0)<0))|0)?-1:0);
 var $124$0=_i64Add($120$0,$120$1,$123$0,$123$1);var $124$1=tempRet0;
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $125=(($8+((($tmp_i_02_i)*(1160))&-1)+56)|0);
 var $st$3$0=(($125)|0);
 HEAP32[(($st$3$0)>>2)]=$124$0;
 var $st$4$1=(($125+4)|0);
 HEAP32[(($st$4$1)>>2)]=$124$1;
 var $126=HEAP32[(($50)>>2)];
 var $127=($100>>>0)<($126>>>0);
 if($127){label=31;break;}else{var $129=$126;label=32;break;}
 case 31: 
 HEAP32[(($98)>>2)]=$40;
 var $129=$126;label=32;break;
 case 32: 
 var $129;
 var $130=HEAP32[(($45)>>2)];
 var $131=($130|0)==($97|0);
 if($131){var $_0=0;label=36;break;}else{label=33;break;}
 case 33: 
 var $132=(($8+((($tmp_i_02_i)*(1160))&-1)+80)|0);
 var $133=HEAP32[(($132)>>2)];
 var $i_11_i=$130;label=34;break;
 case 34: 
 var $i_11_i;
 var $135=(((($i_11_i>>>0))%(($129>>>0)))&-1);
 var $136=(($133+((($135)*(1026))&-1)+1024)|0);
 var $137=HEAP16[(($136)>>1)];
 var $138=(($137<<16)>>16)==0;
 if($138){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 HEAP32[(($45)>>2)]=$i_11_i;
 var $140=((($i_11_i)+(1))|0);
 var $141=($140|0)==($97|0);
 if($141){var $_0=0;label=36;break;}else{var $i_11_i=$140;label=34;break;}
 case 36: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_SYNC($ludp,$connection_id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2088)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $packet=sp;
 var $ip_port=(sp)+(1040);
 var $requested=(sp)+(1064);
 var $1=(($ludp+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($packet)|0);
 var $$etemp$0$0=1034;
 var $$etemp$0$1=0;

 var $5=(($ip_port)|0);
 var $6=(($3+((($connection_id)*(1160))&-1))|0);
 assert(24 % 1 === 0);(_memcpy($5, $6, 24)|0);
 var $7=(($3+((($connection_id)*(1160))&-1)+1151)|0);
 var $8=HEAP8[($7)];
 var $9=(($3+((($connection_id)*(1160))&-1)+96)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=_htonl($10);
 var $12=(($3+((($connection_id)*(1160))&-1)+104)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=_htonl($13);
 var $15=$requested;
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 var $16=(($ludp+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17>>>0)>($connection_id>>>0);
 if($18){label=2;break;}else{var $_0_i=0;label=13;break;}
 case 2: 
 var $20=(($3+((($connection_id)*(1160))&-1)+24)|0);
 var $21=HEAP8[($20)];
 var $22=(($21<<24)>>24)==0;
 if($22){var $_0_i_i=0;label=4;break;}else{label=3;break;}
 case 3: 
 var $24=(($3+((($connection_id)*(1160))&-1)+120)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($10)-($25))|0);
 var $_0_i_i=$26;label=4;break;
 case 4: 
 var $_0_i_i;
 var $27=(($3+((($connection_id)*(1160))&-1)+84)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=((($28)-(1))|0);
 var $30=($_0_i_i>>>0)<($29>>>0);
 if($30){label=5;break;}else{var $_0_i=0;label=13;break;}
 case 5: 
 var $32=(($3+((($connection_id)*(1160))&-1)+108)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($10|0)==($33|0);
 if($34){var $_lcssa9_i=$10;label=12;break;}else{label=6;break;}
 case 6: 
 var $35=(($3+((($connection_id)*(1160))&-1)+80)|0);
 var $36=HEAP32[(($35)>>2)];
 var $number_03_i=0;var $i_04_i=$10;label=8;break;
 case 7: 
 var $38=($49|0)==($33|0);
 if($38){label=11;break;}else{var $number_03_i=$number_1_i;var $i_04_i=$49;label=8;break;}
 case 8: 
 var $i_04_i;
 var $number_03_i;
 var $39=(((($i_04_i>>>0))%(($28>>>0)))&-1);
 var $40=(($36+((($39)*(1026))&-1)+1024)|0);
 var $41=HEAP16[(($40)>>1)];
 var $42=(($41<<16)>>16)==0;
 if($42){label=9;break;}else{var $number_1_i=$number_03_i;label=10;break;}
 case 9: 
 var $44=_htonl($i_04_i);
 var $45=(($requested+($number_03_i<<2))|0);
 HEAP32[(($45)>>2)]=$44;
 var $46=((($number_03_i)+(1))|0);
 var $number_1_i=$46;label=10;break;
 case 10: 
 var $number_1_i;
 var $48=($number_1_i>>>0)>255;
 var $49=((($i_04_i)+(1))|0);
 if($48){var $_0_i=$number_1_i;label=13;break;}else{label=7;break;}
 case 11: 
 var $50=($number_1_i|0)==0;
 if($50){var $_lcssa9_i=$33;label=12;break;}else{var $_0_i=$number_1_i;label=13;break;}
 case 12: 
 var $_lcssa9_i;
 HEAP32[(($9)>>2)]=$_lcssa9_i;
 var $_0_i=0;label=13;break;
 case 13: 
 var $_0_i;
 HEAP8[($4)]=17;
 var $51=(($packet+1)|0);
 HEAP8[($51)]=$8;
 var $52=(($packet+2)|0);
 var $53=$52;
 tempBigInt=$11;HEAP8[($53)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($53)+(3))|0)]=tempBigInt&0xff;
 var $54=(($packet+6)|0);
 var $55=$54;
 tempBigInt=$14;HEAP8[($55)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($55)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($55)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($55)+(3))|0)]=tempBigInt&0xff;
 var $56=(($packet+10)|0);
 var $57=$_0_i<<2;
 assert($57 % 1 === 0);(_memcpy($56, $15, $57)|0);
 var $58=(($ludp)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=((($57)+(10))|0);
 var $61=_sendpacket($59,$ip_port,$4,$60);
 var $$etemp$2$0=1024;
 var $$etemp$2$1=0;

 var $$etemp$3$0=1034;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _encrypt_data_fast($enc_key,$nonce,$plain,$length,$encrypted){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain=sp;
 var $temp_encrypted=(sp)+(1056);
 var $1=((($length)+(16))|0);
 var $2=($1>>>0)>1024;
 var $3=($length|0)==0;
 var $or_cond=$2|$3;
 if($or_cond){var $_1=-1;label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($temp_plain)|0);
 var $$etemp$0$0=1056;
 var $$etemp$0$1=0;

 _memset($4, 0, 1056)|0;
 var $5=(($temp_encrypted)|0);
 var $$etemp$1$0=1040;
 var $$etemp$1$1=0;

 var $6=(($temp_plain+32)|0);
 assert($length % 1 === 0);(_memcpy($6, $plain, $length)|0);
 var $7=((($length)+(32))|0);
 var $8$0=$7;
 var $8$1=0;
 var $9=($length>>>0)>4294967263;
 if($9){label=4;break;}else{label=3;break;}
 case 3: 
 _crypto_stream_xsalsa20_xor($5,$4,$8$0,$8$1,$nonce,$enc_key);
 var $10=(($temp_encrypted+16)|0);
 var $11=(($temp_encrypted+32)|0);
 var $$etemp$2$0=-32;
 var $$etemp$2$1=-1;
 var $12$0=_i64Add($8$0,$8$1,$$etemp$2$0,$$etemp$2$1);var $12$1=tempRet0;
 var $13=HEAP32[((428)>>2)];
 var $14=FUNCTION_TABLE[$13]($10,$11,$12$0,$12$1,$5);
 _memset($5, 0, 16)|0;
 label=4;break;
 case 4: 
 var $15=(($temp_encrypted+16)|0);
 assert($1 % 1 === 0);(_memcpy($encrypted, $15, $1)|0);
 var $_1=$1;label=5;break;
 case 5: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _encrypt_data($public_key,$secret_key,$nonce,$plain,$length,$encrypted){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_i_i=sp;
 var $temp_plain_i=(sp)+(32);
 var $temp_encrypted_i=(sp)+(1088);
 var $k=(sp)+(2128);
 var $1=(($k)|0);
 var $2=(($s_i_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 _crypto_scalarmult_curve25519_ref($2,$secret_key,$public_key);
 _crypto_core_hsalsa20($1,14752,$2,104);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $3=((($length)+(16))|0);
 var $4=($3>>>0)>1024;
 var $5=($length|0)==0;
 var $or_cond_i=$4|$5;
 if($or_cond_i){var $_1_i=-1;label=7;break;}else{label=2;break;}
 case 2: 
 var $6=(($temp_plain_i)|0);
 var $$etemp$2$0=1056;
 var $$etemp$2$1=0;

 _memset($6, 0, 1056)|0;
 var $7=(($temp_encrypted_i)|0);
 var $$etemp$3$0=1040;
 var $$etemp$3$1=0;

 var $8=(($temp_plain_i+32)|0);
 assert($length % 1 === 0);(_memcpy($8, $plain, $length)|0);
 var $9=((($length)+(32))|0);
 var $10$0=$9;
 var $10$1=0;
 var $11=($length>>>0)>4294967263;
 if($11){label=3;break;}else{label=4;break;}
 case 3: 
 var $_phi_trans_insert=(($temp_encrypted_i+1)|0);
 var $_pre=HEAP8[($_phi_trans_insert)];
 var $_phi_trans_insert1=(($temp_encrypted_i+2)|0);
 var $_pre2=HEAP8[($_phi_trans_insert1)];
 var $_phi_trans_insert3=(($temp_encrypted_i+3)|0);
 var $_pre4=HEAP8[($_phi_trans_insert3)];
 var $_phi_trans_insert5=(($temp_encrypted_i+4)|0);
 var $_pre6=HEAP8[($_phi_trans_insert5)];
 var $_phi_trans_insert7=(($temp_encrypted_i+5)|0);
 var $_pre8=HEAP8[($_phi_trans_insert7)];
 var $_phi_trans_insert9=(($temp_encrypted_i+6)|0);
 var $_pre10=HEAP8[($_phi_trans_insert9)];
 var $_phi_trans_insert11=(($temp_encrypted_i+7)|0);
 var $_pre12=HEAP8[($_phi_trans_insert11)];
 var $_phi_trans_insert13=(($temp_encrypted_i+8)|0);
 var $_pre14=HEAP8[($_phi_trans_insert13)];
 var $_phi_trans_insert15=(($temp_encrypted_i+9)|0);
 var $_pre16=HEAP8[($_phi_trans_insert15)];
 var $_phi_trans_insert17=(($temp_encrypted_i+10)|0);
 var $_pre18=HEAP8[($_phi_trans_insert17)];
 var $_phi_trans_insert19=(($temp_encrypted_i+11)|0);
 var $_pre20=HEAP8[($_phi_trans_insert19)];
 var $_phi_trans_insert21=(($temp_encrypted_i+12)|0);
 var $_pre22=HEAP8[($_phi_trans_insert21)];
 var $_phi_trans_insert23=(($temp_encrypted_i+13)|0);
 var $_pre24=HEAP8[($_phi_trans_insert23)];
 var $_phi_trans_insert25=(($temp_encrypted_i+14)|0);
 var $_pre26=HEAP8[($_phi_trans_insert25)];
 var $_phi_trans_insert27=(($temp_encrypted_i+15)|0);
 var $_pre28=HEAP8[($_phi_trans_insert27)];
 var $31=$_pre;var $30=$_pre2;var $29=$_pre4;var $28=$_pre6;var $27=$_pre8;var $26=$_pre10;var $25=$_pre12;var $24=$_pre14;var $23=$_pre16;var $22=$_pre18;var $21=$_pre20;var $20=$_pre22;var $19=$_pre24;var $18=$_pre26;var $17=$_pre28;label=5;break;
 case 4: 
 _crypto_stream_xsalsa20_xor($7,$6,$10$0,$10$1,$nonce,$1);
 var $12=(($temp_encrypted_i+16)|0);
 var $13=(($temp_encrypted_i+32)|0);
 var $$etemp$4$0=-32;
 var $$etemp$4$1=-1;
 var $14$0=_i64Add($10$0,$10$1,$$etemp$4$0,$$etemp$4$1);var $14$1=tempRet0;
 var $15=HEAP32[((428)>>2)];
 var $16=FUNCTION_TABLE[$15]($12,$13,$14$0,$14$1,$7);
 _memset($7, 0, 16)|0;
 var $31=0;var $30=0;var $29=0;var $28=0;var $27=0;var $26=0;var $25=0;var $24=0;var $23=0;var $22=0;var $21=0;var $20=0;var $19=0;var $18=0;var $17=0;label=5;break;
 case 5: 
 var $17;
 var $18;
 var $19;
 var $20;
 var $21;
 var $22;
 var $23;
 var $24;
 var $25;
 var $26;
 var $27;
 var $28;
 var $29;
 var $30;
 var $31;
 var $32=$31|$30;
 var $33=$32|$29;
 var $34=$33|$28;
 var $35=$34|$27;
 var $36=$35|$26;
 var $37=$36|$25;
 var $38=$37|$24;
 var $39=$38|$23;
 var $40=$39|$22;
 var $41=$40|$21;
 var $42=$41|$20;
 var $43=$42|$19;
 var $44=$43|$18;
 var $45=$44|$17;
 var $46=(($45<<24)>>24)==0;
 if($46){label=6;break;}else{var $_1_i=-1;label=7;break;}
 case 6: 
 var $48=(($temp_encrypted_i+16)|0);
 assert($3 % 1 === 0);(_memcpy($encrypted, $48, $3)|0);
 var $_1_i=$3;label=7;break;
 case 7: 
 var $_1_i;
 STACKTOP=sp;return $_1_i;
  default: assert(0, "bad label: " + label);
 }

}


function _encrypt_data_symmetric($secret_key,$nonce,$plain,$length,$encrypted){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($length|0)==0;
 if($1){var $_0=-1;label=6;break;}else{label=2;break;}
 case 2: 
 var $3=((($length)+(32))|0);
 var $4=_llvm_stacksave();
 var $5=STACKTOP;STACKTOP = (STACKTOP + $3)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=((($length)+(16))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + $3)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 _memset($5, 0, 32)|0;
 var $8=(($5+32)|0);
 assert($length % 1 === 0);(_memcpy($8, $plain, $length)|0);
 var $9$0=$3;
 var $9$1=0;
 var $10=($length>>>0)>4294967263;
 if($10){label=3;break;}else{label=4;break;}
 case 3: 
 var $_pre=(($7+16)|0);
 var $_pre_phi=$_pre;label=5;break;
 case 4: 
 _crypto_stream_xsalsa20_xor($7,$5,$9$0,$9$1,$nonce,$secret_key);
 var $11=(($7+16)|0);
 var $12=(($7+32)|0);
 var $$etemp$0$0=-32;
 var $$etemp$0$1=-1;
 var $13$0=_i64Add($9$0,$9$1,$$etemp$0$0,$$etemp$0$1);var $13$1=tempRet0;
 var $14=HEAP32[((428)>>2)];
 var $15=FUNCTION_TABLE[$14]($11,$12,$13$0,$13$1,$7);
 _memset($7, 0, 16)|0;
 var $_pre_phi=$11;label=5;break;
 case 5: 
 var $_pre_phi;
 assert($6 % 1 === 0);(_memcpy($encrypted, $_pre_phi, $6)|0);
 _llvm_stackrestore($4);
 var $_0=$6;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _decrypt_data_symmetric($secret_key,$nonce,$encrypted,$length,$plain){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($length>>>0)<17;
 if($1){var $_1=-1;label=5;break;}else{label=2;break;}
 case 2: 
 var $3=((($length)+(32))|0);
 var $4=_llvm_stacksave();
 var $5=STACKTOP;STACKTOP = (STACKTOP + $3)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=((($length)+(16))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + $6)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 _memset($5, 0, 16)|0;
 var $8=(($7+16)|0);
 assert($length % 1 === 0);(_memcpy($8, $encrypted, $length)|0);
 var $9$0=$6;
 var $9$1=0;
 var $10=_crypto_secretbox_xsalsa20poly1305_open($5,$7,$9$0,$9$1,$nonce,$secret_key);
 var $11=($10|0)==-1;
 if($11){var $_0=-1;label=4;break;}else{label=3;break;}
 case 3: 
 var $13=(($5+32)|0);
 var $14=((($length)-(16))|0);
 assert($14 % 1 === 0);(_memcpy($plain, $13, $14)|0);
 var $_0=$14;label=4;break;
 case 4: 
 var $_0;
 _llvm_stackrestore($4);
 var $_1=$_0;label=5;break;
 case 5: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _write_cryptpacket($c,$crypt_connection_id,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3120)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_plain_i=sp;
 var $temp_encrypted_i=(sp)+(1056);
 var $temp_data=(sp)+(2096);
 var $c_idx=(($c+8)|0);
 var $c_idx_val=HEAP32[(($c_idx)>>2)];
 var $1=($c_idx_val>>>0)>($crypt_connection_id>>>0);
 if($1){label=2;break;}else{var $_1=0;label=11;break;}
 case 2: 
 var $3=((($length)+(16))|0);
 var $4=($3>>>0)>1023;
 if($4){var $_1=0;label=11;break;}else{label=3;break;}
 case 3: 
 var $6=(($c+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+((($crypt_connection_id)*(224))&-1)+208)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==3;
 if($10){label=4;break;}else{var $_1=0;label=11;break;}
 case 4: 
 var $12=(($temp_data)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $13=(($temp_data+1)|0);
 var $14=($3>>>0)>1024;
 var $15=($length|0)==0;
 var $or_cond_i1=$14|$15;
 if($or_cond_i1){var $_1=0;label=11;break;}else{label=5;break;}
 case 5: 
 var $16=(($temp_plain_i)|0);
 var $$etemp$1$0=1056;
 var $$etemp$1$1=0;

 _memset($16, 0, 1056)|0;
 var $17=(($temp_encrypted_i)|0);
 var $$etemp$2$0=1040;
 var $$etemp$2$1=0;

 var $18=(($temp_plain_i+32)|0);
 assert($length % 1 === 0);(_memcpy($18, $data, $length)|0);
 var $19=((($length)+(32))|0);
 var $20$0=$19;
 var $20$1=0;
 var $21=($length>>>0)>4294967263;
 if($21){label=7;break;}else{label=6;break;}
 case 6: 
 var $22=(($7+((($crypt_connection_id)*(224))&-1)+176)|0);
 var $23=(($7+((($crypt_connection_id)*(224))&-1)+56)|0);
 _crypto_stream_xsalsa20_xor($17,$16,$20$0,$20$1,$23,$22);
 var $24=(($temp_encrypted_i+16)|0);
 var $25=(($temp_encrypted_i+32)|0);
 var $$etemp$3$0=-32;
 var $$etemp$3$1=-1;
 var $26$0=_i64Add($20$0,$20$1,$$etemp$3$0,$$etemp$3$1);var $26$1=tempRet0;
 var $27=HEAP32[((428)>>2)];
 var $28=FUNCTION_TABLE[$27]($24,$25,$26$0,$26$1,$17);
 _memset($17, 0, 16)|0;
 label=7;break;
 case 7: 
 var $29=(($temp_encrypted_i+16)|0);
 assert($3 % 1 === 0);(_memcpy($13, $29, $3)|0);
 var $30=($3|0)==-1;
 if($30){var $_1=0;label=11;break;}else{label=8;break;}
 case 8: 
 HEAP8[($12)]=3;
 var $32=(($c)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=HEAP32[(($6)>>2)];
 var $35=(($34+((($crypt_connection_id)*(224))&-1)+210)|0);
 var $36=HEAP16[(($35)>>1)];
 var $37=($36&65535);
 var $38=((($length)+(17))|0);
 var $39=_write_packet($33,$37,$12,$38);
 var $40=($39|0)==0;
 if($40){var $_1=0;label=11;break;}else{label=9;break;}
 case 9: 
 var $42=HEAP32[(($6)>>2)];
 var $i_01_i=0;label=10;break;
 case 10: 
 var $i_01_i;
 var $44=(($42+((($crypt_connection_id)*(224))&-1)+56+$i_01_i)|0);
 var $45=HEAP8[($44)];
 var $46=((($45)+(1))&255);
 HEAP8[($44)]=$46;
 var $47=(($46<<24)>>24)==0;
 var $48=((($i_01_i)+(1))|0);
 var $49=($48>>>0)<24;
 var $or_cond_i=$47&$49;
 if($or_cond_i){var $i_01_i=$48;label=10;break;}else{var $_1=1;label=11;break;}
 case 11: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_request($self_public_key,$self_secret_key,$public_key,$data,$request_id,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+3208)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_i_i=sp;
 var $temp_plain_i_i=(sp)+(32);
 var $temp_encrypted_i_i=(sp)+(1088);
 var $k_i=(sp)+(2128);
 var $nonce=(sp)+(2160);
 var $temp=(sp)+(2184);
 var $1=($length&65535);
 var $length_off=((($length)-(106))&65535);
 var $2=($length_off&65535)<919;
 if($2){var $_03_i=32;var $l_04_i_pn=$packet;var $r_05_i=$self_public_key;label=2;break;}else{var $_1=-1;label=10;break;}
 case 2: 
 var $r_05_i;
 var $l_04_i_pn;
 var $_03_i;
 var $l_04_i=(($l_04_i_pn+1)|0);
 var $3=HEAP8[($l_04_i)];
 var $4=HEAP8[($r_05_i)];
 var $5=(($3<<24)>>24)==(($4<<24)>>24);
 if($5){label=3;break;}else{var $_1=-1;label=10;break;}
 case 3: 
 var $7=((($_03_i)-(1))|0);
 var $8=(($r_05_i+1)|0);
 var $9=($7|0)==0;
 if($9){label=4;break;}else{var $_03_i=$7;var $l_04_i_pn=$l_04_i;var $r_05_i=$8;label=2;break;}
 case 4: 
 var $10=(($packet+33)|0);
 assert(32 % 1 === 0);(_memcpy($public_key, $10, 32)|0);
 var $11=(($temp)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $12=(($nonce)|0);
 var $13=(($packet+65)|0);
 assert(24 % 1 === 0);(_memcpy($12, $13, 24)|0);
 var $14=(($k_i)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $15=(($s_i_i)|0);
 var $$etemp$2$0=32;
 var $$etemp$2$1=0;

 _crypto_scalarmult_curve25519_ref($15,$self_secret_key,$public_key);
 _crypto_core_hsalsa20($14,14752,$15,104);
 var $$etemp$3$0=32;
 var $$etemp$3$1=0;

 var $length_off_i_i=((($1)-(106))|0);
 var $16=($length_off_i_i>>>0)>1007;
 if($16){var $_1=-1;label=10;break;}else{label=5;break;}
 case 5: 
 var $18=((($1)-(89))|0);
 var $19=(($packet+89)|0);
 var $20=(($temp_plain_i_i)|0);
 var $$etemp$4$0=1056;
 var $$etemp$4$1=0;

 var $21=(($temp_encrypted_i_i)|0);
 var $$etemp$5$0=1040;
 var $$etemp$5$1=0;

 _memset($21, 0, 1040)|0;
 var $22=(($temp_encrypted_i_i+16)|0);
 assert($18 % 1 === 0);(_memcpy($22, $19, $18)|0);
 var $23=((($1)-(73))|0);
 var $24$0=$23;
 var $24$1=0;
 var $25=_crypto_secretbox_xsalsa20poly1305_open($20,$21,$24$0,$24$1,$12,$14);
 var $26=($25|0)==-1;
 if($26){var $_1=-1;label=10;break;}else{var $check_01_i_i_i=0;var $i_02_i_i_i=0;label=6;break;}
 case 6: 
 var $i_02_i_i_i;
 var $check_01_i_i_i;
 var $27=(($temp_plain_i_i+$i_02_i_i_i)|0);
 var $28=HEAP8[($27)];
 var $29=$28|$check_01_i_i_i;
 var $30=((($i_02_i_i_i)+(1))|0);
 var $31=($30>>>0)<32;
 if($31){var $check_01_i_i_i=$29;var $i_02_i_i_i=$30;label=6;break;}else{label=7;break;}
 case 7: 
 var $32=(($29<<24)>>24)==0;
 if($32){label=8;break;}else{var $_1=-1;label=10;break;}
 case 8: 
 var $33=(($temp_plain_i_i+32)|0);
 var $34=((($1)-(105))|0);
 assert($34 % 1 === 0);(_memcpy($11, $33, $34)|0);
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;

 var $_off=((($1)-(104))|0);
 var $switch=($_off>>>0)<2;
 if($switch){var $_1=-1;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=HEAP8[($11)];
 HEAP8[($request_id)]=$36;
 var $37=(($temp+1)|0);
 assert($length_off_i_i % 1 === 0);(_memcpy($data, $37, $length_off_i_i)|0);
 var $_1=$length_off_i_i;label=10;break;
 case 10: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_kill($c,$crypt_connection_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c_idx=(($c+8)|0);
 var $c_idx_val=HEAP32[(($c_idx)>>2)];
 var $1=($c_idx_val>>>0)>($crypt_connection_id>>>0);
 if($1){label=2;break;}else{label=11;break;}
 case 2: 
 var $3=(($c+4)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+((($crypt_connection_id)*(224))&-1)+208)|0);
 var $6=HEAP8[($5)];
 var $7=(($6<<24)>>24)==0;
 if($7){label=11;break;}else{label=3;break;}
 case 3: 
 HEAP8[($5)]=0;
 var $9=(($c)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=HEAP32[(($3)>>2)];
 var $12=(($11+((($crypt_connection_id)*(224))&-1)+210)|0);
 var $13=HEAP16[(($12)>>1)];
 var $14=($13&65535);
 _kill_connection($10,$14);
 var $15=HEAP32[(($3)>>2)];
 var $16=(($15+((($crypt_connection_id)*(224))&-1))|0);
 _memset($16, 0, 224)|0;
 var $17=HEAP32[(($3)>>2)];
 var $18=(($17+((($crypt_connection_id)*(224))&-1)+210)|0);
 HEAP16[(($18)>>1)]=-1;
 var $19=HEAP32[(($c_idx)>>2)];
 var $i_0=$19;label=4;break;
 case 4: 
 var $i_0;
 var $21=($i_0|0)==0;
 if($21){var $i_0_lcssa=0;var $_lcssa=1;label=6;break;}else{label=5;break;}
 case 5: 
 var $23=((($i_0)-(1))|0);
 var $24=(($17+((($23)*(224))&-1)+208)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){var $i_0=$23;label=4;break;}else{var $i_0_lcssa=$i_0;var $_lcssa=0;label=6;break;}
 case 6: 
 var $_lcssa;
 var $i_0_lcssa;
 var $28=($19|0)==($i_0_lcssa|0);
 if($28){label=11;break;}else{label=7;break;}
 case 7: 
 HEAP32[(($c_idx)>>2)]=$i_0_lcssa;
 var $30=(($17)|0);
 if($_lcssa){label=8;break;}else{label=9;break;}
 case 8: 
 _free($30);
 HEAP32[(($3)>>2)]=0;
 label=11;break;
 case 9: 
 var $33=((($i_0_lcssa)*(224))&-1);
 var $34=_realloc($30,$33);
 var $35=($34|0)==0;
 if($35){label=11;break;}else{label=10;break;}
 case 10: 
 var $37=$34;
 HEAP32[(($3)>>2)]=$37;
 label=11;break;
 case 11: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _cryptopacket_handle($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1064)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $public_key=sp;
 var $data=(sp)+(32);
 var $number=(sp)+(1056);
 var $1=$object;
 var $2=HEAP8[($packet)];
 var $3=(($2<<24)>>24)==32;
 if($3){label=2;break;}else{label=18;break;}
 case 2: 
 var $length_off=((($length)-(106))|0);
 var $5=($length_off>>>0)>934;
 if($5){var $_1=1;label=19;break;}else{label=3;break;}
 case 3: 
 var $7=(($packet+1)|0);
 var $8=(($object+14900)|0);
 var $_03_i=32;var $l_04_i=$7;var $r_05_i=$8;label=4;break;
 case 4: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $9=HEAP8[($l_04_i)];
 var $10=HEAP8[($r_05_i)];
 var $11=(($9<<24)>>24)==(($10<<24)>>24);
 if($11){label=5;break;}else{var $i_02_i=0;label=10;break;}
 case 5: 
 var $13=((($_03_i)-(1))|0);
 var $14=(($l_04_i+1)|0);
 var $15=(($r_05_i+1)|0);
 var $16=($13|0)==0;
 if($16){label=6;break;}else{var $_03_i=$13;var $l_04_i=$14;var $r_05_i=$15;label=4;break;}
 case 6: 
 var $17=(($data)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $18=(($object+14932)|0);
 var $19=(($public_key)|0);
 var $20=(($length)&65535);
 var $21=_handle_request($8,$18,$19,$17,$number,$packet,$20);
 if(($21|0)==-1|($21|0)==0){ var $_1=1;label=19;break;}else{label=7;break;}
 case 7: 
 var $23=HEAP8[($number)];
 var $24=($23&255);
 var $25=$object;
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+76+($24<<3))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){var $_1=1;label=19;break;}else{label=8;break;}
 case 8: 
 var $31=(($26+76+($24<<3)+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$28]($32,$source,$19,$17,$21);
 var $_1=$33;label=19;break;
 case 9: 
 var $35=((($i_02_i)+(1))|0);
 var $36=($35>>>0)<32;
 if($36){var $i_02_i=$35;label=10;break;}else{var $_0_i=-1;label=17;break;}
 case 10: 
 var $i_02_i;
 var $37=(($1+8+((($i_02_i)*(464))&-1))|0);
 var $_03_i_i_i=32;var $l_04_i_i_i=$7;var $r_05_i_i_i=$37;label=11;break;
 case 11: 
 var $r_05_i_i_i;
 var $l_04_i_i_i;
 var $_03_i_i_i;
 var $38=HEAP8[($l_04_i_i_i)];
 var $39=HEAP8[($r_05_i_i_i)];
 var $40=(($38<<24)>>24)==(($39<<24)>>24);
 if($40){label=12;break;}else{label=9;break;}
 case 12: 
 var $42=((($_03_i_i_i)-(1))|0);
 var $43=(($l_04_i_i_i+1)|0);
 var $44=(($r_05_i_i_i+1)|0);
 var $45=($42|0)==0;
 if($45){label=13;break;}else{var $_03_i_i_i=$42;var $l_04_i_i_i=$43;var $r_05_i_i_i=$44;label=11;break;}
 case 13: 
 var $46=(($1+8+((($i_02_i)*(464))&-1)+248)|0);
 var $47=(($46)|0);
 var $48=HEAP8[($47)];
 var $49=(($48<<24)>>24)==0;
 if($49){label=15;break;}else{label=14;break;}
 case 14: 
 var $51=(($object+4)|0);
 var $52=$51;
 var $53=HEAP32[(($52)>>2)];
 var $54=_sendpacket($53,$46,$packet,$length);
 var $_0_i=$54;label=17;break;
 case 15: 
 var $56=(($1+8+((($i_02_i)*(464))&-1)+32)|0);
 var $57=(($56)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24)==0;
 if($59){var $_0_i=-1;label=17;break;}else{label=16;break;}
 case 16: 
 var $61=(($object+4)|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=_sendpacket($63,$56,$packet,$length);
 var $_0_i=$64;label=17;break;
 case 17: 
 var $_0_i;
 var $65=($_0_i|0)==($length|0);
 if($65){var $_1=0;label=19;break;}else{label=18;break;}
 case 18: 
 var $_1=1;label=19;break;
 case 19: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _kill_net_crypto($c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($c+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{var $i_01=0;label=2;break;}
 case 2: 
 var $i_01;
 _crypto_kill($c,$i_01);
 var $4=((($i_01)+(1))|0);
 var $5=HEAP32[(($1)>>2)];
 var $6=($4>>>0)<($5>>>0);
 if($6){var $i_01=$4;label=2;break;}else{label=3;break;}
 case 3: 
 var $7=(($c)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=5;break;}else{var $i_01_i=0;label=4;break;}
 case 4: 
 var $i_01_i;
 _kill_connection($8,$i_01_i);
 var $12=((($i_01_i)+(1))|0);
 var $13=HEAP32[(($9)>>2)];
 var $14=($12>>>0)<($13>>>0);
 if($14){var $i_01_i=$12;label=4;break;}else{label=5;break;}
 case 5: 
 var $15=(($8+4)|0);
 var $16=HEAP32[(($15)>>2)];
 _free($16);
 var $17=$8;
 _free($17);
 var $18=$c;
 _free($18);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _send_data_request($net,$path,$dest,$public_key,$encrypt_public_key,$nonce,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+64)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $dest; $dest=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($dest)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($dest)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($dest)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $random_public_key=sp;
 var $random_secret_key=(sp)+(32);
 var $1=($length&65535);
 var $2=((($1)+(105))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + $2)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP8[($3)]=-123;
 var $4=(($3+1)|0);
 assert(32 % 1 === 0);(_memcpy($4, $public_key, 32)|0);
 var $5=(($3+33)|0);
 assert(24 % 1 === 0);(_memcpy($5, $nonce, 24)|0);
 var $6=(($random_public_key)|0);
 var $7=(($random_secret_key)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;
 _randombytes($7,$$etemp$0$0,$$etemp$0$1);
 _crypto_scalarmult_curve25519_ref($6,$7,440);
 var $8=(($3+57)|0);
 assert(32 % 1 === 0);(_memcpy($8, $6, 32)|0);
 var $9=(($3+89)|0);
 var $10=_encrypt_data($encrypt_public_key,$7,$5,$data,$1,$9);
 var $11=((($1)+(16))|0);
 var $12=($10|0)==($11|0);
 if($12){label=2;break;}else{var $_0=-1;label=3;break;}
 case 2: 
 var $14=_send_onion_packet($net,$path,$dest,$3,$2);
 var $_0=$14;label=3;break;
 case 3: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_announce_request($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $num_nodes_i_i=sp;
 var $h_i=(sp)+(8);
 var $padded_i=(sp)+(40);
 var $temp_plain_i=(sp)+(168);
 var $temp_encrypted_i=(sp)+(1224);
 var $source7=(sp)+(2264);
 var $data_i=(sp)+(2288);
 var $shared_key=(sp)+(2384);
 var $plain=(sp)+(2416);
 var $ping_id1=(sp)+(2624);
 var $ping_id2=(sp)+(2656);
 var $nodes_list=(sp)+(2688);
 var $nonce=(sp)+(3136);
 var $pl=(sp)+(3160);
 var $data=(sp)+(3648);
 var $1=$object;
 var $2=($length|0)==469;
 if($2){label=2;break;}else{var $_2=1;label=54;break;}
 case 2: 
 var $4=(($packet+1)|0);
 var $5=(($packet+25)|0);
 var $6=(($object+13864)|0);
 var $7=$6;
 var $8=(($shared_key)|0);
 var $9=$object;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+14932)|0);
 _get_shared_key($7,$8,$11,$5);
 var $12=(($plain)|0);
 var $$etemp$0$0=204;
 var $$etemp$0$1=0;

 var $13=(($packet+57)|0);
 var $14=(($temp_plain_i)|0);
 var $$etemp$1$0=1056;
 var $$etemp$1$1=0;

 var $15=(($temp_encrypted_i)|0);
 var $$etemp$2$0=1040;
 var $$etemp$2$1=0;

 _memset($15, 0, 1040)|0;
 var $16=(($temp_encrypted_i+16)|0);
 assert(220 % 1 === 0);(_memcpy($16, $13, 220)|0);
 var $$etemp$3$0=236;
 var $$etemp$3$1=0;
 var $17=_crypto_secretbox_xsalsa20poly1305_open($14,$15,$$etemp$3$0,$$etemp$3$1,$4,$8);
 var $18=($17|0)==-1;
 if($18){var $_2=1;label=54;break;}else{var $check_01_i_i=0;var $i_02_i_i=0;label=3;break;}
 case 3: 
 var $i_02_i_i;
 var $check_01_i_i;
 var $19=(($temp_plain_i+$i_02_i_i)|0);
 var $20=HEAP8[($19)];
 var $21=$20|$check_01_i_i;
 var $22=((($i_02_i_i)+(1))|0);
 var $23=($22>>>0)<32;
 if($23){var $check_01_i_i=$21;var $i_02_i_i=$22;label=3;break;}else{label=4;break;}
 case 4: 
 var $24=(($21<<24)>>24)==0;
 if($24){label=5;break;}else{var $_2=1;label=54;break;}
 case 5: 
 var $26=(($temp_plain_i+32)|0);
 assert(204 % 1 === 0);(_memcpy($12, $26, 204)|0);
 var $ld$4$0=13552;
 var $27$0=HEAP32[(($ld$4$0)>>2)];
 var $ld$5$1=13556;
 var $27$1=HEAP32[(($ld$5$1)>>2)];
 var $28=(($ping_id1)|0);
 var $tmp2=(($source)|0);
 var $$etemp$6$0=20;
 var $$etemp$6$1=0;
 var $29$0=___udivdi3($27$0,$27$1,$$etemp$6$0,$$etemp$6$1);var $29$1=tempRet0;
 var $30=(($data_i)|0);
 var $$etemp$7$0=96;
 var $$etemp$7$1=0;

 var $31=(($object+13832)|0);
 assert(32 % 1 === 0);(_memcpy($30, $31, 32)|0);
 var $32=(($data_i+32)|0);
 var $33=$32;
 var $st$8$0=(($33)|0);
 tempBigInt=$29$0;HEAP8[($st$8$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$8$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$8$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$8$0)+(3))|0)]=tempBigInt&0xff;
 var $st$9$1=(($33+4)|0);
 tempBigInt=$29$1;HEAP8[($st$9$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$9$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$9$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$9$1)+(3))|0)]=tempBigInt&0xff;
 var $34=(($data_i+40)|0);
 assert(32 % 1 === 0);(_memcpy($34, $5, 32)|0);
 var $35=(($data_i+72)|0);
 assert(24 % 1 === 0);(_memcpy($35, $tmp2, 24)|0);
 var $36=(($h_i)|0);
 var $$etemp$10$0=32;
 var $$etemp$10$1=0;

 var $37=(($padded_i)|0);
 var $$etemp$11$0=128;
 var $$etemp$11$1=0;

 assert(32 % 1 === 0);(_memcpy($36, 344, 32)|0);
 var $$etemp$12$0=96;
 var $$etemp$12$1=0;
 _crypto_hashblocks_sha256($36,$30,$$etemp$12$0,$$etemp$12$1);
 var $scevgep17_i=(($data_i+64)|0);
 assert(32 % 1 === 0);(_memcpy($37, $scevgep17_i, 32)|0);
 var $38=(($padded_i+32)|0);
 HEAP8[($38)]=-128;
 var $scevgep_i=(($padded_i+33)|0);
 var $39=(($padded_i+62)|0);
 _memset($scevgep_i, 0, 29)|0;
 HEAP8[($39)]=3;
 var $40=(($padded_i+63)|0);
 HEAP8[($40)]=0;
 var $$etemp$13$0=64;
 var $$etemp$13$1=0;
 _crypto_hashblocks_sha256($36,$37,$$etemp$13$0,$$etemp$13$1);
 assert(32 % 1 === 0);(_memcpy($28, $36, 32)|0);
 var $$etemp$14$0=128;
 var $$etemp$14$1=0;

 var $$etemp$15$0=32;
 var $$etemp$15$1=0;

 var $$etemp$16$0=96;
 var $$etemp$16$1=0;

 var $$etemp$17$0=20;
 var $$etemp$17$1=0;
 var $41$0=_i64Add($27$0,$27$1,$$etemp$17$0,$$etemp$17$1);var $41$1=tempRet0;
 var $42=(($ping_id2)|0);
 var $$etemp$18$0=20;
 var $$etemp$18$1=0;
 var $43$0=___udivdi3($41$0,$41$1,$$etemp$18$0,$$etemp$18$1);var $43$1=tempRet0;
 var $$etemp$19$0=96;
 var $$etemp$19$1=0;

 assert(32 % 1 === 0);(_memcpy($30, $31, 32)|0);
 var $st$20$0=(($33)|0);
 tempBigInt=$43$0;HEAP8[($st$20$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$20$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$20$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$20$0)+(3))|0)]=tempBigInt&0xff;
 var $st$21$1=(($33+4)|0);
 tempBigInt=$43$1;HEAP8[($st$21$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$21$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$21$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$21$1)+(3))|0)]=tempBigInt&0xff;
 assert(32 % 1 === 0);(_memcpy($34, $5, 32)|0);
 assert(24 % 1 === 0);(_memcpy($35, $tmp2, 24)|0);
 var $$etemp$22$0=32;
 var $$etemp$22$1=0;

 var $$etemp$23$0=128;
 var $$etemp$23$1=0;

 assert(32 % 1 === 0);(_memcpy($36, 344, 32)|0);
 var $$etemp$24$0=96;
 var $$etemp$24$1=0;
 _crypto_hashblocks_sha256($36,$30,$$etemp$24$0,$$etemp$24$1);
 assert(32 % 1 === 0);(_memcpy($37, $scevgep17_i, 32)|0);
 HEAP8[($38)]=-128;
 _memset($scevgep_i, 0, 29)|0;
 HEAP8[($39)]=3;
 HEAP8[($40)]=0;
 var $$etemp$25$0=64;
 var $$etemp$25$1=0;
 _crypto_hashblocks_sha256($36,$37,$$etemp$25$0,$$etemp$25$1);
 assert(32 % 1 === 0);(_memcpy($42, $36, 32)|0);
 var $$etemp$26$0=128;
 var $$etemp$26$1=0;

 var $$etemp$27$0=32;
 var $$etemp$27$1=0;

 var $$etemp$28$0=96;
 var $$etemp$28$1=0;

 var $44=(($plain+32)|0);
 var $45=(($plain+64)|0);
 var $_03_i=32;var $l_04_i=$28;var $r_05_i=$12;label=6;break;
 case 6: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $46=HEAP8[($l_04_i)];
 var $47=HEAP8[($r_05_i)];
 var $48=(($46<<24)>>24)==(($47<<24)>>24);
 if($48){label=7;break;}else{var $_03_i9=32;var $l_04_i8=$42;var $r_05_i7=$12;label=8;break;}
 case 7: 
 var $50=((($_03_i)-(1))|0);
 var $51=(($l_04_i+1)|0);
 var $52=(($r_05_i+1)|0);
 var $53=($50|0)==0;
 if($53){label=10;break;}else{var $_03_i=$50;var $l_04_i=$51;var $r_05_i=$52;label=6;break;}
 case 8: 
 var $r_05_i7;
 var $l_04_i8;
 var $_03_i9;
 var $54=HEAP8[($l_04_i8)];
 var $55=HEAP8[($r_05_i7)];
 var $56=(($54<<24)>>24)==(($55<<24)>>24);
 if($56){label=9;break;}else{var $i_01_i=0;label=28;break;}
 case 9: 
 var $58=((($_03_i9)-(1))|0);
 var $59=(($l_04_i8+1)|0);
 var $60=(($r_05_i7+1)|0);
 var $61=($58|0)==0;
 if($61){label=10;break;}else{var $_03_i9=$58;var $l_04_i8=$59;var $r_05_i7=$60;label=8;break;}
 case 10: 
 var $62=(($packet+277)|0);
 var $tmp8=(($source7)|0);
 assert(24 % 1 === 0);(_memcpy($tmp8, $tmp2, 24)|0);
 var $i_01_i_i=0;label=11;break;
 case 11: 
 var $i_01_i_i;
 var $64=(($1+8+((($i_01_i_i)*(288))&-1)+280)|0);
 var $ld$29$0=(($64)|0);
 var $65$0=HEAP32[(($ld$29$0)>>2)];
 var $ld$30$1=(($64+4)|0);
 var $65$1=HEAP32[(($ld$30$1)>>2)];
 var $$etemp$31$0=300;
 var $$etemp$31$1=0;
 var $66$0=_i64Add($65$0,$65$1,$$etemp$31$0,$$etemp$31$1);var $66$1=tempRet0;
 var $67=(($66$1>>>0) > ($27$1>>>0)) | (((($66$1>>>0) == ($27$1>>>0) & ($66$0>>>0) >  ($27$0>>>0))));
 if($67){label=12;break;}else{label=15;break;}
 case 12: 
 var $69=(($1+8+((($i_01_i_i)*(288))&-1))|0);
 var $_03_i24=32;var $l_04_i23=$69;var $r_05_i22=$5;label=13;break;
 case 13: 
 var $r_05_i22;
 var $l_04_i23;
 var $_03_i24;
 var $70=HEAP8[($l_04_i23)];
 var $71=HEAP8[($r_05_i22)];
 var $72=(($70<<24)>>24)==(($71<<24)>>24);
 if($72){label=14;break;}else{label=15;break;}
 case 14: 
 var $74=((($_03_i24)-(1))|0);
 var $75=(($l_04_i23+1)|0);
 var $76=(($r_05_i22+1)|0);
 var $77=($74|0)==0;
 if($77){label=16;break;}else{var $_03_i24=$74;var $l_04_i23=$75;var $r_05_i22=$76;label=13;break;}
 case 15: 
 var $78=((($i_01_i_i)+(1))|0);
 var $79=($78>>>0)<48;
 if($79){var $i_01_i_i=$78;label=11;break;}else{var $pos_06_i=-1;var $i_07_i=0;label=17;break;}
 case 16: 
 var $80=($i_01_i_i|0)==-1;
 if($80){var $pos_06_i=-1;var $i_07_i=0;label=17;break;}else{var $pos_35_i=$i_01_i_i;label=22;break;}
 case 17: 
 var $i_07_i;
 var $pos_06_i;
 var $81=(($1+8+((($i_07_i)*(288))&-1)+280)|0);
 var $ld$32$0=(($81)|0);
 var $82$0=HEAP32[(($ld$32$0)>>2)];
 var $ld$33$1=(($81+4)|0);
 var $82$1=HEAP32[(($ld$33$1)>>2)];
 var $$etemp$34$0=300;
 var $$etemp$34$1=0;
 var $83$0=_i64Add($82$0,$82$1,$$etemp$34$0,$$etemp$34$1);var $83$1=tempRet0;
 var $84=(($83$1>>>0) <= ($27$1>>>0)) & (((($83$1>>>0) <  ($27$1>>>0)) | ($83$0>>>0) <= ($27$0>>>0)));
 var $pos_0_i_0_i=($84?$i_07_i:$pos_06_i);
 var $85=((($i_07_i)+(1))|0);
 var $86=($85>>>0)<48;
 if($86){var $pos_06_i=$pos_0_i_0_i;var $i_07_i=$85;label=17;break;}else{label=18;break;}
 case 18: 
 var $88=($pos_0_i_0_i|0)==-1;
 if($88){label=19;break;}else{var $pos_35_i=$pos_0_i_0_i;label=22;break;}
 case 19: 
 var $90=HEAP32[(($9)>>2)];
 var $i_03_i=0;label=20;break;
 case 20: 
 var $i_03_i;
 var $92=(($90+14900+$i_03_i)|0);
 var $93=HEAP8[($92)];
 var $_sum=((($i_03_i)+(25))|0);
 var $94=(($packet+$_sum)|0);
 var $95=HEAP8[($94)];
 var $96=$95^$93;
 var $ispos_i=(($96<<24)>>24)>-1;
 var $neg_i=(((-$96))&255);
 var $97=($ispos_i?$96:$neg_i);
 var $_sum44=((($i_03_i)+(8))|0);
 var $98=(($object+$_sum44)|0);
 var $99=HEAP8[($98)];
 var $100=$99^$93;
 var $ispos1_i=(($100<<24)>>24)>-1;
 var $neg2_i=(((-$100))&255);
 var $101=($ispos1_i?$100:$neg2_i);
 var $102=($97&255)<($101&255);
 if($102){var $pos_35_i=0;label=22;break;}else{label=21;break;}
 case 21: 
 var $104=($97&255)<=($101&255);
 var $105=((($i_03_i)+(1))|0);
 var $106=($105>>>0)<32;
 var $or_cond=$104&$106;
 if($or_cond){var $i_03_i=$105;label=20;break;}else{var $index_0=-1;label=33;break;}
 case 22: 
 var $pos_35_i;
 var $107=(($1+8+((($pos_35_i)*(288))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($107, $5, 32)|0);
 var $108=(($1+8+((($pos_35_i)*(288))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($108, $tmp8, 24)|0);
 var $109=(($1+8+((($pos_35_i)*(288))&-1)+56)|0);
 assert(192 % 1 === 0);(_memcpy($109, $62, 192)|0);
 var $110=(($1+8+((($pos_35_i)*(288))&-1)+248)|0);
 assert(32 % 1 === 0);(_memcpy($110, $45, 32)|0);
 var $111=(($1+8+((($pos_35_i)*(288))&-1)+280)|0);
 var $st$35$0=(($111)|0);
 HEAP32[(($st$35$0)>>2)]=$27$0;
 var $st$36$1=(($111+4)|0);
 HEAP32[(($st$36$1)>>2)]=$27$1;
 var $112=HEAP32[(($9)>>2)];
 var $113=(($112+14900)|0);
 assert(32 % 1 === 0);(_memcpy(14960, $113, 32)|0);
 var $114=(($object+8)|0);
 _qsort($114,48,288,396);
 var $ld$37$0=13552;
 var $115$0=HEAP32[(($ld$37$0)>>2)];
 var $ld$38$1=13556;
 var $115$1=HEAP32[(($ld$38$1)>>2)];
 var $i_01_i1_i=0;label=23;break;
 case 23: 
 var $i_01_i1_i;
 var $117=(($1+8+((($i_01_i1_i)*(288))&-1)+280)|0);
 var $ld$39$0=(($117)|0);
 var $118$0=HEAP32[(($ld$39$0)>>2)];
 var $ld$40$1=(($117+4)|0);
 var $118$1=HEAP32[(($ld$40$1)>>2)];
 var $$etemp$41$0=300;
 var $$etemp$41$1=0;
 var $119$0=_i64Add($118$0,$118$1,$$etemp$41$0,$$etemp$41$1);var $119$1=tempRet0;
 var $120=(($119$1>>>0) > ($115$1>>>0)) | (((($119$1>>>0) == ($115$1>>>0) & ($119$0>>>0) >  ($115$0>>>0))));
 if($120){label=24;break;}else{label=27;break;}
 case 24: 
 var $122=(($1+8+((($i_01_i1_i)*(288))&-1))|0);
 var $_03_i36=32;var $l_04_i35=$122;var $r_05_i34=$5;label=25;break;
 case 25: 
 var $r_05_i34;
 var $l_04_i35;
 var $_03_i36;
 var $123=HEAP8[($l_04_i35)];
 var $124=HEAP8[($r_05_i34)];
 var $125=(($123<<24)>>24)==(($124<<24)>>24);
 if($125){label=26;break;}else{label=27;break;}
 case 26: 
 var $127=((($_03_i36)-(1))|0);
 var $128=(($l_04_i35+1)|0);
 var $129=(($r_05_i34+1)|0);
 var $130=($127|0)==0;
 if($130){var $index_0=$i_01_i1_i;label=33;break;}else{var $_03_i36=$127;var $l_04_i35=$128;var $r_05_i34=$129;label=25;break;}
 case 27: 
 var $131=((($i_01_i1_i)+(1))|0);
 var $132=($131>>>0)<48;
 if($132){var $i_01_i1_i=$131;label=23;break;}else{var $index_0=-1;label=33;break;}
 case 28: 
 var $i_01_i;
 var $133=(($1+8+((($i_01_i)*(288))&-1)+280)|0);
 var $ld$42$0=(($133)|0);
 var $134$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=(($133+4)|0);
 var $134$1=HEAP32[(($ld$43$1)>>2)];
 var $$etemp$44$0=300;
 var $$etemp$44$1=0;
 var $135$0=_i64Add($134$0,$134$1,$$etemp$44$0,$$etemp$44$1);var $135$1=tempRet0;
 var $136=(($135$1>>>0) > ($27$1>>>0)) | (((($135$1>>>0) == ($27$1>>>0) & ($135$0>>>0) >  ($27$0>>>0))));
 if($136){label=29;break;}else{label=32;break;}
 case 29: 
 var $138=(($1+8+((($i_01_i)*(288))&-1))|0);
 var $_03_i31=32;var $l_04_i30=$138;var $r_05_i29=$44;label=30;break;
 case 30: 
 var $r_05_i29;
 var $l_04_i30;
 var $_03_i31;
 var $139=HEAP8[($l_04_i30)];
 var $140=HEAP8[($r_05_i29)];
 var $141=(($139<<24)>>24)==(($140<<24)>>24);
 if($141){label=31;break;}else{label=32;break;}
 case 31: 
 var $143=((($_03_i31)-(1))|0);
 var $144=(($l_04_i30+1)|0);
 var $145=(($r_05_i29+1)|0);
 var $146=($143|0)==0;
 if($146){var $index_0=$i_01_i;label=33;break;}else{var $_03_i31=$143;var $l_04_i30=$144;var $r_05_i29=$145;label=30;break;}
 case 32: 
 var $147=((($i_01_i)+(1))|0);
 var $148=($147>>>0)<48;
 if($148){var $i_01_i=$147;label=28;break;}else{var $index_0=-1;label=33;break;}
 case 33: 
 var $index_0;
 var $149=(($nodes_list)|0);
 var $$etemp$45$0=448;
 var $$etemp$45$1=0;

 var $150=HEAP32[(($9)>>2)];
 var $151=(($nodes_list)|0);
 var $152=(($source)|0);
 var $153=HEAP8[($tmp2)];
 var $154=($153&255);
 var $155=_LAN_ip($152);
 var $156=($155|0)==0;
 var $157=($156&1);
 _memset($149, 0, 448)|0;
 var $158=$num_nodes_i_i;
 var $$etemp$46$0=4;
 var $$etemp$46$1=0;

 HEAP32[(($num_nodes_i_i)>>2)]=0;
 var $159=(($150+8)|0);
 _get_close_nodes_inner($150,$44,$151,$154,$159,32,$num_nodes_i_i,$157,1);
 var $160=(($150+14968)|0);
 var $161=HEAP16[(($160)>>1)];
 var $162=(($161<<16)>>16)==0;
 if($162){label=36;break;}else{label=34;break;}
 case 34: 
 var $163=(($150+14964)|0);
 var $i_01_i_i28=0;label=35;break;
 case 35: 
 var $i_01_i_i28;
 var $165=HEAP32[(($163)>>2)];
 var $166=(($165+((($i_01_i_i28)*(3808))&-1)+32)|0);
 _get_close_nodes_inner($150,$44,$151,$154,$166,8,$num_nodes_i_i,$157,0);
 var $167=((($i_01_i_i28)+(1))|0);
 var $168=HEAP16[(($160)>>1)];
 var $169=($168&65535);
 var $170=($167>>>0)<($169>>>0);
 if($170){var $i_01_i_i28=$167;label=35;break;}else{label=36;break;}
 case 36: 
 var $171=HEAP32[(($num_nodes_i_i)>>2)];
 var $$etemp$47$0=4;
 var $$etemp$47$1=0;

 var $172=($171|0)==0;
 if($172){label=41;break;}else{var $i_011=0;label=37;break;}
 case 37: 
 var $i_011;
 var $173=(($nodes_list+((($i_011)*(56))&-1)+33)|0);
 HEAP8[($173)]=0;
 var $174=(($nodes_list+((($i_011)*(56))&-1)+34)|0);
 HEAP8[($174)]=0;
 var $175=(($nodes_list+((($i_011)*(56))&-1)+35)|0);
 HEAP8[($175)]=0;
 var $176=(($nodes_list+((($i_011)*(56))&-1)+32)|0);
 var $177=HEAP8[($176)];
 if((($177<<24)>>24)==2){ label=38;break;}else if((($177<<24)>>24)==10){ label=39;break;}else{label=40;break;}
 case 38: 
 HEAP8[($176)]=2;
 label=40;break;
 case 39: 
 HEAP8[($176)]=10;
 label=40;break;
 case 40: 
 var $180=((($i_011)+(1))|0);
 var $181=($180>>>0)<($171>>>0);
 if($181){var $i_011=$180;label=37;break;}else{label=41;break;}
 case 41: 
 var $182=(($nonce)|0);
 var $$etemp$48$0=24;
 var $$etemp$48$1=0;
 _randombytes($182,$$etemp$48$0,$$etemp$48$1);
 var $183=(($pl)|0);
 var $$etemp$49$0=481;
 var $$etemp$49$1=0;

 var $184=($index_0|0)==-1;
 if($184){label=42;break;}else{label=43;break;}
 case 42: 
 HEAP8[($183)]=0;
 var $186=(($pl+1)|0);
 assert(32 % 1 === 0);(_memcpy($186, $42, 32)|0);
 label=52;break;
 case 43: 
 var $188=(($object+8)|0);
 var $189=$188;
 var $190=(($189+((($index_0)*(288))&-1))|0);
 var $_03_i19=32;var $l_04_i18=$190;var $r_05_i17=$5;label=44;break;
 case 44: 
 var $r_05_i17;
 var $l_04_i18;
 var $_03_i19;
 var $191=HEAP8[($l_04_i18)];
 var $192=HEAP8[($r_05_i17)];
 var $193=(($191<<24)>>24)==(($192<<24)>>24);
 if($193){label=45;break;}else{label=46;break;}
 case 45: 
 var $195=((($_03_i19)-(1))|0);
 var $196=(($l_04_i18+1)|0);
 var $197=(($r_05_i17+1)|0);
 var $198=($195|0)==0;
 if($198){label=47;break;}else{var $_03_i19=$195;var $l_04_i18=$196;var $r_05_i17=$197;label=44;break;}
 case 46: 
 var $199=(($189+((($index_0)*(288))&-1)+248)|0);
 var $211=$199;label=51;break;
 case 47: 
 var $201=(($189+((($index_0)*(288))&-1)+248)|0);
 var $_03_i14=32;var $l_04_i13=$201;var $r_05_i12=$45;label=48;break;
 case 48: 
 var $r_05_i12;
 var $l_04_i13;
 var $_03_i14;
 var $202=HEAP8[($l_04_i13)];
 var $203=HEAP8[($r_05_i12)];
 var $204=(($202<<24)>>24)==(($203<<24)>>24);
 if($204){label=49;break;}else{label=50;break;}
 case 49: 
 var $206=((($_03_i14)-(1))|0);
 var $207=(($l_04_i13+1)|0);
 var $208=(($r_05_i12+1)|0);
 var $209=($206|0)==0;
 if($209){var $211=$201;label=51;break;}else{var $_03_i14=$206;var $l_04_i13=$207;var $r_05_i12=$208;label=48;break;}
 case 50: 
 HEAP8[($183)]=0;
 var $210=(($pl+1)|0);
 assert(32 % 1 === 0);(_memcpy($210, $42, 32)|0);
 label=52;break;
 case 51: 
 var $211;
 HEAP8[($183)]=1;
 var $212=(($pl+1)|0);
 assert(32 % 1 === 0);(_memcpy($212, $211, 32)|0);
 label=52;break;
 case 52: 
 var $214=(($pl+33)|0);
 var $215=((($171)*(56))&-1);
 assert($215 % 1 === 0);(_memcpy($214, $149, $215)|0);
 var $216=(($data)|0);
 var $$etemp$50$0=630;
 var $$etemp$50$1=0;

 var $217=((($215)+(33))|0);
 var $218=(($data+133)|0);
 var $219=_encrypt_data_fast($8,$182,$183,$217,$218);
 var $220=((($215)+(49))|0);
 var $221=($219|0)==($220|0);
 if($221){label=53;break;}else{var $_2=1;label=54;break;}
 case 53: 
 var $223=(($data+109)|0);
 var $224=(($data+1)|0);
 HEAP8[($216)]=-124;
 var $225=(($plain+96)|0);
 assert(108 % 1 === 0);(_memcpy($224, $225, 108)|0);
 assert(24 % 1 === 0);(_memcpy($223, $182, 24)|0);
 var $226=(($object+4)|0);
 var $227=$226;
 var $228=HEAP32[(($227)>>2)];
 var $229=((($219)+(133))|0);
 var $230=(($packet+277)|0);
 var $231=_send_onion_response($228,$source,$216,$229,$230);
 var $232=($231|0)==-1;
 var $_=($232&1);
 var $_2=$_;label=54;break;
 case 54: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_data_request($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$object;
 var $length_off=((($length)-(298))|0);
 var $2=($length_off>>>0)>725;
 if($2){var $_1=1;label=10;break;}else{label=2;break;}
 case 2: 
 var $ld$0$0=13552;
 var $3$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=13556;
 var $3$1=HEAP32[(($ld$1$1)>>2)];
 var $i_01_i=0;label=3;break;
 case 3: 
 var $i_01_i;
 var $5=(($1+8+((($i_01_i)*(288))&-1)+280)|0);
 var $ld$2$0=(($5)|0);
 var $6$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($5+4)|0);
 var $6$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=300;
 var $$etemp$4$1=0;
 var $7$0=_i64Add($6$0,$6$1,$$etemp$4$0,$$etemp$4$1);var $7$1=tempRet0;
 var $8=(($7$1>>>0) > ($3$1>>>0)) | (((($7$1>>>0) == ($3$1>>>0) & ($7$0>>>0) >  ($3$0>>>0))));
 if($8){label=4;break;}else{label=7;break;}
 case 4: 
 var $10=(($1+8+((($i_01_i)*(288))&-1))|0);
 var $_03_i=32;var $l_04_i=$10;var $r_05_i_pn=$packet;label=5;break;
 case 5: 
 var $r_05_i_pn;
 var $l_04_i;
 var $_03_i;
 var $r_05_i=(($r_05_i_pn+1)|0);
 var $11=HEAP8[($l_04_i)];
 var $12=HEAP8[($r_05_i)];
 var $13=(($11<<24)>>24)==(($12<<24)>>24);
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 var $15=((($_03_i)-(1))|0);
 var $16=(($l_04_i+1)|0);
 var $17=($15|0)==0;
 if($17){label=8;break;}else{var $_03_i=$15;var $l_04_i=$16;var $r_05_i_pn=$r_05_i;label=5;break;}
 case 7: 
 var $18=((($i_01_i)+(1))|0);
 var $19=($18>>>0)<48;
 if($19){var $i_01_i=$18;label=3;break;}else{var $_1=1;label=10;break;}
 case 8: 
 var $20=($i_01_i|0)==-1;
 if($20){var $_1=1;label=10;break;}else{label=9;break;}
 case 9: 
 var $22=((($length)-(224))|0);
 var $23=_llvm_stacksave();
 var $24=STACKTOP;STACKTOP = (STACKTOP + $22)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 HEAP8[($24)]=-122;
 var $25=(($24+1)|0);
 var $26=(($packet+33)|0);
 var $27=((($length)-(225))|0);
 assert($27 % 1 === 0);(_memcpy($25, $26, $27)|0);
 var $28=(($object+4)|0);
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($object+8)|0);
 var $32=$31;
 var $33=(($32+((($i_01_i)*(288))&-1)+32)|0);
 var $34=(($32+((($i_01_i)*(288))&-1)+56)|0);
 var $35=_send_onion_response($30,$33,$24,$22,$34);
 var $36=($35|0)==-1;
 var $_=($36&1);
 _llvm_stackrestore($23);
 var $_1=$_;label=10;break;
 case 10: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _cmp_entry($a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+576)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $entry1=sp;
 var $entry2=(sp)+(288);
 var $1=(($entry1)|0);
 var $$etemp$0$0=288;
 var $$etemp$0$1=0;

 var $2=(($entry2)|0);
 var $$etemp$1$0=288;
 var $$etemp$1$1=0;

 assert(288 % 1 === 0);(_memcpy($1, $a, 288)|0);
 assert(288 % 1 === 0);(_memcpy($2, $b, 288)|0);
 var $3=(($entry1+280)|0);
 var $ld$2$0=(($3)|0);
 var $4$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $4$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=300;
 var $$etemp$4$1=0;
 var $5$0=_i64Add($4$0,$4$1,$$etemp$4$0,$$etemp$4$1);var $5$1=tempRet0;
 var $ld$5$0=13552;
 var $6$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=13556;
 var $6$1=HEAP32[(($ld$6$1)>>2)];
 var $7=(($5$1>>>0) <= ($6$1>>>0)) & (((($5$1>>>0) <  ($6$1>>>0)) | ($5$0>>>0) <= ($6$0>>>0)));
 var $8=(($entry2+280)|0);
 var $ld$7$0=(($8)|0);
 var $9$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$8$1)>>2)];
 var $$etemp$9$0=300;
 var $$etemp$9$1=0;
 var $10$0=_i64Add($9$0,$9$1,$$etemp$9$0,$$etemp$9$1);var $10$1=tempRet0;
 var $11=(($10$1>>>0) <= ($6$1>>>0)) & (((($10$1>>>0) <  ($6$1>>>0)) | ($10$0>>>0) <= ($6$0>>>0)));
 var $not_or_cond_not_demorgan=$11&$7;
 var $not_or_cond_not=$not_or_cond_not_demorgan^1;
 var $_mux=(($not_or_cond_not<<31)>>31);
 var $brmerge2=$7|$11;
 var $_mux_mux=($7?$_mux:1);
 if($brmerge2){var $_0=$_mux_mux;label=5;break;}else{var $i_03_i=0;label=3;break;}
 case 2: 
 var $13=($27>>>0)<32;
 if($13){var $i_03_i=$27;label=3;break;}else{var $_0=0;label=5;break;}
 case 3: 
 var $i_03_i;
 var $14=((14960+$i_03_i)|0);
 var $15=HEAP8[($14)];
 var $16=(($entry1+$i_03_i)|0);
 var $17=HEAP8[($16)];
 var $18=$17^$15;
 var $ispos_i=(($18<<24)>>24)>-1;
 var $neg_i=(((-$18))&255);
 var $19=($ispos_i?$18:$neg_i);
 var $20=(($entry2+$i_03_i)|0);
 var $21=HEAP8[($20)];
 var $22=$21^$15;
 var $ispos1_i=(($22<<24)>>24)>-1;
 var $neg2_i=(((-$22))&255);
 var $23=($ispos1_i?$22:$neg2_i);
 var $24=($19&255)<($23&255);
 if($24){var $_0=1;label=5;break;}else{label=4;break;}
 case 4: 
 var $26=($19&255)>($23&255);
 var $27=((($i_03_i)+(1))|0);
 if($26){var $_0=-1;label=5;break;}else{label=2;break;}
 case 5: 
 var $_0;
 var $$etemp$10$0=288;
 var $$etemp$10$1=0;

 var $$etemp$11$0=288;
 var $$etemp$11$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_onion_data($onion_c,$friend_num,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2168)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce=sp;
 var $good_nodes=(sp)+(24);
 var $path=(sp)+(56);
 var $1=(($onion_c+12)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=($3>>>0)>($friend_num>>>0);
 if($4){label=2;break;}else{var $_2=-1;label=15;break;}
 case 2: 
 var $6=((($length)+(48))|0);
 var $7=((($length)+(361))|0);
 var $8=($7>>>0)>1024;
 var $9=($length|0)==0;
 var $or_cond=$8|$9;
 if($or_cond){var $_2=-1;label=15;break;}else{label=3;break;}
 case 3: 
 var $11=(($nonce)|0);
 var $$etemp$0$0=24;
 var $$etemp$0$1=0;
 _randombytes($11,$$etemp$0$0,$$etemp$0$1);
 var $12=_llvm_stacksave();
 var $13=STACKTOP;STACKTOP = (STACKTOP + $6)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $14=(($onion_c)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($15)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+12)|0);
 assert(32 % 1 === 0);(_memcpy($13, $18, 32)|0);
 var $19=(($onion_c+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=(($20+((($friend_num)*(2600))&-1)+35)|0);
 var $22=(($17+44)|0);
 var $23=(($13+32)|0);
 var $24=_encrypt_data($21,$22,$11,$data,$length,$23);
 var $25=((($length)+(16))|0);
 var $26=($24|0)==($25|0);
 if($26){label=4;break;}else{var $_1=-1;label=14;break;}
 case 4: 
 var $28=(($path)|0);
 var $$etemp$1$0=2112;
 var $$etemp$1$1=0;

 var $29=HEAP32[(($19)>>2)];
 var $i_03=0;var $num_good_04=0;var $num_nodes_05=0;label=5;break;
 case 5: 
 var $num_nodes_05;
 var $num_good_04;
 var $i_03;
 var $30=(($29+((($friend_num)*(2600))&-1)+72+((($i_03)*(152))&-1)+128)|0);
 var $ld$2$0=(($30)|0);
 var $31$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=120;
 var $$etemp$4$1=0;
 var $32$0=_i64Add($31$0,$31$1,$$etemp$4$0,$$etemp$4$1);var $32$1=tempRet0;
 var $ld$5$0=13552;
 var $33$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=13556;
 var $33$1=HEAP32[(($ld$6$1)>>2)];
 var $34=(($32$1>>>0) > ($33$1>>>0)) | (((($32$1>>>0) == ($33$1>>>0) & ($32$0>>>0) >  ($33$0>>>0))));
 if($34){label=6;break;}else{var $num_nodes_1=$num_nodes_05;var $num_good_1=$num_good_04;label=9;break;}
 case 6: 
 var $36=((($num_nodes_05)+(1))|0);
 var $37=(($29+((($friend_num)*(2600))&-1)+72+((($i_03)*(152))&-1)+120)|0);
 var $38=HEAP8[($37)];
 var $39=(($38<<24)>>24)==0;
 if($39){var $num_nodes_1=$36;var $num_good_1=$num_good_04;label=9;break;}else{label=7;break;}
 case 7: 
 var $41=HEAP32[(($14)>>2)];
 var $42=HEAP32[(($19)>>2)];
 var $43=(($42+((($friend_num)*(2600))&-1)+1384)|0);
 var $44=(($path+((($num_good_04)*(264))&-1))|0);
 var $45=_random_path($41,$43,-1,$44);
 var $46=($45|0)==-1;
 if($46){var $num_nodes_1=$36;var $num_good_1=$num_good_04;label=9;break;}else{label=8;break;}
 case 8: 
 var $48=(($good_nodes+($num_good_04<<2))|0);
 HEAP32[(($48)>>2)]=$i_03;
 var $49=((($num_good_04)+(1))|0);
 var $num_nodes_1=$36;var $num_good_1=$49;label=9;break;
 case 9: 
 var $num_good_1;
 var $num_nodes_1;
 var $51=((($i_03)+(1))|0);
 var $52=($51>>>0)<8;
 if($52){var $i_03=$51;var $num_good_04=$num_good_1;var $num_nodes_05=$num_nodes_1;label=5;break;}else{label=10;break;}
 case 10: 
 var $54=$num_nodes_1>>>2;
 var $55=((($54)+(1))|0);
 var $56=($num_good_1>>>0)<($55>>>0);
 if($56){var $_1=-1;label=14;break;}else{label=11;break;}
 case 11: 
 var $57=($num_good_1|0)==0;
 if($57){var $_1=0;label=14;break;}else{label=12;break;}
 case 12: 
 var $58=(($onion_c+4)|0);
 var $59=(($6)&65535);
 var $i_11=0;var $good_02=0;label=13;break;
 case 13: 
 var $good_02;
 var $i_11;
 var $60=HEAP32[(($58)>>2)];
 var $61=(($path+((($i_11)*(264))&-1))|0);
 var $62=(($good_nodes+($i_11<<2))|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($29+((($friend_num)*(2600))&-1)+72+((($63)*(152))&-1)+32)|0);
 var $65=HEAP32[(($19)>>2)];
 var $66=(($65+((($friend_num)*(2600))&-1)+35)|0);
 var $67=(($29+((($friend_num)*(2600))&-1)+72+((($63)*(152))&-1)+88)|0);
 var $68=_send_data_request($60,$61,$64,$66,$67,$11,$13,$59);
 var $69=($68|0)==0;
 var $70=($69&1);
 var $_good_0=((($70)+($good_02))|0);
 var $71=((($i_11)+(1))|0);
 var $72=($71>>>0)<($num_good_1>>>0);
 if($72){var $i_11=$71;var $good_02=$_good_0;label=13;break;}else{var $_1=$_good_0;label=14;break;}
 case 14: 
 var $_1;
 _llvm_stackrestore($12);
 var $_2=$_1;label=15;break;
 case 15: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _random_path($dht,$onion_paths,$pathnum,$path){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+392)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(64);
 var $s_i_i_i_i=(sp)+(128);
 var $random_public_key_i=(sp)+(160);
 var $random_secret_key_i=(sp)+(192);
 var $nodes=(sp)+(224);
 var $3=($pathnum>>>0)>2;
 if($3){label=2;break;}else{var $_02=$pathnum;label=3;break;}
 case 2: 
 var $5=_rand();
 var $6=(((($5|0))%(3))&-1);
 var $_02=$6;label=3;break;
 case 3: 
 var $_02;
 var $8=(($onion_paths+792+($_02<<3))|0);
 var $ld$0$0=(($8)|0);
 var $9$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=30;
 var $$etemp$2$1=0;
 var $10$0=_i64Add($9$0,$9$1,$$etemp$2$0,$$etemp$2$1);var $10$1=tempRet0;
 var $ld$3$0=13552;
 var $11$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $11$1=HEAP32[(($ld$4$1)>>2)];
 var $12=(($10$1>>>0) > ($11$1>>>0)) | (((($10$1>>>0) == ($11$1>>>0) & ($10$0>>>0) >  ($11$0>>>0))));
 if($12){label=4;break;}else{label=5;break;}
 case 4: 
 var $14=(($onion_paths+816+($_02<<3))|0);
 var $ld$5$0=(($14)|0);
 var $15$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=(($14+4)|0);
 var $15$1=HEAP32[(($ld$6$1)>>2)];
 var $$etemp$7$0=600;
 var $$etemp$7$1=0;
 var $16$0=_i64Add($15$0,$15$1,$$etemp$7$0,$$etemp$7$1);var $16$1=tempRet0;
 var $17=(($16$1>>>0) > ($11$1>>>0)) | (((($16$1>>>0) == ($11$1>>>0) & ($16$0>>>0) >  ($11$0>>>0))));
 if($17){label=34;break;}else{label=5;break;}
 case 5: 
 var $19=(($nodes)|0);
 var $$etemp$8$0=168;
 var $$etemp$8$1=0;

 var $20=(($dht+14968)|0);
 var $21=HEAP16[(($20)>>1)];
 var $22=(($21<<16)>>16)==0;
 if($22){var $_1=-1;label=35;break;}else{label=6;break;}
 case 6: 
 var $23=(($dht+14964)|0);
 var $24=$1;
 var $25=$2;
 var $26=(($nodes+32)|0);
 var $count_01_i=0;var $i_02_i=0;label=7;break;
 case 7: 
 var $i_02_i;
 var $count_01_i;
 var $28=_rand();
 var $29=HEAP16[(($20)>>1)];
 var $30=($29&65535);
 var $31=(((($28|0))%(($30|0)))&-1);
 var $32=$31&65535;
 var $33=HEAP32[(($23)>>2)];
 var $34=($count_01_i&65535);
 var $35=(($count_01_i<<16)>>16)==0;
 if($35){var $LAN_ok_0_i=0;label=9;break;}else{label=8;break;}
 case 8: 
 var $37=_LAN_ip($26);
 var $phitmp_i=($37|0)!=0;
 var $LAN_ok_0_i=$phitmp_i;label=9;break;
 case 9: 
 var $LAN_ok_0_i;
 var $$etemp$9$0=64;
 var $$etemp$9$1=0;

 var $$etemp$10$0=64;
 var $$etemp$10$1=0;

 var $ld$11$0=13552;
 var $39$0=HEAP32[(($ld$11$0)>>2)];
 var $ld$12$1=13556;
 var $39$1=HEAP32[(($ld$12$1)>>2)];
 var $num_nodes_05_i_i=0;var $i_06_i_i=0;label=10;break;
 case 10: 
 var $i_06_i_i;
 var $num_nodes_05_i_i;
 var $41=(($33+((($32)*(3808))&-1)+32+((($i_06_i_i)*(464))&-1))|0);
 var $42=(($33+((($32)*(3808))&-1)+32+((($i_06_i_i)*(464))&-1)+248)|0);
 var $43=(($33+((($32)*(3808))&-1)+32+((($i_06_i_i)*(464))&-1)+32)|0);
 var $44=(($33+((($32)*(3808))&-1)+32+((($i_06_i_i)*(464))&-1)+272)|0);
 var $ld$13$0=(($44)|0);
 var $45$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($44+4)|0);
 var $45$1=HEAP32[(($ld$14$1)>>2)];
 var $$etemp$15$0=122;
 var $$etemp$15$1=0;
 var $46$0=_i64Add($45$0,$45$1,$$etemp$15$0,$$etemp$15$1);var $46$1=tempRet0;
 var $47=(($46$1>>>0) <= ($39$1>>>0)) & (((($46$1>>>0) <  ($39$1>>>0)) | ($46$0>>>0) <= ($39$0>>>0)));
 if($LAN_ok_0_i){label=12;break;}else{label=11;break;}
 case 11: 
 if($47){var $num_nodes_2_i_i=$num_nodes_05_i_i;label=17;break;}else{label=16;break;}
 case 12: 
 if($47){var $num_nodes_2_us_i_i=$num_nodes_05_i_i;label=15;break;}else{label=13;break;}
 case 13: 
 var $49=(($42)|0);
 var $50=_LAN_ip($49);
 var $51=($50|0)==0;
 if($51){var $num_nodes_2_us_i_i=$num_nodes_05_i_i;label=15;break;}else{label=14;break;}
 case 14: 
 var $53=(($1+($num_nodes_05_i_i<<2))|0);
 HEAP32[(($53)>>2)]=$41;
 var $54=(($2+($num_nodes_05_i_i<<2))|0);
 HEAP32[(($54)>>2)]=$42;
 var $55=((($num_nodes_05_i_i)+(1))|0);
 var $num_nodes_2_us_i_i=$55;label=15;break;
 case 15: 
 var $num_nodes_2_us_i_i;
 var $57=(($33+((($32)*(3808))&-1)+32+((($i_06_i_i)*(464))&-1)+56)|0);
 var $ld$16$0=(($57)|0);
 var $58$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($57+4)|0);
 var $58$1=HEAP32[(($ld$17$1)>>2)];
 var $$etemp$18$0=122;
 var $$etemp$18$1=0;
 var $59$0=_i64Add($58$0,$58$1,$$etemp$18$0,$$etemp$18$1);var $59$1=tempRet0;
 var $60=(($59$1>>>0) > ($39$1>>>0)) | (((($59$1>>>0) == ($39$1>>>0) & ($59$0>>>0) >  ($39$0>>>0))));
 if($60){label=22;break;}else{var $num_nodes_1_lcssa_i_i=$num_nodes_2_us_i_i;label=18;break;}
 case 16: 
 var $62=(($1+($num_nodes_05_i_i<<2))|0);
 HEAP32[(($62)>>2)]=$41;
 var $63=(($2+($num_nodes_05_i_i<<2))|0);
 HEAP32[(($63)>>2)]=$42;
 var $64=((($num_nodes_05_i_i)+(1))|0);
 var $num_nodes_2_i_i=$64;label=17;break;
 case 17: 
 var $num_nodes_2_i_i;
 var $66=(($33+((($32)*(3808))&-1)+32+((($i_06_i_i)*(464))&-1)+56)|0);
 var $ld$19$0=(($66)|0);
 var $67$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($66+4)|0);
 var $67$1=HEAP32[(($ld$20$1)>>2)];
 var $$etemp$21$0=122;
 var $$etemp$21$1=0;
 var $68$0=_i64Add($67$0,$67$1,$$etemp$21$0,$$etemp$21$1);var $68$1=tempRet0;
 var $69=(($68$1>>>0) > ($39$1>>>0)) | (((($68$1>>>0) == ($39$1>>>0) & ($68$0>>>0) >  ($39$0>>>0))));
 if($69){label=21;break;}else{var $num_nodes_1_lcssa_i_i=$num_nodes_2_i_i;label=18;break;}
 case 18: 
 var $num_nodes_1_lcssa_i_i;
 var $70=((($i_06_i_i)+(1))|0);
 var $71=($70>>>0)<8;
 if($71){var $num_nodes_05_i_i=$num_nodes_1_lcssa_i_i;var $i_06_i_i=$70;label=10;break;}else{label=19;break;}
 case 19: 
 var $73=($num_nodes_1_lcssa_i_i|0)==0;
 if($73){var $_0_i_i=0;label=24;break;}else{label=20;break;}
 case 20: 
 var $75=_rand();
 var $76=(((($75>>>0))%(($num_nodes_1_lcssa_i_i>>>0)))&-1);
 var $77=(($2+($76<<2))|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=(($nodes+((($34)*(56))&-1)+32)|0);
 var $80=(($78)|0);
 assert(24 % 1 === 0);(_memcpy($79, $80, 24)|0);
 var $81=(($nodes+((($34)*(56))&-1))|0);
 var $82=(($1+($76<<2))|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(($83)|0);
 assert(32 % 1 === 0);(_memcpy($81, $84, 32)|0);
 var $_0_i_i=1;label=24;break;
 case 21: 
 var $86=(($1+($num_nodes_2_i_i<<2))|0);
 HEAP32[(($86)>>2)]=$41;
 var $87=(($2+($num_nodes_2_i_i<<2))|0);
 HEAP32[(($87)>>2)]=$43;
 var $88=((($num_nodes_2_i_i)+(1))|0);
 var $num_nodes_1_lcssa_i_i=$88;label=18;break;
 case 22: 
 var $90=(($43)|0);
 var $91=_LAN_ip($90);
 var $92=($91|0)==0;
 if($92){var $num_nodes_1_lcssa_i_i=$num_nodes_2_us_i_i;label=18;break;}else{label=23;break;}
 case 23: 
 var $94=(($1+($num_nodes_2_us_i_i<<2))|0);
 HEAP32[(($94)>>2)]=$41;
 var $95=(($2+($num_nodes_2_us_i_i<<2))|0);
 HEAP32[(($95)>>2)]=$43;
 var $96=((($num_nodes_2_us_i_i)+(1))|0);
 var $num_nodes_1_lcssa_i_i=$96;label=18;break;
 case 24: 
 var $_0_i_i;
 var $$etemp$22$0=64;
 var $$etemp$22$1=0;

 var $$etemp$23$0=64;
 var $$etemp$23$1=0;

 var $_count_0_i=((($_0_i_i)+($count_01_i))&65535);
 var $97=((($i_02_i)+(1))|0);
 var $98=($97>>>0)<3;
 if($98){var $count_01_i=$_count_0_i;var $i_02_i=$97;label=7;break;}else{label=25;break;}
 case 25: 
 var $99=(($_count_0_i<<16)>>16)==3;
 if($99){label=26;break;}else{var $_1=-1;label=35;break;}
 case 26: 
 var $101=(($onion_paths+((($_02)*(264))&-1))|0);
 var $102=(($random_public_key_i)|0);
 var $$etemp$24$0=32;
 var $$etemp$24$1=0;

 var $103=(($random_secret_key_i)|0);
 var $$etemp$25$0=32;
 var $$etemp$25$1=0;

 var $104=($101|0)==0;
 if($104){var $_1=-1;label=35;break;}else{label=27;break;}
 case 27: 
 var $106=(($dht+14932)|0);
 var $107=(($101)|0);
 var $108=(($s_i_i_i_i)|0);
 var $$etemp$26$0=32;
 var $$etemp$26$1=0;

 _crypto_scalarmult_curve25519_ref($108,$106,$19);
 _crypto_core_hsalsa20($107,14752,$108,104);
 var $$etemp$27$0=32;
 var $$etemp$27$1=0;

 var $109=(($onion_paths+((($_02)*(264))&-1)+96)|0);
 var $110=(($dht+14900)|0);
 assert(32 % 1 === 0);(_memcpy($109, $110, 32)|0);
 var $$etemp$28$0=32;
 var $$etemp$28$1=0;
 _randombytes($103,$$etemp$28$0,$$etemp$28$1);
 _crypto_scalarmult_curve25519_ref($102,$103,440);
 var $111=(($nodes+56)|0);
 var $112=(($onion_paths+((($_02)*(264))&-1)+32)|0);
 var $$etemp$29$0=32;
 var $$etemp$29$1=0;

 _crypto_scalarmult_curve25519_ref($108,$103,$111);
 _crypto_core_hsalsa20($112,14752,$108,104);
 var $$etemp$30$0=32;
 var $$etemp$30$1=0;

 var $113=(($onion_paths+((($_02)*(264))&-1)+128)|0);
 assert(32 % 1 === 0);(_memcpy($113, $102, 32)|0);
 var $$etemp$31$0=32;
 var $$etemp$31$1=0;
 _randombytes($103,$$etemp$31$0,$$etemp$31$1);
 _crypto_scalarmult_curve25519_ref($102,$103,440);
 var $114=(($nodes+112)|0);
 var $115=(($onion_paths+((($_02)*(264))&-1)+64)|0);
 var $$etemp$32$0=32;
 var $$etemp$32$1=0;

 _crypto_scalarmult_curve25519_ref($108,$103,$114);
 _crypto_core_hsalsa20($115,14752,$108,104);
 var $$etemp$33$0=32;
 var $$etemp$33$1=0;

 var $116=(($onion_paths+((($_02)*(264))&-1)+160)|0);
 assert(32 % 1 === 0);(_memcpy($116, $102, 32)|0);
 var $117=(($onion_paths+((($_02)*(264))&-1)+192)|0);
 var $118=(($nodes+32)|0);
 assert(24 % 1 === 0);(_memcpy($117, $118, 24)|0);
 var $119=(($onion_paths+((($_02)*(264))&-1)+216)|0);
 var $120=(($nodes+88)|0);
 assert(24 % 1 === 0);(_memcpy($119, $120, 24)|0);
 var $121=(($onion_paths+((($_02)*(264))&-1)+240)|0);
 var $122=(($nodes+144)|0);
 assert(24 % 1 === 0);(_memcpy($121, $122, 24)|0);
 var $123=(($onion_paths+((($_02)*(264))&-1)+217)|0);
 HEAP8[($123)]=0;
 var $124=(($onion_paths+((($_02)*(264))&-1)+218)|0);
 HEAP8[($124)]=0;
 var $125=(($onion_paths+((($_02)*(264))&-1)+219)|0);
 HEAP8[($125)]=0;
 var $126=HEAP8[($119)];
 if((($126<<24)>>24)==2){ label=28;break;}else if((($126<<24)>>24)==10){ label=29;break;}else{label=30;break;}
 case 28: 
 HEAP8[($119)]=2;
 label=30;break;
 case 29: 
 HEAP8[($119)]=10;
 label=30;break;
 case 30: 
 var $129=(($onion_paths+((($_02)*(264))&-1)+241)|0);
 HEAP8[($129)]=0;
 var $130=(($onion_paths+((($_02)*(264))&-1)+242)|0);
 HEAP8[($130)]=0;
 var $131=(($onion_paths+((($_02)*(264))&-1)+243)|0);
 HEAP8[($131)]=0;
 var $132=HEAP8[($121)];
 if((($132<<24)>>24)==2){ label=31;break;}else if((($132<<24)>>24)==10){ label=32;break;}else{label=33;break;}
 case 31: 
 HEAP8[($121)]=2;
 label=33;break;
 case 32: 
 HEAP8[($121)]=10;
 label=33;break;
 case 33: 
 var $$etemp$34$0=32;
 var $$etemp$34$1=0;

 var $$etemp$35$0=32;
 var $$etemp$35$1=0;

 var $ld$36$0=13552;
 var $135$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=13556;
 var $135$1=HEAP32[(($ld$37$1)>>2)];
 var $$etemp$38$0=-25;
 var $$etemp$38$1=-1;
 var $136$0=_i64Add($135$0,$135$1,$$etemp$38$0,$$etemp$38$1);var $136$1=tempRet0;
 var $st$39$0=(($8)|0);
 HEAP32[(($st$39$0)>>2)]=$136$0;
 var $st$40$1=(($8+4)|0);
 HEAP32[(($st$40$1)>>2)]=$136$1;
 var $137=(($onion_paths+816+($_02<<3))|0);
 var $st$41$0=(($137)|0);
 HEAP32[(($st$41$0)>>2)]=$135$0;
 var $st$42$1=(($137+4)|0);
 HEAP32[(($st$42$1)>>2)]=$135$1;
 var $$etemp$43$0=168;
 var $$etemp$43$1=0;

 label=34;break;
 case 34: 
 var $139=(($path)|0);
 var $140=(($onion_paths+((($_02)*(264))&-1))|0);
 assert(264 % 1 === 0);(_memcpy($139, $140, 264)|0);
 var $_1=0;label=35;break;
 case 35: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _onion_addfriend($onion_c,$client_id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($onion_c+12)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=(($2<<16)>>16)==0;
 var $_phi_trans_insert_phi_trans_insert_phi_trans_insert=(($onion_c+8)|0);
 var $_pre_pre_pre=HEAP32[(($_phi_trans_insert_phi_trans_insert_phi_trans_insert)>>2)];
 if($3){var $30=0;var $29=$_pre_pre_pre;label=12;break;}else{label=2;break;}
 case 2: 
 var $4=($2&65535);
 var $i_01_i=0;label=3;break;
 case 3: 
 var $i_01_i;
 var $6=(($_pre_pre_pre+((($i_01_i)*(2600))&-1))|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=7;break;}else{label=4;break;}
 case 4: 
 var $10=(($_pre_pre_pre+((($i_01_i)*(2600))&-1)+35)|0);
 var $_03_i=32;var $l_04_i=$client_id;var $r_05_i=$10;label=5;break;
 case 5: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $11=HEAP8[($l_04_i)];
 var $12=HEAP8[($r_05_i)];
 var $13=(($11<<24)>>24)==(($12<<24)>>24);
 if($13){label=6;break;}else{label=7;break;}
 case 6: 
 var $15=((($_03_i)-(1))|0);
 var $16=(($l_04_i+1)|0);
 var $17=(($r_05_i+1)|0);
 var $18=($15|0)==0;
 if($18){label=8;break;}else{var $_03_i=$15;var $l_04_i=$16;var $r_05_i=$17;label=5;break;}
 case 7: 
 var $19=((($i_01_i)+(1))|0);
 var $20=($19>>>0)<($4>>>0);
 if($20){var $i_01_i=$19;label=3;break;}else{var $i_03=0;label=10;break;}
 case 8: 
 var $21=($i_01_i|0)==-1;
 if($21){var $i_03=0;label=10;break;}else{var $_0=$i_01_i;label=15;break;}
 case 9: 
 var $22=($26>>>0)<($4>>>0);
 if($22){var $i_03=$26;label=10;break;}else{var $30=$2;var $29=$_pre_pre_pre;label=12;break;}
 case 10: 
 var $i_03;
 var $23=(($_pre_pre_pre+((($i_03)*(2600))&-1))|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24)==0;
 var $26=((($i_03)+(1))|0);
 if($25){label=11;break;}else{label=9;break;}
 case 11: 
 var $28=($i_03|0)==-1;
 if($28){var $30=$2;var $29=$_pre_pre_pre;label=12;break;}else{var $index_1=$i_03;var $45=$_pre_pre_pre;label=14;break;}
 case 12: 
 var $29;
 var $30;
 var $31=($30&65535);
 var $32=(($29)|0);
 var $33=((($31)*(2600))&-1);
 var $34=((($33)+(2600))|0);
 var $35=_realloc($32,$34);
 var $36=($35|0)==0;
 if($36){var $_0=-1;label=15;break;}else{label=13;break;}
 case 13: 
 var $38=(($onion_c+8)|0);
 var $39=$35;
 HEAP32[(($38)>>2)]=$39;
 var $40=HEAP16[(($1)>>1)];
 var $41=($40&65535);
 var $42=(($39+((($41)*(2600))&-1))|0);
 _memset($42, 0, 2600)|0;
 var $43=((($40)+(1))&65535);
 HEAP16[(($1)>>1)]=$43;
 var $index_1=$41;var $45=$39;label=14;break;
 case 14: 
 var $45;
 var $index_1;
 var $46=(($onion_c+8)|0);
 var $47=(($45+((($index_1)*(2600))&-1))|0);
 HEAP8[($47)]=1;
 var $48=HEAP32[(($46)>>2)];
 var $49=(($48+((($index_1)*(2600))&-1)+35)|0);
 assert(32 % 1 === 0);(_memcpy($49, $client_id, 32)|0);
 var $50=HEAP32[(($46)>>2)];
 var $51=(($50+((($index_1)*(2600))&-1)+1288)|0);
 var $52=(($50+((($index_1)*(2600))&-1)+1320)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;
 _randombytes($52,$$etemp$0$0,$$etemp$0$1);
 _crypto_scalarmult_curve25519_ref($51,$52,440);
 var $_0=$index_1;label=15;break;
 case 15: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_announce_response($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2864)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_i_i12=sp;
 var $s_i_i=(sp)+(32);
 var $temp_plain_i_i=(sp)+(64);
 var $temp_encrypted_i_i=(sp)+(1120);
 var $k_i=(sp)+(2160);
 var $source8=(sp)+(2192);
 var $source2_i=(sp)+(2216);
 var $source4=(sp)+(2240);
 var $ip_port2=(sp)+(2264);
 var $plain_i=(sp)+(2288);
 var $public_key=(sp)+(2360);
 var $ip_port=(sp)+(2392);
 var $nodes=(sp)+(2416);
 var $1=$object;
 var $length_off=((($length)-(182))|0);
 var $2=($length_off>>>0)<449;
 var $3=(((($length_off>>>0))%(56))&-1);
 var $4=($3|0)==0;
 var $or_cond=$2&$4;
 if($or_cond){label=2;break;}else{var $_2=1;label=103;break;}
 case 2: 
 var $6=(((($length_off>>>0))/(56))&-1);
 var $7=(($6)&65535);
 var $8=(($packet+1)|0);
 var $9=(($public_key)|0);
 var $10=(($plain_i)|0);
 var $$etemp$0$0=68;
 var $$etemp$0$1=0;

 var $11=(($object+2072)|0);
 var $12=(($packet+25)|0);
 var $13=_decrypt_data_symmetric($11,$8,$12,84,$10);
 var $14=($13|0)==68;
 if($14){label=3;break;}else{var $_2=1;label=103;break;}
 case 3: 
 var $16=(($plain_i+4)|0);
 var $17=$16;
 var $ld$1$0=(($17)|0);
 var $18$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$2$1)>>2)];
 var $ld$3$0=13552;
 var $19$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=13556;
 var $19$1=HEAP32[(($ld$4$1)>>2)];
 var $$etemp$5$0=10;
 var $$etemp$5$1=0;
 var $20$0=_i64Add($18$0,$18$1,$$etemp$5$0,$$etemp$5$1);var $20$1=tempRet0;
 var $21=(($20$1>>>0) < ($19$1>>>0)) | (((($20$1>>>0) == ($19$1>>>0) & ($20$0>>>0) <  ($19$0>>>0))));
 var $22=(($19$1>>>0) < ($18$1>>>0)) | (((($19$1>>>0) == ($18$1>>>0) & ($19$0>>>0) <  ($18$0>>>0))));
 var $or_cond_i=$21|$22;
 if($or_cond_i){var $_2=1;label=103;break;}else{label=4;break;}
 case 4: 
 var $23=(($plain_i+12)|0);
 assert(32 % 1 === 0);(_memcpy($9, $23, 32)|0);
 var $24=(($ip_port)|0);
 var $25=(($plain_i+44)|0);
 assert(24 % 1 === 0);(_memcpy($24, $25, 24)|0);
 var $26=$plain_i;
 var $27=HEAP32[(($26)>>2)];
 var $$etemp$6$0=68;
 var $$etemp$6$1=0;

 var $28=(($object+12)|0);
 var $29=$28;
 var $30=HEAP16[(($29)>>1)];
 var $31=($30&65535);
 var $32=($27>>>0)>($31>>>0);
 if($32){var $_2=1;label=103;break;}else{label=5;break;}
 case 5: 
 var $34=$6&65535;
 var $35=((($34)*(56))&-1);
 var $36=((($35)+(33))|0);
 var $37=_llvm_stacksave();
 var $38=STACKTOP;STACKTOP = (STACKTOP + $36)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $39=($27|0)==0;
 if($39){label=6;break;}else{label=11;break;}
 case 6: 
 var $41=$object;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+44)|0);
 var $46=(($k_i)|0);
 var $$etemp$7$0=32;
 var $$etemp$7$1=0;

 var $47=(($s_i_i12)|0);
 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 _crypto_scalarmult_curve25519_ref($47,$45,$9);
 _crypto_core_hsalsa20($46,14752,$47,104);
 var $$etemp$9$0=32;
 var $$etemp$9$1=0;

 var $length_off_i_i=((($length)-(150))|0);
 var $48=($length_off_i_i>>>0)>1007;
 if($48){var $len_0=-1;label=17;break;}else{label=7;break;}
 case 7: 
 var $50=((($length)-(133))|0);
 var $51=(($packet+133)|0);
 var $52=(($packet+109)|0);
 var $53=(($temp_plain_i_i)|0);
 var $$etemp$10$0=1056;
 var $$etemp$10$1=0;

 var $54=(($temp_encrypted_i_i)|0);
 var $$etemp$11$0=1040;
 var $$etemp$11$1=0;

 _memset($54, 0, 1040)|0;
 var $55=(($temp_encrypted_i_i+16)|0);
 assert($50 % 1 === 0);(_memcpy($55, $51, $50)|0);
 var $56=((($length)-(117))|0);
 var $57$0=$56;
 var $57$1=0;
 var $58=_crypto_secretbox_xsalsa20poly1305_open($53,$54,$57$0,$57$1,$52,$46);
 var $59=($58|0)==-1;
 if($59){var $len_0=-1;label=17;break;}else{var $check_01_i_i_i=0;var $i_02_i_i_i=0;label=8;break;}
 case 8: 
 var $i_02_i_i_i;
 var $check_01_i_i_i;
 var $60=(($temp_plain_i_i+$i_02_i_i_i)|0);
 var $61=HEAP8[($60)];
 var $62=$61|$check_01_i_i_i;
 var $63=((($i_02_i_i_i)+(1))|0);
 var $64=($63>>>0)<32;
 if($64){var $check_01_i_i_i=$62;var $i_02_i_i_i=$63;label=8;break;}else{label=9;break;}
 case 9: 
 var $65=(($62<<24)>>24)==0;
 if($65){label=10;break;}else{var $len_0=-1;label=17;break;}
 case 10: 
 var $67=(($temp_plain_i_i+32)|0);
 var $68=((($length)-(149))|0);
 assert($68 % 1 === 0);(_memcpy($38, $67, $68)|0);
 var $len_0=$68;label=17;break;
 case 11: 
 var $70=((($27)-(1))|0);
 var $71=(($object+8)|0);
 var $72=$71;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+((($70)*(2600))&-1))|0);
 var $75=HEAP8[($74)];
 var $76=(($75<<24)>>24)==0;
 if($76){var $_1=1;label=102;break;}else{label=12;break;}
 case 12: 
 var $78=(($73+((($70)*(2600))&-1)+1320)|0);
 var $79=(($k_i)|0);
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $80=(($s_i_i)|0);
 var $$etemp$13$0=32;
 var $$etemp$13$1=0;

 _crypto_scalarmult_curve25519_ref($80,$78,$9);
 _crypto_core_hsalsa20($79,14752,$80,104);
 var $$etemp$14$0=32;
 var $$etemp$14$1=0;

 var $length_off_i_i4=((($length)-(150))|0);
 var $81=($length_off_i_i4>>>0)>1007;
 if($81){var $len_0=-1;label=17;break;}else{label=13;break;}
 case 13: 
 var $83=((($length)-(133))|0);
 var $84=(($packet+133)|0);
 var $85=(($packet+109)|0);
 var $86=(($temp_plain_i_i)|0);
 var $$etemp$15$0=1056;
 var $$etemp$15$1=0;

 var $87=(($temp_encrypted_i_i)|0);
 var $$etemp$16$0=1040;
 var $$etemp$16$1=0;

 _memset($87, 0, 1040)|0;
 var $88=(($temp_encrypted_i_i+16)|0);
 assert($83 % 1 === 0);(_memcpy($88, $84, $83)|0);
 var $89=((($length)-(117))|0);
 var $90$0=$89;
 var $90$1=0;
 var $91=_crypto_secretbox_xsalsa20poly1305_open($86,$87,$90$0,$90$1,$85,$79);
 var $92=($91|0)==-1;
 if($92){var $len_0=-1;label=17;break;}else{var $check_01_i_i_i6=0;var $i_02_i_i_i5=0;label=14;break;}
 case 14: 
 var $i_02_i_i_i5;
 var $check_01_i_i_i6;
 var $93=(($temp_plain_i_i+$i_02_i_i_i5)|0);
 var $94=HEAP8[($93)];
 var $95=$94|$check_01_i_i_i6;
 var $96=((($i_02_i_i_i5)+(1))|0);
 var $97=($96>>>0)<32;
 if($97){var $check_01_i_i_i6=$95;var $i_02_i_i_i5=$96;label=14;break;}else{label=15;break;}
 case 15: 
 var $98=(($95<<24)>>24)==0;
 if($98){label=16;break;}else{var $len_0=-1;label=17;break;}
 case 16: 
 var $100=(($temp_plain_i_i+32)|0);
 var $101=((($length)-(149))|0);
 assert($101 % 1 === 0);(_memcpy($38, $100, $101)|0);
 var $len_0=$101;label=17;break;
 case 17: 
 var $len_0;
 var $102=($len_0|0)==($36|0);
 if($102){label=18;break;}else{var $_1=1;label=102;break;}
 case 18: 
 var $104=HEAP8[($38)];
 var $105=(($38+1)|0);
 var $tmp=(($ip_port2)|0);
 assert(24 % 1 === 0);(_memcpy($tmp, $24, 24)|0);
 var $tmp5=(($source4)|0);
 var $tmp6=(($source)|0);
 assert(24 % 1 === 0);(_memcpy($tmp5, $tmp6, 24)|0);
 var $106=(($source2_i)|0);
 var $$etemp$17$0=24;
 var $$etemp$17$1=0;

 var $107=HEAP16[(($29)>>1)];
 var $108=($107&65535);
 var $109=($108>>>0)<($27>>>0);
 if($109){var $_1=1;label=102;break;}else{label=19;break;}
 case 19: 
 if($39){label=20;break;}else{label=25;break;}
 case 20: 
 var $112=(($object+16)|0);
 var $113=$112;
 var $114=$object;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+12)|0);
 var $119=(($104<<24)>>24)==0;
 if($119){var $reference_id_0_i=$118;var $list_nodes_0_i=$113;var $_01_i=0;label=26;break;}else{label=21;break;}
 case 21: 
 var $121=(($object+2112)|0);
 var $_03_i=31;var $l_04_i=$105;var $r_05_i=$121;label=22;break;
 case 22: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $122=HEAP8[($l_04_i)];
 var $123=HEAP8[($r_05_i)];
 var $124=(($122<<24)>>24)==(($123<<24)>>24);
 if($124){label=23;break;}else{var $reference_id_0_i=$118;var $list_nodes_0_i=$113;var $_01_i=0;label=26;break;}
 case 23: 
 var $126=($_03_i|0)==0;
 if($126){var $reference_id_0_i=$118;var $list_nodes_0_i=$113;var $_01_i=$104;label=26;break;}else{label=24;break;}
 case 24: 
 var $127=(($r_05_i+1)|0);
 var $128=(($l_04_i+1)|0);
 var $phitmp=((($_03_i)-(1))|0);
 var $_03_i=$phitmp;var $l_04_i=$128;var $r_05_i=$127;label=22;break;
 case 25: 
 var $130=((($27)-(1))|0);
 var $131=(($object+8)|0);
 var $132=$131;
 var $133=HEAP32[(($132)>>2)];
 var $134=(($133+((($130)*(2600))&-1)+72)|0);
 var $135=(($133+((($130)*(2600))&-1)+35)|0);
 var $reference_id_0_i=$135;var $list_nodes_0_i=$134;var $_01_i=$104;label=26;break;
 case 26: 
 var $_01_i;
 var $list_nodes_0_i;
 var $reference_id_0_i;
 assert(32 % 1 === 0);(_memcpy(14928, $reference_id_0_i, 32)|0);
 var $136=(($list_nodes_0_i)|0);
 _qsort($136,8,152,172);
 var $ld$18$0=13552;
 var $137$0=HEAP32[(($ld$18$0)>>2)];
 var $ld$19$1=13556;
 var $137$1=HEAP32[(($ld$19$1)>>2)];
 var $index_06_i=-1;var $i_07_i=0;label=28;break;
 case 27: 
 var $139=($162>>>0)<8;
 if($139){var $index_06_i=0;var $i_07_i=$162;label=28;break;}else{var $index_1_i=0;label=33;break;}
 case 28: 
 var $i_07_i;
 var $index_06_i;
 var $141=(($list_nodes_0_i+((($i_07_i)*(152))&-1)+128)|0);
 var $ld$20$0=(($141)|0);
 var $142$0=HEAP32[(($ld$20$0)>>2)];
 var $ld$21$1=(($141+4)|0);
 var $142$1=HEAP32[(($ld$21$1)>>2)];
 var $$etemp$22$0=120;
 var $$etemp$22$1=0;
 var $143$0=_i64Add($142$0,$142$1,$$etemp$22$0,$$etemp$22$1);var $143$1=tempRet0;
 var $144=(($143$1>>>0) > ($137$1>>>0)) | (((($143$1>>>0) == ($137$1>>>0) & ($143$0>>>0) >  ($137$0>>>0))));
 if($144){var $i_03_i=0;label=30;break;}else{label=32;break;}
 case 29: 
 var $146=($160>>>0)<32;
 if($146){var $i_03_i=$160;label=30;break;}else{var $index_1_i=$index_06_i;label=33;break;}
 case 30: 
 var $i_03_i;
 var $147=(($reference_id_0_i+$i_03_i)|0);
 var $148=HEAP8[($147)];
 var $149=(($list_nodes_0_i+((($i_07_i)*(152))&-1)+$i_03_i)|0);
 var $150=HEAP8[($149)];
 var $151=$150^$148;
 var $ispos_i=(($151<<24)>>24)>-1;
 var $neg_i=(((-$151))&255);
 var $152=($ispos_i?$151:$neg_i);
 var $153=(($public_key+$i_03_i)|0);
 var $154=HEAP8[($153)];
 var $155=$154^$148;
 var $ispos1_i=(($155<<24)>>24)>-1;
 var $neg2_i=(((-$155))&255);
 var $156=($ispos1_i?$155:$neg2_i);
 var $157=($152&255)<($156&255);
 if($157){var $index_1_i=$index_06_i;label=33;break;}else{label=31;break;}
 case 31: 
 var $159=($152&255)>($156&255);
 var $160=((($i_03_i)+(1))|0);
 if($159){label=32;break;}else{label=29;break;}
 case 32: 
 var $161=($i_07_i|0)==0;
 var $162=((($i_07_i)+(1))|0);
 if($161){label=27;break;}else{var $index_1_i=$i_07_i;label=33;break;}
 case 33: 
 var $index_1_i;
 var $i_15_i=0;label=35;break;
 case 34: 
 var $164=((($i_15_i)+(1))|0);
 var $165=($164>>>0)<8;
 if($165){var $i_15_i=$164;label=35;break;}else{var $index_2_i=$index_1_i;label=38;break;}
 case 35: 
 var $i_15_i;
 var $167=(($list_nodes_0_i+((($i_15_i)*(152))&-1))|0);
 var $_03_i15=32;var $l_04_i14=$167;var $r_05_i13=$9;label=36;break;
 case 36: 
 var $r_05_i13;
 var $l_04_i14;
 var $_03_i15;
 var $168=HEAP8[($l_04_i14)];
 var $169=HEAP8[($r_05_i13)];
 var $170=(($168<<24)>>24)==(($169<<24)>>24);
 if($170){label=37;break;}else{label=34;break;}
 case 37: 
 var $172=((($_03_i15)-(1))|0);
 var $173=(($l_04_i14+1)|0);
 var $174=(($r_05_i13+1)|0);
 var $175=($172|0)==0;
 if($175){var $index_2_i=$i_15_i;label=38;break;}else{var $_03_i15=$172;var $l_04_i14=$173;var $r_05_i13=$174;label=36;break;}
 case 38: 
 var $index_2_i;
 var $176=($index_2_i|0)==-1;
 if($176){label=39;break;}else{label=40;break;}
 case 39: 
 var $_pre=HEAP16[(($29)>>1)];
 var $218=$_pre;label=53;break;
 case 40: 
 var $178=(($list_nodes_0_i+((($index_2_i)*(152))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($178, $9, 32)|0);
 var $179=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($179, $tmp, 24)|0);
 var $180=(($_01_i<<24)>>24)==0;
 if($180){label=42;break;}else{label=41;break;}
 case 41: 
 var $182=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+88)|0);
 assert(32 % 1 === 0);(_memcpy($182, $105, 32)|0);
 label=43;break;
 case 42: 
 var $184=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+56)|0);
 assert(32 % 1 === 0);(_memcpy($184, $105, 32)|0);
 label=43;break;
 case 43: 
 var $186=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+120)|0);
 HEAP8[($186)]=$_01_i;
 var $187=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+128)|0);
 var $st$23$0=(($187)|0);
 HEAP32[(($st$23$0)>>2)]=$137$0;
 var $st$24$1=(($187+4)|0);
 HEAP32[(($st$24$1)>>2)]=$137$1;
 var $188=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+136)|0);
 var $st$25$0=(($188)|0);
 HEAP32[(($st$25$0)>>2)]=$137$0;
 var $st$26$1=(($188+4)|0);
 HEAP32[(($st$26$1)>>2)]=$137$1;
 assert(24 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($tmp5)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($tmp5)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($tmp5)+(8))>>2)];HEAP32[((($106)+(12))>>2)]=HEAP32[((($tmp5)+(12))>>2)];HEAP32[((($106)+(16))>>2)]=HEAP32[((($tmp5)+(16))>>2)];HEAP32[((($106)+(20))>>2)]=HEAP32[((($tmp5)+(20))>>2)];
 var $189=HEAP16[(($29)>>1)];
 var $190=($189&65535);
 var $191=($190>>>0)<($27>>>0);
 if($191){var $_0_i_i=-1;label=52;break;}else{label=44;break;}
 case 44: 
 if($39){label=45;break;}else{label=46;break;}
 case 45: 
 var $194=(($object+1232)|0);
 var $195=$194;
 var $onion_paths_0_i_i=$195;label=47;break;
 case 46: 
 var $197=((($27)-(1))|0);
 var $198=(($object+8)|0);
 var $199=$198;
 var $200=HEAP32[(($199)>>2)];
 var $201=(($200+((($197)*(2600))&-1)+1384)|0);
 var $onion_paths_0_i_i=$201;label=47;break;
 case 47: 
 var $onion_paths_0_i_i;
 var $203=(($source2_i+20)|0);
 var $204=HEAP16[(($203)>>1)];
 var $205=(($source2_i)|0);
 var $i_02_i_i=0;label=49;break;
 case 48: 
 var $206=((($i_02_i_i)+(1))|0);
 var $207=($206>>>0)<3;
 if($207){var $i_02_i_i=$206;label=49;break;}else{var $_0_i_i=-1;label=52;break;}
 case 49: 
 var $i_02_i_i;
 var $209=(($onion_paths_0_i_i+((($i_02_i_i)*(264))&-1)+212)|0);
 var $210=(((((HEAPU8[($209)])|(HEAPU8[((($209)+(1))|0)]<<8))<<16)>>16));
 var $211=(($210<<16)>>16)!=0;
 var $212=(($210<<16)>>16)==(($204<<16)>>16);
 var $or_cond78=$211&$212;
 if($or_cond78){label=50;break;}else{label=48;break;}
 case 50: 
 var $213=(($onion_paths_0_i_i+((($i_02_i_i)*(264))&-1)+192)|0);
 var $214=_ip_equal($213,$205);
 var $phitmp55=($214|0)==0;
 if($phitmp55){label=48;break;}else{label=51;break;}
 case 51: 
 var $216=(($onion_paths_0_i_i+792+($i_02_i_i<<3))|0);
 var $st$27$0=(($216)|0);
 HEAP32[(($st$27$0)>>2)]=$137$0;
 var $st$28$1=(($216+4)|0);
 HEAP32[(($st$28$1)>>2)]=$137$1;
 var $_0_i_i=$i_02_i_i;label=52;break;
 case 52: 
 var $_0_i_i;
 var $217=(($list_nodes_0_i+((($index_2_i)*(152))&-1)+144)|0);
 HEAP32[(($217)>>2)]=$_0_i_i;
 var $218=$189;label=53;break;
 case 53: 
 var $218;
 var $$etemp$29$0=24;
 var $$etemp$29$1=0;

 var $219=(($nodes)|0);
 var $$etemp$30$0=448;
 var $$etemp$30$1=0;

 var $220=(($38+33)|0);
 assert($35 % 1 === 0);(_memcpy($219, $220, $35)|0);
 var $tmp9=(($source8)|0);
 assert(24 % 1 === 0);(_memcpy($tmp9, $tmp6, 24)|0);
 var $221=($218&65535);
 var $222=($221>>>0)<($27>>>0);
 if($222){var $_1=1;label=102;break;}else{label=54;break;}
 case 54: 
 var $224=(($7<<16)>>16)==0;
 if($224){var $_1=0;label=102;break;}else{label=55;break;}
 case 55: 
 if($39){label=56;break;}else{label=57;break;}
 case 56: 
 var $227=(($object+16)|0);
 var $228=$227;
 var $229=$object;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+12)|0);
 var $234=(($object+2176)|0);
 var $235=$234;
 var $236=(($object+2184)|0);
 var $237=$236;
 var $238=(($object+2544)|0);
 var $last_pinged_index_0_i=$238;var $last_pinged_0_i=$237;var $ping_nodes_sent_second_0_i=$235;var $reference_id_0_i12=$233;var $list_nodes_0_i11=$228;label=58;break;
 case 57: 
 var $240=((($27)-(1))|0);
 var $241=(($object+8)|0);
 var $242=$241;
 var $243=HEAP32[(($242)>>2)];
 var $244=(($243+((($240)*(2600))&-1)+72)|0);
 var $245=(($243+((($240)*(2600))&-1)+35)|0);
 var $246=(($243+((($240)*(2600))&-1)+2224)|0);
 var $247=(($243+((($240)*(2600))&-1)+2232)|0);
 var $248=(($243+((($240)*(2600))&-1)+2592)|0);
 var $last_pinged_index_0_i=$248;var $last_pinged_0_i=$247;var $ping_nodes_sent_second_0_i=$246;var $reference_id_0_i12=$245;var $list_nodes_0_i11=$244;label=58;break;
 case 58: 
 var $list_nodes_0_i11;
 var $reference_id_0_i12;
 var $ping_nodes_sent_second_0_i;
 var $last_pinged_0_i;
 var $last_pinged_index_0_i;
 var $249=(($source8)|0);
 var $250=_LAN_ip($249);
 var $251=($250|0)==0;
 var $252=(($list_nodes_0_i11+128)|0);
 if($251){var $i_02_us_i=0;label=59;break;}else{var $i_02_i=0;label=80;break;}
 case 59: 
 var $i_02_us_i;
 var $253=HEAP32[(($ping_nodes_sent_second_0_i)>>2)];
 var $254=($253>>>0)>5;
 if($254){var $_1=0;label=102;break;}else{label=60;break;}
 case 60: 
 var $256=(($nodes+((($i_02_us_i)*(56))&-1)+32)|0);
 var $257=(($256)|0);
 var $258=HEAP8[($257)];
 if((($258<<24)>>24)==2){ label=61;break;}else if((($258<<24)>>24)==10){ label=62;break;}else{label=63;break;}
 case 61: 
 HEAP8[($257)]=2;
 label=63;break;
 case 62: 
 HEAP8[($257)]=10;
 label=63;break;
 case 63: 
 var $ld$31$0=(($252)|0);
 var $261$0=HEAP32[(($ld$31$0)>>2)];
 var $ld$32$1=(($252+4)|0);
 var $261$1=HEAP32[(($ld$32$1)>>2)];
 var $$etemp$33$0=120;
 var $$etemp$33$1=0;
 var $262$0=_i64Add($261$0,$261$1,$$etemp$33$0,$$etemp$33$1);var $262$1=tempRet0;
 var $ld$34$0=13552;
 var $263$0=HEAP32[(($ld$34$0)>>2)];
 var $ld$35$1=13556;
 var $263$1=HEAP32[(($ld$35$1)>>2)];
 var $264=(($262$1>>>0) > ($263$1>>>0)) | (((($262$1>>>0) == ($263$1>>>0) & ($262$0>>>0) >  ($263$0>>>0))));
 var $265=(($nodes+((($i_02_us_i)*(56))&-1))|0);
 if($264){var $i_03_i46=0;label=65;break;}else{var $j_01_us_i=0;label=68;break;}
 case 64: 
 var $267=($281>>>0)<32;
 if($267){var $i_03_i46=$281;label=65;break;}else{label=79;break;}
 case 65: 
 var $i_03_i46;
 var $268=(($reference_id_0_i12+$i_03_i46)|0);
 var $269=HEAP8[($268)];
 var $270=(($list_nodes_0_i11+$i_03_i46)|0);
 var $271=HEAP8[($270)];
 var $272=$271^$269;
 var $ispos_i47=(($272<<24)>>24)>-1;
 var $neg_i48=(((-$272))&255);
 var $273=($ispos_i47?$272:$neg_i48);
 var $274=(($nodes+((($i_02_us_i)*(56))&-1)+$i_03_i46)|0);
 var $275=HEAP8[($274)];
 var $276=$275^$269;
 var $ispos1_i49=(($276<<24)>>24)>-1;
 var $neg2_i50=(((-$276))&255);
 var $277=($ispos1_i49?$276:$neg2_i50);
 var $278=($273&255)<($277&255);
 if($278){label=79;break;}else{label=66;break;}
 case 66: 
 var $280=($273&255)>($277&255);
 var $281=((($i_03_i46)+(1))|0);
 if($280){var $j_01_us_i=0;label=68;break;}else{label=64;break;}
 case 67: 
 var $283=((($j_01_us_i)+(1))|0);
 var $284=($283>>>0)<8;
 if($284){var $j_01_us_i=$283;label=68;break;}else{var $j_0_lcssa_us_i=$283;label=71;break;}
 case 68: 
 var $j_01_us_i;
 var $285=(($list_nodes_0_i11+((($j_01_us_i)*(152))&-1))|0);
 var $_03_i43=32;var $l_04_i42=$285;var $r_05_i41=$265;label=69;break;
 case 69: 
 var $r_05_i41;
 var $l_04_i42;
 var $_03_i43;
 var $286=HEAP8[($l_04_i42)];
 var $287=HEAP8[($r_05_i41)];
 var $288=(($286<<24)>>24)==(($287<<24)>>24);
 if($288){label=70;break;}else{label=67;break;}
 case 70: 
 var $290=((($_03_i43)-(1))|0);
 var $291=(($l_04_i42+1)|0);
 var $292=(($r_05_i41+1)|0);
 var $293=($290|0)==0;
 if($293){var $j_0_lcssa_us_i=$j_01_us_i;label=71;break;}else{var $_03_i43=$290;var $l_04_i42=$291;var $r_05_i41=$292;label=69;break;}
 case 71: 
 var $j_0_lcssa_us_i;
 var $294=($j_0_lcssa_us_i|0)==8;
 if($294){var $i_01_i_us_i=0;label=72;break;}else{label=79;break;}
 case 72: 
 var $i_01_i_us_i;
 var $295=(($last_pinged_0_i+((($i_01_i_us_i)*(40))&-1)+32)|0);
 var $ld$36$0=(($295)|0);
 var $296$0=HEAP32[(($ld$36$0)>>2)];
 var $ld$37$1=(($295+4)|0);
 var $296$1=HEAP32[(($ld$37$1)>>2)];
 var $$etemp$38$0=10;
 var $$etemp$38$1=0;
 var $297$0=_i64Add($296$0,$296$1,$$etemp$38$0,$$etemp$38$1);var $297$1=tempRet0;
 var $298=(($297$1>>>0) > ($263$1>>>0)) | (((($297$1>>>0) == ($263$1>>>0) & ($297$0>>>0) >  ($263$0>>>0))));
 if($298){label=73;break;}else{label=76;break;}
 case 73: 
 var $300=(($last_pinged_0_i+((($i_01_i_us_i)*(40))&-1))|0);
 var $_03_i38=32;var $l_04_i37=$300;var $r_05_i36=$265;label=74;break;
 case 74: 
 var $r_05_i36;
 var $l_04_i37;
 var $_03_i38;
 var $301=HEAP8[($l_04_i37)];
 var $302=HEAP8[($r_05_i36)];
 var $303=(($301<<24)>>24)==(($302<<24)>>24);
 if($303){label=75;break;}else{label=76;break;}
 case 75: 
 var $305=((($_03_i38)-(1))|0);
 var $306=(($l_04_i37+1)|0);
 var $307=(($r_05_i36+1)|0);
 var $308=($305|0)==0;
 if($308){label=79;break;}else{var $_03_i38=$305;var $l_04_i37=$306;var $r_05_i36=$307;label=74;break;}
 case 76: 
 var $309=((($i_01_i_us_i)+(1))|0);
 var $310=($309>>>0)<9;
 if($310){var $i_01_i_us_i=$309;label=72;break;}else{label=77;break;}
 case 77: 
 var $312=HEAP8[($last_pinged_index_0_i)];
 var $313=(((($312&255))%(9))&-1);
 var $314=($313&255);
 var $315=(($last_pinged_0_i+((($314)*(40))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($315, $265, 32)|0);
 var $316=HEAP8[($last_pinged_index_0_i)];
 var $317=(((($316&255))%(9))&-1);
 var $318=($317&255);
 var $319=(($last_pinged_0_i+((($318)*(40))&-1)+32)|0);
 var $st$39$0=(($319)|0);
 HEAP32[(($st$39$0)>>2)]=$263$0;
 var $st$40$1=(($319+4)|0);
 HEAP32[(($st$40$1)>>2)]=$263$1;
 var $320=HEAP8[($last_pinged_index_0_i)];
 var $321=((($320)+(1))&255);
 HEAP8[($last_pinged_index_0_i)]=$321;
 var $322=_client_send_announce_request($1,$27,$256,$265,0,-1);
 var $323=($322|0)==0;
 if($323){label=78;break;}else{label=79;break;}
 case 78: 
 var $325=HEAP32[(($ping_nodes_sent_second_0_i)>>2)];
 var $326=((($325)+(1))|0);
 HEAP32[(($ping_nodes_sent_second_0_i)>>2)]=$326;
 label=79;break;
 case 79: 
 var $327=((($i_02_us_i)+(1))|0);
 var $328=($327>>>0)<($34>>>0);
 if($328){var $i_02_us_i=$327;label=59;break;}else{var $_1=0;label=102;break;}
 case 80: 
 var $i_02_i;
 var $329=HEAP32[(($ping_nodes_sent_second_0_i)>>2)];
 var $330=($329>>>0)>5;
 if($330){var $_1=0;label=102;break;}else{label=81;break;}
 case 81: 
 var $332=(($nodes+((($i_02_i)*(56))&-1)+32)|0);
 var $333=(($332)|0);
 var $334=(($332)|0);
 var $335=HEAP8[($334)];
 if((($335<<24)>>24)==2){ label=82;break;}else if((($335<<24)>>24)==10){ label=83;break;}else{label=84;break;}
 case 82: 
 HEAP8[($334)]=2;
 label=84;break;
 case 83: 
 HEAP8[($334)]=10;
 label=84;break;
 case 84: 
 var $338=_LAN_ip($333);
 var $339=($338|0)==0;
 if($339){label=101;break;}else{label=85;break;}
 case 85: 
 var $ld$41$0=(($252)|0);
 var $341$0=HEAP32[(($ld$41$0)>>2)];
 var $ld$42$1=(($252+4)|0);
 var $341$1=HEAP32[(($ld$42$1)>>2)];
 var $$etemp$43$0=120;
 var $$etemp$43$1=0;
 var $342$0=_i64Add($341$0,$341$1,$$etemp$43$0,$$etemp$43$1);var $342$1=tempRet0;
 var $ld$44$0=13552;
 var $343$0=HEAP32[(($ld$44$0)>>2)];
 var $ld$45$1=13556;
 var $343$1=HEAP32[(($ld$45$1)>>2)];
 var $344=(($342$1>>>0) > ($343$1>>>0)) | (((($342$1>>>0) == ($343$1>>>0) & ($342$0>>>0) >  ($343$0>>>0))));
 var $345=(($nodes+((($i_02_i)*(56))&-1))|0);
 if($344){var $i_03_i28=0;label=87;break;}else{var $j_01_i=0;label=90;break;}
 case 86: 
 var $347=($361>>>0)<32;
 if($347){var $i_03_i28=$361;label=87;break;}else{label=101;break;}
 case 87: 
 var $i_03_i28;
 var $348=(($reference_id_0_i12+$i_03_i28)|0);
 var $349=HEAP8[($348)];
 var $350=(($list_nodes_0_i11+$i_03_i28)|0);
 var $351=HEAP8[($350)];
 var $352=$351^$349;
 var $ispos_i29=(($352<<24)>>24)>-1;
 var $neg_i30=(((-$352))&255);
 var $353=($ispos_i29?$352:$neg_i30);
 var $354=(($nodes+((($i_02_i)*(56))&-1)+$i_03_i28)|0);
 var $355=HEAP8[($354)];
 var $356=$355^$349;
 var $ispos1_i31=(($356<<24)>>24)>-1;
 var $neg2_i32=(((-$356))&255);
 var $357=($ispos1_i31?$356:$neg2_i32);
 var $358=($353&255)<($357&255);
 if($358){label=101;break;}else{label=88;break;}
 case 88: 
 var $360=($353&255)>($357&255);
 var $361=((($i_03_i28)+(1))|0);
 if($360){var $j_01_i=0;label=90;break;}else{label=86;break;}
 case 89: 
 var $363=((($j_01_i)+(1))|0);
 var $364=($363>>>0)<8;
 if($364){var $j_01_i=$363;label=90;break;}else{var $j_0_lcssa_i=$363;label=93;break;}
 case 90: 
 var $j_01_i;
 var $365=(($list_nodes_0_i11+((($j_01_i)*(152))&-1))|0);
 var $_03_i25=32;var $l_04_i24=$365;var $r_05_i23=$345;label=91;break;
 case 91: 
 var $r_05_i23;
 var $l_04_i24;
 var $_03_i25;
 var $366=HEAP8[($l_04_i24)];
 var $367=HEAP8[($r_05_i23)];
 var $368=(($366<<24)>>24)==(($367<<24)>>24);
 if($368){label=92;break;}else{label=89;break;}
 case 92: 
 var $370=((($_03_i25)-(1))|0);
 var $371=(($l_04_i24+1)|0);
 var $372=(($r_05_i23+1)|0);
 var $373=($370|0)==0;
 if($373){var $j_0_lcssa_i=$j_01_i;label=93;break;}else{var $_03_i25=$370;var $l_04_i24=$371;var $r_05_i23=$372;label=91;break;}
 case 93: 
 var $j_0_lcssa_i;
 var $374=($j_0_lcssa_i|0)==8;
 if($374){var $i_01_i_i=0;label=94;break;}else{label=101;break;}
 case 94: 
 var $i_01_i_i;
 var $375=(($last_pinged_0_i+((($i_01_i_i)*(40))&-1)+32)|0);
 var $ld$46$0=(($375)|0);
 var $376$0=HEAP32[(($ld$46$0)>>2)];
 var $ld$47$1=(($375+4)|0);
 var $376$1=HEAP32[(($ld$47$1)>>2)];
 var $$etemp$48$0=10;
 var $$etemp$48$1=0;
 var $377$0=_i64Add($376$0,$376$1,$$etemp$48$0,$$etemp$48$1);var $377$1=tempRet0;
 var $378=(($377$1>>>0) > ($343$1>>>0)) | (((($377$1>>>0) == ($343$1>>>0) & ($377$0>>>0) >  ($343$0>>>0))));
 if($378){label=95;break;}else{label=98;break;}
 case 95: 
 var $380=(($last_pinged_0_i+((($i_01_i_i)*(40))&-1))|0);
 var $_03_i20=32;var $l_04_i19=$380;var $r_05_i18=$345;label=96;break;
 case 96: 
 var $r_05_i18;
 var $l_04_i19;
 var $_03_i20;
 var $381=HEAP8[($l_04_i19)];
 var $382=HEAP8[($r_05_i18)];
 var $383=(($381<<24)>>24)==(($382<<24)>>24);
 if($383){label=97;break;}else{label=98;break;}
 case 97: 
 var $385=((($_03_i20)-(1))|0);
 var $386=(($l_04_i19+1)|0);
 var $387=(($r_05_i18+1)|0);
 var $388=($385|0)==0;
 if($388){label=101;break;}else{var $_03_i20=$385;var $l_04_i19=$386;var $r_05_i18=$387;label=96;break;}
 case 98: 
 var $389=((($i_01_i_i)+(1))|0);
 var $390=($389>>>0)<9;
 if($390){var $i_01_i_i=$389;label=94;break;}else{label=99;break;}
 case 99: 
 var $392=HEAP8[($last_pinged_index_0_i)];
 var $393=(((($392&255))%(9))&-1);
 var $394=($393&255);
 var $395=(($last_pinged_0_i+((($394)*(40))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($395, $345, 32)|0);
 var $396=HEAP8[($last_pinged_index_0_i)];
 var $397=(((($396&255))%(9))&-1);
 var $398=($397&255);
 var $399=(($last_pinged_0_i+((($398)*(40))&-1)+32)|0);
 var $st$49$0=(($399)|0);
 HEAP32[(($st$49$0)>>2)]=$343$0;
 var $st$50$1=(($399+4)|0);
 HEAP32[(($st$50$1)>>2)]=$343$1;
 var $400=HEAP8[($last_pinged_index_0_i)];
 var $401=((($400)+(1))&255);
 HEAP8[($last_pinged_index_0_i)]=$401;
 var $402=_client_send_announce_request($1,$27,$332,$345,0,-1);
 var $403=($402|0)==0;
 if($403){label=100;break;}else{label=101;break;}
 case 100: 
 var $405=HEAP32[(($ping_nodes_sent_second_0_i)>>2)];
 var $406=((($405)+(1))|0);
 HEAP32[(($ping_nodes_sent_second_0_i)>>2)]=$406;
 label=101;break;
 case 101: 
 var $407=((($i_02_i)+(1))|0);
 var $408=($407>>>0)<($34>>>0);
 if($408){var $i_02_i=$407;label=80;break;}else{var $_1=0;label=102;break;}
 case 102: 
 var $_1;
 _llvm_stackrestore($37);
 var $_2=$_1;label=103;break;
 case 103: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_data_response($object,$source,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2192)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_i_i11=sp;
 var $s_i_i=(sp)+(32);
 var $temp_plain_i_i=(sp)+(64);
 var $temp_encrypted_i_i=(sp)+(1120);
 var $k_i=(sp)+(2160);
 var $length_off=((($length)-(122))|0);
 var $1=($length_off>>>0)>902;
 if($1){var $_1=1;label=17;break;}else{label=2;break;}
 case 2: 
 var $3=((($length)-(73))|0);
 var $4=_llvm_stacksave();
 var $5=STACKTOP;STACKTOP = (STACKTOP + $3)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=(($packet+1)|0);
 var $7=(($packet+25)|0);
 var $8=(($object+2144)|0);
 var $9=(($k_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $10=(($s_i_i)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 _crypto_scalarmult_curve25519_ref($10,$8,$7);
 _crypto_core_hsalsa20($9,14752,$10,104);
 var $$etemp$2$0=32;
 var $$etemp$2$1=0;

 var $length_off_i_i=((($length)-(74))|0);
 var $11=($length_off_i_i>>>0)>1007;
 if($11){label=7;break;}else{label=3;break;}
 case 3: 
 var $13=((($length)-(57))|0);
 var $14=(($packet+57)|0);
 var $15=(($temp_plain_i_i)|0);
 var $$etemp$3$0=1056;
 var $$etemp$3$1=0;

 var $16=(($temp_encrypted_i_i)|0);
 var $$etemp$4$0=1040;
 var $$etemp$4$1=0;

 _memset($16, 0, 1040)|0;
 var $17=(($temp_encrypted_i_i+16)|0);
 assert($13 % 1 === 0);(_memcpy($17, $14, $13)|0);
 var $18=((($length)-(41))|0);
 var $19$0=$18;
 var $19$1=0;
 var $20=_crypto_secretbox_xsalsa20poly1305_open($15,$16,$19$0,$19$1,$6,$9);
 var $21=($20|0)==-1;
 if($21){label=7;break;}else{var $check_01_i_i_i=0;var $i_02_i_i_i=0;label=4;break;}
 case 4: 
 var $i_02_i_i_i;
 var $check_01_i_i_i;
 var $22=(($temp_plain_i_i+$i_02_i_i_i)|0);
 var $23=HEAP8[($22)];
 var $24=$23|$check_01_i_i_i;
 var $25=((($i_02_i_i_i)+(1))|0);
 var $26=($25>>>0)<32;
 if($26){var $check_01_i_i_i=$24;var $i_02_i_i_i=$25;label=4;break;}else{label=5;break;}
 case 5: 
 var $27=(($24<<24)>>24)==0;
 if($27){label=6;break;}else{label=7;break;}
 case 6: 
 var $28=(($temp_plain_i_i+32)|0);
 assert($3 % 1 === 0);(_memcpy($5, $28, $3)|0);
 var $$etemp$5$0=32;
 var $$etemp$5$1=0;

 label=8;break;
 case 7: 
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;

 var $29=($3|0)==-1;
 if($29){label=8;break;}else{var $_0=1;label=16;break;}
 case 8: 
 var $31=((($length)-(121))|0);
 var $32=STACKTOP;STACKTOP = (STACKTOP + $31)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $33=$object;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+44)|0);
 var $$etemp$7$0=32;
 var $$etemp$7$1=0;

 var $38=(($s_i_i11)|0);
 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 _crypto_scalarmult_curve25519_ref($38,$37,$5);
 _crypto_core_hsalsa20($9,14752,$38,104);
 var $$etemp$9$0=32;
 var $$etemp$9$1=0;

 var $39=($length_off>>>0)>1007;
 if($39){label=13;break;}else{label=9;break;}
 case 9: 
 var $41=((($length)-(105))|0);
 var $42=(($5+32)|0);
 var $43=(($temp_plain_i_i)|0);
 var $$etemp$10$0=1056;
 var $$etemp$10$1=0;

 var $44=(($temp_encrypted_i_i)|0);
 var $$etemp$11$0=1040;
 var $$etemp$11$1=0;

 _memset($44, 0, 1040)|0;
 var $45=(($temp_encrypted_i_i+16)|0);
 assert($41 % 1 === 0);(_memcpy($45, $42, $41)|0);
 var $46=((($length)-(89))|0);
 var $47$0=$46;
 var $47$1=0;
 var $48=_crypto_secretbox_xsalsa20poly1305_open($43,$44,$47$0,$47$1,$6,$9);
 var $49=($48|0)==-1;
 if($49){label=13;break;}else{var $check_01_i_i_i6=0;var $i_02_i_i_i5=0;label=10;break;}
 case 10: 
 var $i_02_i_i_i5;
 var $check_01_i_i_i6;
 var $50=(($temp_plain_i_i+$i_02_i_i_i5)|0);
 var $51=HEAP8[($50)];
 var $52=$51|$check_01_i_i_i6;
 var $53=((($i_02_i_i_i5)+(1))|0);
 var $54=($53>>>0)<32;
 if($54){var $check_01_i_i_i6=$52;var $i_02_i_i_i5=$53;label=10;break;}else{label=11;break;}
 case 11: 
 var $55=(($52<<24)>>24)==0;
 if($55){label=12;break;}else{label=13;break;}
 case 12: 
 var $56=(($temp_plain_i_i+32)|0);
 assert($31 % 1 === 0);(_memcpy($32, $56, $31)|0);
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 label=14;break;
 case 13: 
 var $$etemp$13$0=32;
 var $$etemp$13$1=0;

 var $57=($31|0)==-1;
 if($57){label=14;break;}else{var $_0=1;label=16;break;}
 case 14: 
 var $59=HEAP8[($32)];
 var $60=($59&255);
 var $61=(($object+2548)|0);
 var $62=$61;
 var $63=(($62+($60<<3))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($64|0)==0;
 if($65){var $_0=1;label=16;break;}else{label=15;break;}
 case 15: 
 var $67=(($62+($60<<3)+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=FUNCTION_TABLE[$64]($68,$5,$32,$31);
 var $_0=$69;label=16;break;
 case 16: 
 var $_0;
 _llvm_stackrestore($4);
 var $_1=$_0;label=17;break;
 case 17: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_fakeid_announce($object,$source_pubkey,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $length_off=((($length)-(41))|0);
 var $2=($length_off>>>0)<449;
 var $3=(((($length_off>>>0))%(56))&-1);
 var $4=($3|0)==0;
 var $or_cond=$2&$4;
 if($or_cond){label=2;break;}else{var $_0=1;label=25;break;}
 case 2: 
 var $6=(($object+12)|0);
 var $7=$6;
 var $8=HEAP16[(($7)>>1)];
 var $9=(($8<<16)>>16)==0;
 if($9){var $_0=1;label=25;break;}else{label=3;break;}
 case 3: 
 var $10=(($object+8)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=($8&65535);
 var $i_01_i=0;label=4;break;
 case 4: 
 var $i_01_i;
 var $15=(($12+((($i_01_i)*(2600))&-1))|0);
 var $16=HEAP8[($15)];
 var $17=(($16<<24)>>24)==0;
 if($17){label=8;break;}else{label=5;break;}
 case 5: 
 var $19=(($12+((($i_01_i)*(2600))&-1)+35)|0);
 var $_03_i=32;var $l_04_i=$source_pubkey;var $r_05_i=$19;label=6;break;
 case 6: 
 var $r_05_i;
 var $l_04_i;
 var $_03_i;
 var $20=HEAP8[($l_04_i)];
 var $21=HEAP8[($r_05_i)];
 var $22=(($20<<24)>>24)==(($21<<24)>>24);
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 var $24=((($_03_i)-(1))|0);
 var $25=(($l_04_i+1)|0);
 var $26=(($r_05_i+1)|0);
 var $27=($24|0)==0;
 if($27){label=9;break;}else{var $_03_i=$24;var $l_04_i=$25;var $r_05_i=$26;label=6;break;}
 case 8: 
 var $28=((($i_01_i)+(1))|0);
 var $29=($28>>>0)<($13>>>0);
 if($29){var $i_01_i=$28;label=4;break;}else{var $_0=1;label=25;break;}
 case 9: 
 var $30=($i_01_i|0)==-1;
 if($30){var $_0=1;label=25;break;}else{label=10;break;}
 case 10: 
 var $32=(($data+1)|0);
 var $33=$1;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $tmpcast_i=$1;
 var $i_01_i3=0;label=11;break;
 case 11: 
 var $i_01_i3;
 var $35=(((7)-($i_01_i3))|0);
 var $_sum=((($35)+(1))|0);
 var $36=(($data+$_sum)|0);
 var $37=HEAP8[($36)];
 var $38=(($tmpcast_i+$i_01_i3)|0);
 HEAP8[($38)]=$37;
 var $39=((($i_01_i3)+(1))|0);
 var $40=($39>>>0)<8;
 if($40){var $i_01_i3=$39;label=11;break;}else{label=12;break;}
 case 12: 
 var $41=$32;
 var $ld$1$0=(($1)|0);
 var $42$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($1+4)|0);
 var $42$1=HEAP32[(($ld$2$1)>>2)];
 var $st$3$0=(($41)|0);
 tempBigInt=$42$0;HEAP8[($st$3$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$0)+(3))|0)]=tempBigInt&0xff;
 var $st$4$1=(($41+4)|0);
 tempBigInt=$42$1;HEAP8[($st$4$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$4$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$4$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$4$1)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $43=HEAP32[(($11)>>2)];
 var $44=(($43+((($i_01_i)*(2600))&-1)+1368)|0);
 var $ld$6$0=(($44)|0);
 var $45$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($44+4)|0);
 var $45$1=HEAP32[(($ld$7$1)>>2)];
 var $46=(($42$1>>>0) > ($45$1>>>0)) | (((($42$1>>>0) == ($45$1>>>0) & ($42$0>>>0) >  ($45$0>>>0))));
 if($46){label=13;break;}else{var $_0=1;label=25;break;}
 case 13: 
 var $st$8$0=(($44)|0);
 HEAP32[(($st$8$0)>>2)]=$42$0;
 var $st$9$1=(($44+4)|0);
 HEAP32[(($st$9$1)>>2)]=$42$1;
 var $48=(($data+9)|0);
 var $49=(($43+((($i_01_i)*(2600))&-1)+3)|0);
 var $_03_i6=32;var $l_04_i5=$48;var $r_05_i4=$49;label=14;break;
 case 14: 
 var $r_05_i4;
 var $l_04_i5;
 var $_03_i6;
 var $50=HEAP8[($l_04_i5)];
 var $51=HEAP8[($r_05_i4)];
 var $52=(($50<<24)>>24)==(($51<<24)>>24);
 if($52){label=15;break;}else{label=16;break;}
 case 15: 
 var $54=((($_03_i6)-(1))|0);
 var $55=(($l_04_i5+1)|0);
 var $56=(($r_05_i4+1)|0);
 var $57=($54|0)==0;
 if($57){label=18;break;}else{var $_03_i6=$54;var $l_04_i5=$55;var $r_05_i4=$56;label=14;break;}
 case 16: 
 var $58=$object;
 var $59=HEAP32[(($58)>>2)];
 _DHT_delfriend($59,$49);
 var $ld$10$0=13552;
 var $60$0=HEAP32[(($ld$10$0)>>2)];
 var $ld$11$1=13556;
 var $60$1=HEAP32[(($ld$11$1)>>2)];
 var $61=HEAP32[(($11)>>2)];
 var $62=(($61+((($i_01_i)*(2600))&-1)+1376)|0);
 var $st$12$0=(($62)|0);
 HEAP32[(($st$12$0)>>2)]=$60$0;
 var $st$13$1=(($62+4)|0);
 HEAP32[(($st$13$1)>>2)]=$60$1;
 var $63=HEAP32[(($58)>>2)];
 var $64=_DHT_addfriend($63,$48);
 var $65=($64|0)==1;
 if($65){var $_0=1;label=25;break;}else{label=17;break;}
 case 17: 
 var $67=HEAP32[(($11)>>2)];
 var $68=(($67+((($i_01_i)*(2600))&-1)+2)|0);
 HEAP8[($68)]=1;
 var $69=HEAP32[(($11)>>2)];
 var $70=(($69+((($i_01_i)*(2600))&-1)+3)|0);
 assert(32 % 1 === 0);(_memcpy($70, $48, 32)|0);
 label=18;break;
 case 18: 
 var $71=(((($length_off>>>0))/(56))&-1);
 var $72=$71&65535;
 var $73=_llvm_stacksave();
 var $74=STACKTOP;STACKTOP = (STACKTOP + ((($72)*(56))&-1))|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $75=(($74)|0);
 var $76=(($data+41)|0);
 var $77=((($72)*(56))&-1);
 assert($77 % 1 === 0);(_memcpy($75, $76, $77)|0);
 var $78=($72|0)==0;
 if($78){label=24;break;}else{label=19;break;}
 case 19: 
 var $79=$object;
 var $i_01=0;label=20;break;
 case 20: 
 var $i_01;
 var $81=(($74+((($i_01)*(56))&-1)+32)|0);
 var $82=(($81)|0);
 var $83=HEAP8[($82)];
 if((($83<<24)>>24)==2){ label=21;break;}else if((($83<<24)>>24)==10){ label=22;break;}else{label=23;break;}
 case 21: 
 HEAP8[($82)]=2;
 label=23;break;
 case 22: 
 HEAP8[($82)]=10;
 label=23;break;
 case 23: 
 var $86=HEAP32[(($79)>>2)];
 var $87=(($74+((($i_01)*(56))&-1))|0);
 var $88=HEAP32[(($11)>>2)];
 var $89=(($88+((($i_01_i)*(2600))&-1)+3)|0);
 var $90=_getnodes($86,$81,$87,$89,0);
 var $91=((($i_01)+(1))|0);
 var $92=($91>>>0)<($72>>>0);
 if($92){var $i_01=$91;label=20;break;}else{label=24;break;}
 case 24: 
 _llvm_stackrestore($73);
 var $_0=0;label=25;break;
 case 25: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _handle_dht_fakeid($object,$source,$source_pubkey,$packet,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2656)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $source; $source=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($source)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($source)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($source)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($source)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($source)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($source)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $s_i_i=sp;
 var $temp_plain_i_i=(sp)+(32);
 var $temp_encrypted_i_i=(sp)+(1088);
 var $k_i=(sp)+(2128);
 var $plain=(sp)+(2160);
 var $length_off=((($length)-(113))|0);
 var $1=($length_off>>>0)>448;
 if($1){var $_1=1;label=10;break;}else{label=2;break;}
 case 2: 
 var $3=(($plain)|0);
 var $$etemp$0$0=489;
 var $$etemp$0$1=0;

 var $4=$object;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+44)|0);
 var $9=(($k_i)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $10=(($s_i_i)|0);
 var $$etemp$2$0=32;
 var $$etemp$2$1=0;

 _crypto_scalarmult_curve25519_ref($10,$8,$packet);
 _crypto_core_hsalsa20($9,14752,$10,104);
 var $$etemp$3$0=32;
 var $$etemp$3$1=0;

 var $length_off_i_i=((($length)-(73))|0);
 var $11=($length_off_i_i>>>0)>1007;
 if($11){label=7;break;}else{label=3;break;}
 case 3: 
 var $13=((($length)-(56))|0);
 var $14=(($packet+56)|0);
 var $15=(($packet+32)|0);
 var $16=(($temp_plain_i_i)|0);
 var $$etemp$4$0=1056;
 var $$etemp$4$1=0;

 var $17=(($temp_encrypted_i_i)|0);
 var $$etemp$5$0=1040;
 var $$etemp$5$1=0;

 _memset($17, 0, 1040)|0;
 var $18=(($temp_encrypted_i_i+16)|0);
 assert($13 % 1 === 0);(_memcpy($18, $14, $13)|0);
 var $19=((($length)-(40))|0);
 var $20$0=$19;
 var $20$1=0;
 var $21=_crypto_secretbox_xsalsa20poly1305_open($16,$17,$20$0,$20$1,$15,$9);
 var $22=($21|0)==-1;
 if($22){label=7;break;}else{var $check_01_i_i_i=0;var $i_02_i_i_i=0;label=4;break;}
 case 4: 
 var $i_02_i_i_i;
 var $check_01_i_i_i;
 var $23=(($temp_plain_i_i+$i_02_i_i_i)|0);
 var $24=HEAP8[($23)];
 var $25=$24|$check_01_i_i_i;
 var $26=((($i_02_i_i_i)+(1))|0);
 var $27=($26>>>0)<32;
 if($27){var $check_01_i_i_i=$25;var $i_02_i_i_i=$26;label=4;break;}else{label=5;break;}
 case 5: 
 var $28=(($25<<24)>>24)==0;
 if($28){label=6;break;}else{label=7;break;}
 case 6: 
 var $29=(($temp_plain_i_i+32)|0);
 var $30=((($length)-(72))|0);
 assert($30 % 1 === 0);(_memcpy($3, $29, $30)|0);
 var $$etemp$6$0=32;
 var $$etemp$6$1=0;

 var $_1_i_i1=$30;label=8;break;
 case 7: 
 var $$etemp$7$0=32;
 var $$etemp$7$1=0;

 var $31=($length|0)==71;
 if($31){var $_1_i_i1=-1;label=8;break;}else{var $_1=1;label=10;break;}
 case 8: 
 var $_1_i_i1;
 assert(32 % 1 === 0);(_memcpy($source_pubkey, $packet, 32)|0);
 var $33=($source_pubkey|0)==0;
 if($33){label=9;break;}else{var $_1=1;label=10;break;}
 case 9: 
 var $35=_handle_fakeid_announce($object,$packet,$3,$_1_i_i1);
 var $_1=$35;label=10;break;
 case 10: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _client_send_announce_request($onion_c,$num,$dest,$dest_pubkey,$ping_id,$pathnum){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $dest; $dest=STACKTOP;STACKTOP = (STACKTOP + 24)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($dest)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($dest)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($dest)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($dest)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];HEAP32[((($dest)+(16))>>2)]=HEAP32[(((tempParam)+(16))>>2)];HEAP32[((($dest)+(20))>>2)]=HEAP32[(((tempParam)+(20))>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $dest_node4=sp;
 var $plain_i3=(sp)+(56);
 var $packet_i=(sp)+(264);
 var $dest_node1=(sp)+(544);
 var $plain_i=(sp)+(600);
 var $sendback=(sp)+(672);
 var $zero_ping_id=(sp)+(784);
 var $path=(sp)+(816);
 var $dest_node=(sp)+(1080);
 var $1=(($onion_c+12)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=($3>>>0)<($num>>>0);
 if($4){var $_2=-1;label=10;break;}else{label=2;break;}
 case 2: 
 var $6=(($sendback)|0);
 var $$etemp$0$0=108;
 var $$etemp$0$1=0;

 var $tmp3=(($dest)|0);
 var $7=(($plain_i)|0);
 var $$etemp$1$0=68;
 var $$etemp$1$1=0;

 var $ld$2$0=13552;
 var $8$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=13556;
 var $8$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=24;
 var $$etemp$4$1=0;
 _randombytes($6,$$etemp$4$0,$$etemp$4$1);
 var $9=$plain_i;
 HEAP32[(($9)>>2)]=$num;
 var $10=(($plain_i+4)|0);
 var $11=$10;
 var $st$5$0=(($11)|0);
 HEAP32[(($st$5$0)>>2)]=$8$0;
 var $st$6$1=(($11+4)|0);
 HEAP32[(($st$6$1)>>2)]=$8$1;
 var $12=(($plain_i+12)|0);
 assert(32 % 1 === 0);(_memcpy($12, $dest_pubkey, 32)|0);
 var $13=(($plain_i+44)|0);
 assert(24 % 1 === 0);(_memcpy($13, $tmp3, 24)|0);
 var $14=(($onion_c+2072)|0);
 var $15=(($sendback+24)|0);
 var $16=_encrypt_data_symmetric($14,$6,$7,68,$15);
 var $not__i=($16|0)==84;
 var $$etemp$7$0=68;
 var $$etemp$7$1=0;

 if($not__i){label=3;break;}else{var $_2=-1;label=10;break;}
 case 3: 
 var $18=(($zero_ping_id)|0);
 _memset($18, 0, 32)|0;
 var $19=($ping_id|0)==0;
 var $_ping_id=($19?$18:$ping_id);
 var $20=(($path)|0);
 var $$etemp$8$0=264;
 var $$etemp$8$1=0;

 var $21=(($dest_node)|0);
 var $$etemp$9$0=56;
 var $$etemp$9$1=0;

 var $22=(($dest_node+32)|0);
 assert(24 % 1 === 0);(_memcpy($22, $tmp3, 24)|0);
 assert(32 % 1 === 0);(_memcpy($21, $dest_pubkey, 32)|0);
 var $23=($num|0)==0;
 var $24=(($onion_c)|0);
 var $25=HEAP32[(($24)>>2)];
 if($23){label=4;break;}else{label=7;break;}
 case 4: 
 var $27=(($onion_c+1232)|0);
 var $28=_random_path($25,$27,$pathnum,$path);
 var $29=($28|0)==-1;
 if($29){var $_2=-1;label=10;break;}else{label=5;break;}
 case 5: 
 var $31=(($onion_c+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=HEAP32[(($24)>>2)];
 var $34=(($33)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+12)|0);
 var $37=(($35+44)|0);
 var $38=(($onion_c+2112)|0);
 var $tmp5=(($dest_node4)|0);
 assert(56 % 1 === 0);(_memcpy($tmp5, $21, 56)|0);
 var $39=(($plain_i3)|0);
 var $$etemp$10$0=204;
 var $$etemp$10$1=0;

 assert(32 % 1 === 0);(_memcpy($39, $_ping_id, 32)|0);
 var $40=(($plain_i3+32)|0);
 assert(32 % 1 === 0);(_memcpy($40, $36, 32)|0);
 var $41=(($plain_i3+64)|0);
 assert(32 % 1 === 0);(_memcpy($41, $38, 32)|0);
 var $42=(($plain_i3+96)|0);
 assert(108 % 1 === 0);(_memcpy($42, $6, 108)|0);
 var $43=(($packet_i)|0);
 var $$etemp$11$0=277;
 var $$etemp$11$1=0;

 HEAP8[($43)]=-125;
 var $44=(($packet_i+1)|0);
 var $$etemp$12$0=24;
 var $$etemp$12$1=0;
 _randombytes($44,$$etemp$12$0,$$etemp$12$1);
 var $45=(($packet_i+57)|0);
 var $46=_encrypt_data($tmp5,$37,$44,$39,204,$45);
 var $47=($46|0)==220;
 if($47){label=6;break;}else{var $_2=-1;label=10;break;}
 case 6: 
 var $49=(($packet_i+25)|0);
 assert(32 % 1 === 0);(_memcpy($49, $36, 32)|0);
 var $50=(($dest_node4+32)|0);
 var $51=_send_onion_packet($32,$path,$50,$43,277);
 var $_2=$51;label=10;break;
 case 7: 
 var $53=((($num)-(1))|0);
 var $54=(($onion_c+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+((($53)*(2600))&-1)+1384)|0);
 var $57=_random_path($25,$56,$pathnum,$path);
 var $58=($57|0)==-1;
 if($58){var $_2=-1;label=10;break;}else{label=8;break;}
 case 8: 
 var $60=(($onion_c+4)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+((($53)*(2600))&-1)+1320)|0);
 var $64=(($62+((($53)*(2600))&-1)+35)|0);
 var $tmp=(($dest_node1)|0);
 assert(56 % 1 === 0);(_memcpy($tmp, $21, 56)|0);
 var $65=(($plain_i3)|0);
 var $$etemp$13$0=204;
 var $$etemp$13$1=0;

 assert(32 % 1 === 0);(_memcpy($65, $_ping_id, 32)|0);
 var $66=(($plain_i3+32)|0);
 assert(32 % 1 === 0);(_memcpy($66, $64, 32)|0);
 var $67=(($plain_i3+64)|0);
 assert(32 % 1 === 0);(_memcpy($67, $18, 32)|0);
 var $68=(($plain_i3+96)|0);
 assert(108 % 1 === 0);(_memcpy($68, $6, 108)|0);
 var $69=(($packet_i)|0);
 var $$etemp$14$0=277;
 var $$etemp$14$1=0;

 HEAP8[($69)]=-125;
 var $70=(($packet_i+1)|0);
 var $$etemp$15$0=24;
 var $$etemp$15$1=0;
 _randombytes($70,$$etemp$15$0,$$etemp$15$1);
 var $71=(($packet_i+57)|0);
 var $72=_encrypt_data($tmp,$63,$70,$65,204,$71);
 var $73=($72|0)==220;
 if($73){label=9;break;}else{var $_2=-1;label=10;break;}
 case 9: 
 var $75=(($62+((($53)*(2600))&-1)+1288)|0);
 var $76=(($packet_i+25)|0);
 assert(32 % 1 === 0);(_memcpy($76, $75, 32)|0);
 var $77=(($dest_node1+32)|0);
 var $78=_send_onion_packet($61,$path,$77,$69,277);
 var $_2=$78;label=10;break;
 case 10: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _cmp_entry367($a,$b){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+304)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $entry1=sp;
 var $entry2=(sp)+(152);
 var $1=(($entry1)|0);
 var $$etemp$0$0=152;
 var $$etemp$0$1=0;

 var $2=(($entry2)|0);
 var $$etemp$1$0=152;
 var $$etemp$1$1=0;

 assert(152 % 1 === 0);(_memcpy($1, $a, 152)|0);
 assert(152 % 1 === 0);(_memcpy($2, $b, 152)|0);
 var $3=(($entry1+128)|0);
 var $ld$2$0=(($3)|0);
 var $4$0=HEAP32[(($ld$2$0)>>2)];
 var $ld$3$1=(($3+4)|0);
 var $4$1=HEAP32[(($ld$3$1)>>2)];
 var $$etemp$4$0=120;
 var $$etemp$4$1=0;
 var $5$0=_i64Add($4$0,$4$1,$$etemp$4$0,$$etemp$4$1);var $5$1=tempRet0;
 var $ld$5$0=13552;
 var $6$0=HEAP32[(($ld$5$0)>>2)];
 var $ld$6$1=13556;
 var $6$1=HEAP32[(($ld$6$1)>>2)];
 var $7=(($5$1>>>0) <= ($6$1>>>0)) & (((($5$1>>>0) <  ($6$1>>>0)) | ($5$0>>>0) <= ($6$0>>>0)));
 var $8=(($entry2+128)|0);
 var $ld$7$0=(($8)|0);
 var $9$0=HEAP32[(($ld$7$0)>>2)];
 var $ld$8$1=(($8+4)|0);
 var $9$1=HEAP32[(($ld$8$1)>>2)];
 var $$etemp$9$0=120;
 var $$etemp$9$1=0;
 var $10$0=_i64Add($9$0,$9$1,$$etemp$9$0,$$etemp$9$1);var $10$1=tempRet0;
 var $11=(($10$1>>>0) <= ($6$1>>>0)) & (((($10$1>>>0) <  ($6$1>>>0)) | ($10$0>>>0) <= ($6$0>>>0)));
 var $not_or_cond_not_demorgan=$11&$7;
 var $not_or_cond_not=$not_or_cond_not_demorgan^1;
 var $_mux=(($not_or_cond_not<<31)>>31);
 var $brmerge2=$7|$11;
 var $_mux_mux=($7?$_mux:1);
 if($brmerge2){var $_0=$_mux_mux;label=5;break;}else{var $i_03_i=0;label=3;break;}
 case 2: 
 var $13=($27>>>0)<32;
 if($13){var $i_03_i=$27;label=3;break;}else{var $_0=0;label=5;break;}
 case 3: 
 var $i_03_i;
 var $14=((14928+$i_03_i)|0);
 var $15=HEAP8[($14)];
 var $16=(($entry1+$i_03_i)|0);
 var $17=HEAP8[($16)];
 var $18=$17^$15;
 var $ispos_i=(($18<<24)>>24)>-1;
 var $neg_i=(((-$18))&255);
 var $19=($ispos_i?$18:$neg_i);
 var $20=(($entry2+$i_03_i)|0);
 var $21=HEAP8[($20)];
 var $22=$21^$15;
 var $ispos1_i=(($22<<24)>>24)>-1;
 var $neg2_i=(((-$22))&255);
 var $23=($ispos1_i?$22:$neg2_i);
 var $24=($19&255)<($23&255);
 if($24){var $_0=1;label=5;break;}else{label=4;break;}
 case 4: 
 var $26=($19&255)>($23&255);
 var $27=((($i_03_i)+(1))|0);
 if($26){var $_0=-1;label=5;break;}else{label=2;break;}
 case 5: 
 var $_0;
 var $$etemp$10$0=152;
 var $$etemp$10$1=0;

 var $$etemp$11$0=152;
 var $$etemp$11$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _send_fakeid_announce($onion_c,$friend_num,$onion_dht_both){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+960)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $data=(sp)+(8);
 var $no_replay=(sp)+(504);
 var $nodes=(sp)+(512);
 var $2=($friend_num&65535);
 var $3=(($onion_c+12)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535)>($friend_num&65535);
 if($5){label=2;break;}else{var $_1=-1;label=26;break;}
 case 2: 
 var $7=(($data)|0);
 var $$etemp$0$0=489;
 var $$etemp$0$1=0;

 HEAP8[($7)]=-100;
 var $ld$1$0=13552;
 var $8$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=13556;
 var $8$1=HEAP32[(($ld$2$1)>>2)];
 var $st$3$0=(($no_replay)|0);
 HEAP32[(($st$3$0)>>2)]=$8$0;
 var $st$4$1=(($no_replay+4)|0);
 HEAP32[(($st$4$1)>>2)]=$8$1;
 var $9=$no_replay;
 var $10=$1;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $tmpcast_i=$1;
 var $i_01_i=0;label=3;break;
 case 3: 
 var $i_01_i;
 var $12=(((7)-($i_01_i))|0);
 var $13=(($9+$12)|0);
 var $14=HEAP8[($13)];
 var $15=(($tmpcast_i+$i_01_i)|0);
 HEAP8[($15)]=$14;
 var $16=((($i_01_i)+(1))|0);
 var $17=($16>>>0)<8;
 if($17){var $i_01_i=$16;label=3;break;}else{label=4;break;}
 case 4: 
 var $ld$6$0=(($1)|0);
 var $18$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($1+4)|0);
 var $18$1=HEAP32[(($ld$7$1)>>2)];
 var $st$8$0=(($no_replay)|0);
 HEAP32[(($st$8$0)>>2)]=$18$0;
 var $st$9$1=(($no_replay+4)|0);
 HEAP32[(($st$9$1)>>2)]=$18$1;
 var $$etemp$10$0=8;
 var $$etemp$10$1=0;

 var $19=(($data+1)|0);
 var $20=$19;
 var $st$11$0=(($20)|0);
 tempBigInt=$18$0;HEAP8[($st$11$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$11$0)+(3))|0)]=tempBigInt&0xff;
 var $st$12$1=(($20+4)|0);
 tempBigInt=$18$1;HEAP8[($st$12$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$12$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$12$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$12$1)+(3))|0)]=tempBigInt&0xff;
 var $21=(($data+9)|0);
 var $22=(($onion_c)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+14900)|0);
 assert(32 % 1 === 0);(_memcpy($21, $24, 32)|0);
 var $25=(($nodes)|0);
 var $$etemp$13$0=448;
 var $$etemp$13$1=0;

 var $i_0_ph_i=32;var $count_0_ph_i=0;label=5;break;
 case 5: 
 var $count_0_ph_i;
 var $i_0_ph_i;
 var $i_0_i=$i_0_ph_i;label=6;break;
 case 6: 
 var $i_0_i;
 var $27=($i_0_i|0)==0;
 if($27){label=15;break;}else{label=7;break;}
 case 7: 
 var $29=((($i_0_i)-(1))|0);
 var $30=(($23+8+((($29)*(464))&-1)+56)|0);
 var $ld$14$0=(($30)|0);
 var $31$0=HEAP32[(($ld$14$0)>>2)];
 var $ld$15$1=(($30+4)|0);
 var $31$1=HEAP32[(($ld$15$1)>>2)];
 var $$etemp$16$0=122;
 var $$etemp$16$1=0;
 var $32$0=_i64Add($31$0,$31$1,$$etemp$16$0,$$etemp$16$1);var $32$1=tempRet0;
 var $ld$17$0=13552;
 var $33$0=HEAP32[(($ld$17$0)>>2)];
 var $ld$18$1=13556;
 var $33$1=HEAP32[(($ld$18$1)>>2)];
 var $34=(($32$1>>>0) > ($33$1>>>0)) | (((($32$1>>>0) == ($33$1>>>0) & ($32$0>>>0) >  ($33$0>>>0))));
 if($34){label=8;break;}else{var $assoc_0_i=0;label=9;break;}
 case 8: 
 var $36=(($23+8+((($29)*(464))&-1)+32)|0);
 var $assoc_0_i=$36;label=9;break;
 case 9: 
 var $assoc_0_i;
 var $38=(($23+8+((($29)*(464))&-1)+248)|0);
 var $39=(($23+8+((($29)*(464))&-1)+272)|0);
 var $ld$19$0=(($39)|0);
 var $40$0=HEAP32[(($ld$19$0)>>2)];
 var $ld$20$1=(($39+4)|0);
 var $40$1=HEAP32[(($ld$20$1)>>2)];
 var $$etemp$21$0=122;
 var $$etemp$21$1=0;
 var $41$0=_i64Add($40$0,$40$1,$$etemp$21$0,$$etemp$21$1);var $41$1=tempRet0;
 var $42=(($41$1>>>0) > ($33$1>>>0)) | (((($41$1>>>0) == ($33$1>>>0) & ($41$0>>>0) >  ($33$0>>>0))));
 if($42){label=10;break;}else{var $assoc_1_i=$assoc_0_i;label=12;break;}
 case 10: 
 var $44=($assoc_0_i|0)==0;
 if($44){var $assoc_11_i=$38;label=13;break;}else{label=11;break;}
 case 11: 
 var $46=_rand();
 var $47=$46&1;
 var $48=($47|0)==0;
 var $assoc_0__i=($48?$assoc_0_i:$38);
 var $assoc_1_i=$assoc_0__i;label=12;break;
 case 12: 
 var $assoc_1_i;
 var $50=($assoc_1_i|0)==0;
 if($50){var $i_0_i=$29;label=6;break;}else{var $assoc_11_i=$assoc_1_i;label=13;break;}
 case 13: 
 var $assoc_11_i;
 var $51=($count_0_ph_i&65535);
 var $52=(($nodes+((($51)*(56))&-1))|0);
 var $53=(($23+8+((($29)*(464))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($52, $53, 32)|0);
 var $54=(($nodes+((($51)*(56))&-1)+32)|0);
 var $55=(($assoc_11_i)|0);
 assert(24 % 1 === 0);(_memcpy($54, $55, 24)|0);
 var $56=((($count_0_ph_i)+(1))&65535);
 var $57=($56&65535)<8;
 if($57){var $i_0_ph_i=$29;var $count_0_ph_i=$56;label=5;break;}else{label=14;break;}
 case 14: 
 var $58=($56&65535);
 var $_ph=$58;label=16;break;
 case 15: 
 var $59=($count_0_ph_i&65535);
 var $60=(($count_0_ph_i<<16)>>16)==0;
 if($60){var $70=$59;label=21;break;}else{var $_ph=$59;label=16;break;}
 case 16: 
 var $_ph;
 var $i_03=0;label=17;break;
 case 17: 
 var $i_03;
 var $61=(($nodes+((($i_03)*(56))&-1)+33)|0);
 HEAP8[($61)]=0;
 var $62=(($nodes+((($i_03)*(56))&-1)+34)|0);
 HEAP8[($62)]=0;
 var $63=(($nodes+((($i_03)*(56))&-1)+35)|0);
 HEAP8[($63)]=0;
 var $64=(($nodes+((($i_03)*(56))&-1)+32)|0);
 var $65=HEAP8[($64)];
 if((($65<<24)>>24)==2){ label=18;break;}else if((($65<<24)>>24)==10){ label=19;break;}else{label=20;break;}
 case 18: 
 HEAP8[($64)]=2;
 label=20;break;
 case 19: 
 HEAP8[($64)]=10;
 label=20;break;
 case 20: 
 var $68=((($i_03)+(1))|0);
 var $69=($68>>>0)<($_ph>>>0);
 if($69){var $i_03=$68;label=17;break;}else{var $70=$_ph;label=21;break;}
 case 21: 
 var $70;
 var $71=(($data+41)|0);
 var $72=((($70)*(56))&-1);
 assert($72 % 1 === 0);(_memcpy($71, $25, $72)|0);
 var $73=(($onion_dht_both<<24)>>24)==1;
 var $_pre=((($72)+(41))|0);
 if($73){var $num1_01=-1;label=23;break;}else{label=22;break;}
 case 22: 
 var $75=_send_onion_data($onion_c,$2,$7,$_pre);
 var $76=(($onion_dht_both<<24)>>24)==0;
 if($76){var $num2_0=-1;var $num1_02=$75;label=24;break;}else{var $num1_01=$75;label=23;break;}
 case 23: 
 var $num1_01;
 var $77=_send_dht_fakeid($onion_c,$2,$7,$_pre);
 var $num2_0=$77;var $num1_02=$num1_01;label=24;break;
 case 24: 
 var $num1_02;
 var $num2_0;
 var $79=($num1_02|0)==-1;
 if($79){var $_1=$num2_0;label=26;break;}else{label=25;break;}
 case 25: 
 var $81=($num2_0|0)==-1;
 var $82=($81?0:$num2_0);
 var $num1_0_=((($82)+($num1_02))|0);
 STACKTOP=sp;return $num1_0_;
 case 26: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function _send_dht_fakeid($onion_c,$friend_num,$data,$length){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+2096)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $nonce_i=sp;
 var $temp_i=(sp)+(24);
 var $nonce=(sp)+(1048);
 var $packet=(sp)+(1072);
 var $1=(($onion_c+12)|0);
 var $2=HEAP16[(($1)>>1)];
 var $3=($2&65535);
 var $4=($3>>>0)>($friend_num>>>0);
 if($4){label=2;break;}else{var $_2=-1;label=15;break;}
 case 2: 
 var $6=(($onion_c+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($7+((($friend_num)*(2600))&-1)+2)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==0;
 if($10){var $_2=-1;label=15;break;}else{label=3;break;}
 case 3: 
 var $12=(($nonce)|0);
 var $_b_i=HEAP8[(136)];
 if($_b_i){var $i_01_i_i=0;label=5;break;}else{label=4;break;}
 case 4: 
 var $$etemp$1$0=24;
 var $$etemp$1$1=0;
 var $$etemp$0=15032;
 _randombytes($$etemp$0,$$etemp$1$0,$$etemp$1$1);
 HEAP8[(136)]=1;
 var $i_01_i_i=0;label=5;break;
 case 5: 
 var $i_01_i_i;
 var $14=((15032+$i_01_i_i)|0);
 var $15=HEAP8[($14)];
 var $16=((($15)+(1))&255);
 HEAP8[($14)]=$16;
 var $17=(($16<<24)>>24)==0;
 var $18=((($i_01_i_i)+(1))|0);
 var $19=($18>>>0)<24;
 var $or_cond_i_i=$17&$19;
 if($or_cond_i_i){var $i_01_i_i=$18;label=5;break;}else{label=6;break;}
 case 6: 
 assert(24 % 1 === 0);(_memcpy($12, 15032, 24)|0);
 var $20=((($length)+(72))|0);
 var $21=_llvm_stacksave();
 var $22=STACKTOP;STACKTOP = (STACKTOP + $20)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $23=(($onion_c)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=(($26+12)|0);
 assert(32 % 1 === 0);(_memcpy($22, $27, 32)|0);
 var $28=(($22+32)|0);
 assert(24 % 1 === 0);(_memcpy($28, $12, 24)|0);
 var $29=HEAP32[(($6)>>2)];
 var $30=(($29+((($friend_num)*(2600))&-1)+35)|0);
 var $31=(($26+44)|0);
 var $32=(($22+56)|0);
 var $33=_encrypt_data($30,$31,$12,$data,$length,$32);
 var $34=((($length)+(16))|0);
 var $35=($33|0)==($34|0);
 if($35){label=7;break;}else{var $_1=-1;label=14;break;}
 case 7: 
 var $37=(($packet)|0);
 var $$etemp$2$0=1024;
 var $$etemp$2$1=0;

 var $38=HEAP32[(($23)>>2)];
 var $39=(($38+14900)|0);
 var $40=(($38+14932)|0);
 var $41=HEAP32[(($6)>>2)];
 var $42=(($41+((($friend_num)*(2600))&-1)+3)|0);
 var $43=(($nonce_i)|0);
 var $$etemp$3$0=24;
 var $$etemp$3$1=0;

 var $44=((($length)+(178))|0);
 var $45=($44>>>0)>1024;
 if($45){var $_1=-1;label=14;break;}else{label=8;break;}
 case 8: 
 var $47=((($length)+(73))|0);
 var $48=(($temp_i)|0);
 var $$etemp$4$0=1024;
 var $$etemp$4$1=0;

 var $49=(($temp_i+1)|0);
 assert($20 % 1 === 0);(_memcpy($49, $22, $20)|0);
 HEAP8[($48)]=-100;
 var $_b_i_i=HEAP8[(136)];
 if($_b_i_i){var $i_01_i_i_i=0;label=10;break;}else{label=9;break;}
 case 9: 
 var $$etemp$6$0=24;
 var $$etemp$6$1=0;
 var $$etemp$5=15032;
 _randombytes($$etemp$5,$$etemp$6$0,$$etemp$6$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i=0;label=10;break;
 case 10: 
 var $i_01_i_i_i;
 var $51=((15032+$i_01_i_i_i)|0);
 var $52=HEAP8[($51)];
 var $53=((($52)+(1))&255);
 HEAP8[($51)]=$53;
 var $54=(($53<<24)>>24)==0;
 var $55=((($i_01_i_i_i)+(1))|0);
 var $56=($55>>>0)<24;
 var $or_cond_i_i_i=$54&$56;
 if($or_cond_i_i_i){var $i_01_i_i_i=$55;label=10;break;}else{label=11;break;}
 case 11: 
 assert(24 % 1 === 0);(_memcpy($43, 15032, 24)|0);
 var $57=(($packet+89)|0);
 var $58=_encrypt_data($42,$40,$43,$48,$47,$57);
 var $59=($58|0)==-1;
 if($59){var $_1=-1;label=14;break;}else{label=12;break;}
 case 12: 
 HEAP8[($37)]=32;
 var $60=(($packet+1)|0);
 assert(32 % 1 === 0);(_memcpy($60, $42, 32)|0);
 var $61=(($packet+33)|0);
 assert(32 % 1 === 0);(_memcpy($61, $39, 32)|0);
 var $62=(($packet+65)|0);
 assert(24 % 1 === 0);(_memcpy($62, $43, 24)|0);
 var $63=((($58)+(89))|0);
 var $$etemp$7$0=24;
 var $$etemp$7$1=0;

 var $64=($63|0)==-1;
 if($64){var $_1=-1;label=14;break;}else{label=13;break;}
 case 13: 
 var $66=HEAP32[(($23)>>2)];
 var $67=HEAP32[(($6)>>2)];
 var $68=(($67+((($friend_num)*(2600))&-1)+3)|0);
 var $69=_route_tofriend($66,$68,$37,$63);
 var $_1=$69;label=14;break;
 case 14: 
 var $_1;
 _llvm_stackrestore($21);
 var $_2=$_1;label=15;break;
 case 15: 
 var $_2;
 STACKTOP=sp;return $_2;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_onetimeauth_poly1305_ref($out,$in,$inlen$0,$inlen$1,$k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+216)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $horig_i=sp;
 var $r=(sp)+(72);
 var $h=(sp)+(144);
 var $h3_i=$h;
 var $c=STACKTOP;STACKTOP = (STACKTOP + 68)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $0=$c;
 var $1=$r;
 var $$etemp$0$0=68;
 var $$etemp$0$1=0;

 var $$etemp$1$0=68;
 var $$etemp$1$1=0;

 var $$etemp$2$0=68;
 var $$etemp$2$1=0;

 var $2=HEAP8[($k)];
 var $3=($2&255);
 var $4=(($r)|0);
 HEAP32[(($4)>>2)]=$3;
 var $5=(($k+1)|0);
 var $6=HEAP8[($5)];
 var $7=($6&255);
 var $8=(($r+4)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=(($k+2)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=(($r+8)|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=(($k+3)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15&15;
 var $17=(($r+12)|0);
 HEAP32[(($17)>>2)]=$16;
 var $18=(($k+4)|0);
 var $19=HEAP8[($18)];
 var $20=($19&255);
 var $21=$20&252;
 var $22=(($r+16)|0);
 HEAP32[(($22)>>2)]=$21;
 var $23=(($k+5)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=(($r+20)|0);
 HEAP32[(($26)>>2)]=$25;
 var $27=(($k+6)|0);
 var $28=HEAP8[($27)];
 var $29=($28&255);
 var $30=(($r+24)|0);
 HEAP32[(($30)>>2)]=$29;
 var $31=(($k+7)|0);
 var $32=HEAP8[($31)];
 var $33=($32&255);
 var $34=$33&15;
 var $35=(($r+28)|0);
 HEAP32[(($35)>>2)]=$34;
 var $36=(($k+8)|0);
 var $37=HEAP8[($36)];
 var $38=($37&255);
 var $39=$38&252;
 var $40=(($r+32)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=(($k+9)|0);
 var $42=HEAP8[($41)];
 var $43=($42&255);
 var $44=(($r+36)|0);
 HEAP32[(($44)>>2)]=$43;
 var $45=(($k+10)|0);
 var $46=HEAP8[($45)];
 var $47=($46&255);
 var $48=(($r+40)|0);
 HEAP32[(($48)>>2)]=$47;
 var $49=(($k+11)|0);
 var $50=HEAP8[($49)];
 var $51=($50&255);
 var $52=$51&15;
 var $53=(($r+44)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=(($k+12)|0);
 var $55=HEAP8[($54)];
 var $56=($55&255);
 var $57=$56&252;
 var $58=(($r+48)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($k+13)|0);
 var $60=HEAP8[($59)];
 var $61=($60&255);
 var $62=(($r+52)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=(($k+14)|0);
 var $64=HEAP8[($63)];
 var $65=($64&255);
 var $66=(($r+56)|0);
 HEAP32[(($66)>>2)]=$65;
 var $67=(($k+15)|0);
 var $68=HEAP8[($67)];
 var $69=($68&255);
 var $70=$69&15;
 var $71=(($r+60)|0);
 HEAP32[(($71)>>2)]=$70;
 var $72=(($r+64)|0);
 HEAP32[(($72)>>2)]=0;
 _memset($h3_i, 0, 68)|0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $73=(($inlen$0|0) == ($$etemp$3$0|0)) & (($inlen$1|0) == ($$etemp$3$1|0));
 if($73){label=2;break;}else{label=3;break;}
 case 2: 
 var $_pre34=$horig_i;
 var $261=0;var $_pre_phi=$_pre34;label=17;break;
 case 3: 
 var $74=(($h)|0);
 var $75=$horig_i;
 var $76=(($h+4)|0);
 var $77=(($h+8)|0);
 var $78=(($h+12)|0);
 var $79=(($h+16)|0);
 var $80=(($h+20)|0);
 var $81=(($h+24)|0);
 var $82=(($h+28)|0);
 var $83=(($h+32)|0);
 var $84=(($h+36)|0);
 var $85=(($h+40)|0);
 var $86=(($h+44)|0);
 var $87=(($h+48)|0);
 var $88=(($h+52)|0);
 var $89=(($h+56)|0);
 var $90=(($h+60)|0);
 var $91=(($h+64)|0);
 var $_0117$1=$inlen$1;var $_0117$0=$inlen$0;var $_019=$in;var $92=0;label=4;break;
 case 4: 
 var $92;
 var $_019;
 var $_0117$0;
 var $_0117$1;
 _memset($0, 0, 68)|0;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $93=(($_0117$0|0) == ($$etemp$4$0|0)) & (($_0117$1|0) == ($$etemp$4$1|0));
 if($93){var $j_2_lcssa=0;var $_lcssa$1=0;var $_lcssa$0=0;label=6;break;}else{var $j_210=0;label=5;break;}
 case 5: 
 var $j_210;
 var $94=(($_019+$j_210)|0);
 var $95=HEAP8[($94)];
 var $96=($95&255);
 var $97=(($c+($j_210<<2))|0);
 HEAP32[(($97)>>2)]=$96;
 var $98=((($j_210)+(1))|0);
 var $99=($98>>>0)<16;
 var $100$0=$98;
 var $100$1=0;
 var $101=(($100$1>>>0) < ($_0117$1>>>0)) | (((($100$1>>>0) == ($_0117$1>>>0) & ($100$0>>>0) <  ($_0117$0>>>0))));
 var $or_cond=$99&$101;
 if($or_cond){var $j_210=$98;label=5;break;}else{var $j_2_lcssa=$98;var $_lcssa$1=$100$1;var $_lcssa$0=$100$0;label=6;break;}
 case 6: 
 var $_lcssa$0;
 var $_lcssa$1;
 var $j_2_lcssa;
 var $102=(($c+($j_2_lcssa<<2))|0);
 HEAP32[(($102)>>2)]=1;
 var $103=(($_019+$j_2_lcssa)|0);
 var $j_01_i=0;var $u_02_i=0;var $105=$92;label=7;break;
 case 7: 
 var $105;
 var $u_02_i;
 var $j_01_i;
 var $106=(($h+($j_01_i<<2))|0);
 var $107=(($c+($j_01_i<<2))|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=((($105)+($u_02_i))|0);
 var $110=((($109)+($108))|0);
 var $111=$110&255;
 HEAP32[(($106)>>2)]=$111;
 var $112=((($j_01_i)+(1))|0);
 var $113=($112>>>0)<17;
 if($113){label=8;break;}else{label=9;break;}
 case 8: 
 var $114=$110>>>8;
 var $_phi_trans_insert32=(($h+($112<<2))|0);
 var $_pre33=HEAP32[(($_phi_trans_insert32)>>2)];
 var $j_01_i=$112;var $u_02_i=$114;var $105=$_pre33;label=7;break;
 case 9: 
 var $115$0=_i64Subtract($_0117$0,$_0117$1,$_lcssa$0,$_lcssa$1);var $115$1=tempRet0;
 var $$etemp$5$0=68;
 var $$etemp$5$1=0;

 var $i_07_i=0;label=10;break;
 case 10: 
 var $i_07_i;
 var $j_03_i=0;var $u_04_i=0;label=11;break;
 case 11: 
 var $u_04_i;
 var $j_03_i;
 var $117=(($h+($j_03_i<<2))|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=((($i_07_i)-($j_03_i))|0);
 var $120=(($r+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(Math_imul($121,$118)|0);
 var $123=((($122)+($u_04_i))|0);
 var $124=((($j_03_i)+(1))|0);
 var $125=($124>>>0)>($i_07_i>>>0);
 if($125){label=12;break;}else{var $j_03_i=$124;var $u_04_i=$123;label=11;break;}
 case 12: 
 var $127=((($i_07_i)+(1))|0);
 var $128=($127>>>0)<17;
 if($128){label=13;break;}else{label=16;break;}
 case 13: 
 var $129=((($i_07_i)+(17))|0);
 var $j_15_i=$127;var $u_16_i=$123;label=14;break;
 case 14: 
 var $u_16_i;
 var $j_15_i;
 var $131=(($h+($j_15_i<<2))|0);
 var $132=HEAP32[(($131)>>2)];
 var $133=((($132)*(320))&-1);
 var $134=((($129)-($j_15_i))|0);
 var $135=(($r+($134<<2))|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(Math_imul($133,$136)|0);
 var $138=((($137)+($u_16_i))|0);
 var $139=((($j_15_i)+(1))|0);
 var $140=($139>>>0)<17;
 if($140){var $j_15_i=$139;var $u_16_i=$138;label=14;break;}else{label=15;break;}
 case 15: 
 var $141=(($horig_i+($i_07_i<<2))|0);
 HEAP32[(($141)>>2)]=$138;
 var $i_07_i=$127;label=10;break;
 case 16: 
 var $142=(($horig_i+($i_07_i<<2))|0);
 HEAP32[(($142)>>2)]=$123;
 assert(68 % 1 === 0);(_memcpy($h3_i, $75, 68)|0);
 var $143=HEAP32[(($74)>>2)];
 var $144=$143&255;
 var $145=$143>>>8;
 var $146=HEAP32[(($76)>>2)];
 var $147=((($146)+($145))|0);
 var $148=$147&255;
 var $149=$147>>>8;
 var $150=HEAP32[(($77)>>2)];
 var $151=((($149)+($150))|0);
 var $152=$151&255;
 var $153=$151>>>8;
 var $154=HEAP32[(($78)>>2)];
 var $155=((($153)+($154))|0);
 var $156=$155&255;
 var $157=$155>>>8;
 var $158=HEAP32[(($79)>>2)];
 var $159=((($157)+($158))|0);
 var $160=$159&255;
 var $161=$159>>>8;
 var $162=HEAP32[(($80)>>2)];
 var $163=((($161)+($162))|0);
 var $164=$163&255;
 var $165=$163>>>8;
 var $166=HEAP32[(($81)>>2)];
 var $167=((($165)+($166))|0);
 var $168=$167&255;
 var $169=$167>>>8;
 var $170=HEAP32[(($82)>>2)];
 var $171=((($169)+($170))|0);
 var $172=$171&255;
 var $173=$171>>>8;
 var $174=HEAP32[(($83)>>2)];
 var $175=((($173)+($174))|0);
 var $176=$175&255;
 var $177=$175>>>8;
 var $178=HEAP32[(($84)>>2)];
 var $179=((($177)+($178))|0);
 var $180=$179&255;
 var $181=$179>>>8;
 var $182=HEAP32[(($85)>>2)];
 var $183=((($181)+($182))|0);
 var $184=$183&255;
 var $185=$183>>>8;
 var $186=HEAP32[(($86)>>2)];
 var $187=((($185)+($186))|0);
 var $188=$187&255;
 var $189=$187>>>8;
 var $190=HEAP32[(($87)>>2)];
 var $191=((($189)+($190))|0);
 var $192=$191&255;
 var $193=$191>>>8;
 var $194=HEAP32[(($88)>>2)];
 var $195=((($193)+($194))|0);
 var $196=$195&255;
 var $197=$195>>>8;
 var $198=HEAP32[(($89)>>2)];
 var $199=((($197)+($198))|0);
 var $200=$199&255;
 var $201=$199>>>8;
 var $202=HEAP32[(($90)>>2)];
 var $203=((($201)+($202))|0);
 var $204=$203&255;
 var $205=$203>>>8;
 var $206=HEAP32[(($91)>>2)];
 var $207=((($205)+($206))|0);
 var $208=$207&3;
 var $209=$207>>>2;
 var $210=((($209)*(5))&-1);
 var $211=((($210)+($144))|0);
 var $fold_i_i=((($210)+($143))|0);
 var $212=$fold_i_i&255;
 HEAP32[(($74)>>2)]=$212;
 var $213=$211>>>8;
 var $214=((($213)+($148))|0);
 var $fold5_i_i=((($213)+($147))|0);
 var $215=$fold5_i_i&255;
 HEAP32[(($76)>>2)]=$215;
 var $216=$214>>>8;
 var $217=((($216)+($152))|0);
 var $fold6_i_i=((($216)+($151))|0);
 var $218=$fold6_i_i&255;
 HEAP32[(($77)>>2)]=$218;
 var $219=$217>>>8;
 var $220=((($219)+($156))|0);
 var $fold7_i_i=((($219)+($155))|0);
 var $221=$fold7_i_i&255;
 HEAP32[(($78)>>2)]=$221;
 var $222=$220>>>8;
 var $223=((($222)+($160))|0);
 var $fold8_i_i=((($222)+($159))|0);
 var $224=$fold8_i_i&255;
 HEAP32[(($79)>>2)]=$224;
 var $225=$223>>>8;
 var $226=((($225)+($164))|0);
 var $fold9_i_i=((($225)+($163))|0);
 var $227=$fold9_i_i&255;
 HEAP32[(($80)>>2)]=$227;
 var $228=$226>>>8;
 var $229=((($228)+($168))|0);
 var $fold10_i_i=((($228)+($167))|0);
 var $230=$fold10_i_i&255;
 HEAP32[(($81)>>2)]=$230;
 var $231=$229>>>8;
 var $232=((($231)+($172))|0);
 var $fold11_i_i=((($231)+($171))|0);
 var $233=$fold11_i_i&255;
 HEAP32[(($82)>>2)]=$233;
 var $234=$232>>>8;
 var $235=((($234)+($176))|0);
 var $fold12_i_i=((($234)+($175))|0);
 var $236=$fold12_i_i&255;
 HEAP32[(($83)>>2)]=$236;
 var $237=$235>>>8;
 var $238=((($237)+($180))|0);
 var $fold13_i_i=((($237)+($179))|0);
 var $239=$fold13_i_i&255;
 HEAP32[(($84)>>2)]=$239;
 var $240=$238>>>8;
 var $241=((($240)+($184))|0);
 var $fold14_i_i=((($240)+($183))|0);
 var $242=$fold14_i_i&255;
 HEAP32[(($85)>>2)]=$242;
 var $243=$241>>>8;
 var $244=((($243)+($188))|0);
 var $fold15_i_i=((($243)+($187))|0);
 var $245=$fold15_i_i&255;
 HEAP32[(($86)>>2)]=$245;
 var $246=$244>>>8;
 var $247=((($246)+($192))|0);
 var $fold16_i_i=((($246)+($191))|0);
 var $248=$fold16_i_i&255;
 HEAP32[(($87)>>2)]=$248;
 var $249=$247>>>8;
 var $250=((($249)+($196))|0);
 var $fold17_i_i=((($249)+($195))|0);
 var $251=$fold17_i_i&255;
 HEAP32[(($88)>>2)]=$251;
 var $252=$250>>>8;
 var $253=((($252)+($200))|0);
 var $fold18_i_i=((($252)+($199))|0);
 var $254=$fold18_i_i&255;
 HEAP32[(($89)>>2)]=$254;
 var $255=$253>>>8;
 var $256=((($255)+($204))|0);
 var $fold19_i_i=((($255)+($203))|0);
 var $257=$fold19_i_i&255;
 HEAP32[(($90)>>2)]=$257;
 var $258=$256>>>8;
 var $259=((($258)+($208))|0);
 HEAP32[(($91)>>2)]=$259;
 var $$etemp$6$0=68;
 var $$etemp$6$1=0;

 var $260=(($_0117$0|0) == ($_lcssa$0|0)) & (($_0117$1|0) == ($_lcssa$1|0));
 if($260){var $261=$212;var $_pre_phi=$75;label=17;break;}else{var $_0117$1=$115$1;var $_0117$0=$115$0;var $_019=$103;var $92=$212;label=4;break;}
 case 17: 
 var $_pre_phi;
 var $261;
 var $$etemp$7$0=68;
 var $$etemp$7$1=0;

 assert(68 % 1 === 0);(_memcpy($_pre_phi, $h3_i, 68)|0);
 var $j_01_i_i=0;var $u_02_i_i=0;var $263=$261;label=18;break;
 case 18: 
 var $263;
 var $u_02_i_i;
 var $j_01_i_i;
 var $264=(($h+($j_01_i_i<<2))|0);
 var $265=((272+($j_01_i_i<<2))|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=((($263)+($u_02_i_i))|0);
 var $268=((($267)+($266))|0);
 var $269=$268&255;
 HEAP32[(($264)>>2)]=$269;
 var $270=((($j_01_i_i)+(1))|0);
 var $271=($270>>>0)<17;
 if($271){label=19;break;}else{label=20;break;}
 case 19: 
 var $272=$268>>>8;
 var $_phi_trans_insert=(($h+($270<<2))|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $j_01_i_i=$270;var $u_02_i_i=$272;var $263=$_pre;label=18;break;
 case 20: 
 var $273=(($h+64)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=$274>>>7;
 var $276=(((-$275))|0);
 var $j_11_i=0;label=21;break;
 case 21: 
 var $j_11_i;
 var $278=(($horig_i+($j_11_i<<2))|0);
 var $279=HEAP32[(($278)>>2)];
 var $280=(($h+($j_11_i<<2))|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=$281^$279;
 var $283=$282&$276;
 var $284=$283^$281;
 HEAP32[(($280)>>2)]=$284;
 var $285=((($j_11_i)+(1))|0);
 var $286=($285>>>0)<17;
 if($286){var $j_11_i=$285;label=21;break;}else{label=22;break;}
 case 22: 
 var $287=(($k+16)|0);
 var $288=HEAP8[($287)];
 var $289=($288&255);
 var $290=(($c)|0);
 HEAP32[(($290)>>2)]=$289;
 var $291=(($k+17)|0);
 var $292=HEAP8[($291)];
 var $293=($292&255);
 var $294=(($c+4)|0);
 HEAP32[(($294)>>2)]=$293;
 var $295=(($k+18)|0);
 var $296=HEAP8[($295)];
 var $297=($296&255);
 var $298=(($c+8)|0);
 HEAP32[(($298)>>2)]=$297;
 var $299=(($k+19)|0);
 var $300=HEAP8[($299)];
 var $301=($300&255);
 var $302=(($c+12)|0);
 HEAP32[(($302)>>2)]=$301;
 var $303=(($k+20)|0);
 var $304=HEAP8[($303)];
 var $305=($304&255);
 var $306=(($c+16)|0);
 HEAP32[(($306)>>2)]=$305;
 var $307=(($k+21)|0);
 var $308=HEAP8[($307)];
 var $309=($308&255);
 var $310=(($c+20)|0);
 HEAP32[(($310)>>2)]=$309;
 var $311=(($k+22)|0);
 var $312=HEAP8[($311)];
 var $313=($312&255);
 var $314=(($c+24)|0);
 HEAP32[(($314)>>2)]=$313;
 var $315=(($k+23)|0);
 var $316=HEAP8[($315)];
 var $317=($316&255);
 var $318=(($c+28)|0);
 HEAP32[(($318)>>2)]=$317;
 var $319=(($k+24)|0);
 var $320=HEAP8[($319)];
 var $321=($320&255);
 var $322=(($c+32)|0);
 HEAP32[(($322)>>2)]=$321;
 var $323=(($k+25)|0);
 var $324=HEAP8[($323)];
 var $325=($324&255);
 var $326=(($c+36)|0);
 HEAP32[(($326)>>2)]=$325;
 var $327=(($k+26)|0);
 var $328=HEAP8[($327)];
 var $329=($328&255);
 var $330=(($c+40)|0);
 HEAP32[(($330)>>2)]=$329;
 var $331=(($k+27)|0);
 var $332=HEAP8[($331)];
 var $333=($332&255);
 var $334=(($c+44)|0);
 HEAP32[(($334)>>2)]=$333;
 var $335=(($k+28)|0);
 var $336=HEAP8[($335)];
 var $337=($336&255);
 var $338=(($c+48)|0);
 HEAP32[(($338)>>2)]=$337;
 var $339=(($k+29)|0);
 var $340=HEAP8[($339)];
 var $341=($340&255);
 var $342=(($c+52)|0);
 HEAP32[(($342)>>2)]=$341;
 var $343=(($k+30)|0);
 var $344=HEAP8[($343)];
 var $345=($344&255);
 var $346=(($c+56)|0);
 HEAP32[(($346)>>2)]=$345;
 var $347=(($k+31)|0);
 var $348=HEAP8[($347)];
 var $349=($348&255);
 var $350=(($c+60)|0);
 HEAP32[(($350)>>2)]=$349;
 var $351=(($c+64)|0);
 HEAP32[(($351)>>2)]=0;
 var $j_01_i4=0;var $u_02_i3=0;var $353=$289;label=23;break;
 case 23: 
 var $353;
 var $u_02_i3;
 var $j_01_i4;
 var $354=(($h+($j_01_i4<<2))|0);
 var $355=HEAP32[(($354)>>2)];
 var $356=((($355)+($u_02_i3))|0);
 var $357=((($356)+($353))|0);
 var $358=$357&255;
 HEAP32[(($354)>>2)]=$358;
 var $359=((($j_01_i4)+(1))|0);
 var $360=($359>>>0)<17;
 if($360){label=24;break;}else{label=25;break;}
 case 24: 
 var $361=$357>>>8;
 var $_phi_trans_insert30=(($c+($359<<2))|0);
 var $_pre31=HEAP32[(($_phi_trans_insert30)>>2)];
 var $j_01_i4=$359;var $u_02_i3=$361;var $353=$_pre31;label=23;break;
 case 25: 
 var $362=(($h)|0);
 var $363=HEAP32[(($362)>>2)];
 var $364=(($363)&255);
 HEAP8[($out)]=$364;
 var $365=(($h+4)|0);
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366)&255);
 var $368=(($out+1)|0);
 HEAP8[($368)]=$367;
 var $369=(($h+8)|0);
 var $370=HEAP32[(($369)>>2)];
 var $371=(($370)&255);
 var $372=(($out+2)|0);
 HEAP8[($372)]=$371;
 var $373=(($h+12)|0);
 var $374=HEAP32[(($373)>>2)];
 var $375=(($374)&255);
 var $376=(($out+3)|0);
 HEAP8[($376)]=$375;
 var $377=(($h+16)|0);
 var $378=HEAP32[(($377)>>2)];
 var $379=(($378)&255);
 var $380=(($out+4)|0);
 HEAP8[($380)]=$379;
 var $381=(($h+20)|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=(($382)&255);
 var $384=(($out+5)|0);
 HEAP8[($384)]=$383;
 var $385=(($h+24)|0);
 var $386=HEAP32[(($385)>>2)];
 var $387=(($386)&255);
 var $388=(($out+6)|0);
 HEAP8[($388)]=$387;
 var $389=(($h+28)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=(($390)&255);
 var $392=(($out+7)|0);
 HEAP8[($392)]=$391;
 var $393=(($h+32)|0);
 var $394=HEAP32[(($393)>>2)];
 var $395=(($394)&255);
 var $396=(($out+8)|0);
 HEAP8[($396)]=$395;
 var $397=(($h+36)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398)&255);
 var $400=(($out+9)|0);
 HEAP8[($400)]=$399;
 var $401=(($h+40)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=(($402)&255);
 var $404=(($out+10)|0);
 HEAP8[($404)]=$403;
 var $405=(($h+44)|0);
 var $406=HEAP32[(($405)>>2)];
 var $407=(($406)&255);
 var $408=(($out+11)|0);
 HEAP8[($408)]=$407;
 var $409=(($h+48)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($410)&255);
 var $412=(($out+12)|0);
 HEAP8[($412)]=$411;
 var $413=(($h+52)|0);
 var $414=HEAP32[(($413)>>2)];
 var $415=(($414)&255);
 var $416=(($out+13)|0);
 HEAP8[($416)]=$415;
 var $417=(($h+56)|0);
 var $418=HEAP32[(($417)>>2)];
 var $419=(($418)&255);
 var $420=(($out+14)|0);
 HEAP8[($420)]=$419;
 var $421=(($h+60)|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=(($422)&255);
 var $424=(($out+15)|0);
 HEAP8[($424)]=$423;
 var $$etemp$8$0=68;
 var $$etemp$8$1=0;

 var $$etemp$9$0=68;
 var $$etemp$9$1=0;

 var $$etemp$10$0=68;
 var $$etemp$10$1=0;

 STACKTOP=sp;return 0;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_onetimeauth_poly1305_ref_implementation_name(){
 var label=0;


 return 2040;
}


function _crypto_onetimeauth_poly1305_ref_verify($h,$in,$inlen$0,$inlen$1,$k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);

 var $correct=sp;
 var $1=(($correct)|0);
 var $2=_crypto_onetimeauth_poly1305_ref($1,$in,$inlen$0,$inlen$1,$k);
 var $3=HEAP8[($h)];
 var $4=HEAP8[($1)];
 var $5=$4^$3;
 var $6=(($h+1)|0);
 var $7=HEAP8[($6)];
 var $8=(($correct+1)|0);
 var $9=HEAP8[($8)];
 var $10=$9^$7;
 var $11=$10|$5;
 var $12=(($h+2)|0);
 var $13=HEAP8[($12)];
 var $14=(($correct+2)|0);
 var $15=HEAP8[($14)];
 var $16=$15^$13;
 var $17=$11|$16;
 var $18=(($h+3)|0);
 var $19=HEAP8[($18)];
 var $20=(($correct+3)|0);
 var $21=HEAP8[($20)];
 var $22=$21^$19;
 var $23=$17|$22;
 var $24=(($h+4)|0);
 var $25=HEAP8[($24)];
 var $26=(($correct+4)|0);
 var $27=HEAP8[($26)];
 var $28=$27^$25;
 var $29=$23|$28;
 var $30=(($h+5)|0);
 var $31=HEAP8[($30)];
 var $32=(($correct+5)|0);
 var $33=HEAP8[($32)];
 var $34=$33^$31;
 var $35=$29|$34;
 var $36=(($h+6)|0);
 var $37=HEAP8[($36)];
 var $38=(($correct+6)|0);
 var $39=HEAP8[($38)];
 var $40=$39^$37;
 var $41=$35|$40;
 var $42=(($h+7)|0);
 var $43=HEAP8[($42)];
 var $44=(($correct+7)|0);
 var $45=HEAP8[($44)];
 var $46=$45^$43;
 var $47=$41|$46;
 var $48=(($h+8)|0);
 var $49=HEAP8[($48)];
 var $50=(($correct+8)|0);
 var $51=HEAP8[($50)];
 var $52=$51^$49;
 var $53=$47|$52;
 var $54=(($h+9)|0);
 var $55=HEAP8[($54)];
 var $56=(($correct+9)|0);
 var $57=HEAP8[($56)];
 var $58=$57^$55;
 var $59=$53|$58;
 var $60=(($h+10)|0);
 var $61=HEAP8[($60)];
 var $62=(($correct+10)|0);
 var $63=HEAP8[($62)];
 var $64=$63^$61;
 var $65=$59|$64;
 var $66=(($h+11)|0);
 var $67=HEAP8[($66)];
 var $68=(($correct+11)|0);
 var $69=HEAP8[($68)];
 var $70=$69^$67;
 var $71=$65|$70;
 var $72=(($h+12)|0);
 var $73=HEAP8[($72)];
 var $74=(($correct+12)|0);
 var $75=HEAP8[($74)];
 var $76=$75^$73;
 var $77=$71|$76;
 var $78=(($h+13)|0);
 var $79=HEAP8[($78)];
 var $80=(($correct+13)|0);
 var $81=HEAP8[($80)];
 var $82=$81^$79;
 var $83=$77|$82;
 var $84=(($h+14)|0);
 var $85=HEAP8[($84)];
 var $86=(($correct+14)|0);
 var $87=HEAP8[($86)];
 var $88=$87^$85;
 var $89=$83|$88;
 var $90=(($h+15)|0);
 var $91=HEAP8[($90)];
 var $92=(($correct+15)|0);
 var $93=HEAP8[($92)];
 var $94=$93^$91;
 var $95=$89|$94;
 var $96=($95&255);
 var $97=((($96)+(511))|0);
 var $98=$97>>>8;
 var $99=$98&1;
 var $100=((($99)-(1))|0);
 STACKTOP=sp;return $100;
}


function _randombytes($buf,$buf_len$0,$buf_len$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $$etemp$0$0=0;
 var $$etemp$0$1=1;
 var $1=(($buf_len$1>>>0) < ($$etemp$0$1>>>0)) | (((($buf_len$1>>>0) == ($$etemp$0$1>>>0) & ($buf_len$0>>>0) <  ($$etemp$0$0>>>0))));
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 ___assert_fail(1792,3552,62,4640);
 throw "Reached an unreachable!";
 case 3: 
 var $4$0=$buf_len$0;
 var $4=$4$0;
 var $_b_i=HEAP8[(8)];
 if($_b_i){label=4;break;}else{var $device_0_i_i_i_i_i=120;var $5=3536;label=5;break;}
 case 4: 
 var $_pre_i=HEAP32[((16)>>2)];
 var $16=$_pre_i;label=11;break;
 case 5: 
 var $5;
 var $device_0_i_i_i_i_i;
 var $6=_access($5,4);
 var $7=($6|0)==0;
 if($7){label=8;break;}else{label=6;break;}
 case 6: 
 var $9=(($device_0_i_i_i_i_i+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=7;break;}else{var $device_0_i_i_i_i_i=$9;var $5=$10;label=5;break;}
 case 7: 
 HEAP32[((16)>>2)]=-1;
 label=9;break;
 case 8: 
 var $12=HEAP32[(($device_0_i_i_i_i_i)>>2)];
 var $13=_open($12,0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP32[((16)>>2)]=$13;
 var $14=($13|0)==-1;
 if($14){label=9;break;}else{label=10;break;}
 case 9: 
 _abort();
 throw "Reached an unreachable!";
 case 10: 
 HEAP8[(8)]=1;
 var $16=$13;label=11;break;
 case 11: 
 var $16;
 var $buf_0_ph_i_i=$buf;var $_01_ph_i_i=$4;label=12;break;
 case 12: 
 var $_01_ph_i_i;
 var $buf_0_ph_i_i;
 label=13;break;
 case 13: 
 var $18=_read($16,$buf_0_ph_i_i,$_01_ph_i_i);
 var $19=($18|0)<0;
 if($19){label=14;break;}else{label=15;break;}
 case 14: 
 var $21=___errno_location();
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==4;
 if($23){label=13;break;}else{var $_0_i_i=$18;label=18;break;}
 case 15: 
 var $24=($18|0)==0;
 if($24){var $buf_1_i_i=$buf_0_ph_i_i;label=17;break;}else{label=16;break;}
 case 16: 
 var $26=((($_01_ph_i_i)-($18))|0);
 var $27=(($buf_0_ph_i_i+$18)|0);
 var $28=($_01_ph_i_i|0)==($18|0);
 if($28){var $buf_1_i_i=$27;label=17;break;}else{var $buf_0_ph_i_i=$27;var $_01_ph_i_i=$26;label=12;break;}
 case 17: 
 var $buf_1_i_i;
 var $30=$buf_1_i_i;
 var $31=$buf;
 var $32=((($30)-($31))|0);
 var $_0_i_i=$32;label=18;break;
 case 18: 
 var $_0_i_i;
 var $33=($_0_i_i|0)==($4|0);
 if($33){label=20;break;}else{label=19;break;}
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_core_salsa20($out,$in,$k,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($c)];
 var $2=($1&255);
 var $3=(($c+1)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=$5<<8;
 var $7=$6|$2;
 var $8=(($c+2)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10<<16;
 var $12=$7|$11;
 var $13=(($c+3)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15<<24;
 var $17=$12|$16;
 var $18=HEAP8[($k)];
 var $19=($18&255);
 var $20=(($k+1)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22<<8;
 var $24=$23|$19;
 var $25=(($k+2)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=$27<<16;
 var $29=$24|$28;
 var $30=(($k+3)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$32<<24;
 var $34=$29|$33;
 var $35=(($k+4)|0);
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=(($k+5)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=$40<<8;
 var $42=$41|$37;
 var $43=(($k+6)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=$45<<16;
 var $47=$42|$46;
 var $48=(($k+7)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$50<<24;
 var $52=$47|$51;
 var $53=(($k+8)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=(($k+9)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=$58<<8;
 var $60=$59|$55;
 var $61=(($k+10)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=$63<<16;
 var $65=$60|$64;
 var $66=(($k+11)|0);
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=$68<<24;
 var $70=$65|$69;
 var $71=(($k+12)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=(($k+13)|0);
 var $75=HEAP8[($74)];
 var $76=($75&255);
 var $77=$76<<8;
 var $78=$77|$73;
 var $79=(($k+14)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=$81<<16;
 var $83=$78|$82;
 var $84=(($k+15)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=$86<<24;
 var $88=$83|$87;
 var $89=(($c+4)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 var $92=(($c+5)|0);
 var $93=HEAP8[($92)];
 var $94=($93&255);
 var $95=$94<<8;
 var $96=$95|$91;
 var $97=(($c+6)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$99<<16;
 var $101=$96|$100;
 var $102=(($c+7)|0);
 var $103=HEAP8[($102)];
 var $104=($103&255);
 var $105=$104<<24;
 var $106=$101|$105;
 var $107=HEAP8[($in)];
 var $108=($107&255);
 var $109=(($in+1)|0);
 var $110=HEAP8[($109)];
 var $111=($110&255);
 var $112=$111<<8;
 var $113=$112|$108;
 var $114=(($in+2)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$116<<16;
 var $118=$113|$117;
 var $119=(($in+3)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$121<<24;
 var $123=$118|$122;
 var $124=(($in+4)|0);
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=(($in+5)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=$129<<8;
 var $131=$130|$126;
 var $132=(($in+6)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$134<<16;
 var $136=$131|$135;
 var $137=(($in+7)|0);
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=$139<<24;
 var $141=$136|$140;
 var $142=(($in+8)|0);
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=(($in+9)|0);
 var $146=HEAP8[($145)];
 var $147=($146&255);
 var $148=$147<<8;
 var $149=$148|$144;
 var $150=(($in+10)|0);
 var $151=HEAP8[($150)];
 var $152=($151&255);
 var $153=$152<<16;
 var $154=$149|$153;
 var $155=(($in+11)|0);
 var $156=HEAP8[($155)];
 var $157=($156&255);
 var $158=$157<<24;
 var $159=$154|$158;
 var $160=(($in+12)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 var $163=(($in+13)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=$165<<8;
 var $167=$166|$162;
 var $168=(($in+14)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 var $171=$170<<16;
 var $172=$167|$171;
 var $173=(($in+15)|0);
 var $174=HEAP8[($173)];
 var $175=($174&255);
 var $176=$175<<24;
 var $177=$172|$176;
 var $178=(($c+8)|0);
 var $179=HEAP8[($178)];
 var $180=($179&255);
 var $181=(($c+9)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=$183<<8;
 var $185=$184|$180;
 var $186=(($c+10)|0);
 var $187=HEAP8[($186)];
 var $188=($187&255);
 var $189=$188<<16;
 var $190=$185|$189;
 var $191=(($c+11)|0);
 var $192=HEAP8[($191)];
 var $193=($192&255);
 var $194=$193<<24;
 var $195=$190|$194;
 var $196=(($k+16)|0);
 var $197=HEAP8[($196)];
 var $198=($197&255);
 var $199=(($k+17)|0);
 var $200=HEAP8[($199)];
 var $201=($200&255);
 var $202=$201<<8;
 var $203=$202|$198;
 var $204=(($k+18)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$206<<16;
 var $208=$203|$207;
 var $209=(($k+19)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 var $212=$211<<24;
 var $213=$208|$212;
 var $214=(($k+20)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=(($k+21)|0);
 var $218=HEAP8[($217)];
 var $219=($218&255);
 var $220=$219<<8;
 var $221=$220|$216;
 var $222=(($k+22)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=$224<<16;
 var $226=$221|$225;
 var $227=(($k+23)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=$229<<24;
 var $231=$226|$230;
 var $232=(($k+24)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=(($k+25)|0);
 var $236=HEAP8[($235)];
 var $237=($236&255);
 var $238=$237<<8;
 var $239=$238|$234;
 var $240=(($k+26)|0);
 var $241=HEAP8[($240)];
 var $242=($241&255);
 var $243=$242<<16;
 var $244=$239|$243;
 var $245=(($k+27)|0);
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$247<<24;
 var $249=$244|$248;
 var $250=(($k+28)|0);
 var $251=HEAP8[($250)];
 var $252=($251&255);
 var $253=(($k+29)|0);
 var $254=HEAP8[($253)];
 var $255=($254&255);
 var $256=$255<<8;
 var $257=$256|$252;
 var $258=(($k+30)|0);
 var $259=HEAP8[($258)];
 var $260=($259&255);
 var $261=$260<<16;
 var $262=$257|$261;
 var $263=(($k+31)|0);
 var $264=HEAP8[($263)];
 var $265=($264&255);
 var $266=$265<<24;
 var $267=$262|$266;
 var $268=(($c+12)|0);
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=(($c+13)|0);
 var $272=HEAP8[($271)];
 var $273=($272&255);
 var $274=$273<<8;
 var $275=$274|$270;
 var $276=(($c+14)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=$278<<16;
 var $280=$275|$279;
 var $281=(($c+15)|0);
 var $282=HEAP8[($281)];
 var $283=($282&255);
 var $284=$283<<24;
 var $285=$280|$284;
 var $x15_01=$285;var $x14_02=$267;var $x13_03=$249;var $x12_04=$231;var $x11_05=$213;var $x10_06=$195;var $x9_07=$177;var $x8_08=$159;var $x7_09=$141;var $x6_010=$123;var $x5_011=$106;var $x4_012=$88;var $x3_013=$70;var $x2_014=$52;var $x1_015=$34;var $x0_016=$17;var $i_017=20;label=2;break;
 case 2: 
 var $i_017;
 var $x0_016;
 var $x1_015;
 var $x2_014;
 var $x3_013;
 var $x4_012;
 var $x5_011;
 var $x6_010;
 var $x7_09;
 var $x8_08;
 var $x9_07;
 var $x10_06;
 var $x11_05;
 var $x12_04;
 var $x13_03;
 var $x14_02;
 var $x15_01;
 var $287=((($x0_016)+($x12_04))|0);
 var $288=$287<<7;
 var $289=$287>>>25;
 var $290=$289|$288;
 var $291=$290^$x4_012;
 var $292=((($291)+($x0_016))|0);
 var $293=$292<<9;
 var $294=$292>>>23;
 var $295=$294|$293;
 var $296=$295^$x8_08;
 var $297=((($296)+($291))|0);
 var $298=$297<<13;
 var $299=$297>>>19;
 var $300=$299|$298;
 var $301=$300^$x12_04;
 var $302=((($301)+($296))|0);
 var $303=$302<<18;
 var $304=$302>>>14;
 var $305=$304|$303;
 var $306=$305^$x0_016;
 var $307=((($x1_015)+($x5_011))|0);
 var $308=$307<<7;
 var $309=$307>>>25;
 var $310=$309|$308;
 var $311=$310^$x9_07;
 var $312=((($311)+($x5_011))|0);
 var $313=$312<<9;
 var $314=$312>>>23;
 var $315=$314|$313;
 var $316=$315^$x13_03;
 var $317=((($316)+($311))|0);
 var $318=$317<<13;
 var $319=$317>>>19;
 var $320=$319|$318;
 var $321=$320^$x1_015;
 var $322=((($321)+($316))|0);
 var $323=$322<<18;
 var $324=$322>>>14;
 var $325=$324|$323;
 var $326=$325^$x5_011;
 var $327=((($x6_010)+($x10_06))|0);
 var $328=$327<<7;
 var $329=$327>>>25;
 var $330=$329|$328;
 var $331=$330^$x14_02;
 var $332=((($331)+($x10_06))|0);
 var $333=$332<<9;
 var $334=$332>>>23;
 var $335=$334|$333;
 var $336=$335^$x2_014;
 var $337=((($336)+($331))|0);
 var $338=$337<<13;
 var $339=$337>>>19;
 var $340=$339|$338;
 var $341=$340^$x6_010;
 var $342=((($341)+($336))|0);
 var $343=$342<<18;
 var $344=$342>>>14;
 var $345=$344|$343;
 var $346=$345^$x10_06;
 var $347=((($x11_05)+($x15_01))|0);
 var $348=$347<<7;
 var $349=$347>>>25;
 var $350=$349|$348;
 var $351=$x3_013^$350;
 var $352=((($351)+($x15_01))|0);
 var $353=$352<<9;
 var $354=$352>>>23;
 var $355=$354|$353;
 var $356=$355^$x7_09;
 var $357=((($356)+($351))|0);
 var $358=$357<<13;
 var $359=$357>>>19;
 var $360=$359|$358;
 var $361=$360^$x11_05;
 var $362=((($361)+($356))|0);
 var $363=$362<<18;
 var $364=$362>>>14;
 var $365=$364|$363;
 var $366=$365^$x15_01;
 var $367=((($306)+($351))|0);
 var $368=$367<<7;
 var $369=$367>>>25;
 var $370=$369|$368;
 var $371=$370^$321;
 var $372=((($371)+($306))|0);
 var $373=$372<<9;
 var $374=$372>>>23;
 var $375=$374|$373;
 var $376=$375^$336;
 var $377=((($376)+($371))|0);
 var $378=$377<<13;
 var $379=$377>>>19;
 var $380=$379|$378;
 var $381=$380^$351;
 var $382=((($381)+($376))|0);
 var $383=$382<<18;
 var $384=$382>>>14;
 var $385=$384|$383;
 var $386=$385^$306;
 var $387=((($326)+($291))|0);
 var $388=$387<<7;
 var $389=$387>>>25;
 var $390=$389|$388;
 var $391=$390^$341;
 var $392=((($391)+($326))|0);
 var $393=$392<<9;
 var $394=$392>>>23;
 var $395=$394|$393;
 var $396=$395^$356;
 var $397=((($396)+($391))|0);
 var $398=$397<<13;
 var $399=$397>>>19;
 var $400=$399|$398;
 var $401=$400^$291;
 var $402=((($401)+($396))|0);
 var $403=$402<<18;
 var $404=$402>>>14;
 var $405=$404|$403;
 var $406=$405^$326;
 var $407=((($346)+($311))|0);
 var $408=$407<<7;
 var $409=$407>>>25;
 var $410=$409|$408;
 var $411=$410^$361;
 var $412=((($411)+($346))|0);
 var $413=$412<<9;
 var $414=$412>>>23;
 var $415=$414|$413;
 var $416=$415^$296;
 var $417=((($416)+($411))|0);
 var $418=$417<<13;
 var $419=$417>>>19;
 var $420=$419|$418;
 var $421=$420^$311;
 var $422=((($421)+($416))|0);
 var $423=$422<<18;
 var $424=$422>>>14;
 var $425=$424|$423;
 var $426=$425^$346;
 var $427=((($366)+($331))|0);
 var $428=$427<<7;
 var $429=$427>>>25;
 var $430=$429|$428;
 var $431=$430^$301;
 var $432=((($431)+($366))|0);
 var $433=$432<<9;
 var $434=$432>>>23;
 var $435=$434|$433;
 var $436=$435^$316;
 var $437=((($436)+($431))|0);
 var $438=$437<<13;
 var $439=$437>>>19;
 var $440=$439|$438;
 var $441=$440^$331;
 var $442=((($441)+($436))|0);
 var $443=$442<<18;
 var $444=$442>>>14;
 var $445=$444|$443;
 var $446=$445^$366;
 var $447=((($i_017)-(2))|0);
 var $448=($447|0)>0;
 if($448){var $x15_01=$446;var $x14_02=$441;var $x13_03=$436;var $x12_04=$431;var $x11_05=$411;var $x10_06=$426;var $x9_07=$421;var $x8_08=$416;var $x7_09=$396;var $x6_010=$391;var $x5_011=$406;var $x4_012=$401;var $x3_013=$381;var $x2_014=$376;var $x1_015=$371;var $x0_016=$386;var $i_017=$447;label=2;break;}else{label=3;break;}
 case 3: 
 var $450=((($386)+($17))|0);
 var $451=((($371)+($34))|0);
 var $452=((($376)+($52))|0);
 var $453=((($381)+($70))|0);
 var $454=((($401)+($88))|0);
 var $455=((($406)+($106))|0);
 var $456=((($391)+($123))|0);
 var $457=((($396)+($141))|0);
 var $458=((($416)+($159))|0);
 var $459=((($421)+($177))|0);
 var $460=((($426)+($195))|0);
 var $461=((($411)+($213))|0);
 var $462=((($431)+($231))|0);
 var $463=((($436)+($249))|0);
 var $464=((($441)+($267))|0);
 var $465=((($446)+($285))|0);
 var $466=(($450)&255);
 HEAP8[($out)]=$466;
 var $467=$450>>>8;
 var $468=(($467)&255);
 var $469=(($out+1)|0);
 HEAP8[($469)]=$468;
 var $470=$450>>>16;
 var $471=(($470)&255);
 var $472=(($out+2)|0);
 HEAP8[($472)]=$471;
 var $473=$450>>>24;
 var $474=(($473)&255);
 var $475=(($out+3)|0);
 HEAP8[($475)]=$474;
 var $476=(($out+4)|0);
 var $477=(($451)&255);
 HEAP8[($476)]=$477;
 var $478=$451>>>8;
 var $479=(($478)&255);
 var $480=(($out+5)|0);
 HEAP8[($480)]=$479;
 var $481=$451>>>16;
 var $482=(($481)&255);
 var $483=(($out+6)|0);
 HEAP8[($483)]=$482;
 var $484=$451>>>24;
 var $485=(($484)&255);
 var $486=(($out+7)|0);
 HEAP8[($486)]=$485;
 var $487=(($out+8)|0);
 var $488=(($452)&255);
 HEAP8[($487)]=$488;
 var $489=$452>>>8;
 var $490=(($489)&255);
 var $491=(($out+9)|0);
 HEAP8[($491)]=$490;
 var $492=$452>>>16;
 var $493=(($492)&255);
 var $494=(($out+10)|0);
 HEAP8[($494)]=$493;
 var $495=$452>>>24;
 var $496=(($495)&255);
 var $497=(($out+11)|0);
 HEAP8[($497)]=$496;
 var $498=(($out+12)|0);
 var $499=(($453)&255);
 HEAP8[($498)]=$499;
 var $500=$453>>>8;
 var $501=(($500)&255);
 var $502=(($out+13)|0);
 HEAP8[($502)]=$501;
 var $503=$453>>>16;
 var $504=(($503)&255);
 var $505=(($out+14)|0);
 HEAP8[($505)]=$504;
 var $506=$453>>>24;
 var $507=(($506)&255);
 var $508=(($out+15)|0);
 HEAP8[($508)]=$507;
 var $509=(($out+16)|0);
 var $510=(($454)&255);
 HEAP8[($509)]=$510;
 var $511=$454>>>8;
 var $512=(($511)&255);
 var $513=(($out+17)|0);
 HEAP8[($513)]=$512;
 var $514=$454>>>16;
 var $515=(($514)&255);
 var $516=(($out+18)|0);
 HEAP8[($516)]=$515;
 var $517=$454>>>24;
 var $518=(($517)&255);
 var $519=(($out+19)|0);
 HEAP8[($519)]=$518;
 var $520=(($out+20)|0);
 var $521=(($455)&255);
 HEAP8[($520)]=$521;
 var $522=$455>>>8;
 var $523=(($522)&255);
 var $524=(($out+21)|0);
 HEAP8[($524)]=$523;
 var $525=$455>>>16;
 var $526=(($525)&255);
 var $527=(($out+22)|0);
 HEAP8[($527)]=$526;
 var $528=$455>>>24;
 var $529=(($528)&255);
 var $530=(($out+23)|0);
 HEAP8[($530)]=$529;
 var $531=(($out+24)|0);
 var $532=(($456)&255);
 HEAP8[($531)]=$532;
 var $533=$456>>>8;
 var $534=(($533)&255);
 var $535=(($out+25)|0);
 HEAP8[($535)]=$534;
 var $536=$456>>>16;
 var $537=(($536)&255);
 var $538=(($out+26)|0);
 HEAP8[($538)]=$537;
 var $539=$456>>>24;
 var $540=(($539)&255);
 var $541=(($out+27)|0);
 HEAP8[($541)]=$540;
 var $542=(($out+28)|0);
 var $543=(($457)&255);
 HEAP8[($542)]=$543;
 var $544=$457>>>8;
 var $545=(($544)&255);
 var $546=(($out+29)|0);
 HEAP8[($546)]=$545;
 var $547=$457>>>16;
 var $548=(($547)&255);
 var $549=(($out+30)|0);
 HEAP8[($549)]=$548;
 var $550=$457>>>24;
 var $551=(($550)&255);
 var $552=(($out+31)|0);
 HEAP8[($552)]=$551;
 var $553=(($out+32)|0);
 var $554=(($458)&255);
 HEAP8[($553)]=$554;
 var $555=$458>>>8;
 var $556=(($555)&255);
 var $557=(($out+33)|0);
 HEAP8[($557)]=$556;
 var $558=$458>>>16;
 var $559=(($558)&255);
 var $560=(($out+34)|0);
 HEAP8[($560)]=$559;
 var $561=$458>>>24;
 var $562=(($561)&255);
 var $563=(($out+35)|0);
 HEAP8[($563)]=$562;
 var $564=(($out+36)|0);
 var $565=(($459)&255);
 HEAP8[($564)]=$565;
 var $566=$459>>>8;
 var $567=(($566)&255);
 var $568=(($out+37)|0);
 HEAP8[($568)]=$567;
 var $569=$459>>>16;
 var $570=(($569)&255);
 var $571=(($out+38)|0);
 HEAP8[($571)]=$570;
 var $572=$459>>>24;
 var $573=(($572)&255);
 var $574=(($out+39)|0);
 HEAP8[($574)]=$573;
 var $575=(($out+40)|0);
 var $576=(($460)&255);
 HEAP8[($575)]=$576;
 var $577=$460>>>8;
 var $578=(($577)&255);
 var $579=(($out+41)|0);
 HEAP8[($579)]=$578;
 var $580=$460>>>16;
 var $581=(($580)&255);
 var $582=(($out+42)|0);
 HEAP8[($582)]=$581;
 var $583=$460>>>24;
 var $584=(($583)&255);
 var $585=(($out+43)|0);
 HEAP8[($585)]=$584;
 var $586=(($out+44)|0);
 var $587=(($461)&255);
 HEAP8[($586)]=$587;
 var $588=$461>>>8;
 var $589=(($588)&255);
 var $590=(($out+45)|0);
 HEAP8[($590)]=$589;
 var $591=$461>>>16;
 var $592=(($591)&255);
 var $593=(($out+46)|0);
 HEAP8[($593)]=$592;
 var $594=$461>>>24;
 var $595=(($594)&255);
 var $596=(($out+47)|0);
 HEAP8[($596)]=$595;
 var $597=(($out+48)|0);
 var $598=(($462)&255);
 HEAP8[($597)]=$598;
 var $599=$462>>>8;
 var $600=(($599)&255);
 var $601=(($out+49)|0);
 HEAP8[($601)]=$600;
 var $602=$462>>>16;
 var $603=(($602)&255);
 var $604=(($out+50)|0);
 HEAP8[($604)]=$603;
 var $605=$462>>>24;
 var $606=(($605)&255);
 var $607=(($out+51)|0);
 HEAP8[($607)]=$606;
 var $608=(($out+52)|0);
 var $609=(($463)&255);
 HEAP8[($608)]=$609;
 var $610=$463>>>8;
 var $611=(($610)&255);
 var $612=(($out+53)|0);
 HEAP8[($612)]=$611;
 var $613=$463>>>16;
 var $614=(($613)&255);
 var $615=(($out+54)|0);
 HEAP8[($615)]=$614;
 var $616=$463>>>24;
 var $617=(($616)&255);
 var $618=(($out+55)|0);
 HEAP8[($618)]=$617;
 var $619=(($out+56)|0);
 var $620=(($464)&255);
 HEAP8[($619)]=$620;
 var $621=$464>>>8;
 var $622=(($621)&255);
 var $623=(($out+57)|0);
 HEAP8[($623)]=$622;
 var $624=$464>>>16;
 var $625=(($624)&255);
 var $626=(($out+58)|0);
 HEAP8[($626)]=$625;
 var $627=$464>>>24;
 var $628=(($627)&255);
 var $629=(($out+59)|0);
 HEAP8[($629)]=$628;
 var $630=(($out+60)|0);
 var $631=(($465)&255);
 HEAP8[($630)]=$631;
 var $632=$465>>>8;
 var $633=(($632)&255);
 var $634=(($out+61)|0);
 HEAP8[($634)]=$633;
 var $635=$465>>>16;
 var $636=(($635)&255);
 var $637=(($out+62)|0);
 HEAP8[($637)]=$636;
 var $638=$465>>>24;
 var $639=(($638)&255);
 var $640=(($out+63)|0);
 HEAP8[($640)]=$639;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_core_hsalsa20($out,$in,$k,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[($c)];
 var $2=($1&255);
 var $3=(($c+1)|0);
 var $4=HEAP8[($3)];
 var $5=($4&255);
 var $6=$5<<8;
 var $7=$6|$2;
 var $8=(($c+2)|0);
 var $9=HEAP8[($8)];
 var $10=($9&255);
 var $11=$10<<16;
 var $12=$7|$11;
 var $13=(($c+3)|0);
 var $14=HEAP8[($13)];
 var $15=($14&255);
 var $16=$15<<24;
 var $17=$12|$16;
 var $18=HEAP8[($k)];
 var $19=($18&255);
 var $20=(($k+1)|0);
 var $21=HEAP8[($20)];
 var $22=($21&255);
 var $23=$22<<8;
 var $24=$23|$19;
 var $25=(($k+2)|0);
 var $26=HEAP8[($25)];
 var $27=($26&255);
 var $28=$27<<16;
 var $29=$24|$28;
 var $30=(($k+3)|0);
 var $31=HEAP8[($30)];
 var $32=($31&255);
 var $33=$32<<24;
 var $34=$29|$33;
 var $35=(($k+4)|0);
 var $36=HEAP8[($35)];
 var $37=($36&255);
 var $38=(($k+5)|0);
 var $39=HEAP8[($38)];
 var $40=($39&255);
 var $41=$40<<8;
 var $42=$41|$37;
 var $43=(($k+6)|0);
 var $44=HEAP8[($43)];
 var $45=($44&255);
 var $46=$45<<16;
 var $47=$42|$46;
 var $48=(($k+7)|0);
 var $49=HEAP8[($48)];
 var $50=($49&255);
 var $51=$50<<24;
 var $52=$47|$51;
 var $53=(($k+8)|0);
 var $54=HEAP8[($53)];
 var $55=($54&255);
 var $56=(($k+9)|0);
 var $57=HEAP8[($56)];
 var $58=($57&255);
 var $59=$58<<8;
 var $60=$59|$55;
 var $61=(($k+10)|0);
 var $62=HEAP8[($61)];
 var $63=($62&255);
 var $64=$63<<16;
 var $65=$60|$64;
 var $66=(($k+11)|0);
 var $67=HEAP8[($66)];
 var $68=($67&255);
 var $69=$68<<24;
 var $70=$65|$69;
 var $71=(($k+12)|0);
 var $72=HEAP8[($71)];
 var $73=($72&255);
 var $74=(($k+13)|0);
 var $75=HEAP8[($74)];
 var $76=($75&255);
 var $77=$76<<8;
 var $78=$77|$73;
 var $79=(($k+14)|0);
 var $80=HEAP8[($79)];
 var $81=($80&255);
 var $82=$81<<16;
 var $83=$78|$82;
 var $84=(($k+15)|0);
 var $85=HEAP8[($84)];
 var $86=($85&255);
 var $87=$86<<24;
 var $88=$83|$87;
 var $89=(($c+4)|0);
 var $90=HEAP8[($89)];
 var $91=($90&255);
 var $92=(($c+5)|0);
 var $93=HEAP8[($92)];
 var $94=($93&255);
 var $95=$94<<8;
 var $96=$95|$91;
 var $97=(($c+6)|0);
 var $98=HEAP8[($97)];
 var $99=($98&255);
 var $100=$99<<16;
 var $101=$96|$100;
 var $102=(($c+7)|0);
 var $103=HEAP8[($102)];
 var $104=($103&255);
 var $105=$104<<24;
 var $106=$101|$105;
 var $107=HEAP8[($in)];
 var $108=($107&255);
 var $109=(($in+1)|0);
 var $110=HEAP8[($109)];
 var $111=($110&255);
 var $112=$111<<8;
 var $113=$112|$108;
 var $114=(($in+2)|0);
 var $115=HEAP8[($114)];
 var $116=($115&255);
 var $117=$116<<16;
 var $118=$113|$117;
 var $119=(($in+3)|0);
 var $120=HEAP8[($119)];
 var $121=($120&255);
 var $122=$121<<24;
 var $123=$118|$122;
 var $124=(($in+4)|0);
 var $125=HEAP8[($124)];
 var $126=($125&255);
 var $127=(($in+5)|0);
 var $128=HEAP8[($127)];
 var $129=($128&255);
 var $130=$129<<8;
 var $131=$130|$126;
 var $132=(($in+6)|0);
 var $133=HEAP8[($132)];
 var $134=($133&255);
 var $135=$134<<16;
 var $136=$131|$135;
 var $137=(($in+7)|0);
 var $138=HEAP8[($137)];
 var $139=($138&255);
 var $140=$139<<24;
 var $141=$136|$140;
 var $142=(($in+8)|0);
 var $143=HEAP8[($142)];
 var $144=($143&255);
 var $145=(($in+9)|0);
 var $146=HEAP8[($145)];
 var $147=($146&255);
 var $148=$147<<8;
 var $149=$148|$144;
 var $150=(($in+10)|0);
 var $151=HEAP8[($150)];
 var $152=($151&255);
 var $153=$152<<16;
 var $154=$149|$153;
 var $155=(($in+11)|0);
 var $156=HEAP8[($155)];
 var $157=($156&255);
 var $158=$157<<24;
 var $159=$154|$158;
 var $160=(($in+12)|0);
 var $161=HEAP8[($160)];
 var $162=($161&255);
 var $163=(($in+13)|0);
 var $164=HEAP8[($163)];
 var $165=($164&255);
 var $166=$165<<8;
 var $167=$166|$162;
 var $168=(($in+14)|0);
 var $169=HEAP8[($168)];
 var $170=($169&255);
 var $171=$170<<16;
 var $172=$167|$171;
 var $173=(($in+15)|0);
 var $174=HEAP8[($173)];
 var $175=($174&255);
 var $176=$175<<24;
 var $177=$172|$176;
 var $178=(($c+8)|0);
 var $179=HEAP8[($178)];
 var $180=($179&255);
 var $181=(($c+9)|0);
 var $182=HEAP8[($181)];
 var $183=($182&255);
 var $184=$183<<8;
 var $185=$184|$180;
 var $186=(($c+10)|0);
 var $187=HEAP8[($186)];
 var $188=($187&255);
 var $189=$188<<16;
 var $190=$185|$189;
 var $191=(($c+11)|0);
 var $192=HEAP8[($191)];
 var $193=($192&255);
 var $194=$193<<24;
 var $195=$190|$194;
 var $196=(($k+16)|0);
 var $197=HEAP8[($196)];
 var $198=($197&255);
 var $199=(($k+17)|0);
 var $200=HEAP8[($199)];
 var $201=($200&255);
 var $202=$201<<8;
 var $203=$202|$198;
 var $204=(($k+18)|0);
 var $205=HEAP8[($204)];
 var $206=($205&255);
 var $207=$206<<16;
 var $208=$203|$207;
 var $209=(($k+19)|0);
 var $210=HEAP8[($209)];
 var $211=($210&255);
 var $212=$211<<24;
 var $213=$208|$212;
 var $214=(($k+20)|0);
 var $215=HEAP8[($214)];
 var $216=($215&255);
 var $217=(($k+21)|0);
 var $218=HEAP8[($217)];
 var $219=($218&255);
 var $220=$219<<8;
 var $221=$220|$216;
 var $222=(($k+22)|0);
 var $223=HEAP8[($222)];
 var $224=($223&255);
 var $225=$224<<16;
 var $226=$221|$225;
 var $227=(($k+23)|0);
 var $228=HEAP8[($227)];
 var $229=($228&255);
 var $230=$229<<24;
 var $231=$226|$230;
 var $232=(($k+24)|0);
 var $233=HEAP8[($232)];
 var $234=($233&255);
 var $235=(($k+25)|0);
 var $236=HEAP8[($235)];
 var $237=($236&255);
 var $238=$237<<8;
 var $239=$238|$234;
 var $240=(($k+26)|0);
 var $241=HEAP8[($240)];
 var $242=($241&255);
 var $243=$242<<16;
 var $244=$239|$243;
 var $245=(($k+27)|0);
 var $246=HEAP8[($245)];
 var $247=($246&255);
 var $248=$247<<24;
 var $249=$244|$248;
 var $250=(($k+28)|0);
 var $251=HEAP8[($250)];
 var $252=($251&255);
 var $253=(($k+29)|0);
 var $254=HEAP8[($253)];
 var $255=($254&255);
 var $256=$255<<8;
 var $257=$256|$252;
 var $258=(($k+30)|0);
 var $259=HEAP8[($258)];
 var $260=($259&255);
 var $261=$260<<16;
 var $262=$257|$261;
 var $263=(($k+31)|0);
 var $264=HEAP8[($263)];
 var $265=($264&255);
 var $266=$265<<24;
 var $267=$262|$266;
 var $268=(($c+12)|0);
 var $269=HEAP8[($268)];
 var $270=($269&255);
 var $271=(($c+13)|0);
 var $272=HEAP8[($271)];
 var $273=($272&255);
 var $274=$273<<8;
 var $275=$274|$270;
 var $276=(($c+14)|0);
 var $277=HEAP8[($276)];
 var $278=($277&255);
 var $279=$278<<16;
 var $280=$275|$279;
 var $281=(($c+15)|0);
 var $282=HEAP8[($281)];
 var $283=($282&255);
 var $284=$283<<24;
 var $285=$280|$284;
 var $x0_01=$17;var $x1_02=$34;var $x2_03=$52;var $x3_04=$70;var $x4_05=$88;var $x5_06=$106;var $x6_07=$123;var $x7_08=$141;var $x8_09=$159;var $x9_010=$177;var $x10_011=$195;var $x11_012=$213;var $x12_013=$231;var $x13_014=$249;var $x14_015=$267;var $x15_016=$285;var $i_017=20;label=2;break;
 case 2: 
 var $i_017;
 var $x15_016;
 var $x14_015;
 var $x13_014;
 var $x12_013;
 var $x11_012;
 var $x10_011;
 var $x9_010;
 var $x8_09;
 var $x7_08;
 var $x6_07;
 var $x5_06;
 var $x4_05;
 var $x3_04;
 var $x2_03;
 var $x1_02;
 var $x0_01;
 var $287=((($x12_013)+($x0_01))|0);
 var $288=$287<<7;
 var $289=$287>>>25;
 var $290=$289|$288;
 var $291=$290^$x4_05;
 var $292=((($291)+($x0_01))|0);
 var $293=$292<<9;
 var $294=$292>>>23;
 var $295=$294|$293;
 var $296=$295^$x8_09;
 var $297=((($296)+($291))|0);
 var $298=$297<<13;
 var $299=$297>>>19;
 var $300=$299|$298;
 var $301=$300^$x12_013;
 var $302=((($301)+($296))|0);
 var $303=$302<<18;
 var $304=$302>>>14;
 var $305=$304|$303;
 var $306=$305^$x0_01;
 var $307=((($x5_06)+($x1_02))|0);
 var $308=$307<<7;
 var $309=$307>>>25;
 var $310=$309|$308;
 var $311=$x9_010^$310;
 var $312=((($311)+($x5_06))|0);
 var $313=$312<<9;
 var $314=$312>>>23;
 var $315=$314|$313;
 var $316=$x13_014^$315;
 var $317=((($316)+($311))|0);
 var $318=$317<<13;
 var $319=$317>>>19;
 var $320=$319|$318;
 var $321=$320^$x1_02;
 var $322=((($321)+($316))|0);
 var $323=$322<<18;
 var $324=$322>>>14;
 var $325=$324|$323;
 var $326=$325^$x5_06;
 var $327=((($x10_011)+($x6_07))|0);
 var $328=$327<<7;
 var $329=$327>>>25;
 var $330=$329|$328;
 var $331=$x14_015^$330;
 var $332=((($331)+($x10_011))|0);
 var $333=$332<<9;
 var $334=$332>>>23;
 var $335=$334|$333;
 var $336=$335^$x2_03;
 var $337=((($336)+($331))|0);
 var $338=$337<<13;
 var $339=$337>>>19;
 var $340=$339|$338;
 var $341=$340^$x6_07;
 var $342=((($341)+($336))|0);
 var $343=$342<<18;
 var $344=$342>>>14;
 var $345=$344|$343;
 var $346=$345^$x10_011;
 var $347=((($x15_016)+($x11_012))|0);
 var $348=$347<<7;
 var $349=$347>>>25;
 var $350=$349|$348;
 var $351=$350^$x3_04;
 var $352=((($351)+($x15_016))|0);
 var $353=$352<<9;
 var $354=$352>>>23;
 var $355=$354|$353;
 var $356=$355^$x7_08;
 var $357=((($356)+($351))|0);
 var $358=$357<<13;
 var $359=$357>>>19;
 var $360=$359|$358;
 var $361=$360^$x11_012;
 var $362=((($361)+($356))|0);
 var $363=$362<<18;
 var $364=$362>>>14;
 var $365=$364|$363;
 var $366=$365^$x15_016;
 var $367=((($306)+($351))|0);
 var $368=$367<<7;
 var $369=$367>>>25;
 var $370=$369|$368;
 var $371=$370^$321;
 var $372=((($371)+($306))|0);
 var $373=$372<<9;
 var $374=$372>>>23;
 var $375=$374|$373;
 var $376=$375^$336;
 var $377=((($376)+($371))|0);
 var $378=$377<<13;
 var $379=$377>>>19;
 var $380=$379|$378;
 var $381=$380^$351;
 var $382=((($381)+($376))|0);
 var $383=$382<<18;
 var $384=$382>>>14;
 var $385=$384|$383;
 var $386=$385^$306;
 var $387=((($326)+($291))|0);
 var $388=$387<<7;
 var $389=$387>>>25;
 var $390=$389|$388;
 var $391=$390^$341;
 var $392=((($391)+($326))|0);
 var $393=$392<<9;
 var $394=$392>>>23;
 var $395=$394|$393;
 var $396=$395^$356;
 var $397=((($396)+($391))|0);
 var $398=$397<<13;
 var $399=$397>>>19;
 var $400=$399|$398;
 var $401=$400^$291;
 var $402=((($401)+($396))|0);
 var $403=$402<<18;
 var $404=$402>>>14;
 var $405=$404|$403;
 var $406=$405^$326;
 var $407=((($346)+($311))|0);
 var $408=$407<<7;
 var $409=$407>>>25;
 var $410=$409|$408;
 var $411=$410^$361;
 var $412=((($411)+($346))|0);
 var $413=$412<<9;
 var $414=$412>>>23;
 var $415=$414|$413;
 var $416=$415^$296;
 var $417=((($416)+($411))|0);
 var $418=$417<<13;
 var $419=$417>>>19;
 var $420=$419|$418;
 var $421=$420^$311;
 var $422=((($421)+($416))|0);
 var $423=$422<<18;
 var $424=$422>>>14;
 var $425=$424|$423;
 var $426=$425^$346;
 var $427=((($366)+($331))|0);
 var $428=$427<<7;
 var $429=$427>>>25;
 var $430=$429|$428;
 var $431=$430^$301;
 var $432=((($431)+($366))|0);
 var $433=$432<<9;
 var $434=$432>>>23;
 var $435=$434|$433;
 var $436=$435^$316;
 var $437=((($436)+($431))|0);
 var $438=$437<<13;
 var $439=$437>>>19;
 var $440=$439|$438;
 var $441=$440^$331;
 var $442=((($441)+($436))|0);
 var $443=$442<<18;
 var $444=$442>>>14;
 var $445=$444|$443;
 var $446=$445^$366;
 var $447=((($i_017)-(2))|0);
 var $448=($447|0)>0;
 if($448){var $x0_01=$386;var $x1_02=$371;var $x2_03=$376;var $x3_04=$381;var $x4_05=$401;var $x5_06=$406;var $x6_07=$391;var $x7_08=$396;var $x8_09=$416;var $x9_010=$421;var $x10_011=$426;var $x11_012=$411;var $x12_013=$431;var $x13_014=$436;var $x14_015=$441;var $x15_016=$446;var $i_017=$447;label=2;break;}else{label=3;break;}
 case 3: 
 var $450=(($386)&255);
 HEAP8[($out)]=$450;
 var $451=$386>>>8;
 var $452=(($451)&255);
 var $453=(($out+1)|0);
 HEAP8[($453)]=$452;
 var $454=$386>>>16;
 var $455=(($454)&255);
 var $456=(($out+2)|0);
 HEAP8[($456)]=$455;
 var $457=$386>>>24;
 var $458=(($457)&255);
 var $459=(($out+3)|0);
 HEAP8[($459)]=$458;
 var $460=(($out+4)|0);
 var $461=(($406)&255);
 HEAP8[($460)]=$461;
 var $462=$406>>>8;
 var $463=(($462)&255);
 var $464=(($out+5)|0);
 HEAP8[($464)]=$463;
 var $465=$406>>>16;
 var $466=(($465)&255);
 var $467=(($out+6)|0);
 HEAP8[($467)]=$466;
 var $468=$406>>>24;
 var $469=(($468)&255);
 var $470=(($out+7)|0);
 HEAP8[($470)]=$469;
 var $471=(($out+8)|0);
 var $472=(($426)&255);
 HEAP8[($471)]=$472;
 var $473=$426>>>8;
 var $474=(($473)&255);
 var $475=(($out+9)|0);
 HEAP8[($475)]=$474;
 var $476=$426>>>16;
 var $477=(($476)&255);
 var $478=(($out+10)|0);
 HEAP8[($478)]=$477;
 var $479=$426>>>24;
 var $480=(($479)&255);
 var $481=(($out+11)|0);
 HEAP8[($481)]=$480;
 var $482=(($out+12)|0);
 var $483=(($446)&255);
 HEAP8[($482)]=$483;
 var $484=$446>>>8;
 var $485=(($484)&255);
 var $486=(($out+13)|0);
 HEAP8[($486)]=$485;
 var $487=$446>>>16;
 var $488=(($487)&255);
 var $489=(($out+14)|0);
 HEAP8[($489)]=$488;
 var $490=$446>>>24;
 var $491=(($490)&255);
 var $492=(($out+15)|0);
 HEAP8[($492)]=$491;
 var $493=(($out+16)|0);
 var $494=(($391)&255);
 HEAP8[($493)]=$494;
 var $495=$391>>>8;
 var $496=(($495)&255);
 var $497=(($out+17)|0);
 HEAP8[($497)]=$496;
 var $498=$391>>>16;
 var $499=(($498)&255);
 var $500=(($out+18)|0);
 HEAP8[($500)]=$499;
 var $501=$391>>>24;
 var $502=(($501)&255);
 var $503=(($out+19)|0);
 HEAP8[($503)]=$502;
 var $504=(($out+20)|0);
 var $505=(($396)&255);
 HEAP8[($504)]=$505;
 var $506=$396>>>8;
 var $507=(($506)&255);
 var $508=(($out+21)|0);
 HEAP8[($508)]=$507;
 var $509=$396>>>16;
 var $510=(($509)&255);
 var $511=(($out+22)|0);
 HEAP8[($511)]=$510;
 var $512=$396>>>24;
 var $513=(($512)&255);
 var $514=(($out+23)|0);
 HEAP8[($514)]=$513;
 var $515=(($out+24)|0);
 var $516=(($416)&255);
 HEAP8[($515)]=$516;
 var $517=$416>>>8;
 var $518=(($517)&255);
 var $519=(($out+25)|0);
 HEAP8[($519)]=$518;
 var $520=$416>>>16;
 var $521=(($520)&255);
 var $522=(($out+26)|0);
 HEAP8[($522)]=$521;
 var $523=$416>>>24;
 var $524=(($523)&255);
 var $525=(($out+27)|0);
 HEAP8[($525)]=$524;
 var $526=(($out+28)|0);
 var $527=(($421)&255);
 HEAP8[($526)]=$527;
 var $528=$421>>>8;
 var $529=(($528)&255);
 var $530=(($out+29)|0);
 HEAP8[($530)]=$529;
 var $531=$421>>>16;
 var $532=(($531)&255);
 var $533=(($out+30)|0);
 HEAP8[($533)]=$532;
 var $534=$421>>>24;
 var $535=(($534)&255);
 var $536=(($out+31)|0);
 HEAP8[($536)]=$535;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_secretbox_xsalsa20poly1305_open($m,$c,$clen$0,$clen$1,$n,$k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $in_i_i=sp;
 var $block_i_i=(sp)+(16);
 var $subkey_i=(sp)+(80);
 var $subkey=(sp)+(112);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;
 var $1=(($clen$1>>>0) < ($$etemp$0$1>>>0)) | (((($clen$1>>>0) == ($$etemp$0$1>>>0) & ($clen$0>>>0) <  ($$etemp$0$0>>>0))));
 if($1){var $_0=-1;label=6;break;}else{label=2;break;}
 case 2: 
 var $3=(($subkey)|0);
 var $4=(($subkey_i)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 _crypto_core_hsalsa20($4,$n,$k,88);
 var $5=(($n+16)|0);
 var $6=(($in_i_i)|0);
 var $$etemp$2$0=16;
 var $$etemp$2$1=0;

 var $7=(($block_i_i)|0);
 var $$etemp$3$0=64;
 var $$etemp$3$1=0;

 var $8=$5;
 var $9=$in_i_i;
 var $ld$4$0=(($8)|0);
 var $10$0=((((HEAPU8[($ld$4$0)])|(HEAPU8[((($ld$4$0)+(1))|0)]<<8)|(HEAPU8[((($ld$4$0)+(2))|0)]<<16)|(HEAPU8[((($ld$4$0)+(3))|0)]<<24))|0));
 var $ld$5$1=(($8+4)|0);
 var $10$1=((((HEAPU8[($ld$5$1)])|(HEAPU8[((($ld$5$1)+(1))|0)]<<8)|(HEAPU8[((($ld$5$1)+(2))|0)]<<16)|(HEAPU8[((($ld$5$1)+(3))|0)]<<24))|0));
 var $st$6$0=(($9)|0);
 HEAP32[(($st$6$0)>>2)]=$10$0;
 var $st$7$1=(($9+4)|0);
 HEAP32[(($st$7$1)>>2)]=$10$1;
 var $scevgep_i_i=(($in_i_i+8)|0);
 var $11=$scevgep_i_i;
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $st$9$0=(($11)|0);
 HEAP32[(($st$9$0)>>2)]=$$etemp$8$0;
 var $st$10$1=(($11+4)|0);
 HEAP32[(($st$10$1)>>2)]=$$etemp$8$1;
 _crypto_core_salsa20($7,$6,$4,40);
 var $i_33_i_i$1=0;var $i_33_i_i$0=0;label=3;break;
 case 3: 
 var $i_33_i_i$0;
 var $i_33_i_i$1;
 var $13$0=$i_33_i_i$0;
 var $13=$13$0;
 var $14=(($block_i_i+$13)|0);
 var $15=HEAP8[($14)];
 var $16=(($subkey+$13)|0);
 HEAP8[($16)]=$15;
 var $$etemp$11$0=1;
 var $$etemp$11$1=0;
 var $17$0=_i64Add($i_33_i_i$0,$i_33_i_i$1,$$etemp$11$0,$$etemp$11$1);var $17$1=tempRet0;
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;
 var $18=(($17$1>>>0) < ($$etemp$12$1>>>0)) | (((($17$1>>>0) == ($$etemp$12$1>>>0) & ($17$0>>>0) <  ($$etemp$12$0>>>0))));
 if($18){var $i_33_i_i$1=$17$1;var $i_33_i_i$0=$17$0;label=3;break;}else{label=4;break;}
 case 4: 
 var $$etemp$13$0=64;
 var $$etemp$13$1=0;

 var $$etemp$14$0=16;
 var $$etemp$14$1=0;

 var $$etemp$15$0=32;
 var $$etemp$15$1=0;

 var $19=(($c+16)|0);
 var $20=(($c+32)|0);
 var $$etemp$16$0=-32;
 var $$etemp$16$1=-1;
 var $21$0=_i64Add($clen$0,$clen$1,$$etemp$16$0,$$etemp$16$1);var $21$1=tempRet0;
 var $22=HEAP32[((432)>>2)];
 var $23=FUNCTION_TABLE[$22]($19,$20,$21$0,$21$1,$3);
 var $24=($23|0)==0;
 if($24){label=5;break;}else{var $_0=-1;label=6;break;}
 case 5: 
 _crypto_stream_xsalsa20_xor($m,$c,$clen$0,$clen$1,$n,$k);
 _memset($m, 0, 32)|0;
 var $_0=0;label=6;break;
 case 6: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_hashblocks_sha256($statebytes,$in,$inlen$0,$inlen$1){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($statebytes+3)|0);
 var $2=HEAP8[($1)];
 var $3=(($statebytes+2)|0);
 var $4=HEAP8[($3)];
 var $5=(($statebytes+1)|0);
 var $6=HEAP8[($5)];
 var $7=HEAP8[($statebytes)];
 var $8=(($statebytes+4)|0);
 var $9=(($statebytes+7)|0);
 var $10=HEAP8[($9)];
 var $11=(($statebytes+6)|0);
 var $12=HEAP8[($11)];
 var $13=(($statebytes+5)|0);
 var $14=HEAP8[($13)];
 var $15=HEAP8[($8)];
 var $16=(($statebytes+8)|0);
 var $17=(($statebytes+11)|0);
 var $18=HEAP8[($17)];
 var $19=(($statebytes+10)|0);
 var $20=HEAP8[($19)];
 var $21=(($statebytes+9)|0);
 var $22=HEAP8[($21)];
 var $23=HEAP8[($16)];
 var $24=(($statebytes+12)|0);
 var $25=(($statebytes+15)|0);
 var $26=HEAP8[($25)];
 var $27=(($statebytes+14)|0);
 var $28=HEAP8[($27)];
 var $29=(($statebytes+13)|0);
 var $30=HEAP8[($29)];
 var $31=HEAP8[($24)];
 var $32=(($statebytes+16)|0);
 var $33=(($statebytes+19)|0);
 var $34=HEAP8[($33)];
 var $35=(($statebytes+18)|0);
 var $36=HEAP8[($35)];
 var $37=(($statebytes+17)|0);
 var $38=HEAP8[($37)];
 var $39=HEAP8[($32)];
 var $40=(($statebytes+20)|0);
 var $41=(($statebytes+23)|0);
 var $42=HEAP8[($41)];
 var $43=(($statebytes+22)|0);
 var $44=HEAP8[($43)];
 var $45=(($statebytes+21)|0);
 var $46=HEAP8[($45)];
 var $47=HEAP8[($40)];
 var $48=(($statebytes+24)|0);
 var $49=(($statebytes+27)|0);
 var $50=HEAP8[($49)];
 var $51=(($statebytes+26)|0);
 var $52=HEAP8[($51)];
 var $53=(($statebytes+25)|0);
 var $54=HEAP8[($53)];
 var $55=HEAP8[($48)];
 var $56=(($statebytes+28)|0);
 var $57=(($statebytes+31)|0);
 var $58=HEAP8[($57)];
 var $59=(($statebytes+30)|0);
 var $60=HEAP8[($59)];
 var $61=(($statebytes+29)|0);
 var $62=HEAP8[($61)];
 var $63=HEAP8[($56)];
 var $$etemp$0$0=63;
 var $$etemp$0$1=0;
 var $64=(($inlen$1>>>0) > ($$etemp$0$1>>>0)) | (((($inlen$1>>>0) == ($$etemp$0$1>>>0) & ($inlen$0>>>0) >  ($$etemp$0$0>>>0))));
 if($64){label=2;break;}else{var $h_0_lcssa_off24=$63;var $h_0_lcssa_off16=$62;var $h_0_lcssa_off8=$60;var $h_0_lcssa_off0=$58;var $g_0_lcssa_off24=$55;var $g_0_lcssa_off16=$54;var $g_0_lcssa_off8=$52;var $g_0_lcssa_off0=$50;var $f_0_lcssa_off24=$47;var $f_0_lcssa_off16=$46;var $f_0_lcssa_off8=$44;var $f_0_lcssa_off0=$42;var $e_0_lcssa_off24=$39;var $e_0_lcssa_off16=$38;var $e_0_lcssa_off8=$36;var $e_0_lcssa_off0=$34;var $d_0_lcssa_off24=$31;var $d_0_lcssa_off16=$30;var $d_0_lcssa_off8=$28;var $d_0_lcssa_off0=$26;var $c_0_lcssa_off24=$23;var $c_0_lcssa_off16=$22;var $c_0_lcssa_off8=$20;var $c_0_lcssa_off0=$18;var $b_0_lcssa_off24=$15;var $b_0_lcssa_off16=$14;var $b_0_lcssa_off8=$12;var $b_0_lcssa_off0=$10;var $a_0_lcssa_off24=$7;var $a_0_lcssa_off16=$6;var $a_0_lcssa_off8=$4;var $a_0_lcssa_off0=$2;label=5;break;}
 case 2: 
 var $65=($60&255);
 var $66=($52&255);
 var $67=($44&255);
 var $68=($36&255);
 var $69=($28&255);
 var $70=($20&255);
 var $71=($12&255);
 var $72=($4&255);
 var $73=($62&255);
 var $74=$65<<8;
 var $75=($58&255);
 var $76=($54&255);
 var $77=$66<<8;
 var $78=($50&255);
 var $79=($46&255);
 var $80=$67<<8;
 var $81=($42&255);
 var $82=($38&255);
 var $83=$68<<8;
 var $84=($34&255);
 var $85=($30&255);
 var $86=$69<<8;
 var $87=($26&255);
 var $88=($22&255);
 var $89=$70<<8;
 var $90=($18&255);
 var $91=($14&255);
 var $92=$71<<8;
 var $93=($10&255);
 var $94=($6&255);
 var $95=$72<<8;
 var $96=($2&255);
 var $97=($63&255);
 var $98=$73<<16;
 var $99=$74|$75;
 var $100=($55&255);
 var $101=$76<<16;
 var $102=$77|$78;
 var $103=($47&255);
 var $104=$79<<16;
 var $105=$80|$81;
 var $106=($39&255);
 var $107=$82<<16;
 var $108=$83|$84;
 var $109=($31&255);
 var $110=$85<<16;
 var $111=$86|$87;
 var $112=($23&255);
 var $113=$88<<16;
 var $114=$89|$90;
 var $115=($15&255);
 var $116=$91<<16;
 var $117=$92|$93;
 var $118=($7&255);
 var $119=$94<<16;
 var $120=$95|$96;
 var $121=$97<<24;
 var $122=$99|$98;
 var $123=$100<<24;
 var $124=$102|$101;
 var $125=$103<<24;
 var $126=$105|$104;
 var $127=$106<<24;
 var $128=$108|$107;
 var $129=$109<<24;
 var $130=$111|$110;
 var $131=$112<<24;
 var $132=$114|$113;
 var $133=$115<<24;
 var $134=$117|$116;
 var $135=$118<<24;
 var $136=$120|$119;
 var $137=$122|$121;
 var $138=$124|$123;
 var $139=$126|$125;
 var $140=$128|$127;
 var $141=$130|$129;
 var $142=$132|$131;
 var $143=$134|$133;
 var $144=$136|$135;
 var $h_02=$137;var $g_03=$138;var $f_04=$139;var $e_05=$140;var $d_06=$141;var $c_07=$142;var $b_08=$143;var $a_09=$144;var $_0110$1=$inlen$1;var $_0110$0=$inlen$0;var $_011=$in;label=3;break;
 case 3: 
 var $_011;
 var $_0110$0;
 var $_0110$1;
 var $a_09;
 var $b_08;
 var $c_07;
 var $d_06;
 var $e_05;
 var $f_04;
 var $g_03;
 var $h_02;
 var $146=(($_011+3)|0);
 var $147=HEAP8[($146)];
 var $148=($147&255);
 var $149=(($_011+2)|0);
 var $150=HEAP8[($149)];
 var $151=($150&255);
 var $152=$151<<8;
 var $153=$152|$148;
 var $154=(($_011+1)|0);
 var $155=HEAP8[($154)];
 var $156=($155&255);
 var $157=$156<<16;
 var $158=$153|$157;
 var $159=HEAP8[($_011)];
 var $160=($159&255);
 var $161=$160<<24;
 var $162=$158|$161;
 var $163=(($_011+4)|0);
 var $164=(($_011+7)|0);
 var $165=HEAP8[($164)];
 var $166=($165&255);
 var $167=(($_011+6)|0);
 var $168=HEAP8[($167)];
 var $169=($168&255);
 var $170=$169<<8;
 var $171=$170|$166;
 var $172=(($_011+5)|0);
 var $173=HEAP8[($172)];
 var $174=($173&255);
 var $175=$174<<16;
 var $176=$171|$175;
 var $177=HEAP8[($163)];
 var $178=($177&255);
 var $179=$178<<24;
 var $180=$176|$179;
 var $181=(($_011+8)|0);
 var $182=(($_011+11)|0);
 var $183=HEAP8[($182)];
 var $184=($183&255);
 var $185=(($_011+10)|0);
 var $186=HEAP8[($185)];
 var $187=($186&255);
 var $188=$187<<8;
 var $189=$188|$184;
 var $190=(($_011+9)|0);
 var $191=HEAP8[($190)];
 var $192=($191&255);
 var $193=$192<<16;
 var $194=$189|$193;
 var $195=HEAP8[($181)];
 var $196=($195&255);
 var $197=$196<<24;
 var $198=$194|$197;
 var $199=(($_011+12)|0);
 var $200=(($_011+15)|0);
 var $201=HEAP8[($200)];
 var $202=($201&255);
 var $203=(($_011+14)|0);
 var $204=HEAP8[($203)];
 var $205=($204&255);
 var $206=$205<<8;
 var $207=$206|$202;
 var $208=(($_011+13)|0);
 var $209=HEAP8[($208)];
 var $210=($209&255);
 var $211=$210<<16;
 var $212=$207|$211;
 var $213=HEAP8[($199)];
 var $214=($213&255);
 var $215=$214<<24;
 var $216=$212|$215;
 var $217=(($_011+16)|0);
 var $218=(($_011+19)|0);
 var $219=HEAP8[($218)];
 var $220=($219&255);
 var $221=(($_011+18)|0);
 var $222=HEAP8[($221)];
 var $223=($222&255);
 var $224=$223<<8;
 var $225=$224|$220;
 var $226=(($_011+17)|0);
 var $227=HEAP8[($226)];
 var $228=($227&255);
 var $229=$228<<16;
 var $230=$225|$229;
 var $231=HEAP8[($217)];
 var $232=($231&255);
 var $233=$232<<24;
 var $234=$230|$233;
 var $235=(($_011+20)|0);
 var $236=(($_011+23)|0);
 var $237=HEAP8[($236)];
 var $238=($237&255);
 var $239=(($_011+22)|0);
 var $240=HEAP8[($239)];
 var $241=($240&255);
 var $242=$241<<8;
 var $243=$242|$238;
 var $244=(($_011+21)|0);
 var $245=HEAP8[($244)];
 var $246=($245&255);
 var $247=$246<<16;
 var $248=$243|$247;
 var $249=HEAP8[($235)];
 var $250=($249&255);
 var $251=$250<<24;
 var $252=$248|$251;
 var $253=(($_011+24)|0);
 var $254=(($_011+27)|0);
 var $255=HEAP8[($254)];
 var $256=($255&255);
 var $257=(($_011+26)|0);
 var $258=HEAP8[($257)];
 var $259=($258&255);
 var $260=$259<<8;
 var $261=$260|$256;
 var $262=(($_011+25)|0);
 var $263=HEAP8[($262)];
 var $264=($263&255);
 var $265=$264<<16;
 var $266=$261|$265;
 var $267=HEAP8[($253)];
 var $268=($267&255);
 var $269=$268<<24;
 var $270=$266|$269;
 var $271=(($_011+28)|0);
 var $272=(($_011+31)|0);
 var $273=HEAP8[($272)];
 var $274=($273&255);
 var $275=(($_011+30)|0);
 var $276=HEAP8[($275)];
 var $277=($276&255);
 var $278=$277<<8;
 var $279=$278|$274;
 var $280=(($_011+29)|0);
 var $281=HEAP8[($280)];
 var $282=($281&255);
 var $283=$282<<16;
 var $284=$279|$283;
 var $285=HEAP8[($271)];
 var $286=($285&255);
 var $287=$286<<24;
 var $288=$284|$287;
 var $289=(($_011+32)|0);
 var $290=(($_011+35)|0);
 var $291=HEAP8[($290)];
 var $292=($291&255);
 var $293=(($_011+34)|0);
 var $294=HEAP8[($293)];
 var $295=($294&255);
 var $296=$295<<8;
 var $297=$296|$292;
 var $298=(($_011+33)|0);
 var $299=HEAP8[($298)];
 var $300=($299&255);
 var $301=$300<<16;
 var $302=$297|$301;
 var $303=HEAP8[($289)];
 var $304=($303&255);
 var $305=$304<<24;
 var $306=$302|$305;
 var $307=(($_011+36)|0);
 var $308=(($_011+39)|0);
 var $309=HEAP8[($308)];
 var $310=($309&255);
 var $311=(($_011+38)|0);
 var $312=HEAP8[($311)];
 var $313=($312&255);
 var $314=$313<<8;
 var $315=$314|$310;
 var $316=(($_011+37)|0);
 var $317=HEAP8[($316)];
 var $318=($317&255);
 var $319=$318<<16;
 var $320=$315|$319;
 var $321=HEAP8[($307)];
 var $322=($321&255);
 var $323=$322<<24;
 var $324=$320|$323;
 var $325=(($_011+40)|0);
 var $326=(($_011+43)|0);
 var $327=HEAP8[($326)];
 var $328=($327&255);
 var $329=(($_011+42)|0);
 var $330=HEAP8[($329)];
 var $331=($330&255);
 var $332=$331<<8;
 var $333=$332|$328;
 var $334=(($_011+41)|0);
 var $335=HEAP8[($334)];
 var $336=($335&255);
 var $337=$336<<16;
 var $338=$333|$337;
 var $339=HEAP8[($325)];
 var $340=($339&255);
 var $341=$340<<24;
 var $342=$338|$341;
 var $343=(($_011+44)|0);
 var $344=(($_011+47)|0);
 var $345=HEAP8[($344)];
 var $346=($345&255);
 var $347=(($_011+46)|0);
 var $348=HEAP8[($347)];
 var $349=($348&255);
 var $350=$349<<8;
 var $351=$350|$346;
 var $352=(($_011+45)|0);
 var $353=HEAP8[($352)];
 var $354=($353&255);
 var $355=$354<<16;
 var $356=$351|$355;
 var $357=HEAP8[($343)];
 var $358=($357&255);
 var $359=$358<<24;
 var $360=$356|$359;
 var $361=(($_011+48)|0);
 var $362=(($_011+51)|0);
 var $363=HEAP8[($362)];
 var $364=($363&255);
 var $365=(($_011+50)|0);
 var $366=HEAP8[($365)];
 var $367=($366&255);
 var $368=$367<<8;
 var $369=$368|$364;
 var $370=(($_011+49)|0);
 var $371=HEAP8[($370)];
 var $372=($371&255);
 var $373=$372<<16;
 var $374=$369|$373;
 var $375=HEAP8[($361)];
 var $376=($375&255);
 var $377=$376<<24;
 var $378=$374|$377;
 var $379=(($_011+52)|0);
 var $380=(($_011+55)|0);
 var $381=HEAP8[($380)];
 var $382=($381&255);
 var $383=(($_011+54)|0);
 var $384=HEAP8[($383)];
 var $385=($384&255);
 var $386=$385<<8;
 var $387=$386|$382;
 var $388=(($_011+53)|0);
 var $389=HEAP8[($388)];
 var $390=($389&255);
 var $391=$390<<16;
 var $392=$387|$391;
 var $393=HEAP8[($379)];
 var $394=($393&255);
 var $395=$394<<24;
 var $396=$392|$395;
 var $397=(($_011+56)|0);
 var $398=(($_011+59)|0);
 var $399=HEAP8[($398)];
 var $400=($399&255);
 var $401=(($_011+58)|0);
 var $402=HEAP8[($401)];
 var $403=($402&255);
 var $404=$403<<8;
 var $405=$404|$400;
 var $406=(($_011+57)|0);
 var $407=HEAP8[($406)];
 var $408=($407&255);
 var $409=$408<<16;
 var $410=$405|$409;
 var $411=HEAP8[($397)];
 var $412=($411&255);
 var $413=$412<<24;
 var $414=$410|$413;
 var $415=(($_011+60)|0);
 var $416=(($_011+63)|0);
 var $417=HEAP8[($416)];
 var $418=($417&255);
 var $419=(($_011+62)|0);
 var $420=HEAP8[($419)];
 var $421=($420&255);
 var $422=$421<<8;
 var $423=$422|$418;
 var $424=(($_011+61)|0);
 var $425=HEAP8[($424)];
 var $426=($425&255);
 var $427=$426<<16;
 var $428=$423|$427;
 var $429=HEAP8[($415)];
 var $430=($429&255);
 var $431=$430<<24;
 var $432=$428|$431;
 var $433=$e_05>>>6;
 var $434=$e_05<<26;
 var $435=$433|$434;
 var $436=$e_05>>>11;
 var $437=$e_05<<21;
 var $438=$436|$437;
 var $439=$435^$438;
 var $440=$e_05>>>25;
 var $441=$e_05<<7;
 var $442=$440|$441;
 var $443=$439^$442;
 var $444=$e_05&$f_04;
 var $445=$e_05^-1;
 var $446=$g_03&$445;
 var $447=$444^$446;
 var $448=((($h_02)+(1116352408))|0);
 var $449=((($448)+($447))|0);
 var $450=((($449)+($443))|0);
 var $451=((($450)+($162))|0);
 var $452=$a_09>>>2;
 var $453=$a_09<<30;
 var $454=$452|$453;
 var $455=$a_09>>>13;
 var $456=$a_09<<19;
 var $457=$455|$456;
 var $458=$454^$457;
 var $459=$a_09>>>22;
 var $460=$a_09<<10;
 var $461=$459|$460;
 var $462=$458^$461;
 var $463=$a_09&$b_08;
 var $464=$a_09^$b_08;
 var $465=$464&$c_07;
 var $466=$465^$463;
 var $467=((($462)+($466))|0);
 var $468=((($451)+($d_06))|0);
 var $469=((($467)+($451))|0);
 var $470=$468>>>6;
 var $471=$468<<26;
 var $472=$470|$471;
 var $473=$468>>>11;
 var $474=$468<<21;
 var $475=$473|$474;
 var $476=$472^$475;
 var $477=$468>>>25;
 var $478=$468<<7;
 var $479=$477|$478;
 var $480=$476^$479;
 var $481=$468&$e_05;
 var $482=$468^-1;
 var $483=$f_04&$482;
 var $484=$481^$483;
 var $485=((($g_03)+(1899447441))|0);
 var $486=((($485)+($484))|0);
 var $487=((($486)+($180))|0);
 var $488=((($487)+($480))|0);
 var $489=$469>>>2;
 var $490=$469<<30;
 var $491=$489|$490;
 var $492=$469>>>13;
 var $493=$469<<19;
 var $494=$492|$493;
 var $495=$491^$494;
 var $496=$469>>>22;
 var $497=$469<<10;
 var $498=$496|$497;
 var $499=$495^$498;
 var $500=$469&$a_09;
 var $501=$469&$b_08;
 var $502=$501^$463;
 var $503=$502^$500;
 var $504=((($499)+($503))|0);
 var $505=((($488)+($c_07))|0);
 var $506=((($504)+($488))|0);
 var $507=$505>>>6;
 var $508=$505<<26;
 var $509=$507|$508;
 var $510=$505>>>11;
 var $511=$505<<21;
 var $512=$510|$511;
 var $513=$509^$512;
 var $514=$505>>>25;
 var $515=$505<<7;
 var $516=$514|$515;
 var $517=$513^$516;
 var $518=$505&$468;
 var $519=$505^-1;
 var $520=$e_05&$519;
 var $521=$518^$520;
 var $522=((($f_04)-(1245643825))|0);
 var $523=((($522)+($198))|0);
 var $524=((($523)+($521))|0);
 var $525=((($524)+($517))|0);
 var $526=$506>>>2;
 var $527=$506<<30;
 var $528=$526|$527;
 var $529=$506>>>13;
 var $530=$506<<19;
 var $531=$529|$530;
 var $532=$528^$531;
 var $533=$506>>>22;
 var $534=$506<<10;
 var $535=$533|$534;
 var $536=$532^$535;
 var $537=$506&$469;
 var $538=$506&$a_09;
 var $539=$538^$500;
 var $540=$539^$537;
 var $541=((($536)+($540))|0);
 var $542=((($525)+($b_08))|0);
 var $543=((($541)+($525))|0);
 var $544=$542>>>6;
 var $545=$542<<26;
 var $546=$544|$545;
 var $547=$542>>>11;
 var $548=$542<<21;
 var $549=$547|$548;
 var $550=$546^$549;
 var $551=$542>>>25;
 var $552=$542<<7;
 var $553=$551|$552;
 var $554=$550^$553;
 var $555=$542&$505;
 var $556=$542^-1;
 var $557=$468&$556;
 var $558=$555^$557;
 var $559=((($e_05)-(373957723))|0);
 var $560=((($559)+($216))|0);
 var $561=((($560)+($558))|0);
 var $562=((($561)+($554))|0);
 var $563=$543>>>2;
 var $564=$543<<30;
 var $565=$563|$564;
 var $566=$543>>>13;
 var $567=$543<<19;
 var $568=$566|$567;
 var $569=$565^$568;
 var $570=$543>>>22;
 var $571=$543<<10;
 var $572=$570|$571;
 var $573=$569^$572;
 var $574=$543&$506;
 var $575=$543&$469;
 var $576=$575^$537;
 var $577=$576^$574;
 var $578=((($573)+($577))|0);
 var $579=((($562)+($a_09))|0);
 var $580=((($578)+($562))|0);
 var $581=$579>>>6;
 var $582=$579<<26;
 var $583=$581|$582;
 var $584=$579>>>11;
 var $585=$579<<21;
 var $586=$584|$585;
 var $587=$583^$586;
 var $588=$579>>>25;
 var $589=$579<<7;
 var $590=$588|$589;
 var $591=$587^$590;
 var $592=$579&$542;
 var $593=$579^-1;
 var $594=$505&$593;
 var $595=$592^$594;
 var $596=((($468)+(961987163))|0);
 var $597=((($596)+($234))|0);
 var $598=((($597)+($595))|0);
 var $599=((($598)+($591))|0);
 var $600=$580>>>2;
 var $601=$580<<30;
 var $602=$600|$601;
 var $603=$580>>>13;
 var $604=$580<<19;
 var $605=$603|$604;
 var $606=$602^$605;
 var $607=$580>>>22;
 var $608=$580<<10;
 var $609=$607|$608;
 var $610=$606^$609;
 var $611=$580&$543;
 var $612=$580&$506;
 var $613=$612^$574;
 var $614=$613^$611;
 var $615=((($610)+($614))|0);
 var $616=((($599)+($469))|0);
 var $617=((($615)+($599))|0);
 var $618=$616>>>6;
 var $619=$616<<26;
 var $620=$618|$619;
 var $621=$616>>>11;
 var $622=$616<<21;
 var $623=$621|$622;
 var $624=$620^$623;
 var $625=$616>>>25;
 var $626=$616<<7;
 var $627=$625|$626;
 var $628=$624^$627;
 var $629=$616&$579;
 var $630=$616^-1;
 var $631=$542&$630;
 var $632=$629^$631;
 var $633=((($505)+(1508970993))|0);
 var $634=((($633)+($252))|0);
 var $635=((($634)+($632))|0);
 var $636=((($635)+($628))|0);
 var $637=$617>>>2;
 var $638=$617<<30;
 var $639=$637|$638;
 var $640=$617>>>13;
 var $641=$617<<19;
 var $642=$640|$641;
 var $643=$639^$642;
 var $644=$617>>>22;
 var $645=$617<<10;
 var $646=$644|$645;
 var $647=$643^$646;
 var $648=$617&$580;
 var $649=$617&$543;
 var $650=$649^$611;
 var $651=$650^$648;
 var $652=((($647)+($651))|0);
 var $653=((($636)+($506))|0);
 var $654=((($652)+($636))|0);
 var $655=$653>>>6;
 var $656=$653<<26;
 var $657=$655|$656;
 var $658=$653>>>11;
 var $659=$653<<21;
 var $660=$658|$659;
 var $661=$657^$660;
 var $662=$653>>>25;
 var $663=$653<<7;
 var $664=$662|$663;
 var $665=$661^$664;
 var $666=$653&$616;
 var $667=$653^-1;
 var $668=$579&$667;
 var $669=$666^$668;
 var $670=((($542)-(1841331548))|0);
 var $671=((($670)+($270))|0);
 var $672=((($671)+($669))|0);
 var $673=((($672)+($665))|0);
 var $674=$654>>>2;
 var $675=$654<<30;
 var $676=$674|$675;
 var $677=$654>>>13;
 var $678=$654<<19;
 var $679=$677|$678;
 var $680=$676^$679;
 var $681=$654>>>22;
 var $682=$654<<10;
 var $683=$681|$682;
 var $684=$680^$683;
 var $685=$654&$617;
 var $686=$654&$580;
 var $687=$686^$648;
 var $688=$687^$685;
 var $689=((($684)+($688))|0);
 var $690=((($673)+($543))|0);
 var $691=((($689)+($673))|0);
 var $692=$690>>>6;
 var $693=$690<<26;
 var $694=$692|$693;
 var $695=$690>>>11;
 var $696=$690<<21;
 var $697=$695|$696;
 var $698=$694^$697;
 var $699=$690>>>25;
 var $700=$690<<7;
 var $701=$699|$700;
 var $702=$698^$701;
 var $703=$690&$653;
 var $704=$690^-1;
 var $705=$616&$704;
 var $706=$703^$705;
 var $707=((($579)-(1424204075))|0);
 var $708=((($707)+($288))|0);
 var $709=((($708)+($706))|0);
 var $710=((($709)+($702))|0);
 var $711=$691>>>2;
 var $712=$691<<30;
 var $713=$711|$712;
 var $714=$691>>>13;
 var $715=$691<<19;
 var $716=$714|$715;
 var $717=$713^$716;
 var $718=$691>>>22;
 var $719=$691<<10;
 var $720=$718|$719;
 var $721=$717^$720;
 var $722=$691&$654;
 var $723=$691&$617;
 var $724=$723^$685;
 var $725=$724^$722;
 var $726=((($721)+($725))|0);
 var $727=((($710)+($580))|0);
 var $728=((($726)+($710))|0);
 var $729=$727>>>6;
 var $730=$727<<26;
 var $731=$729|$730;
 var $732=$727>>>11;
 var $733=$727<<21;
 var $734=$732|$733;
 var $735=$731^$734;
 var $736=$727>>>25;
 var $737=$727<<7;
 var $738=$736|$737;
 var $739=$735^$738;
 var $740=$727&$690;
 var $741=$727^-1;
 var $742=$653&$741;
 var $743=$740^$742;
 var $744=((($616)-(670586216))|0);
 var $745=((($744)+($306))|0);
 var $746=((($745)+($743))|0);
 var $747=((($746)+($739))|0);
 var $748=$728>>>2;
 var $749=$728<<30;
 var $750=$748|$749;
 var $751=$728>>>13;
 var $752=$728<<19;
 var $753=$751|$752;
 var $754=$750^$753;
 var $755=$728>>>22;
 var $756=$728<<10;
 var $757=$755|$756;
 var $758=$754^$757;
 var $759=$728&$691;
 var $760=$728&$654;
 var $761=$760^$722;
 var $762=$761^$759;
 var $763=((($758)+($762))|0);
 var $764=((($747)+($617))|0);
 var $765=((($763)+($747))|0);
 var $766=$764>>>6;
 var $767=$764<<26;
 var $768=$766|$767;
 var $769=$764>>>11;
 var $770=$764<<21;
 var $771=$769|$770;
 var $772=$768^$771;
 var $773=$764>>>25;
 var $774=$764<<7;
 var $775=$773|$774;
 var $776=$772^$775;
 var $777=$764&$727;
 var $778=$764^-1;
 var $779=$690&$778;
 var $780=$777^$779;
 var $781=((($653)+(310598401))|0);
 var $782=((($781)+($324))|0);
 var $783=((($782)+($780))|0);
 var $784=((($783)+($776))|0);
 var $785=$765>>>2;
 var $786=$765<<30;
 var $787=$785|$786;
 var $788=$765>>>13;
 var $789=$765<<19;
 var $790=$788|$789;
 var $791=$787^$790;
 var $792=$765>>>22;
 var $793=$765<<10;
 var $794=$792|$793;
 var $795=$791^$794;
 var $796=$765&$728;
 var $797=$765&$691;
 var $798=$797^$759;
 var $799=$798^$796;
 var $800=((($795)+($799))|0);
 var $801=((($784)+($654))|0);
 var $802=((($800)+($784))|0);
 var $803=$801>>>6;
 var $804=$801<<26;
 var $805=$803|$804;
 var $806=$801>>>11;
 var $807=$801<<21;
 var $808=$806|$807;
 var $809=$805^$808;
 var $810=$801>>>25;
 var $811=$801<<7;
 var $812=$810|$811;
 var $813=$809^$812;
 var $814=$801&$764;
 var $815=$801^-1;
 var $816=$727&$815;
 var $817=$814^$816;
 var $818=((($690)+(607225278))|0);
 var $819=((($818)+($342))|0);
 var $820=((($819)+($817))|0);
 var $821=((($820)+($813))|0);
 var $822=$802>>>2;
 var $823=$802<<30;
 var $824=$822|$823;
 var $825=$802>>>13;
 var $826=$802<<19;
 var $827=$825|$826;
 var $828=$824^$827;
 var $829=$802>>>22;
 var $830=$802<<10;
 var $831=$829|$830;
 var $832=$828^$831;
 var $833=$802&$765;
 var $834=$802&$728;
 var $835=$834^$796;
 var $836=$835^$833;
 var $837=((($832)+($836))|0);
 var $838=((($821)+($691))|0);
 var $839=((($837)+($821))|0);
 var $840=$838>>>6;
 var $841=$838<<26;
 var $842=$840|$841;
 var $843=$838>>>11;
 var $844=$838<<21;
 var $845=$843|$844;
 var $846=$842^$845;
 var $847=$838>>>25;
 var $848=$838<<7;
 var $849=$847|$848;
 var $850=$846^$849;
 var $851=$838&$801;
 var $852=$838^-1;
 var $853=$764&$852;
 var $854=$851^$853;
 var $855=((($727)+(1426881987))|0);
 var $856=((($855)+($360))|0);
 var $857=((($856)+($854))|0);
 var $858=((($857)+($850))|0);
 var $859=$839>>>2;
 var $860=$839<<30;
 var $861=$859|$860;
 var $862=$839>>>13;
 var $863=$839<<19;
 var $864=$862|$863;
 var $865=$861^$864;
 var $866=$839>>>22;
 var $867=$839<<10;
 var $868=$866|$867;
 var $869=$865^$868;
 var $870=$839&$802;
 var $871=$839&$765;
 var $872=$871^$833;
 var $873=$872^$870;
 var $874=((($869)+($873))|0);
 var $875=((($858)+($728))|0);
 var $876=((($874)+($858))|0);
 var $877=$875>>>6;
 var $878=$875<<26;
 var $879=$877|$878;
 var $880=$875>>>11;
 var $881=$875<<21;
 var $882=$880|$881;
 var $883=$879^$882;
 var $884=$875>>>25;
 var $885=$875<<7;
 var $886=$884|$885;
 var $887=$883^$886;
 var $888=$875&$838;
 var $889=$875^-1;
 var $890=$801&$889;
 var $891=$888^$890;
 var $892=((($378)+(1925078388))|0);
 var $893=((($892)+($764))|0);
 var $894=((($893)+($891))|0);
 var $895=((($894)+($887))|0);
 var $896=$876>>>2;
 var $897=$876<<30;
 var $898=$896|$897;
 var $899=$876>>>13;
 var $900=$876<<19;
 var $901=$899|$900;
 var $902=$898^$901;
 var $903=$876>>>22;
 var $904=$876<<10;
 var $905=$903|$904;
 var $906=$902^$905;
 var $907=$876&$839;
 var $908=$876&$802;
 var $909=$908^$870;
 var $910=$909^$907;
 var $911=((($906)+($910))|0);
 var $912=((($895)+($765))|0);
 var $913=((($911)+($895))|0);
 var $914=$912>>>6;
 var $915=$912<<26;
 var $916=$914|$915;
 var $917=$912>>>11;
 var $918=$912<<21;
 var $919=$917|$918;
 var $920=$916^$919;
 var $921=$912>>>25;
 var $922=$912<<7;
 var $923=$921|$922;
 var $924=$920^$923;
 var $925=$912&$875;
 var $926=$912^-1;
 var $927=$838&$926;
 var $928=$925^$927;
 var $929=((($396)-(2132889090))|0);
 var $930=((($929)+($801))|0);
 var $931=((($930)+($928))|0);
 var $932=((($931)+($924))|0);
 var $933=$913>>>2;
 var $934=$913<<30;
 var $935=$933|$934;
 var $936=$913>>>13;
 var $937=$913<<19;
 var $938=$936|$937;
 var $939=$935^$938;
 var $940=$913>>>22;
 var $941=$913<<10;
 var $942=$940|$941;
 var $943=$939^$942;
 var $944=$913&$876;
 var $945=$913&$839;
 var $946=$945^$907;
 var $947=$946^$944;
 var $948=((($943)+($947))|0);
 var $949=((($932)+($802))|0);
 var $950=((($948)+($932))|0);
 var $951=$949>>>6;
 var $952=$949<<26;
 var $953=$951|$952;
 var $954=$949>>>11;
 var $955=$949<<21;
 var $956=$954|$955;
 var $957=$953^$956;
 var $958=$949>>>25;
 var $959=$949<<7;
 var $960=$958|$959;
 var $961=$957^$960;
 var $962=$949&$912;
 var $963=$949^-1;
 var $964=$875&$963;
 var $965=$962^$964;
 var $966=((($414)-(1680079193))|0);
 var $967=((($966)+($838))|0);
 var $968=((($967)+($965))|0);
 var $969=((($968)+($961))|0);
 var $970=$950>>>2;
 var $971=$950<<30;
 var $972=$970|$971;
 var $973=$950>>>13;
 var $974=$950<<19;
 var $975=$973|$974;
 var $976=$972^$975;
 var $977=$950>>>22;
 var $978=$950<<10;
 var $979=$977|$978;
 var $980=$976^$979;
 var $981=$950&$913;
 var $982=$950&$876;
 var $983=$982^$944;
 var $984=$983^$981;
 var $985=((($980)+($984))|0);
 var $986=((($969)+($839))|0);
 var $987=((($985)+($969))|0);
 var $988=$986>>>6;
 var $989=$986<<26;
 var $990=$988|$989;
 var $991=$986>>>11;
 var $992=$986<<21;
 var $993=$991|$992;
 var $994=$990^$993;
 var $995=$986>>>25;
 var $996=$986<<7;
 var $997=$995|$996;
 var $998=$994^$997;
 var $999=$986&$949;
 var $1000=$986^-1;
 var $1001=$912&$1000;
 var $1002=$999^$1001;
 var $1003=((($432)-(1046744716))|0);
 var $1004=((($1003)+($875))|0);
 var $1005=((($1004)+($1002))|0);
 var $1006=((($1005)+($998))|0);
 var $1007=$987>>>2;
 var $1008=$987<<30;
 var $1009=$1007|$1008;
 var $1010=$987>>>13;
 var $1011=$987<<19;
 var $1012=$1010|$1011;
 var $1013=$1009^$1012;
 var $1014=$987>>>22;
 var $1015=$987<<10;
 var $1016=$1014|$1015;
 var $1017=$1013^$1016;
 var $1018=$987&$950;
 var $1019=$987&$913;
 var $1020=$1019^$981;
 var $1021=$1020^$1018;
 var $1022=((($1017)+($1021))|0);
 var $1023=((($1006)+($876))|0);
 var $1024=((($1022)+($1006))|0);
 var $1025=$414>>>17;
 var $1026=$410<<15;
 var $1027=$1025|$1026;
 var $1028=$414>>>19;
 var $1029=$410<<13;
 var $1030=$1028|$1029;
 var $1031=$414>>>10;
 var $1032=$1030^$1031;
 var $1033=$1032^$1027;
 var $1034=$180>>>7;
 var $1035=$166<<25;
 var $1036=$1034|$1035;
 var $1037=$180>>>18;
 var $1038=$176<<14;
 var $1039=$1037|$1038;
 var $1040=$180>>>3;
 var $1041=$1039^$1040;
 var $1042=$1041^$1036;
 var $1043=((($1042)+($162))|0);
 var $1044=((($1043)+($324))|0);
 var $1045=((($1044)+($1033))|0);
 var $1046=$432>>>17;
 var $1047=$428<<15;
 var $1048=$1046|$1047;
 var $1049=$432>>>19;
 var $1050=$428<<13;
 var $1051=$1049|$1050;
 var $1052=$432>>>10;
 var $1053=$1051^$1052;
 var $1054=$1053^$1048;
 var $1055=$198>>>7;
 var $1056=$184<<25;
 var $1057=$1055|$1056;
 var $1058=$198>>>18;
 var $1059=$194<<14;
 var $1060=$1058|$1059;
 var $1061=$198>>>3;
 var $1062=$1060^$1061;
 var $1063=$1062^$1057;
 var $1064=((($1063)+($180))|0);
 var $1065=((($1064)+($342))|0);
 var $1066=((($1065)+($1054))|0);
 var $1067=$1045>>>17;
 var $1068=$1045<<15;
 var $1069=$1067|$1068;
 var $1070=$1045>>>19;
 var $1071=$1045<<13;
 var $1072=$1070|$1071;
 var $1073=$1045>>>10;
 var $1074=$1072^$1073;
 var $1075=$1074^$1069;
 var $1076=$216>>>7;
 var $1077=$202<<25;
 var $1078=$1076|$1077;
 var $1079=$216>>>18;
 var $1080=$212<<14;
 var $1081=$1079|$1080;
 var $1082=$216>>>3;
 var $1083=$1081^$1082;
 var $1084=$1083^$1078;
 var $1085=((($1084)+($198))|0);
 var $1086=((($1085)+($360))|0);
 var $1087=((($1086)+($1075))|0);
 var $1088=$1066>>>17;
 var $1089=$1066<<15;
 var $1090=$1088|$1089;
 var $1091=$1066>>>19;
 var $1092=$1066<<13;
 var $1093=$1091|$1092;
 var $1094=$1066>>>10;
 var $1095=$1093^$1094;
 var $1096=$1095^$1090;
 var $1097=$234>>>7;
 var $1098=$220<<25;
 var $1099=$1097|$1098;
 var $1100=$234>>>18;
 var $1101=$230<<14;
 var $1102=$1100|$1101;
 var $1103=$234>>>3;
 var $1104=$1102^$1103;
 var $1105=$1104^$1099;
 var $1106=((($1105)+($216))|0);
 var $1107=((($1106)+($378))|0);
 var $1108=((($1107)+($1096))|0);
 var $1109=$1087>>>17;
 var $1110=$1087<<15;
 var $1111=$1109|$1110;
 var $1112=$1087>>>19;
 var $1113=$1087<<13;
 var $1114=$1112|$1113;
 var $1115=$1087>>>10;
 var $1116=$1114^$1115;
 var $1117=$1116^$1111;
 var $1118=$252>>>7;
 var $1119=$238<<25;
 var $1120=$1118|$1119;
 var $1121=$252>>>18;
 var $1122=$248<<14;
 var $1123=$1121|$1122;
 var $1124=$252>>>3;
 var $1125=$1123^$1124;
 var $1126=$1125^$1120;
 var $1127=((($1126)+($234))|0);
 var $1128=((($1127)+($396))|0);
 var $1129=((($1128)+($1117))|0);
 var $1130=$1108>>>17;
 var $1131=$1108<<15;
 var $1132=$1130|$1131;
 var $1133=$1108>>>19;
 var $1134=$1108<<13;
 var $1135=$1133|$1134;
 var $1136=$1108>>>10;
 var $1137=$1135^$1136;
 var $1138=$1137^$1132;
 var $1139=$270>>>7;
 var $1140=$256<<25;
 var $1141=$1139|$1140;
 var $1142=$270>>>18;
 var $1143=$266<<14;
 var $1144=$1142|$1143;
 var $1145=$270>>>3;
 var $1146=$1144^$1145;
 var $1147=$1146^$1141;
 var $1148=((($1147)+($252))|0);
 var $1149=((($1148)+($414))|0);
 var $1150=((($1149)+($1138))|0);
 var $1151=$1129>>>17;
 var $1152=$1129<<15;
 var $1153=$1151|$1152;
 var $1154=$1129>>>19;
 var $1155=$1129<<13;
 var $1156=$1154|$1155;
 var $1157=$1129>>>10;
 var $1158=$1156^$1157;
 var $1159=$1158^$1153;
 var $1160=$288>>>7;
 var $1161=$274<<25;
 var $1162=$1160|$1161;
 var $1163=$288>>>18;
 var $1164=$284<<14;
 var $1165=$1163|$1164;
 var $1166=$288>>>3;
 var $1167=$1165^$1166;
 var $1168=$1167^$1162;
 var $1169=((($1168)+($270))|0);
 var $1170=((($1169)+($432))|0);
 var $1171=((($1170)+($1159))|0);
 var $1172=$1150>>>17;
 var $1173=$1150<<15;
 var $1174=$1172|$1173;
 var $1175=$1150>>>19;
 var $1176=$1150<<13;
 var $1177=$1175|$1176;
 var $1178=$1150>>>10;
 var $1179=$1177^$1178;
 var $1180=$1179^$1174;
 var $1181=$306>>>7;
 var $1182=$292<<25;
 var $1183=$1181|$1182;
 var $1184=$306>>>18;
 var $1185=$302<<14;
 var $1186=$1184|$1185;
 var $1187=$306>>>3;
 var $1188=$1186^$1187;
 var $1189=$1188^$1183;
 var $1190=((($1189)+($288))|0);
 var $1191=((($1190)+($1045))|0);
 var $1192=((($1191)+($1180))|0);
 var $1193=$1171>>>17;
 var $1194=$1171<<15;
 var $1195=$1193|$1194;
 var $1196=$1171>>>19;
 var $1197=$1171<<13;
 var $1198=$1196|$1197;
 var $1199=$1171>>>10;
 var $1200=$1198^$1199;
 var $1201=$1200^$1195;
 var $1202=$324>>>7;
 var $1203=$310<<25;
 var $1204=$1202|$1203;
 var $1205=$324>>>18;
 var $1206=$320<<14;
 var $1207=$1205|$1206;
 var $1208=$324>>>3;
 var $1209=$1207^$1208;
 var $1210=$1209^$1204;
 var $1211=((($1210)+($306))|0);
 var $1212=((($1211)+($1066))|0);
 var $1213=((($1212)+($1201))|0);
 var $1214=$1192>>>17;
 var $1215=$1192<<15;
 var $1216=$1214|$1215;
 var $1217=$1192>>>19;
 var $1218=$1192<<13;
 var $1219=$1217|$1218;
 var $1220=$1192>>>10;
 var $1221=$1219^$1220;
 var $1222=$1221^$1216;
 var $1223=$342>>>7;
 var $1224=$328<<25;
 var $1225=$1223|$1224;
 var $1226=$342>>>18;
 var $1227=$338<<14;
 var $1228=$1226|$1227;
 var $1229=$342>>>3;
 var $1230=$1228^$1229;
 var $1231=$1230^$1225;
 var $1232=((($1231)+($324))|0);
 var $1233=((($1232)+($1087))|0);
 var $1234=((($1233)+($1222))|0);
 var $1235=$1213>>>17;
 var $1236=$1213<<15;
 var $1237=$1235|$1236;
 var $1238=$1213>>>19;
 var $1239=$1213<<13;
 var $1240=$1238|$1239;
 var $1241=$1213>>>10;
 var $1242=$1240^$1241;
 var $1243=$1242^$1237;
 var $1244=$360>>>7;
 var $1245=$346<<25;
 var $1246=$1244|$1245;
 var $1247=$360>>>18;
 var $1248=$356<<14;
 var $1249=$1247|$1248;
 var $1250=$360>>>3;
 var $1251=$1249^$1250;
 var $1252=$1251^$1246;
 var $1253=((($1252)+($342))|0);
 var $1254=((($1253)+($1108))|0);
 var $1255=((($1254)+($1243))|0);
 var $1256=$1234>>>17;
 var $1257=$1234<<15;
 var $1258=$1256|$1257;
 var $1259=$1234>>>19;
 var $1260=$1234<<13;
 var $1261=$1259|$1260;
 var $1262=$1234>>>10;
 var $1263=$1261^$1262;
 var $1264=$1263^$1258;
 var $1265=$378>>>7;
 var $1266=$364<<25;
 var $1267=$1265|$1266;
 var $1268=$378>>>18;
 var $1269=$374<<14;
 var $1270=$1268|$1269;
 var $1271=$378>>>3;
 var $1272=$1270^$1271;
 var $1273=$1272^$1267;
 var $1274=((($1273)+($360))|0);
 var $1275=((($1274)+($1129))|0);
 var $1276=((($1275)+($1264))|0);
 var $1277=$1255>>>17;
 var $1278=$1255<<15;
 var $1279=$1277|$1278;
 var $1280=$1255>>>19;
 var $1281=$1255<<13;
 var $1282=$1280|$1281;
 var $1283=$1255>>>10;
 var $1284=$1282^$1283;
 var $1285=$1284^$1279;
 var $1286=$396>>>7;
 var $1287=$382<<25;
 var $1288=$1286|$1287;
 var $1289=$396>>>18;
 var $1290=$392<<14;
 var $1291=$1289|$1290;
 var $1292=$396>>>3;
 var $1293=$1291^$1292;
 var $1294=$1293^$1288;
 var $1295=((($1294)+($378))|0);
 var $1296=((($1295)+($1150))|0);
 var $1297=((($1296)+($1285))|0);
 var $1298=$1276>>>17;
 var $1299=$1276<<15;
 var $1300=$1298|$1299;
 var $1301=$1276>>>19;
 var $1302=$1276<<13;
 var $1303=$1301|$1302;
 var $1304=$1276>>>10;
 var $1305=$1303^$1304;
 var $1306=$1305^$1300;
 var $1307=$414>>>7;
 var $1308=$400<<25;
 var $1309=$1307|$1308;
 var $1310=$414>>>18;
 var $1311=$410<<14;
 var $1312=$1310|$1311;
 var $1313=$414>>>3;
 var $1314=$1312^$1313;
 var $1315=$1314^$1309;
 var $1316=((($1315)+($396))|0);
 var $1317=((($1316)+($1171))|0);
 var $1318=((($1317)+($1306))|0);
 var $1319=$1297>>>17;
 var $1320=$1297<<15;
 var $1321=$1319|$1320;
 var $1322=$1297>>>19;
 var $1323=$1297<<13;
 var $1324=$1322|$1323;
 var $1325=$1297>>>10;
 var $1326=$1324^$1325;
 var $1327=$1326^$1321;
 var $1328=$432>>>7;
 var $1329=$418<<25;
 var $1330=$1328|$1329;
 var $1331=$432>>>18;
 var $1332=$428<<14;
 var $1333=$1331|$1332;
 var $1334=$432>>>3;
 var $1335=$1333^$1334;
 var $1336=$1335^$1330;
 var $1337=((($1336)+($414))|0);
 var $1338=((($1337)+($1192))|0);
 var $1339=((($1338)+($1327))|0);
 var $1340=$1318>>>17;
 var $1341=$1318<<15;
 var $1342=$1340|$1341;
 var $1343=$1318>>>19;
 var $1344=$1318<<13;
 var $1345=$1343|$1344;
 var $1346=$1318>>>10;
 var $1347=$1345^$1346;
 var $1348=$1347^$1342;
 var $1349=$1045>>>7;
 var $1350=$1045<<25;
 var $1351=$1349|$1350;
 var $1352=$1045>>>18;
 var $1353=$1045<<14;
 var $1354=$1352|$1353;
 var $1355=$1045>>>3;
 var $1356=$1354^$1355;
 var $1357=$1356^$1351;
 var $1358=((($1357)+($432))|0);
 var $1359=((($1358)+($1213))|0);
 var $1360=((($1359)+($1348))|0);
 var $1361=$1023>>>6;
 var $1362=$1023<<26;
 var $1363=$1361|$1362;
 var $1364=$1023>>>11;
 var $1365=$1023<<21;
 var $1366=$1364|$1365;
 var $1367=$1363^$1366;
 var $1368=$1023>>>25;
 var $1369=$1023<<7;
 var $1370=$1368|$1369;
 var $1371=$1367^$1370;
 var $1372=$1023&$986;
 var $1373=$1023^-1;
 var $1374=$949&$1373;
 var $1375=$1372^$1374;
 var $1376=((($1045)-(459576895))|0);
 var $1377=((($1376)+($912))|0);
 var $1378=((($1377)+($1375))|0);
 var $1379=((($1378)+($1371))|0);
 var $1380=$1024>>>2;
 var $1381=$1024<<30;
 var $1382=$1380|$1381;
 var $1383=$1024>>>13;
 var $1384=$1024<<19;
 var $1385=$1383|$1384;
 var $1386=$1382^$1385;
 var $1387=$1024>>>22;
 var $1388=$1024<<10;
 var $1389=$1387|$1388;
 var $1390=$1386^$1389;
 var $1391=$1024&$987;
 var $1392=$1024&$950;
 var $1393=$1392^$1018;
 var $1394=$1393^$1391;
 var $1395=((($1390)+($1394))|0);
 var $1396=((($1379)+($913))|0);
 var $1397=((($1395)+($1379))|0);
 var $1398=$1396>>>6;
 var $1399=$1396<<26;
 var $1400=$1398|$1399;
 var $1401=$1396>>>11;
 var $1402=$1396<<21;
 var $1403=$1401|$1402;
 var $1404=$1400^$1403;
 var $1405=$1396>>>25;
 var $1406=$1396<<7;
 var $1407=$1405|$1406;
 var $1408=$1404^$1407;
 var $1409=$1396&$1023;
 var $1410=$1396^-1;
 var $1411=$986&$1410;
 var $1412=$1409^$1411;
 var $1413=((($1066)-(272742522))|0);
 var $1414=((($1413)+($949))|0);
 var $1415=((($1414)+($1412))|0);
 var $1416=((($1415)+($1408))|0);
 var $1417=$1397>>>2;
 var $1418=$1397<<30;
 var $1419=$1417|$1418;
 var $1420=$1397>>>13;
 var $1421=$1397<<19;
 var $1422=$1420|$1421;
 var $1423=$1419^$1422;
 var $1424=$1397>>>22;
 var $1425=$1397<<10;
 var $1426=$1424|$1425;
 var $1427=$1423^$1426;
 var $1428=$1397&$1024;
 var $1429=$1397&$987;
 var $1430=$1429^$1391;
 var $1431=$1430^$1428;
 var $1432=((($1427)+($1431))|0);
 var $1433=((($1416)+($950))|0);
 var $1434=((($1432)+($1416))|0);
 var $1435=$1433>>>6;
 var $1436=$1433<<26;
 var $1437=$1435|$1436;
 var $1438=$1433>>>11;
 var $1439=$1433<<21;
 var $1440=$1438|$1439;
 var $1441=$1437^$1440;
 var $1442=$1433>>>25;
 var $1443=$1433<<7;
 var $1444=$1442|$1443;
 var $1445=$1441^$1444;
 var $1446=$1433&$1396;
 var $1447=$1433^-1;
 var $1448=$1023&$1447;
 var $1449=$1446^$1448;
 var $1450=((($1087)+(264347078))|0);
 var $1451=((($1450)+($986))|0);
 var $1452=((($1451)+($1449))|0);
 var $1453=((($1452)+($1445))|0);
 var $1454=$1434>>>2;
 var $1455=$1434<<30;
 var $1456=$1454|$1455;
 var $1457=$1434>>>13;
 var $1458=$1434<<19;
 var $1459=$1457|$1458;
 var $1460=$1456^$1459;
 var $1461=$1434>>>22;
 var $1462=$1434<<10;
 var $1463=$1461|$1462;
 var $1464=$1460^$1463;
 var $1465=$1434&$1397;
 var $1466=$1434&$1024;
 var $1467=$1466^$1428;
 var $1468=$1467^$1465;
 var $1469=((($1464)+($1468))|0);
 var $1470=((($1453)+($987))|0);
 var $1471=((($1469)+($1453))|0);
 var $1472=$1470>>>6;
 var $1473=$1470<<26;
 var $1474=$1472|$1473;
 var $1475=$1470>>>11;
 var $1476=$1470<<21;
 var $1477=$1475|$1476;
 var $1478=$1474^$1477;
 var $1479=$1470>>>25;
 var $1480=$1470<<7;
 var $1481=$1479|$1480;
 var $1482=$1478^$1481;
 var $1483=$1470&$1433;
 var $1484=$1470^-1;
 var $1485=$1396&$1484;
 var $1486=$1483^$1485;
 var $1487=((($1108)+(604807628))|0);
 var $1488=((($1487)+($1023))|0);
 var $1489=((($1488)+($1486))|0);
 var $1490=((($1489)+($1482))|0);
 var $1491=$1471>>>2;
 var $1492=$1471<<30;
 var $1493=$1491|$1492;
 var $1494=$1471>>>13;
 var $1495=$1471<<19;
 var $1496=$1494|$1495;
 var $1497=$1493^$1496;
 var $1498=$1471>>>22;
 var $1499=$1471<<10;
 var $1500=$1498|$1499;
 var $1501=$1497^$1500;
 var $1502=$1471&$1434;
 var $1503=$1471&$1397;
 var $1504=$1503^$1465;
 var $1505=$1504^$1502;
 var $1506=((($1501)+($1505))|0);
 var $1507=((($1490)+($1024))|0);
 var $1508=((($1506)+($1490))|0);
 var $1509=$1507>>>6;
 var $1510=$1507<<26;
 var $1511=$1509|$1510;
 var $1512=$1507>>>11;
 var $1513=$1507<<21;
 var $1514=$1512|$1513;
 var $1515=$1511^$1514;
 var $1516=$1507>>>25;
 var $1517=$1507<<7;
 var $1518=$1516|$1517;
 var $1519=$1515^$1518;
 var $1520=$1507&$1470;
 var $1521=$1507^-1;
 var $1522=$1433&$1521;
 var $1523=$1520^$1522;
 var $1524=((($1129)+(770255983))|0);
 var $1525=((($1524)+($1396))|0);
 var $1526=((($1525)+($1523))|0);
 var $1527=((($1526)+($1519))|0);
 var $1528=$1508>>>2;
 var $1529=$1508<<30;
 var $1530=$1528|$1529;
 var $1531=$1508>>>13;
 var $1532=$1508<<19;
 var $1533=$1531|$1532;
 var $1534=$1530^$1533;
 var $1535=$1508>>>22;
 var $1536=$1508<<10;
 var $1537=$1535|$1536;
 var $1538=$1534^$1537;
 var $1539=$1508&$1471;
 var $1540=$1508&$1434;
 var $1541=$1540^$1502;
 var $1542=$1541^$1539;
 var $1543=((($1538)+($1542))|0);
 var $1544=((($1527)+($1397))|0);
 var $1545=((($1543)+($1527))|0);
 var $1546=$1544>>>6;
 var $1547=$1544<<26;
 var $1548=$1546|$1547;
 var $1549=$1544>>>11;
 var $1550=$1544<<21;
 var $1551=$1549|$1550;
 var $1552=$1548^$1551;
 var $1553=$1544>>>25;
 var $1554=$1544<<7;
 var $1555=$1553|$1554;
 var $1556=$1552^$1555;
 var $1557=$1544&$1507;
 var $1558=$1544^-1;
 var $1559=$1470&$1558;
 var $1560=$1557^$1559;
 var $1561=((($1150)+(1249150122))|0);
 var $1562=((($1561)+($1433))|0);
 var $1563=((($1562)+($1560))|0);
 var $1564=((($1563)+($1556))|0);
 var $1565=$1545>>>2;
 var $1566=$1545<<30;
 var $1567=$1565|$1566;
 var $1568=$1545>>>13;
 var $1569=$1545<<19;
 var $1570=$1568|$1569;
 var $1571=$1567^$1570;
 var $1572=$1545>>>22;
 var $1573=$1545<<10;
 var $1574=$1572|$1573;
 var $1575=$1571^$1574;
 var $1576=$1545&$1508;
 var $1577=$1545&$1471;
 var $1578=$1577^$1539;
 var $1579=$1578^$1576;
 var $1580=((($1575)+($1579))|0);
 var $1581=((($1564)+($1434))|0);
 var $1582=((($1580)+($1564))|0);
 var $1583=$1581>>>6;
 var $1584=$1581<<26;
 var $1585=$1583|$1584;
 var $1586=$1581>>>11;
 var $1587=$1581<<21;
 var $1588=$1586|$1587;
 var $1589=$1585^$1588;
 var $1590=$1581>>>25;
 var $1591=$1581<<7;
 var $1592=$1590|$1591;
 var $1593=$1589^$1592;
 var $1594=$1581&$1544;
 var $1595=$1581^-1;
 var $1596=$1507&$1595;
 var $1597=$1594^$1596;
 var $1598=((($1171)+(1555081692))|0);
 var $1599=((($1598)+($1470))|0);
 var $1600=((($1599)+($1597))|0);
 var $1601=((($1600)+($1593))|0);
 var $1602=$1582>>>2;
 var $1603=$1582<<30;
 var $1604=$1602|$1603;
 var $1605=$1582>>>13;
 var $1606=$1582<<19;
 var $1607=$1605|$1606;
 var $1608=$1604^$1607;
 var $1609=$1582>>>22;
 var $1610=$1582<<10;
 var $1611=$1609|$1610;
 var $1612=$1608^$1611;
 var $1613=$1582&$1545;
 var $1614=$1582&$1508;
 var $1615=$1614^$1576;
 var $1616=$1615^$1613;
 var $1617=((($1612)+($1616))|0);
 var $1618=((($1601)+($1471))|0);
 var $1619=((($1617)+($1601))|0);
 var $1620=$1618>>>6;
 var $1621=$1618<<26;
 var $1622=$1620|$1621;
 var $1623=$1618>>>11;
 var $1624=$1618<<21;
 var $1625=$1623|$1624;
 var $1626=$1622^$1625;
 var $1627=$1618>>>25;
 var $1628=$1618<<7;
 var $1629=$1627|$1628;
 var $1630=$1626^$1629;
 var $1631=$1618&$1581;
 var $1632=$1618^-1;
 var $1633=$1544&$1632;
 var $1634=$1631^$1633;
 var $1635=((($1192)+(1996064986))|0);
 var $1636=((($1635)+($1507))|0);
 var $1637=((($1636)+($1634))|0);
 var $1638=((($1637)+($1630))|0);
 var $1639=$1619>>>2;
 var $1640=$1619<<30;
 var $1641=$1639|$1640;
 var $1642=$1619>>>13;
 var $1643=$1619<<19;
 var $1644=$1642|$1643;
 var $1645=$1641^$1644;
 var $1646=$1619>>>22;
 var $1647=$1619<<10;
 var $1648=$1646|$1647;
 var $1649=$1645^$1648;
 var $1650=$1619&$1582;
 var $1651=$1619&$1545;
 var $1652=$1651^$1613;
 var $1653=$1652^$1650;
 var $1654=((($1649)+($1653))|0);
 var $1655=((($1638)+($1508))|0);
 var $1656=((($1654)+($1638))|0);
 var $1657=$1655>>>6;
 var $1658=$1655<<26;
 var $1659=$1657|$1658;
 var $1660=$1655>>>11;
 var $1661=$1655<<21;
 var $1662=$1660|$1661;
 var $1663=$1659^$1662;
 var $1664=$1655>>>25;
 var $1665=$1655<<7;
 var $1666=$1664|$1665;
 var $1667=$1663^$1666;
 var $1668=$1655&$1618;
 var $1669=$1655^-1;
 var $1670=$1581&$1669;
 var $1671=$1668^$1670;
 var $1672=((($1213)-(1740746414))|0);
 var $1673=((($1672)+($1544))|0);
 var $1674=((($1673)+($1671))|0);
 var $1675=((($1674)+($1667))|0);
 var $1676=$1656>>>2;
 var $1677=$1656<<30;
 var $1678=$1676|$1677;
 var $1679=$1656>>>13;
 var $1680=$1656<<19;
 var $1681=$1679|$1680;
 var $1682=$1678^$1681;
 var $1683=$1656>>>22;
 var $1684=$1656<<10;
 var $1685=$1683|$1684;
 var $1686=$1682^$1685;
 var $1687=$1656&$1619;
 var $1688=$1656&$1582;
 var $1689=$1688^$1650;
 var $1690=$1689^$1687;
 var $1691=((($1686)+($1690))|0);
 var $1692=((($1675)+($1545))|0);
 var $1693=((($1691)+($1675))|0);
 var $1694=$1692>>>6;
 var $1695=$1692<<26;
 var $1696=$1694|$1695;
 var $1697=$1692>>>11;
 var $1698=$1692<<21;
 var $1699=$1697|$1698;
 var $1700=$1696^$1699;
 var $1701=$1692>>>25;
 var $1702=$1692<<7;
 var $1703=$1701|$1702;
 var $1704=$1700^$1703;
 var $1705=$1692&$1655;
 var $1706=$1692^-1;
 var $1707=$1618&$1706;
 var $1708=$1705^$1707;
 var $1709=((($1234)-(1473132947))|0);
 var $1710=((($1709)+($1581))|0);
 var $1711=((($1710)+($1708))|0);
 var $1712=((($1711)+($1704))|0);
 var $1713=$1693>>>2;
 var $1714=$1693<<30;
 var $1715=$1713|$1714;
 var $1716=$1693>>>13;
 var $1717=$1693<<19;
 var $1718=$1716|$1717;
 var $1719=$1715^$1718;
 var $1720=$1693>>>22;
 var $1721=$1693<<10;
 var $1722=$1720|$1721;
 var $1723=$1719^$1722;
 var $1724=$1693&$1656;
 var $1725=$1693&$1619;
 var $1726=$1725^$1687;
 var $1727=$1726^$1724;
 var $1728=((($1723)+($1727))|0);
 var $1729=((($1712)+($1582))|0);
 var $1730=((($1728)+($1712))|0);
 var $1731=$1729>>>6;
 var $1732=$1729<<26;
 var $1733=$1731|$1732;
 var $1734=$1729>>>11;
 var $1735=$1729<<21;
 var $1736=$1734|$1735;
 var $1737=$1733^$1736;
 var $1738=$1729>>>25;
 var $1739=$1729<<7;
 var $1740=$1738|$1739;
 var $1741=$1737^$1740;
 var $1742=$1729&$1692;
 var $1743=$1729^-1;
 var $1744=$1655&$1743;
 var $1745=$1742^$1744;
 var $1746=((($1255)-(1341970488))|0);
 var $1747=((($1746)+($1618))|0);
 var $1748=((($1747)+($1745))|0);
 var $1749=((($1748)+($1741))|0);
 var $1750=$1730>>>2;
 var $1751=$1730<<30;
 var $1752=$1750|$1751;
 var $1753=$1730>>>13;
 var $1754=$1730<<19;
 var $1755=$1753|$1754;
 var $1756=$1752^$1755;
 var $1757=$1730>>>22;
 var $1758=$1730<<10;
 var $1759=$1757|$1758;
 var $1760=$1756^$1759;
 var $1761=$1730&$1693;
 var $1762=$1730&$1656;
 var $1763=$1762^$1724;
 var $1764=$1763^$1761;
 var $1765=((($1760)+($1764))|0);
 var $1766=((($1749)+($1619))|0);
 var $1767=((($1765)+($1749))|0);
 var $1768=$1766>>>6;
 var $1769=$1766<<26;
 var $1770=$1768|$1769;
 var $1771=$1766>>>11;
 var $1772=$1766<<21;
 var $1773=$1771|$1772;
 var $1774=$1770^$1773;
 var $1775=$1766>>>25;
 var $1776=$1766<<7;
 var $1777=$1775|$1776;
 var $1778=$1774^$1777;
 var $1779=$1766&$1729;
 var $1780=$1766^-1;
 var $1781=$1692&$1780;
 var $1782=$1779^$1781;
 var $1783=((($1276)-(1084653625))|0);
 var $1784=((($1783)+($1655))|0);
 var $1785=((($1784)+($1782))|0);
 var $1786=((($1785)+($1778))|0);
 var $1787=$1767>>>2;
 var $1788=$1767<<30;
 var $1789=$1787|$1788;
 var $1790=$1767>>>13;
 var $1791=$1767<<19;
 var $1792=$1790|$1791;
 var $1793=$1789^$1792;
 var $1794=$1767>>>22;
 var $1795=$1767<<10;
 var $1796=$1794|$1795;
 var $1797=$1793^$1796;
 var $1798=$1767&$1730;
 var $1799=$1767&$1693;
 var $1800=$1799^$1761;
 var $1801=$1800^$1798;
 var $1802=((($1797)+($1801))|0);
 var $1803=((($1786)+($1656))|0);
 var $1804=((($1802)+($1786))|0);
 var $1805=$1803>>>6;
 var $1806=$1803<<26;
 var $1807=$1805|$1806;
 var $1808=$1803>>>11;
 var $1809=$1803<<21;
 var $1810=$1808|$1809;
 var $1811=$1807^$1810;
 var $1812=$1803>>>25;
 var $1813=$1803<<7;
 var $1814=$1812|$1813;
 var $1815=$1811^$1814;
 var $1816=$1803&$1766;
 var $1817=$1803^-1;
 var $1818=$1729&$1817;
 var $1819=$1816^$1818;
 var $1820=((($1297)-(958395405))|0);
 var $1821=((($1820)+($1692))|0);
 var $1822=((($1821)+($1819))|0);
 var $1823=((($1822)+($1815))|0);
 var $1824=$1804>>>2;
 var $1825=$1804<<30;
 var $1826=$1824|$1825;
 var $1827=$1804>>>13;
 var $1828=$1804<<19;
 var $1829=$1827|$1828;
 var $1830=$1826^$1829;
 var $1831=$1804>>>22;
 var $1832=$1804<<10;
 var $1833=$1831|$1832;
 var $1834=$1830^$1833;
 var $1835=$1804&$1767;
 var $1836=$1804&$1730;
 var $1837=$1836^$1798;
 var $1838=$1837^$1835;
 var $1839=((($1834)+($1838))|0);
 var $1840=((($1823)+($1693))|0);
 var $1841=((($1839)+($1823))|0);
 var $1842=$1840>>>6;
 var $1843=$1840<<26;
 var $1844=$1842|$1843;
 var $1845=$1840>>>11;
 var $1846=$1840<<21;
 var $1847=$1845|$1846;
 var $1848=$1844^$1847;
 var $1849=$1840>>>25;
 var $1850=$1840<<7;
 var $1851=$1849|$1850;
 var $1852=$1848^$1851;
 var $1853=$1840&$1803;
 var $1854=$1840^-1;
 var $1855=$1766&$1854;
 var $1856=$1853^$1855;
 var $1857=((($1318)-(710438585))|0);
 var $1858=((($1857)+($1729))|0);
 var $1859=((($1858)+($1856))|0);
 var $1860=((($1859)+($1852))|0);
 var $1861=$1841>>>2;
 var $1862=$1841<<30;
 var $1863=$1861|$1862;
 var $1864=$1841>>>13;
 var $1865=$1841<<19;
 var $1866=$1864|$1865;
 var $1867=$1863^$1866;
 var $1868=$1841>>>22;
 var $1869=$1841<<10;
 var $1870=$1868|$1869;
 var $1871=$1867^$1870;
 var $1872=$1841&$1804;
 var $1873=$1841&$1767;
 var $1874=$1873^$1835;
 var $1875=$1874^$1872;
 var $1876=((($1871)+($1875))|0);
 var $1877=((($1860)+($1730))|0);
 var $1878=((($1876)+($1860))|0);
 var $1879=$1877>>>6;
 var $1880=$1877<<26;
 var $1881=$1879|$1880;
 var $1882=$1877>>>11;
 var $1883=$1877<<21;
 var $1884=$1882|$1883;
 var $1885=$1881^$1884;
 var $1886=$1877>>>25;
 var $1887=$1877<<7;
 var $1888=$1886|$1887;
 var $1889=$1885^$1888;
 var $1890=$1877&$1840;
 var $1891=$1877^-1;
 var $1892=$1803&$1891;
 var $1893=$1890^$1892;
 var $1894=((($1339)+(113926993))|0);
 var $1895=((($1894)+($1766))|0);
 var $1896=((($1895)+($1893))|0);
 var $1897=((($1896)+($1889))|0);
 var $1898=$1878>>>2;
 var $1899=$1878<<30;
 var $1900=$1898|$1899;
 var $1901=$1878>>>13;
 var $1902=$1878<<19;
 var $1903=$1901|$1902;
 var $1904=$1900^$1903;
 var $1905=$1878>>>22;
 var $1906=$1878<<10;
 var $1907=$1905|$1906;
 var $1908=$1904^$1907;
 var $1909=$1878&$1841;
 var $1910=$1878&$1804;
 var $1911=$1910^$1872;
 var $1912=$1911^$1909;
 var $1913=((($1908)+($1912))|0);
 var $1914=((($1897)+($1767))|0);
 var $1915=((($1913)+($1897))|0);
 var $1916=$1914>>>6;
 var $1917=$1914<<26;
 var $1918=$1916|$1917;
 var $1919=$1914>>>11;
 var $1920=$1914<<21;
 var $1921=$1919|$1920;
 var $1922=$1918^$1921;
 var $1923=$1914>>>25;
 var $1924=$1914<<7;
 var $1925=$1923|$1924;
 var $1926=$1922^$1925;
 var $1927=$1914&$1877;
 var $1928=$1914^-1;
 var $1929=$1840&$1928;
 var $1930=$1927^$1929;
 var $1931=((($1360)+(338241895))|0);
 var $1932=((($1931)+($1803))|0);
 var $1933=((($1932)+($1930))|0);
 var $1934=((($1933)+($1926))|0);
 var $1935=$1915>>>2;
 var $1936=$1915<<30;
 var $1937=$1935|$1936;
 var $1938=$1915>>>13;
 var $1939=$1915<<19;
 var $1940=$1938|$1939;
 var $1941=$1937^$1940;
 var $1942=$1915>>>22;
 var $1943=$1915<<10;
 var $1944=$1942|$1943;
 var $1945=$1941^$1944;
 var $1946=$1915&$1878;
 var $1947=$1915&$1841;
 var $1948=$1947^$1909;
 var $1949=$1948^$1946;
 var $1950=((($1945)+($1949))|0);
 var $1951=((($1934)+($1804))|0);
 var $1952=((($1950)+($1934))|0);
 var $1953=$1339>>>17;
 var $1954=$1339<<15;
 var $1955=$1953|$1954;
 var $1956=$1339>>>19;
 var $1957=$1339<<13;
 var $1958=$1956|$1957;
 var $1959=$1339>>>10;
 var $1960=$1958^$1959;
 var $1961=$1960^$1955;
 var $1962=$1066>>>7;
 var $1963=$1066<<25;
 var $1964=$1962|$1963;
 var $1965=$1066>>>18;
 var $1966=$1066<<14;
 var $1967=$1965|$1966;
 var $1968=$1066>>>3;
 var $1969=$1967^$1968;
 var $1970=$1969^$1964;
 var $1971=((($1970)+($1045))|0);
 var $1972=((($1971)+($1234))|0);
 var $1973=((($1972)+($1961))|0);
 var $1974=$1360>>>17;
 var $1975=$1360<<15;
 var $1976=$1974|$1975;
 var $1977=$1360>>>19;
 var $1978=$1360<<13;
 var $1979=$1977|$1978;
 var $1980=$1360>>>10;
 var $1981=$1979^$1980;
 var $1982=$1981^$1976;
 var $1983=$1087>>>7;
 var $1984=$1087<<25;
 var $1985=$1983|$1984;
 var $1986=$1087>>>18;
 var $1987=$1087<<14;
 var $1988=$1986|$1987;
 var $1989=$1087>>>3;
 var $1990=$1988^$1989;
 var $1991=$1990^$1985;
 var $1992=((($1991)+($1066))|0);
 var $1993=((($1992)+($1255))|0);
 var $1994=((($1993)+($1982))|0);
 var $1995=$1973>>>17;
 var $1996=$1973<<15;
 var $1997=$1995|$1996;
 var $1998=$1973>>>19;
 var $1999=$1973<<13;
 var $2000=$1998|$1999;
 var $2001=$1973>>>10;
 var $2002=$2000^$2001;
 var $2003=$2002^$1997;
 var $2004=$1108>>>7;
 var $2005=$1108<<25;
 var $2006=$2004|$2005;
 var $2007=$1108>>>18;
 var $2008=$1108<<14;
 var $2009=$2007|$2008;
 var $2010=$1108>>>3;
 var $2011=$2009^$2010;
 var $2012=$2011^$2006;
 var $2013=((($2012)+($1087))|0);
 var $2014=((($2013)+($1276))|0);
 var $2015=((($2014)+($2003))|0);
 var $2016=$1994>>>17;
 var $2017=$1994<<15;
 var $2018=$2016|$2017;
 var $2019=$1994>>>19;
 var $2020=$1994<<13;
 var $2021=$2019|$2020;
 var $2022=$1994>>>10;
 var $2023=$2021^$2022;
 var $2024=$2023^$2018;
 var $2025=$1129>>>7;
 var $2026=$1129<<25;
 var $2027=$2025|$2026;
 var $2028=$1129>>>18;
 var $2029=$1129<<14;
 var $2030=$2028|$2029;
 var $2031=$1129>>>3;
 var $2032=$2030^$2031;
 var $2033=$2032^$2027;
 var $2034=((($2033)+($1108))|0);
 var $2035=((($2034)+($1297))|0);
 var $2036=((($2035)+($2024))|0);
 var $2037=$2015>>>17;
 var $2038=$2015<<15;
 var $2039=$2037|$2038;
 var $2040=$2015>>>19;
 var $2041=$2015<<13;
 var $2042=$2040|$2041;
 var $2043=$2015>>>10;
 var $2044=$2042^$2043;
 var $2045=$2044^$2039;
 var $2046=$1150>>>7;
 var $2047=$1150<<25;
 var $2048=$2046|$2047;
 var $2049=$1150>>>18;
 var $2050=$1150<<14;
 var $2051=$2049|$2050;
 var $2052=$1150>>>3;
 var $2053=$2051^$2052;
 var $2054=$2053^$2048;
 var $2055=((($2054)+($1129))|0);
 var $2056=((($2055)+($1318))|0);
 var $2057=((($2056)+($2045))|0);
 var $2058=$2036>>>17;
 var $2059=$2036<<15;
 var $2060=$2058|$2059;
 var $2061=$2036>>>19;
 var $2062=$2036<<13;
 var $2063=$2061|$2062;
 var $2064=$2036>>>10;
 var $2065=$2063^$2064;
 var $2066=$2065^$2060;
 var $2067=$1171>>>7;
 var $2068=$1171<<25;
 var $2069=$2067|$2068;
 var $2070=$1171>>>18;
 var $2071=$1171<<14;
 var $2072=$2070|$2071;
 var $2073=$1171>>>3;
 var $2074=$2072^$2073;
 var $2075=$2074^$2069;
 var $2076=((($2075)+($1150))|0);
 var $2077=((($2076)+($1339))|0);
 var $2078=((($2077)+($2066))|0);
 var $2079=$2057>>>17;
 var $2080=$2057<<15;
 var $2081=$2079|$2080;
 var $2082=$2057>>>19;
 var $2083=$2057<<13;
 var $2084=$2082|$2083;
 var $2085=$2057>>>10;
 var $2086=$2084^$2085;
 var $2087=$2086^$2081;
 var $2088=$1192>>>7;
 var $2089=$1192<<25;
 var $2090=$2088|$2089;
 var $2091=$1192>>>18;
 var $2092=$1192<<14;
 var $2093=$2091|$2092;
 var $2094=$1192>>>3;
 var $2095=$2093^$2094;
 var $2096=$2095^$2090;
 var $2097=((($2096)+($1171))|0);
 var $2098=((($2097)+($1360))|0);
 var $2099=((($2098)+($2087))|0);
 var $2100=$2078>>>17;
 var $2101=$2078<<15;
 var $2102=$2100|$2101;
 var $2103=$2078>>>19;
 var $2104=$2078<<13;
 var $2105=$2103|$2104;
 var $2106=$2078>>>10;
 var $2107=$2105^$2106;
 var $2108=$2107^$2102;
 var $2109=$1213>>>7;
 var $2110=$1213<<25;
 var $2111=$2109|$2110;
 var $2112=$1213>>>18;
 var $2113=$1213<<14;
 var $2114=$2112|$2113;
 var $2115=$1213>>>3;
 var $2116=$2114^$2115;
 var $2117=$2116^$2111;
 var $2118=((($2117)+($1192))|0);
 var $2119=((($2118)+($1973))|0);
 var $2120=((($2119)+($2108))|0);
 var $2121=$2099>>>17;
 var $2122=$2099<<15;
 var $2123=$2121|$2122;
 var $2124=$2099>>>19;
 var $2125=$2099<<13;
 var $2126=$2124|$2125;
 var $2127=$2099>>>10;
 var $2128=$2126^$2127;
 var $2129=$2128^$2123;
 var $2130=$1234>>>7;
 var $2131=$1234<<25;
 var $2132=$2130|$2131;
 var $2133=$1234>>>18;
 var $2134=$1234<<14;
 var $2135=$2133|$2134;
 var $2136=$1234>>>3;
 var $2137=$2135^$2136;
 var $2138=$2137^$2132;
 var $2139=((($2138)+($1213))|0);
 var $2140=((($2139)+($1994))|0);
 var $2141=((($2140)+($2129))|0);
 var $2142=$2120>>>17;
 var $2143=$2120<<15;
 var $2144=$2142|$2143;
 var $2145=$2120>>>19;
 var $2146=$2120<<13;
 var $2147=$2145|$2146;
 var $2148=$2120>>>10;
 var $2149=$2147^$2148;
 var $2150=$2149^$2144;
 var $2151=$1255>>>7;
 var $2152=$1255<<25;
 var $2153=$2151|$2152;
 var $2154=$1255>>>18;
 var $2155=$1255<<14;
 var $2156=$2154|$2155;
 var $2157=$1255>>>3;
 var $2158=$2156^$2157;
 var $2159=$2158^$2153;
 var $2160=((($2159)+($1234))|0);
 var $2161=((($2160)+($2015))|0);
 var $2162=((($2161)+($2150))|0);
 var $2163=$2141>>>17;
 var $2164=$2141<<15;
 var $2165=$2163|$2164;
 var $2166=$2141>>>19;
 var $2167=$2141<<13;
 var $2168=$2166|$2167;
 var $2169=$2141>>>10;
 var $2170=$2168^$2169;
 var $2171=$2170^$2165;
 var $2172=$1276>>>7;
 var $2173=$1276<<25;
 var $2174=$2172|$2173;
 var $2175=$1276>>>18;
 var $2176=$1276<<14;
 var $2177=$2175|$2176;
 var $2178=$1276>>>3;
 var $2179=$2177^$2178;
 var $2180=$2179^$2174;
 var $2181=((($2180)+($1255))|0);
 var $2182=((($2181)+($2036))|0);
 var $2183=((($2182)+($2171))|0);
 var $2184=$2162>>>17;
 var $2185=$2162<<15;
 var $2186=$2184|$2185;
 var $2187=$2162>>>19;
 var $2188=$2162<<13;
 var $2189=$2187|$2188;
 var $2190=$2162>>>10;
 var $2191=$2189^$2190;
 var $2192=$2191^$2186;
 var $2193=$1297>>>7;
 var $2194=$1297<<25;
 var $2195=$2193|$2194;
 var $2196=$1297>>>18;
 var $2197=$1297<<14;
 var $2198=$2196|$2197;
 var $2199=$1297>>>3;
 var $2200=$2198^$2199;
 var $2201=$2200^$2195;
 var $2202=((($2201)+($1276))|0);
 var $2203=((($2202)+($2057))|0);
 var $2204=((($2203)+($2192))|0);
 var $2205=$2183>>>17;
 var $2206=$2183<<15;
 var $2207=$2205|$2206;
 var $2208=$2183>>>19;
 var $2209=$2183<<13;
 var $2210=$2208|$2209;
 var $2211=$2183>>>10;
 var $2212=$2210^$2211;
 var $2213=$2212^$2207;
 var $2214=$1318>>>7;
 var $2215=$1318<<25;
 var $2216=$2214|$2215;
 var $2217=$1318>>>18;
 var $2218=$1318<<14;
 var $2219=$2217|$2218;
 var $2220=$1318>>>3;
 var $2221=$2219^$2220;
 var $2222=$2221^$2216;
 var $2223=((($2222)+($1297))|0);
 var $2224=((($2223)+($2078))|0);
 var $2225=((($2224)+($2213))|0);
 var $2226=$2204>>>17;
 var $2227=$2204<<15;
 var $2228=$2226|$2227;
 var $2229=$2204>>>19;
 var $2230=$2204<<13;
 var $2231=$2229|$2230;
 var $2232=$2204>>>10;
 var $2233=$2231^$2232;
 var $2234=$2233^$2228;
 var $2235=$1339>>>7;
 var $2236=$1339<<25;
 var $2237=$2235|$2236;
 var $2238=$1339>>>18;
 var $2239=$1339<<14;
 var $2240=$2238|$2239;
 var $2241=$1339>>>3;
 var $2242=$2240^$2241;
 var $2243=$2242^$2237;
 var $2244=((($2243)+($1318))|0);
 var $2245=((($2244)+($2099))|0);
 var $2246=((($2245)+($2234))|0);
 var $2247=$2225>>>17;
 var $2248=$2225<<15;
 var $2249=$2247|$2248;
 var $2250=$2225>>>19;
 var $2251=$2225<<13;
 var $2252=$2250|$2251;
 var $2253=$2225>>>10;
 var $2254=$2252^$2253;
 var $2255=$2254^$2249;
 var $2256=$1360>>>7;
 var $2257=$1360<<25;
 var $2258=$2256|$2257;
 var $2259=$1360>>>18;
 var $2260=$1360<<14;
 var $2261=$2259|$2260;
 var $2262=$1360>>>3;
 var $2263=$2261^$2262;
 var $2264=$2263^$2258;
 var $2265=((($2264)+($1339))|0);
 var $2266=((($2265)+($2120))|0);
 var $2267=((($2266)+($2255))|0);
 var $2268=$2246>>>17;
 var $2269=$2246<<15;
 var $2270=$2268|$2269;
 var $2271=$2246>>>19;
 var $2272=$2246<<13;
 var $2273=$2271|$2272;
 var $2274=$2246>>>10;
 var $2275=$2273^$2274;
 var $2276=$2275^$2270;
 var $2277=$1973>>>7;
 var $2278=$1973<<25;
 var $2279=$2277|$2278;
 var $2280=$1973>>>18;
 var $2281=$1973<<14;
 var $2282=$2280|$2281;
 var $2283=$1973>>>3;
 var $2284=$2282^$2283;
 var $2285=$2284^$2279;
 var $2286=((($2285)+($1360))|0);
 var $2287=((($2286)+($2141))|0);
 var $2288=((($2287)+($2276))|0);
 var $2289=$1951>>>6;
 var $2290=$1951<<26;
 var $2291=$2289|$2290;
 var $2292=$1951>>>11;
 var $2293=$1951<<21;
 var $2294=$2292|$2293;
 var $2295=$2291^$2294;
 var $2296=$1951>>>25;
 var $2297=$1951<<7;
 var $2298=$2296|$2297;
 var $2299=$2295^$2298;
 var $2300=$1951&$1914;
 var $2301=$1951^-1;
 var $2302=$1877&$2301;
 var $2303=$2300^$2302;
 var $2304=((($1973)+(666307205))|0);
 var $2305=((($2304)+($1840))|0);
 var $2306=((($2305)+($2303))|0);
 var $2307=((($2306)+($2299))|0);
 var $2308=$1952>>>2;
 var $2309=$1952<<30;
 var $2310=$2308|$2309;
 var $2311=$1952>>>13;
 var $2312=$1952<<19;
 var $2313=$2311|$2312;
 var $2314=$2310^$2313;
 var $2315=$1952>>>22;
 var $2316=$1952<<10;
 var $2317=$2315|$2316;
 var $2318=$2314^$2317;
 var $2319=$1952&$1915;
 var $2320=$1952&$1878;
 var $2321=$2320^$1946;
 var $2322=$2321^$2319;
 var $2323=((($2318)+($2322))|0);
 var $2324=((($2307)+($1841))|0);
 var $2325=((($2323)+($2307))|0);
 var $2326=$2324>>>6;
 var $2327=$2324<<26;
 var $2328=$2326|$2327;
 var $2329=$2324>>>11;
 var $2330=$2324<<21;
 var $2331=$2329|$2330;
 var $2332=$2328^$2331;
 var $2333=$2324>>>25;
 var $2334=$2324<<7;
 var $2335=$2333|$2334;
 var $2336=$2332^$2335;
 var $2337=$2324&$1951;
 var $2338=$2324^-1;
 var $2339=$1914&$2338;
 var $2340=$2337^$2339;
 var $2341=((($1994)+(773529912))|0);
 var $2342=((($2341)+($1877))|0);
 var $2343=((($2342)+($2340))|0);
 var $2344=((($2343)+($2336))|0);
 var $2345=$2325>>>2;
 var $2346=$2325<<30;
 var $2347=$2345|$2346;
 var $2348=$2325>>>13;
 var $2349=$2325<<19;
 var $2350=$2348|$2349;
 var $2351=$2347^$2350;
 var $2352=$2325>>>22;
 var $2353=$2325<<10;
 var $2354=$2352|$2353;
 var $2355=$2351^$2354;
 var $2356=$2325&$1952;
 var $2357=$2325&$1915;
 var $2358=$2357^$2319;
 var $2359=$2358^$2356;
 var $2360=((($2355)+($2359))|0);
 var $2361=((($2344)+($1878))|0);
 var $2362=((($2360)+($2344))|0);
 var $2363=$2361>>>6;
 var $2364=$2361<<26;
 var $2365=$2363|$2364;
 var $2366=$2361>>>11;
 var $2367=$2361<<21;
 var $2368=$2366|$2367;
 var $2369=$2365^$2368;
 var $2370=$2361>>>25;
 var $2371=$2361<<7;
 var $2372=$2370|$2371;
 var $2373=$2369^$2372;
 var $2374=$2361&$2324;
 var $2375=$2361^-1;
 var $2376=$1951&$2375;
 var $2377=$2374^$2376;
 var $2378=((($2015)+(1294757372))|0);
 var $2379=((($2378)+($1914))|0);
 var $2380=((($2379)+($2377))|0);
 var $2381=((($2380)+($2373))|0);
 var $2382=$2362>>>2;
 var $2383=$2362<<30;
 var $2384=$2382|$2383;
 var $2385=$2362>>>13;
 var $2386=$2362<<19;
 var $2387=$2385|$2386;
 var $2388=$2384^$2387;
 var $2389=$2362>>>22;
 var $2390=$2362<<10;
 var $2391=$2389|$2390;
 var $2392=$2388^$2391;
 var $2393=$2362&$2325;
 var $2394=$2362&$1952;
 var $2395=$2394^$2356;
 var $2396=$2395^$2393;
 var $2397=((($2392)+($2396))|0);
 var $2398=((($2381)+($1915))|0);
 var $2399=((($2397)+($2381))|0);
 var $2400=$2398>>>6;
 var $2401=$2398<<26;
 var $2402=$2400|$2401;
 var $2403=$2398>>>11;
 var $2404=$2398<<21;
 var $2405=$2403|$2404;
 var $2406=$2402^$2405;
 var $2407=$2398>>>25;
 var $2408=$2398<<7;
 var $2409=$2407|$2408;
 var $2410=$2406^$2409;
 var $2411=$2398&$2361;
 var $2412=$2398^-1;
 var $2413=$2324&$2412;
 var $2414=$2411^$2413;
 var $2415=((($2036)+(1396182291))|0);
 var $2416=((($2415)+($1951))|0);
 var $2417=((($2416)+($2414))|0);
 var $2418=((($2417)+($2410))|0);
 var $2419=$2399>>>2;
 var $2420=$2399<<30;
 var $2421=$2419|$2420;
 var $2422=$2399>>>13;
 var $2423=$2399<<19;
 var $2424=$2422|$2423;
 var $2425=$2421^$2424;
 var $2426=$2399>>>22;
 var $2427=$2399<<10;
 var $2428=$2426|$2427;
 var $2429=$2425^$2428;
 var $2430=$2399&$2362;
 var $2431=$2399&$2325;
 var $2432=$2431^$2393;
 var $2433=$2432^$2430;
 var $2434=((($2429)+($2433))|0);
 var $2435=((($2418)+($1952))|0);
 var $2436=((($2434)+($2418))|0);
 var $2437=$2435>>>6;
 var $2438=$2435<<26;
 var $2439=$2437|$2438;
 var $2440=$2435>>>11;
 var $2441=$2435<<21;
 var $2442=$2440|$2441;
 var $2443=$2439^$2442;
 var $2444=$2435>>>25;
 var $2445=$2435<<7;
 var $2446=$2444|$2445;
 var $2447=$2443^$2446;
 var $2448=$2435&$2398;
 var $2449=$2435^-1;
 var $2450=$2361&$2449;
 var $2451=$2448^$2450;
 var $2452=((($2057)+(1695183700))|0);
 var $2453=((($2452)+($2324))|0);
 var $2454=((($2453)+($2451))|0);
 var $2455=((($2454)+($2447))|0);
 var $2456=$2436>>>2;
 var $2457=$2436<<30;
 var $2458=$2456|$2457;
 var $2459=$2436>>>13;
 var $2460=$2436<<19;
 var $2461=$2459|$2460;
 var $2462=$2458^$2461;
 var $2463=$2436>>>22;
 var $2464=$2436<<10;
 var $2465=$2463|$2464;
 var $2466=$2462^$2465;
 var $2467=$2436&$2399;
 var $2468=$2436&$2362;
 var $2469=$2468^$2430;
 var $2470=$2469^$2467;
 var $2471=((($2466)+($2470))|0);
 var $2472=((($2455)+($2325))|0);
 var $2473=((($2471)+($2455))|0);
 var $2474=$2472>>>6;
 var $2475=$2472<<26;
 var $2476=$2474|$2475;
 var $2477=$2472>>>11;
 var $2478=$2472<<21;
 var $2479=$2477|$2478;
 var $2480=$2476^$2479;
 var $2481=$2472>>>25;
 var $2482=$2472<<7;
 var $2483=$2481|$2482;
 var $2484=$2480^$2483;
 var $2485=$2472&$2435;
 var $2486=$2472^-1;
 var $2487=$2398&$2486;
 var $2488=$2485^$2487;
 var $2489=((($2078)+(1986661051))|0);
 var $2490=((($2489)+($2361))|0);
 var $2491=((($2490)+($2488))|0);
 var $2492=((($2491)+($2484))|0);
 var $2493=$2473>>>2;
 var $2494=$2473<<30;
 var $2495=$2493|$2494;
 var $2496=$2473>>>13;
 var $2497=$2473<<19;
 var $2498=$2496|$2497;
 var $2499=$2495^$2498;
 var $2500=$2473>>>22;
 var $2501=$2473<<10;
 var $2502=$2500|$2501;
 var $2503=$2499^$2502;
 var $2504=$2473&$2436;
 var $2505=$2473&$2399;
 var $2506=$2505^$2467;
 var $2507=$2506^$2504;
 var $2508=((($2503)+($2507))|0);
 var $2509=((($2492)+($2362))|0);
 var $2510=((($2508)+($2492))|0);
 var $2511=$2509>>>6;
 var $2512=$2509<<26;
 var $2513=$2511|$2512;
 var $2514=$2509>>>11;
 var $2515=$2509<<21;
 var $2516=$2514|$2515;
 var $2517=$2513^$2516;
 var $2518=$2509>>>25;
 var $2519=$2509<<7;
 var $2520=$2518|$2519;
 var $2521=$2517^$2520;
 var $2522=$2509&$2472;
 var $2523=$2509^-1;
 var $2524=$2435&$2523;
 var $2525=$2522^$2524;
 var $2526=((($2099)-(2117940946))|0);
 var $2527=((($2526)+($2398))|0);
 var $2528=((($2527)+($2525))|0);
 var $2529=((($2528)+($2521))|0);
 var $2530=$2510>>>2;
 var $2531=$2510<<30;
 var $2532=$2530|$2531;
 var $2533=$2510>>>13;
 var $2534=$2510<<19;
 var $2535=$2533|$2534;
 var $2536=$2532^$2535;
 var $2537=$2510>>>22;
 var $2538=$2510<<10;
 var $2539=$2537|$2538;
 var $2540=$2536^$2539;
 var $2541=$2510&$2473;
 var $2542=$2510&$2436;
 var $2543=$2542^$2504;
 var $2544=$2543^$2541;
 var $2545=((($2540)+($2544))|0);
 var $2546=((($2529)+($2399))|0);
 var $2547=((($2545)+($2529))|0);
 var $2548=$2546>>>6;
 var $2549=$2546<<26;
 var $2550=$2548|$2549;
 var $2551=$2546>>>11;
 var $2552=$2546<<21;
 var $2553=$2551|$2552;
 var $2554=$2550^$2553;
 var $2555=$2546>>>25;
 var $2556=$2546<<7;
 var $2557=$2555|$2556;
 var $2558=$2554^$2557;
 var $2559=$2546&$2509;
 var $2560=$2546^-1;
 var $2561=$2472&$2560;
 var $2562=$2559^$2561;
 var $2563=((($2120)-(1838011259))|0);
 var $2564=((($2563)+($2435))|0);
 var $2565=((($2564)+($2562))|0);
 var $2566=((($2565)+($2558))|0);
 var $2567=$2547>>>2;
 var $2568=$2547<<30;
 var $2569=$2567|$2568;
 var $2570=$2547>>>13;
 var $2571=$2547<<19;
 var $2572=$2570|$2571;
 var $2573=$2569^$2572;
 var $2574=$2547>>>22;
 var $2575=$2547<<10;
 var $2576=$2574|$2575;
 var $2577=$2573^$2576;
 var $2578=$2547&$2510;
 var $2579=$2547&$2473;
 var $2580=$2579^$2541;
 var $2581=$2580^$2578;
 var $2582=((($2577)+($2581))|0);
 var $2583=((($2566)+($2436))|0);
 var $2584=((($2582)+($2566))|0);
 var $2585=$2583>>>6;
 var $2586=$2583<<26;
 var $2587=$2585|$2586;
 var $2588=$2583>>>11;
 var $2589=$2583<<21;
 var $2590=$2588|$2589;
 var $2591=$2587^$2590;
 var $2592=$2583>>>25;
 var $2593=$2583<<7;
 var $2594=$2592|$2593;
 var $2595=$2591^$2594;
 var $2596=$2583&$2546;
 var $2597=$2583^-1;
 var $2598=$2509&$2597;
 var $2599=$2596^$2598;
 var $2600=((($2141)-(1564481375))|0);
 var $2601=((($2600)+($2472))|0);
 var $2602=((($2601)+($2599))|0);
 var $2603=((($2602)+($2595))|0);
 var $2604=$2584>>>2;
 var $2605=$2584<<30;
 var $2606=$2604|$2605;
 var $2607=$2584>>>13;
 var $2608=$2584<<19;
 var $2609=$2607|$2608;
 var $2610=$2606^$2609;
 var $2611=$2584>>>22;
 var $2612=$2584<<10;
 var $2613=$2611|$2612;
 var $2614=$2610^$2613;
 var $2615=$2584&$2547;
 var $2616=$2584&$2510;
 var $2617=$2616^$2578;
 var $2618=$2617^$2615;
 var $2619=((($2614)+($2618))|0);
 var $2620=((($2603)+($2473))|0);
 var $2621=((($2619)+($2603))|0);
 var $2622=$2620>>>6;
 var $2623=$2620<<26;
 var $2624=$2622|$2623;
 var $2625=$2620>>>11;
 var $2626=$2620<<21;
 var $2627=$2625|$2626;
 var $2628=$2624^$2627;
 var $2629=$2620>>>25;
 var $2630=$2620<<7;
 var $2631=$2629|$2630;
 var $2632=$2628^$2631;
 var $2633=$2620&$2583;
 var $2634=$2620^-1;
 var $2635=$2546&$2634;
 var $2636=$2633^$2635;
 var $2637=((($2162)-(1474664885))|0);
 var $2638=((($2637)+($2509))|0);
 var $2639=((($2638)+($2636))|0);
 var $2640=((($2639)+($2632))|0);
 var $2641=$2621>>>2;
 var $2642=$2621<<30;
 var $2643=$2641|$2642;
 var $2644=$2621>>>13;
 var $2645=$2621<<19;
 var $2646=$2644|$2645;
 var $2647=$2643^$2646;
 var $2648=$2621>>>22;
 var $2649=$2621<<10;
 var $2650=$2648|$2649;
 var $2651=$2647^$2650;
 var $2652=$2621&$2584;
 var $2653=$2621&$2547;
 var $2654=$2653^$2615;
 var $2655=$2654^$2652;
 var $2656=((($2651)+($2655))|0);
 var $2657=((($2640)+($2510))|0);
 var $2658=((($2656)+($2640))|0);
 var $2659=$2657>>>6;
 var $2660=$2657<<26;
 var $2661=$2659|$2660;
 var $2662=$2657>>>11;
 var $2663=$2657<<21;
 var $2664=$2662|$2663;
 var $2665=$2661^$2664;
 var $2666=$2657>>>25;
 var $2667=$2657<<7;
 var $2668=$2666|$2667;
 var $2669=$2665^$2668;
 var $2670=$2657&$2620;
 var $2671=$2657^-1;
 var $2672=$2583&$2671;
 var $2673=$2670^$2672;
 var $2674=((($2183)-(1035236496))|0);
 var $2675=((($2674)+($2546))|0);
 var $2676=((($2675)+($2673))|0);
 var $2677=((($2676)+($2669))|0);
 var $2678=$2658>>>2;
 var $2679=$2658<<30;
 var $2680=$2678|$2679;
 var $2681=$2658>>>13;
 var $2682=$2658<<19;
 var $2683=$2681|$2682;
 var $2684=$2680^$2683;
 var $2685=$2658>>>22;
 var $2686=$2658<<10;
 var $2687=$2685|$2686;
 var $2688=$2684^$2687;
 var $2689=$2658&$2621;
 var $2690=$2658&$2584;
 var $2691=$2690^$2652;
 var $2692=$2691^$2689;
 var $2693=((($2688)+($2692))|0);
 var $2694=((($2677)+($2547))|0);
 var $2695=((($2693)+($2677))|0);
 var $2696=$2694>>>6;
 var $2697=$2694<<26;
 var $2698=$2696|$2697;
 var $2699=$2694>>>11;
 var $2700=$2694<<21;
 var $2701=$2699|$2700;
 var $2702=$2698^$2701;
 var $2703=$2694>>>25;
 var $2704=$2694<<7;
 var $2705=$2703|$2704;
 var $2706=$2702^$2705;
 var $2707=$2694&$2657;
 var $2708=$2694^-1;
 var $2709=$2620&$2708;
 var $2710=$2707^$2709;
 var $2711=((($2204)-(949202525))|0);
 var $2712=((($2711)+($2583))|0);
 var $2713=((($2712)+($2710))|0);
 var $2714=((($2713)+($2706))|0);
 var $2715=$2695>>>2;
 var $2716=$2695<<30;
 var $2717=$2715|$2716;
 var $2718=$2695>>>13;
 var $2719=$2695<<19;
 var $2720=$2718|$2719;
 var $2721=$2717^$2720;
 var $2722=$2695>>>22;
 var $2723=$2695<<10;
 var $2724=$2722|$2723;
 var $2725=$2721^$2724;
 var $2726=$2695&$2658;
 var $2727=$2695&$2621;
 var $2728=$2727^$2689;
 var $2729=$2728^$2726;
 var $2730=((($2725)+($2729))|0);
 var $2731=((($2714)+($2584))|0);
 var $2732=((($2730)+($2714))|0);
 var $2733=$2731>>>6;
 var $2734=$2731<<26;
 var $2735=$2733|$2734;
 var $2736=$2731>>>11;
 var $2737=$2731<<21;
 var $2738=$2736|$2737;
 var $2739=$2735^$2738;
 var $2740=$2731>>>25;
 var $2741=$2731<<7;
 var $2742=$2740|$2741;
 var $2743=$2739^$2742;
 var $2744=$2731&$2694;
 var $2745=$2731^-1;
 var $2746=$2657&$2745;
 var $2747=$2744^$2746;
 var $2748=((($2225)-(778901479))|0);
 var $2749=((($2748)+($2620))|0);
 var $2750=((($2749)+($2747))|0);
 var $2751=((($2750)+($2743))|0);
 var $2752=$2732>>>2;
 var $2753=$2732<<30;
 var $2754=$2752|$2753;
 var $2755=$2732>>>13;
 var $2756=$2732<<19;
 var $2757=$2755|$2756;
 var $2758=$2754^$2757;
 var $2759=$2732>>>22;
 var $2760=$2732<<10;
 var $2761=$2759|$2760;
 var $2762=$2758^$2761;
 var $2763=$2732&$2695;
 var $2764=$2732&$2658;
 var $2765=$2764^$2726;
 var $2766=$2765^$2763;
 var $2767=((($2762)+($2766))|0);
 var $2768=((($2751)+($2621))|0);
 var $2769=((($2767)+($2751))|0);
 var $2770=$2768>>>6;
 var $2771=$2768<<26;
 var $2772=$2770|$2771;
 var $2773=$2768>>>11;
 var $2774=$2768<<21;
 var $2775=$2773|$2774;
 var $2776=$2772^$2775;
 var $2777=$2768>>>25;
 var $2778=$2768<<7;
 var $2779=$2777|$2778;
 var $2780=$2776^$2779;
 var $2781=$2768&$2731;
 var $2782=$2768^-1;
 var $2783=$2694&$2782;
 var $2784=$2781^$2783;
 var $2785=((($2246)-(694614492))|0);
 var $2786=((($2785)+($2657))|0);
 var $2787=((($2786)+($2784))|0);
 var $2788=((($2787)+($2780))|0);
 var $2789=$2769>>>2;
 var $2790=$2769<<30;
 var $2791=$2789|$2790;
 var $2792=$2769>>>13;
 var $2793=$2769<<19;
 var $2794=$2792|$2793;
 var $2795=$2791^$2794;
 var $2796=$2769>>>22;
 var $2797=$2769<<10;
 var $2798=$2796|$2797;
 var $2799=$2795^$2798;
 var $2800=$2769&$2732;
 var $2801=$2769&$2695;
 var $2802=$2801^$2763;
 var $2803=$2802^$2800;
 var $2804=((($2799)+($2803))|0);
 var $2805=((($2788)+($2658))|0);
 var $2806=((($2804)+($2788))|0);
 var $2807=$2805>>>6;
 var $2808=$2805<<26;
 var $2809=$2807|$2808;
 var $2810=$2805>>>11;
 var $2811=$2805<<21;
 var $2812=$2810|$2811;
 var $2813=$2809^$2812;
 var $2814=$2805>>>25;
 var $2815=$2805<<7;
 var $2816=$2814|$2815;
 var $2817=$2813^$2816;
 var $2818=$2805&$2768;
 var $2819=$2805^-1;
 var $2820=$2731&$2819;
 var $2821=$2818^$2820;
 var $2822=((($2267)-(200395387))|0);
 var $2823=((($2822)+($2694))|0);
 var $2824=((($2823)+($2821))|0);
 var $2825=((($2824)+($2817))|0);
 var $2826=$2806>>>2;
 var $2827=$2806<<30;
 var $2828=$2826|$2827;
 var $2829=$2806>>>13;
 var $2830=$2806<<19;
 var $2831=$2829|$2830;
 var $2832=$2828^$2831;
 var $2833=$2806>>>22;
 var $2834=$2806<<10;
 var $2835=$2833|$2834;
 var $2836=$2832^$2835;
 var $2837=$2806&$2769;
 var $2838=$2806&$2732;
 var $2839=$2838^$2800;
 var $2840=$2839^$2837;
 var $2841=((($2836)+($2840))|0);
 var $2842=((($2825)+($2695))|0);
 var $2843=((($2841)+($2825))|0);
 var $2844=$2842>>>6;
 var $2845=$2842<<26;
 var $2846=$2844|$2845;
 var $2847=$2842>>>11;
 var $2848=$2842<<21;
 var $2849=$2847|$2848;
 var $2850=$2846^$2849;
 var $2851=$2842>>>25;
 var $2852=$2842<<7;
 var $2853=$2851|$2852;
 var $2854=$2850^$2853;
 var $2855=$2842&$2805;
 var $2856=$2842^-1;
 var $2857=$2768&$2856;
 var $2858=$2855^$2857;
 var $2859=((($2288)+(275423344))|0);
 var $2860=((($2859)+($2731))|0);
 var $2861=((($2860)+($2858))|0);
 var $2862=((($2861)+($2854))|0);
 var $2863=$2843>>>2;
 var $2864=$2843<<30;
 var $2865=$2863|$2864;
 var $2866=$2843>>>13;
 var $2867=$2843<<19;
 var $2868=$2866|$2867;
 var $2869=$2865^$2868;
 var $2870=$2843>>>22;
 var $2871=$2843<<10;
 var $2872=$2870|$2871;
 var $2873=$2869^$2872;
 var $2874=$2843&$2806;
 var $2875=$2843&$2769;
 var $2876=$2875^$2837;
 var $2877=$2876^$2874;
 var $2878=((($2873)+($2877))|0);
 var $2879=((($2862)+($2732))|0);
 var $2880=((($2878)+($2862))|0);
 var $2881=$2267>>>17;
 var $2882=$2267<<15;
 var $2883=$2881|$2882;
 var $2884=$2267>>>19;
 var $2885=$2267<<13;
 var $2886=$2884|$2885;
 var $2887=$2267>>>10;
 var $2888=$2886^$2887;
 var $2889=$2888^$2883;
 var $2890=$1994>>>7;
 var $2891=$1994<<25;
 var $2892=$2890|$2891;
 var $2893=$1994>>>18;
 var $2894=$1994<<14;
 var $2895=$2893|$2894;
 var $2896=$1994>>>3;
 var $2897=$2895^$2896;
 var $2898=$2897^$2892;
 var $2899=((($2898)+($1973))|0);
 var $2900=((($2899)+($2162))|0);
 var $2901=((($2900)+($2889))|0);
 var $2902=$2288>>>17;
 var $2903=$2288<<15;
 var $2904=$2902|$2903;
 var $2905=$2288>>>19;
 var $2906=$2288<<13;
 var $2907=$2905|$2906;
 var $2908=$2288>>>10;
 var $2909=$2907^$2908;
 var $2910=$2909^$2904;
 var $2911=$2015>>>7;
 var $2912=$2015<<25;
 var $2913=$2911|$2912;
 var $2914=$2015>>>18;
 var $2915=$2015<<14;
 var $2916=$2914|$2915;
 var $2917=$2015>>>3;
 var $2918=$2916^$2917;
 var $2919=$2918^$2913;
 var $2920=((($2919)+($1994))|0);
 var $2921=((($2920)+($2183))|0);
 var $2922=((($2921)+($2910))|0);
 var $2923=$2901>>>17;
 var $2924=$2901<<15;
 var $2925=$2923|$2924;
 var $2926=$2901>>>19;
 var $2927=$2901<<13;
 var $2928=$2926|$2927;
 var $2929=$2901>>>10;
 var $2930=$2928^$2929;
 var $2931=$2930^$2925;
 var $2932=$2036>>>7;
 var $2933=$2036<<25;
 var $2934=$2932|$2933;
 var $2935=$2036>>>18;
 var $2936=$2036<<14;
 var $2937=$2935|$2936;
 var $2938=$2036>>>3;
 var $2939=$2937^$2938;
 var $2940=$2939^$2934;
 var $2941=((($2940)+($2015))|0);
 var $2942=((($2941)+($2204))|0);
 var $2943=((($2942)+($2931))|0);
 var $2944=$2922>>>17;
 var $2945=$2922<<15;
 var $2946=$2944|$2945;
 var $2947=$2922>>>19;
 var $2948=$2922<<13;
 var $2949=$2947|$2948;
 var $2950=$2922>>>10;
 var $2951=$2949^$2950;
 var $2952=$2951^$2946;
 var $2953=$2057>>>7;
 var $2954=$2057<<25;
 var $2955=$2953|$2954;
 var $2956=$2057>>>18;
 var $2957=$2057<<14;
 var $2958=$2956|$2957;
 var $2959=$2057>>>3;
 var $2960=$2958^$2959;
 var $2961=$2960^$2955;
 var $2962=((($2961)+($2036))|0);
 var $2963=((($2962)+($2225))|0);
 var $2964=((($2963)+($2952))|0);
 var $2965=$2943>>>17;
 var $2966=$2943<<15;
 var $2967=$2965|$2966;
 var $2968=$2943>>>19;
 var $2969=$2943<<13;
 var $2970=$2968|$2969;
 var $2971=$2943>>>10;
 var $2972=$2970^$2971;
 var $2973=$2972^$2967;
 var $2974=$2078>>>7;
 var $2975=$2078<<25;
 var $2976=$2974|$2975;
 var $2977=$2078>>>18;
 var $2978=$2078<<14;
 var $2979=$2977|$2978;
 var $2980=$2078>>>3;
 var $2981=$2979^$2980;
 var $2982=$2981^$2976;
 var $2983=((($2982)+($2057))|0);
 var $2984=((($2983)+($2246))|0);
 var $2985=((($2984)+($2973))|0);
 var $2986=$2964>>>17;
 var $2987=$2964<<15;
 var $2988=$2986|$2987;
 var $2989=$2964>>>19;
 var $2990=$2964<<13;
 var $2991=$2989|$2990;
 var $2992=$2964>>>10;
 var $2993=$2991^$2992;
 var $2994=$2993^$2988;
 var $2995=$2099>>>7;
 var $2996=$2099<<25;
 var $2997=$2995|$2996;
 var $2998=$2099>>>18;
 var $2999=$2099<<14;
 var $3000=$2998|$2999;
 var $3001=$2099>>>3;
 var $3002=$3000^$3001;
 var $3003=$3002^$2997;
 var $3004=((($3003)+($2078))|0);
 var $3005=((($3004)+($2267))|0);
 var $3006=((($3005)+($2994))|0);
 var $3007=$2985>>>17;
 var $3008=$2985<<15;
 var $3009=$3007|$3008;
 var $3010=$2985>>>19;
 var $3011=$2985<<13;
 var $3012=$3010|$3011;
 var $3013=$2985>>>10;
 var $3014=$3012^$3013;
 var $3015=$3014^$3009;
 var $3016=$2120>>>7;
 var $3017=$2120<<25;
 var $3018=$3016|$3017;
 var $3019=$2120>>>18;
 var $3020=$2120<<14;
 var $3021=$3019|$3020;
 var $3022=$2120>>>3;
 var $3023=$3021^$3022;
 var $3024=$3023^$3018;
 var $3025=((($3024)+($2099))|0);
 var $3026=((($3025)+($2288))|0);
 var $3027=((($3026)+($3015))|0);
 var $3028=$3006>>>17;
 var $3029=$3006<<15;
 var $3030=$3028|$3029;
 var $3031=$3006>>>19;
 var $3032=$3006<<13;
 var $3033=$3031|$3032;
 var $3034=$3006>>>10;
 var $3035=$3033^$3034;
 var $3036=$3035^$3030;
 var $3037=$2141>>>7;
 var $3038=$2141<<25;
 var $3039=$3037|$3038;
 var $3040=$2141>>>18;
 var $3041=$2141<<14;
 var $3042=$3040|$3041;
 var $3043=$2141>>>3;
 var $3044=$3042^$3043;
 var $3045=$3044^$3039;
 var $3046=((($3045)+($2120))|0);
 var $3047=((($3046)+($2901))|0);
 var $3048=((($3047)+($3036))|0);
 var $3049=$3027>>>17;
 var $3050=$3027<<15;
 var $3051=$3049|$3050;
 var $3052=$3027>>>19;
 var $3053=$3027<<13;
 var $3054=$3052|$3053;
 var $3055=$3027>>>10;
 var $3056=$3054^$3055;
 var $3057=$3056^$3051;
 var $3058=$2162>>>7;
 var $3059=$2162<<25;
 var $3060=$3058|$3059;
 var $3061=$2162>>>18;
 var $3062=$2162<<14;
 var $3063=$3061|$3062;
 var $3064=$2162>>>3;
 var $3065=$3063^$3064;
 var $3066=$3065^$3060;
 var $3067=((($3066)+($2141))|0);
 var $3068=((($3067)+($2922))|0);
 var $3069=((($3068)+($3057))|0);
 var $3070=$3048>>>17;
 var $3071=$3048<<15;
 var $3072=$3070|$3071;
 var $3073=$3048>>>19;
 var $3074=$3048<<13;
 var $3075=$3073|$3074;
 var $3076=$3048>>>10;
 var $3077=$3075^$3076;
 var $3078=$3077^$3072;
 var $3079=$2183>>>7;
 var $3080=$2183<<25;
 var $3081=$3079|$3080;
 var $3082=$2183>>>18;
 var $3083=$2183<<14;
 var $3084=$3082|$3083;
 var $3085=$2183>>>3;
 var $3086=$3084^$3085;
 var $3087=$3086^$3081;
 var $3088=((($3087)+($2162))|0);
 var $3089=((($3088)+($2943))|0);
 var $3090=((($3089)+($3078))|0);
 var $3091=$3069>>>17;
 var $3092=$3069<<15;
 var $3093=$3091|$3092;
 var $3094=$3069>>>19;
 var $3095=$3069<<13;
 var $3096=$3094|$3095;
 var $3097=$3069>>>10;
 var $3098=$3096^$3097;
 var $3099=$3098^$3093;
 var $3100=$2204>>>7;
 var $3101=$2204<<25;
 var $3102=$3100|$3101;
 var $3103=$2204>>>18;
 var $3104=$2204<<14;
 var $3105=$3103|$3104;
 var $3106=$2204>>>3;
 var $3107=$3105^$3106;
 var $3108=$3107^$3102;
 var $3109=((($3108)+($2183))|0);
 var $3110=((($3109)+($2964))|0);
 var $3111=((($3110)+($3099))|0);
 var $3112=$3090>>>17;
 var $3113=$3090<<15;
 var $3114=$3112|$3113;
 var $3115=$3090>>>19;
 var $3116=$3090<<13;
 var $3117=$3115|$3116;
 var $3118=$3090>>>10;
 var $3119=$3117^$3118;
 var $3120=$3119^$3114;
 var $3121=$2225>>>7;
 var $3122=$2225<<25;
 var $3123=$3121|$3122;
 var $3124=$2225>>>18;
 var $3125=$2225<<14;
 var $3126=$3124|$3125;
 var $3127=$2225>>>3;
 var $3128=$3126^$3127;
 var $3129=$3128^$3123;
 var $3130=((($3129)+($2204))|0);
 var $3131=((($3130)+($2985))|0);
 var $3132=((($3131)+($3120))|0);
 var $3133=$3111>>>17;
 var $3134=$3111<<15;
 var $3135=$3133|$3134;
 var $3136=$3111>>>19;
 var $3137=$3111<<13;
 var $3138=$3136|$3137;
 var $3139=$3111>>>10;
 var $3140=$3138^$3139;
 var $3141=$3140^$3135;
 var $3142=$2246>>>7;
 var $3143=$2246<<25;
 var $3144=$3142|$3143;
 var $3145=$2246>>>18;
 var $3146=$2246<<14;
 var $3147=$3145|$3146;
 var $3148=$2246>>>3;
 var $3149=$3147^$3148;
 var $3150=$3149^$3144;
 var $3151=((($3150)+($2225))|0);
 var $3152=((($3151)+($3006))|0);
 var $3153=((($3152)+($3141))|0);
 var $3154=$3132>>>17;
 var $3155=$3132<<15;
 var $3156=$3154|$3155;
 var $3157=$3132>>>19;
 var $3158=$3132<<13;
 var $3159=$3157|$3158;
 var $3160=$3132>>>10;
 var $3161=$3159^$3160;
 var $3162=$3161^$3156;
 var $3163=$2267>>>7;
 var $3164=$2267<<25;
 var $3165=$3163|$3164;
 var $3166=$2267>>>18;
 var $3167=$2267<<14;
 var $3168=$3166|$3167;
 var $3169=$2267>>>3;
 var $3170=$3168^$3169;
 var $3171=$3170^$3165;
 var $3172=((($3171)+($2246))|0);
 var $3173=((($3172)+($3027))|0);
 var $3174=((($3173)+($3162))|0);
 var $3175=$3153>>>17;
 var $3176=$3153<<15;
 var $3177=$3175|$3176;
 var $3178=$3153>>>19;
 var $3179=$3153<<13;
 var $3180=$3178|$3179;
 var $3181=$3153>>>10;
 var $3182=$3180^$3181;
 var $3183=$3182^$3177;
 var $3184=$2288>>>7;
 var $3185=$2288<<25;
 var $3186=$3184|$3185;
 var $3187=$2288>>>18;
 var $3188=$2288<<14;
 var $3189=$3187|$3188;
 var $3190=$2288>>>3;
 var $3191=$3189^$3190;
 var $3192=$3191^$3186;
 var $3193=$3174>>>17;
 var $3194=$3174<<15;
 var $3195=$3193|$3194;
 var $3196=$3174>>>19;
 var $3197=$3174<<13;
 var $3198=$3196|$3197;
 var $3199=$3174>>>10;
 var $3200=$3198^$3199;
 var $3201=$3200^$3195;
 var $3202=$2901>>>7;
 var $3203=$2901<<25;
 var $3204=$3202|$3203;
 var $3205=$2901>>>18;
 var $3206=$2901<<14;
 var $3207=$3205|$3206;
 var $3208=$2901>>>3;
 var $3209=$3207^$3208;
 var $3210=$3209^$3204;
 var $3211=$2879>>>6;
 var $3212=$2879<<26;
 var $3213=$3211|$3212;
 var $3214=$2879>>>11;
 var $3215=$2879<<21;
 var $3216=$3214|$3215;
 var $3217=$3213^$3216;
 var $3218=$2879>>>25;
 var $3219=$2879<<7;
 var $3220=$3218|$3219;
 var $3221=$3217^$3220;
 var $3222=$2879&$2842;
 var $3223=$2879^-1;
 var $3224=$2805&$3223;
 var $3225=$3222^$3224;
 var $3226=((($2901)+(430227734))|0);
 var $3227=((($3226)+($2768))|0);
 var $3228=((($3227)+($3225))|0);
 var $3229=((($3228)+($3221))|0);
 var $3230=$2880>>>2;
 var $3231=$2880<<30;
 var $3232=$3230|$3231;
 var $3233=$2880>>>13;
 var $3234=$2880<<19;
 var $3235=$3233|$3234;
 var $3236=$3232^$3235;
 var $3237=$2880>>>22;
 var $3238=$2880<<10;
 var $3239=$3237|$3238;
 var $3240=$3236^$3239;
 var $3241=$2880&$2843;
 var $3242=$2880&$2806;
 var $3243=$3242^$2874;
 var $3244=$3243^$3241;
 var $3245=((($3240)+($3244))|0);
 var $3246=((($3229)+($2769))|0);
 var $3247=((($3245)+($3229))|0);
 var $3248=$3246>>>6;
 var $3249=$3246<<26;
 var $3250=$3248|$3249;
 var $3251=$3246>>>11;
 var $3252=$3246<<21;
 var $3253=$3251|$3252;
 var $3254=$3250^$3253;
 var $3255=$3246>>>25;
 var $3256=$3246<<7;
 var $3257=$3255|$3256;
 var $3258=$3254^$3257;
 var $3259=$3246&$2879;
 var $3260=$3246^-1;
 var $3261=$2842&$3260;
 var $3262=$3259^$3261;
 var $3263=((($2922)+(506948616))|0);
 var $3264=((($3263)+($2805))|0);
 var $3265=((($3264)+($3262))|0);
 var $3266=((($3265)+($3258))|0);
 var $3267=$3247>>>2;
 var $3268=$3247<<30;
 var $3269=$3267|$3268;
 var $3270=$3247>>>13;
 var $3271=$3247<<19;
 var $3272=$3270|$3271;
 var $3273=$3269^$3272;
 var $3274=$3247>>>22;
 var $3275=$3247<<10;
 var $3276=$3274|$3275;
 var $3277=$3273^$3276;
 var $3278=$3247&$2880;
 var $3279=$3247&$2843;
 var $3280=$3279^$3241;
 var $3281=$3280^$3278;
 var $3282=((($3277)+($3281))|0);
 var $3283=((($3266)+($2806))|0);
 var $3284=((($3282)+($3266))|0);
 var $3285=$3283>>>6;
 var $3286=$3283<<26;
 var $3287=$3285|$3286;
 var $3288=$3283>>>11;
 var $3289=$3283<<21;
 var $3290=$3288|$3289;
 var $3291=$3287^$3290;
 var $3292=$3283>>>25;
 var $3293=$3283<<7;
 var $3294=$3292|$3293;
 var $3295=$3291^$3294;
 var $3296=$3283&$3246;
 var $3297=$3283^-1;
 var $3298=$2879&$3297;
 var $3299=$3296^$3298;
 var $3300=((($2943)+(659060556))|0);
 var $3301=((($3300)+($2842))|0);
 var $3302=((($3301)+($3299))|0);
 var $3303=((($3302)+($3295))|0);
 var $3304=$3284>>>2;
 var $3305=$3284<<30;
 var $3306=$3304|$3305;
 var $3307=$3284>>>13;
 var $3308=$3284<<19;
 var $3309=$3307|$3308;
 var $3310=$3306^$3309;
 var $3311=$3284>>>22;
 var $3312=$3284<<10;
 var $3313=$3311|$3312;
 var $3314=$3310^$3313;
 var $3315=$3284&$3247;
 var $3316=$3284&$2880;
 var $3317=$3316^$3278;
 var $3318=$3317^$3315;
 var $3319=((($3314)+($3318))|0);
 var $3320=((($3303)+($2843))|0);
 var $3321=((($3319)+($3303))|0);
 var $3322=$3320>>>6;
 var $3323=$3320<<26;
 var $3324=$3322|$3323;
 var $3325=$3320>>>11;
 var $3326=$3320<<21;
 var $3327=$3325|$3326;
 var $3328=$3324^$3327;
 var $3329=$3320>>>25;
 var $3330=$3320<<7;
 var $3331=$3329|$3330;
 var $3332=$3328^$3331;
 var $3333=$3320&$3283;
 var $3334=$3320^-1;
 var $3335=$3246&$3334;
 var $3336=$3333^$3335;
 var $3337=((($2964)+(883997877))|0);
 var $3338=((($3337)+($2879))|0);
 var $3339=((($3338)+($3336))|0);
 var $3340=((($3339)+($3332))|0);
 var $3341=$3321>>>2;
 var $3342=$3321<<30;
 var $3343=$3341|$3342;
 var $3344=$3321>>>13;
 var $3345=$3321<<19;
 var $3346=$3344|$3345;
 var $3347=$3343^$3346;
 var $3348=$3321>>>22;
 var $3349=$3321<<10;
 var $3350=$3348|$3349;
 var $3351=$3347^$3350;
 var $3352=$3321&$3284;
 var $3353=$3321&$3247;
 var $3354=$3353^$3315;
 var $3355=$3354^$3352;
 var $3356=((($3351)+($3355))|0);
 var $3357=((($3340)+($2880))|0);
 var $3358=((($3356)+($3340))|0);
 var $3359=$3357>>>6;
 var $3360=$3357<<26;
 var $3361=$3359|$3360;
 var $3362=$3357>>>11;
 var $3363=$3357<<21;
 var $3364=$3362|$3363;
 var $3365=$3361^$3364;
 var $3366=$3357>>>25;
 var $3367=$3357<<7;
 var $3368=$3366|$3367;
 var $3369=$3365^$3368;
 var $3370=$3357&$3320;
 var $3371=$3357^-1;
 var $3372=$3283&$3371;
 var $3373=$3370^$3372;
 var $3374=((($2985)+(958139571))|0);
 var $3375=((($3374)+($3246))|0);
 var $3376=((($3375)+($3373))|0);
 var $3377=((($3376)+($3369))|0);
 var $3378=$3358>>>2;
 var $3379=$3358<<30;
 var $3380=$3378|$3379;
 var $3381=$3358>>>13;
 var $3382=$3358<<19;
 var $3383=$3381|$3382;
 var $3384=$3380^$3383;
 var $3385=$3358>>>22;
 var $3386=$3358<<10;
 var $3387=$3385|$3386;
 var $3388=$3384^$3387;
 var $3389=$3358&$3321;
 var $3390=$3358&$3284;
 var $3391=$3390^$3352;
 var $3392=$3391^$3389;
 var $3393=((($3388)+($3392))|0);
 var $3394=((($3377)+($3247))|0);
 var $3395=((($3393)+($3377))|0);
 var $3396=$3394>>>6;
 var $3397=$3394<<26;
 var $3398=$3396|$3397;
 var $3399=$3394>>>11;
 var $3400=$3394<<21;
 var $3401=$3399|$3400;
 var $3402=$3398^$3401;
 var $3403=$3394>>>25;
 var $3404=$3394<<7;
 var $3405=$3403|$3404;
 var $3406=$3402^$3405;
 var $3407=$3394&$3357;
 var $3408=$3394^-1;
 var $3409=$3320&$3408;
 var $3410=$3407^$3409;
 var $3411=((($3006)+(1322822218))|0);
 var $3412=((($3411)+($3283))|0);
 var $3413=((($3412)+($3410))|0);
 var $3414=((($3413)+($3406))|0);
 var $3415=$3395>>>2;
 var $3416=$3395<<30;
 var $3417=$3415|$3416;
 var $3418=$3395>>>13;
 var $3419=$3395<<19;
 var $3420=$3418|$3419;
 var $3421=$3417^$3420;
 var $3422=$3395>>>22;
 var $3423=$3395<<10;
 var $3424=$3422|$3423;
 var $3425=$3421^$3424;
 var $3426=$3395&$3358;
 var $3427=$3395&$3321;
 var $3428=$3427^$3389;
 var $3429=$3428^$3426;
 var $3430=((($3425)+($3429))|0);
 var $3431=((($3414)+($3284))|0);
 var $3432=((($3430)+($3414))|0);
 var $3433=$3431>>>6;
 var $3434=$3431<<26;
 var $3435=$3433|$3434;
 var $3436=$3431>>>11;
 var $3437=$3431<<21;
 var $3438=$3436|$3437;
 var $3439=$3435^$3438;
 var $3440=$3431>>>25;
 var $3441=$3431<<7;
 var $3442=$3440|$3441;
 var $3443=$3439^$3442;
 var $3444=$3431&$3394;
 var $3445=$3431^-1;
 var $3446=$3357&$3445;
 var $3447=$3444^$3446;
 var $3448=((($3027)+(1537002063))|0);
 var $3449=((($3448)+($3320))|0);
 var $3450=((($3449)+($3447))|0);
 var $3451=((($3450)+($3443))|0);
 var $3452=$3432>>>2;
 var $3453=$3432<<30;
 var $3454=$3452|$3453;
 var $3455=$3432>>>13;
 var $3456=$3432<<19;
 var $3457=$3455|$3456;
 var $3458=$3454^$3457;
 var $3459=$3432>>>22;
 var $3460=$3432<<10;
 var $3461=$3459|$3460;
 var $3462=$3458^$3461;
 var $3463=$3432&$3395;
 var $3464=$3432&$3358;
 var $3465=$3464^$3426;
 var $3466=$3465^$3463;
 var $3467=((($3462)+($3466))|0);
 var $3468=((($3451)+($3321))|0);
 var $3469=((($3467)+($3451))|0);
 var $3470=$3468>>>6;
 var $3471=$3468<<26;
 var $3472=$3470|$3471;
 var $3473=$3468>>>11;
 var $3474=$3468<<21;
 var $3475=$3473|$3474;
 var $3476=$3472^$3475;
 var $3477=$3468>>>25;
 var $3478=$3468<<7;
 var $3479=$3477|$3478;
 var $3480=$3476^$3479;
 var $3481=$3468&$3431;
 var $3482=$3468^-1;
 var $3483=$3394&$3482;
 var $3484=$3481^$3483;
 var $3485=((($3048)+(1747873779))|0);
 var $3486=((($3485)+($3357))|0);
 var $3487=((($3486)+($3484))|0);
 var $3488=((($3487)+($3480))|0);
 var $3489=$3469>>>2;
 var $3490=$3469<<30;
 var $3491=$3489|$3490;
 var $3492=$3469>>>13;
 var $3493=$3469<<19;
 var $3494=$3492|$3493;
 var $3495=$3491^$3494;
 var $3496=$3469>>>22;
 var $3497=$3469<<10;
 var $3498=$3496|$3497;
 var $3499=$3495^$3498;
 var $3500=$3469&$3432;
 var $3501=$3469&$3395;
 var $3502=$3501^$3463;
 var $3503=$3502^$3500;
 var $3504=((($3499)+($3503))|0);
 var $3505=((($3488)+($3358))|0);
 var $3506=((($3504)+($3488))|0);
 var $3507=$3505>>>6;
 var $3508=$3505<<26;
 var $3509=$3507|$3508;
 var $3510=$3505>>>11;
 var $3511=$3505<<21;
 var $3512=$3510|$3511;
 var $3513=$3509^$3512;
 var $3514=$3505>>>25;
 var $3515=$3505<<7;
 var $3516=$3514|$3515;
 var $3517=$3513^$3516;
 var $3518=$3505&$3468;
 var $3519=$3505^-1;
 var $3520=$3431&$3519;
 var $3521=$3518^$3520;
 var $3522=((($3069)+(1955562222))|0);
 var $3523=((($3522)+($3394))|0);
 var $3524=((($3523)+($3521))|0);
 var $3525=((($3524)+($3517))|0);
 var $3526=$3506>>>2;
 var $3527=$3506<<30;
 var $3528=$3526|$3527;
 var $3529=$3506>>>13;
 var $3530=$3506<<19;
 var $3531=$3529|$3530;
 var $3532=$3528^$3531;
 var $3533=$3506>>>22;
 var $3534=$3506<<10;
 var $3535=$3533|$3534;
 var $3536=$3532^$3535;
 var $3537=$3506&$3469;
 var $3538=$3506&$3432;
 var $3539=$3538^$3500;
 var $3540=$3539^$3537;
 var $3541=((($3536)+($3540))|0);
 var $3542=((($3525)+($3395))|0);
 var $3543=((($3541)+($3525))|0);
 var $3544=$3542>>>6;
 var $3545=$3542<<26;
 var $3546=$3544|$3545;
 var $3547=$3542>>>11;
 var $3548=$3542<<21;
 var $3549=$3547|$3548;
 var $3550=$3546^$3549;
 var $3551=$3542>>>25;
 var $3552=$3542<<7;
 var $3553=$3551|$3552;
 var $3554=$3550^$3553;
 var $3555=$3542&$3505;
 var $3556=$3542^-1;
 var $3557=$3468&$3556;
 var $3558=$3555^$3557;
 var $3559=((($3090)+(2024104815))|0);
 var $3560=((($3559)+($3431))|0);
 var $3561=((($3560)+($3558))|0);
 var $3562=((($3561)+($3554))|0);
 var $3563=$3543>>>2;
 var $3564=$3543<<30;
 var $3565=$3563|$3564;
 var $3566=$3543>>>13;
 var $3567=$3543<<19;
 var $3568=$3566|$3567;
 var $3569=$3565^$3568;
 var $3570=$3543>>>22;
 var $3571=$3543<<10;
 var $3572=$3570|$3571;
 var $3573=$3569^$3572;
 var $3574=$3543&$3506;
 var $3575=$3543&$3469;
 var $3576=$3575^$3537;
 var $3577=$3576^$3574;
 var $3578=((($3573)+($3577))|0);
 var $3579=((($3562)+($3432))|0);
 var $3580=((($3578)+($3562))|0);
 var $3581=$3579>>>6;
 var $3582=$3579<<26;
 var $3583=$3581|$3582;
 var $3584=$3579>>>11;
 var $3585=$3579<<21;
 var $3586=$3584|$3585;
 var $3587=$3583^$3586;
 var $3588=$3579>>>25;
 var $3589=$3579<<7;
 var $3590=$3588|$3589;
 var $3591=$3587^$3590;
 var $3592=$3579&$3542;
 var $3593=$3579^-1;
 var $3594=$3505&$3593;
 var $3595=$3592^$3594;
 var $3596=((($3111)-(2067236844))|0);
 var $3597=((($3596)+($3468))|0);
 var $3598=((($3597)+($3595))|0);
 var $3599=((($3598)+($3591))|0);
 var $3600=$3580>>>2;
 var $3601=$3580<<30;
 var $3602=$3600|$3601;
 var $3603=$3580>>>13;
 var $3604=$3580<<19;
 var $3605=$3603|$3604;
 var $3606=$3602^$3605;
 var $3607=$3580>>>22;
 var $3608=$3580<<10;
 var $3609=$3607|$3608;
 var $3610=$3606^$3609;
 var $3611=$3580&$3543;
 var $3612=$3580&$3506;
 var $3613=$3612^$3574;
 var $3614=$3613^$3611;
 var $3615=((($3610)+($3614))|0);
 var $3616=((($3599)+($3469))|0);
 var $3617=((($3615)+($3599))|0);
 var $3618=$3616>>>6;
 var $3619=$3616<<26;
 var $3620=$3618|$3619;
 var $3621=$3616>>>11;
 var $3622=$3616<<21;
 var $3623=$3621|$3622;
 var $3624=$3620^$3623;
 var $3625=$3616>>>25;
 var $3626=$3616<<7;
 var $3627=$3625|$3626;
 var $3628=$3624^$3627;
 var $3629=$3616&$3579;
 var $3630=$3616^-1;
 var $3631=$3542&$3630;
 var $3632=$3629^$3631;
 var $3633=((($3132)-(1933114872))|0);
 var $3634=((($3633)+($3505))|0);
 var $3635=((($3634)+($3632))|0);
 var $3636=((($3635)+($3628))|0);
 var $3637=$3617>>>2;
 var $3638=$3617<<30;
 var $3639=$3637|$3638;
 var $3640=$3617>>>13;
 var $3641=$3617<<19;
 var $3642=$3640|$3641;
 var $3643=$3639^$3642;
 var $3644=$3617>>>22;
 var $3645=$3617<<10;
 var $3646=$3644|$3645;
 var $3647=$3643^$3646;
 var $3648=$3617&$3580;
 var $3649=$3617&$3543;
 var $3650=$3649^$3611;
 var $3651=$3650^$3648;
 var $3652=((($3647)+($3651))|0);
 var $3653=((($3636)+($3506))|0);
 var $3654=((($3652)+($3636))|0);
 var $3655=$3653>>>6;
 var $3656=$3653<<26;
 var $3657=$3655|$3656;
 var $3658=$3653>>>11;
 var $3659=$3653<<21;
 var $3660=$3658|$3659;
 var $3661=$3657^$3660;
 var $3662=$3653>>>25;
 var $3663=$3653<<7;
 var $3664=$3662|$3663;
 var $3665=$3661^$3664;
 var $3666=$3653&$3616;
 var $3667=$3653^-1;
 var $3668=$3579&$3667;
 var $3669=$3666^$3668;
 var $3670=((($3153)-(1866530822))|0);
 var $3671=((($3670)+($3542))|0);
 var $3672=((($3671)+($3669))|0);
 var $3673=((($3672)+($3665))|0);
 var $3674=$3654>>>2;
 var $3675=$3654<<30;
 var $3676=$3674|$3675;
 var $3677=$3654>>>13;
 var $3678=$3654<<19;
 var $3679=$3677|$3678;
 var $3680=$3676^$3679;
 var $3681=$3654>>>22;
 var $3682=$3654<<10;
 var $3683=$3681|$3682;
 var $3684=$3680^$3683;
 var $3685=$3654&$3617;
 var $3686=$3654&$3580;
 var $3687=$3686^$3648;
 var $3688=$3687^$3685;
 var $3689=((($3684)+($3688))|0);
 var $3690=((($3673)+($3543))|0);
 var $3691=((($3689)+($3673))|0);
 var $3692=$3690>>>6;
 var $3693=$3690<<26;
 var $3694=$3692|$3693;
 var $3695=$3690>>>11;
 var $3696=$3690<<21;
 var $3697=$3695|$3696;
 var $3698=$3694^$3697;
 var $3699=$3690>>>25;
 var $3700=$3690<<7;
 var $3701=$3699|$3700;
 var $3702=$3698^$3701;
 var $3703=$3690&$3653;
 var $3704=$3690^-1;
 var $3705=$3616&$3704;
 var $3706=$3703^$3705;
 var $3707=((($3174)-(1538233109))|0);
 var $3708=((($3707)+($3579))|0);
 var $3709=((($3708)+($3706))|0);
 var $3710=((($3709)+($3702))|0);
 var $3711=$3691>>>2;
 var $3712=$3691<<30;
 var $3713=$3711|$3712;
 var $3714=$3691>>>13;
 var $3715=$3691<<19;
 var $3716=$3714|$3715;
 var $3717=$3713^$3716;
 var $3718=$3691>>>22;
 var $3719=$3691<<10;
 var $3720=$3718|$3719;
 var $3721=$3717^$3720;
 var $3722=$3691&$3654;
 var $3723=$3691&$3617;
 var $3724=$3723^$3685;
 var $3725=$3724^$3722;
 var $3726=((($3721)+($3725))|0);
 var $3727=((($3710)+($3580))|0);
 var $3728=((($3726)+($3710))|0);
 var $3729=$3727>>>6;
 var $3730=$3727<<26;
 var $3731=$3729|$3730;
 var $3732=$3727>>>11;
 var $3733=$3727<<21;
 var $3734=$3732|$3733;
 var $3735=$3731^$3734;
 var $3736=$3727>>>25;
 var $3737=$3727<<7;
 var $3738=$3736|$3737;
 var $3739=$3735^$3738;
 var $3740=$3727&$3690;
 var $3741=$3727^-1;
 var $3742=$3653&$3741;
 var $3743=$3740^$3742;
 var $3744=((($2267)-(1090935817))|0);
 var $3745=((($3744)+($3192))|0);
 var $3746=((($3745)+($3048))|0);
 var $3747=((($3746)+($3183))|0);
 var $3748=((($3747)+($3616))|0);
 var $3749=((($3748)+($3743))|0);
 var $3750=((($3749)+($3739))|0);
 var $3751=$3728>>>2;
 var $3752=$3728<<30;
 var $3753=$3751|$3752;
 var $3754=$3728>>>13;
 var $3755=$3728<<19;
 var $3756=$3754|$3755;
 var $3757=$3753^$3756;
 var $3758=$3728>>>22;
 var $3759=$3728<<10;
 var $3760=$3758|$3759;
 var $3761=$3757^$3760;
 var $3762=$3728&$3691;
 var $3763=$3728&$3654;
 var $3764=$3763^$3722;
 var $3765=$3764^$3762;
 var $3766=((($3761)+($3765))|0);
 var $3767=((($3750)+($3617))|0);
 var $3768=((($3766)+($3750))|0);
 var $3769=$3767>>>6;
 var $3770=$3767<<26;
 var $3771=$3769|$3770;
 var $3772=$3767>>>11;
 var $3773=$3767<<21;
 var $3774=$3772|$3773;
 var $3775=$3771^$3774;
 var $3776=$3767>>>25;
 var $3777=$3767<<7;
 var $3778=$3776|$3777;
 var $3779=$3775^$3778;
 var $3780=$3767&$3727;
 var $3781=$3767^-1;
 var $3782=$3690&$3781;
 var $3783=$3780^$3782;
 var $3784=((($2288)-(965641998))|0);
 var $3785=((($3784)+($3210))|0);
 var $3786=((($3785)+($3069))|0);
 var $3787=((($3786)+($3201))|0);
 var $3788=((($3787)+($3653))|0);
 var $3789=((($3788)+($3783))|0);
 var $3790=((($3789)+($3779))|0);
 var $3791=$3768>>>2;
 var $3792=$3768<<30;
 var $3793=$3791|$3792;
 var $3794=$3768>>>13;
 var $3795=$3768<<19;
 var $3796=$3794|$3795;
 var $3797=$3793^$3796;
 var $3798=$3768>>>22;
 var $3799=$3768<<10;
 var $3800=$3798|$3799;
 var $3801=$3797^$3800;
 var $3802=$3728^$3691;
 var $3803=$3768&$3802;
 var $3804=$3803^$3762;
 var $3805=((($3804)+($a_09))|0);
 var $3806=((($3805)+($3801))|0);
 var $3807=((($3806)+($3790))|0);
 var $3808=((($3768)+($b_08))|0);
 var $3809=((($3728)+($c_07))|0);
 var $3810=((($3691)+($d_06))|0);
 var $3811=((($3654)+($e_05))|0);
 var $3812=((($3811)+($3790))|0);
 var $3813=((($3767)+($f_04))|0);
 var $3814=((($3727)+($g_03))|0);
 var $3815=((($3690)+($h_02))|0);
 var $3816=(($_011+64)|0);
 var $$etemp$1$0=-64;
 var $$etemp$1$1=-1;
 var $3817$0=_i64Add($_0110$0,$_0110$1,$$etemp$1$0,$$etemp$1$1);var $3817$1=tempRet0;
 var $$etemp$2$0=63;
 var $$etemp$2$1=0;
 var $3818=(($3817$1>>>0) > ($$etemp$2$1>>>0)) | (((($3817$1>>>0) == ($$etemp$2$1>>>0) & ($3817$0>>>0) >  ($$etemp$2$0>>>0))));
 if($3818){var $h_02=$3815;var $g_03=$3814;var $f_04=$3813;var $e_05=$3812;var $d_06=$3810;var $c_07=$3809;var $b_08=$3808;var $a_09=$3807;var $_0110$1=$3817$1;var $_0110$0=$3817$0;var $_011=$3816;label=3;break;}else{label=4;break;}
 case 4: 
 var $extract_t=(($3807)&255);
 var $extract=$3807>>>8;
 var $extract_t20=(($extract)&255);
 var $extract23=$3807>>>16;
 var $extract_t24=(($extract23)&255);
 var $extract27=$3807>>>24;
 var $extract_t28=(($extract27)&255);
 var $extract_t31=(($3808)&255);
 var $extract33=$3808>>>8;
 var $extract_t34=(($extract33)&255);
 var $extract37=$3808>>>16;
 var $extract_t38=(($extract37)&255);
 var $extract41=$3808>>>24;
 var $extract_t42=(($extract41)&255);
 var $extract_t45=(($3809)&255);
 var $extract47=$3809>>>8;
 var $extract_t48=(($extract47)&255);
 var $extract51=$3809>>>16;
 var $extract_t52=(($extract51)&255);
 var $extract55=$3809>>>24;
 var $extract_t56=(($extract55)&255);
 var $extract_t59=(($3810)&255);
 var $extract61=$3810>>>8;
 var $extract_t62=(($extract61)&255);
 var $extract65=$3810>>>16;
 var $extract_t66=(($extract65)&255);
 var $extract69=$3810>>>24;
 var $extract_t70=(($extract69)&255);
 var $extract_t73=(($3812)&255);
 var $extract75=$3812>>>8;
 var $extract_t76=(($extract75)&255);
 var $extract79=$3812>>>16;
 var $extract_t80=(($extract79)&255);
 var $extract83=$3812>>>24;
 var $extract_t84=(($extract83)&255);
 var $extract_t87=(($3813)&255);
 var $extract89=$3813>>>8;
 var $extract_t90=(($extract89)&255);
 var $extract93=$3813>>>16;
 var $extract_t94=(($extract93)&255);
 var $extract97=$3813>>>24;
 var $extract_t98=(($extract97)&255);
 var $extract_t101=(($3814)&255);
 var $extract103=$3814>>>8;
 var $extract_t104=(($extract103)&255);
 var $extract107=$3814>>>16;
 var $extract_t108=(($extract107)&255);
 var $extract111=$3814>>>24;
 var $extract_t112=(($extract111)&255);
 var $extract_t115=(($3815)&255);
 var $extract117=$3815>>>8;
 var $extract_t118=(($extract117)&255);
 var $extract121=$3815>>>16;
 var $extract_t122=(($extract121)&255);
 var $extract125=$3815>>>24;
 var $extract_t126=(($extract125)&255);
 var $h_0_lcssa_off24=$extract_t126;var $h_0_lcssa_off16=$extract_t122;var $h_0_lcssa_off8=$extract_t118;var $h_0_lcssa_off0=$extract_t115;var $g_0_lcssa_off24=$extract_t112;var $g_0_lcssa_off16=$extract_t108;var $g_0_lcssa_off8=$extract_t104;var $g_0_lcssa_off0=$extract_t101;var $f_0_lcssa_off24=$extract_t98;var $f_0_lcssa_off16=$extract_t94;var $f_0_lcssa_off8=$extract_t90;var $f_0_lcssa_off0=$extract_t87;var $e_0_lcssa_off24=$extract_t84;var $e_0_lcssa_off16=$extract_t80;var $e_0_lcssa_off8=$extract_t76;var $e_0_lcssa_off0=$extract_t73;var $d_0_lcssa_off24=$extract_t70;var $d_0_lcssa_off16=$extract_t66;var $d_0_lcssa_off8=$extract_t62;var $d_0_lcssa_off0=$extract_t59;var $c_0_lcssa_off24=$extract_t56;var $c_0_lcssa_off16=$extract_t52;var $c_0_lcssa_off8=$extract_t48;var $c_0_lcssa_off0=$extract_t45;var $b_0_lcssa_off24=$extract_t42;var $b_0_lcssa_off16=$extract_t38;var $b_0_lcssa_off8=$extract_t34;var $b_0_lcssa_off0=$extract_t31;var $a_0_lcssa_off24=$extract_t28;var $a_0_lcssa_off16=$extract_t24;var $a_0_lcssa_off8=$extract_t20;var $a_0_lcssa_off0=$extract_t;label=5;break;
 case 5: 
 var $a_0_lcssa_off0;
 var $a_0_lcssa_off8;
 var $a_0_lcssa_off16;
 var $a_0_lcssa_off24;
 var $b_0_lcssa_off0;
 var $b_0_lcssa_off8;
 var $b_0_lcssa_off16;
 var $b_0_lcssa_off24;
 var $c_0_lcssa_off0;
 var $c_0_lcssa_off8;
 var $c_0_lcssa_off16;
 var $c_0_lcssa_off24;
 var $d_0_lcssa_off0;
 var $d_0_lcssa_off8;
 var $d_0_lcssa_off16;
 var $d_0_lcssa_off24;
 var $e_0_lcssa_off0;
 var $e_0_lcssa_off8;
 var $e_0_lcssa_off16;
 var $e_0_lcssa_off24;
 var $f_0_lcssa_off0;
 var $f_0_lcssa_off8;
 var $f_0_lcssa_off16;
 var $f_0_lcssa_off24;
 var $g_0_lcssa_off0;
 var $g_0_lcssa_off8;
 var $g_0_lcssa_off16;
 var $g_0_lcssa_off24;
 var $h_0_lcssa_off0;
 var $h_0_lcssa_off8;
 var $h_0_lcssa_off16;
 var $h_0_lcssa_off24;
 HEAP8[($1)]=$a_0_lcssa_off0;
 HEAP8[($3)]=$a_0_lcssa_off8;
 HEAP8[($5)]=$a_0_lcssa_off16;
 HEAP8[($statebytes)]=$a_0_lcssa_off24;
 HEAP8[($9)]=$b_0_lcssa_off0;
 HEAP8[($11)]=$b_0_lcssa_off8;
 HEAP8[($13)]=$b_0_lcssa_off16;
 HEAP8[($8)]=$b_0_lcssa_off24;
 HEAP8[($17)]=$c_0_lcssa_off0;
 HEAP8[($19)]=$c_0_lcssa_off8;
 HEAP8[($21)]=$c_0_lcssa_off16;
 HEAP8[($16)]=$c_0_lcssa_off24;
 HEAP8[($25)]=$d_0_lcssa_off0;
 HEAP8[($27)]=$d_0_lcssa_off8;
 HEAP8[($29)]=$d_0_lcssa_off16;
 HEAP8[($24)]=$d_0_lcssa_off24;
 HEAP8[($33)]=$e_0_lcssa_off0;
 HEAP8[($35)]=$e_0_lcssa_off8;
 HEAP8[($37)]=$e_0_lcssa_off16;
 HEAP8[($32)]=$e_0_lcssa_off24;
 HEAP8[($41)]=$f_0_lcssa_off0;
 HEAP8[($43)]=$f_0_lcssa_off8;
 HEAP8[($45)]=$f_0_lcssa_off16;
 HEAP8[($40)]=$f_0_lcssa_off24;
 HEAP8[($49)]=$g_0_lcssa_off0;
 HEAP8[($51)]=$g_0_lcssa_off8;
 HEAP8[($53)]=$g_0_lcssa_off16;
 HEAP8[($48)]=$g_0_lcssa_off24;
 HEAP8[($57)]=$h_0_lcssa_off0;
 HEAP8[($59)]=$h_0_lcssa_off8;
 HEAP8[($61)]=$h_0_lcssa_off16;
 HEAP8[($56)]=$h_0_lcssa_off24;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_hash_sha256($out,$in,$inlen$0,$inlen$1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $h=sp;
 var $h14=(($h)|0);
 var $padded=STACKTOP;STACKTOP = (STACKTOP + 128)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($padded)|0);
 var $$etemp$0$0=128;
 var $$etemp$0$1=0;

 assert(32 % 1 === 0);(_memcpy($h14, 344, 32)|0);
 var $2$0=($inlen$0<<3)|(0>>>29);
 var $2$1=($inlen$1<<3)|($inlen$0>>>29);
 _crypto_hashblocks_sha256($h14,$in,$inlen$0,$inlen$1);
 var $$etemp$1$0=63;
 var $$etemp$1$1=0;
 var $3$0=$inlen$0&$$etemp$1$0;
 var $3$1=$inlen$1&$$etemp$1$1;
 var $4$0=$3$0;
 var $4=$4$0;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $5=(($3$0|0) == ($$etemp$2$0|0)) & (($3$1|0) == ($$etemp$2$1|0));
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $6=(($padded+$4)|0);
 HEAP8[($6)]=-128;
 label=7;break;
 case 3: 
 var $8$0=$inlen$0;
 var $8=$8$0;
 var $9=$8&63;
 var $10=((($8)-($9))|0);
 var $scevgep17=(($in+$10)|0);
 assert($9 % 1 === 0);(_memcpy($1, $scevgep17, $9)|0);
 var $11=(($padded+$4)|0);
 HEAP8[($11)]=-128;
 var $$etemp$3$0=56;
 var $$etemp$3$1=0;
 var $12=(($3$1>>>0) < ($$etemp$3$1>>>0)) | (((($3$1>>>0) == ($$etemp$3$1>>>0) & ($3$0>>>0) <  ($$etemp$3$0>>>0))));
 var $$etemp$4$0=1;
 var $$etemp$4$1=0;
 var $13$0=_i64Add($3$0,$3$1,$$etemp$4$0,$$etemp$4$1);var $13$1=tempRet0;
 if($12){var $17$1=$13$1;var $17$0=$13$0;label=6;break;}else{label=4;break;}
 case 4: 
 var $$etemp$5$0=120;
 var $$etemp$5$1=0;
 var $14=(($13$1>>>0) < ($$etemp$5$1>>>0)) | (((($13$1>>>0) == ($$etemp$5$1>>>0) & ($13$0>>>0) <  ($$etemp$5$0>>>0))));
 if($14){label=5;break;}else{label=9;break;}
 case 5: 
 var $15=((($9)+(1))|0);
 var $scevgep15=(($padded+$15)|0);
 var $16=(((119)-($9))|0);
 _memset($scevgep15, 0, $16)|0;
 label=9;break;
 case 6: 
 var $17$0;
 var $17$1;
 var $$etemp$6$0=56;
 var $$etemp$6$1=0;
 var $18=(($17$1>>>0) < ($$etemp$6$1>>>0)) | (((($17$1>>>0) == ($$etemp$6$1>>>0) & ($17$0>>>0) <  ($$etemp$6$0>>>0))));
 if($18){label=7;break;}else{label=8;break;}
 case 7: 
 var $19$0=$inlen$0;
 var $19=$19$0;
 var $20=$19&63;
 var $21=((($20)+(1))|0);
 var $scevgep=(($padded+$21)|0);
 var $22=(((55)-($20))|0);
 _memset($scevgep, 0, $22)|0;
 label=8;break;
 case 8: 
 var $24$0=($inlen$1>>>21)|(0<<11);
 var $24$1=(0>>>21)|(0<<11);
 var $25$0=$24$0;
 var $25=$25$0&255;
 var $26=(($padded+56)|0);
 HEAP8[($26)]=$25;
 var $27$0=($inlen$1>>>13)|(0<<19);
 var $27$1=(0>>>13)|(0<<19);
 var $28$0=$27$0;
 var $28=$28$0&255;
 var $29=(($padded+57)|0);
 HEAP8[($29)]=$28;
 var $30$0=($inlen$1>>>5)|(0<<27);
 var $30$1=(0>>>5)|(0<<27);
 var $31$0=$30$0;
 var $31=$31$0&255;
 var $32=(($padded+58)|0);
 HEAP8[($32)]=$31;
 var $33$0=($inlen$0>>>29)|($inlen$1<<3);
 var $33$1=($inlen$1>>>29)|(0<<3);
 var $34$0=$33$0;
 var $34=$34$0&255;
 var $35=(($padded+59)|0);
 HEAP8[($35)]=$34;
 var $36$0=($inlen$0>>>21)|($inlen$1<<11);
 var $36$1=($inlen$1>>>21)|(0<<11);
 var $37$0=$36$0;
 var $37=$37$0&255;
 var $38=(($padded+60)|0);
 HEAP8[($38)]=$37;
 var $39$0=($inlen$0>>>13)|($inlen$1<<19);
 var $39$1=($inlen$1>>>13)|(0<<19);
 var $40$0=$39$0;
 var $40=$40$0&255;
 var $41=(($padded+61)|0);
 HEAP8[($41)]=$40;
 var $42$0=($inlen$0>>>5)|($inlen$1<<27);
 var $42$1=($inlen$1>>>5)|(0<<27);
 var $43$0=$42$0;
 var $43=$43$0&255;
 var $44=(($padded+62)|0);
 HEAP8[($44)]=$43;
 var $45$0=$2$0;
 var $45=$45$0&255;
 var $46=(($padded+63)|0);
 HEAP8[($46)]=$45;
 var $$etemp$7$0=64;
 var $$etemp$7$1=0;
 _crypto_hashblocks_sha256($h14,$1,$$etemp$7$0,$$etemp$7$1);
 label=10;break;
 case 9: 
 var $48$0=($inlen$1>>>21)|(0<<11);
 var $48$1=(0>>>21)|(0<<11);
 var $49$0=$48$0;
 var $49=$49$0&255;
 var $50=(($padded+120)|0);
 HEAP8[($50)]=$49;
 var $51$0=($inlen$1>>>13)|(0<<19);
 var $51$1=(0>>>13)|(0<<19);
 var $52$0=$51$0;
 var $52=$52$0&255;
 var $53=(($padded+121)|0);
 HEAP8[($53)]=$52;
 var $54$0=($inlen$1>>>5)|(0<<27);
 var $54$1=(0>>>5)|(0<<27);
 var $55$0=$54$0;
 var $55=$55$0&255;
 var $56=(($padded+122)|0);
 HEAP8[($56)]=$55;
 var $57$0=($inlen$0>>>29)|($inlen$1<<3);
 var $57$1=($inlen$1>>>29)|(0<<3);
 var $58$0=$57$0;
 var $58=$58$0&255;
 var $59=(($padded+123)|0);
 HEAP8[($59)]=$58;
 var $60$0=($inlen$0>>>21)|($inlen$1<<11);
 var $60$1=($inlen$1>>>21)|(0<<11);
 var $61$0=$60$0;
 var $61=$61$0&255;
 var $62=(($padded+124)|0);
 HEAP8[($62)]=$61;
 var $63$0=($inlen$0>>>13)|($inlen$1<<19);
 var $63$1=($inlen$1>>>13)|(0<<19);
 var $64$0=$63$0;
 var $64=$64$0&255;
 var $65=(($padded+125)|0);
 HEAP8[($65)]=$64;
 var $66$0=($inlen$0>>>5)|($inlen$1<<27);
 var $66$1=($inlen$1>>>5)|(0<<27);
 var $67$0=$66$0;
 var $67=$67$0&255;
 var $68=(($padded+126)|0);
 HEAP8[($68)]=$67;
 var $69$0=$2$0;
 var $69=$69$0&255;
 var $70=(($padded+127)|0);
 HEAP8[($70)]=$69;
 var $$etemp$8$0=128;
 var $$etemp$8$1=0;
 _crypto_hashblocks_sha256($h14,$1,$$etemp$8$0,$$etemp$8$1);
 label=10;break;
 case 10: 
 assert(32 % 1 === 0);(_memcpy($out, $h14, 32)|0);
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_stream_xsalsa20_xor($c,$m,$mlen$0,$mlen$1,$n,$k){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $in_i=sp;
 var $block_i=(sp)+(16);
 var $subkey=(sp)+(80);
 var $1=(($subkey)|0);
 _crypto_core_hsalsa20($1,$n,$k,72);
 var $2=(($in_i)|0);
 var $$etemp$0$0=16;
 var $$etemp$0$1=0;

 var $3=(($block_i)|0);
 var $$etemp$1$0=64;
 var $$etemp$1$1=0;

 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $4=(($mlen$0|0) == ($$etemp$2$0|0)) & (($mlen$1|0) == ($$etemp$2$1|0));
 if($4){label=10;break;}else{label=2;break;}
 case 2: 
 var $5=(($n+16)|0);
 var $6=$5;
 var $7=$in_i;
 var $ld$3$0=(($6)|0);
 var $8$0=((((HEAPU8[($ld$3$0)])|(HEAPU8[((($ld$3$0)+(1))|0)]<<8)|(HEAPU8[((($ld$3$0)+(2))|0)]<<16)|(HEAPU8[((($ld$3$0)+(3))|0)]<<24))|0));
 var $ld$4$1=(($6+4)|0);
 var $8$1=((((HEAPU8[($ld$4$1)])|(HEAPU8[((($ld$4$1)+(1))|0)]<<8)|(HEAPU8[((($ld$4$1)+(2))|0)]<<16)|(HEAPU8[((($ld$4$1)+(3))|0)]<<24))|0));
 var $st$5$0=(($7)|0);
 HEAP32[(($st$5$0)>>2)]=$8$0;
 var $st$6$1=(($7+4)|0);
 HEAP32[(($st$6$1)>>2)]=$8$1;
 var $scevgep_i=(($in_i+8)|0);
 var $9=$scevgep_i;
 var $$etemp$7$0=0;
 var $$etemp$7$1=0;
 var $st$8$0=(($9)|0);
 HEAP32[(($st$8$0)>>2)]=$$etemp$7$0;
 var $st$9$1=(($9+4)|0);
 HEAP32[(($st$9$1)>>2)]=$$etemp$7$1;
 var $$etemp$10$0=63;
 var $$etemp$10$1=0;
 var $10=(($mlen$1>>>0) > ($$etemp$10$1>>>0)) | (((($mlen$1>>>0) == ($$etemp$10$1>>>0) & ($mlen$0>>>0) >  ($$etemp$10$0>>>0))));
 if($10){label=3;break;}else{var $_01_lcssa22_i=$c;var $_02_lcssa23_i$1=$mlen$1;var $_02_lcssa23_i$0=$mlen$0;var $_03_lcssa24_i=$m;label=8;break;}
 case 3: 
 var $11=(($in_i+9)|0);
 var $12=(($in_i+10)|0);
 var $13=(($in_i+11)|0);
 var $14=(($in_i+12)|0);
 var $15=(($in_i+13)|0);
 var $16=(($in_i+14)|0);
 var $17=(($in_i+15)|0);
 var $_039_i=$m;var $_0210_i$1=$mlen$1;var $_0210_i$0=$mlen$0;var $_0111_i=$c;label=4;break;
 case 4: 
 var $_0111_i;
 var $_0210_i$0;
 var $_0210_i$1;
 var $_039_i;
 _crypto_core_salsa20($3,$2,$1,56);
 var $i_26_i$1=0;var $i_26_i$0=0;label=5;break;
 case 5: 
 var $i_26_i$0;
 var $i_26_i$1;
 var $20$0=$i_26_i$0;
 var $20=$20$0;
 var $21=(($_039_i+$20)|0);
 var $22=HEAP8[($21)];
 var $23=(($block_i+$20)|0);
 var $24=HEAP8[($23)];
 var $25=$24^$22;
 var $26=(($_0111_i+$20)|0);
 HEAP8[($26)]=$25;
 var $$etemp$11$0=1;
 var $$etemp$11$1=0;
 var $27$0=_i64Add($i_26_i$0,$i_26_i$1,$$etemp$11$0,$$etemp$11$1);var $27$1=tempRet0;
 var $$etemp$12$0=64;
 var $$etemp$12$1=0;
 var $28=(($27$1>>>0) < ($$etemp$12$1>>>0)) | (((($27$1>>>0) == ($$etemp$12$1>>>0) & ($27$0>>>0) <  ($$etemp$12$0>>>0))));
 if($28){var $i_26_i$1=$27$1;var $i_26_i$0=$27$0;label=5;break;}else{label=6;break;}
 case 6: 
 var $29=HEAP8[($scevgep_i)];
 var $30=($29&255);
 var $31=((($30)+(1))|0);
 var $32=(($31)&255);
 HEAP8[($scevgep_i)]=$32;
 var $33=$31>>>8;
 var $34=HEAP8[($11)];
 var $35=($34&255);
 var $36=((($35)+($33))|0);
 var $37=(($36)&255);
 HEAP8[($11)]=$37;
 var $38=$36>>>8;
 var $39=HEAP8[($12)];
 var $40=($39&255);
 var $41=((($40)+($38))|0);
 var $42=(($41)&255);
 HEAP8[($12)]=$42;
 var $43=$41>>>8;
 var $44=HEAP8[($13)];
 var $45=($44&255);
 var $46=((($45)+($43))|0);
 var $47=(($46)&255);
 HEAP8[($13)]=$47;
 var $48=$46>>>8;
 var $49=HEAP8[($14)];
 var $50=($49&255);
 var $51=((($50)+($48))|0);
 var $52=(($51)&255);
 HEAP8[($14)]=$52;
 var $53=$51>>>8;
 var $54=HEAP8[($15)];
 var $55=($54&255);
 var $56=((($55)+($53))|0);
 var $57=(($56)&255);
 HEAP8[($15)]=$57;
 var $58=$56>>>8;
 var $59=HEAP8[($16)];
 var $60=($59&255);
 var $61=((($60)+($58))|0);
 var $62=(($61)&255);
 HEAP8[($16)]=$62;
 var $63=$61>>>8;
 var $64=HEAP8[($17)];
 var $65=($64&255);
 var $66=((($65)+($63))|0);
 var $67=(($66)&255);
 HEAP8[($17)]=$67;
 var $$etemp$13$0=-64;
 var $$etemp$13$1=-1;
 var $68$0=_i64Add($_0210_i$0,$_0210_i$1,$$etemp$13$0,$$etemp$13$1);var $68$1=tempRet0;
 var $69=(($_0111_i+64)|0);
 var $70=(($_039_i+64)|0);
 var $$etemp$14$0=63;
 var $$etemp$14$1=0;
 var $71=(($68$1>>>0) > ($$etemp$14$1>>>0)) | (((($68$1>>>0) == ($$etemp$14$1>>>0) & ($68$0>>>0) >  ($$etemp$14$0>>>0))));
 if($71){var $_039_i=$70;var $_0210_i$1=$68$1;var $_0210_i$0=$68$0;var $_0111_i=$69;label=4;break;}else{label=7;break;}
 case 7: 
 var $$etemp$15$0=0;
 var $$etemp$15$1=0;
 var $72=(($68$0|0) == ($$etemp$15$0|0)) & (($68$1|0) == ($$etemp$15$1|0));
 if($72){label=10;break;}else{var $_01_lcssa22_i=$69;var $_02_lcssa23_i$1=$68$1;var $_02_lcssa23_i$0=$68$0;var $_03_lcssa24_i=$70;label=8;break;}
 case 8: 
 var $_03_lcssa24_i;
 var $_02_lcssa23_i$0;
 var $_02_lcssa23_i$1;
 var $_01_lcssa22_i;
 _crypto_core_salsa20($3,$2,$1,56);
 var $i_44_i$1=0;var $i_44_i$0=0;label=9;break;
 case 9: 
 var $i_44_i$0;
 var $i_44_i$1;
 var $74$0=$i_44_i$0;
 var $74=$74$0;
 var $75=(($_03_lcssa24_i+$74)|0);
 var $76=HEAP8[($75)];
 var $77=(($block_i+$74)|0);
 var $78=HEAP8[($77)];
 var $79=$78^$76;
 var $80=(($_01_lcssa22_i+$74)|0);
 HEAP8[($80)]=$79;
 var $$etemp$16$0=1;
 var $$etemp$16$1=0;
 var $81$0=_i64Add($i_44_i$0,$i_44_i$1,$$etemp$16$0,$$etemp$16$1);var $81$1=tempRet0;
 var $82=(($81$1>>>0) < ($_02_lcssa23_i$1>>>0)) | (((($81$1>>>0) == ($_02_lcssa23_i$1>>>0) & ($81$0>>>0) <  ($_02_lcssa23_i$0>>>0))));
 if($82){var $i_44_i$1=$81$1;var $i_44_i$0=$81$0;label=9;break;}else{label=10;break;}
 case 10: 
 var $$etemp$17$0=64;
 var $$etemp$17$1=0;

 var $$etemp$18$0=16;
 var $$etemp$18$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _crypto_scalarmult_curve25519_ref($q,$n,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+4512)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $z2_10_0_i=sp;
 var $z2_20_0_i=(sp)+(128);
 var $z2_50_0_i=(sp)+(256);
 var $z2_100_0_i=(sp)+(384);
 var $t0_i=(sp)+(512);
 var $t1_i=(sp)+(640);
 var $xzm1_i=(sp)+(768);
 var $xzm_i=(sp)+(1024);
 var $xzmb_i=(sp)+(1280);
 var $xzm1b_i=(sp)+(1536);
 var $xznb_i=(sp)+(1792);
 var $xzn1b_i=(sp)+(2048);
 var $a0_i=(sp)+(2304);
 var $a1_i=(sp)+(2560);
 var $b0_i=(sp)+(2816);
 var $b1_i=(sp)+(3072);
 var $c1_i=(sp)+(3328);
 var $r_i=(sp)+(3584);
 var $s_i=(sp)+(3712);
 var $t_i=(sp)+(3840);
 var $u_i=(sp)+(3968);
 var $work=(sp)+(4096);
 var $e=(sp)+(4480);
 var $e213=(($e)|0);
 var $1=$work;
 var $$etemp$0$0=384;
 var $$etemp$0$1=0;

 assert(32 % 1 === 0);(_memcpy($e213, $n, 32)|0);
 var $2=HEAP8[($e213)];
 var $3=$2&-8;
 HEAP8[($e213)]=$3;
 var $4=(($e+31)|0);
 var $5=HEAP8[($4)];
 var $6=$5&63;
 var $7=$6|64;
 HEAP8[($4)]=$7;
 var $i_1127=0;label=2;break;
 case 2: 
 var $i_1127;
 var $9=(($p+$i_1127)|0);
 var $10=HEAP8[($9)];
 var $11=($10&255);
 var $12=(($work+($i_1127<<2))|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=((($i_1127)+(1))|0);
 var $14=($13>>>0)<32;
 if($14){var $i_1127=$13;label=2;break;}else{label=3;break;}
 case 3: 
 var $16=$xzm1_i;
 var $17=$xzm_i;
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $18=$xzmb_i;
 var $$etemp$3$0=256;
 var $$etemp$3$1=0;

 var $19=$xzm1b_i;
 var $$etemp$4$0=256;
 var $$etemp$4$1=0;

 var $20=$xznb_i;
 var $$etemp$5$0=256;
 var $$etemp$5$1=0;

 var $21=$xzn1b_i;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $22=$a0_i;
 var $$etemp$7$0=256;
 var $$etemp$7$1=0;

 var $23=$a1_i;
 var $$etemp$8$0=256;
 var $$etemp$8$1=0;

 var $24=$b0_i;
 var $$etemp$9$0=256;
 var $$etemp$9$1=0;

 var $25=$b1_i;
 var $$etemp$10$0=256;
 var $$etemp$10$1=0;

 var $26=$c1_i;
 var $$etemp$11$0=256;
 var $$etemp$11$1=0;

 var $27=$r_i;
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $28=$s_i;
 var $$etemp$13$0=128;
 var $$etemp$13$1=0;

 var $29=$t_i;
 var $$etemp$14$0=128;
 var $$etemp$14$1=0;

 var $30=$u_i;
 var $$etemp$15$0=128;
 var $$etemp$15$1=0;

 assert(128 % 1 === 0);(_memcpy($16, $1, 128)|0);
 var $31=(($xzm1_i+128)|0);
 HEAP32[(($31)>>2)]=1;
 var $scevgep212_i=(($xzm1_i+132)|0);
 var $scevgep212213_i=$scevgep212_i;
 _memset($scevgep212213_i, 0, 124)|0;
 var $32=(($xzm_i)|0);
 HEAP32[(($32)>>2)]=1;
 var $scevgep_i=(($xzm_i+4)|0);
 var $scevgep211_i=$scevgep_i;
 _memset($scevgep211_i, 0, 252)|0;
 var $33=(($a0_i)|0);
 var $34=(($xzmb_i+124)|0);
 var $35=(($xzmb_i+252)|0);
 var $36=(($a0_i+124)|0);
 var $37=(($a0_i+128)|0);
 var $38=(($a0_i+252)|0);
 var $39=(($xzm1b_i+124)|0);
 var $40=(($xzm1b_i+252)|0);
 var $41=(($a1_i+124)|0);
 var $42=(($a1_i+252)|0);
 var $43=(($b0_i)|0);
 var $44=(($b0_i+128)|0);
 var $45=(($b1_i+124)|0);
 var $46=(($b1_i+252)|0);
 var $47=(($c1_i)|0);
 var $48=(($c1_i+124)|0);
 var $49=(($c1_i+128)|0);
 var $50=(($c1_i+252)|0);
 var $51=(($r_i)|0);
 var $52=(($b0_i+124)|0);
 var $53=(($b0_i+252)|0);
 var $54=(($s_i+124)|0);
 var $55=(($t_i)|0);
 var $56=(($t_i+124)|0);
 var $57=(($u_i+124)|0);
 var $58=(($xznb_i+124)|0);
 var $59=(($xznb_i+252)|0);
 var $60=(($xzn1b_i)|0);
 var $61=(($xzn1b_i+252)|0);
 var $pos_0164_i=254;label=4;break;
 case 4: 
 var $pos_0164_i;
 var $63=(((($pos_0164_i|0))/(8))&-1);
 var $64=(($e+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=$pos_0164_i&7;
 var $68=$66>>>($67>>>0);
 var $69=$68&1;
 var $70=((($69)-(1))|0);
 var $j_01_i_i=0;label=5;break;
 case 5: 
 var $j_01_i_i;
 var $71=(($xzm_i+($j_01_i_i<<2))|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($xzm1_i+($j_01_i_i<<2))|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=$74^$72;
 var $76=$75&$70;
 var $77=$76^$74;
 var $78=(($xzmb_i+($j_01_i_i<<2))|0);
 HEAP32[(($78)>>2)]=$77;
 var $79=$76^$72;
 var $80=(($xzm1b_i+($j_01_i_i<<2))|0);
 HEAP32[(($80)>>2)]=$79;
 var $81=((($j_01_i_i)+(1))|0);
 var $82=($81>>>0)<64;
 if($82){var $j_01_i_i=$81;label=5;break;}else{var $j_01_i5_i=0;var $u_02_i4_i=0;label=6;break;}
 case 6: 
 var $u_02_i4_i;
 var $j_01_i5_i;
 var $83=(($xzmb_i+($j_01_i5_i<<2))|0);
 var $84=HEAP32[(($83)>>2)];
 var $_sum_i=((($j_01_i5_i)+(32))|0);
 var $85=(($xzmb_i+($_sum_i<<2))|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=((($84)+($u_02_i4_i))|0);
 var $88=((($87)+($86))|0);
 var $89=$88&255;
 var $90=(($a0_i+($j_01_i5_i<<2))|0);
 HEAP32[(($90)>>2)]=$89;
 var $91=$88>>>8;
 var $92=((($j_01_i5_i)+(1))|0);
 var $93=($92>>>0)<31;
 if($93){var $j_01_i5_i=$92;var $u_02_i4_i=$91;label=6;break;}else{label=7;break;}
 case 7: 
 var $94=HEAP32[(($34)>>2)];
 var $95=HEAP32[(($35)>>2)];
 var $96=((($94)+($91))|0);
 var $97=((($96)+($95))|0);
 HEAP32[(($36)>>2)]=$97;
 var $j_02_i42_i=0;var $u_03_i41_i=218;label=8;break;
 case 8: 
 var $u_03_i41_i;
 var $j_02_i42_i;
 var $99=(($xzmb_i+($j_02_i42_i<<2))|0);
 var $100=HEAP32[(($99)>>2)];
 var $_sum86_i=((($j_02_i42_i)+(32))|0);
 var $101=(($xzmb_i+($_sum86_i<<2))|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=((($u_03_i41_i)+(65280))|0);
 var $104=((($103)+($100))|0);
 var $105=((($104)-($102))|0);
 var $106=$105&255;
 var $107=(($a0_i+($_sum86_i<<2))|0);
 HEAP32[(($107)>>2)]=$106;
 var $108=$105>>>8;
 var $109=((($j_02_i42_i)+(1))|0);
 var $110=($109>>>0)<31;
 if($110){var $j_02_i42_i=$109;var $u_03_i41_i=$108;label=8;break;}else{label=9;break;}
 case 9: 
 var $111=((($94)-($95))|0);
 var $112=((($111)+($108))|0);
 HEAP32[(($38)>>2)]=$112;
 var $j_01_i81_i=0;var $u_02_i80_i=0;label=10;break;
 case 10: 
 var $u_02_i80_i;
 var $j_01_i81_i;
 var $114=(($xzm1b_i+($j_01_i81_i<<2))|0);
 var $115=HEAP32[(($114)>>2)];
 var $_sum88_i=((($j_01_i81_i)+(32))|0);
 var $116=(($xzm1b_i+($_sum88_i<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=((($115)+($u_02_i80_i))|0);
 var $119=((($118)+($117))|0);
 var $120=$119&255;
 var $121=(($a1_i+($j_01_i81_i<<2))|0);
 HEAP32[(($121)>>2)]=$120;
 var $122=$119>>>8;
 var $123=((($j_01_i81_i)+(1))|0);
 var $124=($123>>>0)<31;
 if($124){var $j_01_i81_i=$123;var $u_02_i80_i=$122;label=10;break;}else{label=11;break;}
 case 11: 
 var $125=HEAP32[(($39)>>2)];
 var $126=HEAP32[(($40)>>2)];
 var $127=((($125)+($122))|0);
 var $128=((($127)+($126))|0);
 HEAP32[(($41)>>2)]=$128;
 var $j_02_i84_i=0;var $u_03_i83_i=218;label=12;break;
 case 12: 
 var $u_03_i83_i;
 var $j_02_i84_i;
 var $130=(($xzm1b_i+($j_02_i84_i<<2))|0);
 var $131=HEAP32[(($130)>>2)];
 var $_sum89_i=((($j_02_i84_i)+(32))|0);
 var $132=(($xzm1b_i+($_sum89_i<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=((($u_03_i83_i)+(65280))|0);
 var $135=((($134)+($131))|0);
 var $136=((($135)-($133))|0);
 var $137=$136&255;
 var $138=(($a1_i+($_sum89_i<<2))|0);
 HEAP32[(($138)>>2)]=$137;
 var $139=$136>>>8;
 var $140=((($j_02_i84_i)+(1))|0);
 var $141=($140>>>0)<31;
 if($141){var $j_02_i84_i=$140;var $u_03_i83_i=$139;label=12;break;}else{label=13;break;}
 case 13: 
 var $142=((($125)-($126))|0);
 var $143=((($142)+($139))|0);
 HEAP32[(($42)>>2)]=$143;
 _square($43,$33);
 _square($44,$37);
 var $i_05_i65_i=0;label=14;break;
 case 14: 
 var $i_05_i65_i;
 var $144=((($i_05_i65_i)+(32))|0);
 var $j_01_i68_i=0;var $u_02_i67_i=0;label=15;break;
 case 15: 
 var $u_02_i67_i;
 var $j_01_i68_i;
 var $146=(($a1_i+($j_01_i68_i<<2))|0);
 var $147=HEAP32[(($146)>>2)];
 var $_sum91_i=((($144)-($j_01_i68_i))|0);
 var $148=(($a0_i+($_sum91_i<<2))|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=(Math_imul($149,$147)|0);
 var $151=((($150)+($u_02_i67_i))|0);
 var $152=((($j_01_i68_i)+(1))|0);
 var $153=($152>>>0)>($i_05_i65_i>>>0);
 if($153){label=16;break;}else{var $j_01_i68_i=$152;var $u_02_i67_i=$151;label=15;break;}
 case 16: 
 var $155=((($i_05_i65_i)+(1))|0);
 var $156=($155>>>0)<32;
 if($156){label=17;break;}else{label=20;break;}
 case 17: 
 var $157=((($i_05_i65_i)+(64))|0);
 var $j_13_i72_i=$155;var $u_14_i71_i=$151;label=18;break;
 case 18: 
 var $u_14_i71_i;
 var $j_13_i72_i;
 var $159=(($a1_i+($j_13_i72_i<<2))|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=((($160)*(38))&-1);
 var $_sum112_i=((($157)-($j_13_i72_i))|0);
 var $162=(($a0_i+($_sum112_i<<2))|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(Math_imul($161,$163)|0);
 var $165=((($164)+($u_14_i71_i))|0);
 var $166=((($j_13_i72_i)+(1))|0);
 var $167=($166>>>0)<32;
 if($167){var $j_13_i72_i=$166;var $u_14_i71_i=$165;label=18;break;}else{label=19;break;}
 case 19: 
 var $168=(($b1_i+($i_05_i65_i<<2))|0);
 HEAP32[(($168)>>2)]=$165;
 var $i_05_i65_i=$155;label=14;break;
 case 20: 
 var $169=(($b1_i+($i_05_i65_i<<2))|0);
 HEAP32[(($169)>>2)]=$151;
 var $j_03_i76_i=0;var $u_04_i75_i=0;label=21;break;
 case 21: 
 var $u_04_i75_i;
 var $j_03_i76_i;
 var $170=(($b1_i+($j_03_i76_i<<2))|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=((($171)+($u_04_i75_i))|0);
 var $173=$172&255;
 HEAP32[(($170)>>2)]=$173;
 var $174=$172>>>8;
 var $175=((($j_03_i76_i)+(1))|0);
 var $176=($175>>>0)<31;
 if($176){var $j_03_i76_i=$175;var $u_04_i75_i=$174;label=21;break;}else{label=22;break;}
 case 22: 
 var $178=HEAP32[(($45)>>2)];
 var $179=((($178)+($174))|0);
 var $180=$179&127;
 HEAP32[(($45)>>2)]=$180;
 var $181=$179>>>7;
 var $182=((($181)*(19))&-1);
 var $j_11_i78_i=0;var $u_12_i77_i=$182;label=23;break;
 case 23: 
 var $u_12_i77_i;
 var $j_11_i78_i;
 var $184=(($b1_i+($j_11_i78_i<<2))|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=((($185)+($u_12_i77_i))|0);
 var $187=$186&255;
 HEAP32[(($184)>>2)]=$187;
 var $188=$186>>>8;
 var $189=((($j_11_i78_i)+(1))|0);
 var $190=($189>>>0)<31;
 if($190){var $j_11_i78_i=$189;var $u_12_i77_i=$188;label=23;break;}else{label=24;break;}
 case 24: 
 var $191=HEAP32[(($45)>>2)];
 var $192=((($191)+($188))|0);
 HEAP32[(($45)>>2)]=$192;
 var $i_05_i50_i=0;label=25;break;
 case 25: 
 var $i_05_i50_i;
 var $j_01_i53_i=0;var $u_02_i52_i=0;label=26;break;
 case 26: 
 var $u_02_i52_i;
 var $j_01_i53_i;
 var $_sum92_i=((($j_01_i53_i)+(32))|0);
 var $194=(($a1_i+($_sum92_i<<2))|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=((($i_05_i50_i)-($j_01_i53_i))|0);
 var $197=(($a0_i+($196<<2))|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(Math_imul($198,$195)|0);
 var $200=((($199)+($u_02_i52_i))|0);
 var $201=((($j_01_i53_i)+(1))|0);
 var $202=($201>>>0)>($i_05_i50_i>>>0);
 if($202){label=27;break;}else{var $j_01_i53_i=$201;var $u_02_i52_i=$200;label=26;break;}
 case 27: 
 var $204=((($i_05_i50_i)+(1))|0);
 var $205=($204>>>0)<32;
 var $206=((($i_05_i50_i)+(32))|0);
 if($205){var $j_13_i57_i=$204;var $u_14_i56_i=$200;label=28;break;}else{label=30;break;}
 case 28: 
 var $u_14_i56_i;
 var $j_13_i57_i;
 var $_sum110_i=((($j_13_i57_i)+(32))|0);
 var $207=(($a1_i+($_sum110_i<<2))|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=((($208)*(38))&-1);
 var $210=((($206)-($j_13_i57_i))|0);
 var $211=(($a0_i+($210<<2))|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(Math_imul($209,$212)|0);
 var $214=((($213)+($u_14_i56_i))|0);
 var $215=((($j_13_i57_i)+(1))|0);
 var $216=($215>>>0)<32;
 if($216){var $j_13_i57_i=$215;var $u_14_i56_i=$214;label=28;break;}else{label=29;break;}
 case 29: 
 var $217=(($b1_i+($206<<2))|0);
 HEAP32[(($217)>>2)]=$214;
 var $i_05_i50_i=$204;label=25;break;
 case 30: 
 var $218=(($b1_i+($206<<2))|0);
 HEAP32[(($218)>>2)]=$200;
 var $j_03_i61_i=0;var $u_04_i60_i=0;label=31;break;
 case 31: 
 var $u_04_i60_i;
 var $j_03_i61_i;
 var $_sum94_i=((($j_03_i61_i)+(32))|0);
 var $219=(($b1_i+($_sum94_i<<2))|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=((($220)+($u_04_i60_i))|0);
 var $222=$221&255;
 HEAP32[(($219)>>2)]=$222;
 var $223=$221>>>8;
 var $224=((($j_03_i61_i)+(1))|0);
 var $225=($224>>>0)<31;
 if($225){var $j_03_i61_i=$224;var $u_04_i60_i=$223;label=31;break;}else{label=32;break;}
 case 32: 
 var $227=HEAP32[(($46)>>2)];
 var $228=((($227)+($223))|0);
 var $229=$228&127;
 HEAP32[(($46)>>2)]=$229;
 var $230=$228>>>7;
 var $231=((($230)*(19))&-1);
 var $j_11_i63_i=0;var $u_12_i62_i=$231;label=33;break;
 case 33: 
 var $u_12_i62_i;
 var $j_11_i63_i;
 var $_sum95_i=((($j_11_i63_i)+(32))|0);
 var $233=(($b1_i+($_sum95_i<<2))|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=((($234)+($u_12_i62_i))|0);
 var $236=$235&255;
 HEAP32[(($233)>>2)]=$236;
 var $237=$235>>>8;
 var $238=((($j_11_i63_i)+(1))|0);
 var $239=($238>>>0)<31;
 if($239){var $j_11_i63_i=$238;var $u_12_i62_i=$237;label=33;break;}else{label=34;break;}
 case 34: 
 var $240=HEAP32[(($46)>>2)];
 var $241=((($240)+($237))|0);
 HEAP32[(($46)>>2)]=$241;
 var $j_01_i48_i=0;var $u_02_i47_i=0;label=35;break;
 case 35: 
 var $u_02_i47_i;
 var $j_01_i48_i;
 var $243=(($b1_i+($j_01_i48_i<<2))|0);
 var $244=HEAP32[(($243)>>2)];
 var $_sum96_i=((($j_01_i48_i)+(32))|0);
 var $245=(($b1_i+($_sum96_i<<2))|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=((($244)+($u_02_i47_i))|0);
 var $248=((($247)+($246))|0);
 var $249=$248&255;
 var $250=(($c1_i+($j_01_i48_i<<2))|0);
 HEAP32[(($250)>>2)]=$249;
 var $251=$248>>>8;
 var $252=((($j_01_i48_i)+(1))|0);
 var $253=($252>>>0)<31;
 if($253){var $j_01_i48_i=$252;var $u_02_i47_i=$251;label=35;break;}else{label=36;break;}
 case 36: 
 var $254=HEAP32[(($45)>>2)];
 var $255=((($251)+($241))|0);
 var $256=((($255)+($254))|0);
 HEAP32[(($48)>>2)]=$256;
 var $j_02_i45_i=0;var $u_03_i44_i=218;label=37;break;
 case 37: 
 var $u_03_i44_i;
 var $j_02_i45_i;
 var $258=(($b1_i+($j_02_i45_i<<2))|0);
 var $259=HEAP32[(($258)>>2)];
 var $_sum97_i=((($j_02_i45_i)+(32))|0);
 var $260=(($b1_i+($_sum97_i<<2))|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=((($u_03_i44_i)+(65280))|0);
 var $263=((($262)+($259))|0);
 var $264=((($263)-($261))|0);
 var $265=$264&255;
 var $266=(($c1_i+($_sum97_i<<2))|0);
 HEAP32[(($266)>>2)]=$265;
 var $267=$264>>>8;
 var $268=((($j_02_i45_i)+(1))|0);
 var $269=($268>>>0)<31;
 if($269){var $j_02_i45_i=$268;var $u_03_i44_i=$267;label=37;break;}else{label=38;break;}
 case 38: 
 var $270=((($254)-($241))|0);
 var $271=((($270)+($267))|0);
 HEAP32[(($50)>>2)]=$271;
 _square($51,$49);
 var $j_02_i_i=0;var $u_03_i_i=218;label=39;break;
 case 39: 
 var $u_03_i_i;
 var $j_02_i_i;
 var $273=(($b0_i+($j_02_i_i<<2))|0);
 var $274=HEAP32[(($273)>>2)];
 var $_sum99_i=((($j_02_i_i)+(32))|0);
 var $275=(($b0_i+($_sum99_i<<2))|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=((($u_03_i_i)+(65280))|0);
 var $278=((($277)+($274))|0);
 var $279=((($278)-($276))|0);
 var $280=$279&255;
 var $281=(($s_i+($j_02_i_i<<2))|0);
 HEAP32[(($281)>>2)]=$280;
 var $282=$279>>>8;
 var $283=((($j_02_i_i)+(1))|0);
 var $284=($283>>>0)<31;
 if($284){var $j_02_i_i=$283;var $u_03_i_i=$282;label=39;break;}else{label=40;break;}
 case 40: 
 var $285=HEAP32[(($52)>>2)];
 var $286=HEAP32[(($53)>>2)];
 var $287=((($285)+($282))|0);
 var $288=((($287)-($286))|0);
 HEAP32[(($54)>>2)]=$288;
 var $j_03_i40_i=0;var $u_04_i39_i=0;label=41;break;
 case 41: 
 var $u_04_i39_i;
 var $j_03_i40_i;
 var $290=(($s_i+($j_03_i40_i<<2))|0);
 var $291=HEAP32[(($290)>>2)];
 var $292=((($291)*(121665))&-1);
 var $293=((($292)+($u_04_i39_i))|0);
 var $294=$293&255;
 var $295=(($t_i+($j_03_i40_i<<2))|0);
 HEAP32[(($295)>>2)]=$294;
 var $296=$293>>>8;
 var $297=((($j_03_i40_i)+(1))|0);
 var $298=($297>>>0)<31;
 if($298){var $j_03_i40_i=$297;var $u_04_i39_i=$296;label=41;break;}else{label=42;break;}
 case 42: 
 var $300=((($288)*(121665))&-1);
 var $301=((($296)+($300))|0);
 var $302=$301&127;
 HEAP32[(($56)>>2)]=$302;
 var $303=$301>>>7;
 var $304=((($303)*(19))&-1);
 var $305=HEAP32[(($55)>>2)];
 var $306=((($305)+($304))|0);
 var $j_12_i_i=0;var $309=$55;var $308=$306;label=43;break;
 case 43: 
 var $308;
 var $309;
 var $j_12_i_i;
 var $310=$308&255;
 HEAP32[(($309)>>2)]=$310;
 var $311=$308>>>8;
 var $312=((($j_12_i_i)+(1))|0);
 var $313=($312>>>0)<31;
 var $314=(($t_i+($312<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=((($315)+($311))|0);
 if($313){var $j_12_i_i=$312;var $309=$314;var $308=$316;label=43;break;}else{label=44;break;}
 case 44: 
 HEAP32[(($56)>>2)]=$316;
 var $j_01_i37_i=0;var $u_02_i36_i=0;label=45;break;
 case 45: 
 var $u_02_i36_i;
 var $j_01_i37_i;
 var $318=(($t_i+($j_01_i37_i<<2))|0);
 var $319=HEAP32[(($318)>>2)];
 var $320=(($b0_i+($j_01_i37_i<<2))|0);
 var $321=HEAP32[(($320)>>2)];
 var $322=((($319)+($u_02_i36_i))|0);
 var $323=((($322)+($321))|0);
 var $324=$323&255;
 var $325=(($u_i+($j_01_i37_i<<2))|0);
 HEAP32[(($325)>>2)]=$324;
 var $326=$323>>>8;
 var $327=((($j_01_i37_i)+(1))|0);
 var $328=($327>>>0)<31;
 if($328){var $j_01_i37_i=$327;var $u_02_i36_i=$326;label=45;break;}else{label=46;break;}
 case 46: 
 var $329=((($316)+($285))|0);
 var $330=((($329)+($326))|0);
 HEAP32[(($57)>>2)]=$330;
 var $i_05_i21_i=0;label=47;break;
 case 47: 
 var $i_05_i21_i;
 var $331=((($i_05_i21_i)+(32))|0);
 var $j_01_i24_i=0;var $u_02_i23_i=0;label=48;break;
 case 48: 
 var $u_02_i23_i;
 var $j_01_i24_i;
 var $333=(($b0_i+($j_01_i24_i<<2))|0);
 var $334=HEAP32[(($333)>>2)];
 var $_sum100_i=((($331)-($j_01_i24_i))|0);
 var $335=(($b0_i+($_sum100_i<<2))|0);
 var $336=HEAP32[(($335)>>2)];
 var $337=(Math_imul($336,$334)|0);
 var $338=((($337)+($u_02_i23_i))|0);
 var $339=((($j_01_i24_i)+(1))|0);
 var $340=($339>>>0)>($i_05_i21_i>>>0);
 if($340){label=49;break;}else{var $j_01_i24_i=$339;var $u_02_i23_i=$338;label=48;break;}
 case 49: 
 var $342=((($i_05_i21_i)+(1))|0);
 var $343=($342>>>0)<32;
 if($343){label=50;break;}else{label=53;break;}
 case 50: 
 var $344=((($i_05_i21_i)+(64))|0);
 var $j_13_i28_i=$342;var $u_14_i27_i=$338;label=51;break;
 case 51: 
 var $u_14_i27_i;
 var $j_13_i28_i;
 var $346=(($b0_i+($j_13_i28_i<<2))|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=((($347)*(38))&-1);
 var $_sum109_i=((($344)-($j_13_i28_i))|0);
 var $349=(($b0_i+($_sum109_i<<2))|0);
 var $350=HEAP32[(($349)>>2)];
 var $351=(Math_imul($348,$350)|0);
 var $352=((($351)+($u_14_i27_i))|0);
 var $353=((($j_13_i28_i)+(1))|0);
 var $354=($353>>>0)<32;
 if($354){var $j_13_i28_i=$353;var $u_14_i27_i=$352;label=51;break;}else{label=52;break;}
 case 52: 
 var $355=(($xznb_i+($i_05_i21_i<<2))|0);
 HEAP32[(($355)>>2)]=$352;
 var $i_05_i21_i=$342;label=47;break;
 case 53: 
 var $356=(($xznb_i+($i_05_i21_i<<2))|0);
 HEAP32[(($356)>>2)]=$338;
 var $j_03_i32_i=0;var $u_04_i31_i=0;label=54;break;
 case 54: 
 var $u_04_i31_i;
 var $j_03_i32_i;
 var $357=(($xznb_i+($j_03_i32_i<<2))|0);
 var $358=HEAP32[(($357)>>2)];
 var $359=((($358)+($u_04_i31_i))|0);
 var $360=$359&255;
 HEAP32[(($357)>>2)]=$360;
 var $361=$359>>>8;
 var $362=((($j_03_i32_i)+(1))|0);
 var $363=($362>>>0)<31;
 if($363){var $j_03_i32_i=$362;var $u_04_i31_i=$361;label=54;break;}else{label=55;break;}
 case 55: 
 var $365=HEAP32[(($58)>>2)];
 var $366=((($365)+($361))|0);
 var $367=$366&127;
 HEAP32[(($58)>>2)]=$367;
 var $368=$366>>>7;
 var $369=((($368)*(19))&-1);
 var $j_11_i34_i=0;var $u_12_i33_i=$369;label=56;break;
 case 56: 
 var $u_12_i33_i;
 var $j_11_i34_i;
 var $371=(($xznb_i+($j_11_i34_i<<2))|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=((($372)+($u_12_i33_i))|0);
 var $374=$373&255;
 HEAP32[(($371)>>2)]=$374;
 var $375=$373>>>8;
 var $376=((($j_11_i34_i)+(1))|0);
 var $377=($376>>>0)<31;
 if($377){var $j_11_i34_i=$376;var $u_12_i33_i=$375;label=56;break;}else{label=57;break;}
 case 57: 
 var $378=HEAP32[(($58)>>2)];
 var $379=((($378)+($375))|0);
 HEAP32[(($58)>>2)]=$379;
 var $i_05_i6_i=0;label=58;break;
 case 58: 
 var $i_05_i6_i;
 var $j_01_i9_i=0;var $u_02_i8_i=0;label=59;break;
 case 59: 
 var $u_02_i8_i;
 var $j_01_i9_i;
 var $381=(($s_i+($j_01_i9_i<<2))|0);
 var $382=HEAP32[(($381)>>2)];
 var $383=((($i_05_i6_i)-($j_01_i9_i))|0);
 var $384=(($u_i+($383<<2))|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=(Math_imul($385,$382)|0);
 var $387=((($386)+($u_02_i8_i))|0);
 var $388=((($j_01_i9_i)+(1))|0);
 var $389=($388>>>0)>($i_05_i6_i>>>0);
 if($389){label=60;break;}else{var $j_01_i9_i=$388;var $u_02_i8_i=$387;label=59;break;}
 case 60: 
 var $391=((($i_05_i6_i)+(1))|0);
 var $392=($391>>>0)<32;
 var $393=((($i_05_i6_i)+(32))|0);
 if($392){var $j_13_i13_i=$391;var $u_14_i12_i=$387;label=61;break;}else{label=63;break;}
 case 61: 
 var $u_14_i12_i;
 var $j_13_i13_i;
 var $394=(($s_i+($j_13_i13_i<<2))|0);
 var $395=HEAP32[(($394)>>2)];
 var $396=((($395)*(38))&-1);
 var $397=((($393)-($j_13_i13_i))|0);
 var $398=(($u_i+($397<<2))|0);
 var $399=HEAP32[(($398)>>2)];
 var $400=(Math_imul($396,$399)|0);
 var $401=((($400)+($u_14_i12_i))|0);
 var $402=((($j_13_i13_i)+(1))|0);
 var $403=($402>>>0)<32;
 if($403){var $j_13_i13_i=$402;var $u_14_i12_i=$401;label=61;break;}else{label=62;break;}
 case 62: 
 var $404=(($xznb_i+($393<<2))|0);
 HEAP32[(($404)>>2)]=$401;
 var $i_05_i6_i=$391;label=58;break;
 case 63: 
 var $405=(($xznb_i+($393<<2))|0);
 HEAP32[(($405)>>2)]=$387;
 var $j_03_i17_i=0;var $u_04_i16_i=0;label=64;break;
 case 64: 
 var $u_04_i16_i;
 var $j_03_i17_i;
 var $_sum102_i=((($j_03_i17_i)+(32))|0);
 var $406=(($xznb_i+($_sum102_i<<2))|0);
 var $407=HEAP32[(($406)>>2)];
 var $408=((($407)+($u_04_i16_i))|0);
 var $409=$408&255;
 HEAP32[(($406)>>2)]=$409;
 var $410=$408>>>8;
 var $411=((($j_03_i17_i)+(1))|0);
 var $412=($411>>>0)<31;
 if($412){var $j_03_i17_i=$411;var $u_04_i16_i=$410;label=64;break;}else{label=65;break;}
 case 65: 
 var $414=HEAP32[(($59)>>2)];
 var $415=((($414)+($410))|0);
 var $416=$415&127;
 HEAP32[(($59)>>2)]=$416;
 var $417=$415>>>7;
 var $418=((($417)*(19))&-1);
 var $j_11_i19_i=0;var $u_12_i18_i=$418;label=66;break;
 case 66: 
 var $u_12_i18_i;
 var $j_11_i19_i;
 var $_sum103_i=((($j_11_i19_i)+(32))|0);
 var $420=(($xznb_i+($_sum103_i<<2))|0);
 var $421=HEAP32[(($420)>>2)];
 var $422=((($421)+($u_12_i18_i))|0);
 var $423=$422&255;
 HEAP32[(($420)>>2)]=$423;
 var $424=$422>>>8;
 var $425=((($j_11_i19_i)+(1))|0);
 var $426=($425>>>0)<31;
 if($426){var $j_11_i19_i=$425;var $u_12_i18_i=$424;label=66;break;}else{label=67;break;}
 case 67: 
 var $427=HEAP32[(($59)>>2)];
 var $428=((($427)+($424))|0);
 HEAP32[(($59)>>2)]=$428;
 _square($60,$47);
 var $i_05_i_i=0;label=68;break;
 case 68: 
 var $i_05_i_i;
 var $j_01_i3_i=0;var $u_02_i_i=0;label=69;break;
 case 69: 
 var $u_02_i_i;
 var $j_01_i3_i;
 var $430=(($r_i+($j_01_i3_i<<2))|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=((($i_05_i_i)-($j_01_i3_i))|0);
 var $433=(($work+($432<<2))|0);
 var $434=HEAP32[(($433)>>2)];
 var $435=(Math_imul($434,$431)|0);
 var $436=((($435)+($u_02_i_i))|0);
 var $437=((($j_01_i3_i)+(1))|0);
 var $438=($437>>>0)>($i_05_i_i>>>0);
 if($438){label=70;break;}else{var $j_01_i3_i=$437;var $u_02_i_i=$436;label=69;break;}
 case 70: 
 var $440=((($i_05_i_i)+(1))|0);
 var $441=($440>>>0)<32;
 var $442=((($i_05_i_i)+(32))|0);
 if($441){var $j_13_i_i=$440;var $u_14_i_i=$436;label=71;break;}else{label=73;break;}
 case 71: 
 var $u_14_i_i;
 var $j_13_i_i;
 var $443=(($r_i+($j_13_i_i<<2))|0);
 var $444=HEAP32[(($443)>>2)];
 var $445=((($444)*(38))&-1);
 var $446=((($442)-($j_13_i_i))|0);
 var $447=(($work+($446<<2))|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=(Math_imul($445,$448)|0);
 var $450=((($449)+($u_14_i_i))|0);
 var $451=((($j_13_i_i)+(1))|0);
 var $452=($451>>>0)<32;
 if($452){var $j_13_i_i=$451;var $u_14_i_i=$450;label=71;break;}else{label=72;break;}
 case 72: 
 var $453=(($xzn1b_i+($442<<2))|0);
 HEAP32[(($453)>>2)]=$450;
 var $i_05_i_i=$440;label=68;break;
 case 73: 
 var $454=(($xzn1b_i+($442<<2))|0);
 HEAP32[(($454)>>2)]=$436;
 var $j_03_i_i=0;var $u_04_i_i=0;label=74;break;
 case 74: 
 var $u_04_i_i;
 var $j_03_i_i;
 var $_sum105_i=((($j_03_i_i)+(32))|0);
 var $455=(($xzn1b_i+($_sum105_i<<2))|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=((($456)+($u_04_i_i))|0);
 var $458=$457&255;
 HEAP32[(($455)>>2)]=$458;
 var $459=$457>>>8;
 var $460=((($j_03_i_i)+(1))|0);
 var $461=($460>>>0)<31;
 if($461){var $j_03_i_i=$460;var $u_04_i_i=$459;label=74;break;}else{label=75;break;}
 case 75: 
 var $463=HEAP32[(($61)>>2)];
 var $464=((($463)+($459))|0);
 var $465=$464&127;
 HEAP32[(($61)>>2)]=$465;
 var $466=$464>>>7;
 var $467=((($466)*(19))&-1);
 var $j_11_i_i=0;var $u_12_i_i=$467;label=76;break;
 case 76: 
 var $u_12_i_i;
 var $j_11_i_i;
 var $_sum106_i=((($j_11_i_i)+(32))|0);
 var $469=(($xzn1b_i+($_sum106_i<<2))|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=((($470)+($u_12_i_i))|0);
 var $472=$471&255;
 HEAP32[(($469)>>2)]=$472;
 var $473=$471>>>8;
 var $474=((($j_11_i_i)+(1))|0);
 var $475=($474>>>0)<31;
 if($475){var $j_11_i_i=$474;var $u_12_i_i=$473;label=76;break;}else{label=77;break;}
 case 77: 
 var $476=HEAP32[(($61)>>2)];
 var $477=((($476)+($473))|0);
 HEAP32[(($61)>>2)]=$477;
 var $j_01_i1_i=0;label=78;break;
 case 78: 
 var $j_01_i1_i;
 var $479=(($xznb_i+($j_01_i1_i<<2))|0);
 var $480=HEAP32[(($479)>>2)];
 var $481=(($xzn1b_i+($j_01_i1_i<<2))|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$482^$480;
 var $484=$483&$70;
 var $485=$484^$482;
 var $486=(($xzm_i+($j_01_i1_i<<2))|0);
 HEAP32[(($486)>>2)]=$485;
 var $487=$484^$480;
 var $488=(($xzm1_i+($j_01_i1_i<<2))|0);
 HEAP32[(($488)>>2)]=$487;
 var $489=((($j_01_i1_i)+(1))|0);
 var $490=($489>>>0)<64;
 if($490){var $j_01_i1_i=$489;label=78;break;}else{label=79;break;}
 case 79: 
 var $491=((($pos_0164_i)-(1))|0);
 var $492=($pos_0164_i|0)>0;
 if($492){var $pos_0164_i=$491;label=4;break;}else{label=80;break;}
 case 80: 
 assert(256 % 1 === 0);(_memcpy($1, $17, 256)|0);
 var $$etemp$16$0=128;
 var $$etemp$16$1=0;

 var $$etemp$17$0=128;
 var $$etemp$17$1=0;

 var $$etemp$18$0=128;
 var $$etemp$18$1=0;

 var $$etemp$19$0=128;
 var $$etemp$19$1=0;

 var $$etemp$20$0=256;
 var $$etemp$20$1=0;

 var $$etemp$21$0=256;
 var $$etemp$21$1=0;

 var $$etemp$22$0=256;
 var $$etemp$22$1=0;

 var $$etemp$23$0=256;
 var $$etemp$23$1=0;

 var $$etemp$24$0=256;
 var $$etemp$24$1=0;

 var $$etemp$25$0=256;
 var $$etemp$25$1=0;

 var $$etemp$26$0=256;
 var $$etemp$26$1=0;

 var $$etemp$27$0=256;
 var $$etemp$27$1=0;

 var $$etemp$28$0=256;
 var $$etemp$28$1=0;

 var $$etemp$29$0=256;
 var $$etemp$29$1=0;

 var $$etemp$30$0=256;
 var $$etemp$30$1=0;

 var $493=(($work+128)|0);
 var $$etemp$31$0=128;
 var $$etemp$31$1=0;

 var $$etemp$32$0=128;
 var $$etemp$32$1=0;

 var $$etemp$33$0=128;
 var $$etemp$33$1=0;

 var $$etemp$34$0=128;
 var $$etemp$34$1=0;

 var $494=$z2_10_0_i;
 var $$etemp$35$0=128;
 var $$etemp$35$1=0;

 var $495=$z2_20_0_i;
 var $$etemp$36$0=128;
 var $$etemp$36$1=0;

 var $496=$z2_50_0_i;
 var $$etemp$37$0=128;
 var $$etemp$37$1=0;

 var $497=$z2_100_0_i;
 var $$etemp$38$0=128;
 var $$etemp$38$1=0;

 var $498=$t0_i;
 var $$etemp$39$0=128;
 var $$etemp$39$1=0;

 var $499=$t1_i;
 var $$etemp$40$0=128;
 var $$etemp$40$1=0;

 _square($51,$493);
 var $500=(($t1_i)|0);
 _square($500,$51);
 var $501=(($t0_i)|0);
 _square($501,$500);
 var $i_05_i_i1=0;label=81;break;
 case 81: 
 var $i_05_i_i1;
 var $502=((($i_05_i_i1)+(32))|0);
 var $j_01_i_i4=0;var $u_02_i_i3=0;label=82;break;
 case 82: 
 var $u_02_i_i3;
 var $j_01_i_i4;
 var $504=(($t0_i+($j_01_i_i4<<2))|0);
 var $505=HEAP32[(($504)>>2)];
 var $_sum=((($502)-($j_01_i_i4))|0);
 var $506=(($work+($_sum<<2))|0);
 var $507=HEAP32[(($506)>>2)];
 var $508=(Math_imul($507,$505)|0);
 var $509=((($508)+($u_02_i_i3))|0);
 var $510=((($j_01_i_i4)+(1))|0);
 var $511=($510>>>0)>($i_05_i_i1>>>0);
 if($511){label=83;break;}else{var $j_01_i_i4=$510;var $u_02_i_i3=$509;label=82;break;}
 case 83: 
 var $513=((($i_05_i_i1)+(1))|0);
 var $514=($513>>>0)<32;
 if($514){label=84;break;}else{label=87;break;}
 case 84: 
 var $515=((($i_05_i_i1)+(64))|0);
 var $j_13_i_i7=$513;var $u_14_i_i6=$509;label=85;break;
 case 85: 
 var $u_14_i_i6;
 var $j_13_i_i7;
 var $517=(($t0_i+($j_13_i_i7<<2))|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=((($518)*(38))&-1);
 var $_sum34=((($515)-($j_13_i_i7))|0);
 var $520=(($work+($_sum34<<2))|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=(Math_imul($519,$521)|0);
 var $523=((($522)+($u_14_i_i6))|0);
 var $524=((($j_13_i_i7)+(1))|0);
 var $525=($524>>>0)<32;
 if($525){var $j_13_i_i7=$524;var $u_14_i_i6=$523;label=85;break;}else{label=86;break;}
 case 86: 
 var $526=(($s_i+($i_05_i_i1<<2))|0);
 HEAP32[(($526)>>2)]=$523;
 var $i_05_i_i1=$513;label=81;break;
 case 87: 
 var $527=(($s_i+($i_05_i_i1<<2))|0);
 HEAP32[(($527)>>2)]=$509;
 var $j_03_i_i11=0;var $u_04_i_i10=0;label=88;break;
 case 88: 
 var $u_04_i_i10;
 var $j_03_i_i11;
 var $528=(($s_i+($j_03_i_i11<<2))|0);
 var $529=HEAP32[(($528)>>2)];
 var $530=((($529)+($u_04_i_i10))|0);
 var $531=$530&255;
 HEAP32[(($528)>>2)]=$531;
 var $532=$530>>>8;
 var $533=((($j_03_i_i11)+(1))|0);
 var $534=($533>>>0)<31;
 if($534){var $j_03_i_i11=$533;var $u_04_i_i10=$532;label=88;break;}else{label=89;break;}
 case 89: 
 var $536=HEAP32[(($54)>>2)];
 var $537=((($536)+($532))|0);
 var $538=$537&127;
 HEAP32[(($54)>>2)]=$538;
 var $539=$537>>>7;
 var $540=((($539)*(19))&-1);
 var $j_11_i_i14=0;var $u_12_i_i13=$540;label=90;break;
 case 90: 
 var $u_12_i_i13;
 var $j_11_i_i14;
 var $542=(($s_i+($j_11_i_i14<<2))|0);
 var $543=HEAP32[(($542)>>2)];
 var $544=((($543)+($u_12_i_i13))|0);
 var $545=$544&255;
 HEAP32[(($542)>>2)]=$545;
 var $546=$544>>>8;
 var $547=((($j_11_i_i14)+(1))|0);
 var $548=($547>>>0)<31;
 if($548){var $j_11_i_i14=$547;var $u_12_i_i13=$546;label=90;break;}else{label=91;break;}
 case 91: 
 var $549=HEAP32[(($54)>>2)];
 var $550=((($549)+($546))|0);
 HEAP32[(($54)>>2)]=$550;
 var $i_05_i16_i=0;label=92;break;
 case 92: 
 var $i_05_i16_i;
 var $j_01_i19_i=0;var $u_02_i18_i=0;label=93;break;
 case 93: 
 var $u_02_i18_i;
 var $j_01_i19_i;
 var $552=(($s_i+($j_01_i19_i<<2))|0);
 var $553=HEAP32[(($552)>>2)];
 var $554=((($i_05_i16_i)-($j_01_i19_i))|0);
 var $555=(($r_i+($554<<2))|0);
 var $556=HEAP32[(($555)>>2)];
 var $557=(Math_imul($556,$553)|0);
 var $558=((($557)+($u_02_i18_i))|0);
 var $559=((($j_01_i19_i)+(1))|0);
 var $560=($559>>>0)>($i_05_i16_i>>>0);
 if($560){label=94;break;}else{var $j_01_i19_i=$559;var $u_02_i18_i=$558;label=93;break;}
 case 94: 
 var $562=((($i_05_i16_i)+(1))|0);
 var $563=($562>>>0)<32;
 if($563){label=95;break;}else{label=98;break;}
 case 95: 
 var $564=((($i_05_i16_i)+(32))|0);
 var $j_13_i23_i=$562;var $u_14_i22_i=$558;label=96;break;
 case 96: 
 var $u_14_i22_i;
 var $j_13_i23_i;
 var $566=(($s_i+($j_13_i23_i<<2))|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=((($567)*(38))&-1);
 var $569=((($564)-($j_13_i23_i))|0);
 var $570=(($r_i+($569<<2))|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=(Math_imul($568,$571)|0);
 var $573=((($572)+($u_14_i22_i))|0);
 var $574=((($j_13_i23_i)+(1))|0);
 var $575=($574>>>0)<32;
 if($575){var $j_13_i23_i=$574;var $u_14_i22_i=$573;label=96;break;}else{label=97;break;}
 case 97: 
 var $576=(($t_i+($i_05_i16_i<<2))|0);
 HEAP32[(($576)>>2)]=$573;
 var $i_05_i16_i=$562;label=92;break;
 case 98: 
 var $577=(($t_i+($i_05_i16_i<<2))|0);
 HEAP32[(($577)>>2)]=$558;
 var $j_03_i27_i=0;var $u_04_i26_i=0;label=99;break;
 case 99: 
 var $u_04_i26_i;
 var $j_03_i27_i;
 var $578=(($t_i+($j_03_i27_i<<2))|0);
 var $579=HEAP32[(($578)>>2)];
 var $580=((($579)+($u_04_i26_i))|0);
 var $581=$580&255;
 HEAP32[(($578)>>2)]=$581;
 var $582=$580>>>8;
 var $583=((($j_03_i27_i)+(1))|0);
 var $584=($583>>>0)<31;
 if($584){var $j_03_i27_i=$583;var $u_04_i26_i=$582;label=99;break;}else{label=100;break;}
 case 100: 
 var $586=HEAP32[(($56)>>2)];
 var $587=((($586)+($582))|0);
 var $588=$587&127;
 HEAP32[(($56)>>2)]=$588;
 var $589=$587>>>7;
 var $590=((($589)*(19))&-1);
 var $j_11_i29_i=0;var $u_12_i28_i=$590;label=101;break;
 case 101: 
 var $u_12_i28_i;
 var $j_11_i29_i;
 var $592=(($t_i+($j_11_i29_i<<2))|0);
 var $593=HEAP32[(($592)>>2)];
 var $594=((($593)+($u_12_i28_i))|0);
 var $595=$594&255;
 HEAP32[(($592)>>2)]=$595;
 var $596=$594>>>8;
 var $597=((($j_11_i29_i)+(1))|0);
 var $598=($597>>>0)<31;
 if($598){var $j_11_i29_i=$597;var $u_12_i28_i=$596;label=101;break;}else{label=102;break;}
 case 102: 
 var $599=HEAP32[(($56)>>2)];
 var $600=((($599)+($596))|0);
 HEAP32[(($56)>>2)]=$600;
 _square($501,$55);
 var $i_05_i31_i=0;label=103;break;
 case 103: 
 var $i_05_i31_i;
 var $j_01_i34_i=0;var $u_02_i33_i=0;label=104;break;
 case 104: 
 var $u_02_i33_i;
 var $j_01_i34_i;
 var $602=(($t0_i+($j_01_i34_i<<2))|0);
 var $603=HEAP32[(($602)>>2)];
 var $604=((($i_05_i31_i)-($j_01_i34_i))|0);
 var $605=(($s_i+($604<<2))|0);
 var $606=HEAP32[(($605)>>2)];
 var $607=(Math_imul($606,$603)|0);
 var $608=((($607)+($u_02_i33_i))|0);
 var $609=((($j_01_i34_i)+(1))|0);
 var $610=($609>>>0)>($i_05_i31_i>>>0);
 if($610){label=105;break;}else{var $j_01_i34_i=$609;var $u_02_i33_i=$608;label=104;break;}
 case 105: 
 var $612=((($i_05_i31_i)+(1))|0);
 var $613=($612>>>0)<32;
 if($613){label=106;break;}else{label=109;break;}
 case 106: 
 var $614=((($i_05_i31_i)+(32))|0);
 var $j_13_i38_i=$612;var $u_14_i37_i=$608;label=107;break;
 case 107: 
 var $u_14_i37_i;
 var $j_13_i38_i;
 var $616=(($t0_i+($j_13_i38_i<<2))|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=((($617)*(38))&-1);
 var $619=((($614)-($j_13_i38_i))|0);
 var $620=(($s_i+($619<<2))|0);
 var $621=HEAP32[(($620)>>2)];
 var $622=(Math_imul($618,$621)|0);
 var $623=((($622)+($u_14_i37_i))|0);
 var $624=((($j_13_i38_i)+(1))|0);
 var $625=($624>>>0)<32;
 if($625){var $j_13_i38_i=$624;var $u_14_i37_i=$623;label=107;break;}else{label=108;break;}
 case 108: 
 var $626=(($u_i+($i_05_i31_i<<2))|0);
 HEAP32[(($626)>>2)]=$623;
 var $i_05_i31_i=$612;label=103;break;
 case 109: 
 var $627=(($u_i)|0);
 var $628=(($u_i+($i_05_i31_i<<2))|0);
 HEAP32[(($628)>>2)]=$608;
 var $j_03_i42_i=0;var $u_04_i41_i=0;label=110;break;
 case 110: 
 var $u_04_i41_i;
 var $j_03_i42_i;
 var $629=(($u_i+($j_03_i42_i<<2))|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=((($630)+($u_04_i41_i))|0);
 var $632=$631&255;
 HEAP32[(($629)>>2)]=$632;
 var $633=$631>>>8;
 var $634=((($j_03_i42_i)+(1))|0);
 var $635=($634>>>0)<31;
 if($635){var $j_03_i42_i=$634;var $u_04_i41_i=$633;label=110;break;}else{label=111;break;}
 case 111: 
 var $637=HEAP32[(($57)>>2)];
 var $638=((($637)+($633))|0);
 var $639=$638&127;
 HEAP32[(($57)>>2)]=$639;
 var $640=$638>>>7;
 var $641=((($640)*(19))&-1);
 var $j_11_i44_i=0;var $u_12_i43_i=$641;label=112;break;
 case 112: 
 var $u_12_i43_i;
 var $j_11_i44_i;
 var $643=(($u_i+($j_11_i44_i<<2))|0);
 var $644=HEAP32[(($643)>>2)];
 var $645=((($644)+($u_12_i43_i))|0);
 var $646=$645&255;
 HEAP32[(($643)>>2)]=$646;
 var $647=$645>>>8;
 var $648=((($j_11_i44_i)+(1))|0);
 var $649=($648>>>0)<31;
 if($649){var $j_11_i44_i=$648;var $u_12_i43_i=$647;label=112;break;}else{label=113;break;}
 case 113: 
 var $650=HEAP32[(($57)>>2)];
 var $651=((($650)+($647))|0);
 HEAP32[(($57)>>2)]=$651;
 _square($501,$627);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 var $i_05_i46_i=0;label=114;break;
 case 114: 
 var $i_05_i46_i;
 var $j_01_i49_i=0;var $u_02_i48_i=0;label=115;break;
 case 115: 
 var $u_02_i48_i;
 var $j_01_i49_i;
 var $653=(($t0_i+($j_01_i49_i<<2))|0);
 var $654=HEAP32[(($653)>>2)];
 var $655=((($i_05_i46_i)-($j_01_i49_i))|0);
 var $656=(($u_i+($655<<2))|0);
 var $657=HEAP32[(($656)>>2)];
 var $658=(Math_imul($657,$654)|0);
 var $659=((($658)+($u_02_i48_i))|0);
 var $660=((($j_01_i49_i)+(1))|0);
 var $661=($660>>>0)>($i_05_i46_i>>>0);
 if($661){label=116;break;}else{var $j_01_i49_i=$660;var $u_02_i48_i=$659;label=115;break;}
 case 116: 
 var $663=((($i_05_i46_i)+(1))|0);
 var $664=($663>>>0)<32;
 if($664){label=117;break;}else{label=120;break;}
 case 117: 
 var $665=((($i_05_i46_i)+(32))|0);
 var $j_13_i53_i=$663;var $u_14_i52_i=$659;label=118;break;
 case 118: 
 var $u_14_i52_i;
 var $j_13_i53_i;
 var $667=(($t0_i+($j_13_i53_i<<2))|0);
 var $668=HEAP32[(($667)>>2)];
 var $669=((($668)*(38))&-1);
 var $670=((($665)-($j_13_i53_i))|0);
 var $671=(($u_i+($670<<2))|0);
 var $672=HEAP32[(($671)>>2)];
 var $673=(Math_imul($669,$672)|0);
 var $674=((($673)+($u_14_i52_i))|0);
 var $675=((($j_13_i53_i)+(1))|0);
 var $676=($675>>>0)<32;
 if($676){var $j_13_i53_i=$675;var $u_14_i52_i=$674;label=118;break;}else{label=119;break;}
 case 119: 
 var $677=(($z2_10_0_i+($i_05_i46_i<<2))|0);
 HEAP32[(($677)>>2)]=$674;
 var $i_05_i46_i=$663;label=114;break;
 case 120: 
 var $678=(($z2_10_0_i)|0);
 var $679=(($z2_10_0_i+($i_05_i46_i<<2))|0);
 HEAP32[(($679)>>2)]=$659;
 var $j_03_i57_i=0;var $u_04_i56_i=0;label=121;break;
 case 121: 
 var $u_04_i56_i;
 var $j_03_i57_i;
 var $680=(($z2_10_0_i+($j_03_i57_i<<2))|0);
 var $681=HEAP32[(($680)>>2)];
 var $682=((($681)+($u_04_i56_i))|0);
 var $683=$682&255;
 HEAP32[(($680)>>2)]=$683;
 var $684=$682>>>8;
 var $685=((($j_03_i57_i)+(1))|0);
 var $686=($685>>>0)<31;
 if($686){var $j_03_i57_i=$685;var $u_04_i56_i=$684;label=121;break;}else{label=122;break;}
 case 122: 
 var $688=(($z2_10_0_i+124)|0);
 var $689=HEAP32[(($688)>>2)];
 var $690=((($689)+($684))|0);
 var $691=$690&127;
 HEAP32[(($688)>>2)]=$691;
 var $692=$690>>>7;
 var $693=((($692)*(19))&-1);
 var $j_11_i59_i=0;var $u_12_i58_i=$693;label=123;break;
 case 123: 
 var $u_12_i58_i;
 var $j_11_i59_i;
 var $695=(($z2_10_0_i+($j_11_i59_i<<2))|0);
 var $696=HEAP32[(($695)>>2)];
 var $697=((($696)+($u_12_i58_i))|0);
 var $698=$697&255;
 HEAP32[(($695)>>2)]=$698;
 var $699=$697>>>8;
 var $700=((($j_11_i59_i)+(1))|0);
 var $701=($700>>>0)<31;
 if($701){var $j_11_i59_i=$700;var $u_12_i58_i=$699;label=123;break;}else{label=124;break;}
 case 124: 
 var $702=HEAP32[(($688)>>2)];
 var $703=((($702)+($699))|0);
 HEAP32[(($688)>>2)]=$703;
 _square($501,$678);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 var $i_05_i61_i=0;label=125;break;
 case 125: 
 var $i_05_i61_i;
 var $j_01_i64_i=0;var $u_02_i63_i=0;label=126;break;
 case 126: 
 var $u_02_i63_i;
 var $j_01_i64_i;
 var $705=(($t1_i+($j_01_i64_i<<2))|0);
 var $706=HEAP32[(($705)>>2)];
 var $707=((($i_05_i61_i)-($j_01_i64_i))|0);
 var $708=(($z2_10_0_i+($707<<2))|0);
 var $709=HEAP32[(($708)>>2)];
 var $710=(Math_imul($709,$706)|0);
 var $711=((($710)+($u_02_i63_i))|0);
 var $712=((($j_01_i64_i)+(1))|0);
 var $713=($712>>>0)>($i_05_i61_i>>>0);
 if($713){label=127;break;}else{var $j_01_i64_i=$712;var $u_02_i63_i=$711;label=126;break;}
 case 127: 
 var $715=((($i_05_i61_i)+(1))|0);
 var $716=($715>>>0)<32;
 if($716){label=128;break;}else{label=131;break;}
 case 128: 
 var $717=((($i_05_i61_i)+(32))|0);
 var $j_13_i68_i=$715;var $u_14_i67_i=$711;label=129;break;
 case 129: 
 var $u_14_i67_i;
 var $j_13_i68_i;
 var $719=(($t1_i+($j_13_i68_i<<2))|0);
 var $720=HEAP32[(($719)>>2)];
 var $721=((($720)*(38))&-1);
 var $722=((($717)-($j_13_i68_i))|0);
 var $723=(($z2_10_0_i+($722<<2))|0);
 var $724=HEAP32[(($723)>>2)];
 var $725=(Math_imul($721,$724)|0);
 var $726=((($725)+($u_14_i67_i))|0);
 var $727=((($j_13_i68_i)+(1))|0);
 var $728=($727>>>0)<32;
 if($728){var $j_13_i68_i=$727;var $u_14_i67_i=$726;label=129;break;}else{label=130;break;}
 case 130: 
 var $729=(($z2_20_0_i+($i_05_i61_i<<2))|0);
 HEAP32[(($729)>>2)]=$726;
 var $i_05_i61_i=$715;label=125;break;
 case 131: 
 var $730=(($z2_20_0_i)|0);
 var $731=(($z2_20_0_i+($i_05_i61_i<<2))|0);
 HEAP32[(($731)>>2)]=$711;
 var $j_03_i72_i=0;var $u_04_i71_i=0;label=132;break;
 case 132: 
 var $u_04_i71_i;
 var $j_03_i72_i;
 var $732=(($z2_20_0_i+($j_03_i72_i<<2))|0);
 var $733=HEAP32[(($732)>>2)];
 var $734=((($733)+($u_04_i71_i))|0);
 var $735=$734&255;
 HEAP32[(($732)>>2)]=$735;
 var $736=$734>>>8;
 var $737=((($j_03_i72_i)+(1))|0);
 var $738=($737>>>0)<31;
 if($738){var $j_03_i72_i=$737;var $u_04_i71_i=$736;label=132;break;}else{label=133;break;}
 case 133: 
 var $740=(($z2_20_0_i+124)|0);
 var $741=HEAP32[(($740)>>2)];
 var $742=((($741)+($736))|0);
 var $743=$742&127;
 HEAP32[(($740)>>2)]=$743;
 var $744=$742>>>7;
 var $745=((($744)*(19))&-1);
 var $j_11_i74_i=0;var $u_12_i73_i=$745;label=134;break;
 case 134: 
 var $u_12_i73_i;
 var $j_11_i74_i;
 var $747=(($z2_20_0_i+($j_11_i74_i<<2))|0);
 var $748=HEAP32[(($747)>>2)];
 var $749=((($748)+($u_12_i73_i))|0);
 var $750=$749&255;
 HEAP32[(($747)>>2)]=$750;
 var $751=$749>>>8;
 var $752=((($j_11_i74_i)+(1))|0);
 var $753=($752>>>0)<31;
 if($753){var $j_11_i74_i=$752;var $u_12_i73_i=$751;label=134;break;}else{label=135;break;}
 case 135: 
 var $754=HEAP32[(($740)>>2)];
 var $755=((($754)+($751))|0);
 HEAP32[(($740)>>2)]=$755;
 _square($501,$730);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 var $i_05_i76_i=0;label=136;break;
 case 136: 
 var $i_05_i76_i;
 var $j_01_i79_i=0;var $u_02_i78_i=0;label=137;break;
 case 137: 
 var $u_02_i78_i;
 var $j_01_i79_i;
 var $757=(($t1_i+($j_01_i79_i<<2))|0);
 var $758=HEAP32[(($757)>>2)];
 var $759=((($i_05_i76_i)-($j_01_i79_i))|0);
 var $760=(($z2_20_0_i+($759<<2))|0);
 var $761=HEAP32[(($760)>>2)];
 var $762=(Math_imul($761,$758)|0);
 var $763=((($762)+($u_02_i78_i))|0);
 var $764=((($j_01_i79_i)+(1))|0);
 var $765=($764>>>0)>($i_05_i76_i>>>0);
 if($765){label=138;break;}else{var $j_01_i79_i=$764;var $u_02_i78_i=$763;label=137;break;}
 case 138: 
 var $767=((($i_05_i76_i)+(1))|0);
 var $768=($767>>>0)<32;
 if($768){label=139;break;}else{label=142;break;}
 case 139: 
 var $769=((($i_05_i76_i)+(32))|0);
 var $j_13_i83_i=$767;var $u_14_i82_i=$763;label=140;break;
 case 140: 
 var $u_14_i82_i;
 var $j_13_i83_i;
 var $771=(($t1_i+($j_13_i83_i<<2))|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=((($772)*(38))&-1);
 var $774=((($769)-($j_13_i83_i))|0);
 var $775=(($z2_20_0_i+($774<<2))|0);
 var $776=HEAP32[(($775)>>2)];
 var $777=(Math_imul($773,$776)|0);
 var $778=((($777)+($u_14_i82_i))|0);
 var $779=((($j_13_i83_i)+(1))|0);
 var $780=($779>>>0)<32;
 if($780){var $j_13_i83_i=$779;var $u_14_i82_i=$778;label=140;break;}else{label=141;break;}
 case 141: 
 var $781=(($t0_i+($i_05_i76_i<<2))|0);
 HEAP32[(($781)>>2)]=$778;
 var $i_05_i76_i=$767;label=136;break;
 case 142: 
 var $782=(($t0_i+($i_05_i76_i<<2))|0);
 HEAP32[(($782)>>2)]=$763;
 var $j_03_i87_i=0;var $u_04_i86_i=0;label=143;break;
 case 143: 
 var $u_04_i86_i;
 var $j_03_i87_i;
 var $783=(($t0_i+($j_03_i87_i<<2))|0);
 var $784=HEAP32[(($783)>>2)];
 var $785=((($784)+($u_04_i86_i))|0);
 var $786=$785&255;
 HEAP32[(($783)>>2)]=$786;
 var $787=$785>>>8;
 var $788=((($j_03_i87_i)+(1))|0);
 var $789=($788>>>0)<31;
 if($789){var $j_03_i87_i=$788;var $u_04_i86_i=$787;label=143;break;}else{label=144;break;}
 case 144: 
 var $791=(($t0_i+124)|0);
 var $792=HEAP32[(($791)>>2)];
 var $793=((($792)+($787))|0);
 var $794=$793&127;
 HEAP32[(($791)>>2)]=$794;
 var $795=$793>>>7;
 var $796=((($795)*(19))&-1);
 var $j_11_i89_i=0;var $u_12_i88_i=$796;label=145;break;
 case 145: 
 var $u_12_i88_i;
 var $j_11_i89_i;
 var $798=(($t0_i+($j_11_i89_i<<2))|0);
 var $799=HEAP32[(($798)>>2)];
 var $800=((($799)+($u_12_i88_i))|0);
 var $801=$800&255;
 HEAP32[(($798)>>2)]=$801;
 var $802=$800>>>8;
 var $803=((($j_11_i89_i)+(1))|0);
 var $804=($803>>>0)<31;
 if($804){var $j_11_i89_i=$803;var $u_12_i88_i=$802;label=145;break;}else{label=146;break;}
 case 146: 
 var $805=HEAP32[(($791)>>2)];
 var $806=((($805)+($802))|0);
 HEAP32[(($791)>>2)]=$806;
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 var $i_05_i106_i=0;label=147;break;
 case 147: 
 var $i_05_i106_i;
 var $j_01_i109_i=0;var $u_02_i108_i=0;label=148;break;
 case 148: 
 var $u_02_i108_i;
 var $j_01_i109_i;
 var $808=(($t0_i+($j_01_i109_i<<2))|0);
 var $809=HEAP32[(($808)>>2)];
 var $810=((($i_05_i106_i)-($j_01_i109_i))|0);
 var $811=(($z2_10_0_i+($810<<2))|0);
 var $812=HEAP32[(($811)>>2)];
 var $813=(Math_imul($812,$809)|0);
 var $814=((($813)+($u_02_i108_i))|0);
 var $815=((($j_01_i109_i)+(1))|0);
 var $816=($815>>>0)>($i_05_i106_i>>>0);
 if($816){label=149;break;}else{var $j_01_i109_i=$815;var $u_02_i108_i=$814;label=148;break;}
 case 149: 
 var $818=((($i_05_i106_i)+(1))|0);
 var $819=($818>>>0)<32;
 if($819){label=150;break;}else{label=153;break;}
 case 150: 
 var $820=((($i_05_i106_i)+(32))|0);
 var $j_13_i113_i=$818;var $u_14_i112_i=$814;label=151;break;
 case 151: 
 var $u_14_i112_i;
 var $j_13_i113_i;
 var $822=(($t0_i+($j_13_i113_i<<2))|0);
 var $823=HEAP32[(($822)>>2)];
 var $824=((($823)*(38))&-1);
 var $825=((($820)-($j_13_i113_i))|0);
 var $826=(($z2_10_0_i+($825<<2))|0);
 var $827=HEAP32[(($826)>>2)];
 var $828=(Math_imul($824,$827)|0);
 var $829=((($828)+($u_14_i112_i))|0);
 var $830=((($j_13_i113_i)+(1))|0);
 var $831=($830>>>0)<32;
 if($831){var $j_13_i113_i=$830;var $u_14_i112_i=$829;label=151;break;}else{label=152;break;}
 case 152: 
 var $832=(($z2_50_0_i+($i_05_i106_i<<2))|0);
 HEAP32[(($832)>>2)]=$829;
 var $i_05_i106_i=$818;label=147;break;
 case 153: 
 var $833=(($z2_50_0_i)|0);
 var $834=(($z2_50_0_i+($i_05_i106_i<<2))|0);
 HEAP32[(($834)>>2)]=$814;
 var $j_03_i117_i=0;var $u_04_i116_i=0;label=154;break;
 case 154: 
 var $u_04_i116_i;
 var $j_03_i117_i;
 var $835=(($z2_50_0_i+($j_03_i117_i<<2))|0);
 var $836=HEAP32[(($835)>>2)];
 var $837=((($836)+($u_04_i116_i))|0);
 var $838=$837&255;
 HEAP32[(($835)>>2)]=$838;
 var $839=$837>>>8;
 var $840=((($j_03_i117_i)+(1))|0);
 var $841=($840>>>0)<31;
 if($841){var $j_03_i117_i=$840;var $u_04_i116_i=$839;label=154;break;}else{label=155;break;}
 case 155: 
 var $843=(($z2_50_0_i+124)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=((($844)+($839))|0);
 var $846=$845&127;
 HEAP32[(($843)>>2)]=$846;
 var $847=$845>>>7;
 var $848=((($847)*(19))&-1);
 var $j_11_i119_i=0;var $u_12_i118_i=$848;label=156;break;
 case 156: 
 var $u_12_i118_i;
 var $j_11_i119_i;
 var $850=(($z2_50_0_i+($j_11_i119_i<<2))|0);
 var $851=HEAP32[(($850)>>2)];
 var $852=((($851)+($u_12_i118_i))|0);
 var $853=$852&255;
 HEAP32[(($850)>>2)]=$853;
 var $854=$852>>>8;
 var $855=((($j_11_i119_i)+(1))|0);
 var $856=($855>>>0)<31;
 if($856){var $j_11_i119_i=$855;var $u_12_i118_i=$854;label=156;break;}else{label=157;break;}
 case 157: 
 var $857=HEAP32[(($843)>>2)];
 var $858=((($857)+($854))|0);
 HEAP32[(($843)>>2)]=$858;
 _square($501,$833);
 _square($500,$501);
 var $i_3176_i=2;label=158;break;
 case 158: 
 var $i_3176_i;
 _square($501,$500);
 _square($500,$501);
 var $860=((($i_3176_i)+(2))|0);
 var $861=($860|0)<50;
 if($861){var $i_3176_i=$860;label=158;break;}else{var $i_05_i121_i=0;label=159;break;}
 case 159: 
 var $i_05_i121_i;
 var $j_01_i124_i=0;var $u_02_i123_i=0;label=160;break;
 case 160: 
 var $u_02_i123_i;
 var $j_01_i124_i;
 var $863=(($t1_i+($j_01_i124_i<<2))|0);
 var $864=HEAP32[(($863)>>2)];
 var $865=((($i_05_i121_i)-($j_01_i124_i))|0);
 var $866=(($z2_50_0_i+($865<<2))|0);
 var $867=HEAP32[(($866)>>2)];
 var $868=(Math_imul($867,$864)|0);
 var $869=((($868)+($u_02_i123_i))|0);
 var $870=((($j_01_i124_i)+(1))|0);
 var $871=($870>>>0)>($i_05_i121_i>>>0);
 if($871){label=161;break;}else{var $j_01_i124_i=$870;var $u_02_i123_i=$869;label=160;break;}
 case 161: 
 var $873=((($i_05_i121_i)+(1))|0);
 var $874=($873>>>0)<32;
 if($874){label=162;break;}else{label=165;break;}
 case 162: 
 var $875=((($i_05_i121_i)+(32))|0);
 var $j_13_i128_i=$873;var $u_14_i127_i=$869;label=163;break;
 case 163: 
 var $u_14_i127_i;
 var $j_13_i128_i;
 var $877=(($t1_i+($j_13_i128_i<<2))|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=((($878)*(38))&-1);
 var $880=((($875)-($j_13_i128_i))|0);
 var $881=(($z2_50_0_i+($880<<2))|0);
 var $882=HEAP32[(($881)>>2)];
 var $883=(Math_imul($879,$882)|0);
 var $884=((($883)+($u_14_i127_i))|0);
 var $885=((($j_13_i128_i)+(1))|0);
 var $886=($885>>>0)<32;
 if($886){var $j_13_i128_i=$885;var $u_14_i127_i=$884;label=163;break;}else{label=164;break;}
 case 164: 
 var $887=(($z2_100_0_i+($i_05_i121_i<<2))|0);
 HEAP32[(($887)>>2)]=$884;
 var $i_05_i121_i=$873;label=159;break;
 case 165: 
 var $888=(($z2_100_0_i)|0);
 var $889=(($z2_100_0_i+($i_05_i121_i<<2))|0);
 HEAP32[(($889)>>2)]=$869;
 var $j_03_i132_i=0;var $u_04_i131_i=0;label=166;break;
 case 166: 
 var $u_04_i131_i;
 var $j_03_i132_i;
 var $890=(($z2_100_0_i+($j_03_i132_i<<2))|0);
 var $891=HEAP32[(($890)>>2)];
 var $892=((($891)+($u_04_i131_i))|0);
 var $893=$892&255;
 HEAP32[(($890)>>2)]=$893;
 var $894=$892>>>8;
 var $895=((($j_03_i132_i)+(1))|0);
 var $896=($895>>>0)<31;
 if($896){var $j_03_i132_i=$895;var $u_04_i131_i=$894;label=166;break;}else{label=167;break;}
 case 167: 
 var $898=(($z2_100_0_i+124)|0);
 var $899=HEAP32[(($898)>>2)];
 var $900=((($899)+($894))|0);
 var $901=$900&127;
 HEAP32[(($898)>>2)]=$901;
 var $902=$900>>>7;
 var $903=((($902)*(19))&-1);
 var $j_11_i134_i=0;var $u_12_i133_i=$903;label=168;break;
 case 168: 
 var $u_12_i133_i;
 var $j_11_i134_i;
 var $905=(($z2_100_0_i+($j_11_i134_i<<2))|0);
 var $906=HEAP32[(($905)>>2)];
 var $907=((($906)+($u_12_i133_i))|0);
 var $908=$907&255;
 HEAP32[(($905)>>2)]=$908;
 var $909=$907>>>8;
 var $910=((($j_11_i134_i)+(1))|0);
 var $911=($910>>>0)<31;
 if($911){var $j_11_i134_i=$910;var $u_12_i133_i=$909;label=168;break;}else{label=169;break;}
 case 169: 
 var $912=HEAP32[(($898)>>2)];
 var $913=((($912)+($909))|0);
 HEAP32[(($898)>>2)]=$913;
 _square($500,$888);
 _square($501,$500);
 var $i_4169_i=2;label=170;break;
 case 170: 
 var $i_4169_i;
 _square($500,$501);
 _square($501,$500);
 var $915=((($i_4169_i)+(2))|0);
 var $916=($915|0)<100;
 if($916){var $i_4169_i=$915;label=170;break;}else{var $i_05_i136_i=0;label=171;break;}
 case 171: 
 var $i_05_i136_i;
 var $j_01_i139_i=0;var $u_02_i138_i=0;label=172;break;
 case 172: 
 var $u_02_i138_i;
 var $j_01_i139_i;
 var $918=(($t0_i+($j_01_i139_i<<2))|0);
 var $919=HEAP32[(($918)>>2)];
 var $920=((($i_05_i136_i)-($j_01_i139_i))|0);
 var $921=(($z2_100_0_i+($920<<2))|0);
 var $922=HEAP32[(($921)>>2)];
 var $923=(Math_imul($922,$919)|0);
 var $924=((($923)+($u_02_i138_i))|0);
 var $925=((($j_01_i139_i)+(1))|0);
 var $926=($925>>>0)>($i_05_i136_i>>>0);
 if($926){label=173;break;}else{var $j_01_i139_i=$925;var $u_02_i138_i=$924;label=172;break;}
 case 173: 
 var $928=((($i_05_i136_i)+(1))|0);
 var $929=($928>>>0)<32;
 if($929){label=174;break;}else{label=177;break;}
 case 174: 
 var $930=((($i_05_i136_i)+(32))|0);
 var $j_13_i143_i=$928;var $u_14_i142_i=$924;label=175;break;
 case 175: 
 var $u_14_i142_i;
 var $j_13_i143_i;
 var $932=(($t0_i+($j_13_i143_i<<2))|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=((($933)*(38))&-1);
 var $935=((($930)-($j_13_i143_i))|0);
 var $936=(($z2_100_0_i+($935<<2))|0);
 var $937=HEAP32[(($936)>>2)];
 var $938=(Math_imul($934,$937)|0);
 var $939=((($938)+($u_14_i142_i))|0);
 var $940=((($j_13_i143_i)+(1))|0);
 var $941=($940>>>0)<32;
 if($941){var $j_13_i143_i=$940;var $u_14_i142_i=$939;label=175;break;}else{label=176;break;}
 case 176: 
 var $942=(($t1_i+($i_05_i136_i<<2))|0);
 HEAP32[(($942)>>2)]=$939;
 var $i_05_i136_i=$928;label=171;break;
 case 177: 
 var $943=(($t1_i+($i_05_i136_i<<2))|0);
 HEAP32[(($943)>>2)]=$924;
 var $j_03_i147_i=0;var $u_04_i146_i=0;label=178;break;
 case 178: 
 var $u_04_i146_i;
 var $j_03_i147_i;
 var $944=(($t1_i+($j_03_i147_i<<2))|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=((($945)+($u_04_i146_i))|0);
 var $947=$946&255;
 HEAP32[(($944)>>2)]=$947;
 var $948=$946>>>8;
 var $949=((($j_03_i147_i)+(1))|0);
 var $950=($949>>>0)<31;
 if($950){var $j_03_i147_i=$949;var $u_04_i146_i=$948;label=178;break;}else{label=179;break;}
 case 179: 
 var $952=(($t1_i+124)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=((($953)+($948))|0);
 var $955=$954&127;
 HEAP32[(($952)>>2)]=$955;
 var $956=$954>>>7;
 var $957=((($956)*(19))&-1);
 var $j_11_i149_i=0;var $u_12_i148_i=$957;label=180;break;
 case 180: 
 var $u_12_i148_i;
 var $j_11_i149_i;
 var $959=(($t1_i+($j_11_i149_i<<2))|0);
 var $960=HEAP32[(($959)>>2)];
 var $961=((($960)+($u_12_i148_i))|0);
 var $962=$961&255;
 HEAP32[(($959)>>2)]=$962;
 var $963=$961>>>8;
 var $964=((($j_11_i149_i)+(1))|0);
 var $965=($964>>>0)<31;
 if($965){var $j_11_i149_i=$964;var $u_12_i148_i=$963;label=180;break;}else{label=181;break;}
 case 181: 
 var $966=HEAP32[(($952)>>2)];
 var $967=((($966)+($963))|0);
 HEAP32[(($952)>>2)]=$967;
 _square($501,$500);
 _square($500,$501);
 var $i_5162_i=2;label=182;break;
 case 182: 
 var $i_5162_i;
 _square($501,$500);
 _square($500,$501);
 var $969=((($i_5162_i)+(2))|0);
 var $970=($969|0)<50;
 if($970){var $i_5162_i=$969;label=182;break;}else{var $i_05_i91_i=0;label=183;break;}
 case 183: 
 var $i_05_i91_i;
 var $j_01_i94_i=0;var $u_02_i93_i=0;label=184;break;
 case 184: 
 var $u_02_i93_i;
 var $j_01_i94_i;
 var $972=(($t1_i+($j_01_i94_i<<2))|0);
 var $973=HEAP32[(($972)>>2)];
 var $974=((($i_05_i91_i)-($j_01_i94_i))|0);
 var $975=(($z2_50_0_i+($974<<2))|0);
 var $976=HEAP32[(($975)>>2)];
 var $977=(Math_imul($976,$973)|0);
 var $978=((($977)+($u_02_i93_i))|0);
 var $979=((($j_01_i94_i)+(1))|0);
 var $980=($979>>>0)>($i_05_i91_i>>>0);
 if($980){label=185;break;}else{var $j_01_i94_i=$979;var $u_02_i93_i=$978;label=184;break;}
 case 185: 
 var $982=((($i_05_i91_i)+(1))|0);
 var $983=($982>>>0)<32;
 if($983){label=186;break;}else{label=189;break;}
 case 186: 
 var $984=((($i_05_i91_i)+(32))|0);
 var $j_13_i98_i=$982;var $u_14_i97_i=$978;label=187;break;
 case 187: 
 var $u_14_i97_i;
 var $j_13_i98_i;
 var $986=(($t1_i+($j_13_i98_i<<2))|0);
 var $987=HEAP32[(($986)>>2)];
 var $988=((($987)*(38))&-1);
 var $989=((($984)-($j_13_i98_i))|0);
 var $990=(($z2_50_0_i+($989<<2))|0);
 var $991=HEAP32[(($990)>>2)];
 var $992=(Math_imul($988,$991)|0);
 var $993=((($992)+($u_14_i97_i))|0);
 var $994=((($j_13_i98_i)+(1))|0);
 var $995=($994>>>0)<32;
 if($995){var $j_13_i98_i=$994;var $u_14_i97_i=$993;label=187;break;}else{label=188;break;}
 case 188: 
 var $996=(($t0_i+($i_05_i91_i<<2))|0);
 HEAP32[(($996)>>2)]=$993;
 var $i_05_i91_i=$982;label=183;break;
 case 189: 
 var $997=(($t0_i+($i_05_i91_i<<2))|0);
 HEAP32[(($997)>>2)]=$978;
 var $j_03_i102_i=0;var $u_04_i101_i=0;label=190;break;
 case 190: 
 var $u_04_i101_i;
 var $j_03_i102_i;
 var $998=(($t0_i+($j_03_i102_i<<2))|0);
 var $999=HEAP32[(($998)>>2)];
 var $1000=((($999)+($u_04_i101_i))|0);
 var $1001=$1000&255;
 HEAP32[(($998)>>2)]=$1001;
 var $1002=$1000>>>8;
 var $1003=((($j_03_i102_i)+(1))|0);
 var $1004=($1003>>>0)<31;
 if($1004){var $j_03_i102_i=$1003;var $u_04_i101_i=$1002;label=190;break;}else{label=191;break;}
 case 191: 
 var $1006=HEAP32[(($791)>>2)];
 var $1007=((($1006)+($1002))|0);
 var $1008=$1007&127;
 HEAP32[(($791)>>2)]=$1008;
 var $1009=$1007>>>7;
 var $1010=((($1009)*(19))&-1);
 var $j_11_i104_i=0;var $u_12_i103_i=$1010;label=192;break;
 case 192: 
 var $u_12_i103_i;
 var $j_11_i104_i;
 var $1012=(($t0_i+($j_11_i104_i<<2))|0);
 var $1013=HEAP32[(($1012)>>2)];
 var $1014=((($1013)+($u_12_i103_i))|0);
 var $1015=$1014&255;
 HEAP32[(($1012)>>2)]=$1015;
 var $1016=$1014>>>8;
 var $1017=((($j_11_i104_i)+(1))|0);
 var $1018=($1017>>>0)<31;
 if($1018){var $j_11_i104_i=$1017;var $u_12_i103_i=$1016;label=192;break;}else{label=193;break;}
 case 193: 
 var $1019=HEAP32[(($791)>>2)];
 var $1020=((($1019)+($1016))|0);
 HEAP32[(($791)>>2)]=$1020;
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 _square($501,$500);
 _square($500,$501);
 var $i_05_i1_i=0;label=194;break;
 case 194: 
 var $i_05_i1_i;
 var $j_01_i4_i=0;var $u_02_i3_i=0;label=195;break;
 case 195: 
 var $u_02_i3_i;
 var $j_01_i4_i;
 var $1022=(($t1_i+($j_01_i4_i<<2))|0);
 var $1023=HEAP32[(($1022)>>2)];
 var $1024=((($i_05_i1_i)-($j_01_i4_i))|0);
 var $1025=(($t_i+($1024<<2))|0);
 var $1026=HEAP32[(($1025)>>2)];
 var $1027=(Math_imul($1026,$1023)|0);
 var $1028=((($1027)+($u_02_i3_i))|0);
 var $1029=((($j_01_i4_i)+(1))|0);
 var $1030=($1029>>>0)>($i_05_i1_i>>>0);
 if($1030){label=196;break;}else{var $j_01_i4_i=$1029;var $u_02_i3_i=$1028;label=195;break;}
 case 196: 
 var $1032=((($i_05_i1_i)+(1))|0);
 var $1033=($1032>>>0)<32;
 var $1034=((($i_05_i1_i)+(32))|0);
 if($1033){var $j_13_i8_i=$1032;var $u_14_i7_i=$1028;label=197;break;}else{label=199;break;}
 case 197: 
 var $u_14_i7_i;
 var $j_13_i8_i;
 var $1035=(($t1_i+($j_13_i8_i<<2))|0);
 var $1036=HEAP32[(($1035)>>2)];
 var $1037=((($1036)*(38))&-1);
 var $1038=((($1034)-($j_13_i8_i))|0);
 var $1039=(($t_i+($1038<<2))|0);
 var $1040=HEAP32[(($1039)>>2)];
 var $1041=(Math_imul($1037,$1040)|0);
 var $1042=((($1041)+($u_14_i7_i))|0);
 var $1043=((($j_13_i8_i)+(1))|0);
 var $1044=($1043>>>0)<32;
 if($1044){var $j_13_i8_i=$1043;var $u_14_i7_i=$1042;label=197;break;}else{label=198;break;}
 case 198: 
 var $1045=(($work+($1034<<2))|0);
 HEAP32[(($1045)>>2)]=$1042;
 var $i_05_i1_i=$1032;label=194;break;
 case 199: 
 var $1046=(($work+($1034<<2))|0);
 HEAP32[(($1046)>>2)]=$1028;
 var $j_03_i12_i=0;var $u_04_i11_i=0;label=200;break;
 case 200: 
 var $u_04_i11_i;
 var $j_03_i12_i;
 var $_sum23=((($j_03_i12_i)+(32))|0);
 var $1047=(($work+($_sum23<<2))|0);
 var $1048=HEAP32[(($1047)>>2)];
 var $1049=((($1048)+($u_04_i11_i))|0);
 var $1050=$1049&255;
 HEAP32[(($1047)>>2)]=$1050;
 var $1051=$1049>>>8;
 var $1052=((($j_03_i12_i)+(1))|0);
 var $1053=($1052>>>0)<31;
 if($1053){var $j_03_i12_i=$1052;var $u_04_i11_i=$1051;label=200;break;}else{label=201;break;}
 case 201: 
 var $1055=(($work+252)|0);
 var $1056=HEAP32[(($1055)>>2)];
 var $1057=((($1056)+($1051))|0);
 var $1058=$1057&127;
 HEAP32[(($1055)>>2)]=$1058;
 var $1059=$1057>>>7;
 var $1060=((($1059)*(19))&-1);
 var $j_11_i14_i=0;var $u_12_i13_i=$1060;label=202;break;
 case 202: 
 var $u_12_i13_i;
 var $j_11_i14_i;
 var $_sum24=((($j_11_i14_i)+(32))|0);
 var $1062=(($work+($_sum24<<2))|0);
 var $1063=HEAP32[(($1062)>>2)];
 var $1064=((($1063)+($u_12_i13_i))|0);
 var $1065=$1064&255;
 HEAP32[(($1062)>>2)]=$1065;
 var $1066=$1064>>>8;
 var $1067=((($j_11_i14_i)+(1))|0);
 var $1068=($1067>>>0)<31;
 if($1068){var $j_11_i14_i=$1067;var $u_12_i13_i=$1066;label=202;break;}else{label=203;break;}
 case 203: 
 var $1069=HEAP32[(($1055)>>2)];
 var $1070=((($1069)+($1066))|0);
 HEAP32[(($1055)>>2)]=$1070;
 var $$etemp$41$0=128;
 var $$etemp$41$1=0;

 var $$etemp$42$0=128;
 var $$etemp$42$1=0;

 var $$etemp$43$0=128;
 var $$etemp$43$1=0;

 var $$etemp$44$0=128;
 var $$etemp$44$1=0;

 var $$etemp$45$0=128;
 var $$etemp$45$1=0;

 var $$etemp$46$0=128;
 var $$etemp$46$1=0;

 var $$etemp$47$0=128;
 var $$etemp$47$1=0;

 var $$etemp$48$0=128;
 var $$etemp$48$1=0;

 var $$etemp$49$0=128;
 var $$etemp$49$1=0;

 var $$etemp$50$0=128;
 var $$etemp$50$1=0;

 var $1071=(($work+256)|0);
 var $i_05_i=0;label=204;break;
 case 204: 
 var $i_05_i;
 var $1072=((($i_05_i)+(32))|0);
 var $j_01_i=0;var $u_02_i=0;label=205;break;
 case 205: 
 var $u_02_i;
 var $j_01_i;
 var $1074=(($work+($j_01_i<<2))|0);
 var $1075=HEAP32[(($1074)>>2)];
 var $_sum25=((($1072)-($j_01_i))|0);
 var $1076=(($work+($_sum25<<2))|0);
 var $1077=HEAP32[(($1076)>>2)];
 var $1078=(Math_imul($1077,$1075)|0);
 var $1079=((($1078)+($u_02_i))|0);
 var $1080=((($j_01_i)+(1))|0);
 var $1081=($1080>>>0)>($i_05_i>>>0);
 if($1081){label=206;break;}else{var $j_01_i=$1080;var $u_02_i=$1079;label=205;break;}
 case 206: 
 var $1083=((($i_05_i)+(1))|0);
 var $1084=($1083>>>0)<32;
 var $1085=((($i_05_i)+(64))|0);
 if($1084){var $j_13_i=$1083;var $u_14_i=$1079;label=207;break;}else{label=209;break;}
 case 207: 
 var $u_14_i;
 var $j_13_i;
 var $1086=(($work+($j_13_i<<2))|0);
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=((($1087)*(38))&-1);
 var $_sum31=((($1085)-($j_13_i))|0);
 var $1089=(($work+($_sum31<<2))|0);
 var $1090=HEAP32[(($1089)>>2)];
 var $1091=(Math_imul($1088,$1090)|0);
 var $1092=((($1091)+($u_14_i))|0);
 var $1093=((($j_13_i)+(1))|0);
 var $1094=($1093>>>0)<32;
 if($1094){var $j_13_i=$1093;var $u_14_i=$1092;label=207;break;}else{label=208;break;}
 case 208: 
 var $1095=(($work+($1085<<2))|0);
 HEAP32[(($1095)>>2)]=$1092;
 var $i_05_i=$1083;label=204;break;
 case 209: 
 var $1096=(($work+($1085<<2))|0);
 HEAP32[(($1096)>>2)]=$1079;
 var $j_03_i=0;var $u_04_i=0;label=210;break;
 case 210: 
 var $u_04_i;
 var $j_03_i;
 var $_sum27=((($j_03_i)+(64))|0);
 var $1097=(($work+($_sum27<<2))|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=((($1098)+($u_04_i))|0);
 var $1100=$1099&255;
 HEAP32[(($1097)>>2)]=$1100;
 var $1101=$1099>>>8;
 var $1102=((($j_03_i)+(1))|0);
 var $1103=($1102>>>0)<31;
 if($1103){var $j_03_i=$1102;var $u_04_i=$1101;label=210;break;}else{label=211;break;}
 case 211: 
 var $1105=(($work+380)|0);
 var $1106=HEAP32[(($1105)>>2)];
 var $1107=((($1106)+($1101))|0);
 var $1108=$1107&127;
 HEAP32[(($1105)>>2)]=$1108;
 var $1109=$1107>>>7;
 var $1110=((($1109)*(19))&-1);
 var $j_11_i=0;var $u_12_i=$1110;label=212;break;
 case 212: 
 var $u_12_i;
 var $j_11_i;
 var $_sum28=((($j_11_i)+(64))|0);
 var $1112=(($work+($_sum28<<2))|0);
 var $1113=HEAP32[(($1112)>>2)];
 var $1114=((($1113)+($u_12_i))|0);
 var $1115=$1114&255;
 HEAP32[(($1112)>>2)]=$1115;
 var $1116=$1114>>>8;
 var $1117=((($j_11_i)+(1))|0);
 var $1118=($1117>>>0)<31;
 if($1118){var $j_11_i=$1117;var $u_12_i=$1116;label=212;break;}else{label=213;break;}
 case 213: 
 var $1119=HEAP32[(($1105)>>2)];
 var $1120=((($1119)+($1116))|0);
 HEAP32[(($1105)>>2)]=$1120;
 var $a3_i=$1071;
 var $$etemp$51$0=128;
 var $$etemp$51$1=0;

 assert(128 % 1 === 0);(_memcpy($27, $a3_i, 128)|0);
 var $j_01_i_i19=0;var $u_02_i_i18=0;label=214;break;
 case 214: 
 var $u_02_i_i18;
 var $j_01_i_i19;
 var $_sum29=((($j_01_i_i19)+(64))|0);
 var $1122=(($work+($_sum29<<2))|0);
 var $1123=HEAP32[(($1122)>>2)];
 var $1124=((144+($j_01_i_i19<<2))|0);
 var $1125=HEAP32[(($1124)>>2)];
 var $1126=((($1123)+($u_02_i_i18))|0);
 var $1127=((($1126)+($1125))|0);
 var $1128=$1127&255;
 HEAP32[(($1122)>>2)]=$1128;
 var $1129=$1127>>>8;
 var $1130=((($j_01_i_i19)+(1))|0);
 var $1131=($1130>>>0)<31;
 if($1131){var $j_01_i_i19=$1130;var $u_02_i_i18=$1129;label=214;break;}else{label=215;break;}
 case 215: 
 var $1132=HEAP32[(($1105)>>2)];
 var $1133=((($1129)+(128))|0);
 var $1134=((($1133)+($1132))|0);
 HEAP32[(($1105)>>2)]=$1134;
 var $1135=$1134>>>7;
 var $1136=$1135&1;
 var $1137=(((-$1136))|0);
 var $j_11_i21=0;label=216;break;
 case 216: 
 var $j_11_i21;
 var $1139=(($r_i+($j_11_i21<<2))|0);
 var $1140=HEAP32[(($1139)>>2)];
 var $_sum30=((($j_11_i21)+(64))|0);
 var $1141=(($work+($_sum30<<2))|0);
 var $1142=HEAP32[(($1141)>>2)];
 var $1143=$1142^$1140;
 var $1144=$1143&$1137;
 var $1145=$1144^$1142;
 HEAP32[(($1141)>>2)]=$1145;
 var $1146=((($j_11_i21)+(1))|0);
 var $1147=($1146>>>0)<32;
 if($1147){var $j_11_i21=$1146;label=216;break;}else{var $i_242=0;label=217;break;}
 case 217: 
 var $i_242;
 var $1148=((($i_242)+(64))|0);
 var $1149=(($work+($1148<<2))|0);
 var $1150=HEAP32[(($1149)>>2)];
 var $1151=(($1150)&255);
 var $1152=(($q+$i_242)|0);
 HEAP8[($1152)]=$1151;
 var $1153=((($i_242)+(1))|0);
 var $1154=($1153>>>0)<32;
 if($1154){var $i_242=$1153;label=217;break;}else{label=218;break;}
 case 218: 
 var $$etemp$52$0=384;
 var $$etemp$52$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _square($out,$a){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $i_010=0;label=2;break;
 case 2: 
 var $i_010;
 var $1=($i_010|0)==0;
 if($1){var $u_0_lcssa12=0;var $16=1;var $15=32;label=5;break;}else{var $j_01=0;var $u_02=0;var $2=$i_010;label=3;break;}
 case 3: 
 var $2;
 var $u_02;
 var $j_01;
 var $3=(($a+($j_01<<2))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($a+($2<<2))|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(Math_imul($6,$4)|0);
 var $8=((($7)+($u_02))|0);
 var $9=((($j_01)+(1))|0);
 var $10=((($i_010)-($9))|0);
 var $11=($9>>>0)<($10>>>0);
 if($11){var $j_01=$9;var $u_02=$8;var $2=$10;label=3;break;}else{label=4;break;}
 case 4: 
 var $12=((($i_010)+(1))|0);
 var $13=((($i_010)+(32))|0);
 var $14=($12>>>0)<31;
 if($14){var $u_0_lcssa12=$8;var $16=$12;var $15=$13;label=5;break;}else{var $u_1_lcssa=$8;var $29=$12;label=7;break;}
 case 5: 
 var $15;
 var $16;
 var $u_0_lcssa12;
 var $j_14=$16;var $u_15=$u_0_lcssa12;var $18=31;label=6;break;
 case 6: 
 var $18;
 var $u_15;
 var $j_14;
 var $19=(($a+($j_14<<2))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)*(38))&-1);
 var $22=(($a+($18<<2))|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(Math_imul($21,$23)|0);
 var $25=((($24)+($u_15))|0);
 var $26=((($j_14)+(1))|0);
 var $j_1_neg=$j_14^-1;
 var $27=((($15)+($j_1_neg))|0);
 var $28=($26>>>0)<($27>>>0);
 if($28){var $j_14=$26;var $u_15=$25;var $18=$27;label=6;break;}else{var $u_1_lcssa=$25;var $29=$16;label=7;break;}
 case 7: 
 var $29;
 var $u_1_lcssa;
 var $30=$u_1_lcssa<<1;
 var $31=$i_010&1;
 var $32=($31|0)==0;
 if($32){label=8;break;}else{var $u_2=$30;label=9;break;}
 case 8: 
 var $34=$i_010>>>1;
 var $35=(($a+($34<<2))|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(Math_imul($36,$36)|0);
 var $38=((($37)+($30))|0);
 var $39=((($34)+(16))|0);
 var $40=(($a+($39<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=((($41)*(38))&-1);
 var $43=(Math_imul($42,$41)|0);
 var $44=((($38)+($43))|0);
 var $u_2=$44;label=9;break;
 case 9: 
 var $u_2;
 var $46=(($out+($i_010<<2))|0);
 HEAP32[(($46)>>2)]=$u_2;
 var $47=($29>>>0)<32;
 if($47){var $i_010=$29;label=2;break;}else{var $j_03_i=0;var $u_04_i=0;label=10;break;}
 case 10: 
 var $u_04_i;
 var $j_03_i;
 var $48=(($out+($j_03_i<<2))|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=((($49)+($u_04_i))|0);
 var $51=$50&255;
 HEAP32[(($48)>>2)]=$51;
 var $52=$50>>>8;
 var $53=((($j_03_i)+(1))|0);
 var $54=($53>>>0)<31;
 if($54){var $j_03_i=$53;var $u_04_i=$52;label=10;break;}else{label=11;break;}
 case 11: 
 var $56=(($out+124)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=((($57)+($52))|0);
 var $59=$58&127;
 HEAP32[(($56)>>2)]=$59;
 var $60=$58>>>7;
 var $61=((($60)*(19))&-1);
 var $j_11_i=0;var $u_12_i=$61;label=12;break;
 case 12: 
 var $u_12_i;
 var $j_11_i;
 var $63=(($out+($j_11_i<<2))|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=((($64)+($u_12_i))|0);
 var $66=$65&255;
 HEAP32[(($63)>>2)]=$66;
 var $67=$65>>>8;
 var $68=((($j_11_i)+(1))|0);
 var $69=($68>>>0)<31;
 if($69){var $j_11_i=$68;var $u_12_i=$67;label=12;break;}else{label=13;break;}
 case 13: 
 var $70=HEAP32[(($56)>>2)];
 var $71=((($70)+($67))|0);
 HEAP32[(($56)>>2)]=$71;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _sodium_init(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+160)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $h_i_i=sp;
 var $padded_i_i=(sp)+(32);
 var $_b=HEAP8[(376)];
 if($_b){label=103;break;}else{label=2;break;}
 case 2: 
 var $2=_malloc(272);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[((14880)>>2)]=0;
 var $_0_i7_i=0;label=7;break;
 case 4: 
 HEAP32[((14880)>>2)]=$2;
 var $i_02_i_i=0;label=5;break;
 case 5: 
 var $i_02_i_i;
 var $6=_rand();
 var $7=(($6)&255);
 var $8=(($2+$i_02_i_i)|0);
 HEAP8[($8)]=$7;
 var $9=((($i_02_i_i)+(1))|0);
 var $10=($9>>>0)<272;
 if($10){var $i_02_i_i=$9;label=5;break;}else{label=6;break;}
 case 6: 
 var $11=(($2+64)|0);
 var $12=$11;
 var $13=(((-$12))|0);
 var $14=$13&63;
 var $_sum1_i_i=$14|64;
 var $15=(($2+$_sum1_i_i)|0);
 _memset($15, 0, 16)|0;
 var $_0_i7_i=$15;label=7;break;
 case 7: 
 var $_0_i7_i;
 HEAP32[((14904)>>2)]=$_0_i7_i;
 var $16=_malloc(10256);
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[((14808)>>2)]=0;
 var $_0_i12_i=0;label=12;break;
 case 9: 
 HEAP32[((14808)>>2)]=$16;
 var $i_02_i8_i=0;label=10;break;
 case 10: 
 var $i_02_i8_i;
 var $20=_rand();
 var $21=(($20)&255);
 var $22=(($16+$i_02_i8_i)|0);
 HEAP8[($22)]=$21;
 var $23=((($i_02_i8_i)+(1))|0);
 var $24=($23>>>0)<10256;
 if($24){var $i_02_i8_i=$23;label=10;break;}else{label=11;break;}
 case 11: 
 var $25=(($16+64)|0);
 var $26=$25;
 var $27=(((-$26))|0);
 var $28=$27&63;
 var $_sum1_i10_i=$28|64;
 var $29=(($16+$_sum1_i10_i)|0);
 _memset($29, 0, 10000)|0;
 var $_0_i12_i=$29;label=12;break;
 case 12: 
 var $_0_i12_i;
 HEAP32[((14832)>>2)]=$_0_i12_i;
 var $30=_malloc(288);
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP32[((14848)>>2)]=0;
 var $_0_i18_i=0;label=17;break;
 case 14: 
 HEAP32[((14848)>>2)]=$30;
 var $i_02_i14_i=0;label=15;break;
 case 15: 
 var $i_02_i14_i;
 var $34=_rand();
 var $35=(($34)&255);
 var $36=(($30+$i_02_i14_i)|0);
 HEAP8[($36)]=$35;
 var $37=((($i_02_i14_i)+(1))|0);
 var $38=($37>>>0)<288;
 if($38){var $i_02_i14_i=$37;label=15;break;}else{label=16;break;}
 case 16: 
 var $39=(($30+64)|0);
 var $40=$39;
 var $41=(((-$40))|0);
 var $42=$41&63;
 var $_sum1_i16_i=$42|64;
 var $43=(($30+$_sum1_i16_i)|0);
 _memset($43, 0, 32)|0;
 var $_0_i18_i=$43;label=17;break;
 case 17: 
 var $_0_i18_i;
 HEAP32[((14872)>>2)]=$_0_i18_i;
 var $44=_malloc(272);
 var $45=($44|0)==0;
 if($45){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[((14888)>>2)]=0;
 var $_0_i24_i=0;label=22;break;
 case 19: 
 HEAP32[((14888)>>2)]=$44;
 var $i_02_i20_i=0;label=20;break;
 case 20: 
 var $i_02_i20_i;
 var $48=_rand();
 var $49=(($48)&255);
 var $50=(($44+$i_02_i20_i)|0);
 HEAP8[($50)]=$49;
 var $51=((($i_02_i20_i)+(1))|0);
 var $52=($51>>>0)<272;
 if($52){var $i_02_i20_i=$51;label=20;break;}else{label=21;break;}
 case 21: 
 var $53=(($44+64)|0);
 var $54=$53;
 var $55=(((-$54))|0);
 var $56=$55&63;
 var $_sum1_i22_i=$56|64;
 var $57=(($44+$_sum1_i22_i)|0);
 _memset($57, 0, 16)|0;
 var $_0_i24_i=$57;label=22;break;
 case 22: 
 var $_0_i24_i;
 HEAP32[((14896)>>2)]=$_0_i24_i;
 var $58=_malloc(10272);
 var $59=($58|0)==0;
 if($59){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[((14816)>>2)]=0;
 var $_0_i30_i=0;label=27;break;
 case 24: 
 HEAP32[((14816)>>2)]=$58;
 var $i_02_i26_i=0;label=25;break;
 case 25: 
 var $i_02_i26_i;
 var $62=_rand();
 var $63=(($62)&255);
 var $64=(($58+$i_02_i26_i)|0);
 HEAP8[($64)]=$63;
 var $65=((($i_02_i26_i)+(1))|0);
 var $66=($65>>>0)<10272;
 if($66){var $i_02_i26_i=$65;label=25;break;}else{label=26;break;}
 case 26: 
 var $67=(($58+64)|0);
 var $68=$67;
 var $69=(((-$68))|0);
 var $70=$69&63;
 var $_sum1_i28_i=$70|64;
 var $71=(($58+$_sum1_i28_i)|0);
 _memset($71, 0, 10016)|0;
 var $_0_i30_i=$71;label=27;break;
 case 27: 
 var $_0_i30_i;
 HEAP32[((14824)>>2)]=$_0_i30_i;
 var $72=_malloc(304);
 var $73=($72|0)==0;
 if($73){label=28;break;}else{label=29;break;}
 case 28: 
 HEAP32[((14856)>>2)]=0;
 var $_0_i36_i=0;label=32;break;
 case 29: 
 HEAP32[((14856)>>2)]=$72;
 var $i_02_i32_i=0;label=30;break;
 case 30: 
 var $i_02_i32_i;
 var $76=_rand();
 var $77=(($76)&255);
 var $78=(($72+$i_02_i32_i)|0);
 HEAP8[($78)]=$77;
 var $79=((($i_02_i32_i)+(1))|0);
 var $80=($79>>>0)<304;
 if($80){var $i_02_i32_i=$79;label=30;break;}else{label=31;break;}
 case 31: 
 var $81=(($72+64)|0);
 var $82=$81;
 var $83=(((-$82))|0);
 var $84=$83&63;
 var $_sum1_i34_i=$84|64;
 var $85=(($72+$_sum1_i34_i)|0);
 _memset($85, 0, 48)|0;
 var $_0_i36_i=$85;label=32;break;
 case 32: 
 var $_0_i36_i;
 HEAP32[((14864)>>2)]=$_0_i36_i;
 var $86=HEAP32[((14904)>>2)];
 var $87=($86|0)!=0;
 var $88=HEAP32[((14832)>>2)];
 var $89=($88|0)!=0;
 var $or_cond_i_i=$87&$89;
 var $90=HEAP32[((14872)>>2)];
 var $91=($90|0)!=0;
 var $or_cond3_i_i=$or_cond_i_i&$91;
 var $92=HEAP32[((14896)>>2)];
 var $93=($92|0)!=0;
 var $or_cond5_i_i=$or_cond3_i_i&$93;
 var $94=HEAP32[((14824)>>2)];
 var $95=($94|0)!=0;
 var $or_cond7_i_i=$or_cond5_i_i&$95;
 var $phitmp_i=($_0_i36_i|0)!=0;
 var $phitmp__i=$or_cond7_i_i&$phitmp_i;
 if($phitmp__i){label=33;break;}else{label=103;break;}
 case 33: 
 var $96=(($h_i_i)|0);
 var $97=(($padded_i_i)|0);
 var $98=(($h_i_i+3)|0);
 var $99=(($h_i_i+2)|0);
 var $100=(($h_i_i+1)|0);
 var $101=(($h_i_i+4)|0);
 var $102=(($h_i_i+7)|0);
 var $103=(($h_i_i+6)|0);
 var $104=(($h_i_i+5)|0);
 var $105=(($h_i_i+8)|0);
 var $106=(($h_i_i+11)|0);
 var $107=(($h_i_i+10)|0);
 var $108=(($h_i_i+9)|0);
 var $109=(($h_i_i+12)|0);
 var $110=(($h_i_i+15)|0);
 var $111=(($h_i_i+14)|0);
 var $112=(($h_i_i+13)|0);
 var $113=(($h_i_i+16)|0);
 var $114=(($h_i_i+19)|0);
 var $115=(($h_i_i+18)|0);
 var $116=(($h_i_i+17)|0);
 var $117=(($h_i_i+20)|0);
 var $118=(($h_i_i+23)|0);
 var $119=(($h_i_i+22)|0);
 var $120=(($h_i_i+21)|0);
 var $121=(($h_i_i+24)|0);
 var $122=(($h_i_i+27)|0);
 var $123=(($h_i_i+26)|0);
 var $124=(($h_i_i+25)|0);
 var $125=(($h_i_i+28)|0);
 var $126=(($h_i_i+31)|0);
 var $127=(($h_i_i+30)|0);
 var $128=(($h_i_i+29)|0);
 var $129=(($padded_i_i+16)|0);
 var $scevgep_i_i=(($padded_i_i+17)|0);
 var $130=(($padded_i_i+63)|0);
 var $i_085_i_i$1=0;var $i_085_i_i$0=0;label=34;break;
 case 34: 
 var $i_085_i_i$0;
 var $i_085_i_i$1;
 var $131=_rand();
 var $132=(($131)&255);
 var $133=HEAP32[((14904)>>2)];
 var $134=((($133)-(16))|0);
 HEAP8[($134)]=$132;
 var $135=_rand();
 var $136=(($135)&255);
 var $137=HEAP32[((14904)>>2)];
 var $138=((($137)-(15))|0);
 HEAP8[($138)]=$136;
 var $139=_rand();
 var $140=(($139)&255);
 var $141=HEAP32[((14904)>>2)];
 var $142=((($141)-(14))|0);
 HEAP8[($142)]=$140;
 var $143=_rand();
 var $144=(($143)&255);
 var $145=HEAP32[((14904)>>2)];
 var $146=((($145)-(13))|0);
 HEAP8[($146)]=$144;
 var $147=_rand();
 var $148=(($147)&255);
 var $149=HEAP32[((14904)>>2)];
 var $150=((($149)-(12))|0);
 HEAP8[($150)]=$148;
 var $151=_rand();
 var $152=(($151)&255);
 var $153=HEAP32[((14904)>>2)];
 var $154=((($153)-(11))|0);
 HEAP8[($154)]=$152;
 var $155=_rand();
 var $156=(($155)&255);
 var $157=HEAP32[((14904)>>2)];
 var $158=((($157)-(10))|0);
 HEAP8[($158)]=$156;
 var $159=_rand();
 var $160=(($159)&255);
 var $161=HEAP32[((14904)>>2)];
 var $162=((($161)-(9))|0);
 HEAP8[($162)]=$160;
 var $163=_rand();
 var $164=(($163)&255);
 var $165=HEAP32[((14904)>>2)];
 var $166=((($165)-(8))|0);
 HEAP8[($166)]=$164;
 var $167=_rand();
 var $168=(($167)&255);
 var $169=HEAP32[((14904)>>2)];
 var $170=((($169)-(7))|0);
 HEAP8[($170)]=$168;
 var $171=_rand();
 var $172=(($171)&255);
 var $173=HEAP32[((14904)>>2)];
 var $174=((($173)-(6))|0);
 HEAP8[($174)]=$172;
 var $175=_rand();
 var $176=(($175)&255);
 var $177=HEAP32[((14904)>>2)];
 var $178=((($177)-(5))|0);
 HEAP8[($178)]=$176;
 var $179=_rand();
 var $180=(($179)&255);
 var $181=HEAP32[((14904)>>2)];
 var $182=((($181)-(4))|0);
 HEAP8[($182)]=$180;
 var $183=_rand();
 var $184=(($183)&255);
 var $185=HEAP32[((14904)>>2)];
 var $186=((($185)-(3))|0);
 HEAP8[($186)]=$184;
 var $187=_rand();
 var $188=(($187)&255);
 var $189=HEAP32[((14904)>>2)];
 var $190=((($189)-(2))|0);
 HEAP8[($190)]=$188;
 var $191=_rand();
 var $192=(($191)&255);
 var $193=HEAP32[((14904)>>2)];
 var $194=((($193)-(1))|0);
 HEAP8[($194)]=$192;
 var $195=_rand();
 var $196=(($195)&255);
 var $197=HEAP32[((14872)>>2)];
 var $198=((($197)-(16))|0);
 HEAP8[($198)]=$196;
 var $199=_rand();
 var $200=(($199)&255);
 var $201=HEAP32[((14872)>>2)];
 var $202=((($201)-(15))|0);
 HEAP8[($202)]=$200;
 var $203=_rand();
 var $204=(($203)&255);
 var $205=HEAP32[((14872)>>2)];
 var $206=((($205)-(14))|0);
 HEAP8[($206)]=$204;
 var $207=_rand();
 var $208=(($207)&255);
 var $209=HEAP32[((14872)>>2)];
 var $210=((($209)-(13))|0);
 HEAP8[($210)]=$208;
 var $211=_rand();
 var $212=(($211)&255);
 var $213=HEAP32[((14872)>>2)];
 var $214=((($213)-(12))|0);
 HEAP8[($214)]=$212;
 var $215=_rand();
 var $216=(($215)&255);
 var $217=HEAP32[((14872)>>2)];
 var $218=((($217)-(11))|0);
 HEAP8[($218)]=$216;
 var $219=_rand();
 var $220=(($219)&255);
 var $221=HEAP32[((14872)>>2)];
 var $222=((($221)-(10))|0);
 HEAP8[($222)]=$220;
 var $223=_rand();
 var $224=(($223)&255);
 var $225=HEAP32[((14872)>>2)];
 var $226=((($225)-(9))|0);
 HEAP8[($226)]=$224;
 var $227=_rand();
 var $228=(($227)&255);
 var $229=HEAP32[((14872)>>2)];
 var $230=((($229)-(8))|0);
 HEAP8[($230)]=$228;
 var $231=_rand();
 var $232=(($231)&255);
 var $233=HEAP32[((14872)>>2)];
 var $234=((($233)-(7))|0);
 HEAP8[($234)]=$232;
 var $235=_rand();
 var $236=(($235)&255);
 var $237=HEAP32[((14872)>>2)];
 var $238=((($237)-(6))|0);
 HEAP8[($238)]=$236;
 var $239=_rand();
 var $240=(($239)&255);
 var $241=HEAP32[((14872)>>2)];
 var $242=((($241)-(5))|0);
 HEAP8[($242)]=$240;
 var $243=_rand();
 var $244=(($243)&255);
 var $245=HEAP32[((14872)>>2)];
 var $246=((($245)-(4))|0);
 HEAP8[($246)]=$244;
 var $247=_rand();
 var $248=(($247)&255);
 var $249=HEAP32[((14872)>>2)];
 var $250=((($249)-(3))|0);
 HEAP8[($250)]=$248;
 var $251=_rand();
 var $252=(($251)&255);
 var $253=HEAP32[((14872)>>2)];
 var $254=((($253)-(2))|0);
 HEAP8[($254)]=$252;
 var $255=_rand();
 var $256=(($255)&255);
 var $257=HEAP32[((14872)>>2)];
 var $258=((($257)-(1))|0);
 HEAP8[($258)]=$256;
 var $259=_rand();
 var $260=(($259)&255);
 var $261=HEAP32[((14832)>>2)];
 var $262=((($261)-(16))|0);
 HEAP8[($262)]=$260;
 var $263=_rand();
 var $264=(($263)&255);
 var $265=HEAP32[((14832)>>2)];
 var $266=((($265)-(15))|0);
 HEAP8[($266)]=$264;
 var $267=_rand();
 var $268=(($267)&255);
 var $269=HEAP32[((14832)>>2)];
 var $270=((($269)-(14))|0);
 HEAP8[($270)]=$268;
 var $271=_rand();
 var $272=(($271)&255);
 var $273=HEAP32[((14832)>>2)];
 var $274=((($273)-(13))|0);
 HEAP8[($274)]=$272;
 var $275=_rand();
 var $276=(($275)&255);
 var $277=HEAP32[((14832)>>2)];
 var $278=((($277)-(12))|0);
 HEAP8[($278)]=$276;
 var $279=_rand();
 var $280=(($279)&255);
 var $281=HEAP32[((14832)>>2)];
 var $282=((($281)-(11))|0);
 HEAP8[($282)]=$280;
 var $283=_rand();
 var $284=(($283)&255);
 var $285=HEAP32[((14832)>>2)];
 var $286=((($285)-(10))|0);
 HEAP8[($286)]=$284;
 var $287=_rand();
 var $288=(($287)&255);
 var $289=HEAP32[((14832)>>2)];
 var $290=((($289)-(9))|0);
 HEAP8[($290)]=$288;
 var $291=_rand();
 var $292=(($291)&255);
 var $293=HEAP32[((14832)>>2)];
 var $294=((($293)-(8))|0);
 HEAP8[($294)]=$292;
 var $295=_rand();
 var $296=(($295)&255);
 var $297=HEAP32[((14832)>>2)];
 var $298=((($297)-(7))|0);
 HEAP8[($298)]=$296;
 var $299=_rand();
 var $300=(($299)&255);
 var $301=HEAP32[((14832)>>2)];
 var $302=((($301)-(6))|0);
 HEAP8[($302)]=$300;
 var $303=_rand();
 var $304=(($303)&255);
 var $305=HEAP32[((14832)>>2)];
 var $306=((($305)-(5))|0);
 HEAP8[($306)]=$304;
 var $307=_rand();
 var $308=(($307)&255);
 var $309=HEAP32[((14832)>>2)];
 var $310=((($309)-(4))|0);
 HEAP8[($310)]=$308;
 var $311=_rand();
 var $312=(($311)&255);
 var $313=HEAP32[((14832)>>2)];
 var $314=((($313)-(3))|0);
 HEAP8[($314)]=$312;
 var $315=_rand();
 var $316=(($315)&255);
 var $317=HEAP32[((14832)>>2)];
 var $318=((($317)-(2))|0);
 HEAP8[($318)]=$316;
 var $319=_rand();
 var $320=(($319)&255);
 var $321=HEAP32[((14832)>>2)];
 var $322=((($321)-(1))|0);
 HEAP8[($322)]=$320;
 var $323=_rand();
 var $324=(($323)&255);
 var $325=HEAP32[((14904)>>2)];
 var $326=(($325+16)|0);
 HEAP8[($326)]=$324;
 var $327=_rand();
 var $328=(($327)&255);
 var $329=HEAP32[((14904)>>2)];
 var $330=(($329+17)|0);
 HEAP8[($330)]=$328;
 var $331=_rand();
 var $332=(($331)&255);
 var $333=HEAP32[((14904)>>2)];
 var $334=(($333+18)|0);
 HEAP8[($334)]=$332;
 var $335=_rand();
 var $336=(($335)&255);
 var $337=HEAP32[((14904)>>2)];
 var $338=(($337+19)|0);
 HEAP8[($338)]=$336;
 var $339=_rand();
 var $340=(($339)&255);
 var $341=HEAP32[((14904)>>2)];
 var $342=(($341+20)|0);
 HEAP8[($342)]=$340;
 var $343=_rand();
 var $344=(($343)&255);
 var $345=HEAP32[((14904)>>2)];
 var $346=(($345+21)|0);
 HEAP8[($346)]=$344;
 var $347=_rand();
 var $348=(($347)&255);
 var $349=HEAP32[((14904)>>2)];
 var $350=(($349+22)|0);
 HEAP8[($350)]=$348;
 var $351=_rand();
 var $352=(($351)&255);
 var $353=HEAP32[((14904)>>2)];
 var $354=(($353+23)|0);
 HEAP8[($354)]=$352;
 var $355=_rand();
 var $356=(($355)&255);
 var $357=HEAP32[((14904)>>2)];
 var $358=(($357+24)|0);
 HEAP8[($358)]=$356;
 var $359=_rand();
 var $360=(($359)&255);
 var $361=HEAP32[((14904)>>2)];
 var $362=(($361+25)|0);
 HEAP8[($362)]=$360;
 var $363=_rand();
 var $364=(($363)&255);
 var $365=HEAP32[((14904)>>2)];
 var $366=(($365+26)|0);
 HEAP8[($366)]=$364;
 var $367=_rand();
 var $368=(($367)&255);
 var $369=HEAP32[((14904)>>2)];
 var $370=(($369+27)|0);
 HEAP8[($370)]=$368;
 var $371=_rand();
 var $372=(($371)&255);
 var $373=HEAP32[((14904)>>2)];
 var $374=(($373+28)|0);
 HEAP8[($374)]=$372;
 var $375=_rand();
 var $376=(($375)&255);
 var $377=HEAP32[((14904)>>2)];
 var $378=(($377+29)|0);
 HEAP8[($378)]=$376;
 var $379=_rand();
 var $380=(($379)&255);
 var $381=HEAP32[((14904)>>2)];
 var $382=(($381+30)|0);
 HEAP8[($382)]=$380;
 var $383=_rand();
 var $384=(($383)&255);
 var $385=HEAP32[((14904)>>2)];
 var $386=(($385+31)|0);
 HEAP8[($386)]=$384;
 var $387=_rand();
 var $388=(($387)&255);
 var $389=HEAP32[((14872)>>2)];
 var $390=(($389+32)|0);
 HEAP8[($390)]=$388;
 var $391=_rand();
 var $392=(($391)&255);
 var $393=HEAP32[((14872)>>2)];
 var $394=(($393+33)|0);
 HEAP8[($394)]=$392;
 var $395=_rand();
 var $396=(($395)&255);
 var $397=HEAP32[((14872)>>2)];
 var $398=(($397+34)|0);
 HEAP8[($398)]=$396;
 var $399=_rand();
 var $400=(($399)&255);
 var $401=HEAP32[((14872)>>2)];
 var $402=(($401+35)|0);
 HEAP8[($402)]=$400;
 var $403=_rand();
 var $404=(($403)&255);
 var $405=HEAP32[((14872)>>2)];
 var $406=(($405+36)|0);
 HEAP8[($406)]=$404;
 var $407=_rand();
 var $408=(($407)&255);
 var $409=HEAP32[((14872)>>2)];
 var $410=(($409+37)|0);
 HEAP8[($410)]=$408;
 var $411=_rand();
 var $412=(($411)&255);
 var $413=HEAP32[((14872)>>2)];
 var $414=(($413+38)|0);
 HEAP8[($414)]=$412;
 var $415=_rand();
 var $416=(($415)&255);
 var $417=HEAP32[((14872)>>2)];
 var $418=(($417+39)|0);
 HEAP8[($418)]=$416;
 var $419=_rand();
 var $420=(($419)&255);
 var $421=HEAP32[((14872)>>2)];
 var $422=(($421+40)|0);
 HEAP8[($422)]=$420;
 var $423=_rand();
 var $424=(($423)&255);
 var $425=HEAP32[((14872)>>2)];
 var $426=(($425+41)|0);
 HEAP8[($426)]=$424;
 var $427=_rand();
 var $428=(($427)&255);
 var $429=HEAP32[((14872)>>2)];
 var $430=(($429+42)|0);
 HEAP8[($430)]=$428;
 var $431=_rand();
 var $432=(($431)&255);
 var $433=HEAP32[((14872)>>2)];
 var $434=(($433+43)|0);
 HEAP8[($434)]=$432;
 var $435=_rand();
 var $436=(($435)&255);
 var $437=HEAP32[((14872)>>2)];
 var $438=(($437+44)|0);
 HEAP8[($438)]=$436;
 var $439=_rand();
 var $440=(($439)&255);
 var $441=HEAP32[((14872)>>2)];
 var $442=(($441+45)|0);
 HEAP8[($442)]=$440;
 var $443=_rand();
 var $444=(($443)&255);
 var $445=HEAP32[((14872)>>2)];
 var $446=(($445+46)|0);
 HEAP8[($446)]=$444;
 var $447=_rand();
 var $448=(($447)&255);
 var $449=HEAP32[((14872)>>2)];
 var $450=(($449+47)|0);
 HEAP8[($450)]=$448;
 var $$etemp$0$0=16;
 var $$etemp$0$1=0;
 var $451$0=_i64Add($i_085_i_i$0,$i_085_i_i$1,$$etemp$0$0,$$etemp$0$1);var $451$1=tempRet0;
 var $j_518_i_i$1=$i_085_i_i$1;var $j_518_i_i$0=$i_085_i_i$0;label=35;break;
 case 35: 
 var $j_518_i_i$0;
 var $j_518_i_i$1;
 var $453=_rand();
 var $454=(($453)&255);
 var $455$0=$j_518_i_i$0;
 var $455=$455$0;
 var $456=HEAP32[((14832)>>2)];
 var $457=(($456+$455)|0);
 HEAP8[($457)]=$454;
 var $$etemp$1$0=1;
 var $$etemp$1$1=0;
 var $458$0=_i64Add($j_518_i_i$0,$j_518_i_i$1,$$etemp$1$0,$$etemp$1$1);var $458$1=tempRet0;
 var $459=(($458$1|0) < ($451$1|0)) | (((($458$1|0) == ($451$1|0) & ($458$0>>>0) <  ($451$0>>>0))));
 if($459){var $j_518_i_i$1=$458$1;var $j_518_i_i$0=$458$0;label=35;break;}else{label=36;break;}
 case 36: 
 var $460=HEAP32[((14904)>>2)];
 var $461=HEAP32[((14896)>>2)];
 var $j_620_i_i$1=-1;var $j_620_i_i$0=-16;label=37;break;
 case 37: 
 var $j_620_i_i$0;
 var $j_620_i_i$1;
 var $462$0=$j_620_i_i$0;
 var $462=$462$0;
 var $463=(($460+$462)|0);
 var $464=HEAP8[($463)];
 var $465=(($461+$462)|0);
 HEAP8[($465)]=$464;
 var $$etemp$2$0=1;
 var $$etemp$2$1=0;
 var $466$0=_i64Add($j_620_i_i$0,$j_620_i_i$1,$$etemp$2$0,$$etemp$2$1);var $466$1=tempRet0;
 var $$etemp$3$0=32;
 var $$etemp$3$1=0;
 var $467=(($466$1|0) < ($$etemp$3$1|0)) | (((($466$1|0) == ($$etemp$3$1|0) & ($466$0>>>0) <  ($$etemp$3$0>>>0))));
 if($467){var $j_620_i_i$1=$466$1;var $j_620_i_i$0=$466$0;label=37;break;}else{label=38;break;}
 case 38: 
 var $468=HEAP32[((14872)>>2)];
 var $469=HEAP32[((14864)>>2)];
 var $j_722_i_i$1=-1;var $j_722_i_i$0=-16;label=39;break;
 case 39: 
 var $j_722_i_i$0;
 var $j_722_i_i$1;
 var $470$0=$j_722_i_i$0;
 var $470=$470$0;
 var $471=(($468+$470)|0);
 var $472=HEAP8[($471)];
 var $473=(($469+$470)|0);
 HEAP8[($473)]=$472;
 var $$etemp$4$0=1;
 var $$etemp$4$1=0;
 var $474$0=_i64Add($j_722_i_i$0,$j_722_i_i$1,$$etemp$4$0,$$etemp$4$1);var $474$1=tempRet0;
 var $$etemp$5$0=48;
 var $$etemp$5$1=0;
 var $475=(($474$1|0) < ($$etemp$5$1|0)) | (((($474$1|0) == ($$etemp$5$1|0) & ($474$0>>>0) <  ($$etemp$5$0>>>0))));
 if($475){var $j_722_i_i$1=$474$1;var $j_722_i_i$0=$474$0;label=39;break;}else{label=40;break;}
 case 40: 
 var $476=HEAP32[((14824)>>2)];
 var $j_823_i_i$1=-1;var $j_823_i_i$0=-16;label=41;break;
 case 41: 
 var $j_823_i_i$0;
 var $j_823_i_i$1;
 var $477$0=$j_823_i_i$0;
 var $477=$477$0;
 var $478=(($456+$477)|0);
 var $479=HEAP8[($478)];
 var $480=(($476+$477)|0);
 HEAP8[($480)]=$479;
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $481$0=_i64Add($j_823_i_i$0,$j_823_i_i$1,$$etemp$6$0,$$etemp$6$1);var $481$1=tempRet0;
 var $482=(($481$1|0) < ($451$1|0)) | (((($481$1|0) == ($451$1|0) & ($481$0>>>0) <  ($451$0>>>0))));
 if($482){var $j_823_i_i$1=$481$1;var $j_823_i_i$0=$481$0;label=41;break;}else{label=42;break;}
 case 42: 
 var $483=HEAP32[((428)>>2)];
 var $484=FUNCTION_TABLE[$483]($460,$456,$i_085_i_i$0,$i_085_i_i$1,$468);
 var $485=($484|0)==0;
 if($485){label=43;break;}else{var $_0_i_i=3648;label=92;break;}
 case 43: 
 var $486=HEAP32[((14872)>>2)];
 var $487=HEAP32[((14864)>>2)];
 var $j_927_i_i$1=-1;var $j_927_i_i$0=-16;label=45;break;
 case 44: 
 var $$etemp$7$0=48;
 var $$etemp$7$1=0;
 var $489=(($497$1|0) < ($$etemp$7$1|0)) | (((($497$1|0) == ($$etemp$7$1|0) & ($497$0>>>0) <  ($$etemp$7$0>>>0))));
 if($489){var $j_927_i_i$1=$497$1;var $j_927_i_i$0=$497$0;label=45;break;}else{label=46;break;}
 case 45: 
 var $j_927_i_i$0;
 var $j_927_i_i$1;
 var $491$0=$j_927_i_i$0;
 var $491=$491$0;
 var $492=(($486+$491)|0);
 var $493=HEAP8[($492)];
 var $494=(($487+$491)|0);
 var $495=HEAP8[($494)];
 var $496=(($493<<24)>>24)==(($495<<24)>>24);
 var $$etemp$8$0=1;
 var $$etemp$8$1=0;
 var $497$0=_i64Add($j_927_i_i$0,$j_927_i_i$1,$$etemp$8$0,$$etemp$8$1);var $497$1=tempRet0;
 if($496){label=44;break;}else{var $_0_i_i=2816;label=92;break;}
 case 46: 
 var $498=HEAP32[((14832)>>2)];
 var $499=HEAP32[((14824)>>2)];
 var $j_1030_i_i$1=-1;var $j_1030_i_i$0=-16;label=48;break;
 case 47: 
 var $501=(($509$1|0) < ($451$1|0)) | (((($509$1|0) == ($451$1|0) & ($509$0>>>0) <  ($451$0>>>0))));
 if($501){var $j_1030_i_i$1=$509$1;var $j_1030_i_i$0=$509$0;label=48;break;}else{label=49;break;}
 case 48: 
 var $j_1030_i_i$0;
 var $j_1030_i_i$1;
 var $503$0=$j_1030_i_i$0;
 var $503=$503$0;
 var $504=(($498+$503)|0);
 var $505=HEAP8[($504)];
 var $506=(($499+$503)|0);
 var $507=HEAP8[($506)];
 var $508=(($505<<24)>>24)==(($507<<24)>>24);
 var $$etemp$9$0=1;
 var $$etemp$9$1=0;
 var $509$0=_i64Add($j_1030_i_i$0,$j_1030_i_i$1,$$etemp$9$0,$$etemp$9$1);var $509$1=tempRet0;
 if($508){label=47;break;}else{var $_0_i_i=2448;label=92;break;}
 case 49: 
 var $510=HEAP32[((14904)>>2)];
 var $511=HEAP32[((14896)>>2)];
 var $j_1134_i_i$1=-1;var $j_1134_i_i$0=-16;label=51;break;
 case 50: 
 var $$etemp$10$0=0;
 var $$etemp$10$1=0;
 var $513=(($521$1|0) < ($$etemp$10$1|0)) | (((($521$1|0) == ($$etemp$10$1|0) & ($521$0>>>0) <  ($$etemp$10$0>>>0))));
 if($513){var $j_1134_i_i$1=$521$1;var $j_1134_i_i$0=$521$0;label=51;break;}else{var $j_1237_i_i$1=0;var $j_1237_i_i$0=16;label=53;break;}
 case 51: 
 var $j_1134_i_i$0;
 var $j_1134_i_i$1;
 var $515$0=$j_1134_i_i$0;
 var $515=$515$0;
 var $516=(($510+$515)|0);
 var $517=HEAP8[($516)];
 var $518=(($511+$515)|0);
 var $519=HEAP8[($518)];
 var $520=(($517<<24)>>24)==(($519<<24)>>24);
 var $$etemp$11$0=1;
 var $$etemp$11$1=0;
 var $521$0=_i64Add($j_1134_i_i$0,$j_1134_i_i$1,$$etemp$11$0,$$etemp$11$1);var $521$1=tempRet0;
 if($520){label=50;break;}else{var $_0_i_i=1952;label=92;break;}
 case 52: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;
 var $523=(($530$1|0) < ($$etemp$12$1|0)) | (((($530$1|0) == ($$etemp$12$1|0) & ($530$0>>>0) <  ($$etemp$12$0>>>0))));
 if($523){var $j_1237_i_i$1=$530$1;var $j_1237_i_i$0=$530$0;label=53;break;}else{label=54;break;}
 case 53: 
 var $j_1237_i_i$0;
 var $j_1237_i_i$1;
 var $524$0=$j_1237_i_i$0;
 var $524=$524$0;
 var $525=(($510+$524)|0);
 var $526=HEAP8[($525)];
 var $527=(($511+$524)|0);
 var $528=HEAP8[($527)];
 var $529=(($526<<24)>>24)==(($528<<24)>>24);
 var $$etemp$13$0=1;
 var $$etemp$13$1=0;
 var $530$0=_i64Add($j_1237_i_i$0,$j_1237_i_i$1,$$etemp$13$0,$$etemp$13$1);var $530$1=tempRet0;
 if($529){label=52;break;}else{var $_0_i_i=1824;label=92;break;}
 case 54: 
 var $531=_rand();
 var $532=(($531)&255);
 var $533=HEAP32[((14904)>>2)];
 var $534=((($533)-(16))|0);
 HEAP8[($534)]=$532;
 var $535=_rand();
 var $536=(($535)&255);
 var $537=HEAP32[((14904)>>2)];
 var $538=((($537)-(15))|0);
 HEAP8[($538)]=$536;
 var $539=_rand();
 var $540=(($539)&255);
 var $541=HEAP32[((14904)>>2)];
 var $542=((($541)-(14))|0);
 HEAP8[($542)]=$540;
 var $543=_rand();
 var $544=(($543)&255);
 var $545=HEAP32[((14904)>>2)];
 var $546=((($545)-(13))|0);
 HEAP8[($546)]=$544;
 var $547=_rand();
 var $548=(($547)&255);
 var $549=HEAP32[((14904)>>2)];
 var $550=((($549)-(12))|0);
 HEAP8[($550)]=$548;
 var $551=_rand();
 var $552=(($551)&255);
 var $553=HEAP32[((14904)>>2)];
 var $554=((($553)-(11))|0);
 HEAP8[($554)]=$552;
 var $555=_rand();
 var $556=(($555)&255);
 var $557=HEAP32[((14904)>>2)];
 var $558=((($557)-(10))|0);
 HEAP8[($558)]=$556;
 var $559=_rand();
 var $560=(($559)&255);
 var $561=HEAP32[((14904)>>2)];
 var $562=((($561)-(9))|0);
 HEAP8[($562)]=$560;
 var $563=_rand();
 var $564=(($563)&255);
 var $565=HEAP32[((14904)>>2)];
 var $566=((($565)-(8))|0);
 HEAP8[($566)]=$564;
 var $567=_rand();
 var $568=(($567)&255);
 var $569=HEAP32[((14904)>>2)];
 var $570=((($569)-(7))|0);
 HEAP8[($570)]=$568;
 var $571=_rand();
 var $572=(($571)&255);
 var $573=HEAP32[((14904)>>2)];
 var $574=((($573)-(6))|0);
 HEAP8[($574)]=$572;
 var $575=_rand();
 var $576=(($575)&255);
 var $577=HEAP32[((14904)>>2)];
 var $578=((($577)-(5))|0);
 HEAP8[($578)]=$576;
 var $579=_rand();
 var $580=(($579)&255);
 var $581=HEAP32[((14904)>>2)];
 var $582=((($581)-(4))|0);
 HEAP8[($582)]=$580;
 var $583=_rand();
 var $584=(($583)&255);
 var $585=HEAP32[((14904)>>2)];
 var $586=((($585)-(3))|0);
 HEAP8[($586)]=$584;
 var $587=_rand();
 var $588=(($587)&255);
 var $589=HEAP32[((14904)>>2)];
 var $590=((($589)-(2))|0);
 HEAP8[($590)]=$588;
 var $591=_rand();
 var $592=(($591)&255);
 var $593=HEAP32[((14904)>>2)];
 var $594=((($593)-(1))|0);
 HEAP8[($594)]=$592;
 var $595=_rand();
 var $596=(($595)&255);
 var $597=HEAP32[((14872)>>2)];
 var $598=((($597)-(16))|0);
 HEAP8[($598)]=$596;
 var $599=_rand();
 var $600=(($599)&255);
 var $601=HEAP32[((14872)>>2)];
 var $602=((($601)-(15))|0);
 HEAP8[($602)]=$600;
 var $603=_rand();
 var $604=(($603)&255);
 var $605=HEAP32[((14872)>>2)];
 var $606=((($605)-(14))|0);
 HEAP8[($606)]=$604;
 var $607=_rand();
 var $608=(($607)&255);
 var $609=HEAP32[((14872)>>2)];
 var $610=((($609)-(13))|0);
 HEAP8[($610)]=$608;
 var $611=_rand();
 var $612=(($611)&255);
 var $613=HEAP32[((14872)>>2)];
 var $614=((($613)-(12))|0);
 HEAP8[($614)]=$612;
 var $615=_rand();
 var $616=(($615)&255);
 var $617=HEAP32[((14872)>>2)];
 var $618=((($617)-(11))|0);
 HEAP8[($618)]=$616;
 var $619=_rand();
 var $620=(($619)&255);
 var $621=HEAP32[((14872)>>2)];
 var $622=((($621)-(10))|0);
 HEAP8[($622)]=$620;
 var $623=_rand();
 var $624=(($623)&255);
 var $625=HEAP32[((14872)>>2)];
 var $626=((($625)-(9))|0);
 HEAP8[($626)]=$624;
 var $627=_rand();
 var $628=(($627)&255);
 var $629=HEAP32[((14872)>>2)];
 var $630=((($629)-(8))|0);
 HEAP8[($630)]=$628;
 var $631=_rand();
 var $632=(($631)&255);
 var $633=HEAP32[((14872)>>2)];
 var $634=((($633)-(7))|0);
 HEAP8[($634)]=$632;
 var $635=_rand();
 var $636=(($635)&255);
 var $637=HEAP32[((14872)>>2)];
 var $638=((($637)-(6))|0);
 HEAP8[($638)]=$636;
 var $639=_rand();
 var $640=(($639)&255);
 var $641=HEAP32[((14872)>>2)];
 var $642=((($641)-(5))|0);
 HEAP8[($642)]=$640;
 var $643=_rand();
 var $644=(($643)&255);
 var $645=HEAP32[((14872)>>2)];
 var $646=((($645)-(4))|0);
 HEAP8[($646)]=$644;
 var $647=_rand();
 var $648=(($647)&255);
 var $649=HEAP32[((14872)>>2)];
 var $650=((($649)-(3))|0);
 HEAP8[($650)]=$648;
 var $651=_rand();
 var $652=(($651)&255);
 var $653=HEAP32[((14872)>>2)];
 var $654=((($653)-(2))|0);
 HEAP8[($654)]=$652;
 var $655=_rand();
 var $656=(($655)&255);
 var $657=HEAP32[((14872)>>2)];
 var $658=((($657)-(1))|0);
 HEAP8[($658)]=$656;
 var $659=_rand();
 var $660=(($659)&255);
 var $661=HEAP32[((14832)>>2)];
 var $662=((($661)-(16))|0);
 HEAP8[($662)]=$660;
 var $663=_rand();
 var $664=(($663)&255);
 var $665=HEAP32[((14832)>>2)];
 var $666=((($665)-(15))|0);
 HEAP8[($666)]=$664;
 var $667=_rand();
 var $668=(($667)&255);
 var $669=HEAP32[((14832)>>2)];
 var $670=((($669)-(14))|0);
 HEAP8[($670)]=$668;
 var $671=_rand();
 var $672=(($671)&255);
 var $673=HEAP32[((14832)>>2)];
 var $674=((($673)-(13))|0);
 HEAP8[($674)]=$672;
 var $675=_rand();
 var $676=(($675)&255);
 var $677=HEAP32[((14832)>>2)];
 var $678=((($677)-(12))|0);
 HEAP8[($678)]=$676;
 var $679=_rand();
 var $680=(($679)&255);
 var $681=HEAP32[((14832)>>2)];
 var $682=((($681)-(11))|0);
 HEAP8[($682)]=$680;
 var $683=_rand();
 var $684=(($683)&255);
 var $685=HEAP32[((14832)>>2)];
 var $686=((($685)-(10))|0);
 HEAP8[($686)]=$684;
 var $687=_rand();
 var $688=(($687)&255);
 var $689=HEAP32[((14832)>>2)];
 var $690=((($689)-(9))|0);
 HEAP8[($690)]=$688;
 var $691=_rand();
 var $692=(($691)&255);
 var $693=HEAP32[((14832)>>2)];
 var $694=((($693)-(8))|0);
 HEAP8[($694)]=$692;
 var $695=_rand();
 var $696=(($695)&255);
 var $697=HEAP32[((14832)>>2)];
 var $698=((($697)-(7))|0);
 HEAP8[($698)]=$696;
 var $699=_rand();
 var $700=(($699)&255);
 var $701=HEAP32[((14832)>>2)];
 var $702=((($701)-(6))|0);
 HEAP8[($702)]=$700;
 var $703=_rand();
 var $704=(($703)&255);
 var $705=HEAP32[((14832)>>2)];
 var $706=((($705)-(5))|0);
 HEAP8[($706)]=$704;
 var $707=_rand();
 var $708=(($707)&255);
 var $709=HEAP32[((14832)>>2)];
 var $710=((($709)-(4))|0);
 HEAP8[($710)]=$708;
 var $711=_rand();
 var $712=(($711)&255);
 var $713=HEAP32[((14832)>>2)];
 var $714=((($713)-(3))|0);
 HEAP8[($714)]=$712;
 var $715=_rand();
 var $716=(($715)&255);
 var $717=HEAP32[((14832)>>2)];
 var $718=((($717)-(2))|0);
 HEAP8[($718)]=$716;
 var $719=_rand();
 var $720=(($719)&255);
 var $721=HEAP32[((14832)>>2)];
 var $722=((($721)-(1))|0);
 HEAP8[($722)]=$720;
 var $723=_rand();
 var $724=(($723)&255);
 var $725=HEAP32[((14904)>>2)];
 var $726=(($725+16)|0);
 HEAP8[($726)]=$724;
 var $727=_rand();
 var $728=(($727)&255);
 var $729=HEAP32[((14904)>>2)];
 var $730=(($729+17)|0);
 HEAP8[($730)]=$728;
 var $731=_rand();
 var $732=(($731)&255);
 var $733=HEAP32[((14904)>>2)];
 var $734=(($733+18)|0);
 HEAP8[($734)]=$732;
 var $735=_rand();
 var $736=(($735)&255);
 var $737=HEAP32[((14904)>>2)];
 var $738=(($737+19)|0);
 HEAP8[($738)]=$736;
 var $739=_rand();
 var $740=(($739)&255);
 var $741=HEAP32[((14904)>>2)];
 var $742=(($741+20)|0);
 HEAP8[($742)]=$740;
 var $743=_rand();
 var $744=(($743)&255);
 var $745=HEAP32[((14904)>>2)];
 var $746=(($745+21)|0);
 HEAP8[($746)]=$744;
 var $747=_rand();
 var $748=(($747)&255);
 var $749=HEAP32[((14904)>>2)];
 var $750=(($749+22)|0);
 HEAP8[($750)]=$748;
 var $751=_rand();
 var $752=(($751)&255);
 var $753=HEAP32[((14904)>>2)];
 var $754=(($753+23)|0);
 HEAP8[($754)]=$752;
 var $755=_rand();
 var $756=(($755)&255);
 var $757=HEAP32[((14904)>>2)];
 var $758=(($757+24)|0);
 HEAP8[($758)]=$756;
 var $759=_rand();
 var $760=(($759)&255);
 var $761=HEAP32[((14904)>>2)];
 var $762=(($761+25)|0);
 HEAP8[($762)]=$760;
 var $763=_rand();
 var $764=(($763)&255);
 var $765=HEAP32[((14904)>>2)];
 var $766=(($765+26)|0);
 HEAP8[($766)]=$764;
 var $767=_rand();
 var $768=(($767)&255);
 var $769=HEAP32[((14904)>>2)];
 var $770=(($769+27)|0);
 HEAP8[($770)]=$768;
 var $771=_rand();
 var $772=(($771)&255);
 var $773=HEAP32[((14904)>>2)];
 var $774=(($773+28)|0);
 HEAP8[($774)]=$772;
 var $775=_rand();
 var $776=(($775)&255);
 var $777=HEAP32[((14904)>>2)];
 var $778=(($777+29)|0);
 HEAP8[($778)]=$776;
 var $779=_rand();
 var $780=(($779)&255);
 var $781=HEAP32[((14904)>>2)];
 var $782=(($781+30)|0);
 HEAP8[($782)]=$780;
 var $783=_rand();
 var $784=(($783)&255);
 var $785=HEAP32[((14904)>>2)];
 var $786=(($785+31)|0);
 HEAP8[($786)]=$784;
 var $787=_rand();
 var $788=(($787)&255);
 var $789=HEAP32[((14872)>>2)];
 var $790=(($789+32)|0);
 HEAP8[($790)]=$788;
 var $791=_rand();
 var $792=(($791)&255);
 var $793=HEAP32[((14872)>>2)];
 var $794=(($793+33)|0);
 HEAP8[($794)]=$792;
 var $795=_rand();
 var $796=(($795)&255);
 var $797=HEAP32[((14872)>>2)];
 var $798=(($797+34)|0);
 HEAP8[($798)]=$796;
 var $799=_rand();
 var $800=(($799)&255);
 var $801=HEAP32[((14872)>>2)];
 var $802=(($801+35)|0);
 HEAP8[($802)]=$800;
 var $803=_rand();
 var $804=(($803)&255);
 var $805=HEAP32[((14872)>>2)];
 var $806=(($805+36)|0);
 HEAP8[($806)]=$804;
 var $807=_rand();
 var $808=(($807)&255);
 var $809=HEAP32[((14872)>>2)];
 var $810=(($809+37)|0);
 HEAP8[($810)]=$808;
 var $811=_rand();
 var $812=(($811)&255);
 var $813=HEAP32[((14872)>>2)];
 var $814=(($813+38)|0);
 HEAP8[($814)]=$812;
 var $815=_rand();
 var $816=(($815)&255);
 var $817=HEAP32[((14872)>>2)];
 var $818=(($817+39)|0);
 HEAP8[($818)]=$816;
 var $819=_rand();
 var $820=(($819)&255);
 var $821=HEAP32[((14872)>>2)];
 var $822=(($821+40)|0);
 HEAP8[($822)]=$820;
 var $823=_rand();
 var $824=(($823)&255);
 var $825=HEAP32[((14872)>>2)];
 var $826=(($825+41)|0);
 HEAP8[($826)]=$824;
 var $827=_rand();
 var $828=(($827)&255);
 var $829=HEAP32[((14872)>>2)];
 var $830=(($829+42)|0);
 HEAP8[($830)]=$828;
 var $831=_rand();
 var $832=(($831)&255);
 var $833=HEAP32[((14872)>>2)];
 var $834=(($833+43)|0);
 HEAP8[($834)]=$832;
 var $835=_rand();
 var $836=(($835)&255);
 var $837=HEAP32[((14872)>>2)];
 var $838=(($837+44)|0);
 HEAP8[($838)]=$836;
 var $839=_rand();
 var $840=(($839)&255);
 var $841=HEAP32[((14872)>>2)];
 var $842=(($841+45)|0);
 HEAP8[($842)]=$840;
 var $843=_rand();
 var $844=(($843)&255);
 var $845=HEAP32[((14872)>>2)];
 var $846=(($845+46)|0);
 HEAP8[($846)]=$844;
 var $847=_rand();
 var $848=(($847)&255);
 var $849=HEAP32[((14872)>>2)];
 var $850=(($849+47)|0);
 HEAP8[($850)]=$848;
 var $j_1849_i_i$1=$i_085_i_i$1;var $j_1849_i_i$0=$i_085_i_i$0;label=55;break;
 case 55: 
 var $j_1849_i_i$0;
 var $j_1849_i_i$1;
 var $852=_rand();
 var $853=(($852)&255);
 var $854$0=$j_1849_i_i$0;
 var $854=$854$0;
 var $855=HEAP32[((14832)>>2)];
 var $856=(($855+$854)|0);
 HEAP8[($856)]=$853;
 var $$etemp$14$0=1;
 var $$etemp$14$1=0;
 var $857$0=_i64Add($j_1849_i_i$0,$j_1849_i_i$1,$$etemp$14$0,$$etemp$14$1);var $857$1=tempRet0;
 var $858=(($857$1|0) < ($451$1|0)) | (((($857$1|0) == ($451$1|0) & ($857$0>>>0) <  ($451$0>>>0))));
 if($858){var $j_1849_i_i$1=$857$1;var $j_1849_i_i$0=$857$0;label=55;break;}else{label=56;break;}
 case 56: 
 var $859=HEAP32[((14904)>>2)];
 var $860=HEAP32[((14896)>>2)];
 var $j_1952_i_i$1=-1;var $j_1952_i_i$0=-16;label=57;break;
 case 57: 
 var $j_1952_i_i$0;
 var $j_1952_i_i$1;
 var $861$0=$j_1952_i_i$0;
 var $861=$861$0;
 var $862=(($859+$861)|0);
 var $863=HEAP8[($862)];
 var $864=(($860+$861)|0);
 HEAP8[($864)]=$863;
 var $$etemp$15$0=1;
 var $$etemp$15$1=0;
 var $865$0=_i64Add($j_1952_i_i$0,$j_1952_i_i$1,$$etemp$15$0,$$etemp$15$1);var $865$1=tempRet0;
 var $$etemp$16$0=32;
 var $$etemp$16$1=0;
 var $866=(($865$1|0) < ($$etemp$16$1|0)) | (((($865$1|0) == ($$etemp$16$1|0) & ($865$0>>>0) <  ($$etemp$16$0>>>0))));
 if($866){var $j_1952_i_i$1=$865$1;var $j_1952_i_i$0=$865$0;label=57;break;}else{label=58;break;}
 case 58: 
 var $867=HEAP32[((14872)>>2)];
 var $868=HEAP32[((14864)>>2)];
 var $j_2054_i_i$1=-1;var $j_2054_i_i$0=-16;label=59;break;
 case 59: 
 var $j_2054_i_i$0;
 var $j_2054_i_i$1;
 var $869$0=$j_2054_i_i$0;
 var $869=$869$0;
 var $870=(($867+$869)|0);
 var $871=HEAP8[($870)];
 var $872=(($868+$869)|0);
 HEAP8[($872)]=$871;
 var $$etemp$17$0=1;
 var $$etemp$17$1=0;
 var $873$0=_i64Add($j_2054_i_i$0,$j_2054_i_i$1,$$etemp$17$0,$$etemp$17$1);var $873$1=tempRet0;
 var $$etemp$18$0=48;
 var $$etemp$18$1=0;
 var $874=(($873$1|0) < ($$etemp$18$1|0)) | (((($873$1|0) == ($$etemp$18$1|0) & ($873$0>>>0) <  ($$etemp$18$0>>>0))));
 if($874){var $j_2054_i_i$1=$873$1;var $j_2054_i_i$0=$873$0;label=59;break;}else{label=60;break;}
 case 60: 
 var $875=HEAP32[((14824)>>2)];
 var $j_2155_i_i$1=-1;var $j_2155_i_i$0=-16;label=61;break;
 case 61: 
 var $j_2155_i_i$0;
 var $j_2155_i_i$1;
 var $876$0=$j_2155_i_i$0;
 var $876=$876$0;
 var $877=(($855+$876)|0);
 var $878=HEAP8[($877)];
 var $879=(($875+$876)|0);
 HEAP8[($879)]=$878;
 var $$etemp$19$0=1;
 var $$etemp$19$1=0;
 var $880$0=_i64Add($j_2155_i_i$0,$j_2155_i_i$1,$$etemp$19$0,$$etemp$19$1);var $880$1=tempRet0;
 var $881=(($880$1|0) < ($451$1|0)) | (((($880$1|0) == ($451$1|0) & ($880$0>>>0) <  ($451$0>>>0))));
 if($881){var $j_2155_i_i$1=$880$1;var $j_2155_i_i$0=$880$0;label=61;break;}else{label=62;break;}
 case 62: 
 var $882=HEAP32[((428)>>2)];
 var $883=FUNCTION_TABLE[$882]($875,$875,$i_085_i_i$0,$i_085_i_i$1,$867);
 var $884=($883|0)==0;
 if($884){label=63;break;}else{var $_0_i_i=3648;label=92;break;}
 case 63: 
 var $885=HEAP32[((14824)>>2)];
 var $886=HEAP32[((14904)>>2)];
 var $j_2261_i_i$1=0;var $j_2261_i_i$0=0;label=65;break;
 case 64: 
 var $$etemp$20$0=16;
 var $$etemp$20$1=0;
 var $888=(($896$1|0) < ($$etemp$20$1|0)) | (((($896$1|0) == ($$etemp$20$1|0) & ($896$0>>>0) <  ($$etemp$20$0>>>0))));
 if($888){var $j_2261_i_i$1=$896$1;var $j_2261_i_i$0=$896$0;label=65;break;}else{label=66;break;}
 case 65: 
 var $j_2261_i_i$0;
 var $j_2261_i_i$1;
 var $890$0=$j_2261_i_i$0;
 var $890=$890$0;
 var $891=(($885+$890)|0);
 var $892=HEAP8[($891)];
 var $893=(($886+$890)|0);
 var $894=HEAP8[($893)];
 var $895=(($892<<24)>>24)==(($894<<24)>>24);
 var $$etemp$21$0=1;
 var $$etemp$21$1=0;
 var $896$0=_i64Add($j_2261_i_i$0,$j_2261_i_i$1,$$etemp$21$0,$$etemp$21$1);var $896$1=tempRet0;
 if($895){label=64;break;}else{var $_0_i_i=1568;label=92;break;}
 case 66: 
 var $897=HEAP32[((14832)>>2)];
 var $898=HEAP8[($897)];
 HEAP8[($885)]=$898;
 var $899=(($897+1)|0);
 var $900=HEAP8[($899)];
 var $901=(($885+1)|0);
 HEAP8[($901)]=$900;
 var $902=(($897+2)|0);
 var $903=HEAP8[($902)];
 var $904=(($885+2)|0);
 HEAP8[($904)]=$903;
 var $905=(($897+3)|0);
 var $906=HEAP8[($905)];
 var $907=(($885+3)|0);
 HEAP8[($907)]=$906;
 var $908=(($897+4)|0);
 var $909=HEAP8[($908)];
 var $910=(($885+4)|0);
 HEAP8[($910)]=$909;
 var $911=(($897+5)|0);
 var $912=HEAP8[($911)];
 var $913=(($885+5)|0);
 HEAP8[($913)]=$912;
 var $914=(($897+6)|0);
 var $915=HEAP8[($914)];
 var $916=(($885+6)|0);
 HEAP8[($916)]=$915;
 var $917=(($897+7)|0);
 var $918=HEAP8[($917)];
 var $919=(($885+7)|0);
 HEAP8[($919)]=$918;
 var $920=(($897+8)|0);
 var $921=HEAP8[($920)];
 var $922=(($885+8)|0);
 HEAP8[($922)]=$921;
 var $923=(($897+9)|0);
 var $924=HEAP8[($923)];
 var $925=(($885+9)|0);
 HEAP8[($925)]=$924;
 var $926=(($897+10)|0);
 var $927=HEAP8[($926)];
 var $928=(($885+10)|0);
 HEAP8[($928)]=$927;
 var $929=(($897+11)|0);
 var $930=HEAP8[($929)];
 var $931=(($885+11)|0);
 HEAP8[($931)]=$930;
 var $932=(($897+12)|0);
 var $933=HEAP8[($932)];
 var $934=(($885+12)|0);
 HEAP8[($934)]=$933;
 var $935=(($897+13)|0);
 var $936=HEAP8[($935)];
 var $937=(($885+13)|0);
 HEAP8[($937)]=$936;
 var $938=(($897+14)|0);
 var $939=HEAP8[($938)];
 var $940=(($885+14)|0);
 HEAP8[($940)]=$939;
 var $941=(($897+15)|0);
 var $942=HEAP8[($941)];
 var $943=(($885+15)|0);
 HEAP8[($943)]=$942;
 var $944=HEAP32[((14864)>>2)];
 var $945=HEAP32[((428)>>2)];
 var $946=FUNCTION_TABLE[$945]($944,$885,$i_085_i_i$0,$i_085_i_i$1,$944);
 var $947=($946|0)==0;
 if($947){label=67;break;}else{var $_0_i_i=3648;label=92;break;}
 case 67: 
 var $948=HEAP32[((14864)>>2)];
 var $949=HEAP32[((14904)>>2)];
 var $j_2466_i_i$1=0;var $j_2466_i_i$0=0;label=69;break;
 case 68: 
 var $$etemp$22$0=16;
 var $$etemp$22$1=0;
 var $951=(($959$1|0) < ($$etemp$22$1|0)) | (((($959$1|0) == ($$etemp$22$1|0) & ($959$0>>>0) <  ($$etemp$22$0>>>0))));
 if($951){var $j_2466_i_i$1=$959$1;var $j_2466_i_i$0=$959$0;label=69;break;}else{label=70;break;}
 case 69: 
 var $j_2466_i_i$0;
 var $j_2466_i_i$1;
 var $953$0=$j_2466_i_i$0;
 var $953=$953$0;
 var $954=(($948+$953)|0);
 var $955=HEAP8[($954)];
 var $956=(($949+$953)|0);
 var $957=HEAP8[($956)];
 var $958=(($955<<24)>>24)==(($957<<24)>>24);
 var $$etemp$23$0=1;
 var $$etemp$23$1=0;
 var $959$0=_i64Add($j_2466_i_i$0,$j_2466_i_i$1,$$etemp$23$0,$$etemp$23$1);var $959$1=tempRet0;
 if($958){label=68;break;}else{var $_0_i_i=1064;label=92;break;}
 case 70: 
 var $960=HEAP32[((14872)>>2)];
 var $961=HEAP8[($960)];
 HEAP8[($948)]=$961;
 var $962=(($960+1)|0);
 var $963=HEAP8[($962)];
 var $964=(($948+1)|0);
 HEAP8[($964)]=$963;
 var $965=(($960+2)|0);
 var $966=HEAP8[($965)];
 var $967=(($948+2)|0);
 HEAP8[($967)]=$966;
 var $968=(($960+3)|0);
 var $969=HEAP8[($968)];
 var $970=(($948+3)|0);
 HEAP8[($970)]=$969;
 var $971=(($960+4)|0);
 var $972=HEAP8[($971)];
 var $973=(($948+4)|0);
 HEAP8[($973)]=$972;
 var $974=(($960+5)|0);
 var $975=HEAP8[($974)];
 var $976=(($948+5)|0);
 HEAP8[($976)]=$975;
 var $977=(($960+6)|0);
 var $978=HEAP8[($977)];
 var $979=(($948+6)|0);
 HEAP8[($979)]=$978;
 var $980=(($960+7)|0);
 var $981=HEAP8[($980)];
 var $982=(($948+7)|0);
 HEAP8[($982)]=$981;
 var $983=(($960+8)|0);
 var $984=HEAP8[($983)];
 var $985=(($948+8)|0);
 HEAP8[($985)]=$984;
 var $986=(($960+9)|0);
 var $987=HEAP8[($986)];
 var $988=(($948+9)|0);
 HEAP8[($988)]=$987;
 var $989=(($960+10)|0);
 var $990=HEAP8[($989)];
 var $991=(($948+10)|0);
 HEAP8[($991)]=$990;
 var $992=(($960+11)|0);
 var $993=HEAP8[($992)];
 var $994=(($948+11)|0);
 HEAP8[($994)]=$993;
 var $995=(($960+12)|0);
 var $996=HEAP8[($995)];
 var $997=(($948+12)|0);
 HEAP8[($997)]=$996;
 var $998=(($960+13)|0);
 var $999=HEAP8[($998)];
 var $1000=(($948+13)|0);
 HEAP8[($1000)]=$999;
 var $1001=(($960+14)|0);
 var $1002=HEAP8[($1001)];
 var $1003=(($948+14)|0);
 HEAP8[($1003)]=$1002;
 var $1004=(($960+15)|0);
 var $1005=HEAP8[($1004)];
 var $1006=(($948+15)|0);
 HEAP8[($1006)]=$1005;
 var $1007=HEAP32[((14832)>>2)];
 var $1008=HEAP32[((432)>>2)];
 var $1009=FUNCTION_TABLE[$1008]($949,$1007,$i_085_i_i$0,$i_085_i_i$1,$960);
 var $1010=($1009|0)==0;
 if($1010){label=71;break;}else{var $_0_i_i=888;label=92;break;}
 case 71: 
 var $1011=HEAP32[((14904)>>2)];
 var $1012=HEAP32[((14896)>>2)];
 var $j_2671_i_i$1=-1;var $j_2671_i_i$0=-16;label=73;break;
 case 72: 
 var $$etemp$24$0=32;
 var $$etemp$24$1=0;
 var $1014=(($1022$1|0) < ($$etemp$24$1|0)) | (((($1022$1|0) == ($$etemp$24$1|0) & ($1022$0>>>0) <  ($$etemp$24$0>>>0))));
 if($1014){var $j_2671_i_i$1=$1022$1;var $j_2671_i_i$0=$1022$0;label=73;break;}else{label=74;break;}
 case 73: 
 var $j_2671_i_i$0;
 var $j_2671_i_i$1;
 var $1016$0=$j_2671_i_i$0;
 var $1016=$1016$0;
 var $1017=(($1011+$1016)|0);
 var $1018=HEAP8[($1017)];
 var $1019=(($1012+$1016)|0);
 var $1020=HEAP8[($1019)];
 var $1021=(($1018<<24)>>24)==(($1020<<24)>>24);
 var $$etemp$25$0=1;
 var $$etemp$25$1=0;
 var $1022$0=_i64Add($j_2671_i_i$0,$j_2671_i_i$1,$$etemp$25$0,$$etemp$25$1);var $1022$1=tempRet0;
 if($1021){label=72;break;}else{var $_0_i_i=704;label=92;break;}
 case 74: 
 var $1023=HEAP32[((14872)>>2)];
 var $1024=HEAP32[((14864)>>2)];
 var $j_2774_i_i$1=-1;var $j_2774_i_i$0=-16;label=76;break;
 case 75: 
 var $$etemp$26$0=48;
 var $$etemp$26$1=0;
 var $1026=(($1034$1|0) < ($$etemp$26$1|0)) | (((($1034$1|0) == ($$etemp$26$1|0) & ($1034$0>>>0) <  ($$etemp$26$0>>>0))));
 if($1026){var $j_2774_i_i$1=$1034$1;var $j_2774_i_i$0=$1034$0;label=76;break;}else{label=77;break;}
 case 76: 
 var $j_2774_i_i$0;
 var $j_2774_i_i$1;
 var $1028$0=$j_2774_i_i$0;
 var $1028=$1028$0;
 var $1029=(($1023+$1028)|0);
 var $1030=HEAP8[($1029)];
 var $1031=(($1024+$1028)|0);
 var $1032=HEAP8[($1031)];
 var $1033=(($1030<<24)>>24)==(($1032<<24)>>24);
 var $$etemp$27$0=1;
 var $$etemp$27$1=0;
 var $1034$0=_i64Add($j_2774_i_i$0,$j_2774_i_i$1,$$etemp$27$0,$$etemp$27$1);var $1034$1=tempRet0;
 if($1033){label=75;break;}else{var $_0_i_i=2816;label=92;break;}
 case 77: 
 var $1035=HEAP32[((14832)>>2)];
 var $1036=HEAP32[((14824)>>2)];
 var $j_2876_i_i$1=-1;var $j_2876_i_i$0=-16;label=79;break;
 case 78: 
 var $1038=(($1046$1|0) < ($451$1|0)) | (((($1046$1|0) == ($451$1|0) & ($1046$0>>>0) <  ($451$0>>>0))));
 if($1038){var $j_2876_i_i$1=$1046$1;var $j_2876_i_i$0=$1046$0;label=79;break;}else{label=80;break;}
 case 79: 
 var $j_2876_i_i$0;
 var $j_2876_i_i$1;
 var $1040$0=$j_2876_i_i$0;
 var $1040=$1040$0;
 var $1041=(($1035+$1040)|0);
 var $1042=HEAP8[($1041)];
 var $1043=(($1036+$1040)|0);
 var $1044=HEAP8[($1043)];
 var $1045=(($1042<<24)>>24)==(($1044<<24)>>24);
 var $$etemp$28$0=1;
 var $$etemp$28$1=0;
 var $1046$0=_i64Add($j_2876_i_i$0,$j_2876_i_i$1,$$etemp$28$0,$$etemp$28$1);var $1046$1=tempRet0;
 if($1045){label=78;break;}else{var $_0_i_i=2448;label=92;break;}
 case 80: 
 var $$etemp$29$0=32;
 var $$etemp$29$1=0;

 var $$etemp$30$0=128;
 var $$etemp$30$1=0;

 assert(28 % 1 === 0);(_memcpy($96, 344, 28)|0);
 HEAP8[($98)]=103;
 HEAP8[($99)]=-26;
 HEAP8[($100)]=9;
 HEAP8[($96)]=106;
 HEAP8[($102)]=-123;
 HEAP8[($103)]=-82;
 HEAP8[($104)]=103;
 HEAP8[($101)]=-69;
 HEAP8[($106)]=114;
 HEAP8[($107)]=-13;
 HEAP8[($108)]=110;
 HEAP8[($105)]=60;
 HEAP8[($110)]=58;
 HEAP8[($111)]=-11;
 HEAP8[($112)]=79;
 HEAP8[($109)]=-91;
 HEAP8[($114)]=127;
 HEAP8[($115)]=82;
 HEAP8[($116)]=14;
 HEAP8[($113)]=81;
 HEAP8[($118)]=-116;
 HEAP8[($119)]=104;
 HEAP8[($120)]=5;
 HEAP8[($117)]=-101;
 HEAP8[($122)]=-85;
 HEAP8[($123)]=-39;
 HEAP8[($124)]=-125;
 HEAP8[($121)]=31;
 HEAP8[($126)]=25;
 HEAP8[($127)]=-51;
 HEAP8[($128)]=-32;
 HEAP8[($125)]=91;
 assert(16 % 1 === 0);(_memcpy($97, $1011, 16)|0);
 HEAP8[($129)]=-128;
 _memset($scevgep_i_i, 0, 46)|0;
 HEAP8[($130)]=-128;
 var $$etemp$31$0=64;
 var $$etemp$31$1=0;
 _crypto_hashblocks_sha256($96,$97,$$etemp$31$0,$$etemp$31$1);
 assert(32 % 1 === 0);(_memcpy($1012, $96, 32)|0);
 var $$etemp$32$0=128;
 var $$etemp$32$1=0;

 var $$etemp$33$0=32;
 var $$etemp$33$1=0;

 var $j_2979_i_i$1=0;var $j_2979_i_i$0=0;label=81;break;
 case 81: 
 var $j_2979_i_i$0;
 var $j_2979_i_i$1;
 var $1048$0=$j_2979_i_i$0;
 var $1048=$1048$0;
 var $1049=(($1012+$1048)|0);
 var $1050=HEAP8[($1049)];
 var $1051=(($1023+$1048)|0);
 var $1052=HEAP8[($1051)];
 var $1053=$1052^$1050;
 HEAP8[($1051)]=$1053;
 var $$etemp$34$0=1;
 var $$etemp$34$1=0;
 var $1054$0=_i64Add($j_2979_i_i$0,$j_2979_i_i$1,$$etemp$34$0,$$etemp$34$1);var $1054$1=tempRet0;
 var $$etemp$35$0=32;
 var $$etemp$35$1=0;
 var $1055=(($1054$1|0) < ($$etemp$35$1|0)) | (((($1054$1|0) == ($$etemp$35$1|0) & ($1054$0>>>0) <  ($$etemp$35$0>>>0))));
 if($1055){var $j_2979_i_i$1=$1054$1;var $j_2979_i_i$0=$1054$0;label=81;break;}else{label=82;break;}
 case 82: 
 var $1057=HEAP32[((428)>>2)];
 var $1058=FUNCTION_TABLE[$1057]($1011,$1035,$i_085_i_i$0,$i_085_i_i$1,$1023);
 var $1059=($1058|0)==0;
 if($1059){label=83;break;}else{var $_0_i_i=3648;label=92;break;}
 case 83: 
 var $1061=HEAP32[((14904)>>2)];
 var $1062=HEAP32[((14832)>>2)];
 var $1063=HEAP32[((14872)>>2)];
 var $1064=HEAP32[((432)>>2)];
 var $1065=FUNCTION_TABLE[$1064]($1061,$1062,$i_085_i_i$0,$i_085_i_i$1,$1063);
 var $1066=($1065|0)==0;
 if($1066){label=84;break;}else{var $_0_i_i=888;label=92;break;}
 case 84: 
 var $1068=HEAP32[((14896)>>2)];
 var $1069=HEAP32[((14904)>>2)];
 var $$etemp$36$0=32;
 var $$etemp$36$1=0;

 var $$etemp$37$0=128;
 var $$etemp$37$1=0;

 assert(28 % 1 === 0);(_memcpy($96, 344, 28)|0);
 HEAP8[($98)]=103;
 HEAP8[($99)]=-26;
 HEAP8[($100)]=9;
 HEAP8[($96)]=106;
 HEAP8[($102)]=-123;
 HEAP8[($103)]=-82;
 HEAP8[($104)]=103;
 HEAP8[($101)]=-69;
 HEAP8[($106)]=114;
 HEAP8[($107)]=-13;
 HEAP8[($108)]=110;
 HEAP8[($105)]=60;
 HEAP8[($110)]=58;
 HEAP8[($111)]=-11;
 HEAP8[($112)]=79;
 HEAP8[($109)]=-91;
 HEAP8[($114)]=127;
 HEAP8[($115)]=82;
 HEAP8[($116)]=14;
 HEAP8[($113)]=81;
 HEAP8[($118)]=-116;
 HEAP8[($119)]=104;
 HEAP8[($120)]=5;
 HEAP8[($117)]=-101;
 HEAP8[($122)]=-85;
 HEAP8[($123)]=-39;
 HEAP8[($124)]=-125;
 HEAP8[($121)]=31;
 HEAP8[($126)]=25;
 HEAP8[($127)]=-51;
 HEAP8[($128)]=-32;
 HEAP8[($125)]=91;
 assert(16 % 1 === 0);(_memcpy($97, $1069, 16)|0);
 HEAP8[($129)]=-128;
 _memset($scevgep_i_i, 0, 46)|0;
 HEAP8[($130)]=-128;
 var $$etemp$38$0=64;
 var $$etemp$38$1=0;
 _crypto_hashblocks_sha256($96,$97,$$etemp$38$0,$$etemp$38$1);
 assert(32 % 1 === 0);(_memcpy($1068, $96, 32)|0);
 var $$etemp$39$0=128;
 var $$etemp$39$1=0;

 var $$etemp$40$0=32;
 var $$etemp$40$1=0;

 var $$etemp$41$0=0;
 var $$etemp$41$1=0;
 var $1070=(($i_085_i_i$1|0) > ($$etemp$41$1|0)) | (((($i_085_i_i$1|0) == ($$etemp$41$1|0) & ($i_085_i_i$0>>>0) >  ($$etemp$41$0>>>0))));
 var $1071=HEAP32[((14832)>>2)];
 if($1070){var $j_3080_i_i$1=0;var $j_3080_i_i$0=0;label=85;break;}else{var $1082=$1071;label=86;break;}
 case 85: 
 var $j_3080_i_i$0;
 var $j_3080_i_i$1;
 var $$etemp$42$0=32;
 var $$etemp$42$1=0;
 var $1072$0=___remdi3($j_3080_i_i$0,$j_3080_i_i$1,$$etemp$42$0,$$etemp$42$1);var $1072$1=tempRet0;
 var $1073$0=$1072$0;
 var $1073=$1073$0;
 var $1074=(($1068+$1073)|0);
 var $1075=HEAP8[($1074)];
 var $1076$0=$j_3080_i_i$0;
 var $1076=$1076$0;
 var $1077=(($1071+$1076)|0);
 var $1078=HEAP8[($1077)];
 var $1079=$1078^$1075;
 HEAP8[($1077)]=$1079;
 var $$etemp$43$0=1;
 var $$etemp$43$1=0;
 var $1080$0=_i64Add($j_3080_i_i$0,$j_3080_i_i$1,$$etemp$43$0,$$etemp$43$1);var $1080$1=tempRet0;
 var $1081=(($1080$1|0) < ($i_085_i_i$1|0)) | (((($1080$1|0) == ($i_085_i_i$1|0) & ($1080$0>>>0) <  ($i_085_i_i$0>>>0))));
 if($1081){var $j_3080_i_i$1=$1080$1;var $j_3080_i_i$0=$1080$0;label=85;break;}else{var $1082=$1071;label=86;break;}
 case 86: 
 var $1082;
 var $1083=HEAP8[($1068)];
 var $1084$0=$i_085_i_i$0;
 var $1084=$1084$0;
 var $1085=(($1082+$1084)|0);
 HEAP8[($1085)]=$1083;
 var $$etemp$44$0=1;
 var $$etemp$44$1=0;
 var $1086$0=_i64Add($i_085_i_i$0,$i_085_i_i$1,$$etemp$44$0,$$etemp$44$1);var $1086$1=tempRet0;
 var $$etemp$45$0=4096;
 var $$etemp$45$1=0;
 var $1087=(($1086$1|0) < ($$etemp$45$1|0)) | (((($1086$1|0) == ($$etemp$45$1|0) & ($1086$0>>>0) <  ($$etemp$45$0>>>0))));
 if($1087){var $i_085_i_i$1=$1086$1;var $i_085_i_i$0=$1086$0;label=34;break;}else{label=87;break;}
 case 87: 
 var $1089=HEAP32[((14872)>>2)];
 var $1090=HEAP32[((428)>>2)];
 var $$etemp$46$0=4096;
 var $$etemp$46$1=0;
 var $1091=FUNCTION_TABLE[$1090]($1069,$1082,$$etemp$46$0,$$etemp$46$1,$1089);
 var $1092=($1091|0)==0;
 if($1092){label=88;break;}else{var $_0_i_i=3648;label=92;break;}
 case 88: 
 var $1094=HEAP32[((14904)>>2)];
 var $1095=HEAP32[((14832)>>2)];
 var $1096=HEAP32[((14872)>>2)];
 var $1097=HEAP32[((432)>>2)];
 var $$etemp$47$0=4096;
 var $$etemp$47$1=0;
 var $1098=FUNCTION_TABLE[$1097]($1094,$1095,$$etemp$47$0,$$etemp$47$1,$1096);
 var $1099=($1098|0)==0;
 if($1099){label=89;break;}else{var $_0_i_i=888;label=92;break;}
 case 89: 
 var $1101=HEAP32[((14904)>>2)];
 var $i_02_i48_i=0;var $j_03_i_i=0;label=90;break;
 case 90: 
 var $j_03_i_i;
 var $i_02_i48_i;
 var $1102=(($1101+$i_02_i48_i)|0);
 var $1103=HEAP8[($1102)];
 var $1104=($1103&255);
 var $1105=$1104>>>4;
 var $1106=((24+$1105)|0);
 var $1107=HEAP8[($1106)];
 var $1108=$j_03_i_i|1;
 var $1109=((14992+$j_03_i_i)|0);
 HEAP8[($1109)]=$1107;
 var $1110=HEAP8[($1102)];
 var $1111=($1110&255);
 var $1112=$1111&15;
 var $1113=((24+$1112)|0);
 var $1114=HEAP8[($1113)];
 var $1115=((($j_03_i_i)+(2))|0);
 var $1116=((14992+$1108)|0);
 HEAP8[($1116)]=$1114;
 var $1117=((($i_02_i48_i)+(1))|0);
 var $1118=($1117>>>0)<16;
 if($1118){var $i_02_i48_i=$1117;var $j_03_i_i=$1115;label=90;break;}else{label=91;break;}
 case 91: 
 HEAP8[(15024)]=0;
 var $_0_i_i=0;label=92;break;
 case 92: 
 var $_0_i_i;
 var $1119=HEAP32[((14880)>>2)];
 _free($1119);
 var $1120=HEAP32[((14808)>>2)];
 _free($1120);
 var $1121=HEAP32[((14848)>>2)];
 _free($1121);
 var $1122=HEAP32[((14888)>>2)];
 _free($1122);
 var $1123=HEAP32[((14816)>>2)];
 _free($1123);
 var $1124=HEAP32[((14856)>>2)];
 _free($1124);
 var $1125=($_0_i_i|0)==0;
 var $1126=HEAP8[(14992)];
 var $1127=(($1126<<24)>>24)==101;
 var $or_cond=$1125&$1127;
 if($or_cond){var $_027_i_i=14992;var $_08_i_i=2072;label=93;break;}else{label=103;break;}
 case 93: 
 var $_08_i_i;
 var $_027_i_i;
 var $1128=(($_027_i_i+1)|0);
 var $1129=(($_08_i_i+1)|0);
 var $1130=HEAP8[($1128)];
 var $1131=HEAP8[($1129)];
 var $1132=(($1130<<24)>>24)!=(($1131<<24)>>24);
 var $1133=(($1130<<24)>>24)==0;
 var $or_cond_i2_i=$1132|$1133;
 var $1134=(($1131<<24)>>24)==0;
 var $or_cond3_i3_i=$or_cond_i2_i|$1134;
 if($or_cond3_i3_i){label=94;break;}else{var $_027_i_i=$1128;var $_08_i_i=$1129;label=93;break;}
 case 94: 
 var $1135=(($1130<<24)>>24)==(($1131<<24)>>24);
 if($1135){label=95;break;}else{label=103;break;}
 case 95: 
 var $_b_i_i=HEAP8[(8)];
 if($_b_i_i){label=102;break;}else{var $device_0_i_i_i_i=120;var $1136=3536;label=96;break;}
 case 96: 
 var $1136;
 var $device_0_i_i_i_i;
 var $1137=_access($1136,4);
 var $1138=($1137|0)==0;
 if($1138){label=99;break;}else{label=97;break;}
 case 97: 
 var $1140=(($device_0_i_i_i_i+4)|0);
 var $1141=HEAP32[(($1140)>>2)];
 var $1142=($1141|0)==0;
 if($1142){label=98;break;}else{var $device_0_i_i_i_i=$1140;var $1136=$1141;label=96;break;}
 case 98: 
 HEAP32[((16)>>2)]=-1;
 label=100;break;
 case 99: 
 var $1143=HEAP32[(($device_0_i_i_i_i)>>2)];
 var $1144=_open($1143,0,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 1)|0,STACKTOP = (((STACKTOP)+7)&-8),(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=0,tempVarArgs)); STACKTOP=tempVarArgs;
 HEAP32[((16)>>2)]=$1144;
 var $1145=($1144|0)==-1;
 if($1145){label=100;break;}else{label=101;break;}
 case 100: 
 _abort();
 throw "Reached an unreachable!";
 case 101: 
 HEAP8[(8)]=1;
 label=102;break;
 case 102: 
 HEAP8[(376)]=1;
 label=103;break;
 case 103: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorI7ContactNS_9allocatorIS1_EEED1Ev($this){
 var label=0;


 var $1=(($this)|0);
 __ZNSt3__113__vector_baseI7ContactNS_9allocatorIS1_EEED2Ev($1);
 return;
}


function __ZNKSt3__16vectorI7ContactNS_9allocatorIS1_EEE4sizeEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(48))&-1);
 return $8;
}


function __Z14hexstr_to_dataNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($hexstr){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $byte=sp;
 var $1=$hexstr;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($hexstr+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=$11>>>1;
 var $13=HEAP32[((14744)>>2)];
 var $14=($13|0)==0;
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 _free($13);
 label=6;break;
 case 6: 
 var $16=($12|0)==0;
 var $_size_i=($16?1:$12);
 label=7;break;
 case 7: 
 var $18=_malloc($_size_i);
 var $19=($18|0)==0;
 if($19){label=8;break;}else{label=21;break;}
 case 8: 
 var $21=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=15;break;}else{label=9;break;}
 case 9: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 10: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=12;break;
 case 12: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $26=$lpad_phi_i$1;
 var $27=($26|0)<0;
 if($27){label=13;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=18;break;}
 case 13: 
 var $29=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($29) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=17;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=11;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $35$0 = ___cxa_find_matching_catch(-1, -1); var $35$1 = tempRet0;
 var $eh_lpad_body$1=$35$1;var $eh_lpad_body$0=$35$0;label=18;break;
 case 18: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $36=$eh_lpad_body$1;
 var $37=($36|0)<0;
 if($37){label=19;break;}else{label=20;break;}
 case 19: 
 var $39=$eh_lpad_body$0;
 ___cxa_call_unexpected($39);
 throw "Reached an unreachable!";
 case 20: 
 ___resumeException($eh_lpad_body$0)
 case 21: 
 HEAP32[((14744)>>2)]=$18;
 var $41=HEAP8[($1)];
 var $42=$41&1;
 var $43=(($42<<24)>>24)==0;
 if($43){label=23;break;}else{label=22;break;}
 case 22: 
 var $45=(($hexstr+8)|0);
 var $46=HEAP32[(($45)>>2)];
 var $50=$46;label=24;break;
 case 23: 
 var $48=$hexstr;
 var $49=(($48+1)|0);
 var $50=$49;label=24;break;
 case 24: 
 var $50;
 var $51=HEAP32[((_stderr)>>2)];
 var $storemerge=0;var $cstr_0=$50;var $53=$18;label=25;break;
 case 25: 
 var $53;
 var $cstr_0;
 var $storemerge;
 var $54=($storemerge|0)<($12|0);
 if($54){label=26;break;}else{label=29;break;}
 case 26: 
 var $56=_sscanf($cstr_0,2280,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$byte,tempVarArgs)); STACKTOP=tempVarArgs;
 var $57=($56|0)<1;
 if($57){label=27;break;}else{label=28;break;}
 case 27: 
 var $59=_fprintf($51,1904,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$cstr_0,tempVarArgs)); STACKTOP=tempVarArgs;
 label=28;break;
 case 28: 
 var $61=HEAP32[(($byte)>>2)];
 var $62=(($61)&255);
 var $63=HEAP32[((14744)>>2)];
 var $64=(($63+$storemerge)|0);
 HEAP8[($64)]=$62;
 var $65=(($cstr_0+2)|0);
 var $66=((($storemerge)+(1))|0);
 var $storemerge=$66;var $cstr_0=$65;var $53=$63;label=25;break;
 case 29: 
 STACKTOP=sp;return $53;
  default: assert(0, "bad label: " + label);
 }

}


function __Z12hexstr_to_idNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($hexstr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$hexstr;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=20;break;
 case 3: 
 var $9=(($hexstr+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($hexstr+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$1;
 HEAP8[($20)]=$19;
 var $21=$1;
 var $22=(($21+1)|0);
 var $__p_0_i_i_i=$22;label=19;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 label=8;break;
 case 8: 
 var $27=_malloc($_size_i);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=18;break;}
 case 9: 
 var $30=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=10;break;}
 case 10: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $35=$lpad_phi_i$1;
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=16;break;}
 case 14: 
 var $38=$lpad_phi_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $44=(($1+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($1)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($1+4)|0);
 HEAP32[(($47)>>2)]=$12;
 var $__p_0_i_i_i=$27;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i_i_i, $10, $12)|0);
 var $48=(($__p_0_i_i_i+$12)|0);
 HEAP8[($48)]=0;
 label=20;break;
 case 20: 
 var $49=(function() { try { __THREW__ = 0; return __Z14hexstr_to_dataNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=25;break; }
 case 21: 
 var $51=$1;
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=24;break;}else{label=22;break;}
 case 22: 
 var $56=(($1+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=23;break;}
 case 23: 
 _free($57);
 label=24;break;
 case 24: 
 STACKTOP=sp;return $49;
 case 25: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1); var $61$1 = tempRet0;
 var $62=$1;
 var $63=HEAP8[($62)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=28;break;}else{label=26;break;}
 case 26: 
 var $67=(($1+8)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=($68|0)==0;
 if($69){label=28;break;}else{label=27;break;}
 case 27: 
 _free($68);
 label=28;break;
 case 28: 
 ___resumeException($61$0)
  default: assert(0, "bad label: " + label);
 }

}


function __Z14data_to_hexstrPKhi($agg_result,$data,$inlen){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$inlen<<1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + $1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $storemerge=0;var $chex_0=$2;label=2;break;
 case 2: 
 var $chex_0;
 var $storemerge;
 var $4=($storemerge|0)<($inlen|0);
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 var $6=(($data+$storemerge)|0);
 var $7=HEAP8[($6)];
 var $8=($7&255);
 var $9=_sprintf($chex_0,1720,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$8,tempVarArgs)); STACKTOP=tempVarArgs;
 var $10=(($chex_0+2)|0);
 var $11=((($storemerge)+(1))|0);
 var $storemerge=$11;var $chex_0=$10;label=2;break;
 case 4: 
 var $13=($1>>>0)>4294967279;
 if($13){label=5;break;}else{label=6;break;}
 case 5: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 6: 
 var $16=($1>>>0)<11;
 if($16){label=7;break;}else{label=8;break;}
 case 7: 
 var $18=$inlen<<2;
 var $19=(($18)&255);
 var $20=$agg_result;
 HEAP8[($20)]=$19;
 var $21=$agg_result;
 var $22=(($21+1)|0);
 var $__p_0_i_i_i=$22;label=20;break;
 case 8: 
 var $23=((($1)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i_i=($25?1:$24);
 label=9;break;
 case 9: 
 var $27=_malloc($_size_i_i);
 var $28=($27|0)==0;
 if($28){label=10;break;}else{label=19;break;}
 case 10: 
 var $30=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=16;break;}else{label=11;break;}
 case 11: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 12: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=14;break;
 case 14: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $35=$lpad_phi_i_i$1;
 var $36=($35|0)<0;
 if($36){label=15;break;}else{label=17;break;}
 case 15: 
 var $38=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 16: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 17: 
 ___resumeException($lpad_phi_i_i$0)
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $44=(($agg_result+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($agg_result+4)|0);
 HEAP32[(($47)>>2)]=$1;
 var $__p_0_i_i_i=$27;label=20;break;
 case 20: 
 var $__p_0_i_i_i;
 assert($1 % 1 === 0);(_memcpy($__p_0_i_i_i, $2, $1)|0);
 var $48=(($__p_0_i_i_i+$1)|0);
 HEAP8[($48)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _friend_request($tox,$public_key,$data,$length,$0){
 var label=0;


 _emscripten_asm_const(992);
 return;
}


function _friend_message($tox,$fn,$msg,$length,$0){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=HEAP32[((14916)>>2)];
 var $4=HEAP32[((14912)>>2)];
 var $5=$3;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(48))&-1);
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $10=($storemerge_i>>>0)<($8>>>0);
 if($10){label=3;break;}else{label=6;break;}
 case 3: 
 var $12=(($4+((($storemerge_i)*(48))&-1))|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==($fn|0);
 if($14){label=4;break;}else{label=5;break;}
 case 4: 
 var $_pre=HEAP32[((_stderr)>>2)];
 var $storemerge1_i=$storemerge_i;var $21=$_pre;label=7;break;
 case 5: 
 var $17=((($storemerge_i)+(1))|0);
 var $storemerge_i=$17;label=2;break;
 case 6: 
 var $19=HEAP32[((_stderr)>>2)];
 var $20=_fprintf($19,2752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$fn,tempVarArgs)); STACKTOP=tempVarArgs;
 var $storemerge1_i=0;var $21=$19;label=7;break;
 case 7: 
 var $21;
 var $storemerge1_i;
 var $22=($length&65535);
 var $23=($length&65535)<11;
 if($23){label=8;break;}else{label=9;break;}
 case 8: 
 var $25=$22<<1;
 var $26=(($25)&255);
 var $27=$2;
 HEAP8[($27)]=$26;
 var $28=$2;
 var $29=(($28+1)|0);
 var $__p_0_i_i_i=$29;var $_pre_phi=$27;label=21;break;
 case 9: 
 var $30=((($22)+(16))|0);
 var $31=$30&131056;
 var $32=($31|0)==0;
 var $_size_i_i=($32?1:$31);
 label=10;break;
 case 10: 
 var $34=_malloc($_size_i_i);
 var $35=($34|0)==0;
 if($35){label=11;break;}else{label=20;break;}
 case 11: 
 var $37=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=17;break;}else{label=12;break;}
 case 12: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $42=$lpad_phi_i_i$1;
 var $43=($42|0)<0;
 if($43){label=16;break;}else{label=18;break;}
 case 16: 
 var $45=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($45);
 throw "Reached an unreachable!";
 case 17: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $51=(($2+8)|0);
 HEAP32[(($51)>>2)]=$34;
 var $52=$31|1;
 var $53=(($2)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=(($2+4)|0);
 HEAP32[(($54)>>2)]=$22;
 var $_pre3=$2;
 var $__p_0_i_i_i=$34;var $_pre_phi=$_pre3;label=21;break;
 case 21: 
 var $_pre_phi;
 var $__p_0_i_i_i;
 assert($22 % 1 === 0);(_memcpy($__p_0_i_i_i, $msg, $22)|0);
 var $55=(($__p_0_i_i_i+$22)|0);
 HEAP8[($55)]=0;
 var $56=HEAP8[($_pre_phi)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=23;break;}else{label=22;break;}
 case 22: 
 var $60=(($2+8)|0);
 var $61=HEAP32[(($60)>>2)];
 var $66=$61;label=24;break;
 case 23: 
 var $63=$2;
 var $64=(($63+1)|0);
 var $66=$64;label=24;break;
 case 24: 
 var $66;
 var $67=_fprintf($21,776,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$storemerge1_i,HEAP32[(((tempVarArgs)+(8))>>2)]=$66,tempVarArgs)); STACKTOP=tempVarArgs;
 var $68=HEAP8[($_pre_phi)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=27;break;}else{label=25;break;}
 case 25: 
 var $72=(($2+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=($73|0)==0;
 if($74){label=27;break;}else{label=26;break;}
 case 26: 
 _free($73);
 label=27;break;
 case 27: 
 _emscripten_asm_const(552);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _name_change($tox,$fn,$name,$length,$0){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=sp;
 var $3=HEAP32[((14916)>>2)];
 var $4=HEAP32[((14912)>>2)];
 var $5=$3;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(48))&-1);
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $10=($storemerge_i>>>0)<($8>>>0);
 if($10){label=3;break;}else{label=5;break;}
 case 3: 
 var $12=(($4+((($storemerge_i)*(48))&-1))|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=($13|0)==($fn|0);
 if($14){var $storemerge1_i=$storemerge_i;var $20=$4;label=6;break;}else{label=4;break;}
 case 4: 
 var $16=((($storemerge_i)+(1))|0);
 var $storemerge_i=$16;label=2;break;
 case 5: 
 var $18=HEAP32[((_stderr)>>2)];
 var $19=_fprintf($18,2752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$fn,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_pre=HEAP32[((14912)>>2)];
 var $storemerge1_i=0;var $20=$_pre;label=6;break;
 case 6: 
 var $20;
 var $storemerge1_i;
 var $21=(($20+((($storemerge1_i)*(48))&-1)+16)|0);
 var $22=($length&65535);
 var $23=($length&65535)<11;
 if($23){label=7;break;}else{label=8;break;}
 case 7: 
 var $25=$22<<1;
 var $26=(($25)&255);
 var $27=$2;
 HEAP8[($27)]=$26;
 var $28=$2;
 var $29=(($28+1)|0);
 var $__p_0_i_i_i=$29;label=20;break;
 case 8: 
 var $30=((($22)+(16))|0);
 var $31=$30&131056;
 var $32=($31|0)==0;
 var $_size_i_i=($32?1:$31);
 label=9;break;
 case 9: 
 var $34=_malloc($_size_i_i);
 var $35=($34|0)==0;
 if($35){label=10;break;}else{label=19;break;}
 case 10: 
 var $37=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=16;break;}else{label=11;break;}
 case 11: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 12: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=14;break;
 case 14: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $42=$lpad_phi_i_i$1;
 var $43=($42|0)<0;
 if($43){label=15;break;}else{label=17;break;}
 case 15: 
 var $45=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($45);
 throw "Reached an unreachable!";
 case 16: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 17: 
 ___resumeException($lpad_phi_i_i$0)
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $51=(($2+8)|0);
 HEAP32[(($51)>>2)]=$34;
 var $52=$31|1;
 var $53=(($2)|0);
 HEAP32[(($53)>>2)]=$52;
 var $54=(($2+4)|0);
 HEAP32[(($54)>>2)]=$22;
 var $__p_0_i_i_i=$34;label=20;break;
 case 20: 
 var $__p_0_i_i_i;
 assert($22 % 1 === 0);(_memcpy($__p_0_i_i_i, $name, $22)|0);
 var $55=(($__p_0_i_i_i+$22)|0);
 HEAP8[($55)]=0;
 var $56=$21;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=22;break;}else{label=21;break;}
 case 21: 
 var $61=(($20+((($storemerge1_i)*(48))&-1)+24)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP8[($62)]=0;
 var $63=(($20+((($storemerge1_i)*(48))&-1)+20)|0);
 HEAP32[(($63)>>2)]=0;
 label=23;break;
 case 22: 
 var $65=$21;
 var $66=(($65+1)|0);
 HEAP8[($66)]=0;
 HEAP8[($56)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 var $69=$68$0;
 ___clang_call_terminate($69);
 throw "Reached an unreachable!";
 case 25: 
 var $70=$2;
 assert(12 % 1 === 0);HEAP32[(($56)>>2)]=HEAP32[(($70)>>2)];HEAP32[((($56)+(4))>>2)]=HEAP32[((($70)+(4))>>2)];HEAP32[((($56)+(8))>>2)]=HEAP32[((($70)+(8))>>2)];
 HEAP32[(($70)>>2)]=0; HEAP32[((($70)+(4))>>2)]=0; HEAP32[((($70)+(8))>>2)]=0;
 _emscripten_asm_const(1312);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _status_message($tox,$fn,$msg,$length,$d){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=HEAP32[((14916)>>2)];
 var $3=HEAP32[((14912)>>2)];
 var $4=$2;
 var $5=$3;
 var $6=((($4)-($5))|0);
 var $7=(((($6|0))/(48))&-1);
 var $storemerge_i=0;label=2;break;
 case 2: 
 var $storemerge_i;
 var $9=($storemerge_i>>>0)<($7>>>0);
 if($9){label=3;break;}else{label=5;break;}
 case 3: 
 var $11=(($3+((($storemerge_i)*(48))&-1))|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==($fn|0);
 if($13){var $storemerge1_i=$storemerge_i;var $19=$3;label=6;break;}else{label=4;break;}
 case 4: 
 var $15=((($storemerge_i)+(1))|0);
 var $storemerge_i=$15;label=2;break;
 case 5: 
 var $17=HEAP32[((_stderr)>>2)];
 var $18=_fprintf($17,2752,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$fn,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_pre=HEAP32[((14912)>>2)];
 var $storemerge1_i=0;var $19=$_pre;label=6;break;
 case 6: 
 var $19;
 var $storemerge1_i;
 var $20=(($19+((($storemerge1_i)*(48))&-1)+28)|0);
 var $21=($length&65535);
 var $22=($length&65535)<11;
 if($22){label=7;break;}else{label=8;break;}
 case 7: 
 var $24=$21<<1;
 var $25=(($24)&255);
 var $26=$1;
 HEAP8[($26)]=$25;
 var $27=$1;
 var $28=(($27+1)|0);
 var $__p_0_i_i_i=$28;label=20;break;
 case 8: 
 var $29=((($21)+(16))|0);
 var $30=$29&131056;
 var $31=($30|0)==0;
 var $_size_i_i=($31?1:$30);
 label=9;break;
 case 9: 
 var $33=_malloc($_size_i_i);
 var $34=($33|0)==0;
 if($34){label=10;break;}else{label=19;break;}
 case 10: 
 var $36=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $37=($36|0)==0;
 if($37){label=16;break;}else{label=11;break;}
 case 11: 
 var $39=$36;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$39]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 12: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=14;break;
 case 14: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $41=$lpad_phi_i_i$1;
 var $42=($41|0)<0;
 if($42){label=15;break;}else{label=17;break;}
 case 15: 
 var $44=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($44);
 throw "Reached an unreachable!";
 case 16: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 17: 
 ___resumeException($lpad_phi_i_i$0)
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $50=(($1+8)|0);
 HEAP32[(($50)>>2)]=$33;
 var $51=$30|1;
 var $52=(($1)|0);
 HEAP32[(($52)>>2)]=$51;
 var $53=(($1+4)|0);
 HEAP32[(($53)>>2)]=$21;
 var $__p_0_i_i_i=$33;label=20;break;
 case 20: 
 var $__p_0_i_i_i;
 assert($21 % 1 === 0);(_memcpy($__p_0_i_i_i, $msg, $21)|0);
 var $54=(($__p_0_i_i_i+$21)|0);
 HEAP8[($54)]=0;
 var $55=$20;
 var $56=HEAP8[($55)];
 var $57=$56&1;
 var $58=(($57<<24)>>24)==0;
 if($58){label=22;break;}else{label=21;break;}
 case 21: 
 var $60=(($19+((($storemerge1_i)*(48))&-1)+36)|0);
 var $61=HEAP32[(($60)>>2)];
 HEAP8[($61)]=0;
 var $62=(($19+((($storemerge1_i)*(48))&-1)+32)|0);
 HEAP32[(($62)>>2)]=0;
 label=23;break;
 case 22: 
 var $64=$20;
 var $65=(($64+1)|0);
 HEAP8[($65)]=0;
 HEAP8[($55)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $67$0 = ___cxa_find_matching_catch(-1, -1,0); var $67$1 = tempRet0;
 var $68=$67$0;
 ___clang_call_terminate($68);
 throw "Reached an unreachable!";
 case 25: 
 var $69=$1;
 assert(12 % 1 === 0);HEAP32[(($55)>>2)]=HEAP32[(($69)>>2)];HEAP32[((($55)+(4))>>2)]=HEAP32[((($69)+(4))>>2)];HEAP32[((($55)+(8))>>2)]=HEAP32[((($69)+(8))>>2)];
 HEAP32[(($69)>>2)]=0; HEAP32[((($69)+(4))>>2)]=0; HEAP32[((($69)+(8))>>2)]=0;
 _emscripten_asm_const(1312);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z6updatev(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+76240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ip_i1_i_i_i_sroa_1=sp;
 var $ip_i_i60_i_i_sroa_1=(sp)+(8);
 var $ip_i_i60_i_i_sroa_4=(sp)+(16);
 var $data_i61_i_i=(sp)+(32);
 var $ip_port_i62_i_i=(sp)+(72);
 var $zero_i_i21_i_i=(sp)+(96);
 var $secret_nonce_i_i_i=(sp)+(104);
 var $num_nodes_i_i3_i_i_i=(sp)+(128);
 var $plain_i_i_i_i=(sp)+(136);
 var $packet_i_i_i_i=(sp)+(344);
 var $dest_node_i_i1_i_i_i=(sp)+(624);
 var $num_nodes_i_i_i_i_i=(sp)+(680);
 var $plain_i_i_i_i_i_i=(sp)+(688);
 var $sendback_i_i_i_i_i=(sp)+(760);
 var $path_i_i_i_i_i=(sp)+(872);
 var $dest_node_i_i_i_i_i=(sp)+(1136);
 var $1=(sp)+(1192);
 var $a_i3_i_i_i_i=(sp)+(1216);
 var $a_i2_i_i_i_i=(sp)+(1224);
 var $a_i1_i_i_i_i=(sp)+(1232);
 var $a_i_i_i_i_i=(sp)+(1240);
 var $packet_i_i_i_i_i_i_i=(sp)+(1248);
 var $buffer_i_i_i_i_i_i=(sp)+(2280);
 var $2=(sp)+(3304);
 var $temp_plain_i_i_i_i_i_i_i=(sp)+(3328);
 var $temp_encrypted_i_i_i_i_i_i_i=(sp)+(4384);
 var $k_i_i_i_i_i_i=(sp)+(5424);
 var $temp_i_i_i4_i_i=(sp)+(5456);
 var $public_key_i_i_i_i=(sp)+(5512);
 var $session_key_i_i_i_i=(sp)+(5544);
 var $zero_i_i_i_i=(sp)+(5576);
 var $zero3_i_i_i_i=(sp)+(5584);
 var $num_nodes_i_i_i_i_i_i_i=(sp)+(5592);
 var $id_i_i_i_i_i=(sp)+(5600);
 var $nodes_list_i_i_i_i_i=(sp)+(5632);
 var $nonce_i_i_i_i_i=(sp)+(6080);
 var $temp_i_i_i_i_i=(sp)+(6104);
 var $packet_i_i_i_i_i_i=(sp)+(7128);
 var $data_i_i_i_i_i_i_sroa_1=(sp)+(8152);
 var $data_i_i1_i_i_i=(sp)+(8536);
 var $rand_node_i_i_i_i=(sp)+(8624);
 var $to_test_i_i_i_i=(sp)+(8680);
 var $pinging_i_i_i_i_i=(sp)+(8736);
 var $pinging1_i_i_i_i_i=(sp)+(8760);
 var $pinging3_i_i_i_i_i=(sp)+(8784);
 var $ip5_i_i_i_i_sroa_1=(sp)+(8808);
 var $ip1_i_i_i_i=(sp)+(8832);
 var $zero_i_i_i_i_i_sroa_1=(sp)+(8856);
 var $numbers_i_i_i_i_i=(sp)+(8880);
 var $data_i_i_i_i_i=(sp)+(8896);
 var $packet_i_i_i_i_i=(sp)+(8912);
 var $ip_list_i_i_i_i=(sp)+(9936);
 var $ip_i_i_i_i_sroa_1=(sp)+(10128);
 var $port_list_i_i_i_i=(sp)+(10152);
 var $addr_i_i_i_i=(sp)+(10168);
 var $addrlen_i_i_i_i=(sp)+(10296);
 var $ip_port_i_i_i=(sp)+(10304);
 var $data_i_i_i=(sp)+(10328);
 var $a_i_i_i_i=(sp)+(75840);
 var $readfds_i_i_i=(sp)+(75848);
 var $writefds_i_i_i=(sp)+(75976);
 var $exceptfds_i_i_i=(sp)+(76104);
 var $timeout_i_i_i=(sp)+(76232);
 var $3=HEAP32[((13568)>>2)];
 var $4=HEAP32[((13560)>>2)];
 var $5=(($3)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($3+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){var $total_0_lcssa_i_i_i=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $14=(($10+4)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15;
 var $total_01_i_i_i=0;var $i_02_i_i_i=0;label=3;break;
 case 3: 
 var $i_02_i_i_i;
 var $total_01_i_i_i;
 var $18=(($16+((($i_02_i_i_i)*(1160))&-1)+24)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24)==0;
 if($20){var $total_1_i_i_i=$total_01_i_i_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $22=(($16+((($i_02_i_i_i)*(1160))&-1)+112)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($16+((($i_02_i_i_i)*(1160))&-1)+116)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=((($23)+($total_01_i_i_i))|0);
 var $27=((($26)-($25))|0);
 var $total_1_i_i_i=$27;label=5;break;
 case 5: 
 var $total_1_i_i_i;
 var $29=((($i_02_i_i_i)+(1))|0);
 var $30=($29>>>0)<($12>>>0);
 if($30){var $total_01_i_i_i=$total_1_i_i_i;var $i_02_i_i_i=$29;label=3;break;}else{var $total_0_lcssa_i_i_i=$total_1_i_i_i;label=6;break;}
 case 6: 
 var $total_0_lcssa_i_i_i;
 var $31=($4|0)==0;
 if($31){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($6+2052)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$4;
 HEAP32[(($34)>>2)]=$33;
 var $35=(($4+4)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=$total_0_lcssa_i_i_i;
 var $37=(($4+8)|0);
 var $38=$37;
 HEAP16[(($38)>>1)]=0;
 var $39=(($6+2056)|0);
 var $ld$0$0=(($39)|0);
 var $40$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($39+4)|0);
 var $40$1=HEAP32[(($ld$1$1)>>2)];
 var $41=(($4+16)|0);
 var $42=$41;
 var $st$2$0=(($42)|0);
 HEAP32[(($st$2$0)>>2)]=$40$0;
 var $st$3$1=(($42+4)|0);
 HEAP32[(($st$3$1)>>2)]=$40$1;
 var $43=((1)&255);
 var $44=$timeout_i_i_i;
 var $$etemp$4$0=8;
 var $$etemp$4$1=0;

 var $45=$readfds_i_i_i;
 var $46=$writefds_i_i_i;
 var $47=$exceptfds_i_i_i;
 var $62=$43;var $61=$4;var $60=$44;var $59=$45;var $58=$46;var $57=$47;label=9;break;
 case 8: 
 var $49=HEAP32[((_stderr)>>2)];
 var $50=_fwrite(4536,24,1,$49);
 var $_pre=HEAP32[((13560)>>2)];
 var $51=$timeout_i_i_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $52=$readfds_i_i_i;
 var $53=$writefds_i_i_i;
 var $54=$exceptfds_i_i_i;
 var $55=($_pre|0)==0;
 if($55){var $_0_i_i_i1=0;var $112=0;var $111=$51;label=15;break;}else{var $62=0;var $61=$_pre;var $60=$51;var $59=$52;var $58=$53;var $57=$54;label=9;break;}
 case 9: 
 var $57;
 var $58;
 var $59;
 var $60;
 var $61;
 var $62;
 var $63=(($61+16)|0);
 var $64=$63;
 var $ld$6$0=(($64)|0);
 var $65$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($64+4)|0);
 var $65$1=HEAP32[(($ld$7$1)>>2)];
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $66=(($65$0|0) == ($$etemp$8$0|0)) & (($65$1|0) == ($$etemp$8$1|0));
 if($66){var $writefds_add_0_i_i_i=1;label=11;break;}else{label=10;break;}
 case 10: 
 var $68=$a_i_i_i_i;
 var $$etemp$9$0=8;
 var $$etemp$9$1=0;

 var $69=_gettimeofday($a_i_i_i_i,0);
 var $70=(($a_i_i_i_i)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72$0=$71;
 var $72$1=((((($71|0)<0))|0)?-1:0);
 var $$etemp$10$0=1000000;
 var $$etemp$10$1=0;
 var $73$0=___muldi3($72$0,$72$1,$$etemp$10$0,$$etemp$10$1);var $73$1=tempRet0;
 var $74=(($a_i_i_i_i+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76$0=$75;
 var $76$1=((((($75|0)<0))|0)?-1:0);
 var $77$0=_i64Add($73$0,$73$1,$76$0,$76$1);var $77$1=tempRet0;
 var $$etemp$11$0=8;
 var $$etemp$11$1=0;

 var $ld$12$0=(($64)|0);
 var $78$0=HEAP32[(($ld$12$0)>>2)];
 var $ld$13$1=(($64+4)|0);
 var $78$1=HEAP32[(($ld$13$1)>>2)];
 var $79$0=_i64Subtract($77$0,$77$1,$78$0,$78$1);var $79$1=tempRet0;
 var $$etemp$14$0=249999;
 var $$etemp$14$1=0;
 var $phitmp_i_i_i=(($79$1>>>0) > ($$etemp$14$1>>>0)) | (((($79$1>>>0) == ($$etemp$14$1>>>0) & ($79$0>>>0) >  ($$etemp$14$0>>>0))));
 var $writefds_add_0_i_i_i=$phitmp_i_i_i;label=11;break;
 case 11: 
 var $writefds_add_0_i_i_i;
 var $80=$61;
 var $81=HEAP32[(($80)>>2)];
 var $$etemp$15$0=128;
 var $$etemp$15$1=0;

 _memset($59, 0, 128)|0;
 var $82=((($81)+(1))|0);
 var $83=$81&31;
 var $84=1<<$83;
 var $85=$81>>>5;
 var $86=(($readfds_i_i_i+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$84|$87;
 HEAP32[(($86)>>2)]=$88;
 var $$etemp$16$0=128;
 var $$etemp$16$1=0;

 _memset($58, 0, 128)|0;
 if($writefds_add_0_i_i_i){label=13;break;}else{label=12;break;}
 case 12: 
 var $90=(($writefds_i_i_i+($85<<2))|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=$84|$91;
 HEAP32[(($90)>>2)]=$92;
 label=13;break;
 case 13: 
 var $$etemp$17$0=128;
 var $$etemp$17$1=0;

 _memset($57, 0, 128)|0;
 var $94=(($exceptfds_i_i_i+($85<<2))|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=$84|$95;
 HEAP32[(($94)>>2)]=$96;
 var $97=(($timeout_i_i_i)|0);
 HEAP32[(($97)>>2)]=0;
 var $98=(($timeout_i_i_i+4)|0);
 HEAP32[(($98)>>2)]=100000;
 var $99=_select($82,$readfds_i_i_i,$writefds_i_i_i,0,$timeout_i_i_i);
 var $100=HEAP32[(($80)>>2)];
 var $101=$100>>>5;
 var $102=(($writefds_i_i_i+($101<<2))|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=$100&31;
 var $105=1<<$104;
 var $106=$105&$103;
 var $107=($106|0)==0;
 if($107){var $_0_i_i_i1=1;var $112=$62;var $111=$60;label=15;break;}else{label=14;break;}
 case 14: 
 var $109=(($61+8)|0);
 var $110=$109;
 HEAP16[(($110)>>1)]=1;
 var $_0_i_i_i1=1;var $112=$62;var $111=$60;label=15;break;
 case 15: 
 var $111;
 var $112;
 var $_0_i_i_i1;
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $113=$112&$_0_i_i_i1;
 var $114=(($113<<24)>>24)==0;
 if($114){label=16;break;}else{label=17;break;}
 case 16: 
 var $116=HEAP32[((_stderr)>>2)];
 var $117=_fwrite(4312,24,1,$116);
 label=17;break;
 case 17: 
 var $118=HEAP32[((13568)>>2)];
 var $119=HEAP32[((13560)>>2)];
 var $120=(($118)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==0;
 if($122){var $_0_i_i_i2=0;label=20;break;}else{label=18;break;}
 case 18: 
 var $124=(($119+8)|0);
 var $125=$124;
 var $126=HEAP16[(($125)>>1)];
 var $127=(($126<<16)>>16)==0;
 if($127){var $_0_i_i_i2=1;label=20;break;}else{label=19;break;}
 case 19: 
 var $129=(($121+2056)|0);
 var $$etemp$19$0=0;
 var $$etemp$19$1=0;
 var $st$20$0=(($129)|0);
 HEAP32[(($st$20$0)>>2)]=$$etemp$19$0;
 var $st$21$1=(($129+4)|0);
 HEAP32[(($st$21$1)>>2)]=$$etemp$19$1;
 var $_0_i_i_i2=1;label=20;break;
 case 20: 
 var $_0_i_i_i2;
 var $130=($113&255);
 var $131=$130&$_0_i_i_i2;
 var $132=($131|0)==0;
 if($132){label=21;break;}else{var $137=$118;label=22;break;}
 case 21: 
 var $134=HEAP32[((_stderr)>>2)];
 var $135=_fwrite(3968,24,1,$134);
 var $_pre24=HEAP32[((13568)>>2)];
 var $137=$_pre24;label=22;break;
 case 22: 
 var $137;
 var $138=_time(0);
 var $139$0=$138;
 var $139$1=((((($138|0)<0))|0)?-1:0);
 var $st$22$0=13552;
 HEAP32[(($st$22$0)>>2)]=$139$0;
 var $st$23$1=13556;
 HEAP32[(($st$23$1)>>2)]=$139$1;
 var $140=(($137)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($ip_port_i_i_i)|0);
 var $$etemp$24$0=24;
 var $$etemp$24$1=0;

 var $143=_time(0);
 var $144$0=$143;
 var $144$1=((((($143|0)<0))|0)?-1:0);
 var $st$25$0=13552;
 HEAP32[(($st$25$0)>>2)]=$144$0;
 var $st$26$1=13556;
 HEAP32[(($st$26$1)>>2)]=$144$1;
 var $145=(($data_i_i_i)|0);
 var $$etemp$27$0=65507;
 var $$etemp$27$1=0;

 var $146=(($141+2052)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=$addrlen_i_i_i_i;
 var $$etemp$28$0=4;
 var $$etemp$28$1=0;

 _memset($142, 0, 24)|0;
 var $149=$addr_i_i_i_i;
 var $$etemp$29$0=128;
 var $$etemp$29$1=0;

 HEAP32[(($addrlen_i_i_i_i)>>2)]=128;
 var $150=$addr_i_i_i_i;
 var $151=_recvfrom($147,$145,65507,0,$150,$addrlen_i_i_i_i);
 var $152=($151|0)<1;
 if($152){label=37;break;}else{label=23;break;}
 case 23: 
 var $153=(($addr_i_i_i_i)|0);
 var $154=$addr_i_i_i_i;
 var $155=(($ip_port_i_i_i+4)|0);
 var $156=(($addr_i_i_i_i+4)|0);
 var $157=$155;
 var $158=(($154+2)|0);
 var $159=(($ip_port_i_i_i+20)|0);
 var $160=$addr_i_i_i_i;
 var $161=$155;
 var $162=(($addr_i_i_i_i+8)|0);
 var $163=(($160+2)|0);
 var $164=(($157+4)|0);
 var $165=(($ip_port_i_i_i+12)|0);
 var $166=$165;
 var $167=(($161+9)|0);
 var $168=(($161+10)|0);
 var $169=(($161+11)|0);
 var $170=$155;
 var $171=(($170+12)|0);
 var $173=$151;label=24;break;
 case 24: 
 var $173;
 var $174=HEAP16[(($153)>>1)];
 if((($174<<16)>>16)==2){ label=25;break;}else if((($174<<16)>>16)==10){ label=26;break;}else{label=37;break;}
 case 25: 
 HEAP8[($142)]=2;
 var $176=HEAP32[(($156)>>2)];
 tempBigInt=$176;HEAP8[($157)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($157)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($157)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($157)+(3))|0)]=tempBigInt&0xff;
 var $177=HEAP16[(($158)>>1)];
 tempBigInt=$177;HEAP8[($159)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(1))|0)]=tempBigInt&0xff;
 label=33;break;
 case 26: 
 HEAP8[($142)]=10;
 assert(16 % 1 === 0);(_memcpy($161, $162, 16)|0);
 var $179=HEAP16[(($163)>>1)];
 tempBigInt=$179;HEAP8[($159)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($159)+(1))|0)]=tempBigInt&0xff;
 var $180=HEAP32[(($157)>>2)];
 var $181=($180|0)==0;
 if($181){label=27;break;}else{label=33;break;}
 case 27: 
 var $183=HEAP32[(($164)>>2)];
 var $184=($183|0)==0;
 if($184){label=28;break;}else{label=33;break;}
 case 28: 
 var $186=HEAP8[($166)];
 var $187=(($186<<24)>>24)==0;
 if($187){label=29;break;}else{label=33;break;}
 case 29: 
 var $189=HEAP8[($167)];
 var $190=(($189<<24)>>24)==0;
 if($190){label=30;break;}else{label=33;break;}
 case 30: 
 var $192=HEAP8[($168)];
 var $193=(($192<<24)>>24)==-1;
 if($193){label=31;break;}else{label=33;break;}
 case 31: 
 var $195=HEAP8[($169)];
 var $196=(($195<<24)>>24)==-1;
 if($196){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP8[($142)]=2;
 var $198=((((HEAPU8[($171)])|(HEAPU8[((($171)+(1))|0)]<<8)|(HEAPU8[((($171)+(2))|0)]<<16)|(HEAPU8[((($171)+(3))|0)]<<24))|0));
 tempBigInt=$198;HEAP8[($157)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($157)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($157)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($157)+(3))|0)]=tempBigInt&0xff;
 label=33;break;
 case 33: 
 var $$etemp$30$0=128;
 var $$etemp$30$1=0;

 var $$etemp$31$0=4;
 var $$etemp$31$1=0;

 var $200=($173|0)==0;
 if($200){label=36;break;}else{label=34;break;}
 case 34: 
 var $202=HEAP8[($145)];
 var $203=($202&255);
 var $204=(($141+($203<<3))|0);
 var $205=HEAP32[(($204)>>2)];
 var $206=($205|0)==0;
 if($206){label=36;break;}else{label=35;break;}
 case 35: 
 var $208=(($141+($203<<3)+4)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=FUNCTION_TABLE[$205]($209,$ip_port_i_i_i,$145,$173);
 label=36;break;
 case 36: 
 var $211=HEAP32[(($146)>>2)];
 var $$etemp$32$0=4;
 var $$etemp$32$1=0;

 _memset($142, 0, 24)|0;
 var $$etemp$33$0=128;
 var $$etemp$33$1=0;

 HEAP32[(($addrlen_i_i_i_i)>>2)]=128;
 var $212=_recvfrom($211,$145,65507,0,$150,$addrlen_i_i_i_i);
 var $213=($212|0)<1;
 if($213){label=37;break;}else{var $173=$212;label=24;break;}
 case 37: 
 var $$etemp$34$0=128;
 var $$etemp$34$1=0;

 var $$etemp$35$0=4;
 var $$etemp$35$1=0;

 var $$etemp$36$0=65507;
 var $$etemp$36$1=0;

 var $$etemp$37$0=24;
 var $$etemp$37$1=0;

 var $214=(($137+8)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=_time(0);
 var $217$0=$216;
 var $217$1=((((($216|0)<0))|0)?-1:0);
 var $st$38$0=13552;
 HEAP32[(($st$38$0)>>2)]=$217$0;
 var $st$39$1=13556;
 HEAP32[(($st$39$1)>>2)]=$217$1;
 var $218=(($215+178824)|0);
 var $ld$40$0=(($218)|0);
 var $219$0=HEAP32[(($ld$40$0)>>2)];
 var $ld$41$1=(($218+4)|0);
 var $219$1=HEAP32[(($ld$41$1)>>2)];
 var $220=(($219$0|0) == ($217$0|0)) & (($219$1|0) == ($217$1|0));
 if($220){label=128;break;}else{label=38;break;}
 case 38: 
 var $222=(($215+14856)|0);
 var $223=(($215+14900)|0);
 var $224=(($215+8)|0);
 var $225=(($215+14864)|0);
 var $226=_do_ping_and_sendnode_requests($215,$222,$223,$224,32,$225);
 var $227=(($226<<24)>>24)==0;
 if($227){label=39;break;}else{label=45;break;}
 case 39: 
 var $ld$42$0=13552;
 var $229$0=HEAP32[(($ld$42$0)>>2)];
 var $ld$43$1=13556;
 var $229$1=HEAP32[(($ld$43$1)>>2)];
 var $$etemp$44$0=-122;
 var $$etemp$44$1=-1;
 var $230$0=_i64Add($229$0,$229$1,$$etemp$44$0,$$etemp$44$1);var $230$1=tempRet0;
 var $i_03_i_i_i_i=0;label=40;break;
 case 40: 
 var $i_03_i_i_i_i;
 var $232=(($215+8+((($i_03_i_i_i_i)*(464))&-1)+56)|0);
 var $ld$45$0=(($232)|0);
 var $233$0=HEAP32[(($ld$45$0)>>2)];
 var $ld$46$1=(($232+4)|0);
 var $233$1=HEAP32[(($ld$46$1)>>2)];
 var $$etemp$47$0=0;
 var $$etemp$47$1=0;
 var $234=(($233$0|0) == ($$etemp$47$0|0)) & (($233$1|0) == ($$etemp$47$1|0));
 if($234){label=42;break;}else{label=41;break;}
 case 41: 
 var $st$48$0=(($232)|0);
 HEAP32[(($st$48$0)>>2)]=$230$0;
 var $st$49$1=(($232+4)|0);
 HEAP32[(($st$49$1)>>2)]=$230$1;
 label=42;break;
 case 42: 
 var $237=(($215+8+((($i_03_i_i_i_i)*(464))&-1)+272)|0);
 var $ld$50$0=(($237)|0);
 var $238$0=HEAP32[(($ld$50$0)>>2)];
 var $ld$51$1=(($237+4)|0);
 var $238$1=HEAP32[(($ld$51$1)>>2)];
 var $$etemp$52$0=0;
 var $$etemp$52$1=0;
 var $239=(($238$0|0) == ($$etemp$52$0|0)) & (($238$1|0) == ($$etemp$52$1|0));
 if($239){label=44;break;}else{label=43;break;}
 case 43: 
 var $st$53$0=(($237)|0);
 HEAP32[(($st$53$0)>>2)]=$230$0;
 var $st$54$1=(($237+4)|0);
 HEAP32[(($st$54$1)>>2)]=$230$1;
 label=44;break;
 case 44: 
 var $242=((($i_03_i_i_i_i)+(1))|0);
 var $243=($242>>>0)<32;
 if($243){var $i_03_i_i_i_i=$242;label=40;break;}else{label=45;break;}
 case 45: 
 var $244=(($215+14968)|0);
 var $245=HEAP16[(($244)>>1)];
 var $246=(($245<<16)>>16)==0;
 if($246){var $259=1;label=49;break;}else{label=46;break;}
 case 46: 
 var $247=(($215+14964)|0);
 var $i_01_i_i_i_i=0;label=47;break;
 case 47: 
 var $i_01_i_i_i_i;
 var $249=HEAP32[(($247)>>2)];
 var $250=(($249+((($i_01_i_i_i_i)*(3808))&-1)+3744)|0);
 var $251=(($249+((($i_01_i_i_i_i)*(3808))&-1))|0);
 var $252=(($249+((($i_01_i_i_i_i)*(3808))&-1)+32)|0);
 var $253=(($249+((($i_01_i_i_i_i)*(3808))&-1)+3752)|0);
 var $254=_do_ping_and_sendnode_requests($215,$250,$251,$252,8,$253);
 var $255=((($i_01_i_i_i_i)+(1))|0);
 var $256=HEAP16[(($244)>>1)];
 var $257=($256&65535);
 var $258=($255>>>0)<($257>>>0);
 if($258){var $i_01_i_i_i_i=$255;label=47;break;}else{label=48;break;}
 case 48: 
 var $phitmp47=(($256<<16)>>16)==0;
 var $259=$phitmp47;label=49;break;
 case 49: 
 var $259;
 var $260=(($ip5_i_i_i_i_sroa_1)|0);
 var $$etemp$55$0=19;
 var $$etemp$55$1=0;

 var $261=(($ip1_i_i_i_i)|0);
 var $$etemp$56$0=20;
 var $$etemp$56$1=0;

 var $262=(($ip_i_i_i_i_sroa_1)|0);
 var $$etemp$57$0=19;
 var $$etemp$57$1=0;

 var $263=$port_list_i_i_i_i;
 var $$etemp$58$0=16;
 var $$etemp$58$1=0;

 var $ld$59$0=13552;
 var $264$0=HEAP32[(($ld$59$0)>>2)];
 var $ld$60$1=13556;
 var $264$1=HEAP32[(($ld$60$1)>>2)];
 if($259){label=50;break;}else{label=51;break;}
 case 50: 
 var $_pre_i2_i_i=(($215+178816)|0);
 var $_pre_phi_i_i_i=$_pre_i2_i_i;var $460$1=$264$1;var $460$0=$264$0;label=97;break;
 case 51: 
 var $265=(($ip_list_i_i_i_i)|0);
 var $266=(($ip_list_i_i_i_i)|0);
 var $267=(($215+14964)|0);
 var $268=(($data_i_i_i_i_i)|0);
 var $269=(($packet_i_i_i_i_i)|0);
 var $270=(($data_i_i_i_i_i+1)|0);
 var $271=$270;
 var $272=(($215+14932)|0);
 var $273=$numbers_i_i_i_i_i;
 var $274=(($port_list_i_i_i_i)|0);
 var $275=(($pinging_i_i_i_i_i)|0);
 var $276=(($pinging1_i_i_i_i_i)|0);
 var $277=(($pinging3_i_i_i_i_i)|0);
 var $278=(($pinging_i_i_i_i_i+20)|0);
 var $279=(($215+178816)|0);
 var $280=(($pinging3_i_i_i_i_i+20)|0);
 var $281=(($pinging1_i_i_i_i_i+20)|0);
 var $282=(($nonce_i_i_i_i_i)|0);
 var $283=(($temp_i_i_i_i_i)|0);
 var $284=(($temp_i_i_i_i_i+1)|0);
 var $285=(($packet_i_i_i_i_i+89)|0);
 var $286=(($packet_i_i_i_i_i+1)|0);
 var $287=(($packet_i_i_i_i_i+33)|0);
 var $288=(($packet_i_i_i_i_i+65)|0);
 var $289=(($zero_i_i_i_i_i_sroa_1)|0);
 var $290=(($ip1_i_i_i_i+1)|0);
 var $291=(($pinging_i_i_i_i_i+1)|0);
 var $292=(($pinging3_i_i_i_i_i+1)|0);
 var $293=(($pinging1_i_i_i_i_i+1)|0);
 var $i_011_i_i_i_i=0;label=52;break;
 case 52: 
 var $i_011_i_i_i_i;
 var $$etemp$61$0=192;
 var $$etemp$61$1=0;

 var $295=(($i_011_i_i_i_i)&65535);
 var $296=_friend_iplist($215,$266,$295);
 var $297=($296|0)<4;
 if($297){label=95;break;}else{label=53;break;}
 case 53: 
 var $299=HEAP32[(($267)>>2)];
 var $300=(($299+((($i_011_i_i_i_i)*(3808))&-1)+3800)|0);
 var $ld$62$0=(($300)|0);
 var $301$0=HEAP32[(($ld$62$0)>>2)];
 var $ld$63$1=(($300+4)|0);
 var $301$1=HEAP32[(($ld$63$1)>>2)];
 var $$etemp$64$0=3;
 var $$etemp$64$1=0;
 var $302$0=_i64Add($301$0,$301$1,$$etemp$64$0,$$etemp$64$1);var $302$1=tempRet0;
 var $303=(($302$1>>>0) < ($264$1>>>0)) | (((($302$1>>>0) == ($264$1>>>0) & ($302$0>>>0) <  ($264$0>>>0))));
 if($303){label=54;break;}else{var $324=$299;label=61;break;}
 case 54: 
 var $305=(($299+((($i_011_i_i_i_i)*(3808))&-1))|0);
 var $306=(($299+((($i_011_i_i_i_i)*(3808))&-1)+3792)|0);
 var $ld$65$0=(($306)|0);
 var $307$0=HEAP32[(($ld$65$0)>>2)];
 var $ld$66$1=(($306+4)|0);
 var $307$1=HEAP32[(($ld$66$1)>>2)];
 var $$etemp$67$0=9;
 var $$etemp$67$1=0;

 var $$etemp$68$0=1024;
 var $$etemp$68$1=0;

 HEAP8[($268)]=0;
 var $st$69$0=(($271)|0);
 tempBigInt=$307$0;HEAP8[($st$69$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$69$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$69$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$69$0)+(3))|0)]=tempBigInt&0xff;
 var $st$70$1=(($271+4)|0);
 tempBigInt=$307$1;HEAP8[($st$70$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$70$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$70$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$70$1)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$71$0=24;
 var $$etemp$71$1=0;

 var $$etemp$72$0=1024;
 var $$etemp$72$1=0;

 assert(9 % 1 === 0);(_memcpy($284, $268, 9)|0);
 HEAP8[($283)]=-2;
 var $_b_i_i_i_i_i=HEAP8[(136)];
 if($_b_i_i_i_i_i){var $i_01_i_i_i_i_i_i=0;label=56;break;}else{label=55;break;}
 case 55: 
 var $$etemp$74$0=24;
 var $$etemp$74$1=0;
 var $$etemp$73=15032;
 _randombytes($$etemp$73,$$etemp$74$0,$$etemp$74$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i_i_i_i=0;label=56;break;
 case 56: 
 var $i_01_i_i_i_i_i_i;
 var $309=((15032+$i_01_i_i_i_i_i_i)|0);
 var $310=HEAP8[($309)];
 var $311=((($310)+(1))&255);
 HEAP8[($309)]=$311;
 var $312=(($311<<24)>>24)==0;
 var $313=((($i_01_i_i_i_i_i_i)+(1))|0);
 var $314=($313>>>0)<24;
 var $or_cond_i_i_i_i_i_i=$312&$314;
 if($or_cond_i_i_i_i_i_i){var $i_01_i_i_i_i_i_i=$313;label=56;break;}else{label=57;break;}
 case 57: 
 assert(24 % 1 === 0);(_memcpy($282, 15032, 24)|0);
 var $315=_encrypt_data($305,$272,$282,$283,10,$285);
 var $316=($315|0)==-1;
 if($316){label=60;break;}else{label=58;break;}
 case 58: 
 HEAP8[($269)]=32;
 assert(32 % 1 === 0);(_memcpy($286, $305, 32)|0);
 assert(32 % 1 === 0);(_memcpy($287, $223, 32)|0);
 assert(24 % 1 === 0);(_memcpy($288, $282, 24)|0);
 var $317=((($315)+(89))|0);
 var $$etemp$75$0=24;
 var $$etemp$75$1=0;

 var $318=($317|0)==-1;
 if($318){label=60;break;}else{label=59;break;}
 case 59: 
 var $320=_route_tofriend($215,$305,$269,$317);
 label=60;break;
 case 60: 
 var $$etemp$76$0=1024;
 var $$etemp$76$1=0;

 var $$etemp$77$0=9;
 var $$etemp$77$1=0;

 var $321=HEAP32[(($267)>>2)];
 var $322=(($321+((($i_011_i_i_i_i)*(3808))&-1)+3800)|0);
 var $st$78$0=(($322)|0);
 HEAP32[(($st$78$0)>>2)]=$264$0;
 var $st$79$1=(($322+4)|0);
 HEAP32[(($st$79$1)>>2)]=$264$1;
 var $324=$321;label=61;break;
 case 61: 
 var $324;
 var $325=(($324+((($i_011_i_i_i_i)*(3808))&-1)+3760)|0);
 var $326=HEAP8[($325)];
 var $327=(($326<<24)>>24)==1;
 if($327){label=62;break;}else{label=95;break;}
 case 62: 
 var $329=(($324+((($i_011_i_i_i_i)*(3808))&-1)+3776)|0);
 var $ld$80$0=(($329)|0);
 var $330$0=HEAP32[(($ld$80$0)>>2)];
 var $ld$81$1=(($329+4)|0);
 var $330$1=HEAP32[(($ld$81$1)>>2)];
 var $$etemp$82$0=3;
 var $$etemp$82$1=0;
 var $331$0=_i64Add($330$0,$330$1,$$etemp$82$0,$$etemp$82$1);var $331$1=tempRet0;
 var $332=(($331$1>>>0) < ($264$1>>>0)) | (((($331$1>>>0) == ($264$1>>>0) & ($331$0>>>0) <  ($264$0>>>0))));
 if($332){label=63;break;}else{label=95;break;}
 case 63: 
 var $334=(($324+((($i_011_i_i_i_i)*(3808))&-1)+3784)|0);
 var $ld$83$0=(($334)|0);
 var $335$0=HEAP32[(($ld$83$0)>>2)];
 var $ld$84$1=(($334+4)|0);
 var $335$1=HEAP32[(($ld$84$1)>>2)];
 var $$etemp$85$0=6;
 var $$etemp$85$1=0;
 var $336$0=_i64Add($335$0,$335$1,$$etemp$85$0,$$etemp$85$1);var $336$1=tempRet0;
 var $337=(($336$1>>>0) < ($264$1>>>0)) | (((($336$1>>>0) == ($264$1>>>0) & ($336$0>>>0) <  ($264$0>>>0))));
 if($337){label=95;break;}else{label=64;break;}
 case 64: 
 var $339=(($296)&65535);
 var $$etemp$86$0=19;
 var $$etemp$86$1=0;

 var $$etemp$87$0=16;
 var $$etemp$87$1=0;

 HEAP32[(($289)>>2)]=0; HEAP32[((($289)+(4))>>2)]=0; HEAP32[((($289)+(8))>>2)]=0; HEAP32[((($289)+(12))>>2)]=0; HEAP16[((($289)+(16))>>1)]=0; HEAP8[((($289)+(18))|0)]=0;
 var $340=$296&65535;
 var $341=($339&65535)>8;
 if($341){label=65;break;}else{label=66;break;}
 case 65: 
 assert(19 % 1 === 0);HEAP32[(($262)>>2)]=HEAP32[(($289)>>2)];HEAP32[((($262)+(4))>>2)]=HEAP32[((($289)+(4))>>2)];HEAP32[((($262)+(8))>>2)]=HEAP32[((($289)+(8))>>2)];HEAP32[((($262)+(12))>>2)]=HEAP32[((($289)+(12))>>2)];HEAP16[((($262)+(16))>>1)]=HEAP16[((($289)+(16))>>1)];HEAP8[(((($262)+(16))+(2))|0)]=HEAP8[(((($289)+(16))+(2))|0)];
 label=95;break;
 case 66: 
 _memset($273, 0, 16)|0;
 var $344=(($339<<16)>>16)==0;
 if($344){label=73;break;}else{var $i_03_i_i_i_i_i=0;label=68;break;}
 case 67: 
 var $346=($361>>>0)<($340>>>0);
 if($346){var $i_03_i_i_i_i_i=$361;label=68;break;}else{label=73;break;}
 case 68: 
 var $i_03_i_i_i_i_i;
 var $347=(($ip_list_i_i_i_i+((($i_03_i_i_i_i_i)*(24))&-1))|0);
 var $348=(($numbers_i_i_i_i_i+($i_03_i_i_i_i_i<<1))|0);
 var $j_01_i_i_i_i_i=0;label=69;break;
 case 69: 
 var $j_01_i_i_i_i_i;
 var $350=(($ip_list_i_i_i_i+((($j_01_i_i_i_i_i)*(24))&-1))|0);
 var $351=_ip_equal($347,$350);
 var $352=($351|0)==0;
 if($352){label=71;break;}else{label=70;break;}
 case 70: 
 var $354=HEAP16[(($348)>>1)];
 var $355=((($354)+(1))&65535);
 HEAP16[(($348)>>1)]=$355;
 label=71;break;
 case 71: 
 var $357=((($j_01_i_i_i_i_i)+(1))|0);
 var $358=($357>>>0)<($340>>>0);
 if($358){var $j_01_i_i_i_i_i=$357;label=69;break;}else{label=72;break;}
 case 72: 
 var $359=HEAP16[(($348)>>1)];
 var $360=($359&65535)>3;
 var $361=((($i_03_i_i_i_i_i)+(1))|0);
 if($360){label=74;break;}else{label=67;break;}
 case 73: 
 assert(19 % 1 === 0);HEAP32[(($262)>>2)]=HEAP32[(($289)>>2)];HEAP32[((($262)+(4))>>2)]=HEAP32[((($289)+(4))>>2)];HEAP32[((($262)+(8))>>2)]=HEAP32[((($289)+(8))>>2)];HEAP32[((($262)+(12))>>2)]=HEAP32[((($289)+(12))>>2)];HEAP16[((($262)+(16))>>1)]=HEAP16[((($289)+(16))>>1)];HEAP8[(((($262)+(16))+(2))|0)]=HEAP8[(((($289)+(16))+(2))|0)];
 label=95;break;
 case 74: 
 var $362=(($ip_list_i_i_i_i+((($i_03_i_i_i_i_i)*(24))&-1))|0);
 var $363=HEAP8[($362)];
 var $364=(($362+1)|0);
 assert(19 % 1 === 0);(_memcpy($262, $364, 19)|0);
 var $$etemp$88$0=19;
 var $$etemp$88$1=0;

 var $$etemp$89$0=16;
 var $$etemp$89$1=0;

 var $365=(($363<<24)>>24)==0;
 if($365){label=95;break;}else{label=75;break;}
 case 75: 
 HEAP8[($261)]=$363;
 assert(19 % 1 === 0);(_memcpy($290, $262, 19)|0);
 var $367=(($339<<16)>>16)==0;
 if($367){var $num_0_lcssa_i_i_i_i_i=0;label=79;break;}else{var $i_01_i_i_i_i_i=0;var $num_02_i_i_i_i_i=0;label=76;break;}
 case 76: 
 var $num_02_i_i_i_i_i;
 var $i_01_i_i_i_i_i;
 var $368=(($ip_list_i_i_i_i+((($i_01_i_i_i_i_i)*(24))&-1))|0);
 var $369=_ip_equal($368,$ip1_i_i_i_i);
 var $370=($369|0)==0;
 if($370){var $num_1_i_i_i_i_i=$num_02_i_i_i_i_i;label=78;break;}else{label=77;break;}
 case 77: 
 var $372=(($ip_list_i_i_i_i+((($i_01_i_i_i_i_i)*(24))&-1)+20)|0);
 var $373=(((((HEAPU8[($372)])|(HEAPU8[((($372)+(1))|0)]<<8))<<16)>>16));
 var $374=_htons($373);
 var $375=($num_02_i_i_i_i_i&65535);
 var $376=(($port_list_i_i_i_i+($375<<1))|0);
 HEAP16[(($376)>>1)]=$374;
 var $377=((($num_02_i_i_i_i_i)+(1))&65535);
 var $num_1_i_i_i_i_i=$377;label=78;break;
 case 78: 
 var $num_1_i_i_i_i_i;
 var $379=((($i_01_i_i_i_i_i)+(1))|0);
 var $380=($379>>>0)<($340>>>0);
 if($380){var $i_01_i_i_i_i_i=$379;var $num_02_i_i_i_i_i=$num_1_i_i_i_i_i;label=76;break;}else{var $num_0_lcssa_i_i_i_i_i=$num_1_i_i_i_i_i;label=79;break;}
 case 79: 
 var $num_0_lcssa_i_i_i_i_i;
 assert(19 % 1 === 0);HEAP32[(($260)>>2)]=HEAP32[(($262)>>2)];HEAP32[((($260)+(4))>>2)]=HEAP32[((($262)+(4))>>2)];HEAP32[((($260)+(8))>>2)]=HEAP32[((($262)+(8))>>2)];HEAP32[((($260)+(12))>>2)]=HEAP32[((($262)+(12))>>2)];HEAP16[((($260)+(16))>>1)]=HEAP16[((($262)+(16))>>1)];HEAP8[(((($260)+(16))+(2))|0)]=HEAP8[(((($262)+(16))+(2))|0)];
 var $$etemp$90$0=24;
 var $$etemp$90$1=0;

 var $$etemp$91$0=24;
 var $$etemp$91$1=0;

 var $$etemp$92$0=24;
 var $$etemp$92$1=0;

 var $381=($num_0_lcssa_i_i_i_i_i&65535);
 var $382=($num_0_lcssa_i_i_i_i_i&65535)>8;
 var $383=(($num_0_lcssa_i_i_i_i_i<<16)>>16)==0;
 var $or_cond_i_i_i_i_i=$382|$383;
 if($or_cond_i_i_i_i_i){label=80;break;}else{label=81;break;}
 case 80: 
 var $_pre_i_i_i_i=HEAP32[(($267)>>2)];
 var $453=$_pre_i_i_i_i;label=94;break;
 case 81: 
 var $384=$i_011_i_i_i_i&65535;
 var $385=HEAP32[(($267)>>2)];
 var $386=(($385+((($384)*(3808))&-1)+3764)|0);
 var $387=HEAP32[(($386)>>2)];
 var $388=((($387)+(48))|0);
 var $389=HEAP16[(($274)>>1)];
 var $391=1;label=82;break;
 case 82: 
 var $391;
 var $392=($391>>>0)<($381>>>0);
 if($392){label=83;break;}else{label=84;break;}
 case 83: 
 var $_phi_trans_insert21_i_i_i_i_i=(($port_list_i_i_i_i+($391<<1))|0);
 var $_pre22_i_i_i_i_i=HEAP16[(($_phi_trans_insert21_i_i_i_i_i)>>1)];
 var $393=(($389<<16)>>16)==(($_pre22_i_i_i_i_i<<16)>>16);
 var $394=((($391)+(1))|0);
 if($393){var $391=$394;label=82;break;}else{label=84;break;}
 case 84: 
 var $395=($391|0)==($381|0);
 if($395){label=85;break;}else{label=86;break;}
 case 85: 
 HEAP8[($275)]=$363;
 assert(19 % 1 === 0);(_memcpy($291, $260, 19)|0);
 var $397=_htons($389);
 tempBigInt=$397;HEAP8[($278)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($278)+(1))|0)]=tempBigInt&0xff;
 var $398=HEAP32[(($279)>>2)];
 var $399=HEAP32[(($267)>>2)];
 var $400=(($399+((($384)*(3808))&-1))|0);
 _send_ping_request($398,$pinging_i_i_i_i_i,$400);
 var $_pre_i_i_i_i_i=HEAP32[(($267)>>2)];
 var $425=$_pre_i_i_i_i_i;var $ip_i_i_i_i_sroa_0_049=$363;label=89;break;
 case 86: 
 var $401=$381<<1;
 var $i_12_i_i_i_i_i=$387;label=87;break;
 case 87: 
 var $i_12_i_i_i_i_i;
 var $403=$i_12_i_i_i_i_i>>>1;
 var $404=(((($403>>>0))%(($381>>>0)))&-1);
 var $405=(($port_list_i_i_i_i+($404<<1))|0);
 var $406=HEAP16[(($405)>>1)];
 var $407=($406&65535);
 var $408=(((($i_12_i_i_i_i_i>>>0))/(($401>>>0)))&-1);
 var $409=$i_12_i_i_i_i_i<<1;
 var $410=$409&2;
 var $411=$410^2;
 var $412=((($411)-(1))|0);
 var $413=(Math_imul($412,$408)|0);
 var $414=((($413)+($407))|0);
 var $415=(($414)&65535);
 HEAP8[($276)]=$363;
 assert(19 % 1 === 0);(_memcpy($293, $260, 19)|0);
 var $416=_htons($415);
 tempBigInt=$416;HEAP8[($281)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($281)+(1))|0)]=tempBigInt&0xff;
 var $417=HEAP32[(($279)>>2)];
 var $418=HEAP32[(($267)>>2)];
 var $419=(($418+((($384)*(3808))&-1))|0);
 _send_ping_request($417,$pinging1_i_i_i_i_i,$419);
 var $420=((($i_12_i_i_i_i_i)+(1))|0);
 var $421=($420|0)==($388|0);
 if($421){label=88;break;}else{var $i_12_i_i_i_i_i=$420;label=87;break;}
 case 88: 
 var $_pre17_i_i_i_i_i=HEAP32[(($267)>>2)];
 var $423=(($_pre17_i_i_i_i_i+((($384)*(3808))&-1)+3764)|0);
 HEAP32[(($423)>>2)]=$388;
 var $425=$_pre17_i_i_i_i_i;var $ip_i_i_i_i_sroa_0_049=$363;label=89;break;
 case 89: 
 var $ip_i_i_i_i_sroa_0_049;
 var $425;
 var $426=(($425+((($384)*(3808))&-1)+3768)|0);
 var $427=HEAP32[(($426)>>2)];
 var $428=($427>>>0)>5;
 if($428){label=90;break;}else{var $450=$425;var $449=$427;label=93;break;}
 case 90: 
 var $430=(($425+((($384)*(3808))&-1)+3772)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=((($431)+(48))|0);
 HEAP8[($277)]=$ip_i_i_i_i_sroa_0_049;
 assert(19 % 1 === 0);(_memcpy($292, $260, 19)|0);
 var $433=HEAP32[(($267)>>2)];
 var $434=(($433+((($384)*(3808))&-1)+3772)|0);
 var $435=HEAP32[(($434)>>2)];
 var $436=($435|0)==($432|0);
 if($436){var $445=$433;label=92;break;}else{var $i_21_i_i_i_i_i=$435;var $437=$433;label=91;break;}
 case 91: 
 var $437;
 var $i_21_i_i_i_i_i;
 var $438=((($i_21_i_i_i_i_i)+(1024))|0);
 var $439=(($438)&65535);
 var $440=_htons($439);
 tempBigInt=$440;HEAP8[($280)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($280)+(1))|0)]=tempBigInt&0xff;
 var $441=HEAP32[(($279)>>2)];
 var $442=(($437+((($384)*(3808))&-1))|0);
 _send_ping_request($441,$pinging3_i_i_i_i_i,$442);
 var $443=((($i_21_i_i_i_i_i)+(1))|0);
 var $444=($443|0)==($432|0);
 var $_pre15_i_i_i_i_i=HEAP32[(($267)>>2)];
 if($444){var $445=$_pre15_i_i_i_i_i;label=92;break;}else{var $i_21_i_i_i_i_i=$443;var $437=$_pre15_i_i_i_i_i;label=91;break;}
 case 92: 
 var $445;
 var $446=((($431)+(24))|0);
 var $447=(($445+((($384)*(3808))&-1)+3772)|0);
 HEAP32[(($447)>>2)]=$446;
 var $_phi_trans_insert_i_i_i_i_i=(($445+((($384)*(3808))&-1)+3768)|0);
 var $_pre16_i_i_i_i_i=HEAP32[(($_phi_trans_insert_i_i_i_i_i)>>2)];
 var $450=$445;var $449=$_pre16_i_i_i_i_i;label=93;break;
 case 93: 
 var $449;
 var $450;
 var $451=(($450+((($384)*(3808))&-1)+3768)|0);
 var $452=((($449)+(1))|0);
 HEAP32[(($451)>>2)]=$452;
 var $453=$450;label=94;break;
 case 94: 
 var $453;
 var $$etemp$93$0=24;
 var $$etemp$93$1=0;

 var $$etemp$94$0=24;
 var $$etemp$94$1=0;

 var $$etemp$95$0=24;
 var $$etemp$95$1=0;

 var $454=(($453+((($i_011_i_i_i_i)*(3808))&-1)+3776)|0);
 var $st$96$0=(($454)|0);
 HEAP32[(($st$96$0)>>2)]=$264$0;
 var $st$97$1=(($454+4)|0);
 HEAP32[(($st$97$1)>>2)]=$264$1;
 var $455=(($453+((($i_011_i_i_i_i)*(3808))&-1)+3760)|0);
 HEAP8[($455)]=0;
 label=95;break;
 case 95: 
 var $$etemp$98$0=192;
 var $$etemp$98$1=0;

 var $456=((($i_011_i_i_i_i)+(1))|0);
 var $457=HEAP16[(($244)>>1)];
 var $458=($457&65535);
 var $459=($456>>>0)<($458>>>0);
 if($459){var $i_011_i_i_i_i=$456;label=52;break;}else{label=96;break;}
 case 96: 
 var $ld$99$0=13552;
 var $_pre33$0=HEAP32[(($ld$99$0)>>2)];
 var $ld$100$1=13556;
 var $_pre33$1=HEAP32[(($ld$100$1)>>2)];
 var $_pre_phi_i_i_i=$279;var $460$1=$_pre33$1;var $460$0=$_pre33$0;label=97;break;
 case 97: 
 var $460$0;
 var $460$1;
 var $_pre_phi_i_i_i;
 var $$etemp$101$0=19;
 var $$etemp$101$1=0;

 var $$etemp$102$0=20;
 var $$etemp$102$1=0;

 var $$etemp$103$0=19;
 var $$etemp$103$1=0;

 var $$etemp$104$0=16;
 var $$etemp$104$1=0;

 var $461=HEAP32[(($_pre_phi_i_i_i)>>2)];
 var $462=(($461+37776)|0);
 var $ld$105$0=(($462)|0);
 var $463$0=HEAP32[(($ld$105$0)>>2)];
 var $ld$106$1=(($462+4)|0);
 var $463$1=HEAP32[(($ld$106$1)>>2)];
 var $$etemp$107$0=5;
 var $$etemp$107$1=0;
 var $464$0=_i64Add($463$0,$463$1,$$etemp$107$0,$$etemp$107$1);var $464$1=tempRet0;
 var $465=(($464$1>>>0) > ($460$1>>>0)) | (((($464$1>>>0) == ($460$1>>>0) & ($464$0>>>0) >  ($460$0>>>0))));
 if($465){label=101;break;}else{label=98;break;}
 case 98: 
 var $st$108$0=(($462)|0);
 HEAP32[(($st$108$0)>>2)]=$460$0;
 var $st$109$1=(($462+4)|0);
 HEAP32[(($st$109$1)>>2)]=$460$1;
 var $i_01_i3_i_i_i=0;label=99;break;
 case 99: 
 var $i_01_i3_i_i_i;
 var $468=(($461+36880+((($i_01_i3_i_i_i)*(56))&-1)+32)|0);
 var $469=(($468)|0);
 var $470=HEAP8[($469)];
 var $471=(($470<<24)>>24)==0;
 if($471){label=101;break;}else{label=100;break;}
 case 100: 
 var $473=(($461+36880+((($i_01_i3_i_i_i)*(56))&-1))|0);
 _send_ping_request($461,$468,$473);
 _memset($469, 0, 20)|0;
 var $474=((($i_01_i3_i_i_i)+(1))|0);
 var $475=($474>>>0)<16;
 if($475){var $i_01_i3_i_i_i=$474;label=99;break;}else{label=101;break;}
 case 101: 
 var $476=(($rand_node_i_i_i_i)|0);
 var $477=(($rand_node_i_i_i_i+32)|0);
 var $478=(($to_test_i_i_i_i)|0);
 var $479=(($to_test_i_i_i_i+32)|0);
 var $480=(($data_i_i1_i_i_i)|0);
 var $481=(($data_i_i1_i_i_i+56)|0);
 var $482=(($packet_i_i_i_i_i_i)|0);
 var $483=(($215+14932)|0);
 var $484=(($215+4)|0);
 var $485=(($id_i_i_i_i_i)|0);
 var $486=$id_i_i_i_i_i;
 var $487=(($id_i_i_i_i_i+4)|0);
 var $488=$487;
 var $489=(($id_i_i_i_i_i+8)|0);
 var $490=$489;
 var $491=(($id_i_i_i_i_i+12)|0);
 var $492=$491;
 var $493=(($id_i_i_i_i_i+16)|0);
 var $494=$493;
 var $495=(($id_i_i_i_i_i+20)|0);
 var $496=$495;
 var $497=(($id_i_i_i_i_i+24)|0);
 var $498=$497;
 var $499=(($id_i_i_i_i_i+28)|0);
 var $500=$499;
 var $501=(($nodes_list_i_i_i_i_i)|0);
 var $502=(($nodes_list_i_i_i_i_i)|0);
 var $503=$num_nodes_i_i_i_i_i_i_i;
 var $504=(($rand_node_i_i_i_i+52)|0);
 var $505=(($477)|0);
 var $506=(($data_i_i_i_i_i_i_sroa_1)|0);
 var $507=(($nonce_i_i_i_i_i)|0);
 var $508=(($temp_i_i_i_i_i)|0);
 var $509=(($temp_i_i_i_i_i+1)|0);
 var $510=(($temp_i_i_i_i_i+2)|0);
 var $511=(($packet_i_i_i_i_i_i+89)|0);
 var $512=(($packet_i_i_i_i_i_i+1)|0);
 var $513=(($packet_i_i_i_i_i_i+33)|0);
 var $514=(($packet_i_i_i_i_i_i+65)|0);
 var $515=(($215+14964)|0);
 var $i_01_i2_i_i_i=0;label=102;break;
 case 102: 
 var $i_01_i2_i_i_i;
 var $517=$i_01_i2_i_i_i>>>1;
 var $518=(($215+8+((($517)*(464))&-1))|0);
 var $519=$i_01_i2_i_i_i&1;
 var $520=($519|0)==0;
 if($520){label=103;break;}else{label=104;break;}
 case 103: 
 var $522=(($215+8+((($517)*(464))&-1)+32)|0);
 var $sa_family_0_i_i_i_i=2;var $cur_iptspng_0_i_i_i_i=$522;label=105;break;
 case 104: 
 var $524=(($215+8+((($517)*(464))&-1)+248)|0);
 var $sa_family_0_i_i_i_i=10;var $cur_iptspng_0_i_i_i_i=$524;label=105;break;
 case 105: 
 var $cur_iptspng_0_i_i_i_i;
 var $sa_family_0_i_i_i_i;
 var $526=(($cur_iptspng_0_i_i_i_i+24)|0);
 var $ld$110$0=(($526)|0);
 var $527$0=HEAP32[(($ld$110$0)>>2)];
 var $ld$111$1=(($526+4)|0);
 var $527$1=HEAP32[(($ld$111$1)>>2)];
 var $$etemp$112$0=122;
 var $$etemp$112$1=0;
 var $528$0=_i64Add($527$0,$527$1,$$etemp$112$0,$$etemp$112$1);var $528$1=tempRet0;
 var $ld$113$0=13552;
 var $529$0=HEAP32[(($ld$113$0)>>2)];
 var $ld$114$1=13556;
 var $529$1=HEAP32[(($ld$114$1)>>2)];
 var $530=(($528$1>>>0) > ($529$1>>>0)) | (((($528$1>>>0) == ($529$1>>>0) & ($528$0>>>0) >  ($529$0>>>0))));
 if($530){label=106;break;}else{label=126;break;}
 case 106: 
 var $532=(($cur_iptspng_0_i_i_i_i+88)|0);
 var $533=HEAP8[($532)];
 var $534=(($533<<24)>>24)==0;
 var $535=(($cur_iptspng_0_i_i_i_i+96)|0);
 var $ld$115$0=(($535)|0);
 var $536$0=HEAP32[(($ld$115$0)>>2)];
 var $ld$116$1=(($535+4)|0);
 var $536$1=HEAP32[(($ld$116$1)>>2)];
 if($534){label=107;break;}else{label=124;break;}
 case 107: 
 var $$etemp$117$0=120;
 var $$etemp$117$1=0;
 var $538$0=_i64Add($536$0,$536$1,$$etemp$117$0,$$etemp$117$1);var $538$1=tempRet0;
 var $539=(($538$1>>>0) > ($529$1>>>0)) | (((($538$1>>>0) == ($529$1>>>0) & ($538$0>>>0) >  ($529$0>>>0))));
 if($539){label=126;break;}else{label=108;break;}
 case 108: 
 var $$etemp$118$0=56;
 var $$etemp$118$1=0;

 var $$etemp$119$0=32;
 var $$etemp$119$1=0;

 var $541=_rand();
 HEAP32[(($486)>>2)]=$541;
 var $542=_rand();
 HEAP32[(($488)>>2)]=$542;
 var $543=_rand();
 HEAP32[(($490)>>2)]=$543;
 var $544=_rand();
 HEAP32[(($492)>>2)]=$544;
 var $545=_rand();
 HEAP32[(($494)>>2)]=$545;
 var $546=_rand();
 HEAP32[(($496)>>2)]=$546;
 var $547=_rand();
 HEAP32[(($498)>>2)]=$547;
 var $548=_rand();
 HEAP32[(($500)>>2)]=$548;
 var $$etemp$120$0=448;
 var $$etemp$120$1=0;

 _memset($501, 0, 448)|0;
 var $$etemp$121$0=4;
 var $$etemp$121$1=0;

 HEAP32[(($num_nodes_i_i_i_i_i_i_i)>>2)]=0;
 _get_close_nodes_inner($215,$485,$502,$sa_family_0_i_i_i_i,$224,32,$num_nodes_i_i_i_i_i_i_i,1,0);
 var $549=HEAP16[(($244)>>1)];
 var $550=(($549<<16)>>16)==0;
 if($550){label=110;break;}else{var $i_01_i_i_i1_i_i_i_i=0;label=109;break;}
 case 109: 
 var $i_01_i_i_i1_i_i_i_i;
 var $551=HEAP32[(($515)>>2)];
 var $552=(($551+((($i_01_i_i_i1_i_i_i_i)*(3808))&-1)+32)|0);
 _get_close_nodes_inner($215,$485,$502,$sa_family_0_i_i_i_i,$552,8,$num_nodes_i_i_i_i_i_i_i,1,0);
 var $553=((($i_01_i_i_i1_i_i_i_i)+(1))|0);
 var $554=HEAP16[(($244)>>1)];
 var $555=($554&65535);
 var $556=($553>>>0)<($555>>>0);
 if($556){var $i_01_i_i_i1_i_i_i_i=$553;label=109;break;}else{label=110;break;}
 case 110: 
 var $557=HEAP32[(($num_nodes_i_i_i_i_i_i_i)>>2)];
 var $$etemp$122$0=4;
 var $$etemp$122$1=0;

 var $558=($557|0)==0;
 if($558){label=111;break;}else{label=112;break;}
 case 111: 
 assert(56 % 1 === 0);(_memcpy($476, $501, 56)|0);
 label=113;break;
 case 112: 
 var $561=_rand();
 var $562=(((($561>>>0))%(($557>>>0)))&-1);
 var $563=(($nodes_list_i_i_i_i_i+((($562)*(56))&-1))|0);
 assert(56 % 1 === 0);(_memcpy($476, $563, 56)|0);
 label=113;break;
 case 113: 
 var $$etemp$123$0=448;
 var $$etemp$123$1=0;

 var $$etemp$124$0=32;
 var $$etemp$124$1=0;

 var $564=(((((HEAPU8[($504)])|(HEAPU8[((($504)+(1))|0)]<<8))<<16)>>16));
 var $565=(($564<<16)>>16)==0;
 if($565){label=126;break;}else{label=114;break;}
 case 114: 
 var $566=HEAP8[($505)];
 var $phitmp16=(($566<<24)>>24)==0;
 if($phitmp16){label=126;break;}else{var $_03_i_i_i_i_i_i=32;var $l_04_i_i_i_i_i_i=$518;var $r_05_i_i_i_i_i_i=$476;label=115;break;}
 case 115: 
 var $r_05_i_i_i_i_i_i;
 var $l_04_i_i_i_i_i_i;
 var $_03_i_i_i_i_i_i;
 var $567=HEAP8[($l_04_i_i_i_i_i_i)];
 var $568=HEAP8[($r_05_i_i_i_i_i_i)];
 var $569=(($567<<24)>>24)==(($568<<24)>>24);
 if($569){label=116;break;}else{label=117;break;}
 case 116: 
 var $571=((($_03_i_i_i_i_i_i)-(1))|0);
 var $572=(($l_04_i_i_i_i_i_i+1)|0);
 var $573=(($r_05_i_i_i_i_i_i+1)|0);
 var $574=($571|0)==0;
 if($574){label=126;break;}else{var $_03_i_i_i_i_i_i=$571;var $l_04_i_i_i_i_i_i=$572;var $r_05_i_i_i_i_i_i=$573;label=115;break;}
 case 117: 
 var $$etemp$125$0=56;
 var $$etemp$125$1=0;

 var $575=(($cur_iptspng_0_i_i_i_i)|0);
 assert(24 % 1 === 0);(_memcpy($479, $575, 24)|0);
 assert(32 % 1 === 0);(_memcpy($478, $518, 32)|0);
 var $$etemp$126$0=88;
 var $$etemp$126$1=0;

 assert(56 % 1 === 0);(_memcpy($480, $478, 56)|0);
 assert(32 % 1 === 0);(_memcpy($481, $223, 32)|0);
 var $$etemp$127$0=1024;
 var $$etemp$127$1=0;

 var $$etemp$128$0=383;
 var $$etemp$128$1=0;

 _memset($506, 0, 383)|0;
 assert(88 % 1 === 0);(_memcpy($506, $480, 88)|0);
 var $$etemp$129$0=24;
 var $$etemp$129$1=0;

 var $$etemp$130$0=1024;
 var $$etemp$130$1=0;

 HEAP8[($509)]=2;
 assert(383 % 1 === 0);(_memcpy($510, $506, 383)|0);
 HEAP8[($508)]=48;
 var $_b_i_i_i_i_i_i=HEAP8[(136)];
 if($_b_i_i_i_i_i_i){var $i_01_i_i_i_i_i_i_i=0;label=119;break;}else{label=118;break;}
 case 118: 
 var $$etemp$132$0=24;
 var $$etemp$132$1=0;
 var $$etemp$131=15032;
 _randombytes($$etemp$131,$$etemp$132$0,$$etemp$132$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i_i_i_i_i=0;label=119;break;
 case 119: 
 var $i_01_i_i_i_i_i_i_i;
 var $577=((15032+$i_01_i_i_i_i_i_i_i)|0);
 var $578=HEAP8[($577)];
 var $579=((($578)+(1))&255);
 HEAP8[($577)]=$579;
 var $580=(($579<<24)>>24)==0;
 var $581=((($i_01_i_i_i_i_i_i_i)+(1))|0);
 var $582=($581>>>0)<24;
 var $or_cond_i_i_i_i_i_i_i=$580&$582;
 if($or_cond_i_i_i_i_i_i_i){var $i_01_i_i_i_i_i_i_i=$581;label=119;break;}else{label=120;break;}
 case 120: 
 assert(24 % 1 === 0);(_memcpy($507, 15032, 24)|0);
 var $583=_encrypt_data($476,$483,$507,$508,385,$511);
 var $584=($583|0)==-1;
 if($584){label=126;break;}else{label=121;break;}
 case 121: 
 HEAP8[($482)]=32;
 assert(32 % 1 === 0);(_memcpy($512, $476, 32)|0);
 assert(32 % 1 === 0);(_memcpy($513, $223, 32)|0);
 assert(24 % 1 === 0);(_memcpy($514, $507, 24)|0);
 var $585=((($583)+(89))|0);
 var $$etemp$133$0=24;
 var $$etemp$133$1=0;

 var $586=($585|0)==-1;
 if($586){label=126;break;}else{label=122;break;}
 case 122: 
 var $587=HEAP32[(($484)>>2)];
 var $588=_sendpacket($587,$477,$482,$585);
 var $phitmp_i_i_i_i=($588|0)>0;
 var $$etemp$134$0=383;
 var $$etemp$134$1=0;

 var $$etemp$135$0=1024;
 var $$etemp$135$1=0;

 var $$etemp$136$0=88;
 var $$etemp$136$1=0;

 if($phitmp_i_i_i_i){label=123;break;}else{label=126;break;}
 case 123: 
 var $590=(($cur_iptspng_0_i_i_i_i+104)|0);
 assert(32 % 1 === 0);(_memcpy($590, $476, 32)|0);
 var $ld$137$0=13552;
 var $591$0=HEAP32[(($ld$137$0)>>2)];
 var $ld$138$1=13556;
 var $591$1=HEAP32[(($ld$138$1)>>2)];
 var $st$139$0=(($535)|0);
 HEAP32[(($st$139$0)>>2)]=$591$0;
 var $st$140$1=(($535+4)|0);
 HEAP32[(($st$140$1)>>2)]=$591$1;
 label=126;break;
 case 124: 
 var $$etemp$141$0=1200;
 var $$etemp$141$1=0;
 var $593$0=_i64Add($536$0,$536$1,$$etemp$141$0,$$etemp$141$1);var $593$1=tempRet0;
 var $594=(($593$1>>>0) > ($529$1>>>0)) | (((($593$1>>>0) == ($529$1>>>0) & ($593$0>>>0) >  ($529$0>>>0))));
 if($594){label=126;break;}else{label=125;break;}
 case 125: 
 HEAP8[($532)]=0;
 label=126;break;
 case 126: 
 var $596=((($i_01_i2_i_i_i)+(1))|0);
 var $597=($596>>>0)<64;
 if($597){var $i_01_i2_i_i_i=$596;label=102;break;}else{label=127;break;}
 case 127: 
 var $ld$142$0=13552;
 var $598$0=HEAP32[(($ld$142$0)>>2)];
 var $ld$143$1=13556;
 var $598$1=HEAP32[(($ld$143$1)>>2)];
 var $st$144$0=(($218)|0);
 HEAP32[(($st$144$0)>>2)]=$598$0;
 var $st$145$1=(($218+4)|0);
 HEAP32[(($st$145$1)>>2)]=$598$1;
 label=128;break;
 case 128: 
 var $599=(($137+4)|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=_time(0);
 var $602$0=$601;
 var $602$1=((((($601|0)<0))|0)?-1:0);
 var $st$146$0=13552;
 HEAP32[(($st$146$0)>>2)]=$602$0;
 var $st$147$1=13556;
 HEAP32[(($st$147$1)>>2)]=$602$1;
 var $603=(($600)|0);
 var $604=HEAP32[(($603)>>2)];
 var $605=(($2)|0);
 var $$etemp$148$0=24;
 var $$etemp$148$1=0;

 var $606=$a_i_i_i_i_i;
 var $$etemp$149$0=8;
 var $$etemp$149$1=0;

 var $607=_gettimeofday($a_i_i_i_i_i,0);
 var $608=(($a_i_i_i_i_i)|0);
 var $609=HEAP32[(($608)>>2)];
 var $610$0=$609;
 var $610$1=((((($609|0)<0))|0)?-1:0);
 var $$etemp$150$0=1000000;
 var $$etemp$150$1=0;
 var $611$0=___muldi3($610$0,$610$1,$$etemp$150$0,$$etemp$150$1);var $611$1=tempRet0;
 var $612=(($a_i_i_i_i_i+4)|0);
 var $613=HEAP32[(($612)>>2)];
 var $614$0=$613;
 var $614$1=((((($613|0)<0))|0)?-1:0);
 var $615$0=_i64Add($611$0,$611$1,$614$0,$614$1);var $615$1=tempRet0;
 var $$etemp$151$0=8;
 var $$etemp$151$1=0;

 var $616=(($604+4)|0);
 var $617=(($604+8)|0);
 var $618=HEAP32[(($617)>>2)];
 var $619=($618|0)==0;
 if($619){label=141;break;}else{label=129;break;}
 case 129: 
 var $620=HEAP32[(($616)>>2)];
 var $621=$620;
 var $ludp_idx_i_i_i_i_i=(($604)|0);
 var $622=(($data_i_i_i_i_i)|0);
 var $623=(($data_i_i_i_i_i+1)|0);
 var $624=$623;
 var $625=(($data_i_i_i_i_i+5)|0);
 var $626=$625;
 var $tmp_04_i_i_i_i_i=$621;var $tmp_i_05_i_i_i_i_i=0;label=130;break;
 case 130: 
 var $tmp_i_05_i_i_i_i_i;
 var $tmp_04_i_i_i_i_i;
 var $628=(($tmp_04_i_i_i_i_i+24)|0);
 var $629=HEAP8[($628)];
 var $630=(($629<<24)>>24)==1;
 if($630){label=131;break;}else{var $_pr3_i_i_i_i_i=$629;label=133;break;}
 case 131: 
 var $632=(($tmp_04_i_i_i_i_i+40)|0);
 var $ld$152$0=(($632)|0);
 var $633$0=HEAP32[(($ld$152$0)>>2)];
 var $ld$153$1=(($632+4)|0);
 var $633$1=HEAP32[(($ld$153$1)>>2)];
 var $634=(($tmp_04_i_i_i_i_i+26)|0);
 var $635=HEAP16[(($634)>>1)];
 var $636$0=($635&65535);
 var $636$1=0;
 var $$etemp$154$0=1000000;
 var $$etemp$154$1=0;
 var $637$0=___udivdi3($$etemp$154$0,$$etemp$154$1,$636$0,$636$1);var $637$1=tempRet0;
 var $638$0=_i64Add($637$0,$637$1,$633$0,$633$1);var $638$1=tempRet0;
 var $639=(($638$1>>>0) > ($615$1>>>0)) | (((($638$1>>>0) == ($615$1>>>0) & ($638$0>>>0) >  ($615$0>>>0))));
 if($639){var $_pr39_i_i_i_i_i=1;label=134;break;}else{label=132;break;}
 case 132: 
 var $641=(($tmp_04_i_i_i_i_i+88)|0);
 var $642=HEAP32[(($641)>>2)];
 var $ludp_idx_val_i_i_i_i_i=HEAP32[(($ludp_idx_i_i_i_i_i)>>2)];
 var $tmp1_i_i_i_i_i=(($tmp_04_i_i_i_i_i)|0);
 assert(24 % 1 === 0);(_memcpy($605, $tmp1_i_i_i_i_i, 24)|0);
 var $$etemp$155$0=9;
 var $$etemp$155$1=0;

 HEAP8[($622)]=16;
 var $643=_htonl($642);
 tempBigInt=$643;HEAP8[($624)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($624)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($624)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($624)+(3))|0)]=tempBigInt&0xff;
 var $644=_htonl(0);
 tempBigInt=$644;HEAP8[($626)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($626)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($626)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($626)+(3))|0)]=tempBigInt&0xff;
 var $645=_sendpacket($ludp_idx_val_i_i_i_i_i,$2,$622,9);
 var $$etemp$156$0=9;
 var $$etemp$156$1=0;

 var $st$157$0=(($632)|0);
 HEAP32[(($st$157$0)>>2)]=$615$0;
 var $st$158$1=(($632+4)|0);
 HEAP32[(($st$158$1)>>2)]=$615$1;
 var $_pr_pre_i_i_i_i_i=HEAP8[($628)];
 var $_pr3_i_i_i_i_i=$_pr_pre_i_i_i_i_i;label=133;break;
 case 133: 
 var $_pr3_i_i_i_i_i;
 var $646=(($_pr3_i_i_i_i_i<<24)>>24)==0;
 if($646){label=140;break;}else{var $_pr39_i_i_i_i_i=$_pr3_i_i_i_i_i;label=134;break;}
 case 134: 
 var $_pr39_i_i_i_i_i;
 var $647=(($tmp_04_i_i_i_i_i+48)|0);
 var $ld$159$0=(($647)|0);
 var $648$0=HEAP32[(($ld$159$0)>>2)];
 var $ld$160$1=(($647+4)|0);
 var $648$1=HEAP32[(($ld$160$1)>>2)];
 var $649=(($tmp_04_i_i_i_i_i+1152)|0);
 var $650=HEAP8[($649)];
 var $651$0=($650&255);
 var $651$1=0;
 var $$etemp$161$0=1000000;
 var $$etemp$161$1=0;
 var $652$0=___muldi3($651$0,$651$1,$$etemp$161$0,$$etemp$161$1);var $652$1=tempRet0;
 var $653$0=_i64Add($652$0,$652$1,$648$0,$648$1);var $653$1=tempRet0;
 var $654=(($653$1>>>0) >= ($615$1>>>0)) & (((($653$1>>>0) >  ($615$1>>>0)) | ($653$0>>>0) >= ($615$0>>>0)));
 var $655=(($_pr39_i_i_i_i_i<<24)>>24)==4;
 var $or_cond_i_i1_i_i_i=$654|$655;
 if($or_cond_i_i1_i_i_i){var $656=$_pr39_i_i_i_i_i;label=136;break;}else{label=135;break;}
 case 135: 
 HEAP8[($628)]=4;
 var $656=4;label=136;break;
 case 136: 
 var $656;
 var $657=(($tmp_04_i_i_i_i_i+64)|0);
 var $ld$162$0=(($657)|0);
 var $658$0=HEAP32[(($ld$162$0)>>2)];
 var $ld$163$1=(($657+4)|0);
 var $658$1=HEAP32[(($ld$163$1)>>2)];
 var $659=(($658$1>>>0) < ($615$1>>>0)) | (((($658$1>>>0) == ($615$1>>>0) & ($658$0>>>0) <  ($615$0>>>0))));
 if($659){label=137;break;}else{var $661=$656;label=138;break;}
 case 137: 
 HEAP8[($628)]=4;
 var $661=4;label=138;break;
 case 138: 
 var $661;
 var $662=(($tmp_04_i_i_i_i_i+25)|0);
 var $663=HEAP8[($662)];
 var $664=(($663<<24)>>24)==2;
 var $665=(($661<<24)>>24)==4;
 var $or_cond13_i_i_i_i_i=$664&$665;
 if($or_cond13_i_i_i_i_i){label=139;break;}else{label=140;break;}
 case 139: 
 _kill_connection($604,$tmp_i_05_i_i_i_i_i);
 label=140;break;
 case 140: 
 var $667=((($tmp_i_05_i_i_i_i_i)+(1))|0);
 var $668=HEAP32[(($616)>>2)];
 var $669=$668;
 var $670=(($669+((($667)*(1160))&-1))|0);
 var $671=HEAP32[(($617)>>2)];
 var $672=($667>>>0)<($671>>>0);
 if($672){var $tmp_04_i_i_i_i_i=$670;var $tmp_i_05_i_i_i_i_i=$667;label=130;break;}else{label=141;break;}
 case 141: 
 var $$etemp$164$0=24;
 var $$etemp$164$1=0;

 var $673=$a_i1_i_i_i_i;
 var $$etemp$165$0=8;
 var $$etemp$165$1=0;

 var $674=_gettimeofday($a_i1_i_i_i_i,0);
 var $675=(($a_i1_i_i_i_i)|0);
 var $676=HEAP32[(($675)>>2)];
 var $677$0=$676;
 var $677$1=((((($676|0)<0))|0)?-1:0);
 var $$etemp$166$0=1000000;
 var $$etemp$166$1=0;
 var $678$0=___muldi3($677$0,$677$1,$$etemp$166$0,$$etemp$166$1);var $678$1=tempRet0;
 var $679=(($a_i1_i_i_i_i+4)|0);
 var $680=HEAP32[(($679)>>2)];
 var $681$0=$680;
 var $681$1=((((($680|0)<0))|0)?-1:0);
 var $682$0=_i64Add($678$0,$678$1,$681$0,$681$1);var $682$1=tempRet0;
 var $$etemp$167$0=8;
 var $$etemp$167$1=0;

 var $683=HEAP32[(($617)>>2)];
 var $684=($683|0)==0;
 if($684){label=147;break;}else{label=142;break;}
 case 142: 
 var $685=HEAP32[(($616)>>2)];
 var $686=$685;
 var $tmp_01_i_i_i_i_i=$686;var $tmp_i_02_i_i_i_i_i=0;var $689=$685;var $688=$683;label=143;break;
 case 143: 
 var $688;
 var $689;
 var $tmp_i_02_i_i_i_i_i;
 var $tmp_01_i_i_i_i_i;
 var $690=(($tmp_01_i_i_i_i_i+24)|0);
 var $691=HEAP8[($690)];
 var $_off_i_i_i_i_i=((($691)-(2))&255);
 var $switch_i_i_i_i_i=($_off_i_i_i_i_i&255)<2;
 if($switch_i_i_i_i_i){label=144;break;}else{var $704=$689;var $703=$688;label=146;break;}
 case 144: 
 var $693=(($tmp_01_i_i_i_i_i+32)|0);
 var $ld$168$0=(($693)|0);
 var $694$0=HEAP32[(($ld$168$0)>>2)];
 var $ld$169$1=(($693+4)|0);
 var $694$1=HEAP32[(($ld$169$1)>>2)];
 var $695=(($tmp_01_i_i_i_i_i+26)|0);
 var $696=HEAP16[(($695)>>1)];
 var $697$0=($696&65535);
 var $697$1=0;
 var $$etemp$170$0=1000000;
 var $$etemp$170$1=0;
 var $698$0=___udivdi3($$etemp$170$0,$$etemp$170$1,$697$0,$697$1);var $698$1=tempRet0;
 var $699$0=_i64Add($698$0,$698$1,$694$0,$694$1);var $699$1=tempRet0;
 var $700=(($699$1>>>0) > ($682$1>>>0)) | (((($699$1>>>0) == ($682$1>>>0) & ($699$0>>>0) >  ($682$0>>>0))));
 if($700){var $704=$689;var $703=$688;label=146;break;}else{label=145;break;}
 case 145: 
 _send_SYNC($604,$tmp_i_02_i_i_i_i_i);
 var $st$171$0=(($693)|0);
 HEAP32[(($st$171$0)>>2)]=$682$0;
 var $st$172$1=(($693+4)|0);
 HEAP32[(($st$172$1)>>2)]=$682$1;
 var $_pre_i_i_i6_i_i=HEAP32[(($616)>>2)];
 var $_pre3_i_i_i_i_i=HEAP32[(($617)>>2)];
 var $704=$_pre_i_i_i6_i_i;var $703=$_pre3_i_i_i_i_i;label=146;break;
 case 146: 
 var $703;
 var $704;
 var $705=((($tmp_i_02_i_i_i_i_i)+(1))|0);
 var $706=$704;
 var $707=(($706+((($705)*(1160))&-1))|0);
 var $708=($705>>>0)<($703>>>0);
 if($708){var $tmp_01_i_i_i_i_i=$707;var $tmp_i_02_i_i_i_i_i=$705;var $689=$704;var $688=$703;label=143;break;}else{label=147;break;}
 case 147: 
 var $709=$a_i2_i_i_i_i;
 var $$etemp$173$0=8;
 var $$etemp$173$1=0;

 var $710=_gettimeofday($a_i2_i_i_i_i,0);
 var $711=(($a_i2_i_i_i_i)|0);
 var $712=HEAP32[(($711)>>2)];
 var $713$0=$712;
 var $713$1=((((($712|0)<0))|0)?-1:0);
 var $$etemp$174$0=1000000;
 var $$etemp$174$1=0;
 var $714$0=___muldi3($713$0,$713$1,$$etemp$174$0,$$etemp$174$1);var $714$1=tempRet0;
 var $715=(($a_i2_i_i_i_i+4)|0);
 var $716=HEAP32[(($715)>>2)];
 var $717$0=$716;
 var $717$1=((((($716|0)<0))|0)?-1:0);
 var $718$0=_i64Add($714$0,$714$1,$717$0,$717$1);var $718$1=tempRet0;
 var $$etemp$175$0=8;
 var $$etemp$175$1=0;

 var $719=HEAP32[(($617)>>2)];
 var $720=($719|0)==0;
 if($720){label=164;break;}else{label=148;break;}
 case 148: 
 var $721=HEAP32[(($616)>>2)];
 var $722=$721;
 var $ludp_idx_i_i_i_i_i_i=(($604)|0);
 var $723=(($packet_i_i_i_i_i_i_i)|0);
 var $724=(($packet_i_i_i_i_i_i_i+1)|0);
 var $725=$724;
 var $726=(($packet_i_i_i_i_i_i_i+5)|0);
 var $727=$buffer_i_i_i_i_i_i;
 var $tmp_03_i_i_i_i_i=$722;var $tmp_i_04_i_i_i_i_i=0;var $730=$721;var $729=$719;label=149;break;
 case 149: 
 var $729;
 var $730;
 var $tmp_i_04_i_i_i_i_i;
 var $tmp_03_i_i_i_i_i;
 var $731=(($tmp_03_i_i_i_i_i+24)|0);
 var $732=HEAP8[($731)];
 var $733=(($732<<24)>>24)==3;
 if($733){label=150;break;}else{var $817=$730;var $816=$729;label=163;break;}
 case 150: 
 var $735=$730;
 var $736=(($735+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+24)|0);
 var $737=HEAP8[($736)];
 var $738=(($737<<24)>>24)==0;
 if($738){var $817=$730;var $816=$729;label=163;break;}else{label=151;break;}
 case 151: 
 var $739=(($735+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+112)|0);
 var $740=HEAP32[(($739)>>2)];
 var $741=(($735+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+116)|0);
 var $742=HEAP32[(($741)>>2)];
 var $743=($740|0)==($742|0);
 if($743){var $817=$730;var $816=$729;label=163;break;}else{label=152;break;}
 case 152: 
 var $745=(($tmp_03_i_i_i_i_i+40)|0);
 var $ld$176$0=(($745)|0);
 var $746$0=HEAP32[(($ld$176$0)>>2)];
 var $ld$177$1=(($745+4)|0);
 var $746$1=HEAP32[(($ld$177$1)>>2)];
 var $747=(($tmp_03_i_i_i_i_i+28)|0);
 var $748=HEAP32[(($747)>>2)];
 var $749$0=$748;
 var $749$1=0;
 var $$etemp$178$0=1000000;
 var $$etemp$178$1=0;
 var $750$0=___udivdi3($$etemp$178$0,$$etemp$178$1,$749$0,$749$1);var $750$1=tempRet0;
 var $751$0=_i64Add($750$0,$750$1,$746$0,$746$1);var $751$1=tempRet0;
 var $752=(($751$1>>>0) > ($718$1>>>0)) | (((($751$1>>>0) == ($718$1>>>0) & ($751$0>>>0) >  ($718$0>>>0))));
 if($752){var $817=$730;var $816=$729;label=163;break;}else{label=153;break;}
 case 153: 
 var $753=(($746$1>>>0) < ($718$1>>>0)) | (((($746$1>>>0) == ($718$1>>>0) & ($746$0>>>0) <  ($718$0>>>0))));
 if($753){var $j_02_i_i_i_i_i$1=$746$1;var $j_02_i_i_i_i_i$0=$746$0;var $754=$730;label=154;break;}else{var $_pre_i3_i_i_i_i=$730;var $_pre9_i_i_i_i_i=$729;label=162;break;}
 case 154: 
 var $754;
 var $j_02_i_i_i_i_i$0;
 var $j_02_i_i_i_i_i$1;
 var $755=$754;
 var $$etemp$179$0=1024;
 var $$etemp$179$1=0;

 var $756=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+1148)|0);
 var $757=HEAP16[(($756)>>1)];
 var $758=(($757<<16)>>16)==0;
 if($758){label=156;break;}else{label=155;break;}
 case 155: 
 var $760=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+124)|0);
 var $761=(($760)|0);
 var $762=HEAP32[(($761)>>2)];
 var $ludp_idx2_val_i_i_i_i_i_i=HEAP32[(($ludp_idx_i_i_i_i_i_i)>>2)];
 var $763=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+76)|0);
 var $764=HEAP32[(($763)>>2)];
 var $765=(((($762>>>0))%(($764>>>0)))&-1);
 var $$etemp$180$0=1029;
 var $$etemp$180$1=0;

 HEAP8[($723)]=18;
 var $766=_htonl($762);
 tempBigInt=$766;HEAP8[($725)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($725)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($725)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($725)+(3))|0)]=tempBigInt&0xff;
 var $767=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+72)|0);
 var $768=HEAP32[(($767)>>2)];
 var $769=(($768+((($765)*(1026))&-1))|0);
 var $770=(($768+((($765)*(1026))&-1)+1024)|0);
 var $771=HEAP16[(($770)>>1)];
 var $772=($771&65535);
 assert($772 % 1 === 0);(_memcpy($726, $769, $772)|0);
 var $773=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1))|0);
 var $774=HEAP16[(($770)>>1)];
 var $775=($774&65535);
 var $776=((($775)+(5))|0);
 var $777=_sendpacket($ludp_idx2_val_i_i_i_i_i_i,$773,$723,$776);
 var $$etemp$181$0=1029;
 var $$etemp$181$1=0;

 var $778=HEAP16[(($756)>>1)];
 var $779=((($778)-(1))&65535);
 HEAP16[(($756)>>1)]=$779;
 var $780=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+128)|0);
 var $781=$780;
 var $782=($779&65535);
 var $783=$782<<2;
 assert($783 % 1 === 0);(_memcpy($727, $781, $783)|0);
 var $784=$760;
 assert($783 % 1 === 0);(_memcpy($784, $727, $783)|0);
 var $_0_i1_i_i_i_i_i=$777;label=158;break;
 case 156: 
 var $786=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+112)|0);
 var $787=HEAP32[(($786)>>2)];
 var $788=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+104)|0);
 var $789=HEAP32[(($788)>>2)];
 var $790=($787|0)==($789|0);
 if($790){label=161;break;}else{label=157;break;}
 case 157: 
 var $ludp_idx_val_i_i_i_i_i_i=HEAP32[(($ludp_idx_i_i_i_i_i_i)>>2)];
 var $792=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+76)|0);
 var $793=HEAP32[(($792)>>2)];
 var $794=(((($789>>>0))%(($793>>>0)))&-1);
 var $$etemp$182$0=1029;
 var $$etemp$182$1=0;

 HEAP8[($723)]=18;
 var $795=_htonl($789);
 tempBigInt=$795;HEAP8[($725)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($725)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($725)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($725)+(3))|0)]=tempBigInt&0xff;
 var $796=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1)+72)|0);
 var $797=HEAP32[(($796)>>2)];
 var $798=(($797+((($794)*(1026))&-1))|0);
 var $799=(($797+((($794)*(1026))&-1)+1024)|0);
 var $800=HEAP16[(($799)>>1)];
 var $801=($800&65535);
 assert($801 % 1 === 0);(_memcpy($726, $798, $801)|0);
 var $802=(($755+((($tmp_i_04_i_i_i_i_i)*(1160))&-1))|0);
 var $803=HEAP16[(($799)>>1)];
 var $804=($803&65535);
 var $805=((($804)+(5))|0);
 var $806=_sendpacket($ludp_idx_val_i_i_i_i_i_i,$802,$723,$805);
 var $$etemp$183$0=1029;
 var $$etemp$183$1=0;

 var $807=HEAP32[(($788)>>2)];
 var $808=((($807)+(1))|0);
 HEAP32[(($788)>>2)]=$808;
 var $_0_i1_i_i_i_i_i=$806;label=158;break;
 case 158: 
 var $_0_i1_i_i_i_i_i;
 var $$etemp$184$0=1024;
 var $$etemp$184$1=0;

 var $809=($_0_i1_i_i_i_i_i|0)<1;
 if($809){label=161;break;}else{label=159;break;}
 case 159: 
 var $811=HEAP32[(($747)>>2)];
 var $812$0=$811;
 var $812$1=0;
 var $$etemp$185$0=1000000;
 var $$etemp$185$1=0;
 var $813$0=___udivdi3($$etemp$185$0,$$etemp$185$1,$812$0,$812$1);var $813$1=tempRet0;
 var $814$0=_i64Add($813$0,$813$1,$j_02_i_i_i_i_i$0,$j_02_i_i_i_i_i$1);var $814$1=tempRet0;
 var $815=(($814$1>>>0) < ($718$1>>>0)) | (((($814$1>>>0) == ($718$1>>>0) & ($814$0>>>0) <  ($718$0>>>0))));
 if($815){label=160;break;}else{label=161;break;}
 case 160: 
 var $_pre11_i_i_i_i_i=HEAP32[(($616)>>2)];
 var $j_02_i_i_i_i_i$1=$814$1;var $j_02_i_i_i_i_i$0=$814$0;var $754=$_pre11_i_i_i_i_i;label=154;break;
 case 161: 
 var $_pre_i3_pre_i_i_i_i=HEAP32[(($616)>>2)];
 var $_pre9_i_pre_i_i_i_i=HEAP32[(($617)>>2)];
 var $_pre_i3_i_i_i_i=$_pre_i3_pre_i_i_i_i;var $_pre9_i_i_i_i_i=$_pre9_i_pre_i_i_i_i;label=162;break;
 case 162: 
 var $_pre9_i_i_i_i_i;
 var $_pre_i3_i_i_i_i;
 var $st$186$0=(($745)|0);
 HEAP32[(($st$186$0)>>2)]=$718$0;
 var $st$187$1=(($745+4)|0);
 HEAP32[(($st$187$1)>>2)]=$718$1;
 var $817=$_pre_i3_i_i_i_i;var $816=$_pre9_i_i_i_i_i;label=163;break;
 case 163: 
 var $816;
 var $817;
 var $818=((($tmp_i_04_i_i_i_i_i)+(1))|0);
 var $819=$817;
 var $820=(($819+((($818)*(1160))&-1))|0);
 var $821=($818>>>0)<($816>>>0);
 if($821){var $tmp_03_i_i_i_i_i=$820;var $tmp_i_04_i_i_i_i_i=$818;var $730=$817;var $729=$816;label=149;break;}else{label=164;break;}
 case 164: 
 var $822=$a_i3_i_i_i_i;
 var $$etemp$188$0=8;
 var $$etemp$188$1=0;

 var $823=_gettimeofday($a_i3_i_i_i_i,0);
 var $824=(($a_i3_i_i_i_i)|0);
 var $825=HEAP32[(($824)>>2)];
 var $826$0=$825;
 var $826$1=((((($825|0)<0))|0)?-1:0);
 var $$etemp$189$0=1000000;
 var $$etemp$189$1=0;
 var $827$0=___muldi3($826$0,$826$1,$$etemp$189$0,$$etemp$189$1);var $827$1=tempRet0;
 var $828=(($a_i3_i_i_i_i+4)|0);
 var $829=HEAP32[(($828)>>2)];
 var $830$0=$829;
 var $830$1=((((($829|0)<0))|0)?-1:0);
 var $831$0=_i64Add($827$0,$827$1,$830$0,$830$1);var $831$1=tempRet0;
 var $$etemp$190$0=8;
 var $$etemp$190$1=0;

 var $832=HEAP32[(($617)>>2)];
 var $833=($832|0)==0;
 if($833){label=176;break;}else{label=165;break;}
 case 165: 
 var $834=HEAP32[(($616)>>2)];
 var $835=$834;
 var $tmp_01_i6_i_i_i_i=$835;var $tmp_i_02_i5_i_i_i_i=0;label=166;break;
 case 166: 
 var $tmp_i_02_i5_i_i_i_i;
 var $tmp_01_i6_i_i_i_i;
 var $837=(($tmp_01_i6_i_i_i_i+24)|0);
 var $838=HEAP8[($837)];
 var $_off_i7_i_i_i_i=((($838)-(1))&255);
 var $switch_i8_i_i_i_i=($_off_i7_i_i_i_i&255)<2;
 if($switch_i8_i_i_i_i){label=167;break;}else{label=168;break;}
 case 167: 
 var $839=(($tmp_01_i6_i_i_i_i+26)|0);
 HEAP16[(($839)>>1)]=20;
 label=175;break;
 case 168: 
 var $841=(($838<<24)>>24)==3;
 if($841){label=169;break;}else{label=175;break;}
 case 169: 
 var $843=(($835+((($tmp_i_02_i5_i_i_i_i)*(1160))&-1)+24)|0);
 var $844=HEAP8[($843)];
 var $845=(($844<<24)>>24)==0;
 if($845){label=172;break;}else{label=170;break;}
 case 170: 
 var $846=(($835+((($tmp_i_02_i5_i_i_i_i)*(1160))&-1)+112)|0);
 var $847=HEAP32[(($846)>>2)];
 var $848=(($835+((($tmp_i_02_i5_i_i_i_i)*(1160))&-1)+116)|0);
 var $849=HEAP32[(($848)>>2)];
 var $850=($847|0)==($849|0);
 if($850){label=172;break;}else{label=171;break;}
 case 171: 
 var $852=(($tmp_01_i6_i_i_i_i+26)|0);
 HEAP16[(($852)>>1)]=20;
 label=175;break;
 case 172: 
 var $853=(($tmp_01_i6_i_i_i_i+56)|0);
 var $ld$191$0=(($853)|0);
 var $854$0=HEAP32[(($ld$191$0)>>2)];
 var $ld$192$1=(($853+4)|0);
 var $854$1=HEAP32[(($ld$192$1)>>2)];
 var $$etemp$193$0=200000;
 var $$etemp$193$1=0;
 var $855$0=_i64Add($854$0,$854$1,$$etemp$193$0,$$etemp$193$1);var $855$1=tempRet0;
 var $856=(($855$1>>>0) > ($831$1>>>0)) | (((($855$1>>>0) == ($831$1>>>0) & ($855$0>>>0) >  ($831$0>>>0))));
 var $857=(($tmp_01_i6_i_i_i_i+26)|0);
 if($856){label=173;break;}else{label=174;break;}
 case 173: 
 HEAP16[(($857)>>1)]=20;
 label=175;break;
 case 174: 
 HEAP16[(($857)>>1)]=2;
 label=175;break;
 case 175: 
 var $861=((($tmp_i_02_i5_i_i_i_i)+(1))|0);
 var $862=(($835+((($861)*(1160))&-1))|0);
 var $863=($861>>>0)<($832>>>0);
 if($863){var $tmp_01_i6_i_i_i_i=$862;var $tmp_i_02_i5_i_i_i_i=$861;label=166;break;}else{label=176;break;}
 case 176: 
 var $864=(($600+8)|0);
 var $865=HEAP32[(($864)>>2)];
 var $866=($865|0)==0;
 if($866){var $890=0;label=183;break;}else{label=177;break;}
 case 177: 
 var $867=(($600+4)|0);
 var $i_01_i_i9_i_i=0;var $868=$865;label=178;break;
 case 178: 
 var $868;
 var $i_01_i_i9_i_i;
 var $869=HEAP32[(($867)>>2)];
 var $870=(($869+((($i_01_i_i9_i_i)*(224))&-1)+208)|0);
 var $871=HEAP8[($870)];
 var $872=(($871<<24)>>24)==0;
 if($872){var $887=$868;label=182;break;}else{label=179;break;}
 case 179: 
 var $874=HEAP32[(($603)>>2)];
 var $875=(($869+((($i_01_i_i9_i_i)*(224))&-1)+210)|0);
 var $876=HEAP16[(($875)>>1)];
 var $877=($876&65535);
 var $878=(($874+8)|0);
 var $879=HEAP32[(($878)>>2)];
 var $880=($879>>>0)>($877>>>0);
 if($880){label=180;break;}else{var $887=$868;label=182;break;}
 case 180: 
 var $881=(($874+4)|0);
 var $882=HEAP32[(($881)>>2)];
 var $883=$882;
 var $884=(($883+((($877)*(1160))&-1)+24)|0);
 var $885=HEAP8[($884)];
 var $phitmp=(($885<<24)>>24)==4;
 if($phitmp){label=181;break;}else{var $887=$868;label=182;break;}
 case 181: 
 HEAP8[($870)]=4;
 var $_pre32=HEAP32[(($864)>>2)];
 var $887=$_pre32;label=182;break;
 case 182: 
 var $887;
 var $888=((($i_01_i_i9_i_i)+(1))|0);
 var $889=($888>>>0)<($887>>>0);
 if($889){var $i_01_i_i9_i_i=$888;var $868=$887;label=178;break;}else{var $890=$887;label=183;break;}
 case 183: 
 var $890;
 var $891=(($nonce_i_i_i_i_i)|0);
 var $$etemp$194$0=24;
 var $$etemp$194$1=0;

 var $892=(($public_key_i_i_i_i)|0);
 var $$etemp$195$0=32;
 var $$etemp$195$1=0;

 var $893=(($session_key_i_i_i_i)|0);
 var $$etemp$196$0=32;
 var $$etemp$196$1=0;

 var $894=$zero_i_i_i_i;
 var $$etemp$197$0=4;
 var $$etemp$197$1=0;

 var $895=$zero3_i_i_i_i;
 var $$etemp$198$0=4;
 var $$etemp$198$1=0;

 var $ld$199$0=13552;
 var $896$0=HEAP32[(($ld$199$0)>>2)];
 var $ld$200$1=13556;
 var $896$1=HEAP32[(($ld$200$1)>>2)];
 var $897=($890|0)==0;
 if($897){var $1146$1=$896$1;var $1146$0=$896$0;label=234;break;}else{label=184;break;}
 case 184: 
 var $898=(($600+4)|0);
 var $899=(($packet_i_i_i_i_i_i)|0);
 var $900=(($packet_i_i_i_i_i)|0);
 var $901=(($k_i_i_i_i_i_i)|0);
 var $902=(($packet_i_i_i_i_i_i+1)|0);
 var $903=(($temp_plain_i_i_i_i_i_i_i)|0);
 var $904=(($temp_encrypted_i_i_i_i_i_i_i)|0);
 var $905=(($temp_encrypted_i_i_i_i_i_i_i+16)|0);
 var $906=(($temp_plain_i_i_i_i_i_i_i+32)|0);
 var $907=(($temp_i_i_i_i_i)|0);
 var $908=(($temp_i_i_i4_i_i)|0);
 var $909=(($temp_i_i_i_i_i+1)|0);
 var $910=(($600+44)|0);
 var $911=(($temp_i_i_i_i_i+33)|0);
 var $912=(($temp_i_i_i_i_i+57)|0);
 var $913=(($temp_i_i_i4_i_i+24)|0);
 var $914=(($id_i_i_i_i_i)|0);
 var $i_06_i_i_i_i=0;label=185;break;
 case 185: 
 var $i_06_i_i_i_i;
 var $915=HEAP32[(($898)>>2)];
 var $916=(($915+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 var $917=HEAP8[($916)];
 if((($917<<24)>>24)==1){ label=186;break;}else if((($917<<24)>>24)==0){ label=232;break;}else{label=206;break;}
 case 186: 
 var $$etemp$201$0=1024;
 var $$etemp$201$1=0;

 var $919=HEAP32[(($603)>>2)];
 var $920=(($915+((($i_06_i_i_i_i)*(224))&-1)+210)|0);
 var $921=HEAP16[(($920)>>1)];
 var $922=($921&65535);
 var $923=(($919+8)|0);
 var $924=HEAP32[(($923)>>2)];
 var $925=($924>>>0)>($922>>>0);
 if($925){label=187;break;}else{label=206;break;}
 case 187: 
 var $927=(($919+4)|0);
 var $928=HEAP32[(($927)>>2)];
 var $929=$928;
 var $930=(($929+((($922)*(1160))&-1)+24)|0);
 var $931=HEAP8[($930)];
 var $932=(($931<<24)>>24)==0;
 if($932){label=202;break;}else{label=188;break;}
 case 188: 
 var $933=(($929+((($922)*(1160))&-1)+96)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=(($929+((($922)*(1160))&-1)+120)|0);
 var $936=HEAP32[(($935)>>2)];
 var $937=($934|0)==($936|0);
 if($937){label=202;break;}else{label=189;break;}
 case 189: 
 var $938=(($929+((($922)*(1160))&-1)+84)|0);
 var $939=HEAP32[(($938)>>2)];
 var $940=(((($936>>>0))%(($939>>>0)))&-1);
 var $941=(($929+((($922)*(1160))&-1)+80)|0);
 var $942=HEAP32[(($941)>>2)];
 var $943=(($942+((($940)*(1026))&-1))|0);
 var $944=HEAP8[($943)];
 var $phitmp4=(($944<<24)>>24)==2;
 if($phitmp4){label=190;break;}else{label=202;break;}
 case 190: 
 var $945=$940&65535;
 var $946=(($942+((($945)*(1026))&-1)+1024)|0);
 var $947=HEAP16[(($946)>>1)];
 var $948=(($942+((($945)*(1026))&-1))|0);
 var $949=($947&65535);
 assert($949 % 1 === 0);(_memcpy($907, $948, $949)|0);
 var $950=((($936)+(1))|0);
 HEAP32[(($935)>>2)]=$950;
 HEAP16[(($946)>>1)]=0;
 var $phitmp14=(($947<<16)>>16)==129;
 var $951=HEAP8[($907)];
 var $952=(($951<<24)>>24)==2;
 var $or_cond_i_i_i_i=$phitmp14&$952;
 if($or_cond_i_i_i_i){label=191;break;}else{label=201;break;}
 case 191: 
 var $$etemp$202$0=56;
 var $$etemp$202$1=0;

 assert(32 % 1 === 0);(_memcpy($892, $909, 32)|0);
 var $$etemp$203$0=32;
 var $$etemp$203$1=0;

 var $$etemp$204$0=32;
 var $$etemp$204$1=0;

 _crypto_scalarmult_curve25519_ref($914,$910,$892);
 _crypto_core_hsalsa20($901,14752,$914,104);
 var $$etemp$205$0=32;
 var $$etemp$205$1=0;

 var $$etemp$206$0=1056;
 var $$etemp$206$1=0;

 var $$etemp$207$0=1040;
 var $$etemp$207$1=0;

 _memset($904, 0, 1040)|0;
 assert(72 % 1 === 0);(_memcpy($905, $912, 72)|0);
 var $$etemp$208$0=88;
 var $$etemp$208$1=0;
 var $954=_crypto_secretbox_xsalsa20poly1305_open($903,$904,$$etemp$208$0,$$etemp$208$1,$911,$901);
 var $955=($954|0)==-1;
 if($955){label=201;break;}else{var $check_01_i_i_i_i_i_i_i_i=0;var $i_02_i_i_i_i_i_i_i_i=0;label=192;break;}
 case 192: 
 var $i_02_i_i_i_i_i_i_i_i;
 var $check_01_i_i_i_i_i_i_i_i;
 var $956=(($temp_plain_i_i_i_i_i_i_i+$i_02_i_i_i_i_i_i_i_i)|0);
 var $957=HEAP8[($956)];
 var $958=$957|$check_01_i_i_i_i_i_i_i_i;
 var $959=((($i_02_i_i_i_i_i_i_i_i)+(1))|0);
 var $960=($959>>>0)<32;
 if($960){var $check_01_i_i_i_i_i_i_i_i=$958;var $i_02_i_i_i_i_i_i_i_i=$959;label=192;break;}else{label=193;break;}
 case 193: 
 var $961=(($958<<24)>>24)==0;
 if($961){label=194;break;}else{label=201;break;}
 case 194: 
 assert(56 % 1 === 0);(_memcpy($908, $906, 56)|0);
 var $$etemp$209$0=32;
 var $$etemp$209$1=0;

 assert(24 % 1 === 0);(_memcpy($891, $906, 24)|0);
 assert(32 % 1 === 0);(_memcpy($893, $913, 32)|0);
 var $963=HEAP32[(($898)>>2)];
 var $964=(($963+((($i_06_i_i_i_i)*(224))&-1))|0);
 var $_03_i_i_i_i=32;var $l_04_i_i_i_i=$892;var $r_05_i_i_i_i=$964;label=195;break;
 case 195: 
 var $r_05_i_i_i_i;
 var $l_04_i_i_i_i;
 var $_03_i_i_i_i;
 var $965=HEAP8[($l_04_i_i_i_i)];
 var $966=HEAP8[($r_05_i_i_i_i)];
 var $967=(($965<<24)>>24)==(($966<<24)>>24);
 if($967){label=196;break;}else{label=200;break;}
 case 196: 
 var $969=((($_03_i_i_i_i)-(1))|0);
 var $970=(($l_04_i_i_i_i+1)|0);
 var $971=(($r_05_i_i_i_i+1)|0);
 var $972=($969|0)==0;
 if($972){label=197;break;}else{var $_03_i_i_i_i=$969;var $l_04_i_i_i_i=$970;var $r_05_i_i_i_i=$971;label=195;break;}
 case 197: 
 var $973=(($963+((($i_06_i_i_i_i)*(224))&-1)+56)|0);
 assert(24 % 1 === 0);(_memcpy($973, $891, 24)|0);
 var $974=HEAP32[(($898)>>2)];
 var $975=(($974+((($i_06_i_i_i_i)*(224))&-1)+144)|0);
 assert(32 % 1 === 0);(_memcpy($975, $893, 32)|0);
 var $976=HEAP32[(($898)>>2)];
 var $i_01_i_i_i11_i_i=0;label=198;break;
 case 198: 
 var $i_01_i_i_i11_i_i;
 var $978=(($976+((($i_06_i_i_i_i)*(224))&-1)+56+$i_01_i_i_i11_i_i)|0);
 var $979=HEAP8[($978)];
 var $980=((($979)+(1))&255);
 HEAP8[($978)]=$980;
 var $981=(($980<<24)>>24)==0;
 var $982=((($i_01_i_i_i11_i_i)+(1))|0);
 var $983=($982>>>0)<24;
 var $or_cond_i_i_i12_i_i=$981&$983;
 if($or_cond_i_i_i12_i_i){var $i_01_i_i_i11_i_i=$982;label=198;break;}else{label=199;break;}
 case 199: 
 HEAP32[(($zero_i_i_i_i)>>2)]=0;
 var $984=HEAP32[(($898)>>2)];
 var $985=(($984+((($i_06_i_i_i_i)*(224))&-1)+144)|0);
 var $986=(($984+((($i_06_i_i_i_i)*(224))&-1)+112)|0);
 var $987=(($984+((($i_06_i_i_i_i)*(224))&-1)+176)|0);
 var $$etemp$210$0=32;
 var $$etemp$210$1=0;

 _crypto_scalarmult_curve25519_ref($914,$986,$985);
 _crypto_core_hsalsa20($987,14752,$914,104);
 var $$etemp$211$0=32;
 var $$etemp$211$1=0;

 var $988=HEAP32[(($898)>>2)];
 var $989=(($988+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($989)]=3;
 var $990=_write_cryptpacket($600,$i_06_i_i_i_i,$894,4);
 var $991=HEAP32[(($898)>>2)];
 var $992=(($991+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($992)]=2;
 label=206;break;
 case 200: 
 var $993=(($963+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($993)]=4;
 label=206;break;
 case 201: 
 var $994=HEAP32[(($898)>>2)];
 var $995=(($994+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($995)]=4;
 label=206;break;
 case 202: 
 var $997=(($919+4)|0);
 var $998=HEAP32[(($997)>>2)];
 var $999=$998;
 var $1000=(($999+((($922)*(1160))&-1)+24)|0);
 var $1001=HEAP8[($1000)];
 var $1002=(($1001<<24)>>24)==0;
 if($1002){label=206;break;}else{label=203;break;}
 case 203: 
 var $1003=(($999+((($922)*(1160))&-1)+96)|0);
 var $1004=HEAP32[(($1003)>>2)];
 var $1005=(($999+((($922)*(1160))&-1)+120)|0);
 var $1006=HEAP32[(($1005)>>2)];
 var $1007=($1004|0)==($1006|0);
 if($1007){label=206;break;}else{label=204;break;}
 case 204: 
 var $1008=(($999+((($922)*(1160))&-1)+84)|0);
 var $1009=HEAP32[(($1008)>>2)];
 var $1010=(((($1006>>>0))%(($1009>>>0)))&-1);
 var $1011=(($999+((($922)*(1160))&-1)+80)|0);
 var $1012=HEAP32[(($1011)>>2)];
 var $1013=(($1012+((($1010)*(1026))&-1))|0);
 var $1014=HEAP8[($1013)];
 var $phitmp5=(($1014<<24)>>24)==-1;
 if($phitmp5){label=206;break;}else{label=205;break;}
 case 205: 
 HEAP8[($916)]=4;
 label=206;break;
 case 206: 
 var $1016=HEAP32[(($898)>>2)];
 var $1017=(($1016+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 var $1018=HEAP8[($1017)];
 var $1019=(($1018<<24)>>24)==2;
 if($1019){label=207;break;}else{label=230;break;}
 case 207: 
 var $1021=HEAP32[(($603)>>2)];
 var $1022=(($1016+((($i_06_i_i_i_i)*(224))&-1)+210)|0);
 var $1023=HEAP16[(($1022)>>1)];
 var $1024=($1023&65535);
 var $1025=(($1021+8)|0);
 var $1026=HEAP32[(($1025)>>2)];
 var $1027=($1026>>>0)>($1024>>>0);
 if($1027){label=208;break;}else{label=230;break;}
 case 208: 
 var $1029=(($1021+4)|0);
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=$1030;
 var $1032=(($1031+((($1024)*(1160))&-1)+24)|0);
 var $1033=HEAP8[($1032)];
 var $1034=(($1033<<24)>>24)==0;
 if($1034){label=226;break;}else{label=209;break;}
 case 209: 
 var $1035=(($1031+((($1024)*(1160))&-1)+96)|0);
 var $1036=HEAP32[(($1035)>>2)];
 var $1037=(($1031+((($1024)*(1160))&-1)+120)|0);
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=($1036|0)==($1038|0);
 if($1039){label=226;break;}else{label=210;break;}
 case 210: 
 var $1040=(($1031+((($1024)*(1160))&-1)+84)|0);
 var $1041=HEAP32[(($1040)>>2)];
 var $1042=(((($1038>>>0))%(($1041>>>0)))&-1);
 var $1043=(($1031+((($1024)*(1160))&-1)+80)|0);
 var $1044=HEAP32[(($1043)>>2)];
 var $1045=(($1044+((($1042)*(1026))&-1))|0);
 var $1046=HEAP8[($1045)];
 var $phitmp11=(($1046<<24)>>24)==3;
 if($phitmp11){label=211;break;}else{label=226;break;}
 case 211: 
 var $$etemp$212$0=1024;
 var $$etemp$212$1=0;

 var $$etemp$213$0=1024;
 var $$etemp$213$1=0;

 var $1047=$1042&65535;
 var $1048=(($1044+((($1047)*(1026))&-1)+1024)|0);
 var $1049=HEAP16[(($1048)>>1)];
 var $1050=(($1044+((($1047)*(1026))&-1))|0);
 var $1051=($1049&65535);
 assert($1051 % 1 === 0);(_memcpy($899, $1050, $1051)|0);
 var $1052=HEAP32[(($1037)>>2)];
 var $1053=((($1052)+(1))|0);
 HEAP32[(($1037)>>2)]=$1053;
 var $1054=HEAP32[(($1043)>>2)];
 var $1055=(($1054+((($1047)*(1026))&-1)+1024)|0);
 HEAP16[(($1055)>>1)]=0;
 var $_pre31=HEAP32[(($898)>>2)];
 var $1056=(($_pre31+((($i_06_i_i_i_i)*(224))&-1)+144)|0);
 var $1057=(($_pre31+((($i_06_i_i_i_i)*(224))&-1)+112)|0);
 var $$etemp$214$0=32;
 var $$etemp$214$1=0;

 var $$etemp$215$0=32;
 var $$etemp$215$1=0;

 _crypto_scalarmult_curve25519_ref($914,$1057,$1056);
 _crypto_core_hsalsa20($901,14752,$914,104);
 var $$etemp$216$0=32;
 var $$etemp$216$1=0;

 var $length_off_i_i_i_i_i_i=((($1051)-(18))|0);
 var $1058=($length_off_i_i_i_i_i_i>>>0)>1007;
 if($1058){label=215;break;}else{label=212;break;}
 case 212: 
 var $1060=((($1051)-(1))|0);
 var $1061=(($_pre31+((($i_06_i_i_i_i)*(224))&-1)+32)|0);
 var $$etemp$217$0=1056;
 var $$etemp$217$1=0;

 var $$etemp$218$0=1040;
 var $$etemp$218$1=0;

 _memset($904, 0, 1040)|0;
 assert($1060 % 1 === 0);(_memcpy($905, $902, $1060)|0);
 var $1062=((($1051)+(15))|0);
 var $1063$0=$1062;
 var $1063$1=0;
 var $1064=_crypto_secretbox_xsalsa20poly1305_open($903,$904,$1063$0,$1063$1,$1061,$901);
 var $1065=($1064|0)==-1;
 if($1065){label=215;break;}else{var $check_01_i_i_i_i_i_i_i=0;var $i_02_i_i_i_i_i_i_i=0;label=213;break;}
 case 213: 
 var $i_02_i_i_i_i_i_i_i;
 var $check_01_i_i_i_i_i_i_i;
 var $1066=(($temp_plain_i_i_i_i_i_i_i+$i_02_i_i_i_i_i_i_i)|0);
 var $1067=HEAP8[($1066)];
 var $1068=$1067|$check_01_i_i_i_i_i_i_i;
 var $1069=((($i_02_i_i_i_i_i_i_i)+(1))|0);
 var $1070=($1069>>>0)<32;
 if($1070){var $check_01_i_i_i_i_i_i_i=$1068;var $i_02_i_i_i_i_i_i_i=$1069;label=213;break;}else{label=214;break;}
 case 214: 
 var $1071=(($1068<<24)>>24)==0;
 if($1071){label=216;break;}else{label=215;break;}
 case 215: 
 var $$etemp$219$0=32;
 var $$etemp$219$1=0;

 HEAP32[(($zero3_i_i_i_i)>>2)]=0;
 label=225;break;
 case 216: 
 var $1072=((($1051)-(17))|0);
 assert($1072 % 1 === 0);(_memcpy($900, $906, $1072)|0);
 var $$etemp$220$0=32;
 var $$etemp$220$1=0;

 HEAP32[(($zero3_i_i_i_i)>>2)]=0;
 var $1073=($1072|0)==4;
 if($1073){var $_03_i19_i_i_i=3;var $l_04_i18_i_i_i=$895;var $r_05_i17_i_i_i=$900;var $1074=0;label=217;break;}else{label=225;break;}
 case 217: 
 var $1074;
 var $r_05_i17_i_i_i;
 var $l_04_i18_i_i_i;
 var $_03_i19_i_i_i;
 var $1075=HEAP8[($r_05_i17_i_i_i)];
 var $1076=(($1074<<24)>>24)==(($1075<<24)>>24);
 if($1076){label=218;break;}else{label=225;break;}
 case 218: 
 var $1078=(($l_04_i18_i_i_i+1)|0);
 var $1079=($_03_i19_i_i_i|0)==0;
 if($1079){label=220;break;}else{label=219;break;}
 case 219: 
 var $1080=(($r_05_i17_i_i_i+1)|0);
 var $_pre46=HEAP8[($1078)];
 var $phitmp48=((($_03_i19_i_i_i)-(1))|0);
 var $_03_i19_i_i_i=$phitmp48;var $l_04_i18_i_i_i=$1078;var $r_05_i17_i_i_i=$1080;var $1074=$_pre46;label=217;break;
 case 220: 
 var $1081=HEAP32[(($898)>>2)];
 var $i_01_i1_i_i_i_i=0;label=221;break;
 case 221: 
 var $i_01_i1_i_i_i_i;
 var $1083=(($1081+((($i_06_i_i_i_i)*(224))&-1)+32+$i_01_i1_i_i_i_i)|0);
 var $1084=HEAP8[($1083)];
 var $1085=((($1084)+(1))&255);
 HEAP8[($1083)]=$1085;
 var $1086=(($1085<<24)>>24)==0;
 var $1087=((($i_01_i1_i_i_i_i)+(1))|0);
 var $1088=($1087>>>0)<24;
 var $or_cond_i2_i_i_i_i=$1086&$1088;
 if($or_cond_i2_i_i_i_i){var $i_01_i1_i_i_i_i=$1087;label=221;break;}else{label=222;break;}
 case 222: 
 var $1089=HEAP32[(($898)>>2)];
 var $1090=(($1089+((($i_06_i_i_i_i)*(224))&-1)+144)|0);
 var $1091=(($1089+((($i_06_i_i_i_i)*(224))&-1)+112)|0);
 var $1092=(($1089+((($i_06_i_i_i_i)*(224))&-1)+176)|0);
 var $$etemp$221$0=32;
 var $$etemp$221$1=0;

 _crypto_scalarmult_curve25519_ref($914,$1091,$1090);
 _crypto_core_hsalsa20($1092,14752,$914,104);
 var $$etemp$222$0=32;
 var $$etemp$222$1=0;

 var $1093=HEAP32[(($898)>>2)];
 var $1094=(($1093+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($1094)]=3;
 var $1095=HEAP32[(($898)>>2)];
 var $1096=(($1095+((($i_06_i_i_i_i)*(224))&-1)+216)|0);
 var $$etemp$223$0=-1;
 var $$etemp$223$1=-1;
 var $st$224$0=(($1096)|0);
 HEAP32[(($st$224$0)>>2)]=$$etemp$223$0;
 var $st$225$1=(($1096+4)|0);
 HEAP32[(($st$225$1)>>2)]=$$etemp$223$1;
 var $1097=HEAP32[(($603)>>2)];
 var $1098=(($1095+((($i_06_i_i_i_i)*(224))&-1)+210)|0);
 var $1099=HEAP16[(($1098)>>1)];
 var $1100=($1099&65535);
 var $1101=(($1097+8)|0);
 var $1102=HEAP32[(($1101)>>2)];
 var $1103=($1102>>>0)>($1100>>>0);
 if($1103){label=223;break;}else{label=230;break;}
 case 223: 
 var $1105=(($1097+4)|0);
 var $1106=HEAP32[(($1105)>>2)];
 var $1107=$1106;
 var $1108=(($1107+((($1100)*(1160))&-1)+24)|0);
 var $1109=HEAP8[($1108)];
 var $1110=(($1109<<24)>>24)==0;
 if($1110){label=230;break;}else{label=224;break;}
 case 224: 
 var $1112=(($1107+((($1100)*(1160))&-1)+64)|0);
 var $$etemp$226$0=-1;
 var $$etemp$226$1=-1;
 var $st$227$0=(($1112)|0);
 HEAP32[(($st$227$0)>>2)]=$$etemp$226$0;
 var $st$228$1=(($1112+4)|0);
 HEAP32[(($st$228$1)>>2)]=$$etemp$226$1;
 var $1113=(($1107+((($1100)*(1160))&-1)+1153)|0);
 HEAP8[($1113)]=1;
 var $1114=(($1107+((($1100)*(1160))&-1)+25)|0);
 HEAP8[($1114)]=0;
 label=230;break;
 case 225: 
 var $1115=HEAP32[(($898)>>2)];
 var $1116=(($1115+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($1116)]=4;
 label=230;break;
 case 226: 
 var $1118=(($1021+4)|0);
 var $1119=HEAP32[(($1118)>>2)];
 var $1120=$1119;
 var $1121=(($1120+((($1024)*(1160))&-1)+24)|0);
 var $1122=HEAP8[($1121)];
 var $1123=(($1122<<24)>>24)==0;
 if($1123){label=230;break;}else{label=227;break;}
 case 227: 
 var $1124=(($1120+((($1024)*(1160))&-1)+96)|0);
 var $1125=HEAP32[(($1124)>>2)];
 var $1126=(($1120+((($1024)*(1160))&-1)+120)|0);
 var $1127=HEAP32[(($1126)>>2)];
 var $1128=($1125|0)==($1127|0);
 if($1128){label=230;break;}else{label=228;break;}
 case 228: 
 var $1129=(($1120+((($1024)*(1160))&-1)+84)|0);
 var $1130=HEAP32[(($1129)>>2)];
 var $1131=(((($1127>>>0))%(($1130>>>0)))&-1);
 var $1132=(($1120+((($1024)*(1160))&-1)+80)|0);
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=(($1133+((($1131)*(1026))&-1))|0);
 var $1135=HEAP8[($1134)];
 var $phitmp12=(($1135<<24)>>24)==-1;
 if($phitmp12){label=230;break;}else{label=229;break;}
 case 229: 
 HEAP8[($1017)]=4;
 label=230;break;
 case 230: 
 var $1137=HEAP32[(($898)>>2)];
 var $1138=(($1137+((($i_06_i_i_i_i)*(224))&-1)+216)|0);
 var $ld$229$0=(($1138)|0);
 var $1139$0=HEAP32[(($ld$229$0)>>2)];
 var $ld$230$1=(($1138+4)|0);
 var $1139$1=HEAP32[(($ld$230$1)>>2)];
 var $1140=(($896$1>>>0) > ($1139$1>>>0)) | (((($896$1>>>0) == ($1139$1>>>0) & ($896$0>>>0) >  ($1139$0>>>0))));
 if($1140){label=231;break;}else{label=232;break;}
 case 231: 
 var $1142=(($1137+((($i_06_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($1142)]=4;
 label=232;break;
 case 232: 
 var $1143=((($i_06_i_i_i_i)+(1))|0);
 var $1144=HEAP32[(($864)>>2)];
 var $1145=($1143>>>0)<($1144>>>0);
 if($1145){var $i_06_i_i_i_i=$1143;label=185;break;}else{label=233;break;}
 case 233: 
 var $ld$231$0=13552;
 var $_pre25$0=HEAP32[(($ld$231$0)>>2)];
 var $ld$232$1=13556;
 var $_pre25$1=HEAP32[(($ld$232$1)>>2)];
 var $1146$1=$_pre25$1;var $1146$0=$_pre25$0;label=234;break;
 case 234: 
 var $1146$0;
 var $1146$1;
 var $$etemp$233$0=24;
 var $$etemp$233$1=0;

 var $$etemp$234$0=32;
 var $$etemp$234$1=0;

 var $$etemp$235$0=32;
 var $$etemp$235$1=0;

 var $$etemp$236$0=4;
 var $$etemp$236$1=0;

 var $$etemp$237$0=4;
 var $$etemp$237$1=0;

 var $1147=(($137+20)|0);
 var $1148=HEAP32[(($1147)>>2)];
 var $1149=(($dest_node_i_i1_i_i_i)|0);
 var $$etemp$238$0=56;
 var $$etemp$238$1=0;

 var $1150=(($1148+2104)|0);
 var $ld$239$0=(($1150)|0);
 var $1151$0=HEAP32[(($ld$239$0)>>2)];
 var $ld$240$1=(($1150+4)|0);
 var $1151$1=HEAP32[(($ld$240$1)>>2)];
 var $1152=(($1151$0|0) == ($1146$0|0)) & (($1151$1|0) == ($1146$1|0));
 if($1152){label=287;break;}else{label=235;break;}
 case 235: 
 var $1154=(($1)|0);
 var $$etemp$241$0=24;
 var $$etemp$241$1=0;

 var $count_03_i_i_i_i=0;var $i_04_i_i_i_i=0;var $1156$1=$1146$1;var $1156$0=$1146$0;label=236;break;
 case 236: 
 var $1156$0;
 var $1156$1;
 var $i_04_i_i_i_i;
 var $count_03_i_i_i_i;
 var $1157=(($1148+16+((($i_04_i_i_i_i)*(152))&-1)+128)|0);
 var $ld$242$0=(($1157)|0);
 var $1158$0=HEAP32[(($ld$242$0)>>2)];
 var $ld$243$1=(($1157+4)|0);
 var $1158$1=HEAP32[(($ld$243$1)>>2)];
 var $$etemp$244$0=120;
 var $$etemp$244$1=0;
 var $1159$0=_i64Add($1158$0,$1158$1,$$etemp$244$0,$$etemp$244$1);var $1159$1=tempRet0;
 var $1160=(($1159$1>>>0) > ($1156$1>>>0)) | (((($1159$1>>>0) == ($1156$1>>>0) & ($1159$0>>>0) >  ($1156$0>>>0))));
 if($1160){label=237;break;}else{var $count_1_i_i_i_i=$count_03_i_i_i_i;label=240;break;}
 case 237: 
 var $1162=((($count_03_i_i_i_i)+(1))|0);
 var $1163=(($1148+16+((($i_04_i_i_i_i)*(152))&-1)+120)|0);
 var $1164=HEAP8[($1163)];
 var $1165=(($1164<<24)>>24)!=0;
 var $1166=(($1148+16+((($i_04_i_i_i_i)*(152))&-1)+136)|0);
 var $ld$245$0=(($1166)|0);
 var $1167$0=HEAP32[(($ld$245$0)>>2)];
 var $ld$246$1=(($1166+4)|0);
 var $1167$1=HEAP32[(($ld$246$1)>>2)];
 var $$etemp$248$0=10;
 var $$etemp$248$1=0;
 var $$etemp$247$0=30;
 var $$etemp$247$1=0;
 var $1168$0=($1165?$$etemp$247$0:$$etemp$248$0);
 var $1168$1=($1165?$$etemp$247$1:$$etemp$248$1);
 var $1169$0=_i64Add($1168$0,$1168$1,$1167$0,$1167$1);var $1169$1=tempRet0;
 var $1170=(($1169$1>>>0) > ($1156$1>>>0)) | (((($1169$1>>>0) == ($1156$1>>>0) & ($1169$0>>>0) >  ($1156$0>>>0))));
 if($1170){var $count_1_i_i_i_i=$1162;label=240;break;}else{label=238;break;}
 case 238: 
 var $1172=(($1148+16+((($i_04_i_i_i_i)*(152))&-1)+32)|0);
 var $1173=(($1148+16+((($i_04_i_i_i_i)*(152))&-1))|0);
 var $1174=(($1148+16+((($i_04_i_i_i_i)*(152))&-1)+56)|0);
 var $1175=(($1148+16+((($i_04_i_i_i_i)*(152))&-1)+144)|0);
 var $1176=HEAP32[(($1175)>>2)];
 var $1177=_client_send_announce_request($1148,0,$1172,$1173,$1174,$1176);
 var $1178=($1177|0)==0;
 if($1178){label=239;break;}else{var $count_1_i_i_i_i=$1162;label=240;break;}
 case 239: 
 var $ld$249$0=13552;
 var $1180$0=HEAP32[(($ld$249$0)>>2)];
 var $ld$250$1=13556;
 var $1180$1=HEAP32[(($ld$250$1)>>2)];
 var $st$251$0=(($1166)|0);
 HEAP32[(($st$251$0)>>2)]=$1180$0;
 var $st$252$1=(($1166+4)|0);
 HEAP32[(($st$252$1)>>2)]=$1180$1;
 var $count_1_i_i_i_i=$1162;label=240;break;
 case 240: 
 var $count_1_i_i_i_i;
 var $1182=((($i_04_i_i_i_i)+(1))|0);
 var $1183=($1182>>>0)<8;
 if($1183){label=241;break;}else{label=242;break;}
 case 241: 
 var $ld$253$0=13552;
 var $_pre43$0=HEAP32[(($ld$253$0)>>2)];
 var $ld$254$1=13556;
 var $_pre43$1=HEAP32[(($ld$254$1)>>2)];
 var $count_03_i_i_i_i=$count_1_i_i_i_i;var $i_04_i_i_i_i=$1182;var $1156$1=$_pre43$1;var $1156$0=$_pre43$0;label=236;break;
 case 242: 
 var $1185=($count_1_i_i_i_i|0)==8;
 if($1185){label=254;break;}else{label=243;break;}
 case 243: 
 var $1187=_rand();
 var $1188=$1187&7;
 var $1189=($count_1_i_i_i_i>>>0)<($1188>>>0);
 if($1189){label=244;break;}else{label=254;break;}
 case 244: 
 var $1191=(($nodes_list_i_i_i_i_i)|0);
 var $$etemp$255$0=448;
 var $$etemp$255$1=0;

 var $1192=(($1148)|0);
 var $1193=HEAP32[(($1192)>>2)];
 var $1194=(($1193)|0);
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=(($1195+12)|0);
 var $1197=(($nodes_list_i_i_i_i_i)|0);
 var $1198=_rand();
 var $1199=$1198<<3;
 var $1200=$1199&8;
 var $1201=$1200^10;
 var $1202=(($1201)&65535);
 _memset($1191, 0, 448)|0;
 var $1203=$num_nodes_i_i_i_i_i;
 var $$etemp$256$0=4;
 var $$etemp$256$1=0;

 HEAP32[(($num_nodes_i_i_i_i_i)>>2)]=0;
 var $1204=(($1193+8)|0);
 _get_close_nodes_inner($1193,$1196,$1197,$1202,$1204,32,$num_nodes_i_i_i_i_i,1,0);
 var $1205=(($1193+14968)|0);
 var $1206=HEAP16[(($1205)>>1)];
 var $1207=(($1206<<16)>>16)==0;
 if($1207){label=247;break;}else{label=245;break;}
 case 245: 
 var $1208=(($1193+14964)|0);
 var $i_01_i_i_i15_i_i=0;label=246;break;
 case 246: 
 var $i_01_i_i_i15_i_i;
 var $1210=HEAP32[(($1208)>>2)];
 var $1211=(($1210+((($i_01_i_i_i15_i_i)*(3808))&-1)+32)|0);
 _get_close_nodes_inner($1193,$1196,$1197,$1202,$1211,8,$num_nodes_i_i_i_i_i,1,0);
 var $1212=((($i_01_i_i_i15_i_i)+(1))|0);
 var $1213=HEAP16[(($1205)>>1)];
 var $1214=($1213&65535);
 var $1215=($1212>>>0)<($1214>>>0);
 if($1215){var $i_01_i_i_i15_i_i=$1212;label=246;break;}else{label=247;break;}
 case 247: 
 var $1216=HEAP32[(($num_nodes_i_i_i_i_i)>>2)];
 var $$etemp$257$0=4;
 var $$etemp$257$1=0;

 var $1217=($1216|0)==0;
 if($1217){label=254;break;}else{label=248;break;}
 case 248: 
 var $1218=(($id_i_i_i_i_i)|0);
 var $1219=(($sendback_i_i_i_i_i)|0);
 var $1220=(($plain_i_i_i_i_i_i)|0);
 var $1221=$plain_i_i_i_i_i_i;
 var $1222=(($plain_i_i_i_i_i_i+4)|0);
 var $1223=$1222;
 var $1224=(($plain_i_i_i_i_i_i+12)|0);
 var $1225=(($plain_i_i_i_i_i_i+44)|0);
 var $1226=(($1148+2072)|0);
 var $1227=(($sendback_i_i_i_i_i+24)|0);
 var $1228=(($path_i_i_i_i_i)|0);
 var $1229=(($dest_node_i_i_i_i_i)|0);
 var $1230=(($dest_node_i_i_i_i_i+32)|0);
 var $1231=(($1148+1232)|0);
 var $1232=(($1148+4)|0);
 var $1233=(($1148+2112)|0);
 var $1234=(($plain_i_i_i_i)|0);
 var $1235=(($plain_i_i_i_i+32)|0);
 var $1236=(($plain_i_i_i_i+64)|0);
 var $1237=(($plain_i_i_i_i+96)|0);
 var $1238=(($packet_i_i_i_i)|0);
 var $1239=(($packet_i_i_i_i+1)|0);
 var $1240=(($packet_i_i_i_i+57)|0);
 var $1241=(($packet_i_i_i_i+25)|0);
 var $1242=(($dest_node_i_i1_i_i_i+32)|0);
 var $i_12_i_i_i_i=0;label=249;break;
 case 249: 
 var $i_12_i_i_i_i;
 var $1244=(($nodes_list_i_i_i_i_i+((($i_12_i_i_i_i)*(56))&-1))|0);
 var $tmp1_i_i_i_i=(($nodes_list_i_i_i_i_i+((($i_12_i_i_i_i)*(56))&-1)+32)|0);
 assert(24 % 1 === 0);(_memcpy($1154, $tmp1_i_i_i_i, 24)|0);
 var $$etemp$258$0=32;
 var $$etemp$258$1=0;

 var $$etemp$259$0=108;
 var $$etemp$259$1=0;

 var $$etemp$260$0=68;
 var $$etemp$260$1=0;

 var $ld$261$0=13552;
 var $1245$0=HEAP32[(($ld$261$0)>>2)];
 var $ld$262$1=13556;
 var $1245$1=HEAP32[(($ld$262$1)>>2)];
 var $$etemp$263$0=24;
 var $$etemp$263$1=0;
 _randombytes($1219,$$etemp$263$0,$$etemp$263$1);
 HEAP32[(($1221)>>2)]=0;
 var $st$264$0=(($1223)|0);
 HEAP32[(($st$264$0)>>2)]=$1245$0;
 var $st$265$1=(($1223+4)|0);
 HEAP32[(($st$265$1)>>2)]=$1245$1;
 assert(32 % 1 === 0);(_memcpy($1224, $1244, 32)|0);
 assert(24 % 1 === 0);(_memcpy($1225, $tmp1_i_i_i_i, 24)|0);
 var $1246=_encrypt_data_symmetric($1226,$1219,$1220,68,$1227);
 var $not__i_i_i_i_i_i=($1246|0)==84;
 var $$etemp$266$0=68;
 var $$etemp$266$1=0;

 if($not__i_i_i_i_i_i){label=250;break;}else{label=253;break;}
 case 250: 
 _memset($1218, 0, 32)|0;
 var $$etemp$267$0=264;
 var $$etemp$267$1=0;

 var $$etemp$268$0=56;
 var $$etemp$268$1=0;

 assert(24 % 1 === 0);(_memcpy($1230, $1154, 24)|0);
 assert(32 % 1 === 0);(_memcpy($1229, $1244, 32)|0);
 var $1248=HEAP32[(($1192)>>2)];
 var $1249=_random_path($1248,$1231,-1,$path_i_i_i_i_i);
 var $1250=($1249|0)==-1;
 if($1250){label=253;break;}else{label=251;break;}
 case 251: 
 var $1252=HEAP32[(($1232)>>2)];
 var $1253=HEAP32[(($1192)>>2)];
 var $1254=(($1253)|0);
 var $1255=HEAP32[(($1254)>>2)];
 var $1256=(($1255+12)|0);
 var $1257=(($1255+44)|0);
 assert(56 % 1 === 0);(_memcpy($1149, $1229, 56)|0);
 var $$etemp$269$0=204;
 var $$etemp$269$1=0;

 assert(32 % 1 === 0);(_memcpy($1234, $1218, 32)|0);
 assert(32 % 1 === 0);(_memcpy($1235, $1256, 32)|0);
 assert(32 % 1 === 0);(_memcpy($1236, $1233, 32)|0);
 assert(108 % 1 === 0);(_memcpy($1237, $1219, 108)|0);
 var $$etemp$270$0=277;
 var $$etemp$270$1=0;

 HEAP8[($1238)]=-125;
 var $$etemp$271$0=24;
 var $$etemp$271$1=0;
 _randombytes($1239,$$etemp$271$0,$$etemp$271$1);
 var $1258=_encrypt_data($1149,$1257,$1239,$1234,204,$1240);
 var $1259=($1258|0)==220;
 if($1259){label=252;break;}else{label=253;break;}
 case 252: 
 assert(32 % 1 === 0);(_memcpy($1241, $1256, 32)|0);
 var $1261=_send_onion_packet($1252,$path_i_i_i_i_i,$1242,$1238,277);
 label=253;break;
 case 253: 
 var $$etemp$272$0=32;
 var $$etemp$272$1=0;

 var $1262=((($i_12_i_i_i_i)+(1))|0);
 var $1263=($1262>>>0)<($1216>>>0);
 if($1263){var $i_12_i_i_i_i=$1262;label=249;break;}else{label=254;break;}
 case 254: 
 var $1264=(($1148+12)|0);
 var $1265=HEAP16[(($1264)>>1)];
 var $1266=(($1265<<16)>>16)==0;
 if($1266){label=286;break;}else{label=255;break;}
 case 255: 
 var $1267=(($1148+8)|0);
 var $1268=(($nodes_list_i_i_i_i_i)|0);
 var $1269=(($1148)|0);
 var $1270=(($nodes_list_i_i_i_i_i)|0);
 var $1271=$num_nodes_i_i3_i_i_i;
 var $i_04_i_i_i=0;var $1273=$1265;label=256;break;
 case 256: 
 var $1273;
 var $i_04_i_i_i;
 var $1274=(($i_04_i_i_i)&65535);
 var $1275=$i_04_i_i_i&65535;
 var $1276=($1273&65535)>($1274&65535);
 if($1276){label=257;break;}else{label=279;break;}
 case 257: 
 var $1278=HEAP32[(($1267)>>2)];
 var $1279=(($1278+((($1275)*(2600))&-1))|0);
 var $1280=HEAP8[($1279)];
 var $1281=(($1280<<24)>>24)==0;
 if($1281){label=279;break;}else{label=258;break;}
 case 258: 
 var $1283=(($1278+((($1275)*(2600))&-1)+1)|0);
 var $1284=HEAP8[($1283)];
 var $1285=(($1284<<24)>>24)==0;
 if($1285){label=259;break;}else{label=279;break;}
 case 259: 
 var $1286=((($1275)+(1))|0);
 var $count_02_i_i_i_i=0;var $i_03_i_i19_i_i=0;label=260;break;
 case 260: 
 var $i_03_i_i19_i_i;
 var $count_02_i_i_i_i;
 var $1287=(($1278+((($1275)*(2600))&-1)+72+((($i_03_i_i19_i_i)*(152))&-1)+128)|0);
 var $ld$273$0=(($1287)|0);
 var $1288$0=HEAP32[(($ld$273$0)>>2)];
 var $ld$274$1=(($1287+4)|0);
 var $1288$1=HEAP32[(($ld$274$1)>>2)];
 var $$etemp$275$0=120;
 var $$etemp$275$1=0;
 var $1289$0=_i64Add($1288$0,$1288$1,$$etemp$275$0,$$etemp$275$1);var $1289$1=tempRet0;
 var $ld$276$0=13552;
 var $1290$0=HEAP32[(($ld$276$0)>>2)];
 var $ld$277$1=13556;
 var $1290$1=HEAP32[(($ld$277$1)>>2)];
 var $1291=(($1289$1>>>0) > ($1290$1>>>0)) | (((($1289$1>>>0) == ($1290$1>>>0) & ($1289$0>>>0) >  ($1290$0>>>0))));
 if($1291){label=261;break;}else{var $count_1_i2_i_i_i=$count_02_i_i_i_i;label=264;break;}
 case 261: 
 var $1293=((($count_02_i_i_i_i)+(1))|0);
 var $1294=(($1278+((($1275)*(2600))&-1)+72+((($i_03_i_i19_i_i)*(152))&-1)+136)|0);
 var $ld$278$0=(($1294)|0);
 var $1295$0=HEAP32[(($ld$278$0)>>2)];
 var $ld$279$1=(($1294+4)|0);
 var $1295$1=HEAP32[(($ld$279$1)>>2)];
 var $$etemp$280$0=30;
 var $$etemp$280$1=0;
 var $1296$0=_i64Add($1295$0,$1295$1,$$etemp$280$0,$$etemp$280$1);var $1296$1=tempRet0;
 var $1297=(($1296$1>>>0) > ($1290$1>>>0)) | (((($1296$1>>>0) == ($1290$1>>>0) & ($1296$0>>>0) >  ($1290$0>>>0))));
 if($1297){var $count_1_i2_i_i_i=$1293;label=264;break;}else{label=262;break;}
 case 262: 
 var $1299=(($1278+((($1275)*(2600))&-1)+72+((($i_03_i_i19_i_i)*(152))&-1)+32)|0);
 var $1300=(($1278+((($1275)*(2600))&-1)+72+((($i_03_i_i19_i_i)*(152))&-1))|0);
 var $1301=_client_send_announce_request($1148,$1286,$1299,$1300,0,-1);
 var $1302=($1301|0)==0;
 if($1302){label=263;break;}else{var $count_1_i2_i_i_i=$1293;label=264;break;}
 case 263: 
 var $ld$281$0=13552;
 var $1304$0=HEAP32[(($ld$281$0)>>2)];
 var $ld$282$1=13556;
 var $1304$1=HEAP32[(($ld$282$1)>>2)];
 var $st$283$0=(($1294)|0);
 HEAP32[(($st$283$0)>>2)]=$1304$0;
 var $st$284$1=(($1294+4)|0);
 HEAP32[(($st$284$1)>>2)]=$1304$1;
 var $count_1_i2_i_i_i=$1293;label=264;break;
 case 264: 
 var $count_1_i2_i_i_i;
 var $1306=((($i_03_i_i19_i_i)+(1))|0);
 var $1307=($1306>>>0)<8;
 if($1307){var $count_02_i_i_i_i=$count_1_i2_i_i_i;var $i_03_i_i19_i_i=$1306;label=260;break;}else{label=265;break;}
 case 265: 
 var $1309=($count_1_i2_i_i_i|0)==8;
 if($1309){label=272;break;}else{label=266;break;}
 case 266: 
 var $1311=_rand();
 var $1312=$1311&7;
 var $1313=($count_1_i2_i_i_i>>>0)<($1312>>>0);
 if($1313){label=267;break;}else{label=272;break;}
 case 267: 
 var $$etemp$285$0=448;
 var $$etemp$285$1=0;

 var $1315=HEAP32[(($1269)>>2)];
 var $1316=HEAP32[(($1267)>>2)];
 var $1317=(($1316+((($1275)*(2600))&-1)+35)|0);
 var $1318=_rand();
 var $1319=$1318<<3;
 var $1320=$1319&8;
 var $1321=$1320^10;
 var $1322=(($1321)&65535);
 _memset($1268, 0, 448)|0;
 var $$etemp$286$0=4;
 var $$etemp$286$1=0;

 HEAP32[(($num_nodes_i_i3_i_i_i)>>2)]=0;
 var $1323=(($1315+8)|0);
 _get_close_nodes_inner($1315,$1317,$1270,$1322,$1323,32,$num_nodes_i_i3_i_i_i,1,0);
 var $1324=(($1315+14968)|0);
 var $1325=HEAP16[(($1324)>>1)];
 var $1326=(($1325<<16)>>16)==0;
 if($1326){label=270;break;}else{label=268;break;}
 case 268: 
 var $1327=(($1315+14964)|0);
 var $i_01_i_i5_i_i_i=0;label=269;break;
 case 269: 
 var $i_01_i_i5_i_i_i;
 var $1329=HEAP32[(($1327)>>2)];
 var $1330=(($1329+((($i_01_i_i5_i_i_i)*(3808))&-1)+32)|0);
 _get_close_nodes_inner($1315,$1317,$1270,$1322,$1330,8,$num_nodes_i_i3_i_i_i,1,0);
 var $1331=((($i_01_i_i5_i_i_i)+(1))|0);
 var $1332=HEAP16[(($1324)>>1)];
 var $1333=($1332&65535);
 var $1334=($1331>>>0)<($1333>>>0);
 if($1334){var $i_01_i_i5_i_i_i=$1331;label=269;break;}else{label=270;break;}
 case 270: 
 var $1335=HEAP32[(($num_nodes_i_i3_i_i_i)>>2)];
 var $$etemp$287$0=4;
 var $$etemp$287$1=0;

 var $1336=($1335|0)==0;
 if($1336){label=272;break;}else{var $i_11_i_i_i_i=0;label=271;break;}
 case 271: 
 var $i_11_i_i_i_i;
 var $1337=(($nodes_list_i_i_i_i_i+((($i_11_i_i_i_i)*(56))&-1)+32)|0);
 var $1338=(($nodes_list_i_i_i_i_i+((($i_11_i_i_i_i)*(56))&-1))|0);
 var $1339=_client_send_announce_request($1148,$1286,$1337,$1338,0,-1);
 var $1340=((($i_11_i_i_i_i)+(1))|0);
 var $1341=($1340>>>0)<($1335>>>0);
 if($1341){var $i_11_i_i_i_i=$1340;label=271;break;}else{label=272;break;}
 case 272: 
 var $1342=HEAP32[(($1267)>>2)];
 var $1343=(($1342+((($1275)*(2600))&-1)+1352)|0);
 var $ld$288$0=(($1343)|0);
 var $1344$0=HEAP32[(($ld$288$0)>>2)];
 var $ld$289$1=(($1343+4)|0);
 var $1344$1=HEAP32[(($ld$289$1)>>2)];
 var $$etemp$290$0=30;
 var $$etemp$290$1=0;
 var $1345$0=_i64Add($1344$0,$1344$1,$$etemp$290$0,$$etemp$290$1);var $1345$1=tempRet0;
 var $ld$291$0=13552;
 var $1346$0=HEAP32[(($ld$291$0)>>2)];
 var $ld$292$1=13556;
 var $1346$1=HEAP32[(($ld$292$1)>>2)];
 var $1347=(($1345$1>>>0) > ($1346$1>>>0)) | (((($1345$1>>>0) == ($1346$1>>>0) & ($1345$0>>>0) >  ($1346$0>>>0))));
 if($1347){var $1356=$1342;var $1355$1=$1346$1;var $1355$0=$1346$0;label=276;break;}else{label=273;break;}
 case 273: 
 var $1349=_send_fakeid_announce($1148,$1274,0);
 var $1350=($1349|0)>0;
 if($1350){label=275;break;}else{label=274;break;}
 case 274: 
 var $_pre44=HEAP32[(($1267)>>2)];
 var $ld$293$0=13552;
 var $_pre45$0=HEAP32[(($ld$293$0)>>2)];
 var $ld$294$1=13556;
 var $_pre45$1=HEAP32[(($ld$294$1)>>2)];
 var $1356=$_pre44;var $1355$1=$_pre45$1;var $1355$0=$_pre45$0;label=276;break;
 case 275: 
 var $ld$295$0=13552;
 var $1352$0=HEAP32[(($ld$295$0)>>2)];
 var $ld$296$1=13556;
 var $1352$1=HEAP32[(($ld$296$1)>>2)];
 var $1353=HEAP32[(($1267)>>2)];
 var $1354=(($1353+((($1275)*(2600))&-1)+1352)|0);
 var $st$297$0=(($1354)|0);
 HEAP32[(($st$297$0)>>2)]=$1352$0;
 var $st$298$1=(($1354+4)|0);
 HEAP32[(($st$298$1)>>2)]=$1352$1;
 var $1356=$1353;var $1355$1=$1352$1;var $1355$0=$1352$0;label=276;break;
 case 276: 
 var $1355$0;
 var $1355$1;
 var $1356;
 var $1357=(($1356+((($1275)*(2600))&-1)+1360)|0);
 var $ld$299$0=(($1357)|0);
 var $1358$0=HEAP32[(($ld$299$0)>>2)];
 var $ld$300$1=(($1357+4)|0);
 var $1358$1=HEAP32[(($ld$300$1)>>2)];
 var $$etemp$301$0=20;
 var $$etemp$301$1=0;
 var $1359$0=_i64Add($1358$0,$1358$1,$$etemp$301$0,$$etemp$301$1);var $1359$1=tempRet0;
 var $1360=(($1359$1>>>0) > ($1355$1>>>0)) | (((($1359$1>>>0) == ($1355$1>>>0) & ($1359$0>>>0) >  ($1355$0>>>0))));
 if($1360){label=279;break;}else{label=277;break;}
 case 277: 
 var $1362=_send_fakeid_announce($1148,$1274,1);
 var $1363=($1362|0)>0;
 if($1363){label=278;break;}else{label=279;break;}
 case 278: 
 var $ld$302$0=13552;
 var $1365$0=HEAP32[(($ld$302$0)>>2)];
 var $ld$303$1=13556;
 var $1365$1=HEAP32[(($ld$303$1)>>2)];
 var $1366=HEAP32[(($1267)>>2)];
 var $1367=(($1366+((($1275)*(2600))&-1)+1360)|0);
 var $st$304$0=(($1367)|0);
 HEAP32[(($st$304$0)>>2)]=$1365$0;
 var $st$305$1=(($1367+4)|0);
 HEAP32[(($st$305$1)>>2)]=$1365$1;
 label=279;break;
 case 279: 
 var $1368=HEAP16[(($1264)>>1)];
 var $1369=($1368&65535)>($1274&65535);
 if($1369){label=280;break;}else{var $1393=$1368;label=285;break;}
 case 280: 
 var $1371=HEAP32[(($1267)>>2)];
 var $1372=(($1371+((($1275)*(2600))&-1))|0);
 var $1373=HEAP8[($1372)];
 var $1374=(($1373<<24)>>24)==0;
 if($1374){var $1393=$1368;label=285;break;}else{label=281;break;}
 case 281: 
 var $1376=(($1371+((($1275)*(2600))&-1)+2)|0);
 var $1377=HEAP8[($1376)];
 var $1378=(($1377<<24)>>24)==0;
 if($1378){var $1393=$1368;label=285;break;}else{label=282;break;}
 case 282: 
 var $1380=(($1371+((($1275)*(2600))&-1)+1)|0);
 var $1381=HEAP8[($1380)];
 var $1382=(($1381<<24)>>24)==0;
 if($1382){label=283;break;}else{var $1393=$1368;label=285;break;}
 case 283: 
 var $1384=(($1371+((($1275)*(2600))&-1)+1376)|0);
 var $ld$306$0=(($1384)|0);
 var $1385$0=HEAP32[(($ld$306$0)>>2)];
 var $ld$307$1=(($1384+4)|0);
 var $1385$1=HEAP32[(($ld$307$1)>>2)];
 var $$etemp$308$0=600;
 var $$etemp$308$1=0;
 var $1386$0=_i64Add($1385$0,$1385$1,$$etemp$308$0,$$etemp$308$1);var $1386$1=tempRet0;
 var $ld$309$0=13552;
 var $1387$0=HEAP32[(($ld$309$0)>>2)];
 var $ld$310$1=13556;
 var $1387$1=HEAP32[(($ld$310$1)>>2)];
 var $1388=(($1386$1>>>0) > ($1387$1>>>0)) | (((($1386$1>>>0) == ($1387$1>>>0) & ($1386$0>>>0) >  ($1387$0>>>0))));
 if($1388){var $1393=$1368;label=285;break;}else{label=284;break;}
 case 284: 
 HEAP8[($1376)]=0;
 var $1390=HEAP32[(($1269)>>2)];
 var $1391=HEAP32[(($1267)>>2)];
 var $1392=(($1391+((($1275)*(2600))&-1)+3)|0);
 _DHT_delfriend($1390,$1392);
 var $_pre30=HEAP16[(($1264)>>1)];
 var $1393=$_pre30;label=285;break;
 case 285: 
 var $1393;
 var $1394=HEAP32[(($1267)>>2)];
 var $1395=(($1394+((($i_04_i_i_i)*(2600))&-1)+2224)|0);
 HEAP32[(($1395)>>2)]=0;
 var $1396=((($i_04_i_i_i)+(1))|0);
 var $1397=($1393&65535);
 var $1398=($1396>>>0)<($1397>>>0);
 if($1398){var $i_04_i_i_i=$1396;var $1273=$1393;label=256;break;}else{label=286;break;}
 case 286: 
 var $1399=(($1148+2176)|0);
 HEAP32[(($1399)>>2)]=0;
 var $ld$311$0=13552;
 var $1400$0=HEAP32[(($ld$311$0)>>2)];
 var $ld$312$1=13556;
 var $1400$1=HEAP32[(($ld$312$1)>>2)];
 var $st$313$0=(($1150)|0);
 HEAP32[(($st$313$0)>>2)]=$1400$0;
 var $st$314$1=(($1150+4)|0);
 HEAP32[(($st$314$1)>>2)]=$1400$1;
 label=287;break;
 case 287: 
 var $$etemp$315$0=56;
 var $$etemp$315$1=0;

 _do_friends($137);
 var $1401=(($secret_nonce_i_i_i)|0);
 var $$etemp$316$0=24;
 var $$etemp$316$1=0;

 var $$etemp$317$0=32;
 var $$etemp$317$1=0;

 var $$etemp$318$0=32;
 var $$etemp$318$1=0;

 var $1402=HEAP32[(($599)>>2)];
 var $1403=(($1402)|0);
 var $1404=HEAP32[(($1403)>>2)];
 var $1405=(($1404+8)|0);
 var $1406=HEAP32[(($1405)>>2)];
 var $1407=($1406|0)==0;
 if($1407){label=348;break;}else{label=288;break;}
 case 288: 
 var $1408=(($1404+4)|0);
 var $1409=HEAP32[(($1408)>>2)];
 var $1410=$1409;
 var $tmp_02_i_i_i_i_i=$1410;var $tmp_i_03_i_i_i_i_i=0;label=289;break;
 case 289: 
 var $tmp_i_03_i_i_i_i_i;
 var $tmp_02_i_i_i_i_i;
 var $1412=(($tmp_02_i_i_i_i_i+25)|0);
 var $1413=HEAP8[($1412)];
 var $1414=(($1413<<24)>>24)==2;
 if($1414){label=290;break;}else{label=291;break;}
 case 290: 
 var $1416=(($tmp_02_i_i_i_i_i+96)|0);
 var $1417=HEAP32[(($1416)>>2)];
 var $1418=(($tmp_02_i_i_i_i_i+120)|0);
 var $1419=HEAP32[(($1418)>>2)];
 var $1420=($1417|0)==($1419|0);
 if($1420){label=291;break;}else{label=292;break;}
 case 291: 
 var $1422=((($tmp_i_03_i_i_i_i_i)+(1))|0);
 var $1423=(($1410+((($1422)*(1160))&-1))|0);
 var $1424=($1422>>>0)<($1406>>>0);
 if($1424){var $tmp_02_i_i_i_i_i=$1423;var $tmp_i_03_i_i_i_i_i=$1422;label=289;break;}else{label=348;break;}
 case 292: 
 HEAP8[($1412)]=1;
 var $1425=($tmp_i_03_i_i_i_i_i|0)==-1;
 if($1425){label=348;break;}else{label=293;break;}
 case 293: 
 var $1426=(($temp_i_i_i_i_i)|0);
 var $1427=(($temp_i_i_i4_i_i)|0);
 var $1428=(($temp_i_i_i_i_i+1)|0);
 var $1429=(($1402+44)|0);
 var $1430=(($temp_i_i_i_i_i+33)|0);
 var $1431=(($temp_i_i_i_i_i+57)|0);
 var $1432=(($k_i_i_i_i_i_i)|0);
 var $1433=(($temp_plain_i_i_i_i_i_i_i)|0);
 var $1434=(($temp_encrypted_i_i_i_i_i_i_i)|0);
 var $1435=(($temp_encrypted_i_i_i_i_i_i_i+16)|0);
 var $1436=(($id_i_i_i_i_i)|0);
 var $1438=$tmp_i_03_i_i_i_i_i;label=294;break;
 case 294: 
 var $1438;
 var $1439=HEAP32[(($1403)>>2)];
 var $1440=(($1439+8)|0);
 var $1441=HEAP32[(($1440)>>2)];
 var $1442=($1441>>>0)>($1438>>>0);
 if($1442){label=295;break;}else{label=311;break;}
 case 295: 
 var $1443=(($1439+4)|0);
 var $1444=HEAP32[(($1443)>>2)];
 var $1445=$1444;
 var $1446=(($1445+((($1438)*(1160))&-1)+24)|0);
 var $1447=HEAP8[($1446)];
 var $phitmp6=(($1447<<24)>>24)==4;
 if($phitmp6){label=296;break;}else{label=303;break;}
 case 296: 
 _kill_connection($1439,$1438);
 label=297;break;
 case 297: 
 var $1449=HEAP32[(($1403)>>2)];
 var $1450=(($1449+8)|0);
 var $1451=HEAP32[(($1450)>>2)];
 var $1452=($1451|0)==0;
 if($1452){label=348;break;}else{label=298;break;}
 case 298: 
 var $1453=(($1449+4)|0);
 var $1454=HEAP32[(($1453)>>2)];
 var $1455=$1454;
 var $tmp_02_i4_i_i_i_i=$1455;var $tmp_i_03_i3_i_i_i_i=0;label=299;break;
 case 299: 
 var $tmp_i_03_i3_i_i_i_i;
 var $tmp_02_i4_i_i_i_i;
 var $1457=(($tmp_02_i4_i_i_i_i+25)|0);
 var $1458=HEAP8[($1457)];
 var $1459=(($1458<<24)>>24)==2;
 if($1459){label=300;break;}else{label=301;break;}
 case 300: 
 var $1461=(($tmp_02_i4_i_i_i_i+96)|0);
 var $1462=HEAP32[(($1461)>>2)];
 var $1463=(($tmp_02_i4_i_i_i_i+120)|0);
 var $1464=HEAP32[(($1463)>>2)];
 var $1465=($1462|0)==($1464|0);
 if($1465){label=301;break;}else{label=302;break;}
 case 301: 
 var $1467=((($tmp_i_03_i3_i_i_i_i)+(1))|0);
 var $1468=(($1455+((($1467)*(1160))&-1))|0);
 var $1469=($1467>>>0)<($1451>>>0);
 if($1469){var $tmp_02_i4_i_i_i_i=$1468;var $tmp_i_03_i3_i_i_i_i=$1467;label=299;break;}else{label=348;break;}
 case 302: 
 HEAP8[($1457)]=1;
 var $1470=($tmp_i_03_i3_i_i_i_i|0)==-1;
 if($1470){label=348;break;}else{var $1438=$tmp_i_03_i3_i_i_i_i;label=294;break;}
 case 303: 
 var $1472=(($1439+4)|0);
 var $1473=HEAP32[(($1472)>>2)];
 var $1474=$1473;
 var $1475=(($1474+((($1438)*(1160))&-1)+24)|0);
 var $1476=HEAP8[($1475)];
 var $1477=(($1476<<24)>>24)==0;
 if($1477){label=311;break;}else{label=304;break;}
 case 304: 
 var $1478=(($1474+((($1438)*(1160))&-1)+96)|0);
 var $1479=HEAP32[(($1478)>>2)];
 var $1480=(($1474+((($1438)*(1160))&-1)+120)|0);
 var $1481=HEAP32[(($1480)>>2)];
 var $1482=($1479|0)==($1481|0);
 if($1482){label=311;break;}else{label=305;break;}
 case 305: 
 var $1483=(($1474+((($1438)*(1160))&-1)+84)|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=(((($1481>>>0))%(($1484>>>0)))&-1);
 var $1486=(($1474+((($1438)*(1160))&-1)+80)|0);
 var $1487=HEAP32[(($1486)>>2)];
 var $1488=(($1487+((($1485)*(1026))&-1))|0);
 var $1489=HEAP8[($1488)];
 var $phitmp7=(($1489<<24)>>24)==2;
 if($phitmp7){label=306;break;}else{label=311;break;}
 case 306: 
 var $$etemp$319$0=1024;
 var $$etemp$319$1=0;

 var $1490=$1485&65535;
 var $1491=(($1487+((($1490)*(1026))&-1)+1024)|0);
 var $1492=HEAP16[(($1491)>>1)];
 var $1493=(($1487+((($1490)*(1026))&-1))|0);
 var $1494=($1492&65535);
 assert($1494 % 1 === 0);(_memcpy($1426, $1493, $1494)|0);
 var $phitmp10=(($1492<<16)>>16)==129;
 var $1495=HEAP8[($1426)];
 var $1496=(($1495<<24)>>24)==2;
 var $or_cond_i_i30_i_i=$phitmp10&$1496;
 if($or_cond_i_i30_i_i){label=307;break;}else{label=310;break;}
 case 307: 
 var $$etemp$320$0=56;
 var $$etemp$320$1=0;

 assert(32 % 1 === 0);(_memcpy($892, $1428, 32)|0);
 var $$etemp$321$0=32;
 var $$etemp$321$1=0;

 var $$etemp$322$0=32;
 var $$etemp$322$1=0;

 _crypto_scalarmult_curve25519_ref($1436,$1429,$892);
 _crypto_core_hsalsa20($1432,14752,$1436,104);
 var $$etemp$323$0=32;
 var $$etemp$323$1=0;

 var $$etemp$324$0=1056;
 var $$etemp$324$1=0;

 var $$etemp$325$0=1040;
 var $$etemp$325$1=0;

 _memset($1434, 0, 1040)|0;
 assert(72 % 1 === 0);(_memcpy($1435, $1431, 72)|0);
 var $$etemp$326$0=88;
 var $$etemp$326$1=0;
 var $1498=_crypto_secretbox_xsalsa20poly1305_open($1433,$1434,$$etemp$326$0,$$etemp$326$1,$1430,$1432);
 var $1499=($1498|0)==-1;
 if($1499){label=310;break;}else{var $check_01_i_i_i_i_i_i32_i_i=0;var $i_02_i_i_i_i_i_i31_i_i=0;label=308;break;}
 case 308: 
 var $i_02_i_i_i_i_i_i31_i_i;
 var $check_01_i_i_i_i_i_i32_i_i;
 var $1500=(($temp_plain_i_i_i_i_i_i_i+$i_02_i_i_i_i_i_i31_i_i)|0);
 var $1501=HEAP8[($1500)];
 var $1502=$1501|$check_01_i_i_i_i_i_i32_i_i;
 var $1503=((($i_02_i_i_i_i_i_i31_i_i)+(1))|0);
 var $1504=($1503>>>0)<32;
 if($1504){var $check_01_i_i_i_i_i_i32_i_i=$1502;var $i_02_i_i_i_i_i_i31_i_i=$1503;label=308;break;}else{label=309;break;}
 case 309: 
 var $1505=(($1502<<24)>>24)==0;
 if($1505){label=312;break;}else{label=310;break;}
 case 310: 
 var $1506=HEAP32[(($1403)>>2)];
 _kill_connection($1506,$1438);
 var $$etemp$327$0=1024;
 var $$etemp$327$1=0;

 label=297;break;
 case 311: 
 _kill_connection($1439,$1438);
 label=297;break;
 case 312: 
 var $1507=(($temp_plain_i_i_i_i_i_i_i+32)|0);
 assert(56 % 1 === 0);(_memcpy($1427, $1507, 56)|0);
 var $$etemp$328$0=32;
 var $$etemp$328$1=0;

 assert(24 % 1 === 0);(_memcpy($1401, $1507, 24)|0);
 var $1508=(($temp_i_i_i4_i_i+24)|0);
 assert(32 % 1 === 0);(_memcpy($893, $1508, 32)|0);
 var $$etemp$329$0=1024;
 var $$etemp$329$1=0;

 var $1509=($1438|0)==-1;
 if($1509){label=348;break;}else{label=313;break;}
 case 313: 
 var $1511=(($137+2228)|0);
 var $1512=HEAP32[(($1511)>>2)];
 var $1513=($1512|0)==0;
 if($1513){label=347;break;}else{label=314;break;}
 case 314: 
 var $1514=(($137+2224)|0);
 var $1515=HEAP32[(($1514)>>2)];
 var $i_01_i_i36_i_i=0;label=315;break;
 case 315: 
 var $i_01_i_i36_i_i;
 var $1516=(($1515+((($i_01_i_i36_i_i)*(14072))&-1)+52)|0);
 var $1517=HEAP8[($1516)];
 var $1518=(($1517<<24)>>24)==0;
 if($1518){label=319;break;}else{label=316;break;}
 case 316: 
 var $1520=(($1515+((($i_01_i_i36_i_i)*(14072))&-1))|0);
 var $_03_i_i_i_i_i=32;var $l_04_i_i_i_i_i=$892;var $r_05_i_i_i_i_i=$1520;label=317;break;
 case 317: 
 var $r_05_i_i_i_i_i;
 var $l_04_i_i_i_i_i;
 var $_03_i_i_i_i_i;
 var $1521=HEAP8[($l_04_i_i_i_i_i)];
 var $1522=HEAP8[($r_05_i_i_i_i_i)];
 var $1523=(($1521<<24)>>24)==(($1522<<24)>>24);
 if($1523){label=318;break;}else{label=319;break;}
 case 318: 
 var $1525=((($_03_i_i_i_i_i)-(1))|0);
 var $1526=(($l_04_i_i_i_i_i+1)|0);
 var $1527=(($r_05_i_i_i_i_i+1)|0);
 var $1528=($1525|0)==0;
 if($1528){label=320;break;}else{var $_03_i_i_i_i_i=$1525;var $l_04_i_i_i_i_i=$1526;var $r_05_i_i_i_i_i=$1527;label=317;break;}
 case 319: 
 var $1529=((($i_01_i_i36_i_i)+(1))|0);
 var $1530=($1529>>>0)<($1512>>>0);
 if($1530){var $i_01_i_i36_i_i=$1529;label=315;break;}else{label=347;break;}
 case 320: 
 var $1531=($i_01_i_i36_i_i|0)==-1;
 if($1531){label=347;break;}else{label=321;break;}
 case 321: 
 var $1533=($1512>>>0)>($i_01_i_i36_i_i>>>0);
 if($1533){label=323;break;}else{label=322;break;}
 case 322: 
 var $1534=HEAP32[(($599)>>2)];
 var $1541=$1534;label=325;break;
 case 323: 
 var $1535=(($1517<<24)>>24)==4;
 var $1536=HEAP32[(($599)>>2)];
 if($1535){label=324;break;}else{var $1541=$1536;label=325;break;}
 case 324: 
 var $1538=(($1536)|0);
 var $1539=HEAP32[(($1538)>>2)];
 _kill_connection($1539,$1438);
 label=348;break;
 case 325: 
 var $1541;
 var $1542=(($1515+((($i_01_i_i36_i_i)*(14072))&-1)+36)|0);
 var $1543=HEAP32[(($1542)>>2)];
 _crypto_kill($1541,$1543);
 var $1544=HEAP32[(($599)>>2)];
 var $1545=$zero_i_i21_i_i;
 var $$etemp$330$0=4;
 var $$etemp$330$1=0;

 var $1546=(($1544)|0);
 var $1547=HEAP32[(($1546)>>2)];
 var $1548=(($1547+8)|0);
 var $1549=HEAP32[(($1548)>>2)];
 var $1550=($1549>>>0)>($1438>>>0);
 if($1550){label=326;break;}else{var $_0_i_i49_i_i=-1;label=346;break;}
 case 326: 
 var $1552=(($1547+4)|0);
 var $1553=HEAP32[(($1552)>>2)];
 var $1554=$1553;
 var $1555=(($1554+((($1438)*(1160))&-1)+24)|0);
 var $1556=HEAP8[($1555)];
 var $1557=(($1556<<24)>>24)==0;
 if($1557){var $_0_i_i49_i_i=-1;label=346;break;}else{label=327;break;}
 case 327: 
 var $1558=(($1554+((($1438)*(1160))&-1)+96)|0);
 var $1559=HEAP32[(($1558)>>2)];
 var $1560=(($1554+((($1438)*(1160))&-1)+120)|0);
 var $1561=HEAP32[(($1560)>>2)];
 var $1562=($1559|0)==($1561|0);
 if($1562){var $_0_i_i49_i_i=-1;label=346;break;}else{label=328;break;}
 case 328: 
 var $1564=(($1554+((($1438)*(1160))&-1)+84)|0);
 var $1565=HEAP32[(($1564)>>2)];
 var $1566=(((($1561>>>0))%(($1565>>>0)))&-1);
 var $1567=((($1561)+(1))|0);
 HEAP32[(($1560)>>2)]=$1567;
 var $1568=$1566&65535;
 var $1569=(($1554+((($1438)*(1160))&-1)+80)|0);
 var $1570=HEAP32[(($1569)>>2)];
 var $1571=(($1570+((($1568)*(1026))&-1)+1024)|0);
 HEAP16[(($1571)>>1)]=0;
 var $1572=(($1544+8)|0);
 var $1573=HEAP32[(($1572)>>2)];
 var $1574=((($1573)+(1))|0);
 var $1575=($1574|0)==0;
 var $1576=(($1544+4)|0);
 var $1577=HEAP32[(($1576)>>2)];
 var $1578=(($1577)|0);
 if($1575){label=329;break;}else{label=330;break;}
 case 329: 
 _free($1578);
 HEAP32[(($1576)>>2)]=0;
 var $_0_i_i49_i_i=-1;label=346;break;
 case 330: 
 var $1580=((($1574)*(224))&-1);
 var $1581=_realloc($1578,$1580);
 var $1582=($1581|0)==0;
 if($1582){var $_0_i_i49_i_i=-1;label=346;break;}else{label=331;break;}
 case 331: 
 var $1584=$1581;
 HEAP32[(($1576)>>2)]=$1584;
 var $1585=HEAP32[(($1572)>>2)];
 var $1586=(($1584+((($1585)*(224))&-1))|0);
 _memset($1586, 0, 224)|0;
 var $1587=(($1584+((($1585)*(224))&-1)+210)|0);
 HEAP16[(($1587)>>1)]=-1;
 var $i_07_i_i_i_i=0;label=333;break;
 case 332: 
 var $1589=($1594>>>0)>($1585>>>0);
 if($1589){var $_0_i_i49_i_i=-1;label=346;break;}else{var $i_07_i_i_i_i=$1594;label=333;break;}
 case 333: 
 var $i_07_i_i_i_i;
 var $1591=(($1584+((($i_07_i_i_i_i)*(224))&-1)+208)|0);
 var $1592=HEAP8[($1591)];
 var $1593=(($1592<<24)>>24)==0;
 var $1594=((($i_07_i_i_i_i)+(1))|0);
 if($1593){label=334;break;}else{label=332;break;}
 case 334: 
 var $1596=(($1438)&65535);
 var $1597=(($1584+((($i_07_i_i_i_i)*(224))&-1)+210)|0);
 HEAP16[(($1597)>>1)]=$1596;
 HEAP8[($1591)]=2;
 var $ld$331$0=13552;
 var $1598$0=HEAP32[(($ld$331$0)>>2)];
 var $ld$332$1=13556;
 var $1598$1=HEAP32[(($ld$332$1)>>2)];
 var $$etemp$333$0=10;
 var $$etemp$333$1=0;
 var $1599$0=_i64Add($1598$0,$1598$1,$$etemp$333$0,$$etemp$333$1);var $1599$1=tempRet0;
 var $1600=HEAP32[(($1576)>>2)];
 var $1601=(($1600+((($i_07_i_i_i_i)*(224))&-1)+216)|0);
 var $st$334$0=(($1601)|0);
 HEAP32[(($st$334$0)>>2)]=$1599$0;
 var $st$335$1=(($1601+4)|0);
 HEAP32[(($st$335$1)>>2)]=$1599$1;
 var $1602=(($1600+((($i_07_i_i_i_i)*(224))&-1)+32)|0);
 var $$etemp$336$0=24;
 var $$etemp$336$1=0;
 _randombytes($1602,$$etemp$336$0,$$etemp$336$1);
 var $1603=HEAP32[(($1576)>>2)];
 var $1604=(($1603+((($i_07_i_i_i_i)*(224))&-1)+56)|0);
 assert(24 % 1 === 0);(_memcpy($1604, $1401, 24)|0);
 var $1605=HEAP32[(($1576)>>2)];
 var $1606=(($1605+((($i_07_i_i_i_i)*(224))&-1)+144)|0);
 assert(32 % 1 === 0);(_memcpy($1606, $893, 32)|0);
 var $1607=HEAP32[(($1576)>>2)];
 var $i_01_i_i_i40_i_i=0;label=335;break;
 case 335: 
 var $i_01_i_i_i40_i_i;
 var $1609=(($1607+((($i_07_i_i_i_i)*(224))&-1)+56+$i_01_i_i_i40_i_i)|0);
 var $1610=HEAP8[($1609)];
 var $1611=((($1610)+(1))&255);
 HEAP8[($1609)]=$1611;
 var $1612=(($1611<<24)>>24)==0;
 var $1613=((($i_01_i_i_i40_i_i)+(1))|0);
 var $1614=($1613>>>0)<24;
 var $or_cond_i_i_i41_i_i=$1612&$1614;
 if($or_cond_i_i_i41_i_i){var $i_01_i_i_i40_i_i=$1613;label=335;break;}else{label=336;break;}
 case 336: 
 var $1615=HEAP32[(($1576)>>2)];
 var $1616=(($1615+((($i_07_i_i_i_i)*(224))&-1))|0);
 assert(32 % 1 === 0);(_memcpy($1616, $892, 32)|0);
 var $1617=HEAP32[(($1576)>>2)];
 var $1618=(($1617+((($i_07_i_i_i_i)*(224))&-1)+80)|0);
 var $1619=(($1617+((($i_07_i_i_i_i)*(224))&-1)+112)|0);
 var $$etemp$337$0=32;
 var $$etemp$337$1=0;
 _randombytes($1619,$$etemp$337$0,$$etemp$337$1);
 _crypto_scalarmult_curve25519_ref($1618,$1619,440);
 var $1620=HEAP32[(($1572)>>2)];
 var $1621=($1620|0)==($i_07_i_i_i_i|0);
 if($1621){label=337;break;}else{label=338;break;}
 case 337: 
 HEAP32[(($1572)>>2)]=$1594;
 label=338;break;
 case 338: 
 var $1624=HEAP32[(($1576)>>2)];
 var $1625=(($1624+((($i_07_i_i_i_i)*(224))&-1)+32)|0);
 var $1626=(($1624+((($i_07_i_i_i_i)*(224))&-1)+80)|0);
 var $$etemp$338$0=24;
 var $$etemp$338$1=0;

 var $$etemp$339$0=1024;
 var $$etemp$339$1=0;

 var $$etemp$340$0=56;
 var $$etemp$340$1=0;

 var $_b_i_i_i_i43_i_i=HEAP8[(136)];
 if($_b_i_i_i_i43_i_i){var $i_01_i_i_i_i_i44_i_i=0;label=340;break;}else{label=339;break;}
 case 339: 
 var $$etemp$342$0=24;
 var $$etemp$342$1=0;
 var $$etemp$341=15032;
 _randombytes($$etemp$341,$$etemp$342$0,$$etemp$342$1);
 HEAP8[(136)]=1;
 var $i_01_i_i_i_i_i44_i_i=0;label=340;break;
 case 340: 
 var $i_01_i_i_i_i_i44_i_i;
 var $1628=((15032+$i_01_i_i_i_i_i44_i_i)|0);
 var $1629=HEAP8[($1628)];
 var $1630=((($1629)+(1))&255);
 HEAP8[($1628)]=$1630;
 var $1631=(($1630<<24)>>24)==0;
 var $1632=((($i_01_i_i_i_i_i44_i_i)+(1))|0);
 var $1633=($1632>>>0)<24;
 var $or_cond_i_i_i_i_i45_i_i=$1631&$1633;
 if($or_cond_i_i_i_i_i45_i_i){var $i_01_i_i_i_i_i44_i_i=$1632;label=340;break;}else{label=341;break;}
 case 341: 
 assert(24 % 1 === 0);(_memcpy($891, 15032, 24)|0);
 assert(24 % 1 === 0);(_memcpy($1427, $1625, 24)|0);
 assert(32 % 1 === 0);(_memcpy($1508, $1626, 32)|0);
 var $1634=(($1544+44)|0);
 var $1635=_encrypt_data($892,$1634,$891,$1427,56,$1431);
 var $1636=($1635|0)==-1;
 if($1636){var $_0_i_i49_i_i=-1;label=346;break;}else{label=342;break;}
 case 342: 
 HEAP8[($1426)]=2;
 var $1637=(($1544+12)|0);
 assert(32 % 1 === 0);(_memcpy($1428, $1637, 32)|0);
 assert(24 % 1 === 0);(_memcpy($1430, $891, 24)|0);
 var $1638=HEAP32[(($1546)>>2)];
 var $1639=((($1635)+(57))|0);
 var $1640=_write_packet($1638,$1438,$1426,$1639);
 var $phitmp_i_i48_i_i=($1640|0)==1;
 var $$etemp$343$0=56;
 var $$etemp$343$1=0;

 var $$etemp$344$0=1024;
 var $$etemp$344$1=0;

 var $$etemp$345$0=24;
 var $$etemp$345$1=0;

 if($phitmp_i_i48_i_i){label=343;break;}else{var $_0_i_i49_i_i=-1;label=346;break;}
 case 343: 
 var $1642=HEAP32[(($1576)>>2)];
 var $i_01_i2_i_i_i_i=0;label=344;break;
 case 344: 
 var $i_01_i2_i_i_i_i;
 var $1644=(($1642+((($i_07_i_i_i_i)*(224))&-1)+32+$i_01_i2_i_i_i_i)|0);
 var $1645=HEAP8[($1644)];
 var $1646=((($1645)+(1))&255);
 HEAP8[($1644)]=$1646;
 var $1647=(($1646<<24)>>24)==0;
 var $1648=((($i_01_i2_i_i_i_i)+(1))|0);
 var $1649=($1648>>>0)<24;
 var $or_cond_i3_i_i_i_i=$1647&$1649;
 if($or_cond_i3_i_i_i_i){var $i_01_i2_i_i_i_i=$1648;label=344;break;}else{label=345;break;}
 case 345: 
 HEAP32[(($zero_i_i21_i_i)>>2)]=0;
 var $1650=HEAP32[(($1576)>>2)];
 var $1651=(($1650+((($i_07_i_i_i_i)*(224))&-1)+144)|0);
 var $1652=(($1650+((($i_07_i_i_i_i)*(224))&-1)+112)|0);
 var $1653=(($1650+((($i_07_i_i_i_i)*(224))&-1)+176)|0);
 var $$etemp$346$0=32;
 var $$etemp$346$1=0;

 _crypto_scalarmult_curve25519_ref($1436,$1652,$1651);
 _crypto_core_hsalsa20($1653,14752,$1436,104);
 var $$etemp$347$0=32;
 var $$etemp$347$1=0;

 var $1654=HEAP32[(($1576)>>2)];
 var $1655=(($1654+((($i_07_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($1655)]=3;
 var $1656=_write_cryptpacket($1544,$i_07_i_i_i_i,$1545,4);
 var $1657=HEAP32[(($1576)>>2)];
 var $1658=(($1657+((($i_07_i_i_i_i)*(224))&-1)+208)|0);
 HEAP8[($1658)]=2;
 var $_0_i_i49_i_i=$i_07_i_i_i_i;label=346;break;
 case 346: 
 var $_0_i_i49_i_i;
 var $$etemp$348$0=4;
 var $$etemp$348$1=0;

 var $1659=HEAP32[(($1514)>>2)];
 var $1660=(($1659+((($i_01_i_i36_i_i)*(14072))&-1)+36)|0);
 HEAP32[(($1660)>>2)]=$_0_i_i49_i_i;
 _set_friend_status($137,$i_01_i_i36_i_i,3);
 label=348;break;
 case 347: 
 var $1661=HEAP32[(($599)>>2)];
 var $1662=(($1661)|0);
 var $1663=HEAP32[(($1662)>>2)];
 _kill_connection($1663,$1438);
 label=348;break;
 case 348: 
 var $$etemp$349$0=24;
 var $$etemp$349$1=0;

 var $$etemp$350$0=32;
 var $$etemp$350$1=0;

 var $$etemp$351$0=32;
 var $$etemp$351$1=0;

 var $1664=(($137+2244)|0);
 var $1665=HEAP32[(($1664)>>2)];
 var $1666=($1665|0)==0;
 if($1666){label=388;break;}else{label=349;break;}
 case 349: 
 var $1667=(($137+2240)|0);
 var $1668=(($temp_i_i_i_i_i)|0);
 var $1669=(($temp_i_i_i_i_i+32)|0);
 var $1670=$1669;
 var $1671=(($temp_i_i_i_i_i+36)|0);
 var $1672=(($temp_i_i_i_i_i+37)|0);
 var $i_01_i_i_i=0;var $1673=$1665;label=350;break;
 case 350: 
 var $1673;
 var $i_01_i_i_i;
 var $1674=HEAP32[(($1667)>>2)];
 var $1675=(($1674+($i_01_i_i_i<<2))|0);
 var $1676=HEAP32[(($1675)>>2)];
 var $1677=($1676|0)==0;
 if($1677){var $1794=$1673;label=387;break;}else{label=351;break;}
 case 351: 
 var $1679=_time(0);
 var $1680$0=$1679;
 var $1680$1=((((($1679|0)<0))|0)?-1:0);
 var $st$352$0=13552;
 HEAP32[(($st$352$0)>>2)]=$1680$0;
 var $st$353$1=13556;
 HEAP32[(($st$353$1)>>2)]=$1680$1;
 var $1681=(($1676+456)|0);
 var $1682=(($1676+68)|0);
 var $i_02_i_i_i_i=0;var $1684$1=$1680$1;var $1684$0=$1680$0;label=352;break;
 case 352: 
 var $1684$0;
 var $1684$1;
 var $i_02_i_i_i_i;
 var $1685=(($1676+72+($i_02_i_i_i_i<<6)+56)|0);
 var $ld$354$0=(($1685)|0);
 var $1686$0=HEAP32[(($ld$354$0)>>2)];
 var $ld$355$1=(($1685+4)|0);
 var $1686$1=HEAP32[(($ld$355$1)>>2)];
 var $$etemp$356$0=30;
 var $$etemp$356$1=0;
 var $1687$0=_i64Add($1686$0,$1686$1,$$etemp$356$0,$$etemp$356$1);var $1687$1=tempRet0;
 var $1688=(($1687$1>>>0) > ($1684$1>>>0)) | (((($1687$1>>>0) == ($1684$1>>>0) & ($1687$0>>>0) >  ($1684$0>>>0))));
 if($1688){label=353;break;}else{label=362;break;}
 case 353: 
 var $1690=(($1676+72+($i_02_i_i_i_i<<6))|0);
 var $1691=HEAP32[(($1681)>>2)];
 var $1692=($1691|0)==0;
 if($1692){label=362;break;}else{label=354;break;}
 case 354: 
 var $1693=HEAP32[(($1682)>>2)];
 var $i_01_i_i_i51_i_i=0;label=356;break;
 case 355: 
 var $1695=((($i_01_i_i_i51_i_i)+(1))|0);
 var $1696=($1695>>>0)<($1691>>>0);
 if($1696){var $i_01_i_i_i51_i_i=$1695;label=356;break;}else{label=362;break;}
 case 356: 
 var $i_01_i_i_i51_i_i;
 var $1697=(($1693+((($i_01_i_i_i51_i_i)*(232))&-1))|0);
 var $_03_i_i_i55_i_i=32;var $l_04_i_i_i54_i_i=$1697;var $r_05_i_i_i53_i_i=$1690;label=357;break;
 case 357: 
 var $r_05_i_i_i53_i_i;
 var $l_04_i_i_i54_i_i;
 var $_03_i_i_i55_i_i;
 var $1698=HEAP8[($l_04_i_i_i54_i_i)];
 var $1699=HEAP8[($r_05_i_i_i53_i_i)];
 var $1700=(($1698<<24)>>24)==(($1699<<24)>>24);
 if($1700){label=358;break;}else{label=355;break;}
 case 358: 
 var $1702=((($_03_i_i_i55_i_i)-(1))|0);
 var $1703=(($l_04_i_i_i54_i_i+1)|0);
 var $1704=(($r_05_i_i_i53_i_i+1)|0);
 var $1705=($1702|0)==0;
 if($1705){label=359;break;}else{var $_03_i_i_i55_i_i=$1702;var $l_04_i_i_i54_i_i=$1703;var $r_05_i_i_i53_i_i=$1704;label=357;break;}
 case 359: 
 var $1706=($i_01_i_i_i51_i_i|0)==-1;
 if($1706){label=362;break;}else{label=360;break;}
 case 360: 
 var $1708=(($1693+((($i_01_i_i_i51_i_i)*(232))&-1)+40)|0);
 var $ld$357$0=(($1708)|0);
 var $1709$0=HEAP32[(($ld$357$0)>>2)];
 var $ld$358$1=(($1708+4)|0);
 var $1709$1=HEAP32[(($ld$358$1)>>2)];
 var $$etemp$359$0=10;
 var $$etemp$359$1=0;
 var $1710$0=_i64Add($1709$0,$1709$1,$$etemp$359$0,$$etemp$359$1);var $1710$1=tempRet0;
 var $1711=(($1710$1>>>0) > ($1684$1>>>0)) | (((($1710$1>>>0) == ($1684$1>>>0) & ($1710$0>>>0) >  ($1684$0>>>0))));
 if($1711){label=362;break;}else{label=361;break;}
 case 361: 
 var $1713=(($1676+72+($i_02_i_i_i_i<<6)+32)|0);
 _send_getnodes($1676,$1713,$i_01_i_i_i51_i_i);
 label=362;break;
 case 362: 
 var $1714=((($i_02_i_i_i_i)+(1))|0);
 var $1715=($1714>>>0)<6;
 if($1715){label=363;break;}else{label=364;break;}
 case 363: 
 var $ld$360$0=13552;
 var $_pre40$0=HEAP32[(($ld$360$0)>>2)];
 var $ld$361$1=13556;
 var $_pre40$1=HEAP32[(($ld$361$1)>>2)];
 var $i_02_i_i_i_i=$1714;var $1684$1=$_pre40$1;var $1684$0=$_pre40$0;label=352;break;
 case 364: 
 var $1716=(($1676+488)|0);
 var $ld$362$0=(($1716)|0);
 var $1717$0=HEAP32[(($ld$362$0)>>2)];
 var $ld$363$1=(($1716+4)|0);
 var $1717$1=HEAP32[(($ld$363$1)>>2)];
 var $$etemp$364$0=30;
 var $$etemp$364$1=0;
 var $1718$0=_i64Add($1717$0,$1717$1,$$etemp$364$0,$$etemp$364$1);var $1718$1=tempRet0;
 var $ld$365$0=13552;
 var $1719$0=HEAP32[(($ld$365$0)>>2)];
 var $ld$366$1=13556;
 var $1719$1=HEAP32[(($ld$366$1)>>2)];
 var $1720=(($1718$1>>>0) > ($1719$1>>>0)) | (((($1718$1>>>0) == ($1719$1>>>0) & ($1718$0>>>0) >  ($1719$0>>>0))));
 if($1720){label=367;break;}else{label=365;break;}
 case 365: 
 var $$etemp$367$0=1024;
 var $$etemp$367$1=0;

 var $1722=(($1676+460)|0);
 var $1723=HEAP32[(($1722)>>2)];
 var $1724=((($1723)+(1))|0);
 var $1725=($1724|0)==0;
 var $__i_i_i_i_i=($1725?1:$1724);
 HEAP32[(($1722)>>2)]=$__i_i_i_i_i;
 var $1726=_htonl($__i_i_i_i_i);
 var $1727=(($1676+4)|0);
 assert(32 % 1 === 0);(_memcpy($1668, $1727, 32)|0);
 tempBigInt=$1726;HEAP8[($1670)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1670)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1670)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1670)+(3))|0)]=tempBigInt&0xff;
 HEAP8[($1671)]=0;
 var $1728=_sendto_allpeers($1676,$1668,37);
 var $$etemp$368$0=1024;
 var $$etemp$368$1=0;

 var $1729=(($1728<<24)>>24)==0;
 if($1729){label=367;break;}else{label=366;break;}
 case 366: 
 var $ld$369$0=13552;
 var $1731$0=HEAP32[(($ld$369$0)>>2)];
 var $ld$370$1=13556;
 var $1731$1=HEAP32[(($ld$370$1)>>2)];
 var $st$371$0=(($1716)|0);
 HEAP32[(($st$371$0)>>2)]=$1731$0;
 var $st$372$1=(($1716+4)|0);
 HEAP32[(($st$372$1)>>2)]=$1731$1;
 label=367;break;
 case 367: 
 var $1732=HEAP32[(($1681)>>2)];
 var $1733=($1732|0)==0;
 if($1733){label=376;break;}else{var $i_01_i_i57_i_i=0;label=368;break;}
 case 368: 
 var $i_01_i_i57_i_i;
 var $1734=HEAP32[(($1682)>>2)];
 var $1735=(($1734+((($i_01_i_i57_i_i)*(232))&-1)+80)|0);
 var $ld$373$0=(($1735)|0);
 var $1736$0=HEAP32[(($ld$373$0)>>2)];
 var $ld$374$1=(($1735+4)|0);
 var $1736$1=HEAP32[(($ld$374$1)>>2)];
 var $$etemp$375$0=120;
 var $$etemp$375$1=0;
 var $1737$0=_i64Add($1736$0,$1736$1,$$etemp$375$0,$$etemp$375$1);var $1737$1=tempRet0;
 var $ld$376$0=13552;
 var $1738$0=HEAP32[(($ld$376$0)>>2)];
 var $ld$377$1=13556;
 var $1738$1=HEAP32[(($ld$377$1)>>2)];
 var $1739=(($1737$1>>>0) > ($1738$1>>>0)) | (((($1737$1>>>0) == ($1738$1>>>0) & ($1737$0>>>0) >  ($1738$0>>>0))));
 if($1739){var $1742=$1734;label=370;break;}else{label=369;break;}
 case 369: 
 _delpeer($1676,$i_01_i_i57_i_i);
 var $_pre28=HEAP32[(($1682)>>2)];
 var $1742=$_pre28;label=370;break;
 case 370: 
 var $1742;
 var $1743=($1742|0)==0;
 if($1743){label=376;break;}else{label=371;break;}
 case 371: 
 var $1745=HEAP32[(($1681)>>2)];
 var $1746=($i_01_i_i57_i_i>>>0)<($1745>>>0);
 if($1746){label=372;break;}else{label=376;break;}
 case 372: 
 var $1748=(($1742+((($i_01_i_i57_i_i)*(232))&-1)+222)|0);
 var $1749=HEAP8[($1748)];
 var $1750=(($1749<<24)>>24)==0;
 if($1750){var $1758=$1745;label=375;break;}else{label=373;break;}
 case 373: 
 var $1752=(($1742+((($i_01_i_i57_i_i)*(232))&-1)+224)|0);
 var $ld$378$0=(($1752)|0);
 var $1753$0=HEAP32[(($ld$378$0)>>2)];
 var $ld$379$1=(($1752+4)|0);
 var $1753$1=HEAP32[(($ld$379$1)>>2)];
 var $$etemp$380$0=3;
 var $$etemp$380$1=0;
 var $1754$0=_i64Add($1753$0,$1753$1,$$etemp$380$0,$$etemp$380$1);var $1754$1=tempRet0;
 var $ld$381$0=13552;
 var $1755$0=HEAP32[(($ld$381$0)>>2)];
 var $ld$382$1=13556;
 var $1755$1=HEAP32[(($ld$382$1)>>2)];
 var $1756=(($1754$1>>>0) > ($1755$1>>>0)) | (((($1754$1>>>0) == ($1755$1>>>0) & ($1754$0>>>0) >  ($1755$0>>>0))));
 if($1756){var $1758=$1745;label=375;break;}else{label=374;break;}
 case 374: 
 _delpeer($1676,$i_01_i_i57_i_i);
 var $_pre29=HEAP32[(($1681)>>2)];
 var $1758=$_pre29;label=375;break;
 case 375: 
 var $1758;
 var $1759=((($i_01_i_i57_i_i)+(1))|0);
 var $1760=($1759>>>0)<($1758>>>0);
 if($1760){var $i_01_i_i57_i_i=$1759;label=368;break;}else{label=376;break;}
 case 376: 
 var $1761=(($1676+632)|0);
 var $ld$383$0=(($1761)|0);
 var $1762$0=HEAP32[(($ld$383$0)>>2)];
 var $ld$384$1=(($1761+4)|0);
 var $1762$1=HEAP32[(($ld$384$1)>>2)];
 var $$etemp$385$0=180;
 var $$etemp$385$1=0;
 var $1763$0=_i64Add($1762$0,$1762$1,$$etemp$385$0,$$etemp$385$1);var $1763$1=tempRet0;
 var $ld$386$0=13552;
 var $1764$0=HEAP32[(($ld$386$0)>>2)];
 var $ld$387$1=13556;
 var $1764$1=HEAP32[(($ld$387$1)>>2)];
 var $1765=(($1763$1>>>0) > ($1764$1>>>0)) | (((($1763$1>>>0) == ($1764$1>>>0) & ($1763$0>>>0) >  ($1764$0>>>0))));
 if($1765){label=386;break;}else{label=377;break;}
 case 377: 
 var $1767=(($1676+496)|0);
 var $1768=(($1676+624)|0);
 var $1769=HEAP16[(($1768)>>1)];
 var $1770=($1769&65535)>128;
 if($1770){label=386;break;}else{label=378;break;}
 case 378: 
 var $1772=($1769&65535);
 var $1773=((($1772)+(37))|0);
 var $1774=($1773>>>0)>1024;
 if($1774){var $1788$1=$1762$1;var $1788$0=$1762$0;var $1787$1=$1764$1;var $1787$0=$1764$0;label=383;break;}else{label=379;break;}
 case 379: 
 var $$etemp$388$0=1024;
 var $$etemp$388$1=0;

 var $1776=(($1676+460)|0);
 var $1777=HEAP32[(($1776)>>2)];
 var $1778=((($1777)+(1))|0);
 var $1779=($1778|0)==0;
 var $__i_i_i_i_i_i=($1779?1:$1778);
 HEAP32[(($1776)>>2)]=$__i_i_i_i_i_i;
 var $1780=_htonl($__i_i_i_i_i_i);
 var $1781=(($1676+4)|0);
 assert(32 % 1 === 0);(_memcpy($1668, $1781, 32)|0);
 tempBigInt=$1780;HEAP8[($1670)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1670)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1670)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1670)+(3))|0)]=tempBigInt&0xff;
 var $1782=(($1769<<16)>>16)==0;
 if($1782){label=381;break;}else{label=380;break;}
 case 380: 
 assert($1772 % 1 === 0);(_memcpy($1672, $1767, $1772)|0);
 label=381;break;
 case 381: 
 HEAP8[($1671)]=48;
 var $1784=(($1773)&65535);
 var $1785=_sendto_allpeers($1676,$1668,$1784);
 var $$etemp$389$0=1024;
 var $$etemp$389$1=0;

 var $1786=(($1785<<24)>>24)==0;
 if($1786){label=386;break;}else{label=382;break;}
 case 382: 
 var $ld$390$0=(($1761)|0);
 var $_pre41$0=HEAP32[(($ld$390$0)>>2)];
 var $ld$391$1=(($1761+4)|0);
 var $_pre41$1=HEAP32[(($ld$391$1)>>2)];
 var $ld$392$0=13552;
 var $_pre42$0=HEAP32[(($ld$392$0)>>2)];
 var $ld$393$1=13556;
 var $_pre42$1=HEAP32[(($ld$393$1)>>2)];
 var $1788$1=$_pre41$1;var $1788$0=$_pre41$0;var $1787$1=$_pre42$1;var $1787$0=$_pre42$0;label=383;break;
 case 383: 
 var $1787$0;
 var $1787$1;
 var $1788$0;
 var $1788$1;
 var $$etemp$394$0=0;
 var $$etemp$394$1=0;
 var $1789=(($1788$0|0) == ($$etemp$394$0|0)) & (($1788$1|0) == ($$etemp$394$1|0));
 if($1789){label=384;break;}else{label=385;break;}
 case 384: 
 var $$etemp$395$0=-170;
 var $$etemp$395$1=-1;
 var $1791$0=_i64Add($1787$0,$1787$1,$$etemp$395$0,$$etemp$395$1);var $1791$1=tempRet0;
 var $st$396$0=(($1761)|0);
 HEAP32[(($st$396$0)>>2)]=$1791$0;
 var $st$397$1=(($1761+4)|0);
 HEAP32[(($st$397$1)>>2)]=$1791$1;
 label=386;break;
 case 385: 
 var $st$398$0=(($1761)|0);
 HEAP32[(($st$398$0)>>2)]=$1787$0;
 var $st$399$1=(($1761+4)|0);
 HEAP32[(($st$399$1)>>2)]=$1787$1;
 label=386;break;
 case 386: 
 var $_pre_i_i_i=HEAP32[(($1664)>>2)];
 var $1794=$_pre_i_i_i;label=387;break;
 case 387: 
 var $1794;
 var $1795=((($i_01_i_i_i)+(1))|0);
 var $1796=($1795>>>0)<($1794>>>0);
 if($1796){var $i_01_i_i_i=$1795;var $1673=$1794;label=350;break;}else{label=388;break;}
 case 388: 
 var $1797=(($137+2248)|0);
 var $ld$400$0=(($1797)|0);
 var $1798$0=HEAP32[(($ld$400$0)>>2)];
 var $ld$401$1=(($1797+4)|0);
 var $1798$1=HEAP32[(($ld$401$1)>>2)];
 var $$etemp$402$0=10;
 var $$etemp$402$1=0;
 var $1799$0=_i64Add($1798$0,$1798$1,$$etemp$402$0,$$etemp$402$1);var $1799$1=tempRet0;
 var $ld$403$0=13552;
 var $1800$0=HEAP32[(($ld$403$0)>>2)];
 var $ld$404$1=13556;
 var $1800$1=HEAP32[(($ld$404$1)>>2)];
 var $1801=(($1799$1>>>0) < ($1800$1>>>0)) | (((($1799$1>>>0) == ($1800$1>>>0) & ($1799$0>>>0) <  ($1800$0>>>0))));
 if($1801){label=389;break;}else{label=397;break;}
 case 389: 
 var $1803=_htons(-32091);
 var $1804=HEAP32[(($214)>>2)];
 var $1805=(($ip_port_i62_i_i)|0);
 var $$etemp$405$0=24;
 var $$etemp$405$1=0;

 var $1806=(($data_i61_i_i)|0);
 var $$etemp$406$0=33;
 var $$etemp$406$1=0;

 HEAP8[($1806)]=33;
 var $1807=(($data_i61_i_i+1)|0);
 var $1808=(($1804+14900)|0);
 assert(32 % 1 === 0);(_memcpy($1807, $1808, 32)|0);
 var $1809=(($ip_port_i62_i_i+20)|0);
 tempBigInt=$1803;HEAP8[($1809)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1809)+(1))|0)]=tempBigInt&0xff;
 var $1810=(($1804+4)|0);
 var $1811=HEAP32[(($1810)>>2)];
 var $1812=(($1811+2048)|0);
 var $1813=HEAP16[(($1812)>>1)];
 var $1814=(($1813<<16)>>16)==10;
 if($1814){label=390;break;}else{var $1827=$1811;var $1826=$1813;label=391;break;}
 case 390: 
 var $1816=(($ip_i_i60_i_i_sroa_1)|0);
 var $$etemp$407$0=3;
 var $$etemp$407$1=0;

 var $1817=(($ip_i_i60_i_i_sroa_4)|0);
 var $$etemp$408$0=13;
 var $$etemp$408$1=0;

 HEAP8[($1816)]=0; HEAP8[((($1816)+(1))|0)]=0; HEAP8[((($1816)+(2))|0)]=0;
 _memset($1817, 0, 13)|0;
 HEAP8[($1805)]=10;
 var $1818=(($ip_port_i62_i_i+1)|0);
 assert(3 % 1 === 0);HEAP8[($1818)]=HEAP8[($1816)];HEAP8[((($1818)+(1))|0)]=HEAP8[((($1816)+(1))|0)];HEAP8[((($1818)+(2))|0)]=HEAP8[((($1816)+(2))|0)];
 var $1819=(($ip_port_i62_i_i+4)|0);
 var $1820=$1819;
 HEAP8[($1820)]=-1;
 var $1821=(($ip_port_i62_i_i)|0);
 var $1822=(($1821+5)|0);
 HEAP8[($1822)]=2;
 var $1823=(($1821+6)|0);
 assert(13 % 1 === 0);(_memcpy($1823, $1817, 13)|0);
 var $1824=(($1821+19)|0);
 HEAP8[($1824)]=1;
 var $$etemp$409$0=3;
 var $$etemp$409$1=0;

 var $$etemp$410$0=13;
 var $$etemp$410$1=0;

 var $1825=_sendpacket($1811,$ip_port_i62_i_i,$1806,33);
 var $_pre26=HEAP32[(($1810)>>2)];
 var $_phi_trans_insert=(($_pre26+2048)|0);
 var $_pre27=HEAP16[(($_phi_trans_insert)>>1)];
 var $1827=$_pre26;var $1826=$_pre27;label=391;break;
 case 391: 
 var $1826;
 var $1827;
 var $1828=(($ip_i1_i_i_i_sroa_1)|0);
 var $$etemp$411$0=3;
 var $$etemp$411$1=0;

 HEAP8[($1828)]=0; HEAP8[((($1828)+(1))|0)]=0; HEAP8[((($1828)+(2))|0)]=0;
 if((($1826<<16)>>16)==10){ label=392;break;}else if((($1826<<16)>>16)==2){ label=393;break;}else{var $ip_i1_i_i_i_sroa_5_0=0;var $ip_i1_i_i_i_sroa_4_0=0;var $ip_i1_i_i_i_sroa_0_0=0;var $ip_i1_i_i_i_sroa_2_0=0;label=394;break;}
 case 392: 
 var $1830=_htonl(65535);
 var $ip_i1_i_i_i_sroa_5_0=-1;var $ip_i1_i_i_i_sroa_4_0=$1830;var $ip_i1_i_i_i_sroa_0_0=10;var $ip_i1_i_i_i_sroa_2_0=0;label=394;break;
 case 393: 
 var $ip_i1_i_i_i_sroa_5_0=0;var $ip_i1_i_i_i_sroa_4_0=0;var $ip_i1_i_i_i_sroa_0_0=2;var $ip_i1_i_i_i_sroa_2_0=-1;label=394;break;
 case 394: 
 var $ip_i1_i_i_i_sroa_2_0;
 var $ip_i1_i_i_i_sroa_0_0;
 var $ip_i1_i_i_i_sroa_4_0;
 var $ip_i1_i_i_i_sroa_5_0;
 HEAP8[($1805)]=$ip_i1_i_i_i_sroa_0_0;
 var $1832=(($ip_port_i62_i_i+1)|0);
 assert(3 % 1 === 0);HEAP8[($1832)]=HEAP8[($1828)];HEAP8[((($1832)+(1))|0)]=HEAP8[((($1828)+(1))|0)];HEAP8[((($1832)+(2))|0)]=HEAP8[((($1828)+(2))|0)];
 var $1833=(($ip_port_i62_i_i+4)|0);
 var $1834=$1833;
 tempBigInt=$ip_i1_i_i_i_sroa_2_0;HEAP8[($1834)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1834)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1834)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1834)+(3))|0)]=tempBigInt&0xff;
 var $1835=(($ip_port_i62_i_i)|0);
 var $1836=(($1835+8)|0);
 var $1837=$1836;
 tempBigInt=0;HEAP8[($1837)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1837)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1837)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1837)+(3))|0)]=tempBigInt&0xff;
 var $1838=(($ip_port_i62_i_i+12)|0);
 var $1839=$1838;
 tempBigInt=$ip_i1_i_i_i_sroa_4_0;HEAP8[($1839)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1839)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1839)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1839)+(3))|0)]=tempBigInt&0xff;
 var $1840=(($1835+16)|0);
 var $1841=$1840;
 tempBigInt=$ip_i1_i_i_i_sroa_5_0;HEAP8[($1841)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1841)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1841)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1841)+(3))|0)]=tempBigInt&0xff;
 var $$etemp$412$0=3;
 var $$etemp$412$1=0;

 var $1842=(($ip_i1_i_i_i_sroa_0_0<<24)>>24)==0;
 if($1842){label=396;break;}else{label=395;break;}
 case 395: 
 var $1844=_sendpacket($1827,$ip_port_i62_i_i,$1806,33);
 label=396;break;
 case 396: 
 var $$etemp$413$0=33;
 var $$etemp$413$1=0;

 var $$etemp$414$0=24;
 var $$etemp$414$1=0;

 var $ld$415$0=13552;
 var $1845$0=HEAP32[(($ld$415$0)>>2)];
 var $ld$416$1=13556;
 var $1845$1=HEAP32[(($ld$416$1)>>2)];
 var $st$417$0=(($1797)|0);
 HEAP32[(($st$417$0)>>2)]=$1845$0;
 var $st$418$1=(($1797+4)|0);
 HEAP32[(($st$418$1)>>2)]=$1845$1;
 label=397;break;
 case 397: 
 var $1846=HEAP32[((13568)>>2)];
 var $1847=(($1846+8)|0);
 var $1848=HEAP32[(($1847)>>2)];
 var $1849=_time(0);
 var $1850$0=$1849;
 var $1850$1=((((($1849|0)<0))|0)?-1:0);
 var $st$419$0=13552;
 HEAP32[(($st$419$0)>>2)]=$1850$0;
 var $st$420$1=13556;
 HEAP32[(($st$420$1)>>2)]=$1850$1;
 var $i_01_i_i=0;label=399;break;
 case 398: 
 var $1852=($1863>>>0)<32;
 if($1852){var $i_01_i_i=$1863;label=399;break;}else{var $_0_i_i=0;label=401;break;}
 case 399: 
 var $i_01_i_i;
 var $1854=(($1848+8+((($i_01_i_i)*(464))&-1)+56)|0);
 var $ld$421$0=(($1854)|0);
 var $1855$0=HEAP32[(($ld$421$0)>>2)];
 var $ld$422$1=(($1854+4)|0);
 var $1855$1=HEAP32[(($ld$422$1)>>2)];
 var $$etemp$423$0=122;
 var $$etemp$423$1=0;
 var $1856$0=_i64Add($1855$0,$1855$1,$$etemp$423$0,$$etemp$423$1);var $1856$1=tempRet0;
 var $1857=(($1856$1>>>0) > ($1850$1>>>0)) | (((($1856$1>>>0) == ($1850$1>>>0) & ($1856$0>>>0) >  ($1850$0>>>0))));
 if($1857){var $_0_i_i=1;label=401;break;}else{label=400;break;}
 case 400: 
 var $1859=(($1848+8+((($i_01_i_i)*(464))&-1)+272)|0);
 var $ld$424$0=(($1859)|0);
 var $1860$0=HEAP32[(($ld$424$0)>>2)];
 var $ld$425$1=(($1859+4)|0);
 var $1860$1=HEAP32[(($ld$425$1)>>2)];
 var $$etemp$426$0=122;
 var $$etemp$426$1=0;
 var $1861$0=_i64Add($1860$0,$1860$1,$$etemp$426$0,$$etemp$426$1);var $1861$1=tempRet0;
 var $1862=(($1861$1>>>0) > ($1850$1>>>0)) | (((($1861$1>>>0) == ($1850$1>>>0) & ($1861$0>>>0) >  ($1850$0>>>0))));
 var $1863=((($i_01_i_i)+(1))|0);
 if($1862){var $_0_i_i=1;label=401;break;}else{label=398;break;}
 case 401: 
 var $_0_i_i;
 var $1864=$131&$_0_i_i;
 var $1865=($1864|0)==0;
 if($1865){label=402;break;}else{label=403;break;}
 case 402: 
 var $1867=HEAP32[((_stderr)>>2)];
 var $1868=_fwrite(3816,14,1,$1867);
 label=403;break;
 case 403: 
 var $1870=($1864|0)!=0;
 STACKTOP=sp;return $1870;
  default: assert(0, "bad label: " + label);
 }

}


function __Z7cleanupv(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $packet_i_i_i_i=sp;
 var $1=HEAP32[((13568)>>2)];
 var $2=(($1+2244)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=14;break;}else{label=2;break;}
 case 2: 
 var $5=(($1+2240)|0);
 var $6=(($packet_i_i_i_i)|0);
 var $7=(($packet_i_i_i_i+32)|0);
 var $8=$7;
 var $9=(($packet_i_i_i_i+36)|0);
 var $i_04_i_i=0;var $11=$3;label=3;break;
 case 3: 
 var $11;
 var $i_04_i_i;
 var $12=($11>>>0)>($i_04_i_i>>>0);
 if($12){label=4;break;}else{label=12;break;}
 case 4: 
 var $14=HEAP32[(($5)>>2)];
 var $15=($14|0)==0;
 if($15){label=12;break;}else{label=5;break;}
 case 5: 
 var $17=(($14+($i_04_i_i<<2))|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==0;
 if($19){label=12;break;}else{label=6;break;}
 case 6: 
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $21=(($18+460)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 var $24=($23|0)==0;
 var $__i_i_i_i=($24?1:$23);
 HEAP32[(($21)>>2)]=$__i_i_i_i;
 var $25=_htonl($__i_i_i_i);
 var $26=(($18+4)|0);
 assert(32 % 1 === 0);(_memcpy($6, $26, 32)|0);
 tempBigInt=$25;HEAP8[($8)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($8)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($8)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($8)+(3))|0)]=tempBigInt&0xff;
 HEAP8[($9)]=24;
 var $27=_sendto_allpeers($18,$6,37);
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 var $28=(($18+68)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29)|0);
 _free($30);
 var $31=$18;
 _free($31);
 var $32=HEAP32[(($5)>>2)];
 var $33=(($32+($i_04_i_i<<2))|0);
 HEAP32[(($33)>>2)]=0;
 var $34=HEAP32[(($2)>>2)];
 var $i_0_i_i_i=$34;label=7;break;
 case 7: 
 var $i_0_i_i_i;
 var $36=($i_0_i_i_i|0)==0;
 if($36){label=9;break;}else{label=8;break;}
 case 8: 
 var $38=((($i_0_i_i_i)-(1))|0);
 var $39=HEAP32[(($5)>>2)];
 var $40=(($39+($38<<2))|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){var $i_0_i_i_i=$38;label=7;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($2)>>2)]=0;
 var $44=HEAP32[(($5)>>2)];
 var $45=$44;
 _free($45);
 HEAP32[(($5)>>2)]=0;
 label=12;break;
 case 10: 
 HEAP32[(($2)>>2)]=$i_0_i_i_i;
 var $47=$39;
 var $48=$i_0_i_i_i<<2;
 var $49=_realloc($47,$48);
 var $50=($49|0)==0;
 if($50){label=12;break;}else{label=11;break;}
 case 11: 
 var $52=$49;
 HEAP32[(($5)>>2)]=$52;
 label=12;break;
 case 12: 
 var $53=((($i_04_i_i)+(1))|0);
 var $54=($53>>>0)<($3>>>0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $_pre12_i_i=HEAP32[(($2)>>2)];
 var $i_04_i_i=$53;var $11=$_pre12_i_i;label=3;break;
 case 14: 
 var $55=(($1+12)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=($56|0)==0;
 if($57){label=16;break;}else{label=15;break;}
 case 15: 
 var $59=(($56+4)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+1024)|0);
 HEAP32[(($61)>>2)]=0;
 var $62=(($60+1028)|0);
 HEAP32[(($62)>>2)]=0;
 var $63=HEAP32[(($59)>>2)];
 var $64=(($63+1032)|0);
 HEAP32[(($64)>>2)]=0;
 var $65=(($63+1036)|0);
 HEAP32[(($65)>>2)]=0;
 var $66=HEAP32[(($59)>>2)];
 var $67=(($66+1040)|0);
 HEAP32[(($67)>>2)]=0;
 var $68=(($66+1044)|0);
 HEAP32[(($68)>>2)]=0;
 var $69=HEAP32[(($59)>>2)];
 var $70=(($69+1120)|0);
 HEAP32[(($70)>>2)]=0;
 var $71=(($69+1124)|0);
 HEAP32[(($71)>>2)]=0;
 var $72=HEAP32[(($59)>>2)];
 var $73=(($72+1128)|0);
 HEAP32[(($73)>>2)]=0;
 var $74=(($72+1132)|0);
 HEAP32[(($74)>>2)]=0;
 var $75=HEAP32[(($59)>>2)];
 var $76=(($75+1136)|0);
 HEAP32[(($76)>>2)]=0;
 var $77=(($75+1140)|0);
 HEAP32[(($77)>>2)]=0;
 var $78=$56;
 _free($78);
 label=16;break;
 case 16: 
 var $79=(($1+16)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)==0;
 if($81){label=18;break;}else{label=17;break;}
 case 17: 
 var $83=(($80+4)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+1048)|0);
 HEAP32[(($85)>>2)]=0;
 var $86=(($84+1052)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=HEAP32[(($83)>>2)];
 var $88=(($87+1064)|0);
 HEAP32[(($88)>>2)]=0;
 var $89=(($87+1068)|0);
 HEAP32[(($89)>>2)]=0;
 var $90=$80;
 _free($90);
 label=18;break;
 case 18: 
 var $91=(($1+20)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=20;break;}else{label=19;break;}
 case 19: 
 var $95=(($92+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96)|0);
 _free($97);
 HEAP32[(($95)>>2)]=0;
 var $98=(($92+4)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($99+1056)|0);
 HEAP32[(($100)>>2)]=0;
 var $101=(($99+1060)|0);
 HEAP32[(($101)>>2)]=0;
 var $102=HEAP32[(($98)>>2)];
 var $103=(($102+1072)|0);
 HEAP32[(($103)>>2)]=0;
 var $104=(($102+1076)|0);
 HEAP32[(($104)>>2)]=0;
 var $105=(($92+3796)|0);
 HEAP32[(($105)>>2)]=0;
 var $106=(($92+3800)|0);
 HEAP32[(($106)>>2)]=0;
 var $107=(($92)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+1324)|0);
 HEAP32[(($111)>>2)]=0;
 var $112=(($110+1328)|0);
 HEAP32[(($112)>>2)]=0;
 var $113=$92;
 _free($113);
 label=20;break;
 case 20: 
 var $114=(($1+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+4)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+16)|0);
 HEAP32[(($118)>>2)]=0;
 var $119=(($117+20)|0);
 HEAP32[(($119)>>2)]=0;
 var $120=HEAP32[(($116)>>2)];
 var $121=(($120+24)|0);
 HEAP32[(($121)>>2)]=0;
 var $122=(($120+28)|0);
 HEAP32[(($122)>>2)]=0;
 var $123=HEAP32[(($116)>>2)];
 var $124=(($123+32)|0);
 HEAP32[(($124)>>2)]=0;
 var $125=(($123+36)|0);
 HEAP32[(($125)>>2)]=0;
 var $126=(($115)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($127+2108)|0);
 HEAP32[(($128)>>2)]=0;
 var $129=(($127+2112)|0);
 HEAP32[(($129)>>2)]=0;
 var $130=HEAP32[(($126)>>2)];
 var $131=(($130+460)|0);
 HEAP32[(($131)>>2)]=0;
 var $132=(($130+464)|0);
 HEAP32[(($132)>>2)]=0;
 var $133=(($115+178816)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=(($134)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+4)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(($138)|0);
 HEAP32[(($139)>>2)]=0;
 var $140=(($138+4)|0);
 HEAP32[(($140)>>2)]=0;
 var $141=HEAP32[(($135)>>2)];
 var $142=(($141+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($143+8)|0);
 HEAP32[(($144)>>2)]=0;
 var $145=(($143+12)|0);
 HEAP32[(($145)>>2)]=0;
 var $146=$134;
 _free($146);
 var $147=(($115+14964)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($148)|0);
 _free($149);
 var $150=$115;
 _free($150);
 var $151=(($1+4)|0);
 var $152=HEAP32[(($151)>>2)];
 _kill_net_crypto($152);
 var $153=(($1)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($154+2052)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=_close($156);
 var $158=$154;
 _free($158);
 var $159=(($1+2228)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($160|0)==0;
 var $162=(($1+2224)|0);
 var $163=HEAP32[(($162)>>2)];
 if($161){var $_lcssa_i_i=$163;label=24;break;}else{var $i_11_i_i=0;var $165=$163;var $164=$160;label=21;break;}
 case 21: 
 var $164;
 var $165;
 var $i_11_i_i;
 var $166=(($165+((($i_11_i_i)*(14072))&-1)+1212)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($167|0)==0;
 if($168){var $172=$164;var $171=$165;label=23;break;}else{label=22;break;}
 case 22: 
 _free($167);
 var $_pre_i_i=HEAP32[(($159)>>2)];
 var $_pre11_i_i=HEAP32[(($162)>>2)];
 var $172=$_pre_i_i;var $171=$_pre11_i_i;label=23;break;
 case 23: 
 var $171;
 var $172;
 var $173=((($i_11_i_i)+(1))|0);
 var $174=($173>>>0)<($172>>>0);
 if($174){var $i_11_i_i=$173;var $165=$171;var $164=$172;label=21;break;}else{var $_lcssa_i_i=$171;label=24;break;}
 case 24: 
 var $_lcssa_i_i;
 var $175=(($_lcssa_i_i)|0);
 _free($175);
 var $176=$1;
 _free($176);
 var $177=HEAP32[((14744)>>2)];
 var $178=($177|0)==0;
 if($178){label=26;break;}else{label=25;break;}
 case 25: 
 _free($177);
 label=26;break;
 case 26: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z5setupv(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $random_key_bytes_i_i_i=sp;
 var $ipv6only_i_i_i_i=(sp)+(32);
 var $a_i1_i_i_i_i=(sp)+(40);
 var $a_i_i_i_i_i=(sp)+(48);
 var $n_i_i_i=(sp)+(56);
 var $broadcast_i_i_i=(sp)+(64);
 var $addr_i_i_i=(sp)+(72);
 var $mreq_i_i_i=(sp)+(200);
 var $ip1_i_i=(sp)+(224);
 var $randnum_i_i_i=(sp)+(248);
 var $ip_i_i_sroa_1=(sp)+(256);
 var $1=HEAP32[((13568)>>2)];
 var $2=($1|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 __Z7cleanupv();
 label=3;break;
 case 3: 
 var $5=(($ip1_i_i)|0);
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $6=(($ip_i_i_sroa_1)|0);
 var $$etemp$1$0=19;
 var $$etemp$1$1=0;

 var $7=_malloc(2400);
 var $8=($7|0)==0;
 if($8){label=81;break;}else{label=4;break;}
 case 4: 
 var $10=((($7)-(4))|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&3;
 var $14=($13|0)==0;
 if($14){label=6;break;}else{label=5;break;}
 case 5: 
 _memset($7, 0, 2400)|0;
 label=6;break;
 case 6: 
 var $16=$7;
 HEAP32[(($6)>>2)]=0; HEAP32[((($6)+(4))>>2)]=0; HEAP32[((($6)+(8))>>2)]=0; HEAP32[((($6)+(12))>>2)]=0; HEAP16[((($6)+(16))>>1)]=0; HEAP8[((($6)+(18))|0)]=0;
 HEAP8[($5)]=2;
 var $17=(($ip1_i_i+1)|0);
 assert(19 % 1 === 0);(_memcpy($17, $6, 19)|0);
 var $18=$n_i_i_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $19=$broadcast_i_i_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $20=$mreq_i_i_i;
 var $$etemp$4$0=20;
 var $$etemp$4$1=0;

 var $_b_i_i_i=HEAP8[(472)];
 if($_b_i_i_i){label=8;break;}else{label=7;break;}
 case 7: 
 _sodium_init();
 var $22=$a_i_i_i_i_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $23=_gettimeofday($a_i_i_i_i_i,0);
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;

 var $24=HEAP32[((_stderr)>>2)];
 var $25=_fwrite(1480,20,1,$24);
 var $26=$a_i1_i_i_i_i;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $27=_gettimeofday($a_i1_i_i_i_i,0);
 var $28=(($a_i1_i_i_i_i)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)*(1000000))&-1);
 var $31=(($a_i1_i_i_i_i+4)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($30)+($32))|0);
 var $$etemp$8$0=8;
 var $$etemp$8$1=0;

 _srand($33);
 HEAP8[(472)]=1;
 label=8;break;
 case 8: 
 var $34=_malloc(2064);
 var $35=($34|0)==0;
 if($35){var $_1_i_i_i=0;label=33;break;}else{label=9;break;}
 case 9: 
 var $37=((($34)-(4))|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=$39&3;
 var $41=($40|0)==0;
 if($41){label=11;break;}else{label=10;break;}
 case 10: 
 _memset($34, 0, 2064)|0;
 label=11;break;
 case 11: 
 var $42=$34;
 var $43=HEAP8[($5)];
 var $44=($43&255);
 var $45=(($34+2048)|0);
 var $46=$45;
 HEAP16[(($46)>>1)]=$44;
 var $47=(($34+2050)|0);
 var $48=$47;
 HEAP16[(($48)>>1)]=0;
 var $49=($43&255);
 var $50=_socket($49,2,17);
 var $51=(($34+2052)|0);
 var $52=$51;
 HEAP32[(($52)>>2)]=$50;
 var $53=($50|0)<0;
 if($53){label=12;break;}else{label=13;break;}
 case 12: 
 var $55=HEAP32[((_stderr)>>2)];
 var $56=___errno_location();
 var $57=HEAP32[(($56)>>2)];
 var $58=_strerror($57);
 var $59=_fprintf($55,4056,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$57,HEAP32[(((tempVarArgs)+(8))>>2)]=$58,tempVarArgs)); STACKTOP=tempVarArgs;
 _free($34);
 var $_1_i_i_i=0;label=33;break;
 case 13: 
 HEAP32[(($n_i_i_i)>>2)]=2097152;
 var $61=_setsockopt($50,1,8,$18,4);
 var $62=_setsockopt($50,1,7,$18,4);
 HEAP32[(($broadcast_i_i_i)>>2)]=1;
 var $63=_setsockopt($50,1,6,$19,4);
 var $64=_fcntl($50,4,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=2048,HEAP32[(((tempVarArgs)+(8))>>2)]=1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $65=($64|0)==0;
 if($65){label=15;break;}else{label=14;break;}
 case 14: 
 var $67=_close($50);
 _free($34);
 var $_1_i_i_i=0;label=33;break;
 case 15: 
 var $69=$addr_i_i_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 if((($44<<16)>>16)==2){ label=16;break;}else if((($44<<16)>>16)==10){ label=17;break;}else{label=18;break;}
 case 16: 
 var $71=$addr_i_i_i;
 var $72=(($addr_i_i_i)|0);
 HEAP16[(($72)>>1)]=2;
 var $73=(($71+2)|0);
 HEAP16[(($73)>>1)]=0;
 var $74=(($addr_i_i_i+4)|0);
 var $75=(($ip1_i_i+4)|0);
 var $76=$75;
 var $77=HEAP32[(($76)>>2)];
 HEAP32[(($74)>>2)]=$77;
 var $portptr_0_i_i_i=$73;var $addrsize_0_i_i_i=16;label=19;break;
 case 17: 
 var $79=$addr_i_i_i;
 var $80=(($addr_i_i_i)|0);
 HEAP16[(($80)>>1)]=10;
 var $81=(($79+2)|0);
 HEAP16[(($81)>>1)]=0;
 var $82=(($ip1_i_i+4)|0);
 var $83=(($addr_i_i_i+8)|0);
 var $84=$82;
 assert(16 % 1 === 0);HEAP32[(($83)>>2)]=HEAP32[(($84)>>2)];HEAP32[((($83)+(4))>>2)]=HEAP32[((($84)+(4))>>2)];HEAP32[((($83)+(8))>>2)]=HEAP32[((($84)+(8))>>2)];HEAP32[((($83)+(12))>>2)]=HEAP32[((($84)+(12))>>2)];
 var $85=(($addr_i_i_i+4)|0);
 HEAP32[(($85)>>2)]=0;
 var $86=(($addr_i_i_i+24)|0);
 var $87=$86;
 HEAP32[(($87)>>2)]=0;
 var $portptr_0_i_i_i=$81;var $addrsize_0_i_i_i=28;label=19;break;
 case 18: 
 _free($34);
 var $_1_i_i_i=0;label=33;break;
 case 19: 
 var $addrsize_0_i_i_i;
 var $portptr_0_i_i_i;
 var $90=(($43<<24)>>24)==10;
 if($90){label=20;break;}else{label=23;break;}
 case 20: 
 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 HEAP8[($ipv6only_i_i_i_i)]=0;
 var $92=HEAP32[((_stderr)>>2)];
 var $93=_fwrite(3456,23,1,$92);
 var $94=HEAP8[($ipv6only_i_i_i_i)];
 var $95=(($94<<24)>>24)==0;
 if($95){label=22;break;}else{label=21;break;}
 case 21: 
 HEAP8[($ipv6only_i_i_i_i)]=0;
 var $97=_setsockopt($50,41,26,$ipv6only_i_i_i_i,1);
 label=22;break;
 case 22: 
 var $$etemp$11$0=1;
 var $$etemp$11$1=0;

 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0; HEAP32[((($20)+(12))>>2)]=0;
 var $98=$mreq_i_i_i;
 HEAP8[($20)]=-1;
 var $99=(($98+1)|0);
 HEAP8[($99)]=2;
 var $100=(($98+15)|0);
 HEAP8[($100)]=1;
 var $101=(($mreq_i_i_i+16)|0);
 HEAP32[(($101)>>2)]=0;
 var $102=_setsockopt($50,41,20,$20,20);
 label=23;break;
 case 23: 
 var $104=_htons(-32091);
 HEAP16[(($portptr_0_i_i_i)>>1)]=$104;
 var $105=$addr_i_i_i;
 var $port_to_try_02_i_i_i=-32091;var $tries_03_i_i_i=33445;label=24;break;
 case 24: 
 var $tries_03_i_i_i;
 var $port_to_try_02_i_i_i;
 var $107=_bind($50,$105,$addrsize_0_i_i_i);
 var $108=($107|0)==0;
 if($108){label=25;break;}else{label=27;break;}
 case 25: 
 var $110=HEAP16[(($portptr_0_i_i_i)>>1)];
 HEAP16[(($48)>>1)]=$110;
 var $111=($tries_03_i_i_i|0)>0;
 if($111){label=26;break;}else{var $_1_i_i_i=$42;label=33;break;}
 case 26: 
 var $113=___errno_location();
 HEAP32[(($113)>>2)]=0;
 var $_1_i_i_i=$42;label=33;break;
 case 27: 
 var $115=((($port_to_try_02_i_i_i)+(1))&65535);
 var $116=($115&65535)>33545;
 var $__i_i_i=($116?-32091:$115);
 var $117=_htons($__i_i_i);
 HEAP16[(($portptr_0_i_i_i)>>1)]=$117;
 var $118=((($tries_03_i_i_i)+(1))|0);
 var $119=($118|0)<33546;
 if($119){var $port_to_try_02_i_i_i=$__i_i_i;var $tries_03_i_i_i=$118;label=24;break;}else{label=28;break;}
 case 28: 
 var $121=HEAP32[((_stderr)>>2)];
 var $122=___errno_location();
 var $123=HEAP32[(($122)>>2)];
 var $124=_strerror($123);
 var $125=HEAP8[($5)];
 if((($125<<24)>>24)==2){ label=29;break;}else if((($125<<24)>>24)==10){ label=30;break;}else{label=31;break;}
 case 29: 
 var $127=(($ip1_i_i+4)|0);
 HEAP8[(15056)]=0;
 var $128=$127;
 var $129=_inet_ntop(2,$128,15056,96);
 label=32;break;
 case 30: 
 var $131=(($ip1_i_i+4)|0);
 HEAP8[(15056)]=91;
 var $132=$131;
 var $133=_inet_ntop(10,$132,15057,93);
 var $134=_strlen(15056);
 var $135=((15056+$134)|0);
 HEAP8[($135)]=93;
 var $136=((($134)+(1))|0);
 var $137=((15056+$136)|0);
 HEAP8[($137)]=0;
 label=32;break;
 case 31: 
 var $139=($125&255);
 var $140=_snprintf(15056,96,2616,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$139,tempVarArgs)); STACKTOP=tempVarArgs;
 label=32;break;
 case 32: 
 HEAP8[(15151)]=0;
 var $141=_fprintf($121,2976,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 32)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$123,HEAP32[(((tempVarArgs)+(8))>>2)]=$124,HEAP32[(((tempVarArgs)+(16))>>2)]=15056,HEAP32[(((tempVarArgs)+(24))>>2)]=33445,tempVarArgs)); STACKTOP=tempVarArgs;
 var $142=_close($50);
 _free($34);
 var $_1_i_i_i=0;label=33;break;
 case 33: 
 var $_1_i_i_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=20;
 var $$etemp$14$1=0;

 var $143=$7;
 HEAP32[(($143)>>2)]=$_1_i_i_i;
 var $144=($_1_i_i_i|0)==0;
 if($144){label=34;break;}else{label=35;break;}
 case 34: 
 _free($7);
 label=81;break;
 case 35: 
 var $147=_time(0);
 var $148$0=$147;
 var $148$1=((((($147|0)<0))|0)?-1:0);
 var $st$15$0=13552;
 HEAP32[(($st$15$0)>>2)]=$148$0;
 var $st$16$1=13556;
 HEAP32[(($st$16$1)>>2)]=$148$1;
 var $149=_malloc(2124);
 var $150=($149|0)==0;
 if($150){label=42;break;}else{label=36;break;}
 case 36: 
 var $152=((($149)-(4))|0);
 var $153=$152;
 var $154=HEAP32[(($153)>>2)];
 var $155=$154&3;
 var $156=($155|0)==0;
 if($156){label=38;break;}else{label=37;break;}
 case 37: 
 _memset($149, 0, 2124)|0;
 label=38;break;
 case 38: 
 var $158=$149;
 var $159=_malloc(18448);
 var $160=($159|0)==0;
 if($160){label=41;break;}else{label=39;break;}
 case 39: 
 var $162=((($159)-(4))|0);
 var $163=$162;
 var $164=HEAP32[(($163)>>2)];
 var $165=$164&3;
 var $166=($165|0)==0;
 if($166){label=43;break;}else{label=40;break;}
 case 40: 
 _memset($159, 0, 18448)|0;
 label=43;break;
 case 41: 
 var $168=$149;
 HEAP32[(($168)>>2)]=0;
 _free($149);
 label=42;break;
 case 42: 
 var $169=(($7+4)|0);
 var $170=$169;
 HEAP32[(($170)>>2)]=0;
 label=44;break;
 case 43: 
 var $171=$159;
 var $172=(($159+4)|0);
 var $173=(($159+8)|0);
 var $174=$173;
 HEAP32[(($174)>>2)]=0;
 var $175=(($159+12)|0);
 var $176=$175;
 HEAP32[(($176)>>2)]=1160;
 var $177=$172;
 HEAP32[(($177)>>2)]=0;
 var $178=$159;
 HEAP32[(($178)>>2)]=$_1_i_i_i;
 var $179=(($_1_i_i_i+128)|0);
 HEAP32[(($179)>>2)]=314;
 var $180=(($_1_i_i_i+132)|0);
 HEAP32[(($180)>>2)]=$159;
 var $181=(($_1_i_i_i+136)|0);
 HEAP32[(($181)>>2)]=406;
 var $182=(($_1_i_i_i+140)|0);
 HEAP32[(($182)>>2)]=$159;
 var $183=(($_1_i_i_i+144)|0);
 HEAP32[(($183)>>2)]=558;
 var $184=(($_1_i_i_i+148)|0);
 HEAP32[(($184)>>2)]=$159;
 var $185=$149;
 HEAP32[(($185)>>2)]=$171;
 var $186=($159|0)==0;
 var $187=(($149+12)|0);
 var $188=(($149+44)|0);
 var $$etemp$17$0=32;
 var $$etemp$17$1=0;
 _randombytes($188,$$etemp$17$0,$$etemp$17$1);
 _crypto_scalarmult_curve25519_ref($187,$188,440);
 var $189=(($7+4)|0);
 var $190=$189;
 HEAP32[(($190)>>2)]=$158;
 var $191=($149|0)==0;
 if($191){label=44;break;}else{label=45;break;}
 case 44: 
 var $193=HEAP32[(($143)>>2)];
 var $194=(($193+2052)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=_close($195);
 var $197=$193;
 _free($197);
 _free($7);
 label=81;break;
 case 45: 
 var $199=(($random_key_bytes_i_i_i)|0);
 var $$etemp$18$0=32;
 var $$etemp$18$1=0;

 var $200=_time(0);
 var $201$0=$200;
 var $201$1=((((($200|0)<0))|0)?-1:0);
 var $st$19$0=13552;
 HEAP32[(($st$19$0)>>2)]=$201$0;
 var $st$20$1=13556;
 HEAP32[(($st$20$1)>>2)]=$201$1;
 var $202=_malloc(178832);
 var $203=($202|0)==0;
 if($203){label=52;break;}else{label=46;break;}
 case 46: 
 var $205=((($202)-(4))|0);
 var $206=$205;
 var $207=HEAP32[(($206)>>2)];
 var $208=$207&3;
 var $209=($208|0)==0;
 if($209){label=48;break;}else{label=47;break;}
 case 47: 
 _memset($202, 0, 178832)|0;
 label=48;break;
 case 48: 
 var $210=$202;
 var $211=$202;
 HEAP32[(($211)>>2)]=$158;
 var $212=$149;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($202+4)|0);
 var $217=$216;
 HEAP32[(($217)>>2)]=$215;
 var $218=_malloc(37784);
 var $219=($218|0)==0;
 if($219){label=51;break;}else{label=49;break;}
 case 49: 
 var $221=((($218)-(4))|0);
 var $222=$221;
 var $223=HEAP32[(($222)>>2)];
 var $224=$223&3;
 var $225=($224|0)==0;
 if($225){label=53;break;}else{label=50;break;}
 case 50: 
 _memset($218, 0, 37784)|0;
 label=53;break;
 case 51: 
 var $227=(($202+178816)|0);
 var $228=$227;
 HEAP32[(($228)>>2)]=0;
 var $229=HEAP32[(($217)>>2)];
 var $230=(($229+16)|0);
 HEAP32[(($230)>>2)]=0;
 var $231=(($229+20)|0);
 HEAP32[(($231)>>2)]=0;
 var $232=HEAP32[(($217)>>2)];
 var $233=(($232+24)|0);
 HEAP32[(($233)>>2)]=0;
 var $234=(($232+28)|0);
 HEAP32[(($234)>>2)]=0;
 var $235=HEAP32[(($217)>>2)];
 var $236=(($235+32)|0);
 HEAP32[(($236)>>2)]=0;
 var $237=(($235+36)|0);
 HEAP32[(($237)>>2)]=0;
 var $238=HEAP32[(($211)>>2)];
 var $239=(($238+2108)|0);
 HEAP32[(($239)>>2)]=0;
 var $240=(($238+2112)|0);
 HEAP32[(($240)>>2)]=0;
 var $241=HEAP32[(($211)>>2)];
 var $242=(($241+460)|0);
 HEAP32[(($242)>>2)]=0;
 var $243=(($241+464)|0);
 HEAP32[(($243)>>2)]=0;
 var $244=HEAP32[(($228)>>2)];
 var $245=(($244)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+4)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248)|0);
 HEAP32[(($249)>>2)]=0;
 var $250=(($248+4)|0);
 HEAP32[(($250)>>2)]=0;
 var $251=HEAP32[(($245)>>2)];
 var $252=(($251+4)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+8)|0);
 HEAP32[(($254)>>2)]=0;
 var $255=(($253+12)|0);
 HEAP32[(($255)>>2)]=0;
 var $256=$244;
 _free($256);
 var $257=(($202+14964)|0);
 var $258=$257;
 var $259=HEAP32[(($258)>>2)];
 var $260=(($259)|0);
 _free($260);
 _free($202);
 label=52;break;
 case 52: 
 var $$etemp$21$0=32;
 var $$etemp$21$1=0;

 var $261=(($7+8)|0);
 var $262=$261;
 HEAP32[(($262)>>2)]=0;
 label=54;break;
 case 53: 
 var $263=$218;
 var $264=$218;
 HEAP32[(($264)>>2)]=$210;
 var $265=HEAP32[(($217)>>2)];
 var $266=(($265)|0);
 HEAP32[(($266)>>2)]=870;
 var $267=(($265+4)|0);
 HEAP32[(($267)>>2)]=$202;
 var $268=HEAP32[(($217)>>2)];
 var $269=(($268+8)|0);
 HEAP32[(($269)>>2)]=146;
 var $270=(($268+12)|0);
 HEAP32[(($270)>>2)]=$202;
 var $271=(($202+178816)|0);
 var $272=$271;
 HEAP32[(($272)>>2)]=$263;
 var $273=($218|0)==0;
 var $274=HEAP32[(($217)>>2)];
 var $275=(($274+16)|0);
 HEAP32[(($275)>>2)]=274;
 var $276=(($274+20)|0);
 HEAP32[(($276)>>2)]=$202;
 var $277=HEAP32[(($217)>>2)];
 var $278=(($277+24)|0);
 HEAP32[(($278)>>2)]=416;
 var $279=(($277+28)|0);
 HEAP32[(($279)>>2)]=$202;
 var $280=HEAP32[(($217)>>2)];
 var $281=(($280+32)|0);
 HEAP32[(($281)>>2)]=616;
 var $282=(($280+36)|0);
 HEAP32[(($282)>>2)]=$202;
 var $283=HEAP32[(($211)>>2)];
 var $284=(($283)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(($285)|0);
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+256)|0);
 HEAP32[(($288)>>2)]=188;
 var $289=(($287+260)|0);
 HEAP32[(($289)>>2)]=$202;
 var $290=(($149+2108)|0);
 var $291=$290;
 HEAP32[(($291)>>2)]=502;
 var $292=(($149+2112)|0);
 var $293=$292;
 HEAP32[(($293)>>2)]=$202;
 var $294=(($149+460)|0);
 var $295=$294;
 HEAP32[(($295)>>2)]=364;
 var $296=(($149+464)|0);
 var $297=$296;
 HEAP32[(($297)>>2)]=$202;
 var $298=(($202+14868)|0);
 var $$etemp$22$0=32;
 var $$etemp$22$1=0;
 _randombytes($298,$$etemp$22$0,$$etemp$22$1);
 var $299=(($202+14900)|0);
 var $300=(($202+14932)|0);
 var $$etemp$23$0=32;
 var $$etemp$23$1=0;
 _randombytes($300,$$etemp$23$0,$$etemp$23$1);
 _crypto_scalarmult_curve25519_ref($299,$300,440);
 var $$etemp$24$0=32;
 var $$etemp$24$1=0;
 _randombytes($199,$$etemp$24$0,$$etemp$24$1);
 var $301=_DHT_addfriend($210,$199);
 var $$etemp$25$0=32;
 var $$etemp$25$1=0;
 _randombytes($199,$$etemp$25$0,$$etemp$25$1);
 var $302=_DHT_addfriend($210,$199);
 var $$etemp$26$0=32;
 var $$etemp$26$1=0;
 _randombytes($199,$$etemp$26$0,$$etemp$26$1);
 var $303=_DHT_addfriend($210,$199);
 var $$etemp$27$0=32;
 var $$etemp$27$1=0;
 _randombytes($199,$$etemp$27$0,$$etemp$27$1);
 var $304=_DHT_addfriend($210,$199);
 var $$etemp$28$0=32;
 var $$etemp$28$1=0;

 var $305=(($7+8)|0);
 var $306=$305;
 HEAP32[(($306)>>2)]=$210;
 var $307=($202|0)==0;
 if($307){label=54;break;}else{label=55;break;}
 case 54: 
 var $309=HEAP32[(($190)>>2)];
 _kill_net_crypto($309);
 var $310=HEAP32[(($143)>>2)];
 var $311=(($310+2052)|0);
 var $312=HEAP32[(($311)>>2)];
 var $313=_close($312);
 var $314=$310;
 _free($314);
 _free($7);
 label=81;break;
 case 55: 
 var $316=_malloc(245816);
 var $317=($316|0)==0;
 if($317){var $_0_i9_i_i=0;label=59;break;}else{label=56;break;}
 case 56: 
 var $319=((($316)-(4))|0);
 var $320=$319;
 var $321=HEAP32[(($320)>>2)];
 var $322=$321&3;
 var $323=($322|0)==0;
 if($323){label=58;break;}else{label=57;break;}
 case 57: 
 _memset($316, 0, 245816)|0;
 label=58;break;
 case 58: 
 var $324=$316;
 var $325=$316;
 HEAP32[(($325)>>2)]=$210;
 var $326=$202;
 var $327=HEAP32[(($326)>>2)];
 var $328=(($327)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($329)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=(($316+4)|0);
 var $333=$332;
 HEAP32[(($333)>>2)]=$331;
 var $334=(($316+8)|0);
 var $$etemp$29$0=32;
 var $$etemp$29$1=0;
 _randombytes($334,$$etemp$29$0,$$etemp$29$1);
 var $ld$30$0=13552;
 var $335$0=HEAP32[(($ld$30$0)>>2)];
 var $ld$31$1=13556;
 var $335$1=HEAP32[(($ld$31$1)>>2)];
 var $336=(($316+40)|0);
 var $337=$336;
 var $st$32$0=(($337)|0);
 HEAP32[(($st$32$0)>>2)]=$335$0;
 var $st$33$1=(($337+4)|0);
 HEAP32[(($st$33$1)>>2)]=$335$1;
 var $338=HEAP32[(($333)>>2)];
 var $339=(($338+1024)|0);
 HEAP32[(($339)>>2)]=430;
 var $340=(($338+1028)|0);
 HEAP32[(($340)>>2)]=$316;
 var $341=HEAP32[(($333)>>2)];
 var $342=(($341+1032)|0);
 HEAP32[(($342)>>2)]=162;
 var $343=(($341+1036)|0);
 HEAP32[(($343)>>2)]=$316;
 var $344=HEAP32[(($333)>>2)];
 var $345=(($344+1040)|0);
 HEAP32[(($345)>>2)]=164;
 var $346=(($344+1044)|0);
 HEAP32[(($346)>>2)]=$316;
 var $347=HEAP32[(($333)>>2)];
 var $348=(($347+1120)|0);
 HEAP32[(($348)>>2)]=266;
 var $349=(($347+1124)|0);
 HEAP32[(($349)>>2)]=$316;
 var $350=HEAP32[(($333)>>2)];
 var $351=(($350+1128)|0);
 HEAP32[(($351)>>2)]=808;
 var $352=(($350+1132)|0);
 HEAP32[(($352)>>2)]=$316;
 var $353=HEAP32[(($333)>>2)];
 var $354=(($353+1136)|0);
 HEAP32[(($354)>>2)]=810;
 var $355=(($353+1140)|0);
 HEAP32[(($355)>>2)]=$316;
 var $_0_i9_i_i=$324;label=59;break;
 case 59: 
 var $_0_i9_i_i;
 var $356=(($7+12)|0);
 var $357=$356;
 HEAP32[(($357)>>2)]=$_0_i9_i_i;
 var $358=HEAP32[(($306)>>2)];
 var $359=($358|0)==0;
 if($359){var $_0_i11_i_i=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $361=_malloc(95784);
 var $362=($361|0)==0;
 if($362){var $_0_i11_i_i=0;label=64;break;}else{label=61;break;}
 case 61: 
 var $364=((($361)-(4))|0);
 var $365=$364;
 var $366=HEAP32[(($365)>>2)];
 var $367=$366&3;
 var $368=($367|0)==0;
 if($368){label=63;break;}else{label=62;break;}
 case 62: 
 _memset($361, 0, 95784)|0;
 label=63;break;
 case 63: 
 var $369=$361;
 var $370=$361;
 HEAP32[(($370)>>2)]=$358;
 var $371=(($358+4)|0);
 var $372=HEAP32[(($371)>>2)];
 var $373=(($361+4)|0);
 var $374=$373;
 HEAP32[(($374)>>2)]=$372;
 var $375=(($361+13832)|0);
 var $$etemp$34$0=32;
 var $$etemp$34$1=0;
 _randombytes($375,$$etemp$34$0,$$etemp$34$1);
 var $376=HEAP32[(($374)>>2)];
 var $377=(($376+1048)|0);
 HEAP32[(($377)>>2)]=192;
 var $378=(($376+1052)|0);
 HEAP32[(($378)>>2)]=$361;
 var $379=HEAP32[(($374)>>2)];
 var $380=(($379+1064)|0);
 HEAP32[(($380)>>2)]=324;
 var $381=(($379+1068)|0);
 HEAP32[(($381)>>2)]=$361;
 var $_0_i11_i_i=$369;label=64;break;
 case 64: 
 var $_0_i11_i_i;
 var $382=(($7+16)|0);
 var $383=$382;
 HEAP32[(($383)>>2)]=$_0_i11_i_i;
 var $384=HEAP32[(($306)>>2)];
 var $385=($384|0)==0;
 if($385){var $_0_i13_i_i=0;label=69;break;}else{label=65;break;}
 case 65: 
 var $387=_malloc(4600);
 var $388=($387|0)==0;
 if($388){var $_0_i13_i_i=0;label=69;break;}else{label=66;break;}
 case 66: 
 var $390=((($387)-(4))|0);
 var $391=$390;
 var $392=HEAP32[(($391)>>2)];
 var $393=$392&3;
 var $394=($393|0)==0;
 if($394){label=68;break;}else{label=67;break;}
 case 67: 
 _memset($387, 0, 4600)|0;
 label=68;break;
 case 68: 
 var $395=$387;
 var $396=$387;
 HEAP32[(($396)>>2)]=$384;
 var $397=(($384)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=(($398)|0);
 var $400=HEAP32[(($399)>>2)];
 var $401=(($400)|0);
 var $402=HEAP32[(($401)>>2)];
 var $403=(($387+4)|0);
 var $404=$403;
 HEAP32[(($404)>>2)]=$402;
 var $405=(($387+2072)|0);
 var $$etemp$35$0=32;
 var $$etemp$35$1=0;
 _randombytes($405,$$etemp$35$0,$$etemp$35$1);
 var $406=(($387+2112)|0);
 var $407=(($387+2144)|0);
 var $$etemp$36$0=32;
 var $$etemp$36$1=0;
 _randombytes($407,$$etemp$36$0,$$etemp$36$1);
 _crypto_scalarmult_curve25519_ref($406,$407,440);
 var $408=HEAP32[(($404)>>2)];
 var $409=(($408+1056)|0);
 HEAP32[(($409)>>2)]=690;
 var $410=(($408+1060)|0);
 HEAP32[(($410)>>2)]=$387;
 var $411=HEAP32[(($404)>>2)];
 var $412=(($411+1072)|0);
 HEAP32[(($412)>>2)]=118;
 var $413=(($411+1076)|0);
 HEAP32[(($413)>>2)]=$387;
 var $414=(($387+3796)|0);
 var $415=$414;
 HEAP32[(($415)>>2)]=428;
 var $416=(($387+3800)|0);
 var $417=$416;
 HEAP32[(($417)>>2)]=$387;
 var $418=HEAP32[(($396)>>2)];
 var $419=(($418)|0);
 var $420=HEAP32[(($419)>>2)];
 var $421=(($420+1324)|0);
 HEAP32[(($421)>>2)]=394;
 var $422=(($420+1328)|0);
 HEAP32[(($422)>>2)]=$387;
 var $_0_i13_i_i=$395;label=69;break;
 case 69: 
 var $_0_i13_i_i;
 var $423=(($7+20)|0);
 var $424=$423;
 HEAP32[(($424)>>2)]=$_0_i13_i_i;
 var $425=HEAP32[(($357)>>2)];
 var $426=($425|0)==0;
 if($426){label=72;break;}else{label=70;break;}
 case 70: 
 var $428=HEAP32[(($383)>>2)];
 var $429=($428|0)==0;
 var $430=($_0_i13_i_i|0)==0;
 var $or_cond_i_i=$429|$430;
 if($or_cond_i_i){label=71;break;}else{label=77;break;}
 case 71: 
 var $432=(($425+4)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=(($433+1024)|0);
 HEAP32[(($434)>>2)]=0;
 var $435=(($433+1028)|0);
 HEAP32[(($435)>>2)]=0;
 var $436=HEAP32[(($432)>>2)];
 var $437=(($436+1032)|0);
 HEAP32[(($437)>>2)]=0;
 var $438=(($436+1036)|0);
 HEAP32[(($438)>>2)]=0;
 var $439=HEAP32[(($432)>>2)];
 var $440=(($439+1040)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=(($439+1044)|0);
 HEAP32[(($441)>>2)]=0;
 var $442=HEAP32[(($432)>>2)];
 var $443=(($442+1120)|0);
 HEAP32[(($443)>>2)]=0;
 var $444=(($442+1124)|0);
 HEAP32[(($444)>>2)]=0;
 var $445=HEAP32[(($432)>>2)];
 var $446=(($445+1128)|0);
 HEAP32[(($446)>>2)]=0;
 var $447=(($445+1132)|0);
 HEAP32[(($447)>>2)]=0;
 var $448=HEAP32[(($432)>>2)];
 var $449=(($448+1136)|0);
 HEAP32[(($449)>>2)]=0;
 var $450=(($448+1140)|0);
 HEAP32[(($450)>>2)]=0;
 var $451=$425;
 _free($451);
 label=72;break;
 case 72: 
 var $452=HEAP32[(($383)>>2)];
 var $453=($452|0)==0;
 if($453){label=74;break;}else{label=73;break;}
 case 73: 
 var $455=(($452+4)|0);
 var $456=HEAP32[(($455)>>2)];
 var $457=(($456+1048)|0);
 HEAP32[(($457)>>2)]=0;
 var $458=(($456+1052)|0);
 HEAP32[(($458)>>2)]=0;
 var $459=HEAP32[(($455)>>2)];
 var $460=(($459+1064)|0);
 HEAP32[(($460)>>2)]=0;
 var $461=(($459+1068)|0);
 HEAP32[(($461)>>2)]=0;
 var $462=$452;
 _free($462);
 label=74;break;
 case 74: 
 var $463=HEAP32[(($424)>>2)];
 var $464=($463|0)==0;
 if($464){label=76;break;}else{label=75;break;}
 case 75: 
 var $466=(($463+8)|0);
 var $467=HEAP32[(($466)>>2)];
 var $468=(($467)|0);
 _free($468);
 HEAP32[(($466)>>2)]=0;
 var $469=(($463+4)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($470+1056)|0);
 HEAP32[(($471)>>2)]=0;
 var $472=(($470+1060)|0);
 HEAP32[(($472)>>2)]=0;
 var $473=HEAP32[(($469)>>2)];
 var $474=(($473+1072)|0);
 HEAP32[(($474)>>2)]=0;
 var $475=(($473+1076)|0);
 HEAP32[(($475)>>2)]=0;
 var $476=(($463+3796)|0);
 HEAP32[(($476)>>2)]=0;
 var $477=(($463+3800)|0);
 HEAP32[(($477)>>2)]=0;
 var $478=(($463)|0);
 var $479=HEAP32[(($478)>>2)];
 var $480=(($479)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=(($481+1324)|0);
 HEAP32[(($482)>>2)]=0;
 var $483=(($481+1328)|0);
 HEAP32[(($483)>>2)]=0;
 var $484=$463;
 _free($484);
 label=76;break;
 case 76: 
 var $485=HEAP32[(($306)>>2)];
 var $486=(($485+4)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=(($487+16)|0);
 HEAP32[(($488)>>2)]=0;
 var $489=(($487+20)|0);
 HEAP32[(($489)>>2)]=0;
 var $490=HEAP32[(($486)>>2)];
 var $491=(($490+24)|0);
 HEAP32[(($491)>>2)]=0;
 var $492=(($490+28)|0);
 HEAP32[(($492)>>2)]=0;
 var $493=HEAP32[(($486)>>2)];
 var $494=(($493+32)|0);
 HEAP32[(($494)>>2)]=0;
 var $495=(($493+36)|0);
 HEAP32[(($495)>>2)]=0;
 var $496=(($485)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=(($497+2108)|0);
 HEAP32[(($498)>>2)]=0;
 var $499=(($497+2112)|0);
 HEAP32[(($499)>>2)]=0;
 var $500=HEAP32[(($496)>>2)];
 var $501=(($500+460)|0);
 HEAP32[(($501)>>2)]=0;
 var $502=(($500+464)|0);
 HEAP32[(($502)>>2)]=0;
 var $503=(($485+178816)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=(($504)|0);
 var $506=HEAP32[(($505)>>2)];
 var $507=(($506+4)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=(($508)|0);
 HEAP32[(($509)>>2)]=0;
 var $510=(($508+4)|0);
 HEAP32[(($510)>>2)]=0;
 var $511=HEAP32[(($505)>>2)];
 var $512=(($511+4)|0);
 var $513=HEAP32[(($512)>>2)];
 var $514=(($513+8)|0);
 HEAP32[(($514)>>2)]=0;
 var $515=(($513+12)|0);
 HEAP32[(($515)>>2)]=0;
 var $516=$504;
 _free($516);
 var $517=(($485+14964)|0);
 var $518=HEAP32[(($517)>>2)];
 var $519=(($518)|0);
 _free($519);
 var $520=$485;
 _free($520);
 var $521=HEAP32[(($190)>>2)];
 _kill_net_crypto($521);
 var $522=HEAP32[(($143)>>2)];
 var $523=(($522+2052)|0);
 var $524=HEAP32[(($523)>>2)];
 var $525=_close($524);
 var $526=$522;
 _free($526);
 _free($7);
 label=81;break;
 case 77: 
 var $528=(($7+1210)|0);
 assert(7 % 1 === 0);HEAP8[($528)]=HEAP8[(1192)];HEAP8[((($528)+(1))|0)]=HEAP8[(1193)];HEAP8[((($528)+(2))|0)]=HEAP8[(1194)];HEAP8[((($528)+(3))|0)]=HEAP8[(1195)];HEAP8[((($528)+(4))|0)]=HEAP8[(1196)];HEAP8[((($528)+(5))|0)]=HEAP8[(1197)];HEAP8[((($528)+(6))|0)]=HEAP8[(1198)];
 var $529=(($7+2218)|0);
 var $530=$529;
 HEAP16[(($530)>>1)]=7;
 var $531=(($7+2228)|0);
 var $532=$531;
 var $533=HEAP32[(($532)>>2)];
 var $534=($533|0)==0;
 if($534){var $543=$_0_i13_i_i;label=82;break;}else{label=78;break;}
 case 78: 
 var $535=(($7+2224)|0);
 var $536=$535;
 var $i_01_i_i_i=0;label=79;break;
 case 79: 
 var $i_01_i_i_i;
 var $538=HEAP32[(($536)>>2)];
 var $539=(($538+((($i_01_i_i_i)*(14072))&-1)+1218)|0);
 HEAP8[($539)]=0;
 var $540=((($i_01_i_i_i)+(1))|0);
 var $541=HEAP32[(($532)>>2)];
 var $542=($540>>>0)<($541>>>0);
 if($542){var $i_01_i_i_i=$540;label=79;break;}else{label=80;break;}
 case 80: 
 var $_pre_i_i=HEAP32[(($424)>>2)];
 var $543=$_pre_i_i;label=82;break;
 case 81: 
 var $$etemp$37$0=20;
 var $$etemp$37$1=0;

 var $$etemp$38$0=19;
 var $$etemp$38$1=0;

 HEAP32[((13568)>>2)]=0;
 label=83;break;
 case 82: 
 var $543;
 var $544=(($7+24)|0);
 var $545=(($543+2804)|0);
 HEAP32[(($545)>>2)]=524;
 var $546=(($543+2808)|0);
 HEAP32[(($546)>>2)]=$544;
 var $547=HEAP32[(($306)>>2)];
 var $548=(($547+4)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=$547;
 var $551=(($549+264)|0);
 HEAP32[(($551)>>2)]=10;
 var $552=(($549+268)|0);
 HEAP32[(($552)>>2)]=$550;
 var $553=$randnum_i_i_i;
 var $$etemp$39$0=4;
 var $$etemp$39$1=0;

 var $$etemp$40$0=4;
 var $$etemp$40$1=0;
 _randombytes($553,$$etemp$40$0,$$etemp$40$1);
 var $554=HEAP32[(($randnum_i_i_i)>>2)];
 var $$etemp$41$0=4;
 var $$etemp$41$1=0;

 var $555=$544;
 HEAP32[(($555)>>2)]=$554;
 var $556=(($7+44)|0);
 var $557=$556;
 HEAP32[(($557)>>2)]=336;
 var $558=(($7+48)|0);
 var $559=$558;
 HEAP32[(($559)>>2)]=$7;
 var $560=HEAP32[(($143)>>2)];
 var $561=(($560+384)|0);
 HEAP32[(($561)>>2)]=204;
 var $562=(($560+388)|0);
 HEAP32[(($562)>>2)]=$7;
 var $$etemp$42$0=20;
 var $$etemp$42$1=0;

 var $$etemp$43$0=19;
 var $$etemp$43$1=0;

 HEAP32[((13568)>>2)]=$16;
 var $563=($16|0)==0;
 if($563){label=83;break;}else{label=84;break;}
 case 83: 
 var $565=HEAP32[((_stderr)>>2)];
 var $566=_fwrite(3688,42,1,$565);
 var $_0=0;label=99;break;
 case 84: 
 var $567=_malloc(24);
 var $568=($567|0)==0;
 if($568){label=85;break;}else{label=98;break;}
 case 85: 
 var $570=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $571=($570|0)==0;
 if($571){label=92;break;}else{label=86;break;}
 case 86: 
 var $573=$570;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$573]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=87;break; }
 case 87: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=89;break;
 case 88: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=89;break;
 case 89: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $575=$lpad_phi_i$1;
 var $576=($575|0)<0;
 if($576){label=90;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=95;break;}
 case 90: 
 var $578=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($578) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=94;break; }
 case 91: 
 throw "Reached an unreachable!";
 case 92: 
 var $580=___cxa_allocate_exception(4);
 var $581=$580;
 HEAP32[(($581)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($580,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=93;break; } else { label=88;break; }
 case 93: 
 throw "Reached an unreachable!";
 case 94: 
 var $584$0 = ___cxa_find_matching_catch(-1, -1); var $584$1 = tempRet0;
 var $eh_lpad_body$1=$584$1;var $eh_lpad_body$0=$584$0;label=95;break;
 case 95: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $585=$eh_lpad_body$1;
 var $586=($585|0)<0;
 if($586){label=96;break;}else{label=97;break;}
 case 96: 
 var $588=$eh_lpad_body$0;
 ___cxa_call_unexpected($588);
 throw "Reached an unreachable!";
 case 97: 
 ___resumeException($eh_lpad_body$0)
 case 98: 
 HEAP32[((13560)>>2)]=$567;
 var $591=HEAP32[((13568)>>2)];
 var $592=$591;
 var $593=(($591+28)|0);
 HEAP32[(($593)>>2)]=(122);
 var $594=(($591+32)|0);
 HEAP8[($594)]=1;
 var $595=(($591+36)|0);
 HEAP32[(($595)>>2)]=$592;
 var $596=(($591+40)|0);
 HEAP32[(($596)>>2)]=0;
 var $597=(($591+2256)|0);
 HEAP32[(($597)>>2)]=286;
 var $598=(($591+2260)|0);
 HEAP32[(($598)>>2)]=0;
 var $599=(($591+2272)|0);
 HEAP32[(($599)>>2)]=134;
 var $600=(($591+2276)|0);
 HEAP32[(($600)>>2)]=0;
 var $601=(($591+2280)|0);
 HEAP32[(($601)>>2)]=380;
 var $602=(($591+2316)|0);
 HEAP32[(($602)>>2)]=0;
 var $_0=1;label=99;break;
 case 99: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __Z9bootstrapRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEiS7_($address,$port,$id){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $a_i1_i_i_i_i_i=sp;
 var $a_i_i_i_i_i_i=(sp)+(8);
 var $server_i_i_i_i=(sp)+(16);
 var $hints_i_i_i_i=(sp)+(24);
 var $addr4_i_i_i_i=(sp)+(56);
 var $addr6_i_i_i_i=(sp)+(64);
 var $ip_port_v641_i_i=(sp)+(80);
 var $ip_port_v64_i_i_sroa_1=(sp)+(104);
 var $ip_port_v64_i_i_sroa_3=(sp)+(112);
 var $1=(sp)+(128);
 var $2=HEAP32[((13568)>>2)];
 var $3=$address;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($address+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $13=$9;label=4;break;
 case 3: 
 var $11=$address;
 var $12=(($11+1)|0);
 var $13=$12;label=4;break;
 case 4: 
 var $13;
 var $14=$id;
 var $15=HEAP8[($14)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$1;
 assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 label=23;break;
 case 6: 
 var $21=(($id+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($id+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24>>>0)>4294967279;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 8: 
 var $28=($24>>>0)<11;
 if($28){label=9;break;}else{label=10;break;}
 case 9: 
 var $30=$24<<1;
 var $31=(($30)&255);
 var $32=$1;
 HEAP8[($32)]=$31;
 var $33=$1;
 var $34=(($33+1)|0);
 var $__p_0_i_i_i=$34;label=22;break;
 case 10: 
 var $35=((($24)+(16))|0);
 var $36=$35&-16;
 var $37=($36|0)==0;
 var $_size_i=($37?1:$36);
 label=11;break;
 case 11: 
 var $39=_malloc($_size_i);
 var $40=($39|0)==0;
 if($40){label=12;break;}else{label=21;break;}
 case 12: 
 var $42=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $43=($42|0)==0;
 if($43){label=18;break;}else{label=13;break;}
 case 13: 
 var $45=$42;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 14: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=16;break;
 case 16: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $47=$lpad_phi_i$1;
 var $48=($47|0)<0;
 if($48){label=17;break;}else{label=19;break;}
 case 17: 
 var $50=$lpad_phi_i$0;
 ___cxa_call_unexpected($50);
 throw "Reached an unreachable!";
 case 18: 
 var $52=___cxa_allocate_exception(4);
 var $53=$52;
 HEAP32[(($53)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($52,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 19: 
 ___resumeException($lpad_phi_i$0)
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $56=(($1+8)|0);
 HEAP32[(($56)>>2)]=$39;
 var $57=$36|1;
 var $58=(($1)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($1+4)|0);
 HEAP32[(($59)>>2)]=$24;
 var $__p_0_i_i_i=$39;label=22;break;
 case 22: 
 var $__p_0_i_i_i;
 assert($24 % 1 === 0);(_memcpy($__p_0_i_i_i, $22, $24)|0);
 var $60=(($__p_0_i_i_i+$24)|0);
 HEAP8[($60)]=0;
 label=23;break;
 case 23: 
 var $61=(function() { try { __THREW__ = 0; return __Z12hexstr_to_idNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=46;break; }
 case 24: 
 var $63=(($port)&65535);
 var $64=_htons($63);
 var $65=(($2+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=(($ip_port_v641_i_i)|0);
 var $$etemp$0$0=24;
 var $$etemp$0$1=0;

 var $68=(($ip_port_v64_i_i_sroa_1)|0);
 var $$etemp$1$0=3;
 var $$etemp$1$1=0;

 var $69=(($ip_port_v64_i_i_sroa_3)|0);
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 HEAP8[($68)]=0; HEAP8[((($68)+(1))|0)]=0; HEAP8[((($68)+(2))|0)]=0;
 _memset($69, 0, 12)|0;
 var $70=$server_i_i_i_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $71=$hints_i_i_i_i;
 var $$etemp$4$0=32;
 var $$etemp$4$1=0;

 var $72=($13|0)==0;
 if($72){label=36;break;}else{label=25;break;}
 case 25: 
 HEAP32[(($server_i_i_i_i)>>2)]=0;
 _memset($71, 0, 32)|0;
 var $74=(($hints_i_i_i_i+4)|0);
 HEAP32[(($74)>>2)]=2;
 var $75=(($hints_i_i_i_i+8)|0);
 HEAP32[(($75)>>2)]=2;
 var $_b_i_i_i_i=HEAP8[(472)];
 if($_b_i_i_i_i){label=27;break;}else{label=26;break;}
 case 26: 
 _sodium_init();
 var $77=$a_i_i_i_i_i_i;
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;

 var $78=_gettimeofday($a_i_i_i_i_i_i,0);
 var $$etemp$6$0=8;
 var $$etemp$6$1=0;

 var $79=HEAP32[((_stderr)>>2)];
 var $80=_fwrite(1480,20,1,$79);
 var $81=$a_i1_i_i_i_i_i;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $82=_gettimeofday($a_i1_i_i_i_i_i,0);
 var $83=(($a_i1_i_i_i_i_i)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=((($84)*(1000000))&-1);
 var $86=(($a_i1_i_i_i_i_i+4)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=((($85)+($87))|0);
 var $$etemp$8$0=8;
 var $$etemp$8$1=0;

 _srand($88);
 HEAP8[(472)]=1;
 label=27;break;
 case 27: 
 var $89=_getaddrinfo($13,0,$hints_i_i_i_i,$server_i_i_i_i);
 var $90=($89|0)==0;
 if($90){label=28;break;}else{label=36;break;}
 case 28: 
 var $walker_03_i_i_i_i=HEAP32[(($server_i_i_i_i)>>2)];
 var $92=($walker_03_i_i_i_i|0)==0;
 if($92){var $ip4_sroa_0_0_lcssa_i_i_i_i=0;var $rc_0_lcssa_i_i_i_i=0;var $ip6_sroa_0_i_i_i_i_sroa_0_2=0;var $ip_port_v64_i_i_sroa_2_0=0;label=35;break;}else{var $ip4_sroa_0_04_i_i_i_i=0;var $rc_05_i_i_i_i=0;var $walker_06_i_i_i_i=$walker_03_i_i_i_i;var $ip6_sroa_0_i_i_i_i_sroa_0_0=0;label=29;break;}
 case 29: 
 var $ip6_sroa_0_i_i_i_i_sroa_0_0;
 var $walker_06_i_i_i_i;
 var $rc_05_i_i_i_i;
 var $ip4_sroa_0_04_i_i_i_i;
 var $93=(($walker_06_i_i_i_i+4)|0);
 var $94=HEAP32[(($93)>>2)];
 if(($94|0)==2){ label=30;break;}else if(($94|0)==10){ label=31;break;}else{var $rc_1_i_i_i_i=$rc_05_i_i_i_i;var $ip6_sroa_0_i_i_i_i_sroa_0_1=$ip6_sroa_0_i_i_i_i_sroa_0_0;label=34;break;}
 case 30: 
 var $96=(($walker_06_i_i_i_i+20)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+4)|0);
 var $99=$98;
 var $100=((((HEAPU8[($99)])|(HEAPU8[((($99)+(1))|0)]<<8)|(HEAPU8[((($99)+(2))|0)]<<16)|(HEAPU8[((($99)+(3))|0)]<<24))|0));
 var $ip4_sroa_0_0_lcssa_i_i_i_i=$ip4_sroa_0_04_i_i_i_i;var $rc_0_lcssa_i_i_i_i=3;var $ip6_sroa_0_i_i_i_i_sroa_0_2=$ip6_sroa_0_i_i_i_i_sroa_0_0;var $ip_port_v64_i_i_sroa_2_0=$100;label=35;break;
 case 31: 
 var $102=$rc_05_i_i_i_i&2;
 var $103=($102|0)==0;
 if($103){label=32;break;}else{var $rc_1_i_i_i_i=$rc_05_i_i_i_i;var $ip6_sroa_0_i_i_i_i_sroa_0_1=$ip6_sroa_0_i_i_i_i_sroa_0_0;label=34;break;}
 case 32: 
 var $105=(($walker_06_i_i_i_i+16)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==28;
 if($107){label=33;break;}else{var $rc_1_i_i_i_i=$rc_05_i_i_i_i;var $ip6_sroa_0_i_i_i_i_sroa_0_1=$ip6_sroa_0_i_i_i_i_sroa_0_0;label=34;break;}
 case 33: 
 var $109=(($walker_06_i_i_i_i+20)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($110+8)|0);
 var $112=$111;
 var $113=((((HEAPU8[($112)])|(HEAPU8[((($112)+(1))|0)]<<8)|(HEAPU8[((($112)+(2))|0)]<<16)|(HEAPU8[((($112)+(3))|0)]<<24))|0));
 var $114=$rc_05_i_i_i_i|2;
 var $rc_1_i_i_i_i=$114;var $ip6_sroa_0_i_i_i_i_sroa_0_1=$113;label=34;break;
 case 34: 
 var $ip6_sroa_0_i_i_i_i_sroa_0_1;
 var $rc_1_i_i_i_i;
 var $116=(($walker_06_i_i_i_i+28)|0);
 var $walker_0_i_i_i_i=HEAP32[(($116)>>2)];
 var $117=($walker_0_i_i_i_i|0)==0;
 var $118=($rc_1_i_i_i_i|0)==3;
 var $or_cond1_i_i_i_i=$117|$118;
 if($or_cond1_i_i_i_i){var $ip4_sroa_0_0_lcssa_i_i_i_i=$ip4_sroa_0_04_i_i_i_i;var $rc_0_lcssa_i_i_i_i=$rc_1_i_i_i_i;var $ip6_sroa_0_i_i_i_i_sroa_0_2=$ip6_sroa_0_i_i_i_i_sroa_0_1;var $ip_port_v64_i_i_sroa_2_0=0;label=35;break;}else{var $ip4_sroa_0_04_i_i_i_i=$ip4_sroa_0_04_i_i_i_i;var $rc_05_i_i_i_i=$rc_1_i_i_i_i;var $walker_06_i_i_i_i=$walker_0_i_i_i_i;var $ip6_sroa_0_i_i_i_i_sroa_0_0=$ip6_sroa_0_i_i_i_i_sroa_0_1;label=29;break;}
 case 35: 
 var $ip_port_v64_i_i_sroa_2_0;
 var $ip6_sroa_0_i_i_i_i_sroa_0_2;
 var $rc_0_lcssa_i_i_i_i;
 var $ip4_sroa_0_0_lcssa_i_i_i_i;
 _freeaddrinfo($walker_03_i_i_i_i);
 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=32;
 var $$etemp$10$1=0;

 var $119=($rc_0_lcssa_i_i_i_i|0)==0;
 if($119){label=36;break;}else{var $ip_port_v64_i_i_sroa_2_3=$ip_port_v64_i_i_sroa_2_0;var $ip_port_v64_i_i_sroa_0_2=2;label=41;break;}
 case 36: 
 var $120=$addr4_i_i_i_i;
 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $121=$addr6_i_i_i_i;
 var $$etemp$12$0=16;
 var $$etemp$12$1=0;

 if($72){var $_0_i_i=0;label=42;break;}else{label=37;break;}
 case 37: 
 var $123=_inet_pton(2,$13,$120);
 var $124=($123|0)==1;
 if($124){label=38;break;}else{label=39;break;}
 case 38: 
 var $126=(($addr4_i_i_i_i)|0);
 var $127=HEAP32[(($126)>>2)];
 var $ip_port_v64_i_i_sroa_2_3=$127;var $ip_port_v64_i_i_sroa_0_2=2;label=41;break;
 case 39: 
 var $129=_inet_pton(10,$13,$121);
 var $130=($129|0)==1;
 if($130){label=40;break;}else{var $_0_i_i=0;label=42;break;}
 case 40: 
 var $132=(($addr6_i_i_i_i)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(($addr6_i_i_i_i+4)|0);
 var $135=$134;
 assert(12 % 1 === 0);(_memcpy($69, $135, 12)|0);
 var $ip_port_v64_i_i_sroa_2_3=$133;var $ip_port_v64_i_i_sroa_0_2=10;label=41;break;
 case 41: 
 var $ip_port_v64_i_i_sroa_0_2;
 var $ip_port_v64_i_i_sroa_2_3;
 HEAP8[($67)]=$ip_port_v64_i_i_sroa_0_2;
 var $137=(($ip_port_v641_i_i+1)|0);
 assert(3 % 1 === 0);HEAP8[($137)]=HEAP8[($68)];HEAP8[((($137)+(1))|0)]=HEAP8[((($68)+(1))|0)];HEAP8[((($137)+(2))|0)]=HEAP8[((($68)+(2))|0)];
 var $138=(($ip_port_v641_i_i+4)|0);
 var $139=$138;
 HEAP32[(($139)>>2)]=$ip_port_v64_i_i_sroa_2_3;
 var $140=(($ip_port_v641_i_i)|0);
 var $141=(($140+8)|0);
 assert(12 % 1 === 0);(_memcpy($141, $69, 12)|0);
 var $142=(($ip_port_v641_i_i+20)|0);
 HEAP16[(($142)>>1)]=$64;
 var $143=(($66+14900)|0);
 var $144=_getnodes($66,$ip_port_v641_i_i,$61,$143,0);
 var $_0_i_i=1;label=42;break;
 case 42: 
 var $_0_i_i;
 var $$etemp$13$0=24;
 var $$etemp$13$1=0;

 var $$etemp$14$0=3;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $146=$1;
 var $147=HEAP8[($146)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=45;break;}else{label=43;break;}
 case 43: 
 var $151=(($1+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=45;break;}else{label=44;break;}
 case 44: 
 _free($152);
 label=45;break;
 case 45: 
 STACKTOP=sp;return $_0_i_i;
 case 46: 
 var $156$0 = ___cxa_find_matching_catch(-1, -1); var $156$1 = tempRet0;
 var $157=$1;
 var $158=HEAP8[($157)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=49;break;}else{label=47;break;}
 case 47: 
 var $162=(($1+8)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){label=49;break;}else{label=48;break;}
 case 48: 
 _free($163);
 label=49;break;
 case 49: 
 ___resumeException($156$0)
  default: assert(0, "bad label: " + label);
 }

}


function __Z10addContactRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_($id,$msg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$msg;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($msg+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$msg;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=HEAP32[((13568)>>2)];
 var $14=$id;
 var $15=HEAP8[($14)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=$1;
 assert(12 % 1 === 0);HEAP32[(($19)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($19)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($19)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 label=23;break;
 case 6: 
 var $21=(($id+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($id+4)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24>>>0)>4294967279;
 if($25){label=7;break;}else{label=8;break;}
 case 7: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 8: 
 var $28=($24>>>0)<11;
 if($28){label=9;break;}else{label=10;break;}
 case 9: 
 var $30=$24<<1;
 var $31=(($30)&255);
 var $32=$1;
 HEAP8[($32)]=$31;
 var $33=$1;
 var $34=(($33+1)|0);
 var $__p_0_i_i_i=$34;label=22;break;
 case 10: 
 var $35=((($24)+(16))|0);
 var $36=$35&-16;
 var $37=($36|0)==0;
 var $_size_i=($37?1:$36);
 label=11;break;
 case 11: 
 var $39=_malloc($_size_i);
 var $40=($39|0)==0;
 if($40){label=12;break;}else{label=21;break;}
 case 12: 
 var $42=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $43=($42|0)==0;
 if($43){label=18;break;}else{label=13;break;}
 case 13: 
 var $45=$42;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 14: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=16;break;
 case 16: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $47=$lpad_phi_i$1;
 var $48=($47|0)<0;
 if($48){label=17;break;}else{label=19;break;}
 case 17: 
 var $50=$lpad_phi_i$0;
 ___cxa_call_unexpected($50);
 throw "Reached an unreachable!";
 case 18: 
 var $52=___cxa_allocate_exception(4);
 var $53=$52;
 HEAP32[(($53)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($52,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 19: 
 ___resumeException($lpad_phi_i$0)
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $56=(($1+8)|0);
 HEAP32[(($56)>>2)]=$39;
 var $57=$36|1;
 var $58=(($1)|0);
 HEAP32[(($58)>>2)]=$57;
 var $59=(($1+4)|0);
 HEAP32[(($59)>>2)]=$24;
 var $__p_0_i_i_i=$39;label=22;break;
 case 22: 
 var $__p_0_i_i_i;
 assert($24 % 1 === 0);(_memcpy($__p_0_i_i_i, $22, $24)|0);
 var $60=(($__p_0_i_i_i+$24)|0);
 HEAP8[($60)]=0;
 label=23;break;
 case 23: 
 var $61=(function() { try { __THREW__ = 0; return __Z12hexstr_to_idNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=31;break; }
 case 24: 
 var $63=HEAP8[($2)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)==0;
 if($65){label=26;break;}else{label=25;break;}
 case 25: 
 var $67=(($msg+4)|0);
 var $68=HEAP32[(($67)>>2)];
 var $extract_t=(($68)&65535);
 var $_off0=$extract_t;label=27;break;
 case 26: 
 var $70=($63&255);
 var $71=($70&65535)>>>1;
 var $_off0=$71;label=27;break;
 case 27: 
 var $_off0;
 var $73=_m_addfriend($13,$61,$12,$_off0);
 var $74=($73|0)!=0;
 var $75=$1;
 var $76=HEAP8[($75)];
 var $77=$76&1;
 var $78=(($77<<24)>>24)==0;
 if($78){label=30;break;}else{label=28;break;}
 case 28: 
 var $80=(($1+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==0;
 if($82){label=30;break;}else{label=29;break;}
 case 29: 
 _free($81);
 label=30;break;
 case 30: 
 STACKTOP=sp;return $74;
 case 31: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $86=$1;
 var $87=HEAP8[($86)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=34;break;}else{label=32;break;}
 case 32: 
 var $91=(($1+8)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=34;break;}else{label=33;break;}
 case 33: 
 _free($92);
 label=34;break;
 case 34: 
 ___resumeException($85$0)
  default: assert(0, "bad label: " + label);
 }

}


function __Z13removeContacti($i){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((13568)>>2)];
 var $2=HEAP32[((14912)>>2)];
 var $3=(($2+((($i)*(48))&-1))|0);
 var $4=HEAP32[(($3)>>2)];
 var $m_idx_i_i=(($1+2228)|0);
 var $m_idx_val_i_i=HEAP32[(($m_idx_i_i)>>2)];
 var $5=($m_idx_val_i_i>>>0)>($4>>>0);
 if($5){label=2;break;}else{var $_0_i_i=1;label=37;break;}
 case 2: 
 var $7=(($1+2224)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+((($4)*(14072))&-1)+52)|0);
 var $10=HEAP8[($9)];
 var $11=(($10<<24)>>24)==4;
 if($11){label=3;break;}else{label=13;break;}
 case 3: 
 var $13=(($1+2236)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=13;break;}else{label=4;break;}
 case 4: 
 var $16=(($1+2232)|0);
 var $17=HEAP32[(($16)>>2)];
 var $i_04_i_i_i=0;label=6;break;
 case 5: 
 var $19=($24>>>0)<($14>>>0);
 if($19){var $i_04_i_i_i=$24;label=6;break;}else{label=13;break;}
 case 6: 
 var $i_04_i_i_i;
 var $21=(($17+((($i_04_i_i_i)*(28))&-1))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($4|0);
 var $24=((($i_04_i_i_i)+(1))|0);
 if($23){label=7;break;}else{label=5;break;}
 case 7: 
 var $26=((($14)-(1))|0);
 HEAP32[(($13)>>2)]=$26;
 var $27=($26|0)==($i_04_i_i_i|0);
 if($27){var $35=$i_04_i_i_i;var $34=$17;label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($17+((($i_04_i_i_i)*(28))&-1))|0);
 var $30=$29;
 var $31=(($17+((($26)*(28))&-1))|0);
 var $32=$31;
 assert(28 % 1 === 0);HEAP32[(($30)>>2)]=HEAP32[(($32)>>2)];HEAP32[((($30)+(4))>>2)]=HEAP32[((($32)+(4))>>2)];HEAP32[((($30)+(8))>>2)]=HEAP32[((($32)+(8))>>2)];HEAP32[((($30)+(12))>>2)]=HEAP32[((($32)+(12))>>2)];HEAP32[((($30)+(16))>>2)]=HEAP32[((($32)+(16))>>2)];HEAP32[((($30)+(20))>>2)]=HEAP32[((($32)+(20))>>2)];HEAP32[((($30)+(24))>>2)]=HEAP32[((($32)+(24))>>2)];
 var $_pr_i_i_i=HEAP32[(($13)>>2)];
 var $_pre_i_i_i=HEAP32[(($16)>>2)];
 var $35=$_pr_i_i_i;var $34=$_pre_i_i_i;label=9;break;
 case 9: 
 var $34;
 var $35;
 var $36=($35|0)==0;
 var $37=$34;
 if($36){label=10;break;}else{label=11;break;}
 case 10: 
 _free($37);
 HEAP32[(($16)>>2)]=0;
 label=13;break;
 case 11: 
 var $40=((($35)*(28))&-1);
 var $41=_realloc($37,$40);
 var $42=($41|0)==0;
 if($42){label=13;break;}else{label=12;break;}
 case 12: 
 var $44=$41;
 HEAP32[(($16)>>2)]=$44;
 label=13;break;
 case 13: 
 var $45=(($1+20)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($7)>>2)];
 var $48=(($47+((($4)*(14072))&-1)+32)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(($46+12)|0);
 var $51=HEAP16[(($50)>>1)];
 var $52=($51&65535);
 var $53=($52>>>0)>($49>>>0);
 if($53){label=14;break;}else{label=25;break;}
 case 14: 
 var $55=(($46+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+((($49)*(2600))&-1)+2)|0);
 var $58=HEAP8[($57)];
 var $59=(($58<<24)>>24)==0;
 if($59){var $65=$56;label=16;break;}else{label=15;break;}
 case 15: 
 var $61=(($46)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($56+((($49)*(2600))&-1)+3)|0);
 _DHT_delfriend($62,$63);
 var $_pre_i1_i_i=HEAP32[(($55)>>2)];
 var $65=$_pre_i1_i_i;label=16;break;
 case 16: 
 var $65;
 var $66=(($65+((($49)*(2600))&-1))|0);
 _memset($66, 0, 2600)|0;
 var $67=HEAP16[(($50)>>1)];
 var $68=($67&65535);
 var $69=(($67<<16)>>16)==0;
 if($69){var $i_0_lcssa_i_i_i=$68;label=20;break;}else{label=17;break;}
 case 17: 
 var $70=HEAP32[(($55)>>2)];
 var $i_01_i_i_i=$68;label=19;break;
 case 18: 
 var $72=($77|0)==0;
 if($72){var $i_0_lcssa_i_i_i=0;label=20;break;}else{var $i_01_i_i_i=$77;label=19;break;}
 case 19: 
 var $i_01_i_i_i;
 var $74=(($70+((($i_01_i_i_i)*(2600))&-1))|0);
 var $75=HEAP8[($74)];
 var $76=(($75<<24)>>24)==0;
 var $77=((($i_01_i_i_i)-(1))|0);
 if($76){label=18;break;}else{var $i_0_lcssa_i_i_i=$i_01_i_i_i;label=20;break;}
 case 20: 
 var $i_0_lcssa_i_i_i;
 var $78=($68|0)==($i_0_lcssa_i_i_i|0);
 if($78){label=25;break;}else{label=21;break;}
 case 21: 
 var $80=(($i_0_lcssa_i_i_i)&65535);
 HEAP16[(($50)>>1)]=$80;
 var $81=$i_0_lcssa_i_i_i&65535;
 var $82=($81|0)==0;
 var $83=HEAP32[(($55)>>2)];
 var $84=(($83)|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 _free($84);
 HEAP32[(($55)>>2)]=0;
 label=25;break;
 case 23: 
 var $87=((($81)*(2600))&-1);
 var $88=_realloc($84,$87);
 var $89=($88|0)==0;
 if($89){label=25;break;}else{label=24;break;}
 case 24: 
 var $91=$88;
 HEAP32[(($55)>>2)]=$91;
 label=25;break;
 case 25: 
 var $92=(($1+4)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=HEAP32[(($7)>>2)];
 var $95=(($94+((($4)*(14072))&-1)+36)|0);
 var $96=HEAP32[(($95)>>2)];
 _crypto_kill($93,$96);
 var $97=HEAP32[(($7)>>2)];
 var $98=(($97+((($4)*(14072))&-1)+1212)|0);
 var $99=HEAP32[(($98)>>2)];
 _free($99);
 var $100=HEAP32[(($7)>>2)];
 var $101=(($100+((($4)*(14072))&-1))|0);
 var $i_01_i3_i_i=0;label=27;break;
 case 26: 
 var $103=((($i_01_i3_i_i)+(1))|0);
 var $104=($103>>>0)<32;
 if($104){var $i_01_i3_i_i=$103;label=27;break;}else{var $115=$100;label=31;break;}
 case 27: 
 var $i_01_i3_i_i;
 var $106=(($1+52+($i_01_i3_i_i<<5))|0);
 var $_03_i_i_i_i_i=32;var $l_04_i_i_i_i_i=$106;var $r_05_i_i_i_i_i=$101;label=28;break;
 case 28: 
 var $r_05_i_i_i_i_i;
 var $l_04_i_i_i_i_i;
 var $_03_i_i_i_i_i;
 var $107=HEAP8[($l_04_i_i_i_i_i)];
 var $108=HEAP8[($r_05_i_i_i_i_i)];
 var $109=(($107<<24)>>24)==(($108<<24)>>24);
 if($109){label=29;break;}else{label=26;break;}
 case 29: 
 var $111=((($_03_i_i_i_i_i)-(1))|0);
 var $112=(($l_04_i_i_i_i_i+1)|0);
 var $113=(($r_05_i_i_i_i_i+1)|0);
 var $114=($111|0)==0;
 if($114){label=30;break;}else{var $_03_i_i_i_i_i=$111;var $l_04_i_i_i_i_i=$112;var $r_05_i_i_i_i_i=$113;label=28;break;}
 case 30: 
 _memset($106, 0, 32)|0;
 var $_pre=HEAP32[(($7)>>2)];
 var $115=$_pre;label=31;break;
 case 31: 
 var $115;
 var $116=(($115+((($4)*(14072))&-1))|0);
 _memset($116, 0, 14072)|0;
 var $117=HEAP32[(($m_idx_i_i)>>2)];
 var $i_0_i_i=$117;label=32;break;
 case 32: 
 var $i_0_i_i;
 var $119=($i_0_i_i|0)==0;
 if($119){label=34;break;}else{label=33;break;}
 case 33: 
 var $121=((($i_0_i_i)-(1))|0);
 var $122=HEAP32[(($7)>>2)];
 var $123=(($122+((($121)*(14072))&-1)+52)|0);
 var $124=HEAP8[($123)];
 var $125=(($124<<24)>>24)==0;
 if($125){var $i_0_i_i=$121;label=32;break;}else{label=35;break;}
 case 34: 
 HEAP32[(($m_idx_i_i)>>2)]=0;
 var $127=HEAP32[(($7)>>2)];
 var $128=(($127)|0);
 _free($128);
 HEAP32[(($7)>>2)]=0;
 var $_0_i_i=0;label=37;break;
 case 35: 
 HEAP32[(($m_idx_i_i)>>2)]=$i_0_i_i;
 var $130=(($122)|0);
 var $131=((($i_0_i_i)*(14072))&-1);
 var $132=_realloc($130,$131);
 var $133=($132|0)==0;
 if($133){var $_0_i_i=1;label=37;break;}else{label=36;break;}
 case 36: 
 var $135=$132;
 HEAP32[(($7)>>2)]=$135;
 var $_0_i_i=0;label=37;break;
 case 37: 
 var $_0_i_i;
 return $_0_i_i;
  default: assert(0, "bad label: " + label);
 }

}


function __Z11sendMessageiRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($i,$msg){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $temp_i_i_i=sp;
 var $1=$msg;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($msg+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=HEAP32[((13568)>>2)];
 var $9=HEAP32[((14912)>>2)];
 var $10=(($9+((($i)*(48))&-1))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($msg+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $26=$13;var $25=$7;var $24=$8;var $23=$11;label=4;break;
 case 3: 
 var $15=$msg;
 var $16=(($15+1)|0);
 var $17=HEAP32[((13568)>>2)];
 var $18=HEAP32[((14912)>>2)];
 var $19=(($18+((($i)*(48))&-1))|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($2&255);
 var $22=$21>>>1;
 var $26=$22;var $25=$16;var $24=$17;var $23=$20;label=4;break;
 case 4: 
 var $23;
 var $24;
 var $25;
 var $26;
 var $m_idx_i_i=(($24+2228)|0);
 var $m_idx_val_i_i=HEAP32[(($m_idx_i_i)>>2)];
 var $27=($m_idx_val_i_i>>>0)>($23>>>0);
 if($27){label=5;break;}else{var $_0_i_i=0;label=7;break;}
 case 5: 
 var $29=(($24+2224)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+((($23)*(14072))&-1)+1232)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=($33|0)==0;
 var $__i_i=($34?1:$33);
 var $35=($26>>>0)>1019;
 if($35){var $_0_i_i=0;label=7;break;}else{label=6;break;}
 case 6: 
 var $37=(($temp_i_i_i)|0);
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $38=_htonl($__i_i);
 var $39=$temp_i_i_i;
 HEAP32[(($39)>>2)]=$38;
 var $40=(($temp_i_i_i+4)|0);
 assert($26 % 1 === 0);(_memcpy($40, $25, $26)|0);
 var $41=((($26)+(4))|0);
 var $42=_write_cryptpacket_id($24,$23,64,$37,$41);
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 var $phitmp1=($__i_i|0)!=0;
 var $not_phitmp_i_i=($42|0)!=0;
 var $phitmp=$phitmp1&$not_phitmp_i_i;
 var $_0_i_i=$phitmp;label=7;break;
 case 7: 
 var $_0_i_i;
 STACKTOP=sp;return $_0_i_i;
  default: assert(0, "bad label: " + label);
 }

}


function __Z5getIdv($agg_result){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $checksum_i_i_i=sp;
 var $1=HEAP32[((13568)>>2)];
 var $2=(($1+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 assert(32 % 1 === 0);(_memcpy(14712, $4, 32)|0);
 var $5=(($1+24)|0);
 var $6=HEAP32[(($5)>>2)];
 tempBigInt=$6;HEAP8[(14744)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(14745)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(14746)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(14747)]=tempBigInt&0xff;
 var $7=$checksum_i_i_i;
 var $$etemp$0$0=2;
 var $$etemp$0$1=0;

 var $tmpcast_i_i_i=$checksum_i_i_i;
 HEAP16[(($checksum_i_i_i)>>1)]=0;
 var $i_01_i_i_i=0;label=2;break;
 case 2: 
 var $i_01_i_i_i;
 var $9=((14712+$i_01_i_i_i)|0);
 var $10=HEAP8[($9)];
 var $11=$i_01_i_i_i&1;
 var $12=(($tmpcast_i_i_i+$11)|0);
 var $13=HEAP8[($12)];
 var $14=$13^$10;
 HEAP8[($12)]=$14;
 var $15=((($i_01_i_i_i)+(1))|0);
 var $16=($15>>>0)<36;
 if($16){var $i_01_i_i_i=$15;label=2;break;}else{label=3;break;}
 case 3: 
 var $17=HEAP16[(($checksum_i_i_i)>>1)];
 var $$etemp$1$0=2;
 var $$etemp$1$1=0;

 tempBigInt=$17;HEAP8[(14748)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[(14749)]=tempBigInt&0xff;
 __Z14data_to_hexstrPKhi($agg_result,14712,38);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z7setNameRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($name){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1024)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $packet_i_i_i_i_i=sp;
 var $1=HEAP32[((13568)>>2)];
 var $2=$name;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($name+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($name+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $extract_t=(($10)&65535);
 var $_off0=$extract_t;var $16=$8;label=4;break;
 case 3: 
 var $12=$name;
 var $13=(($12+1)|0);
 var $14=($3&255);
 var $15=($14&65535)>>>1;
 var $_off0=$15;var $16=$13;label=4;break;
 case 4: 
 var $16;
 var $_off0;
 var $17=($_off0&65535)>128;
 var $18=(($_off0<<16)>>16)==0;
 var $or_cond_i_i=$17|$18;
 if($or_cond_i_i){var $_0_i_i=0;label=15;break;}else{label=5;break;}
 case 5: 
 var $20=($_off0&65535);
 var $21=(($1+1080)|0);
 assert($20 % 1 === 0);(_memcpy($21, $16, $20)|0);
 var $22=(($1+1208)|0);
 HEAP16[(($22)>>1)]=$_off0;
 var $23=(($1+2228)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($24|0)==0;
 if($25){label=7;break;}else{label=6;break;}
 case 6: 
 var $26=(($1+2224)|0);
 var $i_02_i_i=0;label=9;break;
 case 7: 
 var $27=(($1+2244)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){var $_0_i_i=1;label=15;break;}else{label=8;break;}
 case 8: 
 var $30=(($1+2240)|0);
 var $31=((($20)+(37))|0);
 var $32=($31>>>0)>1024;
 var $33=(($packet_i_i_i_i_i)|0);
 var $34=(($packet_i_i_i_i_i+32)|0);
 var $35=$34;
 var $36=(($packet_i_i_i_i_i+37)|0);
 var $37=(($packet_i_i_i_i_i+36)|0);
 var $38=(($31)&65535);
 var $i_11_i_i=0;var $45=$28;label=10;break;
 case 9: 
 var $i_02_i_i;
 var $40=HEAP32[(($26)>>2)];
 var $41=(($40+((($i_02_i_i)*(14072))&-1)+1208)|0);
 HEAP8[($41)]=0;
 var $42=((($i_02_i_i)+(1))|0);
 var $43=HEAP32[(($23)>>2)];
 var $44=($42>>>0)<($43>>>0);
 if($44){var $i_02_i_i=$42;label=9;break;}else{label=7;break;}
 case 10: 
 var $45;
 var $i_11_i_i;
 var $46=HEAP32[(($30)>>2)];
 var $47=(($46+($i_11_i_i<<2))|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($48|0)==0;
 if($49){var $62=$45;label=14;break;}else{label=11;break;}
 case 11: 
 var $51=(($48+496)|0);
 assert($20 % 1 === 0);(_memcpy($51, $16, $20)|0);
 var $52=(($48+624)|0);
 HEAP16[(($52)>>1)]=$_off0;
 if($32){label=13;break;}else{label=12;break;}
 case 12: 
 var $$etemp$0$0=1024;
 var $$etemp$0$1=0;

 var $54=(($48+460)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=((($55)+(1))|0);
 var $57=($56|0)==0;
 var $__i_i_i_i_i=($57?1:$56);
 HEAP32[(($54)>>2)]=$__i_i_i_i_i;
 var $58=_htonl($__i_i_i_i_i);
 var $59=(($48+4)|0);
 assert(32 % 1 === 0);(_memcpy($33, $59, 32)|0);
 tempBigInt=$58;HEAP8[($35)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($35)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($35)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($35)+(3))|0)]=tempBigInt&0xff;
 assert($20 % 1 === 0);(_memcpy($36, $51, $20)|0);
 HEAP8[($37)]=48;
 var $60=_sendto_allpeers($48,$33,$38);
 var $$etemp$1$0=1024;
 var $$etemp$1$1=0;

 label=13;break;
 case 13: 
 var $_pre_i_i=HEAP32[(($27)>>2)];
 var $62=$_pre_i_i;label=14;break;
 case 14: 
 var $62;
 var $63=((($i_11_i_i)+(1))|0);
 var $64=($63>>>0)<($62>>>0);
 if($64){var $i_11_i_i=$63;var $45=$62;label=10;break;}else{var $_0_i_i=1;label=15;break;}
 case 15: 
 var $_0_i_i;
 STACKTOP=sp;return $_0_i_i;
  default: assert(0, "bad label: " + label);
 }

}


function __Z7getNamev($agg_result){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((13568)>>2)];
 var $2=(($1+1080)|0);
 var $3=(($1+1208)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535);
 assert($5 % 1 === 0);(_memcpy(14584, $2, $5)|0);
 var $6=HEAP16[(($3)>>1)];
 var $7=($6&65535);
 var $8=($6&65535)<11;
 if($8){label=2;break;}else{label=3;break;}
 case 2: 
 var $10=$7<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 HEAP8[($12)]=$11;
 var $13=$agg_result;
 var $14=(($13+1)|0);
 var $__p_0_i_i_i=$14;label=15;break;
 case 3: 
 var $15=((($7)+(16))|0);
 var $16=$15&131056;
 var $17=($16|0)==0;
 var $_size_i_i=($17?1:$16);
 label=4;break;
 case 4: 
 var $19=_malloc($_size_i_i);
 var $20=($19|0)==0;
 if($20){label=5;break;}else{label=14;break;}
 case 5: 
 var $22=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $23=($22|0)==0;
 if($23){label=11;break;}else{label=6;break;}
 case 6: 
 var $25=$22;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 7: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=9;break;
 case 9: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $27=$lpad_phi_i_i$1;
 var $28=($27|0)<0;
 if($28){label=10;break;}else{label=12;break;}
 case 10: 
 var $30=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($30);
 throw "Reached an unreachable!";
 case 11: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 12: 
 ___resumeException($lpad_phi_i_i$0)
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $36=(($agg_result+8)|0);
 HEAP32[(($36)>>2)]=$19;
 var $37=$16|1;
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($agg_result+4)|0);
 HEAP32[(($39)>>2)]=$7;
 var $__p_0_i_i_i=$19;label=15;break;
 case 15: 
 var $__p_0_i_i_i;
 assert($7 % 1 === 0);(_memcpy($__p_0_i_i_i, 14584, $7)|0);
 var $40=(($__p_0_i_i_i+$7)|0);
 HEAP8[($40)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z16setStatusMessageRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((13568)>>2)];
 var $2=$msg;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($msg+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($msg+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $extract_t=(($10)&65535);
 var $_off0=$extract_t;var $16=$8;label=4;break;
 case 3: 
 var $12=$msg;
 var $13=(($12+1)|0);
 var $14=($3&255);
 var $15=($14&65535)>>>1;
 var $_off0=$15;var $16=$13;label=4;break;
 case 4: 
 var $16;
 var $_off0;
 var $17=($_off0&65535)>1007;
 if($17){var $_0_i_i=0;label=8;break;}else{label=5;break;}
 case 5: 
 var $19=($_off0&65535);
 var $20=(($1+1210)|0);
 assert($19 % 1 === 0);(_memcpy($20, $16, $19)|0);
 var $21=(($1+2218)|0);
 HEAP16[(($21)>>1)]=$_off0;
 var $22=(($1+2228)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==0;
 if($24){var $_0_i_i=1;label=8;break;}else{label=6;break;}
 case 6: 
 var $25=(($1+2224)|0);
 var $i_01_i_i=0;label=7;break;
 case 7: 
 var $i_01_i_i;
 var $27=HEAP32[(($25)>>2)];
 var $28=(($27+((($i_01_i_i)*(14072))&-1)+1218)|0);
 HEAP8[($28)]=0;
 var $29=((($i_01_i_i)+(1))|0);
 var $30=HEAP32[(($22)>>2)];
 var $31=($29>>>0)<($30>>>0);
 if($31){var $i_01_i_i=$29;label=7;break;}else{var $_0_i_i=1;label=8;break;}
 case 8: 
 var $_0_i_i;
 return $_0_i_i;
  default: assert(0, "bad label: " + label);
 }

}


function __Z16getStatusMessagev($agg_result){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((13568)>>2)];
 _memset(13576, 0, 1007)|0;
 var $2=(($1+1210)|0);
 var $3=(($1+2218)|0);
 var $4=HEAP16[(($3)>>1)];
 var $5=($4&65535);
 var $6=($5>>>0)>1007;
 var $maxlen__i_i=($6?1007:$5);
 assert($maxlen__i_i % 1 === 0);(_memcpy(13576, $2, $maxlen__i_i)|0);
 var $7=HEAP16[(($3)>>1)];
 var $8=($7&65535);
 var $9=($8>>>0)>1007;
 var $10=($9?1007:$8);
 var $11=($10>>>0)<11;
 if($11){label=2;break;}else{label=3;break;}
 case 2: 
 var $13=$10<<1;
 var $14=(($13)&255);
 var $15=$agg_result;
 HEAP8[($15)]=$14;
 var $16=$agg_result;
 var $17=(($16+1)|0);
 var $__p_0_i_i_i=$17;label=15;break;
 case 3: 
 var $18=((($10)+(16))|0);
 var $19=$18&131056;
 var $20=($19|0)==0;
 var $_size_i_i=($20?1:$19);
 label=4;break;
 case 4: 
 var $22=_malloc($_size_i_i);
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=14;break;}
 case 5: 
 var $25=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=11;break;}else{label=6;break;}
 case 6: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=7;break; }
 case 7: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=9;break;
 case 8: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=9;break;
 case 9: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $30=$lpad_phi_i_i$1;
 var $31=($30|0)<0;
 if($31){label=10;break;}else{label=12;break;}
 case 10: 
 var $33=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($33);
 throw "Reached an unreachable!";
 case 11: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=8;break; }
 case 12: 
 ___resumeException($lpad_phi_i_i$0)
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $39=(($agg_result+8)|0);
 HEAP32[(($39)>>2)]=$22;
 var $40=$19|1;
 var $41=(($agg_result)|0);
 HEAP32[(($41)>>2)]=$40;
 var $42=(($agg_result+4)|0);
 HEAP32[(($42)>>2)]=$10;
 var $__p_0_i_i_i=$22;label=15;break;
 case 15: 
 var $__p_0_i_i_i;
 assert($10 % 1 === 0);(_memcpy($__p_0_i_i_i, 13576, $10)|0);
 var $44=(($__p_0_i_i_i+$10)|0);
 HEAP8[($44)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z9setStatusi($status){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((13568)>>2)];
 var $2=(($status)&255);
 var $3=($2&255)>2;
 if($3){var $_0_i_i=0;label=5;break;}else{label=2;break;}
 case 2: 
 var $5=$status&255;
 var $6=(($1+2220)|0);
 HEAP32[(($6)>>2)]=$5;
 var $7=(($1+2228)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){var $_0_i_i=1;label=5;break;}else{label=3;break;}
 case 3: 
 var $10=(($1+2224)|0);
 var $i_01_i_i=0;label=4;break;
 case 4: 
 var $i_01_i_i;
 var $12=HEAP32[(($10)>>2)];
 var $13=(($12+((($i_01_i_i)*(14072))&-1)+1224)|0);
 HEAP8[($13)]=0;
 var $14=((($i_01_i_i)+(1))|0);
 var $15=HEAP32[(($7)>>2)];
 var $16=($14>>>0)<($15>>>0);
 if($16){var $i_01_i_i=$14;label=4;break;}else{var $_0_i_i=1;label=5;break;}
 case 5: 
 var $_0_i_i;
 return $_0_i_i;
  default: assert(0, "bad label: " + label);
 }

}


function __Z9getStatusv(){
 var label=0;


 var $1=HEAP32[((13568)>>2)];
 var $2=(($1+2220)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&255;
 return $4;
}


function __Z12changeNospamv(){
 var label=0;


 var $1=HEAP32[((13568)>>2)];
 var $2=_rand();
 var $3=(($1+24)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}


function __Z11getContactsv(){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=HEAP32[((13568)>>2)];
 var $5=(($4+2228)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){var $ret_0_lcssa_i_i=0;label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($4+2224)|0);
 var $9=HEAP32[(($8)>>2)];
 var $ret_01_i_i=0;var $i_02_i_i=0;label=3;break;
 case 3: 
 var $i_02_i_i;
 var $ret_01_i_i;
 var $11=(($9+((($i_02_i_i)*(14072))&-1)+52)|0);
 var $12=HEAP8[($11)];
 var $not__i_i=(($12<<24)>>24)!=0;
 var $13=($not__i_i&1);
 var $ret_0__i_i=((($13)+($ret_01_i_i))|0);
 var $14=((($i_02_i_i)+(1))|0);
 var $15=($14>>>0)<($6>>>0);
 if($15){var $ret_01_i_i=$ret_0__i_i;var $i_02_i_i=$14;label=3;break;}else{var $ret_0_lcssa_i_i=$ret_0__i_i;label=4;break;}
 case 4: 
 var $ret_0_lcssa_i_i;
 var $16$0=_llvm_umul_with_overflow_i32($ret_0_lcssa_i_i,4);
 var $16$1=tempRet0;
 var $17=$16$1;
 var $18=$16$0;
 var $19=($17?-1:$18);
 var $20=($19|0)==0;
 var $_size_i=($20?1:$19);
 label=5;break;
 case 5: 
 var $22=_malloc($_size_i);
 var $23=($22|0)==0;
 if($23){label=6;break;}else{label=19;break;}
 case 6: 
 var $25=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=13;break;}else{label=7;break;}
 case 7: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=8;break; }
 case 8: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=10;break;
 case 10: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $30=$lpad_phi_i$1;
 var $31=($30|0)<0;
 if($31){label=11;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=16;break;}
 case 11: 
 var $33=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=9;break; }
 case 14: 
 throw "Reached an unreachable!";
 case 15: 
 var $39$0 = ___cxa_find_matching_catch(-1, -1); var $39$1 = tempRet0;
 var $eh_lpad_body$1=$39$1;var $eh_lpad_body$0=$39$0;label=16;break;
 case 16: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $40=$eh_lpad_body$1;
 var $41=($40|0)<0;
 if($41){label=17;break;}else{label=18;break;}
 case 17: 
 var $43=$eh_lpad_body$0;
 ___cxa_call_unexpected($43);
 throw "Reached an unreachable!";
 case 18: 
 ___resumeException($eh_lpad_body$0)
 case 19: 
 var $46=$22;
 var $47=HEAP32[((13568)>>2)];
 var $48=(($47+2228)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=($49|0)==0;
 var $51=($ret_0_lcssa_i_i|0)==0;
 var $or_cond5_i_i=$50|$51;
 if($or_cond5_i_i){var $_0_i_i=0;label=24;break;}else{label=20;break;}
 case 20: 
 var $52=(($47+2224)|0);
 var $_pre_i_i=HEAP32[(($52)>>2)];
 var $i_02_i_i2=0;var $ret_03_i_i=0;var $54=$49;label=21;break;
 case 21: 
 var $54;
 var $ret_03_i_i;
 var $i_02_i_i2;
 var $55=(($_pre_i_i+((($i_02_i_i2)*(14072))&-1)+52)|0);
 var $56=HEAP8[($55)];
 var $57=(($56<<24)>>24)==0;
 if($57){var $ret_1_i_i=$ret_03_i_i;var $62=$54;label=23;break;}else{label=22;break;}
 case 22: 
 var $59=(($46+($ret_03_i_i<<2))|0);
 HEAP32[(($59)>>2)]=$i_02_i_i2;
 var $60=((($ret_03_i_i)+(1))|0);
 var $_pre4_i_i=HEAP32[(($48)>>2)];
 var $ret_1_i_i=$60;var $62=$_pre4_i_i;label=23;break;
 case 23: 
 var $62;
 var $ret_1_i_i;
 var $63=((($i_02_i_i2)+(1))|0);
 var $64=($63>>>0)<($62>>>0);
 var $65=($ret_1_i_i>>>0)<($ret_0_lcssa_i_i>>>0);
 var $or_cond_i_i=$64&$65;
 if($or_cond_i_i){var $i_02_i_i2=$63;var $ret_03_i_i=$ret_1_i_i;var $54=$62;label=21;break;}else{var $_0_i_i=$ret_1_i_i;label=24;break;}
 case 24: 
 var $_0_i_i;
 var $66=($_0_i_i|0)==($ret_0_lcssa_i_i|0);
 if($66){label=26;break;}else{label=25;break;}
 case 25: 
 var $68=HEAP32[((_stderr)>>2)];
 var $69=_fwrite(3480,28,1,$68);
 label=26;break;
 case 26: 
 var $70=HEAP32[((_stderr)>>2)];
 var $71=$1;
 var $72=$2;
 var $73=$2;
 var $74=(($73+1)|0);
 var $75=$3;
 var $76=$3;
 var $77=(($76+1)|0);
 var $78=(($3+8)|0);
 var $79=(($3)|0);
 var $80=(($3+4)|0);
 var $81=(($2+8)|0);
 var $82=(($2)|0);
 var $83=(($2+4)|0);
 var $storemerge=0;label=27;break;
 case 27: 
 var $storemerge;
 var $85=($storemerge|0)<($_0_i_i|0);
 if($85){label=28;break;}else{label=88;break;}
 case 28: 
 var $87=(($46+($storemerge<<2))|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=HEAP32[((14912)>>2)];
 var $90=(($89+((($storemerge)*(48))&-1))|0);
 HEAP32[(($90)>>2)]=$88;
 var $91=HEAP32[((13568)>>2)];
 var $92=HEAP32[(($87)>>2)];
 var $m_idx_i_i=(($91+2228)|0);
 var $m_idx_val_i_i=HEAP32[(($m_idx_i_i)>>2)];
 var $93=($m_idx_val_i_i>>>0)>($92>>>0);
 if($93){label=29;break;}else{label=31;break;}
 case 29: 
 var $95=(($91+2224)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+((($92)*(14072))&-1)+52)|0);
 var $98=HEAP8[($97)];
 var $99=(($98<<24)>>24)==0;
 if($99){label=31;break;}else{label=30;break;}
 case 30: 
 var $100=(($96+((($92)*(14072))&-1))|0);
 assert(32 % 1 === 0);(_memcpy(14712, $100, 32)|0);
 label=32;break;
 case 31: 
 var $102=_fprintf($70,3384,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$92,tempVarArgs)); STACKTOP=tempVarArgs;
 label=32;break;
 case 32: 
 var $104=HEAP32[((14912)>>2)];
 var $105=(($104+((($storemerge)*(48))&-1)+4)|0);
 __Z14data_to_hexstrPKhi($1,14712,38);
 var $106=$105;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=34;break;}else{label=33;break;}
 case 33: 
 var $111=(($104+((($storemerge)*(48))&-1)+12)|0);
 var $112=HEAP32[(($111)>>2)];
 HEAP8[($112)]=0;
 var $113=(($104+((($storemerge)*(48))&-1)+8)|0);
 HEAP32[(($113)>>2)]=0;
 label=35;break;
 case 34: 
 var $115=$105;
 var $116=(($115+1)|0);
 HEAP8[($116)]=0;
 HEAP8[($106)]=0;
 label=35;break;
 case 35: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($105) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=36;break; }
 case 36: 
 var $118$0 = ___cxa_find_matching_catch(-1, -1,0); var $118$1 = tempRet0;
 var $119=$118$0;
 ___clang_call_terminate($119);
 throw "Reached an unreachable!";
 case 37: 
 assert(12 % 1 === 0);HEAP32[(($106)>>2)]=HEAP32[(($71)>>2)];HEAP32[((($106)+(4))>>2)]=HEAP32[((($71)+(4))>>2)];HEAP32[((($106)+(8))>>2)]=HEAP32[((($71)+(8))>>2)];
 HEAP32[(($71)>>2)]=0; HEAP32[((($71)+(4))>>2)]=0; HEAP32[((($71)+(8))>>2)]=0;
 var $120=HEAP32[((13568)>>2)];
 var $121=HEAP32[(($87)>>2)];
 var $m_idx_i_i4=(($120+2228)|0);
 var $m_idx_val_i_i5=HEAP32[(($m_idx_i_i4)>>2)];
 var $122=($m_idx_val_i_i5>>>0)>($121>>>0);
 if($122){label=39;break;}else{label=38;break;}
 case 38: 
 var $124=_fprintf($70,3240,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$121,tempVarArgs)); STACKTOP=tempVarArgs;
 var $125=HEAP32[((14912)>>2)];
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 39: 
 var $127=(($120+2224)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+((($121)*(14072))&-1)+1077)|0);
 var $130=(($128+((($121)*(14072))&-1)+1206)|0);
 var $131=HEAP16[(($130)>>1)];
 var $132=($131&65535);
 assert($132 % 1 === 0);(_memcpy(14584, $129, $132)|0);
 var $133=HEAP32[(($127)>>2)];
 var $134=(($133+((($121)*(14072))&-1)+1206)|0);
 var $135=HEAP16[(($134)>>1)];
 var $136=($135&65535);
 var $137=HEAP32[((14912)>>2)];
 var $138=(($137+((($storemerge)*(48))&-1)+16)|0);
 var $139=($136>>>0)<11;
 if($139){label=40;break;}else{label=41;break;}
 case 40: 
 var $141=$136<<1;
 var $142=(($141)&255);
 HEAP8[($72)]=$142;
 var $__p_0_i_i_i=$74;label=53;break;
 case 41: 
 var $143=((($136)+(16))|0);
 var $144=$143&-16;
 var $145=($144|0)==0;
 var $_size_i_i=($145?1:$144);
 label=42;break;
 case 42: 
 var $147=_malloc($_size_i_i);
 var $148=($147|0)==0;
 if($148){label=43;break;}else{label=52;break;}
 case 43: 
 var $150=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=44;break;}
 case 44: 
 var $153=$150;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$153]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=45;break; }
 case 45: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=47;break;
 case 46: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=47;break;
 case 47: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $155=$lpad_phi_i_i$1;
 var $156=($155|0)<0;
 if($156){label=48;break;}else{label=50;break;}
 case 48: 
 var $158=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($158);
 throw "Reached an unreachable!";
 case 49: 
 var $160=___cxa_allocate_exception(4);
 var $161=$160;
 HEAP32[(($161)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($160,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=46;break; }
 case 50: 
 ___resumeException($lpad_phi_i_i$0)
 case 51: 
 throw "Reached an unreachable!";
 case 52: 
 HEAP32[(($81)>>2)]=$147;
 var $164=$144|1;
 HEAP32[(($82)>>2)]=$164;
 HEAP32[(($83)>>2)]=$136;
 var $__p_0_i_i_i=$147;label=53;break;
 case 53: 
 var $__p_0_i_i_i;
 assert($136 % 1 === 0);(_memcpy($__p_0_i_i_i, 14584, $136)|0);
 var $165=(($__p_0_i_i_i+$136)|0);
 HEAP8[($165)]=0;
 var $166=$138;
 var $167=HEAP8[($166)];
 var $168=$167&1;
 var $169=(($168<<24)>>24)==0;
 if($169){label=55;break;}else{label=54;break;}
 case 54: 
 var $171=(($137+((($storemerge)*(48))&-1)+24)|0);
 var $172=HEAP32[(($171)>>2)];
 HEAP8[($172)]=0;
 var $173=(($137+((($storemerge)*(48))&-1)+20)|0);
 HEAP32[(($173)>>2)]=0;
 label=56;break;
 case 55: 
 var $175=$138;
 var $176=(($175+1)|0);
 HEAP8[($176)]=0;
 HEAP8[($166)]=0;
 label=56;break;
 case 56: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=57;break; }
 case 57: 
 var $178$0 = ___cxa_find_matching_catch(-1, -1,0); var $178$1 = tempRet0;
 var $179=$178$0;
 ___clang_call_terminate($179);
 throw "Reached an unreachable!";
 case 58: 
 assert(12 % 1 === 0);HEAP32[(($166)>>2)]=HEAP32[(($72)>>2)];HEAP32[((($166)+(4))>>2)]=HEAP32[((($72)+(4))>>2)];HEAP32[((($166)+(8))>>2)]=HEAP32[((($72)+(8))>>2)];
 HEAP32[(($72)>>2)]=0; HEAP32[((($72)+(4))>>2)]=0; HEAP32[((($72)+(8))>>2)]=0;
 var $180=HEAP32[((13568)>>2)];
 var $181=HEAP32[(($87)>>2)];
 var $m_idx_i_i11=(($180+2228)|0);
 var $m_idx_val_i_i12=HEAP32[(($m_idx_i_i11)>>2)];
 var $182=($m_idx_val_i_i12>>>0)>($181>>>0);
 if($182){label=60;break;}else{label=59;break;}
 case 59: 
 var $184=_fprintf($70,3192,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$181,tempVarArgs)); STACKTOP=tempVarArgs;
 var $185=HEAP32[((14912)>>2)];
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 60: 
 _memset(13576, 0, 1007)|0;
 var $187=(($180+2224)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($188+((($181)*(14072))&-1)+1212)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=(($188+((($181)*(14072))&-1)+1216)|0);
 var $192=HEAP16[(($191)>>1)];
 var $193=($192&65535);
 var $194=($193>>>0)>1007;
 var $maxlen__i_i=($194?1007:$193);
 assert($maxlen__i_i % 1 === 0);(_memcpy(13576, $190, $maxlen__i_i)|0);
 var $195=HEAP32[(($187)>>2)];
 var $196=(($195+((($181)*(14072))&-1)+1216)|0);
 var $197=HEAP16[(($196)>>1)];
 var $198=($197&65535);
 var $199=($198>>>0)>1007;
 var $200=($199?1007:$198);
 var $201=HEAP32[((14912)>>2)];
 var $202=(($201+((($storemerge)*(48))&-1)+28)|0);
 var $203=($200>>>0)<11;
 if($203){label=61;break;}else{label=62;break;}
 case 61: 
 var $205=$200<<1;
 var $206=(($205)&255);
 HEAP8[($75)]=$206;
 var $__p_0_i_i_i22=$77;label=74;break;
 case 62: 
 var $207=((($200)+(16))|0);
 var $208=$207&-16;
 var $209=($208|0)==0;
 var $_size_i_i14=($209?1:$208);
 label=63;break;
 case 63: 
 var $211=_malloc($_size_i_i14);
 var $212=($211|0)==0;
 if($212){label=64;break;}else{label=73;break;}
 case 64: 
 var $214=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $215=($214|0)==0;
 if($215){label=70;break;}else{label=65;break;}
 case 65: 
 var $217=$214;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=66;break; }
 case 66: 
 var $lpad_loopexit_i_i16$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i16$1 = tempRet0;
 var $lpad_phi_i_i20$1=$lpad_loopexit_i_i16$1;var $lpad_phi_i_i20$0=$lpad_loopexit_i_i16$0;label=68;break;
 case 67: 
 var $lpad_nonloopexit_i_i18$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i18$1 = tempRet0;
 var $lpad_phi_i_i20$1=$lpad_nonloopexit_i_i18$1;var $lpad_phi_i_i20$0=$lpad_nonloopexit_i_i18$0;label=68;break;
 case 68: 
 var $lpad_phi_i_i20$0;
 var $lpad_phi_i_i20$1;
 var $219=$lpad_phi_i_i20$1;
 var $220=($219|0)<0;
 if($220){label=69;break;}else{label=71;break;}
 case 69: 
 var $222=$lpad_phi_i_i20$0;
 ___cxa_call_unexpected($222);
 throw "Reached an unreachable!";
 case 70: 
 var $224=___cxa_allocate_exception(4);
 var $225=$224;
 HEAP32[(($225)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($224,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=67;break; }
 case 71: 
 ___resumeException($lpad_phi_i_i20$0)
 case 72: 
 throw "Reached an unreachable!";
 case 73: 
 HEAP32[(($78)>>2)]=$211;
 var $228=$208|1;
 HEAP32[(($79)>>2)]=$228;
 HEAP32[(($80)>>2)]=$200;
 var $__p_0_i_i_i22=$211;label=74;break;
 case 74: 
 var $__p_0_i_i_i22;
 assert($200 % 1 === 0);(_memcpy($__p_0_i_i_i22, 13576, $200)|0);
 var $229=(($__p_0_i_i_i22+$200)|0);
 HEAP8[($229)]=0;
 var $230=$202;
 var $231=HEAP8[($230)];
 var $232=$231&1;
 var $233=(($232<<24)>>24)==0;
 if($233){label=76;break;}else{label=75;break;}
 case 75: 
 var $235=(($201+((($storemerge)*(48))&-1)+36)|0);
 var $236=HEAP32[(($235)>>2)];
 HEAP8[($236)]=0;
 var $237=(($201+((($storemerge)*(48))&-1)+32)|0);
 HEAP32[(($237)>>2)]=0;
 label=77;break;
 case 76: 
 var $239=$202;
 var $240=(($239+1)|0);
 HEAP8[($240)]=0;
 HEAP8[($230)]=0;
 label=77;break;
 case 77: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($202) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=78;break; }
 case 78: 
 var $242$0 = ___cxa_find_matching_catch(-1, -1,0); var $242$1 = tempRet0;
 var $243=$242$0;
 ___clang_call_terminate($243);
 throw "Reached an unreachable!";
 case 79: 
 assert(12 % 1 === 0);HEAP32[(($230)>>2)]=HEAP32[(($75)>>2)];HEAP32[((($230)+(4))>>2)]=HEAP32[((($75)+(4))>>2)];HEAP32[((($230)+(8))>>2)]=HEAP32[((($75)+(8))>>2)];
 HEAP32[(($75)>>2)]=0; HEAP32[((($75)+(4))>>2)]=0; HEAP32[((($75)+(8))>>2)]=0;
 var $244=HEAP32[((13568)>>2)];
 var $245=HEAP32[(($87)>>2)];
 var $m_idx_i_i28=(($244+2228)|0);
 var $m_idx_val_i_i29=HEAP32[(($m_idx_i_i28)>>2)];
 var $246=($m_idx_val_i_i29>>>0)>($245>>>0);
 if($246){label=80;break;}else{var $_0_i_i30=3;label=81;break;}
 case 80: 
 var $248=(($244+2224)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=(($249+((($245)*(14072))&-1)+1220)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=$251&255;
 var $253=($252>>>0)>2;
 var $phitmp=($253?0:$252);
 var $_0_i_i30=$phitmp;label=81;break;
 case 81: 
 var $_0_i_i30;
 var $254=HEAP32[((14912)>>2)];
 var $255=(($254+((($storemerge)*(48))&-1)+40)|0);
 HEAP32[(($255)>>2)]=$_0_i_i30;
 var $256=HEAP32[((14912)>>2)];
 var $257=(($256+((($storemerge)*(48))&-1)+40)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)<0;
 if($259){label=82;break;}else{var $264=$244;label=83;break;}
 case 82: 
 var $261=HEAP32[(($87)>>2)];
 var $262=_fprintf($70,3128,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$261,tempVarArgs)); STACKTOP=tempVarArgs;
 var $_pre=HEAP32[((13568)>>2)];
 var $264=$_pre;label=83;break;
 case 83: 
 var $264;
 var $265=HEAP32[(($87)>>2)];
 var $m_idx_i_i31=(($264+2228)|0);
 var $m_idx_val_i_i32=HEAP32[(($m_idx_i_i31)>>2)];
 var $266=($m_idx_val_i_i32>>>0)>($265>>>0);
 if($266){label=84;break;}else{var $_0_i_i33_off0=-1;label=85;break;}
 case 84: 
 var $268=(($264+2224)|0);
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269+((($265)*(14072))&-1)+1248)|0);
 var $ld$0$0=(($270)|0);
 var $271$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($270+4)|0);
 var $271$1=HEAP32[(($ld$1$1)>>2)];
 var $extract_t$0=$271$0;
 var $extract_t=$extract_t$0;
 var $_0_i_i33_off0=$extract_t;label=85;break;
 case 85: 
 var $_0_i_i33_off0;
 var $272=HEAP32[((14912)>>2)];
 var $273=(($272+((($storemerge)*(48))&-1)+44)|0);
 HEAP32[(($273)>>2)]=$_0_i_i33_off0;
 var $274=HEAP32[((14912)>>2)];
 var $275=(($274+((($storemerge)*(48))&-1)+44)|0);
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==-1;
 if($277){label=86;break;}else{label=87;break;}
 case 86: 
 var $279=HEAP32[(($87)>>2)];
 var $280=_fprintf($70,3040,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$279,tempVarArgs)); STACKTOP=tempVarArgs;
 label=87;break;
 case 87: 
 var $282=((($storemerge)+(1))|0);
 var $storemerge=$282;label=27;break;
 case 88: 
 var $284=($22|0)==0;
 if($284){label=90;break;}else{label=89;break;}
 case 89: 
 _free($22);
 label=90;break;
 case 90: 
 STACKTOP=sp;return 14912;
  default: assert(0, "bad label: " + label);
 }

}


function __Z4saveRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$key){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $hash_i_i=sp;
 var $1=$key;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($key+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11|0)==0;
 var $13=HEAP32[((13568)>>2)];
 var $14=(($13+8)|0);
 var $15=HEAP32[(($14)>>2)];
 if($12){var $i_01_i_i_i2=0;var $num_02_i_i_i1=0;label=14;break;}else{var $i_01_i_i_i=0;var $num_02_i_i_i=0;label=5;break;}
 case 5: 
 var $num_02_i_i_i;
 var $i_01_i_i_i;
 var $17=(($15+8+((($i_01_i_i_i)*(464))&-1)+56)|0);
 var $ld$0$0=(($17)|0);
 var $18$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($17+4)|0);
 var $18$1=HEAP32[(($ld$1$1)>>2)];
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $19=(($18$0|0) == ($$etemp$2$0|0)) & (($18$1|0) == ($$etemp$2$1|0));
 if($19){label=6;break;}else{label=7;break;}
 case 6: 
 var $21=(($15+8+((($i_01_i_i_i)*(464))&-1)+272)|0);
 var $ld$3$0=(($21)|0);
 var $22$0=HEAP32[(($ld$3$0)>>2)];
 var $ld$4$1=(($21+4)|0);
 var $22$1=HEAP32[(($ld$4$1)>>2)];
 var $$etemp$5$0=0;
 var $$etemp$5$1=0;
 var $23=(($22$0|0) == ($$etemp$5$0|0)) & (($22$1|0) == ($$etemp$5$1|0));
 if($23){var $num_1_i_i_i=$num_02_i_i_i;label=8;break;}else{label=7;break;}
 case 7: 
 var $25=((($num_02_i_i_i)+(1))|0);
 var $num_1_i_i_i=$25;label=8;break;
 case 8: 
 var $num_1_i_i_i;
 var $27=((($i_01_i_i_i)+(1))|0);
 var $28=($27>>>0)<32;
 if($28){var $i_01_i_i_i=$27;var $num_02_i_i_i=$num_1_i_i_i;label=5;break;}else{label=9;break;}
 case 9: 
 var $29=(($15+14968)|0);
 var $30=HEAP16[(($29)>>1)];
 var $31=($30&65535);
 var $32=((($31)*(3808))&-1);
 var $33=$32|12;
 var $34=((($num_1_i_i_i)*(464))&-1);
 var $35=$34|8;
 var $36=((($35)+($33))|0);
 var $37=(($13+2228)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){var $ret_0_lcssa_i_i_i_i_i=0;label=13;break;}else{label=10;break;}
 case 10: 
 var $40=(($13+2224)|0);
 var $41=HEAP32[(($40)>>2)];
 var $ret_01_i_i_i_i_i=0;var $i_02_i_i_i_i_i=0;label=11;break;
 case 11: 
 var $i_02_i_i_i_i_i;
 var $ret_01_i_i_i_i_i;
 var $43=(($41+((($i_02_i_i_i_i_i)*(14072))&-1)+52)|0);
 var $44=HEAP8[($43)];
 var $not__i_i_i_i_i=(($44<<24)>>24)!=0;
 var $45=($not__i_i_i_i_i&1);
 var $ret_0__i_i_i_i_i=((($45)+($ret_01_i_i_i_i_i))|0);
 var $46=((($i_02_i_i_i_i_i)+(1))|0);
 var $47=($46>>>0)<($38>>>0);
 if($47){var $ret_01_i_i_i_i_i=$ret_0__i_i_i_i_i;var $i_02_i_i_i_i_i=$46;label=11;break;}else{label=12;break;}
 case 12: 
 var $phitmp_i_i_i_i=((($ret_0__i_i_i_i_i)*(2216))&-1);
 var $ret_0_lcssa_i_i_i_i_i=$phitmp_i_i_i_i;label=13;break;
 case 13: 
 var $ret_0_lcssa_i_i_i_i_i;
 var $48=(($13+1208)|0);
 var $49=HEAP16[(($48)>>1)];
 var $50=($49&65535);
 var $51=(($13+2218)|0);
 var $52=HEAP16[(($51)>>1)];
 var $53=($52&65535);
 var $54=((($36)+(165))|0);
 var $55=((($54)+($ret_0_lcssa_i_i_i_i_i))|0);
 var $56=((($55)+($50))|0);
 var $57=((($56)+($53))|0);
 var $storemerge=$57;label=23;break;
 case 14: 
 var $num_02_i_i_i1;
 var $i_01_i_i_i2;
 var $59=(($15+8+((($i_01_i_i_i2)*(464))&-1)+56)|0);
 var $ld$6$0=(($59)|0);
 var $60$0=HEAP32[(($ld$6$0)>>2)];
 var $ld$7$1=(($59+4)|0);
 var $60$1=HEAP32[(($ld$7$1)>>2)];
 var $$etemp$8$0=0;
 var $$etemp$8$1=0;
 var $61=(($60$0|0) == ($$etemp$8$0|0)) & (($60$1|0) == ($$etemp$8$1|0));
 if($61){label=15;break;}else{label=16;break;}
 case 15: 
 var $63=(($15+8+((($i_01_i_i_i2)*(464))&-1)+272)|0);
 var $ld$9$0=(($63)|0);
 var $64$0=HEAP32[(($ld$9$0)>>2)];
 var $ld$10$1=(($63+4)|0);
 var $64$1=HEAP32[(($ld$10$1)>>2)];
 var $$etemp$11$0=0;
 var $$etemp$11$1=0;
 var $65=(($64$0|0) == ($$etemp$11$0|0)) & (($64$1|0) == ($$etemp$11$1|0));
 if($65){var $num_1_i_i_i3=$num_02_i_i_i1;label=17;break;}else{label=16;break;}
 case 16: 
 var $67=((($num_02_i_i_i1)+(1))|0);
 var $num_1_i_i_i3=$67;label=17;break;
 case 17: 
 var $num_1_i_i_i3;
 var $69=((($i_01_i_i_i2)+(1))|0);
 var $70=($69>>>0)<32;
 if($70){var $i_01_i_i_i2=$69;var $num_02_i_i_i1=$num_1_i_i_i3;label=14;break;}else{label=18;break;}
 case 18: 
 var $71=(($15+14968)|0);
 var $72=HEAP16[(($71)>>1)];
 var $73=($72&65535);
 var $74=((($73)*(3808))&-1);
 var $75=$74|12;
 var $76=((($num_1_i_i_i3)*(464))&-1);
 var $77=$76|8;
 var $78=((($77)+($75))|0);
 var $79=(($13+2228)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=($80|0)==0;
 if($81){var $ret_0_lcssa_i_i_i_i=0;label=22;break;}else{label=19;break;}
 case 19: 
 var $82=(($13+2224)|0);
 var $83=HEAP32[(($82)>>2)];
 var $ret_01_i_i_i_i=0;var $i_02_i_i_i_i=0;label=20;break;
 case 20: 
 var $i_02_i_i_i_i;
 var $ret_01_i_i_i_i;
 var $85=(($83+((($i_02_i_i_i_i)*(14072))&-1)+52)|0);
 var $86=HEAP8[($85)];
 var $not__i_i_i_i=(($86<<24)>>24)!=0;
 var $87=($not__i_i_i_i&1);
 var $ret_0__i_i_i_i=((($87)+($ret_01_i_i_i_i))|0);
 var $88=((($i_02_i_i_i_i)+(1))|0);
 var $89=($88>>>0)<($80>>>0);
 if($89){var $ret_01_i_i_i_i=$ret_0__i_i_i_i;var $i_02_i_i_i_i=$88;label=20;break;}else{label=21;break;}
 case 21: 
 var $phitmp_i_i_i=((($ret_0__i_i_i_i)*(2216))&-1);
 var $ret_0_lcssa_i_i_i_i=$phitmp_i_i_i;label=22;break;
 case 22: 
 var $ret_0_lcssa_i_i_i_i;
 var $90=(($13+1208)|0);
 var $91=HEAP16[(($90)>>1)];
 var $92=($91&65535);
 var $93=(($13+2218)|0);
 var $94=HEAP16[(($93)>>1)];
 var $95=($94&65535);
 var $96=((($78)+(125))|0);
 var $97=((($96)+($ret_0_lcssa_i_i_i_i))|0);
 var $98=((($97)+($92))|0);
 var $99=((($98)+($95))|0);
 var $storemerge=$99;label=23;break;
 case 23: 
 var $storemerge;
 var $101=HEAP32[((14744)>>2)];
 var $102=($101|0)==0;
 if($102){label=25;break;}else{label=24;break;}
 case 24: 
 _free($101);
 label=25;break;
 case 25: 
 var $104=($storemerge|0)>-1;
 var $105=($104?$storemerge:-1);
 var $106=($105|0)==0;
 var $_size_i=($106?1:$105);
 label=26;break;
 case 26: 
 var $108=_malloc($_size_i);
 var $109=($108|0)==0;
 if($109){label=27;break;}else{label=40;break;}
 case 27: 
 var $111=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $112=($111|0)==0;
 if($112){label=34;break;}else{label=28;break;}
 case 28: 
 var $114=$111;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=29;break; }
 case 29: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=31;break;
 case 30: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=31;break;
 case 31: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $116=$lpad_phi_i$1;
 var $117=($116|0)<0;
 if($117){label=32;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=37;break;}
 case 32: 
 var $119=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 throw "Reached an unreachable!";
 case 34: 
 var $121=___cxa_allocate_exception(4);
 var $122=$121;
 HEAP32[(($122)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($121,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $eh_lpad_body$1=$125$1;var $eh_lpad_body$0=$125$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $126=$eh_lpad_body$1;
 var $127=($126|0)<0;
 if($127){label=38;break;}else{label=39;break;}
 case 38: 
 var $129=$eh_lpad_body$0;
 ___cxa_call_unexpected($129);
 throw "Reached an unreachable!";
 case 39: 
 ___resumeException($eh_lpad_body$0)
 case 40: 
 var $131=HEAP8[($1)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=42;break;}else{label=41;break;}
 case 41: 
 var $135=(($key+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $140=$136;label=43;break;
 case 42: 
 var $138=($131&255);
 var $139=$138>>>1;
 var $140=$139;label=43;break;
 case 43: 
 var $140;
 var $141=($140|0)==0;
 var $142=HEAP32[((13568)>>2)];
 if($141){label=58;break;}else{label=44;break;}
 case 44: 
 if($133){label=46;break;}else{label=45;break;}
 case 45: 
 var $145=(($key+8)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(($key+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $extract_t=(($148)&65535);
 var $_off0=$extract_t;var $154=$146;label=47;break;
 case 46: 
 var $150=$key;
 var $151=(($150+1)|0);
 var $152=($131&255);
 var $153=($152&65535)>>>1;
 var $_off0=$153;var $154=$151;label=47;break;
 case 47: 
 var $154;
 var $_off0;
 var $155=(($hash_i_i)|0);
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $156=(($142+8)|0);
 var $157=HEAP32[(($156)>>2)];
 var $i_01_i_i_i8=0;var $num_02_i_i_i7=0;label=48;break;
 case 48: 
 var $num_02_i_i_i7;
 var $i_01_i_i_i8;
 var $159=(($157+8+((($i_01_i_i_i8)*(464))&-1)+56)|0);
 var $ld$13$0=(($159)|0);
 var $160$0=HEAP32[(($ld$13$0)>>2)];
 var $ld$14$1=(($159+4)|0);
 var $160$1=HEAP32[(($ld$14$1)>>2)];
 var $$etemp$15$0=0;
 var $$etemp$15$1=0;
 var $161=(($160$0|0) == ($$etemp$15$0|0)) & (($160$1|0) == ($$etemp$15$1|0));
 if($161){label=49;break;}else{label=50;break;}
 case 49: 
 var $163=(($157+8+((($i_01_i_i_i8)*(464))&-1)+272)|0);
 var $ld$16$0=(($163)|0);
 var $164$0=HEAP32[(($ld$16$0)>>2)];
 var $ld$17$1=(($163+4)|0);
 var $164$1=HEAP32[(($ld$17$1)>>2)];
 var $$etemp$18$0=0;
 var $$etemp$18$1=0;
 var $165=(($164$0|0) == ($$etemp$18$0|0)) & (($164$1|0) == ($$etemp$18$1|0));
 if($165){var $num_1_i_i_i9=$num_02_i_i_i7;label=51;break;}else{label=50;break;}
 case 50: 
 var $167=((($num_02_i_i_i7)+(1))|0);
 var $num_1_i_i_i9=$167;label=51;break;
 case 51: 
 var $num_1_i_i_i9;
 var $169=((($i_01_i_i_i8)+(1))|0);
 var $170=($169>>>0)<32;
 if($170){var $i_01_i_i_i8=$169;var $num_02_i_i_i7=$num_1_i_i_i9;label=48;break;}else{label=52;break;}
 case 52: 
 var $171=(($157+14968)|0);
 var $172=HEAP16[(($171)>>1)];
 var $173=($172&65535);
 var $174=((($173)*(3808))&-1);
 var $175=$174|12;
 var $176=((($num_1_i_i_i9)*(464))&-1);
 var $177=$176|8;
 var $178=((($177)+($175))|0);
 var $179=(($142+2228)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($180|0)==0;
 if($181){var $ret_0_lcssa_i_i_i_i_i18=0;label=56;break;}else{label=53;break;}
 case 53: 
 var $182=(($142+2224)|0);
 var $183=HEAP32[(($182)>>2)];
 var $ret_01_i_i_i_i_i13=0;var $i_02_i_i_i_i_i12=0;label=54;break;
 case 54: 
 var $i_02_i_i_i_i_i12;
 var $ret_01_i_i_i_i_i13;
 var $185=(($183+((($i_02_i_i_i_i_i12)*(14072))&-1)+52)|0);
 var $186=HEAP8[($185)];
 var $not__i_i_i_i_i14=(($186<<24)>>24)!=0;
 var $187=($not__i_i_i_i_i14&1);
 var $ret_0__i_i_i_i_i15=((($187)+($ret_01_i_i_i_i_i13))|0);
 var $188=((($i_02_i_i_i_i_i12)+(1))|0);
 var $189=($188>>>0)<($180>>>0);
 if($189){var $ret_01_i_i_i_i_i13=$ret_0__i_i_i_i_i15;var $i_02_i_i_i_i_i12=$188;label=54;break;}else{label=55;break;}
 case 55: 
 var $phitmp_i_i_i_i16=((($ret_0__i_i_i_i_i15)*(2216))&-1);
 var $ret_0_lcssa_i_i_i_i_i18=$phitmp_i_i_i_i16;label=56;break;
 case 56: 
 var $ret_0_lcssa_i_i_i_i_i18;
 var $190=(($142+1208)|0);
 var $191=HEAP16[(($190)>>1)];
 var $192=($191&65535);
 var $193=(($142+2218)|0);
 var $194=HEAP16[(($193)>>1)];
 var $195=($194&65535);
 var $196=((($178)+(125))|0);
 var $197=((($196)+($ret_0_lcssa_i_i_i_i_i18))|0);
 var $198=((($197)+($192))|0);
 var $199=((($198)+($195))|0);
 var $200=_malloc($199);
 var $201=($200|0)==0;
 if($201){label=59;break;}else{label=57;break;}
 case 57: 
 _messenger_save($142,$200);
 var $203$0=($_off0&65535);
 var $203$1=0;
 _crypto_hash_sha256($155,$154,$203$0,$203$1);
 var $$etemp$19$0=24;
 var $$etemp$19$1=0;
 _randombytes($108,$$etemp$19$0,$$etemp$19$1);
 var $204=(($108+24)|0);
 var $205=_encrypt_data_symmetric($155,$108,$200,$199,$204);
 _free($200);
 _memset($155, 0, 32)|0;
 label=59;break;
 case 58: 
 _messenger_save($142,$108);
 label=59;break;
 case 59: 
 __Z14data_to_hexstrPKhi($agg_result,$108,$storemerge);
 _free($108);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __Z4loadRKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEES7_($datastr,$key){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $hash_i_i=sp;
 var $1=(sp)+(32);
 var $2=$datastr;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$1;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=20;break;
 case 3: 
 var $9=(($datastr+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($datastr+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$1;
 HEAP8[($20)]=$19;
 var $21=$1;
 var $22=(($21+1)|0);
 var $__p_0_i_i_i=$22;label=19;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 label=8;break;
 case 8: 
 var $27=_malloc($_size_i);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=18;break;}
 case 9: 
 var $30=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=10;break;}
 case 10: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $35=$lpad_phi_i$1;
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=16;break;}
 case 14: 
 var $38=$lpad_phi_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $44=(($1+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($1)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($1+4)|0);
 HEAP32[(($47)>>2)]=$12;
 var $__p_0_i_i_i=$27;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i_i_i, $10, $12)|0);
 var $48=(($__p_0_i_i_i+$12)|0);
 HEAP8[($48)]=0;
 label=20;break;
 case 20: 
 var $49=(function() { try { __THREW__ = 0; return __Z14hexstr_to_dataNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=42;break; }
 case 21: 
 var $51=$1;
 var $52=HEAP8[($51)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=24;break;}else{label=22;break;}
 case 22: 
 var $56=(($1+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==0;
 if($58){label=24;break;}else{label=23;break;}
 case 23: 
 _free($57);
 label=24;break;
 case 24: 
 var $60=$key;
 var $61=HEAP8[($60)];
 var $62=$61&1;
 var $63=(($62<<24)>>24)==0;
 if($63){label=26;break;}else{label=25;break;}
 case 25: 
 var $65=(($key+4)|0);
 var $66=HEAP32[(($65)>>2)];
 var $70=$66;label=27;break;
 case 26: 
 var $68=($61&255);
 var $69=$68>>>1;
 var $70=$69;label=27;break;
 case 27: 
 var $70;
 var $71=($70|0)==0;
 var $72=HEAP32[((13568)>>2)];
 var $73=HEAP8[($2)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($71){label=45;break;}else{label=28;break;}
 case 28: 
 if($75){label=30;break;}else{label=29;break;}
 case 29: 
 var $78=(($datastr+4)|0);
 var $79=HEAP32[(($78)>>2)];
 var $83=$79;label=31;break;
 case 30: 
 var $81=($73&255);
 var $82=$81>>>1;
 var $83=$82;label=31;break;
 case 31: 
 var $83;
 var $84=$83>>>1;
 if($63){label=33;break;}else{label=32;break;}
 case 32: 
 var $86=(($key+8)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($key+4)|0);
 var $89=HEAP32[(($88)>>2)];
 var $extract_t=(($89)&65535);
 var $_off0=$extract_t;var $95=$87;label=34;break;
 case 33: 
 var $91=$key;
 var $92=(($91+1)|0);
 var $93=($61&255);
 var $94=($93&65535)>>>1;
 var $_off0=$94;var $95=$92;label=34;break;
 case 34: 
 var $95;
 var $_off0;
 var $96=(($hash_i_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $97=($83>>>0)<82;
 if($97){var $storemerge=-1;label=53;break;}else{label=35;break;}
 case 35: 
 var $99=_malloc($84);
 var $100=($99|0)==0;
 if($100){var $storemerge=-1;label=53;break;}else{label=36;break;}
 case 36: 
 var $102$0=($_off0&65535);
 var $102$1=0;
 _crypto_hash_sha256($96,$95,$102$0,$102$1);
 var $103=(($49+24)|0);
 var $104=((($84)-(24))|0);
 var $105=_decrypt_data_symmetric($96,$49,$103,$104,$99);
 var $106=((($84)-(40))|0);
 var $107=($105|0)!=($106|0);
 var $108=($106>>>0)<8;
 var $or_cond_i_i=$107|$108;
 if($or_cond_i_i){var $ret_0_i_i=-1;label=41;break;}else{label=37;break;}
 case 37: 
 var $110=$99;
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=38;break;}else{var $ret_0_i_i=-1;label=41;break;}
 case 38: 
 var $114=(($99+4)|0);
 var $115=$114;
 var $116=HEAP32[(($115)>>2)];
 if(($116|0)==367860511){ label=39;break;}else if(($116|0)==367860510){ label=40;break;}else{var $ret_0_i_i=-1;label=41;break;}
 case 39: 
 var $118=$72;
 var $119=(($99+8)|0);
 var $120=((($84)-(48))|0);
 var $121=_load_state(780,$118,$119,$120,462);
 var $ret_0_i_i=$121;label=41;break;
 case 40: 
 var $123=$72;
 var $124=(($99+8)|0);
 var $125=((($84)-(48))|0);
 var $126=_load_state(262,$123,$124,$125,462);
 var $ret_0_i_i=$126;label=41;break;
 case 41: 
 var $ret_0_i_i;
 _free($99);
 _memset($96, 0, 32)|0;
 var $storemerge=$ret_0_i_i;label=53;break;
 case 42: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$1;
 var $130=HEAP8[($129)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=54;break;}else{label=43;break;}
 case 43: 
 var $134=(($1+8)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==0;
 if($136){label=54;break;}else{label=44;break;}
 case 44: 
 _free($135);
 label=54;break;
 case 45: 
 if($75){label=47;break;}else{label=46;break;}
 case 46: 
 var $140=(($datastr+4)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=48;break;
 case 47: 
 var $143=($73&255);
 var $144=$143>>>1;
 var $145=$144;label=48;break;
 case 48: 
 var $145;
 var $146=$145>>>1;
 var $147=($145>>>0)<16;
 if($147){var $storemerge=-1;label=53;break;}else{label=49;break;}
 case 49: 
 var $149=$49;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=50;break;}else{var $storemerge=-1;label=53;break;}
 case 50: 
 var $153=(($49+4)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 if(($155|0)==367860511){ label=51;break;}else if(($155|0)==367860510){ label=52;break;}else{var $storemerge=-1;label=53;break;}
 case 51: 
 var $157=$72;
 var $158=(($49+8)|0);
 var $159=((($146)-(8))|0);
 var $160=_load_state(780,$157,$158,$159,462);
 var $storemerge=$160;label=53;break;
 case 52: 
 var $162=$72;
 var $163=(($49+8)|0);
 var $164=((($146)-(8))|0);
 var $165=_load_state(262,$162,$163,$164,462);
 var $storemerge=$165;label=53;break;
 case 53: 
 var $storemerge;
 var $166=($storemerge|0)==0;
 STACKTOP=sp;return $166;
 case 54: 
 ___resumeException($128$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten12value_objectI7ContactE5fieldIS1_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($this,$fieldName,$field){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_malloc(4);
 var $2=($1|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$1;
 HEAP32[(($4)>>2)]=$field;
 label=3;break;
 case 3: 
 var $5=_malloc(4);
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 HEAP32[(($8)>>2)]=$field;
 label=5;break;
 case 5: 
 __embind_register_value_object_field(13504,$fieldName,13080,(792),$1,13080,(120),$5);
 return $this;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJRKS8_EE6invokeEPFS8_SA_EPNS0_11BindingTypeIS8_EUt_E($fn,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($2,$args);
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=9;break; }
 case 2: 
 var $4=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($1);
 var $5=$1;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=3;break;}
 case 3: 
 var $10=(($1+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=5;break;}else{label=4;break;}
 case 4: 
 _free($11);
 label=5;break;
 case 5: 
 var $14=$2;
 var $15=HEAP8[($14)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($2+8)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 _free($20);
 label=8;break;
 case 8: 
 STACKTOP=sp;return $4;
 case 9: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1); var $24$1 = tempRet0;
 var $25=$2;
 var $26=HEAP8[($25)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=12;break;}else{label=10;break;}
 case 10: 
 var $30=(($2+8)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($31|0)==0;
 if($32){label=12;break;}else{label=11;break;}
 case 11: 
 _free($31);
 label=12;break;
 case 12: 
 ___resumeException($24$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($v){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$v;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($v+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=((($11)+(4))|0);
 var $13=_malloc($12);
 var $14=$13;
 var $15=HEAP8[($1)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=6;break;}else{label=5;break;}
 case 5: 
 var $19=(($v+4)|0);
 var $20=HEAP32[(($19)>>2)];
 var $24=$20;label=7;break;
 case 6: 
 var $22=($15&255);
 var $23=$22>>>1;
 var $24=$23;label=7;break;
 case 7: 
 var $24;
 var $25=$13;
 HEAP32[(($25)>>2)]=$24;
 var $26=(($13+4)|0);
 var $27=HEAP8[($1)];
 var $28=$27&1;
 var $29=(($28<<24)>>24)==0;
 if($29){label=9;break;}else{label=8;break;}
 case 8: 
 var $31=(($v+8)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(($v+4)|0);
 var $34=HEAP32[(($33)>>2)];
 var $41=$34;var $40=$32;label=10;break;
 case 9: 
 var $36=$v;
 var $37=(($36+1)|0);
 var $38=($27&255);
 var $39=$38>>>1;
 var $41=$39;var $40=$37;label=10;break;
 case 10: 
 var $40;
 var $41;
 assert($41 % 1 === 0);(_memcpy($26, $40, $41)|0);
 return $14;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($agg_result,$v){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($v+4)|0);
 var $2=(($v)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$agg_result;
 HEAP8[($11)]=$10;
 var $12=$agg_result;
 var $13=(($12+1)|0);
 var $__p_0_i_i_i=$13;label=17;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=($15|0)==0;
 var $_size_i_i=($16?1:$15);
 label=6;break;
 case 6: 
 var $18=_malloc($_size_i_i);
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=16;break;}
 case 7: 
 var $21=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=13;break;}else{label=8;break;}
 case 8: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $26=$lpad_phi_i_i$1;
 var $27=($26|0)<0;
 if($27){label=12;break;}else{label=14;break;}
 case 12: 
 var $29=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($29);
 throw "Reached an unreachable!";
 case 13: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $35=(($agg_result+8)|0);
 HEAP32[(($35)>>2)]=$18;
 var $36=$15|1;
 var $37=(($agg_result)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($agg_result+4)|0);
 HEAP32[(($38)>>2)]=$3;
 var $__p_0_i_i_i=$18;label=17;break;
 case 17: 
 var $__p_0_i_i_i;
 assert($3 % 1 === 0);(_memcpy($__p_0_i_i_i, $1, $3)|0);
 var $39=(($__p_0_i_i_i+$3)|0);
 HEAP8[($39)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIRKNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEJEE6invokeEPFS9_vE($fn){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=FUNCTION_TABLE[$fn]();
 label=2;break;
 case 2: 
 var $3=_malloc(12);
 var $4=($3|0)==0;
 if($4){label=3;break;}else{label=12;break;}
 case 3: 
 var $6=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $7=($6|0)==0;
 if($7){label=9;break;}else{label=4;break;}
 case 4: 
 var $9=$6;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$9]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $11=$lpad_phi_i_i$1;
 var $12=($11|0)<0;
 if($12){label=8;break;}else{label=10;break;}
 case 8: 
 var $14=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($14);
 throw "Reached an unreachable!";
 case 9: 
 var $16=___cxa_allocate_exception(4);
 var $17=$16;
 HEAP32[(($17)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($16,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 10: 
 ___resumeException($lpad_phi_i_i$0)
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $20=$3;
 var $21=$3;
 HEAP32[(($21)>>2)]=0;
 var $22=(($3+4)|0);
 var $23=$22;
 HEAP32[(($23)>>2)]=0;
 var $24=(($3+8)|0);
 var $25=$24;
 HEAP32[(($25)>>2)]=0;
 var $26=(($1+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=(($1)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=$27;
 var $31=$29;
 var $32=((($30)-($31))|0);
 var $33=(((($32|0))/(48))&-1);
 var $34=($27|0)==($29|0);
 if($34){label=36;break;}else{label=13;break;}
 case 13: 
 var $35=89478485<($33>>>0);
 if($35){label=14;break;}else{label=16;break;}
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=34;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $38=($27|0)==($29|0);
 var $_size_i_i_i_i_i_i_i=($38?1:$32);
 label=17;break;
 case 17: 
 var $40=_malloc($_size_i_i_i_i_i_i_i);
 var $41=($40|0)==0;
 if($41){label=18;break;}else{label=27;break;}
 case 18: 
 var $43=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $44=($43|0)==0;
 if($44){label=25;break;}else{label=19;break;}
 case 19: 
 var $46=$43;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$46]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 20: 
 var $lpad_loopexit_i_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i_i_i$0;label=22;break;
 case 21: 
 var $lpad_nonloopexit_i_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i_i_i$0;label=22;break;
 case 22: 
 var $lpad_phi_i_i_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i_i_i$1;
 var $48=$lpad_phi_i_i_i_i_i_i_i$1;
 var $49=($48|0)<0;
 if($49){label=23;break;}else{var $eh_lpad_body_i_i_i$1=$lpad_phi_i_i_i_i_i_i_i$1;var $eh_lpad_body_i_i_i$0=$lpad_phi_i_i_i_i_i_i_i$0;label=35;break;}
 case 23: 
 var $51=$lpad_phi_i_i_i_i_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=34;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $53=___cxa_allocate_exception(4);
 var $54=$53;
 HEAP32[(($54)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($53,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=21;break; }
 case 26: 
 throw "Reached an unreachable!";
 case 27: 
 var $56=$40;
 HEAP32[(($23)>>2)]=$56;
 HEAP32[(($21)>>2)]=$56;
 var $57=(($56+((($33)*(48))&-1))|0);
 HEAP32[(($25)>>2)]=$57;
 var $58=HEAP32[(($28)>>2)];
 var $59=HEAP32[(($26)>>2)];
 var $_0=$58;var $61=$56;label=28;break;
 case 28: 
 var $61;
 var $_0;
 var $62=($_0|0)==($59|0);
 if($62){label=36;break;}else{label=29;break;}
 case 29: 
 var $64=($61|0)==0;
 if($64){var $66=0;label=32;break;}else{label=30;break;}
 case 30: 
 (function() { try { __THREW__ = 0; return __ZN7ContactC1ERKS_($61,$_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=33;break; }
 case 31: 
 var $_pre=HEAP32[(($23)>>2)];
 var $66=$_pre;label=32;break;
 case 32: 
 var $66;
 var $67=(($66+48)|0);
 HEAP32[(($23)>>2)]=$67;
 var $68=(($_0+48)|0);
 var $_0=$68;var $61=$67;label=28;break;
 case 33: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$lpad_loopexit$1;var $eh_lpad_body_i_i_i$0=$lpad_loopexit$0;label=35;break;
 case 34: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$lpad_nonloopexit$1;var $eh_lpad_body_i_i_i$0=$lpad_nonloopexit$0;label=35;break;
 case 35: 
 var $eh_lpad_body_i_i_i$0;
 var $eh_lpad_body_i_i_i$1;
 var $69=$3;
 __ZNSt3__113__vector_baseI7ContactNS_9allocatorIS1_EEED2Ev($69);
 _free($3);
 ___resumeException($eh_lpad_body_i_i_i$0)
 case 36: 
 return $20;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113__vector_baseI7ContactNS_9allocatorIS1_EEED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=15;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+4)|0);
 label=3;break;
 case 3: 
 var $6=HEAP32[(($5)>>2)];
 var $7=($2|0)==($6|0);
 if($7){label=13;break;}else{label=4;break;}
 case 4: 
 var $9=((($6)-(48))|0);
 HEAP32[(($5)>>2)]=$9;
 var $10=((($6)-(48)+28)|0);
 var $11=$10;
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=7;break;}else{label=5;break;}
 case 5: 
 var $16=((($6)-(48)+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 _free($17);
 label=7;break;
 case 7: 
 var $20=((($6)-(48)+16)|0);
 var $21=$20;
 var $22=HEAP8[($21)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=10;break;}else{label=8;break;}
 case 8: 
 var $26=((($6)-(48)+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=10;break;}else{label=9;break;}
 case 9: 
 _free($27);
 label=10;break;
 case 10: 
 var $30=((($6)-(48)+4)|0);
 var $31=$30;
 var $32=HEAP8[($31)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=3;break;}else{label=11;break;}
 case 11: 
 var $36=((($6)-(48)+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=3;break;}else{label=12;break;}
 case 12: 
 _free($37);
 label=3;break;
 case 13: 
 var $40=HEAP32[(($1)>>2)];
 var $41=($40|0)==0;
 if($41){label=15;break;}else{label=14;break;}
 case 14: 
 var $43=$40;
 _free($43);
 label=15;break;
 case 15: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___clang_call_terminate($0){
 var label=0;


 var $2=___cxa_begin_catch($0);
 __ZSt9terminatev();
 throw "Reached an unreachable!";
}


function __ZN7ContactC1ERKS_($this,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=(($this)|0);
 var $3=(($0)|0);
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$4;
 var $5=(($this+4)|0);
 var $6=(($0+4)|0);
 var $7=$6;
 var $8=HEAP8[($7)];
 var $9=$8&1;
 var $10=(($9<<24)>>24)==0;
 if($10){label=2;break;}else{label=3;break;}
 case 2: 
 var $12=$5;
 assert(12 % 1 === 0);HEAP32[(($12)>>2)]=HEAP32[(($7)>>2)];HEAP32[((($12)+(4))>>2)]=HEAP32[((($7)+(4))>>2)];HEAP32[((($12)+(8))>>2)]=HEAP32[((($7)+(8))>>2)];
 label=20;break;
 case 3: 
 var $14=(($0+12)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=(($0+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17>>>0)>4294967279;
 if($18){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $21=($17>>>0)<11;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 var $23=$17<<1;
 var $24=(($23)&255);
 var $25=$5;
 HEAP8[($25)]=$24;
 var $26=$5;
 var $27=(($26+1)|0);
 var $__p_0_i_i_i_i=$27;label=19;break;
 case 7: 
 var $28=((($17)+(16))|0);
 var $29=$28&-16;
 var $30=($29|0)==0;
 var $_size_i_i=($30?1:$29);
 label=8;break;
 case 8: 
 var $32=_malloc($_size_i_i);
 var $33=($32|0)==0;
 if($33){label=9;break;}else{label=18;break;}
 case 9: 
 var $35=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $36=($35|0)==0;
 if($36){label=15;break;}else{label=10;break;}
 case 10: 
 var $38=$35;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $40=$lpad_phi_i_i$1;
 var $41=($40|0)<0;
 if($41){label=14;break;}else{label=16;break;}
 case 14: 
 var $43=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($43);
 throw "Reached an unreachable!";
 case 15: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 HEAP32[(($46)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($45,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $49=(($this+12)|0);
 HEAP32[(($49)>>2)]=$32;
 var $50=$29|1;
 var $51=(($5)|0);
 HEAP32[(($51)>>2)]=$50;
 var $52=(($this+8)|0);
 HEAP32[(($52)>>2)]=$17;
 var $__p_0_i_i_i_i=$32;label=19;break;
 case 19: 
 var $__p_0_i_i_i_i;
 assert($17 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $15, $17)|0);
 var $53=(($__p_0_i_i_i_i+$17)|0);
 HEAP8[($53)]=0;
 label=20;break;
 case 20: 
 var $54=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$54;
 var $55=(($this+16)|0);
 var $56=(($0+16)|0);
 var $57=$56;
 var $58=HEAP8[($57)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=21;break;}else{label=22;break;}
 case 21: 
 var $62=$55;
 assert(12 % 1 === 0);HEAP32[(($62)>>2)]=HEAP32[(($57)>>2)];HEAP32[((($62)+(4))>>2)]=HEAP32[((($57)+(4))>>2)];HEAP32[((($62)+(8))>>2)]=HEAP32[((($57)+(8))>>2)];
 label=40;break;
 case 22: 
 var $64=(($0+24)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($0+20)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=($67>>>0)>4294967279;
 if($68){label=23;break;}else{label=25;break;}
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=60;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $71=($67>>>0)<11;
 if($71){label=26;break;}else{label=27;break;}
 case 26: 
 var $73=$67<<1;
 var $74=(($73)&255);
 var $75=$55;
 HEAP8[($75)]=$74;
 var $76=$55;
 var $77=(($76+1)|0);
 var $__p_0_i_i_i2_i=$77;label=39;break;
 case 27: 
 var $78=((($67)+(16))|0);
 var $79=$78&-16;
 var $80=($79|0)==0;
 var $_size_i6_i=($80?1:$79);
 label=28;break;
 case 28: 
 var $82=_malloc($_size_i6_i);
 var $83=($82|0)==0;
 if($83){label=29;break;}else{label=38;break;}
 case 29: 
 var $85=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $86=($85|0)==0;
 if($86){label=36;break;}else{label=30;break;}
 case 30: 
 var $88=$85;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 31: 
 var $lpad_loopexit_i7_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i7_i$1 = tempRet0;
 var $lpad_phi_i11_i$1=$lpad_loopexit_i7_i$1;var $lpad_phi_i11_i$0=$lpad_loopexit_i7_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i9_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i9_i$1 = tempRet0;
 var $lpad_phi_i11_i$1=$lpad_nonloopexit_i9_i$1;var $lpad_phi_i11_i$0=$lpad_nonloopexit_i9_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i11_i$0;
 var $lpad_phi_i11_i$1;
 var $90=$lpad_phi_i11_i$1;
 var $91=($90|0)<0;
 if($91){label=34;break;}else{var $eh_lpad_body_i$1=$lpad_phi_i11_i$1;var $eh_lpad_body_i$0=$lpad_phi_i11_i$0;label=61;break;}
 case 34: 
 var $93=$lpad_phi_i11_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=60;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $95=___cxa_allocate_exception(4);
 var $96=$95;
 HEAP32[(($96)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($95,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=32;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $98=(($this+24)|0);
 HEAP32[(($98)>>2)]=$82;
 var $99=$79|1;
 var $100=(($55)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=(($this+20)|0);
 HEAP32[(($101)>>2)]=$67;
 var $__p_0_i_i_i2_i=$82;label=39;break;
 case 39: 
 var $__p_0_i_i_i2_i;
 assert($67 % 1 === 0);(_memcpy($__p_0_i_i_i2_i, $65, $67)|0);
 var $102=(($__p_0_i_i_i2_i+$67)|0);
 HEAP8[($102)]=0;
 label=40;break;
 case 40: 
 var $103=HEAP32[(($3)>>2)];
 HEAP32[(($2)>>2)]=$103;
 var $104=(($this+28)|0);
 var $105=(($0+28)|0);
 var $106=$105;
 var $107=HEAP8[($106)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=41;break;}else{label=42;break;}
 case 41: 
 var $111=$104;
 assert(12 % 1 === 0);HEAP32[(($111)>>2)]=HEAP32[(($106)>>2)];HEAP32[((($111)+(4))>>2)]=HEAP32[((($106)+(4))>>2)];HEAP32[((($111)+(8))>>2)]=HEAP32[((($106)+(8))>>2)];
 label=70;break;
 case 42: 
 var $113=(($0+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=(($0+32)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=($116>>>0)>4294967279;
 if($117){label=43;break;}else{label=45;break;}
 case 43: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=62;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $120=($116>>>0)<11;
 if($120){label=46;break;}else{label=47;break;}
 case 46: 
 var $122=$116<<1;
 var $123=(($122)&255);
 var $124=$104;
 HEAP8[($124)]=$123;
 var $125=$104;
 var $126=(($125+1)|0);
 var $__p_0_i_i_i15_i=$126;label=59;break;
 case 47: 
 var $127=((($116)+(16))|0);
 var $128=$127&-16;
 var $129=($128|0)==0;
 var $_size_i20_i=($129?1:$128);
 label=48;break;
 case 48: 
 var $131=_malloc($_size_i20_i);
 var $132=($131|0)==0;
 if($132){label=49;break;}else{label=58;break;}
 case 49: 
 var $134=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $135=($134|0)==0;
 if($135){label=56;break;}else{label=50;break;}
 case 50: 
 var $137=$134;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$137]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=51;break; }
 case 51: 
 var $lpad_loopexit_i21_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i21_i$1 = tempRet0;
 var $lpad_phi_i25_i$1=$lpad_loopexit_i21_i$1;var $lpad_phi_i25_i$0=$lpad_loopexit_i21_i$0;label=53;break;
 case 52: 
 var $lpad_nonloopexit_i23_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i23_i$1 = tempRet0;
 var $lpad_phi_i25_i$1=$lpad_nonloopexit_i23_i$1;var $lpad_phi_i25_i$0=$lpad_nonloopexit_i23_i$0;label=53;break;
 case 53: 
 var $lpad_phi_i25_i$0;
 var $lpad_phi_i25_i$1;
 var $139=$lpad_phi_i25_i$1;
 var $140=($139|0)<0;
 if($140){label=54;break;}else{var $eh_lpad_body28_i$1=$lpad_phi_i25_i$1;var $eh_lpad_body28_i$0=$lpad_phi_i25_i$0;label=63;break;}
 case 54: 
 var $142=$lpad_phi_i25_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($142) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=62;break; }
 case 55: 
 throw "Reached an unreachable!";
 case 56: 
 var $144=___cxa_allocate_exception(4);
 var $145=$144;
 HEAP32[(($145)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($144,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=52;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $147=(($this+36)|0);
 HEAP32[(($147)>>2)]=$131;
 var $148=$128|1;
 var $149=(($104)|0);
 HEAP32[(($149)>>2)]=$148;
 var $150=(($this+32)|0);
 HEAP32[(($150)>>2)]=$116;
 var $__p_0_i_i_i15_i=$131;label=59;break;
 case 59: 
 var $__p_0_i_i_i15_i;
 assert($116 % 1 === 0);(_memcpy($__p_0_i_i_i15_i, $114, $116)|0);
 var $151=(($__p_0_i_i_i15_i+$116)|0);
 HEAP8[($151)]=0;
 label=70;break;
 case 60: 
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $eh_lpad_body_i$1=$153$1;var $eh_lpad_body_i$0=$153$0;label=61;break;
 case 61: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $154=$eh_lpad_body_i$0;
 var $155=$eh_lpad_body_i$1;
 var $_0=$155;var $_01=$154;label=66;break;
 case 62: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1); var $157$1 = tempRet0;
 var $eh_lpad_body28_i$1=$157$1;var $eh_lpad_body28_i$0=$157$0;label=63;break;
 case 63: 
 var $eh_lpad_body28_i$0;
 var $eh_lpad_body28_i$1;
 var $158=$eh_lpad_body28_i$0;
 var $159=$eh_lpad_body28_i$1;
 var $160=$55;
 var $161=HEAP8[($160)];
 var $162=$161&1;
 var $163=(($162<<24)>>24)==0;
 if($163){var $_0=$159;var $_01=$158;label=66;break;}else{label=64;break;}
 case 64: 
 var $165=(($this+24)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=($166|0)==0;
 if($167){var $_0=$159;var $_01=$158;label=66;break;}else{label=65;break;}
 case 65: 
 _free($166);
 var $_0=$159;var $_01=$158;label=66;break;
 case 66: 
 var $_01;
 var $_0;
 var $169=$5;
 var $170=HEAP8[($169)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=69;break;}else{label=67;break;}
 case 67: 
 var $174=(($this+12)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=($175|0)==0;
 if($176){label=69;break;}else{label=68;break;}
 case 68: 
 _free($175);
 label=69;break;
 case 69: 
 var $178$0=$_01;
 var $178$1=0;
 var $179$0=$178$0;
 var $179$1=$_0;
 ___resumeException($179$0)
 case 70: 
 var $180=(($this+40)|0);
 var $181=(($0+40)|0);
 var $182=$181;
 var $183=$180;
 var $ld$0$0=(($182)|0);
 var $184$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($182+4)|0);
 var $184$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($183)|0);
 HEAP32[(($st$2$0)>>2)]=$184$0;
 var $st$3$1=(($183+4)|0);
 HEAP32[(($st$3$1)>>2)]=$184$1;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIiJEE6invokeEPFivE($fn){
 var label=0;


 var $1=FUNCTION_TABLE[$fn]();
 return $1;
}


function __ZN10emscripten8internal7InvokerIbJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbSA_EPNS0_11BindingTypeIS8_EUt_E($fn,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($1,$args);
 var $2=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $4=$1;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=5;break;}else{label=3;break;}
 case 3: 
 var $9=(($1+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 _free($10);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $2;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=$1;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=9;break;}else{label=7;break;}
 case 7: 
 var $20=(($1+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 _free($21);
 label=9;break;
 case 9: 
 ___resumeException($14$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEJEE6invokeEPFS8_vE($fn){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 FUNCTION_TABLE[$fn]($1);
 var $2=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($1);
 var $3=$1;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($1+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 STACKTOP=sp;return $2;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIbJiRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEEE6invokeEPFbiSA_EiPNS0_11BindingTypeIS8_EUt_E($fn,$args,$args1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($1,$args1);
 var $2=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($args,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $4=$1;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=5;break;}else{label=3;break;}
 case 3: 
 var $9=(($1+8)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 _free($10);
 label=5;break;
 case 5: 
 STACKTOP=sp;return $2;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;
 var $15=$1;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=9;break;}else{label=7;break;}
 case 7: 
 var $20=(($1+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 _free($21);
 label=9;break;
 case 9: 
 ___resumeException($14$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIbJiEE6invokeEPFbiEi($fn,$args){
 var label=0;


 var $1=FUNCTION_TABLE[$fn]($args);
 return $1;
}


function __ZN10emscripten8internal7InvokerIbJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEESA_EE6invokeEPFbSA_SA_EPNS0_11BindingTypeIS8_EUt_ESH_($fn,$args,$args1){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($1,$args);
 (function() { try { __THREW__ = 0; return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($2,$args1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=10;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $6=$2;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=6;break;}else{label=4;break;}
 case 4: 
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=5;break;}
 case 5: 
 _free($12);
 label=6;break;
 case 6: 
 var $15=$1;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=9;break;}else{label=7;break;}
 case 7: 
 var $20=(($1+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 _free($21);
 label=9;break;
 case 9: 
 STACKTOP=sp;return $4;
 case 10: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_0=$27;var $_07=$26;label=14;break;
 case 11: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 var $31=$29$1;
 var $32=$2;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){var $_0=$31;var $_07=$30;label=14;break;}else{label=12;break;}
 case 12: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){var $_0=$31;var $_07=$30;label=14;break;}else{label=13;break;}
 case 13: 
 _free($38);
 var $_0=$31;var $_07=$30;label=14;break;
 case 14: 
 var $_07;
 var $_0;
 var $41=$1;
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=17;break;}else{label=15;break;}
 case 15: 
 var $46=(($1+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=17;break;}else{label=16;break;}
 case 16: 
 _free($47);
 label=17;break;
 case 17: 
 var $50$0=$_07;
 var $50$1=0;
 var $51$0=$50$0;
 var $51$1=$_0;
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIbJRKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEiSA_EE6invokeEPFbSA_iSA_EPNS0_11BindingTypeIS8_EUt_EiSH_($fn,$args,$args1,$args2){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($1,$args);
 (function() { try { __THREW__ = 0; return __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($2,$args2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=10;break; }
 case 2: 
 var $4=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$fn]($1,$args1,$2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=11;break; }
 case 3: 
 var $6=$2;
 var $7=HEAP8[($6)];
 var $8=$7&1;
 var $9=(($8<<24)>>24)==0;
 if($9){label=6;break;}else{label=4;break;}
 case 4: 
 var $11=(($2+8)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=6;break;}else{label=5;break;}
 case 5: 
 _free($12);
 label=6;break;
 case 6: 
 var $15=$1;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=9;break;}else{label=7;break;}
 case 7: 
 var $20=(($1+8)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{label=8;break;}
 case 8: 
 _free($21);
 label=9;break;
 case 9: 
 STACKTOP=sp;return $4;
 case 10: 
 var $25$0 = ___cxa_find_matching_catch(-1, -1); var $25$1 = tempRet0;
 var $26=$25$0;
 var $27=$25$1;
 var $_0=$27;var $_07=$26;label=14;break;
 case 11: 
 var $29$0 = ___cxa_find_matching_catch(-1, -1); var $29$1 = tempRet0;
 var $30=$29$0;
 var $31=$29$1;
 var $32=$2;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){var $_0=$31;var $_07=$30;label=14;break;}else{label=12;break;}
 case 12: 
 var $37=(($2+8)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=($38|0)==0;
 if($39){var $_0=$31;var $_07=$30;label=14;break;}else{label=13;break;}
 case 13: 
 _free($38);
 var $_0=$31;var $_07=$30;label=14;break;
 case 14: 
 var $_07;
 var $_0;
 var $41=$1;
 var $42=HEAP8[($41)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=17;break;}else{label=15;break;}
 case 15: 
 var $46=(($1+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=17;break;}else{label=16;break;}
 case 16: 
 _free($47);
 label=17;break;
 case 17: 
 var $50$0=$_07;
 var $50$1=0;
 var $51$0=$50$0;
 var $51$1=$_0;
 ___resumeException($51$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIvJEE6invokeEPFvvE($fn){
 var label=0;


 FUNCTION_TABLE[$fn]();
 return;
}


function __ZN10emscripten8internal7InvokerIbJEE6invokeEPFbvE($fn){
 var label=0;


 var $1=FUNCTION_TABLE[$fn]();
 return $1;
}


function __ZN10emscripten8internal12MemberAccessI7ContactlE7getWireIS2_EElRKMS2_lRKT_($field,$ptr){
 var label=0;


 var $1=HEAP32[(($field)>>2)];
 var $2=$ptr;
 var $3=(($2+$1)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 return $5;
}


function __ZN10emscripten8internal12MemberAccessI7ContactlE7setWireIS2_EEvRKMS2_lRT_l($field,$ptr,$value){
 var label=0;


 var $1=HEAP32[(($field)>>2)];
 var $2=$ptr;
 var $3=(($2+$1)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=$value;
 return;
}


function __ZN10emscripten8internal12MemberAccessI7ContactiE7getWireIS2_EEiRKMS2_iRKT_($field,$ptr){
 var label=0;


 var $1=HEAP32[(($field)>>2)];
 var $2=$ptr;
 var $3=(($2+$1)|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 return $5;
}


function __ZN10emscripten8internal12MemberAccessI7ContactiE7setWireIS2_EEvRKMS2_iRT_i($field,$ptr,$value){
 var label=0;


 var $1=HEAP32[(($field)>>2)];
 var $2=$ptr;
 var $3=(($2+$1)|0);
 var $4=$3;
 HEAP32[(($4)>>2)]=$value;
 return;
}


function __ZN10emscripten8internal12MemberAccessI7ContactNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7getWireIS2_EEPNS0_11BindingTypeIS9_EUt_ERKMS2_S9_RKT_($field,$ptr){
 var label=0;


 var $1=HEAP32[(($field)>>2)];
 var $2=$ptr;
 var $3=(($2+$1)|0);
 var $4=$3;
 var $5=__ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE10toWireTypeERKS8_($4);
 return $5;
}


function __ZN10emscripten8internal12MemberAccessI7ContactNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEE7setWireIS2_EEvRKMS2_S9_RT_PNS0_11BindingTypeIS9_EUt_E($field,$ptr,$value){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=HEAP32[(($field)>>2)];
 var $3=$ptr;
 var $4=(($3+$2)|0);
 var $5=$4;
 __ZN10emscripten8internal11BindingTypeINSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEEE12fromWireTypeEPNS9_Ut_E($1,$value);
 var $6=HEAP8[($4)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $_sum=((($2)+(8))|0);
 var $10=(($3+$_sum)|0);
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 HEAP8[($12)]=0;
 var $_sum1=((($2)+(4))|0);
 var $13=(($3+$_sum1)|0);
 var $14=$13;
 HEAP32[(($14)>>2)]=0;
 label=4;break;
 case 3: 
 var $_sum2=((($2)+(1))|0);
 var $16=(($3+$_sum2)|0);
 HEAP8[($16)]=0;
 HEAP8[($4)]=0;
 label=4;break;
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 6: 
 var $20=$1;
 assert(12 % 1 === 0);HEAP32[(($4)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($4)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($4)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal15raw_constructorI7ContactJEEEPT_DpNS0_11BindingTypeIT0_E8WireTypeE(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break;
 case 2: 
 var $2=_malloc(48);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=12;break;}
 case 3: 
 var $5=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $6=($5|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $10=$lpad_phi_i$1;
 var $11=($10|0)<0;
 if($11){label=8;break;}else{label=10;break;}
 case 8: 
 var $13=$lpad_phi_i$0;
 ___cxa_call_unexpected($13);
 throw "Reached an unreachable!";
 case 9: 
 var $15=___cxa_allocate_exception(4);
 var $16=$15;
 HEAP32[(($16)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($15,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 10: 
 ___resumeException($lpad_phi_i$0)
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $19=$2;
 _memset($2, 0, 48)|0;
 return $19;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal14raw_destructorI7ContactEEvPT_($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=12;break;}else{label=2;break;}
 case 2: 
 var $3=(($ptr+28)|0);
 var $4=$3;
 var $5=HEAP8[($4)];
 var $6=$5&1;
 var $7=(($6<<24)>>24)==0;
 if($7){label=5;break;}else{label=3;break;}
 case 3: 
 var $9=(($ptr+36)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 _free($10);
 label=5;break;
 case 5: 
 var $13=(($ptr+16)|0);
 var $14=$13;
 var $15=HEAP8[($14)];
 var $16=$15&1;
 var $17=(($16<<24)>>24)==0;
 if($17){label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($ptr+24)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 _free($20);
 label=8;break;
 case 8: 
 var $23=(($ptr+4)|0);
 var $24=$23;
 var $25=HEAP8[($24)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=11;break;}else{label=9;break;}
 case 9: 
 var $29=(($ptr+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 _free($30);
 label=11;break;
 case 11: 
 var $33=$ptr;
 _free($33);
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16vectorI7ContactNS_9allocatorIS1_EEE9push_backERKS1_($this,$__x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__v_i=sp;
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+8)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=5;break;}else{label=2;break;}
 case 2: 
 var $7=($2|0)==0;
 if($7){var $9=0;label=4;break;}else{label=3;break;}
 case 3: 
 __ZN7ContactC1ERKS_($2,$__x);
 var $_pre=HEAP32[(($1)>>2)];
 var $9=$_pre;label=4;break;
 case 4: 
 var $9;
 var $10=(($9+48)|0);
 HEAP32[(($1)>>2)]=$10;
 label=30;break;
 case 5: 
 var $11=$__v_i;
 var $$etemp$0$0=20;
 var $$etemp$0$1=0;

 var $12=(($this+8)|0);
 var $13=$12;
 var $14=(($this)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$2;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=(((($18|0))/(48))&-1);
 var $20=((($19)+(1))|0);
 var $21=($20>>>0)>89478485;
 if($21){label=6;break;}else{label=7;break;}
 case 6: 
 __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 7: 
 var $24=89478485>>>1;
 var $25=($19>>>0)<($24>>>0);
 if($25){label=9;break;}else{label=8;break;}
 case 8: 
 var $26=(($__v_i+12)|0);
 HEAP32[(($26)>>2)]=0;
 var $27=(($__v_i+16)|0);
 HEAP32[(($27)>>2)]=$13;
 var $35=89478485;var $34=$26;label=10;break;
 case 9: 
 var $28=$19<<1;
 var $29=($28>>>0)<($20>>>0);
 var $_=($29?$20:$28);
 var $30=(($__v_i+12)|0);
 HEAP32[(($30)>>2)]=0;
 var $31=(($__v_i+16)|0);
 HEAP32[(($31)>>2)]=$13;
 var $32=($_|0)==0;
 if($32){var $59=0;var $58=$_;var $57=$30;label=22;break;}else{var $35=$_;var $34=$30;label=10;break;}
 case 10: 
 var $34;
 var $35;
 var $36=((($35)*(48))&-1);
 var $37=($36|0)==0;
 var $_size_i_i_i_i_i_i=($37?1:$36);
 label=11;break;
 case 11: 
 var $39=_malloc($_size_i_i_i_i_i_i);
 var $40=($39|0)==0;
 if($40){label=12;break;}else{label=21;break;}
 case 12: 
 var $42=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $43=($42|0)==0;
 if($43){label=18;break;}else{label=13;break;}
 case 13: 
 var $45=$42;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 14: 
 var $lpad_loopexit_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i_i$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i_i$0;label=16;break;
 case 16: 
 var $lpad_phi_i_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i_i$1;
 var $47=$lpad_phi_i_i_i_i_i_i$1;
 var $48=($47|0)<0;
 if($48){label=17;break;}else{label=19;break;}
 case 17: 
 var $50=$lpad_phi_i_i_i_i_i_i$0;
 ___cxa_call_unexpected($50);
 throw "Reached an unreachable!";
 case 18: 
 var $52=___cxa_allocate_exception(4);
 var $53=$52;
 HEAP32[(($53)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($52,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 19: 
 ___resumeException($lpad_phi_i_i_i_i_i_i$0)
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $56=$39;
 var $59=$56;var $58=$35;var $57=$34;label=22;break;
 case 22: 
 var $57;
 var $58;
 var $59;
 var $60=(($__v_i)|0);
 HEAP32[(($60)>>2)]=$59;
 var $61=(($59+((($19)*(48))&-1))|0);
 var $62=(($__v_i+8)|0);
 HEAP32[(($62)>>2)]=$61;
 var $63=(($__v_i+4)|0);
 HEAP32[(($63)>>2)]=$61;
 var $64=(($59+((($58)*(48))&-1))|0);
 HEAP32[(($57)>>2)]=$64;
 var $65=($61|0)==0;
 if($65){var $67=0;label=25;break;}else{label=23;break;}
 case 23: 
 (function() { try { __THREW__ = 0; return __ZN7ContactC1ERKS_($61,$__x) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=28;break; }
 case 24: 
 var $_pre2=HEAP32[(($62)>>2)];
 var $67=$_pre2;label=25;break;
 case 25: 
 var $67;
 var $68=(($67+48)|0);
 HEAP32[(($62)>>2)]=$68;
 var $69=HEAP32[(($14)>>2)];
 var $70=HEAP32[(($1)>>2)];
 var $_0=$70;label=26;break;
 case 26: 
 var $_0;
 var $72=($_0|0)==($69|0);
 if($72){label=29;break;}else{label=27;break;}
 case 27: 
 var $74=HEAP32[(($63)>>2)];
 var $75=((($_0)-(48))|0);
 var $76=((($74)-(48))|0);
 var $77=(($75)|0);
 var $78=HEAP32[(($77)>>2)];
 HEAP32[(($76)>>2)]=$78;
 var $79=((($74)-(48)+4)|0);
 var $80=((($_0)-(48)+4)|0);
 var $81=$79;
 var $82=$80;
 assert(12 % 1 === 0);HEAP32[(($81)>>2)]=HEAP32[(($82)>>2)];HEAP32[((($81)+(4))>>2)]=HEAP32[((($82)+(4))>>2)];HEAP32[((($81)+(8))>>2)]=HEAP32[((($82)+(8))>>2)];
 HEAP32[(($82)>>2)]=0; HEAP32[((($82)+(4))>>2)]=0; HEAP32[((($82)+(8))>>2)]=0;
 var $83=HEAP32[(($77)>>2)];
 HEAP32[(($76)>>2)]=$83;
 var $84=((($74)-(48)+16)|0);
 var $85=((($_0)-(48)+16)|0);
 var $86=$84;
 var $87=$85;
 assert(12 % 1 === 0);HEAP32[(($86)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($86)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($86)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
 HEAP32[(($87)>>2)]=0; HEAP32[((($87)+(4))>>2)]=0; HEAP32[((($87)+(8))>>2)]=0;
 var $88=HEAP32[(($77)>>2)];
 HEAP32[(($76)>>2)]=$88;
 var $89=((($74)-(48)+28)|0);
 var $90=((($_0)-(48)+28)|0);
 var $91=$89;
 var $92=$90;
 assert(12 % 1 === 0);HEAP32[(($91)>>2)]=HEAP32[(($92)>>2)];HEAP32[((($91)+(4))>>2)]=HEAP32[((($92)+(4))>>2)];HEAP32[((($91)+(8))>>2)]=HEAP32[((($92)+(8))>>2)];
 HEAP32[(($92)>>2)]=0; HEAP32[((($92)+(4))>>2)]=0; HEAP32[((($92)+(8))>>2)]=0;
 var $93=((($74)-(48)+40)|0);
 var $94=((($_0)-(48)+40)|0);
 var $95=$94;
 var $96=$93;
 var $ld$1$0=(($95)|0);
 var $97$0=HEAP32[(($ld$1$0)>>2)];
 var $ld$2$1=(($95+4)|0);
 var $97$1=HEAP32[(($ld$2$1)>>2)];
 var $st$3$0=(($96)|0);
 HEAP32[(($st$3$0)>>2)]=$97$0;
 var $st$4$1=(($96+4)|0);
 HEAP32[(($st$4$1)>>2)]=$97$1;
 var $98=HEAP32[(($63)>>2)];
 var $99=((($98)-(48))|0);
 HEAP32[(($63)>>2)]=$99;
 var $_0=$75;label=26;break;
 case 28: 
 var $101$0 = ___cxa_find_matching_catch(-1, -1); var $101$1 = tempRet0;
 __ZNSt3__114__split_bufferI7ContactRNS_9allocatorIS1_EEED1Ev($__v_i);
 ___resumeException($101$0)
 case 29: 
 var $102=HEAP32[(($14)>>2)];
 var $103=HEAP32[(($63)>>2)];
 HEAP32[(($14)>>2)]=$103;
 HEAP32[(($63)>>2)]=$102;
 var $104=HEAP32[(($1)>>2)];
 var $105=HEAP32[(($62)>>2)];
 HEAP32[(($1)>>2)]=$105;
 HEAP32[(($62)>>2)]=$104;
 var $106=HEAP32[(($3)>>2)];
 var $107=HEAP32[(($57)>>2)];
 HEAP32[(($3)>>2)]=$107;
 HEAP32[(($57)>>2)]=$106;
 HEAP32[(($60)>>2)]=$102;
 __ZNSt3__114__split_bufferI7ContactRNS_9allocatorIS1_EEED1Ev($__v_i);
 var $$etemp$5$0=20;
 var $$etemp$5$1=0;

 label=30;break;
 case 30: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal12VectorAccessINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEE3getERKS7_j($agg_result,$v,$index){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $argv_i_i=sp;
 var $1=(($v+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($v)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$2;
 var $6=$4;
 var $7=((($5)-($6))|0);
 var $8=(((($7|0))/(48))&-1);
 var $9=($8>>>0)>($index>>>0);
 if($9){label=2;break;}else{label=16;break;}
 case 2: 
 var $11=(($4+((($index)*(48))&-1))|0);
 var $12=$argv_i_i;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 label=3;break;
 case 3: 
 var $14=_malloc(48);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=13;break;}
 case 4: 
 var $17=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $18=($17|0)==0;
 if($18){label=10;break;}else{label=5;break;}
 case 5: 
 var $20=$17;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$20]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 6: 
 var $lpad_loopexit_i_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i_i$1=$lpad_loopexit_i_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i_i$0=$lpad_loopexit_i_i_i_i_i_i_i$0;label=8;break;
 case 7: 
 var $lpad_nonloopexit_i_i_i_i_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i_i_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i_i_i_i_i$1=$lpad_nonloopexit_i_i_i_i_i_i_i$1;var $lpad_phi_i_i_i_i_i_i_i$0=$lpad_nonloopexit_i_i_i_i_i_i_i$0;label=8;break;
 case 8: 
 var $lpad_phi_i_i_i_i_i_i_i$0;
 var $lpad_phi_i_i_i_i_i_i_i$1;
 var $22=$lpad_phi_i_i_i_i_i_i_i$1;
 var $23=($22|0)<0;
 if($23){label=9;break;}else{label=11;break;}
 case 9: 
 var $25=$lpad_phi_i_i_i_i_i_i_i$0;
 ___cxa_call_unexpected($25);
 throw "Reached an unreachable!";
 case 10: 
 var $27=___cxa_allocate_exception(4);
 var $28=$27;
 HEAP32[(($28)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($27,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=7;break; }
 case 11: 
 ___resumeException($lpad_phi_i_i_i_i_i_i_i$0)
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $31=$14;
 (function() { try { __THREW__ = 0; return __ZN7ContactC1ERKS_($31,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1); var $32$1 = tempRet0;
 _free($14);
 ___resumeException($32$0)
 case 15: 
 var $33=$argv_i_i;
 HEAP32[(($33)>>2)]=$14;
 var $34=__emval_take_value(13504,$12);
 var $35=(($agg_result)|0);
 HEAP32[(($35)>>2)]=$34;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;

 label=17;break;
 case 16: 
 var $37=__emval_undefined();
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$37;
 label=17;break;
 case 17: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal12VectorAccessINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEE3setERS7_jRKS4_($v,$index,$value){
 var label=0;


 var $1=(($v)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($value)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($2+((($index)*(48))&-1))|0);
 HEAP32[(($5)>>2)]=$4;
 var $6=(($2+((($index)*(48))&-1)+4)|0);
 var $7=(($value+4)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($6,$7);
 var $8=(($2+((($index)*(48))&-1)+16)|0);
 var $9=(($value+16)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($8,$9);
 var $10=(($2+((($index)*(48))&-1)+28)|0);
 var $11=(($value+28)|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($10,$11);
 var $12=(($2+((($index)*(48))&-1)+40)|0);
 var $13=(($value+40)|0);
 var $14=$13;
 var $15=$12;
 var $ld$0$0=(($14)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($14+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($15)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($15+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 return 1;
}


function __ZN10emscripten8internal15FunctionInvokerIPFbRNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEjRKS4_EbS8_JjSA_EE6invokeEPSC_PS7_jPS4_($function,$wireThis,$args,$args1){
 var label=0;


 var $1=HEAP32[(($function)>>2)];
 var $2=FUNCTION_TABLE[$1]($wireThis,$args,$args1);
 return $2;
}


function __ZN10emscripten8internal15FunctionInvokerIPFNS_3valERKNSt3__16vectorI7ContactNS3_9allocatorIS5_EEEEjES2_SA_JjEE6invokeEPSC_PS8_j($function,$wireThis,$args){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=HEAP32[(($function)>>2)];
 FUNCTION_TABLE[$2]($1,$wireThis,$args);
 var $3=(($1)|0);
 var $4=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return __emval_incref($4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 2: 
 var $6=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return __emval_decref($6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $6;
 case 5: 
 var $11$0 = ___cxa_find_matching_catch(-1, -1); var $11$1 = tempRet0;
 var $12=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return __emval_decref($12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=6;break; }
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1,0); var $14$1 = tempRet0;
 var $15=$14$0;
 ___clang_call_terminate($15);
 throw "Reached an unreachable!";
 case 7: 
 ___resumeException($11$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEKFjvEjPKS7_JEE6invokeERKS9_SB_($method,$wireThis){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=(($method)|0);
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($method+4)|0);
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$1$1;
 var $3=$wireThis;
 var $4=(($3+$2)|0);
 var $5=$4;
 var $6=$1$0;
 var $7=$6&1;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$4;
 var $11=HEAP32[(($10)>>2)];
 var $12=((($6)-(1))|0);
 var $13=(($11+$12)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $19=$15;label=4;break;
 case 3: 
 var $17=$6;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 var $20=FUNCTION_TABLE[$19]($5);
 return $20;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal13MethodInvokerIMNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEFvRKS4_EvPS7_JS9_EE6invokeERKSB_SC_PS4_($method,$wireThis,$args){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $ld$0$0=(($method)|0);
 var $1$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($method+4)|0);
 var $1$1=HEAP32[(($ld$1$1)>>2)];
 var $2=$1$1;
 var $3=$wireThis;
 var $4=(($3+$2)|0);
 var $5=$4;
 var $6=$1$0;
 var $7=$6&1;
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=$4;
 var $11=HEAP32[(($10)>>2)];
 var $12=((($6)-(1))|0);
 var $13=(($11+$12)|0);
 var $14=$13;
 var $15=HEAP32[(($14)>>2)];
 var $19=$15;label=4;break;
 case 3: 
 var $17=$6;
 var $19=$17;label=4;break;
 case 4: 
 var $19;
 FUNCTION_TABLE[$19]($5,$args);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal12operator_newINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEJEEEPT_DpT0_(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 label=2;break;
 case 2: 
 var $2=_malloc(12);
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=12;break;}
 case 3: 
 var $5=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $6=($5|0)==0;
 if($6){label=9;break;}else{label=4;break;}
 case 4: 
 var $8=$5;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $10=$lpad_phi_i$1;
 var $11=($10|0)<0;
 if($11){label=8;break;}else{label=10;break;}
 case 8: 
 var $13=$lpad_phi_i$0;
 ___cxa_call_unexpected($13);
 throw "Reached an unreachable!";
 case 9: 
 var $15=___cxa_allocate_exception(4);
 var $16=$15;
 HEAP32[(($16)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($15,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 10: 
 ___resumeException($lpad_phi_i$0)
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $19=$2;
 var $20=$2;
 HEAP32[(($20)>>2)]=0;
 var $21=(($2+4)|0);
 var $22=$21;
 HEAP32[(($22)>>2)]=0;
 var $23=(($2+8)|0);
 var $24=$23;
 HEAP32[(($24)>>2)]=0;
 return $19;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10emscripten8internal7InvokerIPNSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEJEE6invokeEPFS8_vE($fn){
 var label=0;


 var $1=FUNCTION_TABLE[$fn]();
 return $1;
}


function __ZN10emscripten8internal13getActualTypeINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEEEPKNS0_7_TYPEIDEPT_($ptr){
 var label=0;


 return 12632;
}


function __ZN10emscripten8internal14raw_destructorINSt3__16vectorI7ContactNS2_9allocatorIS4_EEEEEEvPT_($ptr){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ptr|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $2=(($ptr)|0);
 __ZNSt3__113__vector_baseI7ContactNS_9allocatorIS1_EEED2Ev($2);
 var $3=$ptr;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__split_bufferI7ContactRNS_9allocatorIS1_EEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($this+8)|0);
 label=2;break;
 case 2: 
 var $4=HEAP32[(($3)>>2)];
 var $5=($2|0)==($4|0);
 if($5){label=12;break;}else{label=3;break;}
 case 3: 
 var $7=((($4)-(48))|0);
 HEAP32[(($3)>>2)]=$7;
 var $8=((($4)-(48)+28)|0);
 var $9=$8;
 var $10=HEAP8[($9)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=6;break;}else{label=4;break;}
 case 4: 
 var $14=((($4)-(48)+36)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==0;
 if($16){label=6;break;}else{label=5;break;}
 case 5: 
 _free($15);
 label=6;break;
 case 6: 
 var $18=((($4)-(48)+16)|0);
 var $19=$18;
 var $20=HEAP8[($19)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){label=9;break;}else{label=7;break;}
 case 7: 
 var $24=((($4)-(48)+24)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($25|0)==0;
 if($26){label=9;break;}else{label=8;break;}
 case 8: 
 _free($25);
 label=9;break;
 case 9: 
 var $28=((($4)-(48)+4)|0);
 var $29=$28;
 var $30=HEAP8[($29)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=2;break;}else{label=10;break;}
 case 10: 
 var $34=((($4)-(48)+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==0;
 if($36){label=2;break;}else{label=11;break;}
 case 11: 
 _free($35);
 label=2;break;
 case 12: 
 var $38=(($this)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){label=14;break;}else{label=13;break;}
 case 13: 
 var $42=$39;
 _free($42);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a(){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $args_i19_i_i=sp;
 var $args_i18_i_i=(sp)+(16);
 var $args_i17_i_i=(sp)+(32);
 var $args_i16_i_i=(sp)+(40);
 var $args_i15_i_i=(sp)+(48);
 var $args_i14_i_i=(sp)+(64);
 var $args_i13_i_i=(sp)+(72);
 var $args_i12_i_i=(sp)+(88);
 var $args_i11_i_i=(sp)+(96);
 var $args_i10_i_i=(sp)+(112);
 var $args_i9_i_i=(sp)+(120);
 var $args_i8_i_i=(sp)+(128);
 var $args_i7_i_i=(sp)+(144);
 var $args_i6_i_i=(sp)+(160);
 var $args_i5_i_i=(sp)+(176);
 var $args_i4_i_i=(sp)+(184);
 var $args_i3_i_i=(sp)+(208);
 var $args_i_i_i=(sp)+(216);
 var $args_i10_i_i_i=(sp)+(224);
 var $args_i8_i_i_i=(sp)+(248);
 var $args_i5_i_i_i=(sp)+(264);
 var $args_i_i_i_i=(sp)+(280);
 var $args_i_i_i_i_i=(sp)+(296);
 var $1=(sp)+(304);
 HEAP32[((14912)>>2)]=0;
 HEAP32[((14916)>>2)]=0;
 HEAP32[((14920)>>2)]=0;
 var $2=_atexit((178),14912,___dso_handle);
 var $3=(($1)|0);
 var $$etemp$0$0=1;
 var $$etemp$0$1=0;

 __embind_register_class(12632,11784,11800,0,(510),0,0,2856,(74));
 var $4=$args_i_i_i_i_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;

 var $5=(($args_i_i_i_i_i)|0);
 HEAP32[(($5)>>2)]=1;
 var $6=(($args_i_i_i_i_i+4)|0);
 HEAP32[(($6)>>2)]=11784;
 __embind_register_class_constructor(12632,1,$6,(60),(28));
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;

 var $7=$args_i_i_i_i;
 var $$etemp$3$0=16;
 var $$etemp$3$1=0;

 var $8=(($args_i_i_i_i)|0);
 HEAP32[(($8)>>2)]=3;
 var $9=(($args_i_i_i_i+4)|0);
 HEAP32[(($9)>>2)]=11680;
 var $10=(($args_i_i_i_i+8)|0);
 HEAP32[(($10)>>2)]=11784;
 var $11=(($args_i_i_i_i+12)|0);
 HEAP32[(($11)>>2)]=13504;
 var $12=_malloc(8);
 var $13=($12|0)==0;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $15=$12;
 var $$etemp$4=(94);
 var $st$5$0=(($15)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4;
 var $st$6$1=(($15+4)|0);
 HEAP32[(($st$6$1)>>2)]=0;
 label=3;break;
 case 3: 
 __embind_register_class_function(12632,1864,3,$9,(680),$12);
 var $$etemp$7$0=16;
 var $$etemp$7$1=0;

 var $16=$args_i5_i_i_i;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $17=(($args_i5_i_i_i)|0);
 HEAP32[(($17)>>2)]=2;
 var $18=(($args_i5_i_i_i+4)|0);
 HEAP32[(($18)>>2)]=__ZTIj;
 var $19=(($args_i5_i_i_i+8)|0);
 HEAP32[(($19)>>2)]=11800;
 var $20=_malloc(8);
 var $21=($20|0)==0;
 if($21){label=5;break;}else{label=4;break;}
 case 4: 
 var $23=$20;
 var $$etemp$9=(382);
 var $st$10$0=(($23)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$9;
 var $st$11$1=(($23+4)|0);
 HEAP32[(($st$11$1)>>2)]=0;
 label=5;break;
 case 5: 
 __embind_register_class_function(12632,1816,2,$18,(378),$20);
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $24=$args_i8_i_i_i;
 var $$etemp$13$0=16;
 var $$etemp$13$1=0;

 var $25=(($args_i8_i_i_i)|0);
 HEAP32[(($25)>>2)]=3;
 var $26=(($args_i8_i_i_i+4)|0);
 HEAP32[(($26)>>2)]=13368;
 var $27=(($args_i8_i_i_i+8)|0);
 HEAP32[(($27)>>2)]=12632;
 var $28=(($args_i8_i_i_i+12)|0);
 HEAP32[(($28)>>2)]=__ZTIj;
 var $29=_malloc(4);
 var $30=($29|0)==0;
 if($30){label=7;break;}else{label=6;break;}
 case 6: 
 var $32=$29;
 HEAP32[(($32)>>2)]=128;
 label=7;break;
 case 7: 
 __embind_register_class_function(12632,1784,3,$26,(214),$29);
 var $$etemp$14$0=16;
 var $$etemp$14$1=0;

 var $33=$args_i10_i_i_i;
 var $$etemp$15$0=20;
 var $$etemp$15$1=0;

 var $34=(($args_i10_i_i_i)|0);
 HEAP32[(($34)>>2)]=4;
 var $35=(($args_i10_i_i_i+4)|0);
 HEAP32[(($35)>>2)]=11688;
 var $36=(($args_i10_i_i_i+8)|0);
 HEAP32[(($36)>>2)]=12632;
 var $37=(($args_i10_i_i_i+12)|0);
 HEAP32[(($37)>>2)]=__ZTIj;
 var $38=(($args_i10_i_i_i+16)|0);
 HEAP32[(($38)>>2)]=13504;
 var $39=_malloc(4);
 var $40=($39|0)==0;
 if($40){label=9;break;}else{label=8;break;}
 case 8: 
 var $42=$39;
 HEAP32[(($42)>>2)]=368;
 label=9;break;
 case 9: 
 __embind_register_class_function(12632,1760,4,$35,(198),$39);
 var $$etemp$16$0=20;
 var $$etemp$16$1=0;

 __embind_register_value_object(13504,2848,(306),(280));
 var $43=(function() { try { __THREW__ = 0; return __ZN10emscripten12value_objectI7ContactE5fieldIS1_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($1,2800,4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=24;break; }
 case 10: 
 var $45=(function() { try { __THREW__ = 0; return __ZN10emscripten12value_objectI7ContactE5fieldIS1_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($43,2776,16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=24;break; }
 case 11: 
 var $47=(function() { try { __THREW__ = 0; return __ZN10emscripten12value_objectI7ContactE5fieldIS1_NSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEEEERS2_PKcMT_T0_($45,2704,28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=24;break; }
 case 12: 
 var $49=_malloc(4);
 var $50=($49|0)==0;
 if($50){label=14;break;}else{label=13;break;}
 case 13: 
 var $52=$49;
 HEAP32[(($52)>>2)]=40;
 label=14;break;
 case 14: 
 var $53=_malloc(4);
 var $54=($53|0)==0;
 if($54){label=16;break;}else{label=15;break;}
 case 15: 
 var $56=$53;
 HEAP32[(($56)>>2)]=40;
 label=16;break;
 case 16: 
 (function() { try { __THREW__ = 0; return __embind_register_value_object_field(13504,2680,__ZTIi,(644),$49,__ZTIi,(242),$53) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=24;break; }
 case 17: 
 var $57=_malloc(4);
 var $58=($57|0)==0;
 if($58){label=19;break;}else{label=18;break;}
 case 18: 
 var $60=$57;
 HEAP32[(($60)>>2)]=44;
 label=19;break;
 case 19: 
 var $61=_malloc(4);
 var $62=($61|0)==0;
 if($62){label=21;break;}else{label=20;break;}
 case 20: 
 var $64=$61;
 HEAP32[(($64)>>2)]=44;
 label=21;break;
 case 21: 
 (function() { try { __THREW__ = 0; return __embind_register_value_object_field(13504,2640,__ZTIl,(376),$57,__ZTIl,(252),$61) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=24;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __embind_finalize_value_object(13504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=23;break; }
 case 23: 
 var $66$0 = ___cxa_find_matching_catch(-1, -1,0); var $66$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 24: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 (function() { try { __THREW__ = 0; return __embind_finalize_value_object(13504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=25;break; }
 case 25: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1,0); var $70$1 = tempRet0;
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 26: 
 ___resumeException($68$0)
 case 27: 
 var $71=$args_i_i_i;
 var $$etemp$17$0=8;
 var $$etemp$17$1=0;

 var $72=(($args_i_i_i)|0);
 HEAP32[(($72)>>2)]=1;
 var $73=(($args_i_i_i+4)|0);
 HEAP32[(($73)>>2)]=11688;
 __embind_register_function(2608,1,$73,(432),(412));
 var $$etemp$18$0=8;
 var $$etemp$18$1=0;

 var $74=$args_i3_i_i;
 var $$etemp$19$0=8;
 var $$etemp$19$1=0;

 var $75=(($args_i3_i_i)|0);
 HEAP32[(($75)>>2)]=1;
 var $76=(($args_i3_i_i+4)|0);
 HEAP32[(($76)>>2)]=11680;
 __embind_register_function(2600,1,$76,(328),634);
 var $$etemp$20$0=8;
 var $$etemp$20$1=0;

 var $77=$args_i4_i_i;
 var $$etemp$21$0=20;
 var $$etemp$21$1=0;

 var $78=(($args_i4_i_i)|0);
 HEAP32[(($78)>>2)]=4;
 var $79=(($args_i4_i_i+4)|0);
 HEAP32[(($79)>>2)]=11688;
 var $80=(($args_i4_i_i+8)|0);
 HEAP32[(($80)>>2)]=13080;
 var $81=(($args_i4_i_i+12)|0);
 HEAP32[(($81)>>2)]=__ZTIi;
 var $82=(($args_i4_i_i+16)|0);
 HEAP32[(($82)>>2)]=13080;
 __embind_register_function(2544,4,$79,(288),(182));
 var $$etemp$22$0=20;
 var $$etemp$22$1=0;

 var $83=$args_i5_i_i;
 var $$etemp$23$0=8;
 var $$etemp$23$1=0;

 var $84=(($args_i5_i_i)|0);
 HEAP32[(($84)>>2)]=1;
 var $85=(($args_i5_i_i+4)|0);
 HEAP32[(($85)>>2)]=11688;
 __embind_register_function(2536,1,$85,(432),(322));
 var $$etemp$24$0=8;
 var $$etemp$24$1=0;

 var $86=$args_i6_i_i;
 var $$etemp$25$0=16;
 var $$etemp$25$1=0;

 var $87=(($args_i6_i_i)|0);
 HEAP32[(($87)>>2)]=3;
 var $88=(($args_i6_i_i+4)|0);
 HEAP32[(($88)>>2)]=11688;
 var $89=(($args_i6_i_i+8)|0);
 HEAP32[(($89)>>2)]=13080;
 var $90=(($args_i6_i_i+12)|0);
 HEAP32[(($90)>>2)]=13080;
 __embind_register_function(2480,3,$88,(508),(694));
 var $$etemp$26$0=16;
 var $$etemp$26$1=0;

 var $91=$args_i7_i_i;
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $92=(($args_i7_i_i)|0);
 HEAP32[(($92)>>2)]=2;
 var $93=(($args_i7_i_i+4)|0);
 HEAP32[(($93)>>2)]=11688;
 var $94=(($args_i7_i_i+8)|0);
 HEAP32[(($94)>>2)]=__ZTIi;
 __embind_register_function(2408,2,$93,(534),(480));
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $95=$args_i8_i_i;
 var $$etemp$29$0=16;
 var $$etemp$29$1=0;

 var $96=(($args_i8_i_i)|0);
 HEAP32[(($96)>>2)]=3;
 var $97=(($args_i8_i_i+4)|0);
 HEAP32[(($97)>>2)]=11688;
 var $98=(($args_i8_i_i+8)|0);
 HEAP32[(($98)>>2)]=__ZTIi;
 var $99=(($args_i8_i_i+12)|0);
 HEAP32[(($99)>>2)]=13080;
 __embind_register_function(2288,3,$97,(600),(442));
 var $$etemp$30$0=16;
 var $$etemp$30$1=0;

 var $100=$args_i9_i_i;
 var $$etemp$31$0=8;
 var $$etemp$31$1=0;

 var $101=(($args_i9_i_i)|0);
 HEAP32[(($101)>>2)]=1;
 var $102=(($args_i9_i_i+4)|0);
 HEAP32[(($102)>>2)]=13080;
 __embind_register_function(2240,1,$102,(762),(568));
 var $$etemp$32$0=8;
 var $$etemp$32$1=0;

 var $103=$args_i10_i_i;
 var $$etemp$33$0=8;
 var $$etemp$33$1=0;

 var $104=(($args_i10_i_i)|0);
 HEAP32[(($104)>>2)]=1;
 var $105=(($args_i10_i_i+4)|0);
 HEAP32[(($105)>>2)]=13080;
 __embind_register_function(2184,1,$105,(762),(746));
 var $$etemp$34$0=8;
 var $$etemp$34$1=0;

 var $106=$args_i11_i_i;
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $107=(($args_i11_i_i)|0);
 HEAP32[(($107)>>2)]=2;
 var $108=(($args_i11_i_i+4)|0);
 HEAP32[(($108)>>2)]=11688;
 var $109=(($args_i11_i_i+8)|0);
 HEAP32[(($109)>>2)]=13080;
 __embind_register_function(2176,2,$108,(140),(170));
 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $110=$args_i12_i_i;
 var $$etemp$37$0=8;
 var $$etemp$37$1=0;

 var $111=(($args_i12_i_i)|0);
 HEAP32[(($111)>>2)]=1;
 var $112=(($args_i12_i_i+4)|0);
 HEAP32[(($112)>>2)]=13080;
 __embind_register_function(2112,1,$112,(762),(462));
 var $$etemp$38$0=8;
 var $$etemp$38$1=0;

 var $113=$args_i13_i_i;
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $114=(($args_i13_i_i)|0);
 HEAP32[(($114)>>2)]=2;
 var $115=(($args_i13_i_i+4)|0);
 HEAP32[(($115)>>2)]=11688;
 var $116=(($args_i13_i_i+8)|0);
 HEAP32[(($116)>>2)]=13080;
 __embind_register_function(2048,2,$115,(140),(346));
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $117=$args_i14_i_i;
 var $$etemp$41$0=8;
 var $$etemp$41$1=0;

 var $118=(($args_i14_i_i)|0);
 HEAP32[(($118)>>2)]=1;
 var $119=(($args_i14_i_i+4)|0);
 HEAP32[(($119)>>2)]=__ZTIi;
 __embind_register_function(2024,1,$119,(490),(768));
 var $$etemp$42$0=8;
 var $$etemp$42$1=0;

 var $120=$args_i15_i_i;
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $121=(($args_i15_i_i)|0);
 HEAP32[(($121)>>2)]=2;
 var $122=(($args_i15_i_i+4)|0);
 HEAP32[(($122)>>2)]=11688;
 var $123=(($args_i15_i_i+8)|0);
 HEAP32[(($123)>>2)]=__ZTIi;
 __embind_register_function(2008,2,$122,(534),(216));
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $124=$args_i16_i_i;
 var $$etemp$45$0=8;
 var $$etemp$45$1=0;

 var $125=(($args_i16_i_i)|0);
 HEAP32[(($125)>>2)]=1;
 var $126=(($args_i16_i_i+4)|0);
 HEAP32[(($126)>>2)]=11680;
 __embind_register_function(1992,1,$126,(328),250);
 var $$etemp$46$0=8;
 var $$etemp$46$1=0;

 var $127=$args_i17_i_i;
 var $$etemp$47$0=8;
 var $$etemp$47$1=0;

 var $128=(($args_i17_i_i)|0);
 HEAP32[(($128)>>2)]=1;
 var $129=(($args_i17_i_i+4)|0);
 HEAP32[(($129)>>2)]=12632;
 __embind_register_function(1936,1,$129,(702),(224));
 var $$etemp$48$0=8;
 var $$etemp$48$1=0;

 var $130=$args_i18_i_i;
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $131=(($args_i18_i_i)|0);
 HEAP32[(($131)>>2)]=2;
 var $132=(($args_i18_i_i+4)|0);
 HEAP32[(($132)>>2)]=13080;
 var $133=(($args_i18_i_i+8)|0);
 HEAP32[(($133)>>2)]=13080;
 __embind_register_function(1928,2,$132,(580),(24));
 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $134=$args_i19_i_i;
 var $$etemp$51$0=16;
 var $$etemp$51$1=0;

 var $135=(($args_i19_i_i)|0);
 HEAP32[(($135)>>2)]=3;
 var $136=(($args_i19_i_i+4)|0);
 HEAP32[(($136)>>2)]=11688;
 var $137=(($args_i19_i_i+8)|0);
 HEAP32[(($137)>>2)]=13080;
 var $138=(($args_i19_i_i+12)|0);
 HEAP32[(($138)>>2)]=13080;
 __embind_register_function(1880,3,$136,(508),(244));
 var $$etemp$52$0=16;
 var $$etemp$52$1=0;

 var $$etemp$53$0=1;
 var $$etemp$53$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function ___getTypeName($ti){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($ti+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_strlen($2);
 var $4=((($3)+(1))|0);
 var $5=_malloc($4);
 var $6=($5|0)==0;
 if($6){var $_0_i=0;label=3;break;}else{label=2;break;}
 case 2: 
 assert($4 % 1 === 0);(_memcpy($5, $2, $4)|0);
 var $_0_i=$5;label=3;break;
 case 3: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}
Module["___getTypeName"] = ___getTypeName;

function __GLOBAL__I_a655(){
 var label=0;


 __embind_register_void(11680,1448);
 __embind_register_bool(11688,3440,1,1,0);
 __embind_register_integer(__ZTIc,2720,1,0,255);
 __embind_register_integer(__ZTIa,2264,1,-128,127);
 __embind_register_integer(__ZTIh,1888,1,0,255);
 __embind_register_integer(__ZTIs,1712,2,-32768,32767);
 __embind_register_integer(__ZTIt,1296,2,0,65535);
 __embind_register_integer(__ZTIi,984,4,-2147483648,2147483647);
 __embind_register_integer(__ZTIj,760,4,0,-1);
 __embind_register_integer(__ZTIl,544,4,-2147483648,2147483647);
 __embind_register_integer(__ZTIm,4448,4,0,-1);
 __embind_register_float(__ZTIf,4048,4);
 __embind_register_float(__ZTId,3864,8);
 __embind_register_std_string(13080,3736);
 __embind_register_std_string(13056,3592);
 __embind_register_std_wstring(13032,4,3512);
 __embind_register_emval(13368,3424);
 __embind_register_memory_view(13376,3344);
 return;
}


function __ZNSt3__18ios_base4InitD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(18768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv(18856) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=6;break; }
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(18400) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv(18488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 return;
 case 6: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6944;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6944;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18360);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIwE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=$__s;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,$__n,$9);
 var $_0=$10;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $11=HEAP32[(($4)>>2)];
 var $12=(($11+52)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=HEAP32[(($_012)>>2)];
 var $15=FUNCTION_TABLE[$13]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+4)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIwE8overflowEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 HEAP32[(($__1buf)>>2)]=$__c;
 var $3=(($this+44)|0);
 var $4=HEAP8[($3)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 var $7=$__1buf;
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($7,4,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+4)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=$pbase_0;
 var $34=HEAP32[(($19)>>2)];
 var $35=_fwrite($33,1,1,$34);
 var $36=($35|0)==1;
 if($36){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $38=($27|0)==1;
 var $39=($27>>>0)<2;
 if($39){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $41=HEAP32[(($__extbe)>>2)];
 var $42=$41;
 var $43=((($42)-($18))|0);
 var $44=HEAP32[(($19)>>2)];
 var $45=_fwrite($13,1,$43,$44);
 var $46=($45|0)==($43|0);
 if($46){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $48=HEAP32[(($__e)>>2)];
 var $_pbase_0=($38?$48:$pbase_0);
 if($38){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6944;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6944;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18360);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(504);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIwE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIwE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIwE9pbackfailEj($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[($2)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 HEAP32[(($__ci)>>2)]=$14;
 var $15=(($this+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=(($this+40)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=(($__ci+4)|0);
 var $20=(($__extbuf)|0);
 var $21=(($__extbuf+8)|0);
 var $22=$16;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($23+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=FUNCTION_TABLE[$25]($16,$18,$__ci,$19,$__inxt,$20,$21,$__enxt);
 if(($26|0)==2|($26|0)==1){ var $_01=-1;label=11;break;}else if(($26|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $28=HEAP32[(($12)>>2)];
 var $29=(($28)&255);
 HEAP8[($20)]=$29;
 var $30=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$30;
 label=7;break;
 case 7: 
 var $31=(($this+32)|0);
 label=8;break;
 case 8: 
 var $32=HEAP32[(($__enxt)>>2)];
 var $33=($32>>>0)>($20>>>0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=((($32)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$35;
 var $36=HEAP8[($35)];
 var $37=(($36<<24)>>24);
 var $38=HEAP32[(($31)>>2)];
 var $39=_ungetc($37,$38);
 var $40=($39|0)==-1;
 if($40){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIwE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=22;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$6;label=22;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=22;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+4)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 var $35=(($34<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$35;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $37=HEAP32[(($27)>>2)];
 var $38=$37;
 var $ld$0$0=(($38)|0);
 var $39$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($38+4)|0);
 var $39$1=HEAP32[(($ld$1$1)>>2)];
 var $40=HEAP32[(($28)>>2)];
 var $41=(($__extbuf+$__nread_0)|0);
 var $42=$40;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=FUNCTION_TABLE[$45]($40,$37,$29,$41,$__enxt,$__1buf,$30,$__inxt);
 if(($46|0)==1){ label=12;break;}else if(($46|0)==3){ label=14;break;}else if(($46|0)==2){ var $_0=-1;label=22;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $48=HEAP32[(($27)>>2)];
 var $49=$48;
 var $st$2$0=(($49)|0);
 HEAP32[(($st$2$0)>>2)]=$39$0;
 var $st$3$1=(($49+4)|0);
 HEAP32[(($st$3$1)>>2)]=$39$1;
 var $50=($__nread_0|0)==8;
 if($50){var $_0=-1;label=22;break;}else{label=13;break;}
 case 13: 
 var $52=HEAP32[(($31)>>2)];
 var $53=_fgetc($52);
 var $54=($53|0)==-1;
 if($54){var $_0=-1;label=22;break;}else{label=15;break;}
 case 14: 
 var $56=HEAP8[($29)];
 var $57=(($56<<24)>>24);
 HEAP32[(($__1buf)>>2)]=$57;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $59=(($53)&255);
 HEAP8[($41)]=$59;
 var $60=((($__nread_0)+(1))|0);
 var $__nread_0=$60;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $61=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $63=($__i2_0|0)>0;
 if($63){label=19;break;}else{label=21;break;}
 case 19: 
 var $65=((($__i2_0)-(1))|0);
 var $66=(($__extbuf+$65)|0);
 var $67=HEAP8[($66)];
 var $68=(($67<<24)>>24);
 var $69=HEAP32[(($61)>>2)];
 var $70=_ungetc($68,$69);
 var $71=($70|0)==-1;
 if($71){var $_0=-1;label=22;break;}else{var $__i2_0=$65;label=18;break;}
 case 20: 
 var $73=HEAP32[(($__1buf)>>2)];
 var $74=(($this+48)|0);
 HEAP32[(($74)>>2)]=$73;
 var $_0=$73;label=22;break;
 case 21: 
 var $_pre=HEAP32[(($__1buf)>>2)];
 var $_0=$_pre;label=22;break;
 case 22: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7016;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7016;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;


 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+24)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $6=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18368);
 var $7=$6;
 var $8=(($this+36)|0);
 HEAP32[(($8)>>2)]=$7;
 var $9=$6;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=FUNCTION_TABLE[$12]($7);
 var $14=(($this+44)|0);
 var $15=($13&1);
 HEAP8[($14)]=$15;
 return;
}


function __ZNSt3__111__stdoutbufIcE4syncEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__extbe=(sp)+(8);
 var $1=(($this+36)|0);
 var $2=(($this+40)|0);
 var $3=(($__extbuf)|0);
 var $4=(($__extbuf+8)|0);
 var $5=$__extbuf;
 var $6=(($this+32)|0);
 label=2;break;
 case 2: 
 var $8=HEAP32[(($1)>>2)];
 var $9=HEAP32[(($2)>>2)];
 var $10=$8;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+20)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($8,$9,$3,$4,$__extbe);
 var $15=HEAP32[(($__extbe)>>2)];
 var $16=$15;
 var $17=((($16)-($5))|0);
 var $18=HEAP32[(($6)>>2)];
 var $19=_fwrite($3,1,$17,$18);
 var $20=($19|0)==($17|0);
 if($20){label=3;break;}else{var $_0=-1;label=5;break;}
 case 3: 
 if(($14|0)==1){ label=2;break;}else if(($14|0)==2){ var $_0=-1;label=5;break;}else{label=4;break;}
 case 4: 
 var $23=HEAP32[(($6)>>2)];
 var $24=_fflush($23);
 var $not_=($24|0)!=0;
 var $_=(($not_<<31)>>31);
 var $_0=$_;label=5;break;
 case 5: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+44)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=$this;
 var $5=($__n|0)>0;
 if($5){var $_012=$__s;var $__i_03=0;label=4;break;}else{var $_0=0;label=6;break;}
 case 3: 
 var $7=(($this+32)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=_fwrite($__s,1,$__n,$8);
 var $_0=$9;label=6;break;
 case 4: 
 var $__i_03;
 var $_012;
 var $10=HEAP32[(($4)>>2)];
 var $11=(($10+52)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=HEAP8[($_012)];
 var $14=($13&255);
 var $15=FUNCTION_TABLE[$12]($this,$14);
 var $16=($15|0)==-1;
 if($16){var $_0=$__i_03;label=6;break;}else{label=5;break;}
 case 5: 
 var $18=((($__i_03)+(1))|0);
 var $19=(($_012+1)|0);
 var $20=($18|0)<($__n|0);
 if($20){var $_012=$19;var $__i_03=$18;label=4;break;}else{var $_0=$18;label=6;break;}
 case 6: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__stdoutbufIcE8overflowEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__extbe=(sp)+(16);
 var $__e=(sp)+(24);
 var $1=($__c|0)==-1;
 if($1){label=11;break;}else{label=2;break;}
 case 2: 
 var $3=(($__c)&255);
 HEAP8[($__1buf)]=$3;
 var $4=(($this+44)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($this+32)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=_fwrite($__1buf,1,1,$9);
 var $11=($10|0)==1;
 if($11){label=11;break;}else{var $_0=-1;label=12;break;}
 case 4: 
 var $13=(($__extbuf)|0);
 HEAP32[(($__extbe)>>2)]=$13;
 var $14=(($__1buf+1)|0);
 var $15=(($this+36)|0);
 var $16=(($this+40)|0);
 var $17=(($__extbuf+8)|0);
 var $18=$__extbuf;
 var $19=(($this+32)|0);
 var $pbase_0=$__1buf;label=5;break;
 case 5: 
 var $pbase_0;
 var $21=HEAP32[(($15)>>2)];
 var $22=HEAP32[(($16)>>2)];
 var $23=$21;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($21,$22,$pbase_0,$14,$__e,$13,$17,$__extbe);
 var $28=HEAP32[(($__e)>>2)];
 var $29=($28|0)==($pbase_0|0);
 if($29){var $_0=-1;label=12;break;}else{label=6;break;}
 case 6: 
 var $31=($27|0)==3;
 if($31){label=7;break;}else{label=8;break;}
 case 7: 
 var $33=HEAP32[(($19)>>2)];
 var $34=_fwrite($pbase_0,1,1,$33);
 var $35=($34|0)==1;
 if($35){label=11;break;}else{var $_0=-1;label=12;break;}
 case 8: 
 var $37=($27|0)==1;
 var $38=($27>>>0)<2;
 if($38){label=9;break;}else{var $_0=-1;label=12;break;}
 case 9: 
 var $40=HEAP32[(($__extbe)>>2)];
 var $41=$40;
 var $42=((($41)-($18))|0);
 var $43=HEAP32[(($19)>>2)];
 var $44=_fwrite($13,1,$42,$43);
 var $45=($44|0)==($42|0);
 if($45){label=10;break;}else{var $_0=-1;label=12;break;}
 case 10: 
 var $47=HEAP32[(($__e)>>2)];
 var $_pbase_0=($37?$47:$pbase_0);
 if($37){var $pbase_0=$_pbase_0;label=5;break;}else{label=11;break;}
 case 11: 
 var $___c_i=($1?0:$__c);
 var $_0=$___c_i;label=12;break;
 case 12: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7016;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7016;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE5imbueERKNS_6localeE($this,$__loc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__loc_idx=(($__loc)|0);
 var $__loc_idx_val=HEAP32[(($__loc_idx)>>2)];
 var $1=__ZNKSt3__16locale9use_facetERNS0_2idE($__loc_idx_val,18368);
 var $2=$1;
 var $3=(($this+36)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=$1;
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+24)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=FUNCTION_TABLE[$7]($2);
 var $9=(($this+44)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=HEAP32[(($3)>>2)];
 var $11=$10;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($10);
 var $16=(($this+53)|0);
 var $17=($15&1);
 HEAP8[($16)]=$17;
 var $18=HEAP32[(($9)>>2)];
 var $19=($18|0)>8;
 if($19){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNSt3__121__throw_runtime_errorEPKc(504);
 throw "Reached an unreachable!";
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9underflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,0);
 return $1;
}


function __ZNSt3__110__stdinbufIcE5uflowEv($this){
 var label=0;


 var $1=__ZNSt3__110__stdinbufIcE9__getcharEb($this,1);
 return $1;
}


function __ZNSt3__110__stdinbufIcE9pbackfailEi($this,$__c){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__enxt=(sp)+(8);
 var $__ci=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=($__c|0)==-1;
 var $2=(($this+52)|0);
 var $3=HEAP8[($2)];
 var $4=(($3<<24)>>24)!=0;
 if($1){label=2;break;}else{label=4;break;}
 case 2: 
 if($4){var $_01=-1;label=11;break;}else{label=3;break;}
 case 3: 
 var $7=(($this+48)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)!=-1;
 var $10=($9&1);
 HEAP8[($2)]=$10;
 var $_01=$8;label=11;break;
 case 4: 
 var $12=(($this+48)|0);
 if($4){label=5;break;}else{label=10;break;}
 case 5: 
 var $14=HEAP32[(($12)>>2)];
 var $15=(($14)&255);
 HEAP8[($__ci)]=$15;
 var $16=(($this+36)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+40)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=(($__ci+1)|0);
 var $21=(($__extbuf)|0);
 var $22=(($__extbuf+8)|0);
 var $23=$17;
 var $24=HEAP32[(($23)>>2)];
 var $25=(($24+12)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=FUNCTION_TABLE[$26]($17,$19,$__ci,$20,$__inxt,$21,$22,$__enxt);
 if(($27|0)==2|($27|0)==1){ var $_01=-1;label=11;break;}else if(($27|0)==3){ label=6;break;}else{label=7;break;}
 case 6: 
 var $29=HEAP32[(($12)>>2)];
 var $30=(($29)&255);
 HEAP8[($21)]=$30;
 var $31=(($__extbuf+1)|0);
 HEAP32[(($__enxt)>>2)]=$31;
 label=7;break;
 case 7: 
 var $32=(($this+32)|0);
 label=8;break;
 case 8: 
 var $33=HEAP32[(($__enxt)>>2)];
 var $34=($33>>>0)>($21>>>0);
 if($34){label=9;break;}else{label=10;break;}
 case 9: 
 var $36=((($33)-(1))|0);
 HEAP32[(($__enxt)>>2)]=$36;
 var $37=HEAP8[($36)];
 var $38=(($37<<24)>>24);
 var $39=HEAP32[(($32)>>2)];
 var $40=_ungetc($38,$39);
 var $41=($40|0)==-1;
 if($41){var $_01=-1;label=11;break;}else{label=8;break;}
 case 10: 
 HEAP32[(($12)>>2)]=$__c;
 HEAP8[($2)]=1;
 var $_01=$__c;label=11;break;
 case 11: 
 var $_01;
 STACKTOP=sp;return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__stdinbufIcE9__getcharEb($this,$__consume){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__extbuf=sp;
 var $__1buf=(sp)+(8);
 var $__enxt=(sp)+(16);
 var $__inxt=(sp)+(24);
 var $1=(($this+52)|0);
 var $2=HEAP8[($1)];
 var $3=(($2<<24)>>24)==0;
 if($3){label=4;break;}else{label=2;break;}
 case 2: 
 var $5=(($this+48)|0);
 var $6=HEAP32[(($5)>>2)];
 if($__consume){label=3;break;}else{var $_0=$6;label=23;break;}
 case 3: 
 HEAP32[(($5)>>2)]=-1;
 HEAP8[($1)]=0;
 var $_0=$6;label=23;break;
 case 4: 
 var $9=(($this+44)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>1;
 var $12=($11?$10:1);
 var $13=($12|0)>0;
 if($13){label=5;break;}else{label=8;break;}
 case 5: 
 var $14=(($this+32)|0);
 var $__i_09=0;label=6;break;
 case 6: 
 var $__i_09;
 var $16=HEAP32[(($14)>>2)];
 var $17=_fgetc($16);
 var $18=($17|0)==-1;
 if($18){var $_0=-1;label=23;break;}else{label=7;break;}
 case 7: 
 var $20=(($17)&255);
 var $21=(($__extbuf+$__i_09)|0);
 HEAP8[($21)]=$20;
 var $22=((($__i_09)+(1))|0);
 var $23=($22|0)<($12|0);
 if($23){var $__i_09=$22;label=6;break;}else{label=8;break;}
 case 8: 
 var $24=(($this+53)|0);
 var $25=HEAP8[($24)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=9;break;}else{label=10;break;}
 case 9: 
 var $27=(($this+40)|0);
 var $28=(($this+36)|0);
 var $29=(($__extbuf)|0);
 var $30=(($__1buf+1)|0);
 var $31=(($this+32)|0);
 var $__nread_0=$12;label=11;break;
 case 10: 
 var $33=(($__extbuf)|0);
 var $34=HEAP8[($33)];
 HEAP8[($__1buf)]=$34;
 var $__nread_2=$12;label=16;break;
 case 11: 
 var $__nread_0;
 var $36=HEAP32[(($27)>>2)];
 var $37=$36;
 var $ld$0$0=(($37)|0);
 var $38$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($37+4)|0);
 var $38$1=HEAP32[(($ld$1$1)>>2)];
 var $39=HEAP32[(($28)>>2)];
 var $40=(($__extbuf+$__nread_0)|0);
 var $41=$39;
 var $42=HEAP32[(($41)>>2)];
 var $43=(($42+16)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=FUNCTION_TABLE[$44]($39,$36,$29,$40,$__enxt,$__1buf,$30,$__inxt);
 if(($45|0)==1){ label=12;break;}else if(($45|0)==3){ label=14;break;}else if(($45|0)==2){ var $_0=-1;label=23;break;}else{var $__nread_2=$__nread_0;label=16;break;}
 case 12: 
 var $47=HEAP32[(($27)>>2)];
 var $48=$47;
 var $st$2$0=(($48)|0);
 HEAP32[(($st$2$0)>>2)]=$38$0;
 var $st$3$1=(($48+4)|0);
 HEAP32[(($st$3$1)>>2)]=$38$1;
 var $49=($__nread_0|0)==8;
 if($49){var $_0=-1;label=23;break;}else{label=13;break;}
 case 13: 
 var $51=HEAP32[(($31)>>2)];
 var $52=_fgetc($51);
 var $53=($52|0)==-1;
 if($53){var $_0=-1;label=23;break;}else{label=15;break;}
 case 14: 
 var $55=HEAP8[($29)];
 HEAP8[($__1buf)]=$55;
 var $__nread_2=$__nread_0;label=16;break;
 case 15: 
 var $57=(($52)&255);
 HEAP8[($40)]=$57;
 var $58=((($__nread_0)+(1))|0);
 var $__nread_0=$58;label=11;break;
 case 16: 
 var $__nread_2;
 if($__consume){label=20;break;}else{label=17;break;}
 case 17: 
 var $59=(($this+32)|0);
 var $__i2_0=$__nread_2;label=18;break;
 case 18: 
 var $__i2_0;
 var $61=($__i2_0|0)>0;
 if($61){label=19;break;}else{label=21;break;}
 case 19: 
 var $63=((($__i2_0)-(1))|0);
 var $64=(($__extbuf+$63)|0);
 var $65=HEAP8[($64)];
 var $66=($65&255);
 var $67=HEAP32[(($59)>>2)];
 var $68=_ungetc($66,$67);
 var $69=($68|0)==-1;
 if($69){var $_0=-1;label=23;break;}else{var $__i2_0=$63;label=18;break;}
 case 20: 
 var $71=HEAP8[($__1buf)];
 var $72=($71&255);
 var $73=(($this+48)|0);
 HEAP32[(($73)>>2)]=$72;
 var $75=$71;label=22;break;
 case 21: 
 var $_pre=HEAP8[($__1buf)];
 var $75=$_pre;label=22;break;
 case 22: 
 var $75;
 var $76=($75&255);
 var $_0=$76;label=23;break;
 case 23: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __GLOBAL__I_a715(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[((_stdin)>>2)];
 HEAP32[((18040)>>2)]=7016;
 __ZNSt3__16localeC2Ev(18044);
 HEAP32[((18048)>>2)]=0; HEAP32[((18052)>>2)]=0; HEAP32[((18056)>>2)]=0; HEAP32[((18060)>>2)]=0; HEAP32[((18064)>>2)]=0; HEAP32[((18068)>>2)]=0;
 HEAP32[((18040)>>2)]=7784;
 HEAP32[((18072)>>2)]=$1;
 HEAP32[((18080)>>2)]=18168;
 HEAP32[((18088)>>2)]=-1;
 HEAP8[(18092)]=0;
 var $2=HEAP32[((18044)>>2)];
 var $3=(($2+4)|0);
 var $4=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+1,tempValue);
 var $5=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($2,18368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 
 var $6=$5;
 HEAP32[((18076)>>2)]=$6;
 var $7=$5;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=FUNCTION_TABLE[$10]($6);
 HEAP32[((18084)>>2)]=$11;
 var $12=HEAP32[((18076)>>2)];
 var $13=$12;
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+28)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($12);
 var $18=($17&1);
 HEAP8[(18093)]=$18;
 var $19=HEAP32[((18084)>>2)];
 var $20=($19|0)>8;
 if($20){label=3;break;}else{label=4;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $22=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=11;break;}
 case 5: 
 var $25=(($2)|0);
 var $26=$2;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+8)|0);
 var $29=HEAP32[(($28)>>2)];
 FUNCTION_TABLE[$29]($25);
 label=11;break;
 case 6: 
 var $31$0 = ___cxa_find_matching_catch(-1, -1); var $31$1 = tempRet0;
 var $32=(tempValue=HEAP32[(($3)>>2)],HEAP32[(($3)>>2)]=tempValue+-1,tempValue);
 var $33=($32|0)==0;
 if($33){label=7;break;}else{label=8;break;}
 case 7: 
 var $35=(($2)|0);
 var $36=$2;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+8)|0);
 var $39=HEAP32[(($38)>>2)];
 FUNCTION_TABLE[$39]($35);
 label=8;break;
 case 8: 
 HEAP32[((18040)>>2)]=7016;
 var $40=HEAP32[((18044)>>2)];
 var $41=(($40+4)|0);
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=(($40)|0);
 var $46=$40;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=10;break;
 case 10: 
 ___resumeException($31$0)
 case 11: 
 HEAP32[((19032)>>2)]=7236;
 HEAP32[((19040)>>2)]=7256;
 HEAP32[((19036)>>2)]=0;
 HEAP32[((19064)>>2)]=18040;
 HEAP32[((19056)>>2)]=0;
 HEAP32[((19060)>>2)]=0;
 HEAP32[((19044)>>2)]=4098;
 HEAP32[((19052)>>2)]=0;
 HEAP32[((19048)>>2)]=6;
 _memset(19072, 0, 40)|0;
 __ZNSt3__16localeC2Ev(19068);
 HEAP32[((19112)>>2)]=0;
 HEAP32[((19116)>>2)]=-1;
 var $50=HEAP32[((_stdout)>>2)];
 HEAP32[((17944)>>2)]=7016;
 __ZNSt3__16localeC2Ev(17948);
 HEAP32[((17952)>>2)]=0; HEAP32[((17956)>>2)]=0; HEAP32[((17960)>>2)]=0; HEAP32[((17964)>>2)]=0; HEAP32[((17968)>>2)]=0; HEAP32[((17972)>>2)]=0;
 HEAP32[((17944)>>2)]=7384;
 HEAP32[((17976)>>2)]=$50;
 var $51=HEAP32[((17948)>>2)];
 var $52=(($51+4)|0);
 var $53=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+1,tempValue);
 var $54=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($51,18368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 12: 
 var $56$0 = ___cxa_find_matching_catch(-1, -1); var $56$1 = tempRet0;
 var $57=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $58=($57|0)==0;
 if($58){label=13;break;}else{label=14;break;}
 case 13: 
 var $60=(($51)|0);
 var $61=$51;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+8)|0);
 var $64=HEAP32[(($63)>>2)];
 FUNCTION_TABLE[$64]($60);
 label=14;break;
 case 14: 
 HEAP32[((17944)>>2)]=7016;
 var $65=HEAP32[((17948)>>2)];
 var $66=(($65+4)|0);
 var $67=(tempValue=HEAP32[(($66)>>2)],HEAP32[(($66)>>2)]=tempValue+-1,tempValue);
 var $68=($67|0)==0;
 if($68){label=15;break;}else{label=16;break;}
 case 15: 
 var $70=(($65)|0);
 var $71=$65;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($70);
 label=16;break;
 case 16: 
 ___resumeException($56$0)
 case 17: 
 var $75=$54;
 var $76=(tempValue=HEAP32[(($52)>>2)],HEAP32[(($52)>>2)]=tempValue+-1,tempValue);
 var $77=($76|0)==0;
 if($77){label=18;break;}else{label=19;break;}
 case 18: 
 var $79=(($51)|0);
 var $80=$51;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 FUNCTION_TABLE[$83]($79);
 label=19;break;
 case 19: 
 HEAP32[((17980)>>2)]=$75;
 HEAP32[((17984)>>2)]=18176;
 var $84=$54;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+28)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($75);
 var $89=($88&1);
 HEAP8[(17988)]=$89;
 HEAP32[((18768)>>2)]=7140;
 HEAP32[((18772)>>2)]=7160;
 HEAP32[((18796)>>2)]=17944;
 HEAP32[((18788)>>2)]=0;
 HEAP32[((18792)>>2)]=0;
 HEAP32[((18776)>>2)]=4098;
 HEAP32[((18784)>>2)]=0;
 HEAP32[((18780)>>2)]=6;
 _memset(18804, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18800);
 HEAP32[((18844)>>2)]=0;
 HEAP32[((18848)>>2)]=-1;
 var $90=HEAP32[((_stderr)>>2)];
 HEAP32[((17992)>>2)]=7016;
 __ZNSt3__16localeC2Ev(17996);
 HEAP32[((18000)>>2)]=0; HEAP32[((18004)>>2)]=0; HEAP32[((18008)>>2)]=0; HEAP32[((18012)>>2)]=0; HEAP32[((18016)>>2)]=0; HEAP32[((18020)>>2)]=0;
 HEAP32[((17992)>>2)]=7384;
 HEAP32[((18024)>>2)]=$90;
 var $91=HEAP32[((17996)>>2)];
 var $92=(($91+4)|0);
 var $93=(tempValue=HEAP32[(($92)>>2)],HEAP32[(($92)>>2)]=tempValue+1,tempValue);
 var $94=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($91,18368) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=20;break; }
 case 20: 
 var $96$0 = ___cxa_find_matching_catch(-1, -1); var $96$1 = tempRet0;
 var $97=(tempValue=HEAP32[(($92)>>2)],HEAP32[(($92)>>2)]=tempValue+-1,tempValue);
 var $98=($97|0)==0;
 if($98){label=21;break;}else{label=22;break;}
 case 21: 
 var $100=(($91)|0);
 var $101=$91;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+8)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($100);
 label=22;break;
 case 22: 
 HEAP32[((17992)>>2)]=7016;
 var $105=HEAP32[((17996)>>2)];
 var $106=(($105+4)|0);
 var $107=(tempValue=HEAP32[(($106)>>2)],HEAP32[(($106)>>2)]=tempValue+-1,tempValue);
 var $108=($107|0)==0;
 if($108){label=23;break;}else{label=24;break;}
 case 23: 
 var $110=(($105)|0);
 var $111=$105;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+8)|0);
 var $114=HEAP32[(($113)>>2)];
 FUNCTION_TABLE[$114]($110);
 label=24;break;
 case 24: 
 ___resumeException($96$0)
 case 25: 
 var $115=$94;
 var $116=(tempValue=HEAP32[(($92)>>2)],HEAP32[(($92)>>2)]=tempValue+-1,tempValue);
 var $117=($116|0)==0;
 if($117){label=26;break;}else{label=27;break;}
 case 26: 
 var $119=(($91)|0);
 var $120=$91;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+8)|0);
 var $123=HEAP32[(($122)>>2)];
 FUNCTION_TABLE[$123]($119);
 label=27;break;
 case 27: 
 HEAP32[((18028)>>2)]=$115;
 HEAP32[((18032)>>2)]=18184;
 var $124=$94;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+28)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=FUNCTION_TABLE[$127]($115);
 var $129=($128&1);
 HEAP8[(18036)]=$129;
 HEAP32[((18944)>>2)]=7140;
 HEAP32[((18948)>>2)]=7160;
 HEAP32[((18972)>>2)]=17992;
 HEAP32[((18964)>>2)]=0;
 HEAP32[((18968)>>2)]=0;
 HEAP32[((18952)>>2)]=4098;
 HEAP32[((18960)>>2)]=0;
 HEAP32[((18956)>>2)]=6;
 _memset(18980, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18976);
 HEAP32[((19020)>>2)]=0;
 HEAP32[((19024)>>2)]=-1;
 var $130=HEAP32[((18944)>>2)];
 var $131=((($130)-(12))|0);
 var $132=$131;
 var $133=HEAP32[(($132)>>2)];
 var $_sum_i=((($133)+(24))|0);
 var $134=((18944+$_sum_i)|0);
 var $135=$134;
 var $136=HEAP32[(($135)>>2)];
 HEAP32[((18856)>>2)]=7140;
 HEAP32[((18860)>>2)]=7160;
 HEAP32[((18884)>>2)]=$136;
 var $not__i_i=($136|0)==0;
 var $137=($not__i_i&1);
 HEAP32[((18876)>>2)]=$137;
 HEAP32[((18880)>>2)]=0;
 HEAP32[((18864)>>2)]=4098;
 HEAP32[((18872)>>2)]=0;
 HEAP32[((18868)>>2)]=6;
 _memset(18892, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18888);
 HEAP32[((18932)>>2)]=0;
 HEAP32[((18936)>>2)]=-1;
 var $138=HEAP32[((19032)>>2)];
 var $139=((($138)-(12))|0);
 var $140=$139;
 var $141=HEAP32[(($140)>>2)];
 var $_sum7_i=((($141)+(72))|0);
 var $142=((19032+$_sum7_i)|0);
 var $143=$142;
 HEAP32[(($143)>>2)]=18768;
 var $144=HEAP32[((18944)>>2)];
 var $145=((($144)-(12))|0);
 var $146=$145;
 var $147=HEAP32[(($146)>>2)];
 var $_sum8_i=((($147)+(4))|0);
 var $148=((18944+$_sum8_i)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=$150|8192;
 HEAP32[(($149)>>2)]=$151;
 var $152=HEAP32[((18944)>>2)];
 var $153=((($152)-(12))|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $_sum9_i=((($155)+(72))|0);
 var $156=((18944+$_sum9_i)|0);
 var $157=$156;
 HEAP32[(($157)>>2)]=18768;
 HEAP32[((17888)>>2)]=6944;
 __ZNSt3__16localeC2Ev(17892);
 HEAP32[((17896)>>2)]=0; HEAP32[((17900)>>2)]=0; HEAP32[((17904)>>2)]=0; HEAP32[((17908)>>2)]=0; HEAP32[((17912)>>2)]=0; HEAP32[((17916)>>2)]=0;
 HEAP32[((17888)>>2)]=7712;
 HEAP32[((17920)>>2)]=$1;
 HEAP32[((17928)>>2)]=18192;
 HEAP32[((17936)>>2)]=-1;
 HEAP8[(17940)]=0;
 var $158=HEAP32[((17892)>>2)];
 var $159=(($158+4)|0);
 var $160=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+1,tempValue);
 var $161=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($158,18360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 var $162=$161;
 HEAP32[((17924)>>2)]=$162;
 var $163=$161;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+24)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=FUNCTION_TABLE[$166]($162);
 HEAP32[((17932)>>2)]=$167;
 var $168=HEAP32[((17924)>>2)];
 var $169=$168;
 var $170=HEAP32[(($169)>>2)];
 var $171=(($170+28)|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=FUNCTION_TABLE[$172]($168);
 var $174=($173&1);
 HEAP8[(17941)]=$174;
 var $175=HEAP32[((17932)>>2)];
 var $176=($175|0)>8;
 if($176){label=29;break;}else{label=30;break;}
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 var $178=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $179=($178|0)==0;
 if($179){label=31;break;}else{label=37;break;}
 case 31: 
 var $181=(($158)|0);
 var $182=$158;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+8)|0);
 var $185=HEAP32[(($184)>>2)];
 FUNCTION_TABLE[$185]($181);
 label=37;break;
 case 32: 
 var $187$0 = ___cxa_find_matching_catch(-1, -1); var $187$1 = tempRet0;
 var $188=(tempValue=HEAP32[(($159)>>2)],HEAP32[(($159)>>2)]=tempValue+-1,tempValue);
 var $189=($188|0)==0;
 if($189){label=33;break;}else{label=34;break;}
 case 33: 
 var $191=(($158)|0);
 var $192=$158;
 var $193=HEAP32[(($192)>>2)];
 var $194=(($193+8)|0);
 var $195=HEAP32[(($194)>>2)];
 FUNCTION_TABLE[$195]($191);
 label=34;break;
 case 34: 
 HEAP32[((17888)>>2)]=6944;
 var $196=HEAP32[((17892)>>2)];
 var $197=(($196+4)|0);
 var $198=(tempValue=HEAP32[(($197)>>2)],HEAP32[(($197)>>2)]=tempValue+-1,tempValue);
 var $199=($198|0)==0;
 if($199){label=35;break;}else{label=36;break;}
 case 35: 
 var $201=(($196)|0);
 var $202=$196;
 var $203=HEAP32[(($202)>>2)];
 var $204=(($203+8)|0);
 var $205=HEAP32[(($204)>>2)];
 FUNCTION_TABLE[$205]($201);
 label=36;break;
 case 36: 
 ___resumeException($187$0)
 case 37: 
 HEAP32[((18680)>>2)]=7188;
 HEAP32[((18688)>>2)]=7208;
 HEAP32[((18684)>>2)]=0;
 HEAP32[((18712)>>2)]=17888;
 HEAP32[((18704)>>2)]=0;
 HEAP32[((18708)>>2)]=0;
 HEAP32[((18692)>>2)]=4098;
 HEAP32[((18700)>>2)]=0;
 HEAP32[((18696)>>2)]=6;
 _memset(18720, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18716);
 HEAP32[((18760)>>2)]=0;
 HEAP32[((18764)>>2)]=-1;
 HEAP32[((17792)>>2)]=6944;
 __ZNSt3__16localeC2Ev(17796);
 HEAP32[((17800)>>2)]=0; HEAP32[((17804)>>2)]=0; HEAP32[((17808)>>2)]=0; HEAP32[((17812)>>2)]=0; HEAP32[((17816)>>2)]=0; HEAP32[((17820)>>2)]=0;
 HEAP32[((17792)>>2)]=7312;
 HEAP32[((17824)>>2)]=$50;
 var $206=HEAP32[((17796)>>2)];
 var $207=(($206+4)|0);
 var $208=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+1,tempValue);
 var $209=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($206,18360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=38;break; }
 case 38: 
 var $211$0 = ___cxa_find_matching_catch(-1, -1); var $211$1 = tempRet0;
 var $212=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+-1,tempValue);
 var $213=($212|0)==0;
 if($213){label=39;break;}else{label=40;break;}
 case 39: 
 var $215=(($206)|0);
 var $216=$206;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+8)|0);
 var $219=HEAP32[(($218)>>2)];
 FUNCTION_TABLE[$219]($215);
 label=40;break;
 case 40: 
 HEAP32[((17792)>>2)]=6944;
 var $220=HEAP32[((17796)>>2)];
 var $221=(($220+4)|0);
 var $222=(tempValue=HEAP32[(($221)>>2)],HEAP32[(($221)>>2)]=tempValue+-1,tempValue);
 var $223=($222|0)==0;
 if($223){label=41;break;}else{label=42;break;}
 case 41: 
 var $225=(($220)|0);
 var $226=$220;
 var $227=HEAP32[(($226)>>2)];
 var $228=(($227+8)|0);
 var $229=HEAP32[(($228)>>2)];
 FUNCTION_TABLE[$229]($225);
 label=42;break;
 case 42: 
 ___resumeException($211$0)
 case 43: 
 var $230=$209;
 var $231=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+-1,tempValue);
 var $232=($231|0)==0;
 if($232){label=44;break;}else{label=45;break;}
 case 44: 
 var $234=(($206)|0);
 var $235=$206;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+8)|0);
 var $238=HEAP32[(($237)>>2)];
 FUNCTION_TABLE[$238]($234);
 label=45;break;
 case 45: 
 HEAP32[((17828)>>2)]=$230;
 HEAP32[((17832)>>2)]=18200;
 var $239=$209;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+28)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=FUNCTION_TABLE[$242]($230);
 var $244=($243&1);
 HEAP8[(17836)]=$244;
 HEAP32[((18400)>>2)]=7092;
 HEAP32[((18404)>>2)]=7112;
 HEAP32[((18428)>>2)]=17792;
 HEAP32[((18420)>>2)]=0;
 HEAP32[((18424)>>2)]=0;
 HEAP32[((18408)>>2)]=4098;
 HEAP32[((18416)>>2)]=0;
 HEAP32[((18412)>>2)]=6;
 _memset(18436, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18432);
 HEAP32[((18476)>>2)]=0;
 HEAP32[((18480)>>2)]=-1;
 HEAP32[((17840)>>2)]=6944;
 __ZNSt3__16localeC2Ev(17844);
 HEAP32[((17848)>>2)]=0; HEAP32[((17852)>>2)]=0; HEAP32[((17856)>>2)]=0; HEAP32[((17860)>>2)]=0; HEAP32[((17864)>>2)]=0; HEAP32[((17868)>>2)]=0;
 HEAP32[((17840)>>2)]=7312;
 HEAP32[((17872)>>2)]=$90;
 var $245=HEAP32[((17844)>>2)];
 var $246=(($245+4)|0);
 var $247=(tempValue=HEAP32[(($246)>>2)],HEAP32[(($246)>>2)]=tempValue+1,tempValue);
 var $248=(function() { try { __THREW__ = 0; return __ZNKSt3__16locale9use_facetERNS0_2idE($245,18360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=46;break; }
 case 46: 
 var $250$0 = ___cxa_find_matching_catch(-1, -1); var $250$1 = tempRet0;
 var $251=(tempValue=HEAP32[(($246)>>2)],HEAP32[(($246)>>2)]=tempValue+-1,tempValue);
 var $252=($251|0)==0;
 if($252){label=47;break;}else{label=48;break;}
 case 47: 
 var $254=(($245)|0);
 var $255=$245;
 var $256=HEAP32[(($255)>>2)];
 var $257=(($256+8)|0);
 var $258=HEAP32[(($257)>>2)];
 FUNCTION_TABLE[$258]($254);
 label=48;break;
 case 48: 
 HEAP32[((17840)>>2)]=6944;
 var $259=HEAP32[((17844)>>2)];
 var $260=(($259+4)|0);
 var $261=(tempValue=HEAP32[(($260)>>2)],HEAP32[(($260)>>2)]=tempValue+-1,tempValue);
 var $262=($261|0)==0;
 if($262){label=49;break;}else{label=50;break;}
 case 49: 
 var $264=(($259)|0);
 var $265=$259;
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+8)|0);
 var $268=HEAP32[(($267)>>2)];
 FUNCTION_TABLE[$268]($264);
 label=50;break;
 case 50: 
 ___resumeException($250$0)
 case 51: 
 var $269=$248;
 var $270=(tempValue=HEAP32[(($246)>>2)],HEAP32[(($246)>>2)]=tempValue+-1,tempValue);
 var $271=($270|0)==0;
 if($271){label=52;break;}else{label=53;break;}
 case 52: 
 var $273=(($245)|0);
 var $274=$245;
 var $275=HEAP32[(($274)>>2)];
 var $276=(($275+8)|0);
 var $277=HEAP32[(($276)>>2)];
 FUNCTION_TABLE[$277]($273);
 label=53;break;
 case 53: 
 HEAP32[((17876)>>2)]=$269;
 HEAP32[((17880)>>2)]=18208;
 var $278=$248;
 var $279=HEAP32[(($278)>>2)];
 var $280=(($279+28)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=FUNCTION_TABLE[$281]($269);
 var $283=($282&1);
 HEAP8[(17884)]=$283;
 HEAP32[((18576)>>2)]=7092;
 HEAP32[((18580)>>2)]=7112;
 HEAP32[((18604)>>2)]=17840;
 HEAP32[((18596)>>2)]=0;
 HEAP32[((18600)>>2)]=0;
 HEAP32[((18584)>>2)]=4098;
 HEAP32[((18592)>>2)]=0;
 HEAP32[((18588)>>2)]=6;
 _memset(18612, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18608);
 HEAP32[((18652)>>2)]=0;
 HEAP32[((18656)>>2)]=-1;
 var $284=HEAP32[((18576)>>2)];
 var $285=((($284)-(12))|0);
 var $286=$285;
 var $287=HEAP32[(($286)>>2)];
 var $_sum10_i=((($287)+(24))|0);
 var $288=((18576+$_sum10_i)|0);
 var $289=$288;
 var $290=HEAP32[(($289)>>2)];
 HEAP32[((18488)>>2)]=7092;
 HEAP32[((18492)>>2)]=7112;
 HEAP32[((18516)>>2)]=$290;
 var $not__i15_i=($290|0)==0;
 var $291=($not__i15_i&1);
 HEAP32[((18508)>>2)]=$291;
 HEAP32[((18512)>>2)]=0;
 HEAP32[((18496)>>2)]=4098;
 HEAP32[((18504)>>2)]=0;
 HEAP32[((18500)>>2)]=6;
 _memset(18524, 0, 40)|0;
 __ZNSt3__16localeC2Ev(18520);
 HEAP32[((18564)>>2)]=0;
 HEAP32[((18568)>>2)]=-1;
 var $292=HEAP32[((18680)>>2)];
 var $293=((($292)-(12))|0);
 var $294=$293;
 var $295=HEAP32[(($294)>>2)];
 var $_sum11_i=((($295)+(72))|0);
 var $296=((18680+$_sum11_i)|0);
 var $297=$296;
 HEAP32[(($297)>>2)]=18400;
 var $298=HEAP32[((18576)>>2)];
 var $299=((($298)-(12))|0);
 var $300=$299;
 var $301=HEAP32[(($300)>>2)];
 var $_sum12_i=((($301)+(4))|0);
 var $302=((18576+$_sum12_i)|0);
 var $303=$302;
 var $304=HEAP32[(($303)>>2)];
 var $305=$304|8192;
 HEAP32[(($303)>>2)]=$305;
 var $306=HEAP32[((18576)>>2)];
 var $307=((($306)-(12))|0);
 var $308=$307;
 var $309=HEAP32[(($308)>>2)];
 var $_sum13_i=((($309)+(72))|0);
 var $310=((18576+$_sum13_i)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=18400;
 var $312=_atexit((474),19120,___dso_handle);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5320;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);

 label=4;break;
 case 3: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 var $11=(($this)|0);

 label=4;break;
 case 4: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt11logic_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5320;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt11logic_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt13runtime_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5256;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);

 label=4;break;
 case 3: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 var $11=(($this)|0);

 label=4;break;
 case 4: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt13runtime_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5256;
 var $2=(($this+4)|0);
 var $this_idx_val_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt13runtime_error4whatEv($this){
 var label=0;


 var $1=(($this+4)|0);
 var $_idx_val=HEAP32[(($1)>>2)];
 return $_idx_val;
}


function __ZNSt12length_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5320;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this)|0);

 label=4;break;
 case 3: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 var $11=(($this)|0);

 label=4;break;
 case 4: 
 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category23default_error_conditionEi($agg_result,$this,$ev){
 var label=0;


 var $1=(($agg_result)|0);
 HEAP32[(($1)>>2)]=$ev;
 var $2=(($agg_result+4)|0);
 HEAP32[(($2)>>2)]=$this;
 return;
}


function __ZNKSt3__114error_category10equivalentEiRKNS_15error_conditionE($this,$code,$condition){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+12)|0);
 var $5=HEAP32[(($4)>>2)];
 FUNCTION_TABLE[$5]($1,$this,$code);
 var $6=(($1+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($condition+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($7|0)==($9|0);
 if($10){label=2;break;}else{var $17=0;label=3;break;}
 case 2: 
 var $12=(($1)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($condition)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($13|0)==($15|0);
 var $17=$16;label=3;break;
 case 3: 
 var $17;
 STACKTOP=sp;return $17;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__114error_category10equivalentERKNS_10error_codeEi($this,$code,$condition){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($code+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{var $9=0;label=3;break;}
 case 2: 
 var $5=(($code)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($condition|0);
 var $9=$7;label=3;break;
 case 3: 
 var $9;
 return $9;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5256;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112system_errorD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5256;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__call_onceERVmPvPFvS2_E($flag,$arg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1;
 var $2=HEAP32[(($flag)>>2)];
 var $3=($2|0)==1;
 if($3){label=2;break;}else{label=3;break;}
 case 2: 
 var $4=_pthread_cond_wait(18120,18096);
 var $5=HEAP32[(($flag)>>2)];
 var $6=($5|0)==1;
 if($6){label=2;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP32[(($flag)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=17;break;}
 case 4: 
 HEAP32[(($flag)>>2)]=1;
 var $10=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(18096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=12;break; }
 case 5: 
 var $_idx_i=$arg;
 var $_idx_val_i=HEAP32[(($_idx_i)>>2)];
 var $_idx1_i=(($arg+4)|0);
 var $12=$_idx1_i;
 var $ld$0$0=(($12)|0);
 var $_idx1_val_i$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($12+4)|0);
 var $_idx1_val_i$1=HEAP32[(($ld$1$1)>>2)];
 var $13=$_idx1_val_i$1;
 var $14=$_idx_val_i;
 var $15=(($14+$13)|0);
 var $16=$15;
 var $17=$_idx1_val_i$0;
 var $18=$17&1;
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=6;break;}
 case 6: 
 var $21=$15;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($17)-(1))|0);
 var $24=(($22+$23)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=8;break;
 case 7: 
 var $28=$17;
 var $29=$28;label=8;break;
 case 8: 
 var $29;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 var $30=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(18096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=12;break; }
 case 10: 
 HEAP32[(($flag)>>2)]=-1;
 var $32=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(18096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=12;break; }
 case 11: 
 var $34=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(18120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=12;break; }
 case 12: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 var $38=___cxa_begin_catch($37);
 var $39=(function() { try { __THREW__ = 0; return _pthread_mutex_lock(18096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=16;break; }
 case 13: 
 HEAP32[(($flag)>>2)]=0;
 var $41=(function() { try { __THREW__ = 0; return _pthread_mutex_unlock(18096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=16;break; }
 case 14: 
 var $43=(function() { try { __THREW__ = 0; return _pthread_cond_broadcast(18120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 16: 
 var $46$0 = ___cxa_find_matching_catch(-1, -1); var $46$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=20;break; }
 case 17: 
 var $48;
 label=18;break;
 case 18: 
 return;
 case 19: 
 ___resumeException($46$0)
 case 20: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1,0); var $52$1 = tempRet0;
 var $53=$52$0;
 ___clang_call_terminate($53);
 throw "Reached an unreachable!";
 case 21: 
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 HEAP32[(($2)>>2)]=5320;
 label=2;break;
 case 2: 
 var $4=_malloc(25);
 var $5=($4|0)==0;
 if($5){label=3;break;}else{label=17;break;}
 case 3: 
 var $7=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $8=($7|0)==0;
 if($8){label=10;break;}else{label=4;break;}
 case 4: 
 var $10=$7;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $12=$lpad_phi_i$1;
 var $13=($12|0)<0;
 if($13){label=8;break;}else{var $eh_lpad_body2$1=$lpad_phi_i$1;var $eh_lpad_body2$0=$lpad_phi_i$0;label=13;break;}
 case 8: 
 var $15=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $17=___cxa_allocate_exception(4);
 var $18=$17;
 HEAP32[(($18)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($17,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 var $eh_lpad_body2$1=$21$1;var $eh_lpad_body2$0=$21$0;label=13;break;
 case 13: 
 var $eh_lpad_body2$0;
 var $eh_lpad_body2$1;
 var $22=$eh_lpad_body2$1;
 var $23=($22|0)<0;
 if($23){label=14;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body2$1;var $eh_lpad_body_i$0=$eh_lpad_body2$0;label=18;break;}
 case 14: 
 var $25=$eh_lpad_body2$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body_i$1=$27$1;var $eh_lpad_body_i$0=$27$0;label=18;break;
 case 17: 
 var $29=(($1+4)|0);
 var $30=$29;
 var $31=$4;
 var $32=(($4+4)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=12;
 HEAP32[(($31)>>2)]=12;
 var $34=(($4+12)|0);
 HEAP32[(($30)>>2)]=$34;
 var $35=(($4+8)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=0;
 assert(13 % 1 === 0);(_memcpy($34, 848, 13)|0);
 HEAP32[(($2)>>2)]=5288;
 ___cxa_throw($1,11752,(330));
 throw "Reached an unreachable!";
 case 18: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $37=$1;

 ___cxa_free_exception($1);
 ___resumeException($eh_lpad_body_i$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($this,$__s,$__sz){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__sz>>>0)>4294967279;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $4=($__sz>>>0)<11;
 if($4){label=4;break;}else{label=5;break;}
 case 4: 
 var $6=$__sz<<1;
 var $7=(($6)&255);
 var $8=$this;
 HEAP8[($8)]=$7;
 var $9=$this;
 var $10=(($9+1)|0);
 var $__p_0=$10;label=17;break;
 case 5: 
 var $11=((($__sz)+(16))|0);
 var $12=$11&-16;
 var $13=($12|0)==0;
 var $_size_i=($13?1:$12);
 label=6;break;
 case 6: 
 var $15=_malloc($_size_i);
 var $16=($15|0)==0;
 if($16){label=7;break;}else{label=16;break;}
 case 7: 
 var $18=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $19=($18|0)==0;
 if($19){label=13;break;}else{label=8;break;}
 case 8: 
 var $21=$18;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$21]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $23=$lpad_phi_i$1;
 var $24=($23|0)<0;
 if($24){label=12;break;}else{label=14;break;}
 case 12: 
 var $26=$lpad_phi_i$0;
 ___cxa_call_unexpected($26);
 throw "Reached an unreachable!";
 case 13: 
 var $28=___cxa_allocate_exception(4);
 var $29=$28;
 HEAP32[(($29)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($28,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $32=(($this+8)|0);
 HEAP32[(($32)>>2)]=$15;
 var $33=$12|1;
 var $34=(($this)|0);
 HEAP32[(($34)>>2)]=$33;
 var $35=(($this+4)|0);
 HEAP32[(($35)>>2)]=$__sz;
 var $__p_0=$15;label=17;break;
 case 17: 
 var $__p_0;
 assert($__sz % 1 === 0);(_memcpy($__p_0, $__s, $__sz)|0);
 var $37=(($__p_0+$__sz)|0);
 HEAP8[($37)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 _free($7);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEaSERKS5_($this,$__str){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==($__str|0);
 if($1){label=18;break;}else{label=2;break;}
 case 2: 
 var $3=$__str;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__str+8)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($__str+4)|0);
 var $11=HEAP32[(($10)>>2)];
 var $18=$11;var $17=$9;label=5;break;
 case 4: 
 var $13=$__str;
 var $14=(($13+1)|0);
 var $15=($4&255);
 var $16=$15>>>1;
 var $18=$16;var $17=$14;label=5;break;
 case 5: 
 var $17;
 var $18;
 var $19=$this;
 var $20=HEAP8[($19)];
 var $21=$20&1;
 var $22=(($21<<24)>>24)==0;
 if($22){var $29=10;var $28=$20;label=7;break;}else{label=6;break;}
 case 6: 
 var $24=(($this)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=$25&-2;
 var $phitmp_i_i_i=((($26)-(1))|0);
 var $27=(($25)&255);
 var $29=$phitmp_i_i_i;var $28=$27;label=7;break;
 case 7: 
 var $28;
 var $29;
 var $30=($29>>>0)<($18>>>0);
 var $31=$28&1;
 var $32=(($31<<24)>>24)==0;
 if($30){label=14;break;}else{label=8;break;}
 case 8: 
 if($32){label=10;break;}else{label=9;break;}
 case 9: 
 var $35=(($this+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $40=$36;label=11;break;
 case 10: 
 var $38=$this;
 var $39=(($38+1)|0);
 var $40=$39;label=11;break;
 case 11: 
 var $40;
 _memmove($40,$17,$18,1,0);
 var $41=(($40+$18)|0);
 HEAP8[($41)]=0;
 var $42=HEAP8[($19)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=13;break;}else{label=12;break;}
 case 12: 
 var $46=(($this+4)|0);
 HEAP32[(($46)>>2)]=$18;
 label=18;break;
 case 13: 
 var $48=$18<<1;
 var $49=(($48)&255);
 HEAP8[($19)]=$49;
 label=18;break;
 case 14: 
 if($32){label=16;break;}else{label=15;break;}
 case 15: 
 var $52=(($this+4)|0);
 var $53=HEAP32[(($52)>>2)];
 var $57=$53;label=17;break;
 case 16: 
 var $55=($28&255);
 var $56=$55>>>1;
 var $57=$56;label=17;break;
 case 17: 
 var $57;
 var $58=((($18)-($29))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$29,$58,$57,0,$57,$18,$17);
 label=18;break;
 case 18: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=_strlen($__s);
 var $2=$this;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){var $12=10;var $11=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($this)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8&-2;
 var $phitmp_i_i=((($9)-(1))|0);
 var $10=(($8)&255);
 var $12=$phitmp_i_i;var $11=$10;label=3;break;
 case 3: 
 var $11;
 var $12;
 var $13=($12>>>0)<($1>>>0);
 var $14=$11&1;
 var $15=(($14<<24)>>24)==0;
 if($13){label=10;break;}else{label=4;break;}
 case 4: 
 if($15){label=6;break;}else{label=5;break;}
 case 5: 
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $23=$19;label=7;break;
 case 6: 
 var $21=$this;
 var $22=(($21+1)|0);
 var $23=$22;label=7;break;
 case 7: 
 var $23;
 _memmove($23,$__s,$1,1,0);
 var $24=(($23+$1)|0);
 HEAP8[($24)]=0;
 var $25=HEAP8[($2)];
 var $26=$25&1;
 var $27=(($26<<24)>>24)==0;
 if($27){label=9;break;}else{label=8;break;}
 case 8: 
 var $29=(($this+4)|0);
 HEAP32[(($29)>>2)]=$1;
 label=14;break;
 case 9: 
 var $31=$1<<1;
 var $32=(($31)&255);
 HEAP8[($2)]=$32;
 label=14;break;
 case 10: 
 if($15){label=12;break;}else{label=11;break;}
 case 11: 
 var $35=(($this+4)|0);
 var $36=HEAP32[(($35)>>2)];
 var $40=$36;label=13;break;
 case 12: 
 var $38=($11&255);
 var $39=$38>>>1;
 var $40=$39;label=13;break;
 case 13: 
 var $40;
 var $41=((($1)-($12))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$12,$41,$40,0,$40,$1,$__s);
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($this,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11>>>0)<($__n>>>0);
 if($12){label=5;break;}else{label=20;break;}
 case 5: 
 var $14=((($__n)-($11))|0);
 var $15=($11|0)==($__n|0);
 if($15){label=23;break;}else{label=6;break;}
 case 6: 
 if($4){var $23=10;var $22=$2;label=8;break;}else{label=7;break;}
 case 7: 
 var $18=(($this)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19&-2;
 var $phitmp_i_i=((($20)-(1))|0);
 var $21=(($19)&255);
 var $23=$phitmp_i_i;var $22=$21;label=8;break;
 case 8: 
 var $22;
 var $23;
 var $24=$22&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=(($this+4)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=11;break;
 case 10: 
 var $30=($22&255);
 var $31=$30>>>1;
 var $32=$31;label=11;break;
 case 11: 
 var $32;
 var $33=((($23)-($32))|0);
 var $34=($33>>>0)<($14>>>0);
 if($34){label=12;break;}else{var $39=$22;label=13;break;}
 case 12: 
 var $36=((($14)-($23))|0);
 var $37=((($36)+($32))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$23,$37,$32,$32,0);
 var $_pre_i=HEAP8[($1)];
 var $39=$_pre_i;label=13;break;
 case 13: 
 var $39;
 var $40=$39&1;
 var $41=(($40<<24)>>24)==0;
 if($41){label=15;break;}else{label=14;break;}
 case 14: 
 var $43=(($this+8)|0);
 var $44=HEAP32[(($43)>>2)];
 var $48=$44;label=16;break;
 case 15: 
 var $46=$this;
 var $47=(($46+1)|0);
 var $48=$47;label=16;break;
 case 16: 
 var $48;
 var $49=(($48+$32)|0);
 _memset($49, 0, $14)|0;
 var $50=((($32)+($14))|0);
 var $51=HEAP8[($1)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=18;break;}else{label=17;break;}
 case 17: 
 var $55=(($this+4)|0);
 HEAP32[(($55)>>2)]=$50;
 label=19;break;
 case 18: 
 var $57=$50<<1;
 var $58=(($57)&255);
 HEAP8[($1)]=$58;
 label=19;break;
 case 19: 
 var $59=(($48+$50)|0);
 HEAP8[($59)]=0;
 label=23;break;
 case 20: 
 if($4){label=22;break;}else{label=21;break;}
 case 21: 
 var $62=(($this+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+$__n)|0);
 HEAP8[($64)]=0;
 var $65=(($this+4)|0);
 HEAP32[(($65)>>2)]=$__n;
 label=23;break;
 case 22: 
 var $67=$this;
 var $68=(($67+1+$__n)|0);
 HEAP8[($68)]=0;
 var $69=$__n<<1;
 var $70=(($69)&255);
 HEAP8[($1)]=$70;
 label=23;break;
 case 23: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=($20>>>0)<11;
 if($21){var $25=10;label=8;break;}else{label=7;break;}
 case 7: 
 var $23=((($20)+(16))|0);
 var $24=$23&-16;
 var $phitmp_i2=((($24)-(1))|0);
 var $25=$phitmp_i2;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)==($11|0);
 if($26){label=44;break;}else{label=9;break;}
 case 9: 
 var $28=($25|0)==10;
 if($28){label=35;break;}else{label=10;break;}
 case 10: 
 var $30=($25>>>0)>($11>>>0);
 var $31=((($25)+(1))|0);
 var $32=($31|0)==0;
 var $_size_i=($32?1:$31);
 if($30){label=11;break;}else{label=21;break;}
 case 11: 
 var $34=_malloc($_size_i);
 var $35=($34|0)==0;
 if($35){label=12;break;}else{var $__new_data_0=$34;label=33;break;}
 case 12: 
 var $37=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $38=($37|0)==0;
 if($38){label=18;break;}else{label=13;break;}
 case 13: 
 var $40=$37;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$40]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 14: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=16;break;
 case 16: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $42=$lpad_phi_i$1;
 var $43=($42|0)<0;
 if($43){label=17;break;}else{label=19;break;}
 case 17: 
 var $45=$lpad_phi_i$0;
 ___cxa_call_unexpected($45);
 throw "Reached an unreachable!";
 case 18: 
 var $47=___cxa_allocate_exception(4);
 var $48=$47;
 HEAP32[(($48)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($47,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 19: 
 ___resumeException($lpad_phi_i$0)
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $52=_malloc($_size_i);
 var $53=($52|0)==0;
 if($53){label=22;break;}else{var $__new_data_0=$52;label=33;break;}
 case 22: 
 var $55=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $56=($55|0)==0;
 if($56){label=29;break;}else{label=23;break;}
 case 23: 
 var $58=$55;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=24;break; }
 case 24: 
 var $lpad_loopexit_i2$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit_i2$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_loopexit_i2$1;var $lpad_phi_i6$0=$lpad_loopexit_i2$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit_i4$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit_i4$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_nonloopexit_i4$1;var $lpad_phi_i6$0=$lpad_nonloopexit_i4$0;label=26;break;
 case 26: 
 var $lpad_phi_i6$0;
 var $lpad_phi_i6$1;
 var $60=$lpad_phi_i6$1;
 var $61=($60|0)<0;
 if($61){label=27;break;}else{var $eh_lpad_body$1=$lpad_phi_i6$1;var $eh_lpad_body$0=$lpad_phi_i6$0;label=32;break;}
 case 27: 
 var $63=$lpad_phi_i6$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($63) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 throw "Reached an unreachable!";
 case 29: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=25;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $69$0 = ___cxa_find_matching_catch(-1, -1,0); var $69$1 = tempRet0;
 var $eh_lpad_body$1=$69$1;var $eh_lpad_body$0=$69$0;label=32;break;
 case 32: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $70=$eh_lpad_body$0;
 var $71=___cxa_begin_catch($70);
 ___cxa_end_catch();
 label=44;break;
 case 33: 
 var $__new_data_0;
 if($13){label=38;break;}else{label=34;break;}
 case 34: 
 var $72=(($this+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $__now_long_0_off018=1;var $__was_long_0_off019=1;var $__p_020=$73;var $__new_data_121=$__new_data_0;label=37;break;
 case 35: 
 var $74=$this;
 var $75=(($74+1)|0);
 var $76=(($this+8)|0);
 var $77=HEAP32[(($76)>>2)];
 if($13){label=36;break;}else{var $__now_long_0_off018=0;var $__was_long_0_off019=1;var $__p_020=$77;var $__new_data_121=$75;label=37;break;}
 case 36: 
 var $78=($10&255);
 var $79=$78>>>1;
 var $80=((($79)+(1))|0);
 assert($80 % 1 === 0);(_memcpy($75, $77, $80)|0);
 var $__new_data_11523=$75;var $__p_01324=$77;var $__now_long_0_off0926=0;label=39;break;
 case 37: 
 var $__new_data_121;
 var $__p_020;
 var $__was_long_0_off019;
 var $__now_long_0_off018;
 var $81=(($this+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=((($82)+(1))|0);
 assert($83 % 1 === 0);(_memcpy($__new_data_121, $__p_020, $83)|0);
 var $__new_data_11523=$__new_data_121;var $__p_01324=$__p_020;var $__now_long_0_off0926=$__now_long_0_off018;label=39;break;
 case 38: 
 var $84=$this;
 var $85=(($84+1)|0);
 var $86=($10&255);
 var $87=$86>>>1;
 var $88=((($87)+(1))|0);
 assert($88 % 1 === 0);(_memcpy($__new_data_0, $85, $88)|0);
 var $__new_data_1152228=$__new_data_0;label=42;break;
 case 39: 
 var $__now_long_0_off0926;
 var $__p_01324;
 var $__new_data_11523;
 var $90=($__p_01324|0)==0;
 if($90){label=41;break;}else{label=40;break;}
 case 40: 
 _free($__p_01324);
 if($__now_long_0_off0926){var $__new_data_1152228=$__new_data_11523;label=42;break;}else{label=43;break;}
 case 41: 
 if($__now_long_0_off0926){var $__new_data_1152228=$__new_data_11523;label=42;break;}else{label=43;break;}
 case 42: 
 var $__new_data_1152228;
 var $93=((($25)+(1))|0);
 var $94=$93|1;
 var $95=(($this)|0);
 HEAP32[(($95)>>2)]=$94;
 var $96=(($this+4)|0);
 HEAP32[(($96)>>2)]=$20;
 var $97=(($this+8)|0);
 HEAP32[(($97)>>2)]=$__new_data_1152228;
 label=44;break;
 case 43: 
 var $99=$20<<1;
 var $100=(($99)&255);
 HEAP8[($1)]=$100;
 label=44;break;
 case 44: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=10;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=((($11)-($20))|0);
 var $22=($21>>>0)<($__n>>>0);
 if($22){label=15;break;}else{label=7;break;}
 case 7: 
 var $24=($__n|0)==0;
 if($24){label=16;break;}else{label=8;break;}
 case 8: 
 if($13){label=10;break;}else{label=9;break;}
 case 9: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $32=$28;label=11;break;
 case 10: 
 var $30=$this;
 var $31=(($30+1)|0);
 var $32=$31;label=11;break;
 case 11: 
 var $32;
 var $33=(($32+$20)|0);
 assert($__n % 1 === 0);(_memcpy($33, $__s, $__n)|0);
 var $34=((($20)+($__n))|0);
 var $35=HEAP8[($1)];
 var $36=$35&1;
 var $37=(($36<<24)>>24)==0;
 if($37){label=13;break;}else{label=12;break;}
 case 12: 
 var $39=(($this+4)|0);
 HEAP32[(($39)>>2)]=$34;
 label=14;break;
 case 13: 
 var $41=$34<<1;
 var $42=(($41)&255);
 HEAP8[($1)]=$42;
 label=14;break;
 case 14: 
 var $43=(($32+$34)|0);
 HEAP8[($43)]=0;
 label=16;break;
 case 15: 
 var $45=((($__n)-($11))|0);
 var $46=((($45)+($20))|0);
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$11,$46,$20,$20,0,$__n,$__s);
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE21__grow_by_and_replaceEjjjjjjPKc($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add,$__p_new_stuff){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-18)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=($26|0)==0;
 var $_size_i=($27?1:$26);
 label=10;break;
 case 10: 
 var $29=_malloc($_size_i);
 var $30=($29|0)==0;
 if($30){label=11;break;}else{label=20;break;}
 case 11: 
 var $32=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $33=($32|0)==0;
 if($33){label=17;break;}else{label=12;break;}
 case 12: 
 var $35=$32;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $37=$lpad_phi_i$1;
 var $38=($37|0)<0;
 if($38){label=16;break;}else{label=18;break;}
 case 16: 
 var $40=$lpad_phi_i$0;
 ___cxa_call_unexpected($40);
 throw "Reached an unreachable!";
 case 17: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 HEAP32[(($43)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($42,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $46=($__n_copy|0)==0;
 if($46){label=22;break;}else{label=21;break;}
 case 21: 
 assert($__n_copy % 1 === 0);(_memcpy($29, $15, $__n_copy)|0);
 label=22;break;
 case 22: 
 var $49=($__n_add|0)==0;
 if($49){label=24;break;}else{label=23;break;}
 case 23: 
 var $51=(($29+$__n_copy)|0);
 assert($__n_add % 1 === 0);(_memcpy($51, $__p_new_stuff, $__n_add)|0);
 label=24;break;
 case 24: 
 var $53=((($__old_sz)-($__n_del))|0);
 var $54=($53|0)==($__n_copy|0);
 if($54){label=26;break;}else{label=25;break;}
 case 25: 
 var $56=((($53)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $57=(($29+$_sum)|0);
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $58=(($15+$_sum1)|0);
 assert($56 % 1 === 0);(_memcpy($57, $58, $56)|0);
 label=26;break;
 case 26: 
 var $60=($__old_cap|0)==10;
 var $61=($15|0)==0;
 var $or_cond=$60|$61;
 if($or_cond){label=28;break;}else{label=27;break;}
 case 27: 
 _free($15);
 label=28;break;
 case 28: 
 var $63=(($this+8)|0);
 HEAP32[(($63)>>2)]=$29;
 var $64=$26|1;
 var $65=(($this)|0);
 HEAP32[(($65)>>2)]=$64;
 var $66=((($53)+($__n_add))|0);
 var $67=(($this+4)|0);
 HEAP32[(($67)>>2)]=$66;
 var $68=(($29+$66)|0);
 HEAP8[($68)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((-17)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $15=$11;label=6;break;
 case 5: 
 var $13=$this;
 var $14=(($13+1)|0);
 var $15=$14;label=6;break;
 case 6: 
 var $15;
 var $16=($__old_cap>>>0)<2147483623;
 if($16){label=7;break;}else{var $26=-17;label=9;break;}
 case 7: 
 var $18=((($__delta_cap)+($__old_cap))|0);
 var $19=$__old_cap<<1;
 var $20=($18>>>0)<($19>>>0);
 var $21=($20?$19:$18);
 var $22=($21>>>0)<11;
 if($22){var $26=11;label=9;break;}else{label=8;break;}
 case 8: 
 var $24=((($21)+(16))|0);
 var $25=$24&-16;
 var $26=$25;label=9;break;
 case 9: 
 var $26;
 var $27=($26|0)==0;
 var $_size_i=($27?1:$26);
 label=10;break;
 case 10: 
 var $29=_malloc($_size_i);
 var $30=($29|0)==0;
 if($30){label=11;break;}else{label=20;break;}
 case 11: 
 var $32=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $33=($32|0)==0;
 if($33){label=17;break;}else{label=12;break;}
 case 12: 
 var $35=$32;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $37=$lpad_phi_i$1;
 var $38=($37|0)<0;
 if($38){label=16;break;}else{label=18;break;}
 case 16: 
 var $40=$lpad_phi_i$0;
 ___cxa_call_unexpected($40);
 throw "Reached an unreachable!";
 case 17: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 HEAP32[(($43)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($42,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $46=($__n_copy|0)==0;
 if($46){label=22;break;}else{label=21;break;}
 case 21: 
 assert($__n_copy % 1 === 0);(_memcpy($29, $15, $__n_copy)|0);
 label=22;break;
 case 22: 
 var $49=($__old_sz|0)==($__n_copy|0);
 if($49){label=24;break;}else{label=23;break;}
 case 23: 
 var $51=((($__old_sz)-($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $52=(($29+$_sum)|0);
 var $53=(($15+$__n_copy)|0);
 assert($51 % 1 === 0);(_memcpy($52, $53, $51)|0);
 label=24;break;
 case 24: 
 var $55=($__old_cap|0)==10;
 var $56=($15|0)==0;
 var $or_cond=$55|$56;
 if($or_cond){label=26;break;}else{label=25;break;}
 case 25: 
 _free($15);
 label=26;break;
 case 26: 
 var $58=(($this+8)|0);
 HEAP32[(($58)>>2)]=$29;
 var $59=$26|1;
 var $60=(($this)|0);
 HEAP32[(($60)>>2)]=$59;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $10=$7;
 _free($10);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw($this,$__s){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=$__s;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=$__s;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=$this;
 var $10=HEAP8[($9)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){var $19=1;var $18=$10;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($this)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$15&-2;
 var $phitmp_i_i=((($16)-(1))|0);
 var $17=(($15)&255);
 var $19=$phitmp_i_i;var $18=$17;label=5;break;
 case 5: 
 var $18;
 var $19;
 var $20=($19>>>0)<($8>>>0);
 if($20){label=17;break;}else{label=6;break;}
 case 6: 
 var $22=$18&1;
 var $23=(($22<<24)>>24)==0;
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($this+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $29=$26;label=9;break;
 case 8: 
 var $28=(($this+4)|0);
 var $29=$28;label=9;break;
 case 9: 
 var $29;
 var $30=$29;
 var $31=((($30)-($6))|0);
 var $32=$31>>2;
 var $33=($32>>>0)<($8>>>0);
 var $34=($8|0)==0;
 if($33){label=11;break;}else{label=10;break;}
 case 10: 
 if($34){label=14;break;}else{var $_025_i_i=$__s;var $_16_i_i=$8;var $_07_i_i=$29;label=13;break;}
 case 11: 
 if($34){label=14;break;}else{var $_in_i_i=$8;label=12;break;}
 case 12: 
 var $_in_i_i;
 var $35=((($_in_i_i)-(1))|0);
 var $36=(($__s+($35<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($29+($35<<2))|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=($35|0)==0;
 if($39){label=14;break;}else{var $_in_i_i=$35;label=12;break;}
 case 13: 
 var $_07_i_i;
 var $_16_i_i;
 var $_025_i_i;
 var $40=((($_16_i_i)-(1))|0);
 var $41=(($_025_i_i+4)|0);
 var $42=HEAP32[(($_025_i_i)>>2)];
 var $43=(($_07_i_i+4)|0);
 HEAP32[(($_07_i_i)>>2)]=$42;
 var $44=($40|0)==0;
 if($44){label=14;break;}else{var $_025_i_i=$41;var $_16_i_i=$40;var $_07_i_i=$43;label=13;break;}
 case 14: 
 var $45=(($29+($8<<2))|0);
 HEAP32[(($45)>>2)]=0;
 var $46=HEAP8[($9)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=16;break;}else{label=15;break;}
 case 15: 
 var $50=(($this+4)|0);
 HEAP32[(($50)>>2)]=$8;
 label=41;break;
 case 16: 
 var $52=$7>>>1;
 var $53=(($52)&255);
 HEAP8[($9)]=$53;
 label=41;break;
 case 17: 
 var $54=((($8)-($19))|0);
 var $55=(((1073741806)-($19))|0);
 var $56=($55>>>0)<($54>>>0);
 if($56){label=18;break;}else{label=19;break;}
 case 18: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 19: 
 var $59=$18&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=21;break;}else{label=20;break;}
 case 20: 
 var $62=(($this+8)|0);
 var $63=HEAP32[(($62)>>2)];
 var $66=$63;label=22;break;
 case 21: 
 var $65=(($this+4)|0);
 var $66=$65;label=22;break;
 case 22: 
 var $66;
 var $67=($19>>>0)<536870887;
 if($67){label=23;break;}else{var $76=1073741807;label=25;break;}
 case 23: 
 var $69=$19<<1;
 var $70=($8>>>0)<($69>>>0);
 var $71=($70?$69:$8);
 var $72=($71>>>0)<2;
 if($72){var $76=2;label=25;break;}else{label=24;break;}
 case 24: 
 var $74=((($71)+(4))|0);
 var $75=$74&-4;
 var $76=$75;label=25;break;
 case 25: 
 var $76;
 var $77=$76<<2;
 var $78=($77|0)==0;
 var $_size_i_i_i=($78?1:$77);
 label=26;break;
 case 26: 
 var $80=_malloc($_size_i_i_i);
 var $81=($80|0)==0;
 if($81){label=27;break;}else{label=36;break;}
 case 27: 
 var $83=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $84=($83|0)==0;
 if($84){label=33;break;}else{label=28;break;}
 case 28: 
 var $86=$83;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$86]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=29;break; }
 case 29: 
 var $lpad_loopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_loopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_loopexit_i_i_i$0;label=31;break;
 case 30: 
 var $lpad_nonloopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_nonloopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_nonloopexit_i_i_i$0;label=31;break;
 case 31: 
 var $lpad_phi_i_i_i$0;
 var $lpad_phi_i_i_i$1;
 var $88=$lpad_phi_i_i_i$1;
 var $89=($88|0)<0;
 if($89){label=32;break;}else{label=34;break;}
 case 32: 
 var $91=$lpad_phi_i_i_i$0;
 ___cxa_call_unexpected($91);
 throw "Reached an unreachable!";
 case 33: 
 var $93=___cxa_allocate_exception(4);
 var $94=$93;
 HEAP32[(($94)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($93,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=30;break; }
 case 34: 
 ___resumeException($lpad_phi_i_i_i$0)
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $97=$80;
 var $98=($8|0)==0;
 if($98){label=38;break;}else{var $_023_i_i_i=$__s;var $_014_i_i_i=$8;var $_05_i_i_i=$97;label=37;break;}
 case 37: 
 var $_05_i_i_i;
 var $_014_i_i_i;
 var $_023_i_i_i;
 var $99=((($_014_i_i_i)-(1))|0);
 var $100=(($_023_i_i_i+4)|0);
 var $101=HEAP32[(($_023_i_i_i)>>2)];
 var $102=(($_05_i_i_i+4)|0);
 HEAP32[(($_05_i_i_i)>>2)]=$101;
 var $103=($99|0)==0;
 if($103){label=38;break;}else{var $_023_i_i_i=$100;var $_014_i_i_i=$99;var $_05_i_i_i=$102;label=37;break;}
 case 38: 
 var $104=($19|0)==1;
 var $105=($66|0)==0;
 var $or_cond=$104|$105;
 if($or_cond){label=40;break;}else{label=39;break;}
 case 39: 
 var $107=$66;
 _free($107);
 label=40;break;
 case 40: 
 var $108=(($this+8)|0);
 HEAP32[(($108)>>2)]=$97;
 var $109=$76|1;
 var $110=(($this)|0);
 HEAP32[(($110)>>2)]=$109;
 var $111=(($this+4)|0);
 HEAP32[(($111)>>2)]=$8;
 var $112=(($97+($8<<2))|0);
 HEAP32[(($112)>>2)]=0;
 label=41;break;
 case 41: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){var $11=1;var $10=$2;label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($this)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7&-2;
 var $phitmp_i=((($8)-(1))|0);
 var $9=(($7)&255);
 var $11=$phitmp_i;var $10=$9;label=3;break;
 case 3: 
 var $10;
 var $11;
 var $12=$10&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($this+4)|0);
 var $16=HEAP32[(($15)>>2)];
 var $20=$16;label=6;break;
 case 5: 
 var $18=($10&255);
 var $19=$18>>>1;
 var $20=$19;label=6;break;
 case 6: 
 var $20;
 var $21=($20>>>0)<2;
 if($21){var $25=1;label=8;break;}else{label=7;break;}
 case 7: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $phitmp_i2=((($24)-(1))|0);
 var $25=$phitmp_i2;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)==($11|0);
 if($26){label=46;break;}else{label=9;break;}
 case 9: 
 var $28=($25|0)==1;
 if($28){label=36;break;}else{label=10;break;}
 case 10: 
 var $30=($25>>>0)>($11>>>0);
 var $31=$25<<2;
 var $32=((($31)+(4))|0);
 var $33=($32|0)==0;
 var $_size_i=($33?1:$32);
 if($30){label=11;break;}else{label=21;break;}
 case 11: 
 var $35=_malloc($_size_i);
 var $36=($35|0)==0;
 if($36){label=12;break;}else{var $_sink=$35;label=33;break;}
 case 12: 
 var $38=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=13;break;}
 case 13: 
 var $41=$38;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=14;break; }
 case 14: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=16;break;
 case 15: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=16;break;
 case 16: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $43=$lpad_phi_i$1;
 var $44=($43|0)<0;
 if($44){label=17;break;}else{label=19;break;}
 case 17: 
 var $46=$lpad_phi_i$0;
 ___cxa_call_unexpected($46);
 throw "Reached an unreachable!";
 case 18: 
 var $48=___cxa_allocate_exception(4);
 var $49=$48;
 HEAP32[(($49)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($48,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=15;break; }
 case 19: 
 ___resumeException($lpad_phi_i$0)
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $53=_malloc($_size_i);
 var $54=($53|0)==0;
 if($54){label=22;break;}else{var $_sink=$53;label=33;break;}
 case 22: 
 var $56=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $57=($56|0)==0;
 if($57){label=29;break;}else{label=23;break;}
 case 23: 
 var $59=$56;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=24;break; }
 case 24: 
 var $lpad_loopexit_i2$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_loopexit_i2$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_loopexit_i2$1;var $lpad_phi_i6$0=$lpad_loopexit_i2$0;label=26;break;
 case 25: 
 var $lpad_nonloopexit_i4$0 = ___cxa_find_matching_catch(-1, -1,0); var $lpad_nonloopexit_i4$1 = tempRet0;
 var $lpad_phi_i6$1=$lpad_nonloopexit_i4$1;var $lpad_phi_i6$0=$lpad_nonloopexit_i4$0;label=26;break;
 case 26: 
 var $lpad_phi_i6$0;
 var $lpad_phi_i6$1;
 var $61=$lpad_phi_i6$1;
 var $62=($61|0)<0;
 if($62){label=27;break;}else{var $eh_lpad_body$1=$lpad_phi_i6$1;var $eh_lpad_body$0=$lpad_phi_i6$0;label=32;break;}
 case 27: 
 var $64=$lpad_phi_i6$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 throw "Reached an unreachable!";
 case 29: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 HEAP32[(($67)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($66,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=25;break; }
 case 30: 
 throw "Reached an unreachable!";
 case 31: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1,0); var $70$1 = tempRet0;
 var $eh_lpad_body$1=$70$1;var $eh_lpad_body$0=$70$0;label=32;break;
 case 32: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $71=$eh_lpad_body$0;
 var $72=___cxa_begin_catch($71);
 ___cxa_end_catch();
 label=46;break;
 case 33: 
 var $_sink;
 var $73=$_sink;
 if($13){label=35;break;}else{label=34;break;}
 case 34: 
 var $74=(($this+8)|0);
 var $75=HEAP32[(($74)>>2)];
 var $__now_long_0_off018=1;var $__was_long_0_off019=1;var $__p_020=$75;var $__new_data_121=$73;label=37;break;
 case 35: 
 var $76=(($this+4)|0);
 var $__now_long_0_off010=1;var $__was_long_0_off012=0;var $__p_014=$76;var $__new_data_116=$73;label=38;break;
 case 36: 
 var $77=(($this+4)|0);
 var $78=(($this+8)|0);
 var $79=HEAP32[(($78)>>2)];
 if($13){var $__now_long_0_off010=0;var $__was_long_0_off012=1;var $__p_014=$79;var $__new_data_116=$77;label=38;break;}else{var $__now_long_0_off018=0;var $__was_long_0_off019=1;var $__p_020=$79;var $__new_data_121=$77;label=37;break;}
 case 37: 
 var $__new_data_121;
 var $__p_020;
 var $__was_long_0_off019;
 var $__now_long_0_off018;
 var $81=(($this+4)|0);
 var $82=HEAP32[(($81)>>2)];
 var $86=$82;var $__now_long_0_off09=$__now_long_0_off018;var $__was_long_0_off011=$__was_long_0_off019;var $__p_013=$__p_020;var $__new_data_115=$__new_data_121;label=39;break;
 case 38: 
 var $__new_data_116;
 var $__p_014;
 var $__was_long_0_off012;
 var $__now_long_0_off010;
 var $84=($10&255);
 var $85=$84>>>1;
 var $86=$85;var $__now_long_0_off09=$__now_long_0_off010;var $__was_long_0_off011=$__was_long_0_off012;var $__p_013=$__p_014;var $__new_data_115=$__new_data_116;label=39;break;
 case 39: 
 var $__new_data_115;
 var $__p_013;
 var $__was_long_0_off011;
 var $__now_long_0_off09;
 var $86;
 var $87=((($86)+(1))|0);
 var $88=($87|0)==0;
 if($88){label=41;break;}else{var $_023_i=$__p_013;var $_014_i=$87;var $_05_i=$__new_data_115;label=40;break;}
 case 40: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $89=((($_014_i)-(1))|0);
 var $90=(($_023_i+4)|0);
 var $91=HEAP32[(($_023_i)>>2)];
 var $92=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$91;
 var $93=($89|0)==0;
 if($93){label=41;break;}else{var $_023_i=$90;var $_014_i=$89;var $_05_i=$92;label=40;break;}
 case 41: 
 var $__was_long_0_off011_not=$__was_long_0_off011^1;
 var $94=($__p_013|0)==0;
 var $or_cond=$__was_long_0_off011_not|$94;
 if($or_cond){label=43;break;}else{label=42;break;}
 case 42: 
 var $96=$__p_013;
 _free($96);
 label=43;break;
 case 43: 
 if($__now_long_0_off09){label=44;break;}else{label=45;break;}
 case 44: 
 var $98=((($25)+(1))|0);
 var $99=$98|1;
 var $100=(($this)|0);
 HEAP32[(($100)>>2)]=$99;
 var $101=(($this+4)|0);
 HEAP32[(($101)>>2)]=$20;
 var $102=(($this+8)|0);
 HEAP32[(($102)>>2)]=$__new_data_115;
 label=46;break;
 case 45: 
 var $104=$20<<1;
 var $105=(($104)&255);
 HEAP8[($1)]=$105;
 label=46;break;
 case 46: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($this,$__old_cap,$__delta_cap,$__old_sz,$__n_copy,$__n_del,$__n_add){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(((1073741807)-($__old_cap))|0);
 var $2=($1>>>0)<($__delta_cap>>>0);
 if($2){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $5=$this;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=5;break;}else{label=4;break;}
 case 4: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $14=$11;label=6;break;
 case 5: 
 var $13=(($this+4)|0);
 var $14=$13;label=6;break;
 case 6: 
 var $14;
 var $15=($__old_cap>>>0)<536870887;
 if($15){label=7;break;}else{var $25=1073741807;label=9;break;}
 case 7: 
 var $17=((($__delta_cap)+($__old_cap))|0);
 var $18=$__old_cap<<1;
 var $19=($17>>>0)<($18>>>0);
 var $20=($19?$18:$17);
 var $21=($20>>>0)<2;
 if($21){var $25=2;label=9;break;}else{label=8;break;}
 case 8: 
 var $23=((($20)+(4))|0);
 var $24=$23&-4;
 var $25=$24;label=9;break;
 case 9: 
 var $25;
 var $26=$25<<2;
 var $27=($26|0)==0;
 var $_size_i=($27?1:$26);
 label=10;break;
 case 10: 
 var $29=_malloc($_size_i);
 var $30=($29|0)==0;
 if($30){label=11;break;}else{label=20;break;}
 case 11: 
 var $32=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $33=($32|0)==0;
 if($33){label=17;break;}else{label=12;break;}
 case 12: 
 var $35=$32;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$35]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $37=$lpad_phi_i$1;
 var $38=($37|0)<0;
 if($38){label=16;break;}else{label=18;break;}
 case 16: 
 var $40=$lpad_phi_i$0;
 ___cxa_call_unexpected($40);
 throw "Reached an unreachable!";
 case 17: 
 var $42=___cxa_allocate_exception(4);
 var $43=$42;
 HEAP32[(($43)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($42,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $46=$29;
 var $47=($__n_copy|0)==0;
 if($47){label=22;break;}else{var $_023_i=$14;var $_014_i=$__n_copy;var $_05_i=$46;label=21;break;}
 case 21: 
 var $_05_i;
 var $_014_i;
 var $_023_i;
 var $48=((($_014_i)-(1))|0);
 var $49=(($_023_i+4)|0);
 var $50=HEAP32[(($_023_i)>>2)];
 var $51=(($_05_i+4)|0);
 HEAP32[(($_05_i)>>2)]=$50;
 var $52=($48|0)==0;
 if($52){label=22;break;}else{var $_023_i=$49;var $_014_i=$48;var $_05_i=$51;label=21;break;}
 case 22: 
 var $53=((($__old_sz)-($__n_del))|0);
 var $54=($53|0)==($__n_copy|0);
 if($54){label=25;break;}else{label=23;break;}
 case 23: 
 var $_sum1=((($__n_del)+($__n_copy))|0);
 var $_sum=((($__n_add)+($__n_copy))|0);
 var $55=(($14+($_sum1<<2))|0);
 var $56=(($46+($_sum<<2))|0);
 var $57=((($53)-($__n_copy))|0);
 var $_023_i3=$55;var $_014_i2=$57;var $_05_i1=$56;label=24;break;
 case 24: 
 var $_05_i1;
 var $_014_i2;
 var $_023_i3;
 var $58=((($_014_i2)-(1))|0);
 var $59=(($_023_i3+4)|0);
 var $60=HEAP32[(($_023_i3)>>2)];
 var $61=(($_05_i1+4)|0);
 HEAP32[(($_05_i1)>>2)]=$60;
 var $62=($58|0)==0;
 if($62){label=25;break;}else{var $_023_i3=$59;var $_014_i2=$58;var $_05_i1=$61;label=24;break;}
 case 25: 
 var $63=($__old_cap|0)==1;
 var $64=($14|0)==0;
 var $or_cond=$63|$64;
 if($or_cond){label=27;break;}else{label=26;break;}
 case 26: 
 var $66=$14;
 _free($66);
 label=27;break;
 case 27: 
 var $67=(($this+8)|0);
 HEAP32[(($67)>>2)]=$46;
 var $68=$25|1;
 var $69=(($this)|0);
 HEAP32[(($69)>>2)]=$68;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base5clearEj($this,$state){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(32);
 var $4=(($this+24)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+16)|0);
 HEAP32[(($8)>>2)]=$state;
 label=4;break;
 case 3: 
 var $10=$state|1;
 var $11=(($this+16)|0);
 HEAP32[(($11)>>2)]=$10;
 label=4;break;
 case 4: 
 var $13=($6&1);
 var $14=$13|$state;
 var $15=(($this+20)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=$14&$16;
 var $18=($17|0)==0;
 if($18){label=72;break;}else{label=5;break;}
 case 5: 
 var $20=___cxa_allocate_exception(16);
 var $21=HEAP8[(19240)];
 var $22=(($21<<24)>>24)==0;
 if($22){label=6;break;}else{label=8;break;}
 case 6: 
 var $24=___cxa_guard_acquire(19240);
 var $25=($24|0)==0;
 if($25){label=8;break;}else{label=7;break;}
 case 7: 
 HEAP32[((17136)>>2)]=6784;

 label=8;break;
 case 8: 
 var $27=$2;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $28=$3;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 label=9;break;
 case 9: 
 var $30=_malloc(16);
 var $31=($30|0)==0;
 if($31){label=10;break;}else{label=19;break;}
 case 10: 
 var $33=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $34=($33|0)==0;
 if($34){label=17;break;}else{label=11;break;}
 case 11: 
 var $36=$33;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 12: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=14;break;
 case 13: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=14;break;
 case 14: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $38=$lpad_phi_i_i$1;
 var $39=($38|0)<0;
 if($39){label=15;break;}else{var $eh_lpad_body$1=$lpad_phi_i_i$1;var $eh_lpad_body$0=$lpad_phi_i_i$0;label=71;break;}
 case 15: 
 var $41=$lpad_phi_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=70;break; }
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $43=___cxa_allocate_exception(4);
 var $44=$43;
 HEAP32[(($44)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($43,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=13;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $47=(($3+8)|0);
 HEAP32[(($47)>>2)]=$30;
 var $48=(($3)|0);
 HEAP32[(($48)>>2)]=17;
 var $49=(($3+4)|0);
 HEAP32[(($49)>>2)]=15;
 assert(15 % 1 === 0);(_memcpy($30, 3024, 15)|0);
 var $50=(($30+15)|0);
 HEAP8[($50)]=0;
 var $51=$1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $52=HEAP8[($28)];
 var $53=$52&1;
 var $54=(($53<<24)>>24)==0;
 if($54){label=21;break;}else{label=20;break;}
 case 20: 
 var $56=HEAP32[(($49)>>2)];
 var $60=$56;label=22;break;
 case 21: 
 var $58=($52&255);
 var $59=$58>>>1;
 var $60=$59;label=22;break;
 case 22: 
 var $60;
 var $61=($60|0)==0;
 if($61){label=24;break;}else{label=23;break;}
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3,2808,2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=61;break; }
 case 24: 
 var $63=HEAP32[((17136)>>2)];
 var $64=(($63+24)|0);
 var $65=HEAP32[(($64)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$65]($1,17136,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=61;break; }
 case 25: 
 var $66=HEAP8[($51)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=27;break;}else{label=26;break;}
 case 26: 
 var $70=(($1+8)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($1+4)|0);
 var $73=HEAP32[(($72)>>2)];
 var $80=$73;var $79=$71;label=28;break;
 case 27: 
 var $75=$1;
 var $76=(($75+1)|0);
 var $77=($66&255);
 var $78=$77>>>1;
 var $80=$78;var $79=$76;label=28;break;
 case 28: 
 var $79;
 var $80;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6appendEPKcj($3,$79,$80) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $81=HEAP8[($51)];
 var $82=$81&1;
 var $83=(($82<<24)>>24)==0;
 if($83){label=35;break;}else{label=30;break;}
 case 30: 
 var $85=(($1+8)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=($86|0)==0;
 if($87){label=35;break;}else{label=31;break;}
 case 31: 
 _free($86);
 label=35;break;
 case 32: 
 var $90$0 = ___cxa_find_matching_catch(-1, -1); var $90$1 = tempRet0;
 var $91=HEAP8[($51)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $eh_lpad_body_i$1=$90$1;var $eh_lpad_body_i$0=$90$0;label=62;break;}else{label=33;break;}
 case 33: 
 var $95=(($1+8)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==0;
 if($97){var $eh_lpad_body_i$1=$90$1;var $eh_lpad_body_i$0=$90$0;label=62;break;}else{label=34;break;}
 case 34: 
 _free($96);
 var $eh_lpad_body_i$1=$90$1;var $eh_lpad_body_i$0=$90$0;label=62;break;
 case 35: 
 assert(12 % 1 === 0);HEAP32[(($27)>>2)]=HEAP32[(($28)>>2)];HEAP32[((($27)+(4))>>2)]=HEAP32[((($28)+(4))>>2)];HEAP32[((($27)+(8))>>2)]=HEAP32[((($28)+(8))>>2)];
 HEAP32[(($28)>>2)]=0; HEAP32[((($28)+(4))>>2)]=0; HEAP32[((($28)+(8))>>2)]=0;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $99=$20;
 var $100=$20;
 HEAP32[(($100)>>2)]=5256;
 var $101=(($20+4)|0);
 var $102=$101;
 var $103=HEAP8[($27)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=37;break;}else{label=36;break;}
 case 36: 
 var $107=(($2+8)|0);
 var $108=HEAP32[(($107)>>2)];
 var $112=$108;label=38;break;
 case 37: 
 var $110=$2;
 var $111=(($110+1)|0);
 var $112=$111;label=38;break;
 case 38: 
 var $112;
 var $113=_strlen($112);
 var $114=((($113)+(13))|0);
 var $115=($114|0)==0;
 var $_size_i_i_i=($115?1:$114);
 label=39;break;
 case 39: 
 var $117=_malloc($_size_i_i_i);
 var $118=($117|0)==0;
 if($118){label=40;break;}else{label=55;break;}
 case 40: 
 var $120=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $121=($120|0)==0;
 if($121){label=47;break;}else{label=41;break;}
 case 41: 
 var $123=$120;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=42;break; }
 case 42: 
 var $lpad_loopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_loopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_loopexit_i_i_i$0;label=44;break;
 case 43: 
 var $lpad_nonloopexit_i_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i_i$1 = tempRet0;
 var $lpad_phi_i_i_i$1=$lpad_nonloopexit_i_i_i$1;var $lpad_phi_i_i_i$0=$lpad_nonloopexit_i_i_i$0;label=44;break;
 case 44: 
 var $lpad_phi_i_i_i$0;
 var $lpad_phi_i_i_i$1;
 var $125=$lpad_phi_i_i_i$1;
 var $126=($125|0)<0;
 if($126){label=45;break;}else{var $eh_lpad_body3_i_i$1=$lpad_phi_i_i_i$1;var $eh_lpad_body3_i_i$0=$lpad_phi_i_i_i$0;label=50;break;}
 case 45: 
 var $128=$lpad_phi_i_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=49;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $130=___cxa_allocate_exception(4);
 var $131=$130;
 HEAP32[(($131)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($130,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=43;break; }
 case 48: 
 throw "Reached an unreachable!";
 case 49: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $eh_lpad_body3_i_i$1=$134$1;var $eh_lpad_body3_i_i$0=$134$0;label=50;break;
 case 50: 
 var $eh_lpad_body3_i_i$0;
 var $eh_lpad_body3_i_i$1;
 var $135=$eh_lpad_body3_i_i$1;
 var $136=($135|0)<0;
 if($136){label=51;break;}else{var $eh_lpad_body_i_i$1=$eh_lpad_body3_i_i$1;var $eh_lpad_body_i_i$0=$eh_lpad_body3_i_i$0;label=54;break;}
 case 51: 
 var $138=$eh_lpad_body3_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=53;break; }
 case 52: 
 throw "Reached an unreachable!";
 case 53: 
 var $140$0 = ___cxa_find_matching_catch(-1, -1); var $140$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$140$1;var $eh_lpad_body_i_i$0=$140$0;label=54;break;
 case 54: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;

 var $141=$eh_lpad_body_i_i$0;
 var $142=$eh_lpad_body_i_i$1;
 var $143=HEAP8[($27)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){var $_0_i=$142;var $_01_i=$141;label=65;break;}else{label=63;break;}
 case 55: 
 var $146=((($113)+(1))|0);
 var $147=$117;
 var $148=(($117+4)|0);
 var $149=$148;
 HEAP32[(($149)>>2)]=$113;
 HEAP32[(($147)>>2)]=$113;
 var $150=(($117+12)|0);
 HEAP32[(($102)>>2)]=$150;
 var $151=(($117+8)|0);
 var $152=$151;
 HEAP32[(($152)>>2)]=0;
 assert($146 % 1 === 0);(_memcpy($150, $112, $146)|0);
 var $153=HEAP8[($27)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=58;break;}else{label=56;break;}
 case 56: 
 var $157=(($2+8)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($158|0)==0;
 if($159){label=58;break;}else{label=57;break;}
 case 57: 
 _free($158);
 label=58;break;
 case 58: 
 var $161=HEAP8[($28)];
 var $162=$161&1;
 var $163=(($162<<24)>>24)==0;
 if($163){label=69;break;}else{label=59;break;}
 case 59: 
 var $165=HEAP32[(($47)>>2)];
 var $166=($165|0)==0;
 if($166){label=69;break;}else{label=60;break;}
 case 60: 
 _free($165);
 label=69;break;
 case 61: 
 var $169$0 = ___cxa_find_matching_catch(-1, -1); var $169$1 = tempRet0;
 var $eh_lpad_body_i$1=$169$1;var $eh_lpad_body_i$0=$169$0;label=62;break;
 case 62: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $170=$eh_lpad_body_i$0;
 var $171=$eh_lpad_body_i$1;
 var $_0_i=$171;var $_01_i=$170;label=65;break;
 case 63: 
 var $173=(($2+8)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=($174|0)==0;
 if($175){var $_0_i=$142;var $_01_i=$141;label=65;break;}else{label=64;break;}
 case 64: 
 _free($174);
 var $_0_i=$142;var $_01_i=$141;label=65;break;
 case 65: 
 var $_01_i;
 var $_0_i;
 var $177=HEAP8[($28)];
 var $178=$177&1;
 var $179=(($178<<24)>>24)==0;
 if($179){label=68;break;}else{label=66;break;}
 case 66: 
 var $181=HEAP32[(($47)>>2)];
 var $182=($181|0)==0;
 if($182){label=68;break;}else{label=67;break;}
 case 67: 
 _free($181);
 label=68;break;
 case 68: 
 var $184$0=$_01_i;
 var $184$1=0;
 var $185$0=$184$0;
 var $185$1=$_0_i;
 var $eh_lpad_body$1=$185$1;var $eh_lpad_body$0=$185$0;label=71;break;
 case 69: 
 HEAP32[(($100)>>2)]=7280;
 var $187=(($20+8)|0);
 var $188=$187;
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $$etemp$8$0=32;
 var $$etemp$8$1=0;
 var $$etemp$9=17136;
 var $$etemp$7$0=$$etemp$9;
 var $$etemp$7$1=0;
 var $$etemp$5$0=_bitshift64Shl($$etemp$7$0,$$etemp$7$1,$$etemp$8$0);var $$etemp$5$1=tempRet0;
 var $$etemp$4$0=$$etemp$5$0|$$etemp$6$0;
 var $$etemp$4$1=$$etemp$5$1|$$etemp$6$1;
 var $st$10$0=(($188)|0);
 HEAP32[(($st$10$0)>>2)]=$$etemp$4$0;
 var $st$11$1=(($188+4)|0);
 HEAP32[(($st$11$1)>>2)]=$$etemp$4$1;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 HEAP32[(($100)>>2)]=5968;
 ___cxa_throw($20,12328,(72));
 throw "Reached an unreachable!";
 case 70: 
 var $190$0 = ___cxa_find_matching_catch(-1, -1); var $190$1 = tempRet0;
 var $eh_lpad_body$1=$190$1;var $eh_lpad_body$0=$190$0;label=71;break;
 case 71: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 ___cxa_free_exception($20);
 ___resumeException($eh_lpad_body$0)
 case 72: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5944;
 var $2=(($this+40)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 var $_pre=(($this+32)|0);
 var $_pre1=(($this+36)|0);
 if($4){label=4;break;}else{var $i_01_i=$3;label=2;break;}
 case 2: 
 var $i_01_i;
 var $5=((($i_01_i)-(1))|0);
 var $6=HEAP32[(($_pre)>>2)];
 var $7=(($6+($5<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=HEAP32[(($_pre1)>>2)];
 var $10=(($9+($5<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$8](0,$this,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $12=($5|0)==0;
 if($12){label=4;break;}else{var $i_01_i=$5;label=2;break;}
 case 4: 
 var $13=(($this+28)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($14+4)|0);
 var $16=$15;
 var $17=(tempValue=HEAP32[(($16)>>2)],HEAP32[(($16)>>2)]=tempValue+-1,tempValue);
 var $18=($17|0)==0;
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $20=$14;
 var $21=$14;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 FUNCTION_TABLE[$24]($20);
 label=6;break;
 case 6: 
 var $25=HEAP32[(($_pre)>>2)];
 var $26=$25;
 _free($26);
 var $27=HEAP32[(($_pre1)>>2)];
 var $28=$27;
 _free($28);
 var $29=(($this+48)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=$30;
 _free($31);
 var $32=(($this+60)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=$33;
 _free($34);
 return;
 case 7: 
 var $36$0 = ___cxa_find_matching_catch(-1, -1,0); var $36$1 = tempRet0;
 var $37=$36$0;
 ___clang_call_terminate($37);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7016;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=7016;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6setbufEPci($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsgetnEPci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+1)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP8[($6)];
 var $storemerge=$11;label=7;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{label=6;break;}
 case 6: 
 var $19=(($16)&255);
 var $storemerge=$19;label=7;break;
 case 7: 
 var $storemerge;
 HEAP8[($_01)]=$storemerge;
 var $21=((($__i_02)+(1))|0);
 var $22=(($_01+1)|0);
 var $23=($21|0)<($__n|0);
 if($23){var $_01=$22;var $__i_02=$21;label=3;break;}else{var $__i_0_lcssa=$21;label=8;break;}
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+1)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP8[($9)];
 var $12=($11&255);
 var $_0=$12;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE9pbackfailEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE6xsputnEPKci($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=7;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP8[($_02)];
 var $11=(($6+1)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP8[($6)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP8[($_02)];
 var $17=($16&255);
 var $18=FUNCTION_TABLE[$15]($this,$17);
 var $19=($18|0)==-1;
 if($19){var $__i_0_lcssa=$__i_01;label=7;break;}else{label=6;break;}
 case 6: 
 var $21=(($_02+1)|0);
 var $22=((($__i_01)+(1))|0);
 var $23=($22|0)<($__n|0);
 if($23){var $__i_01=$22;var $_02=$21;label=3;break;}else{var $__i_0_lcssa=$22;label=7;break;}
 case 7: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIcNS_11char_traitsIcEEE8overflowEi($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6944;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 var $13=$this;
 _free($13);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6944;
 var $2=(($this+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=($5|0)==0;
 if($6){label=2;break;}else{label=3;break;}
 case 2: 
 var $8=(($3)|0);
 var $9=$3;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+8)|0);
 var $12=HEAP32[(($11)>>2)];
 FUNCTION_TABLE[$12]($8);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5imbueERKNS_6localeE($this,$0){
 var label=0;


 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6setbufEPwi($this,$0,$1){
 var label=0;


 return $this;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekoffExNS_8ios_base7seekdirEj($agg_result,$this,$0$0,$0$1,$1,$2){
 var label=0;


 var $4=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($4)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($4+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $5=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($5)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($5+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE7seekposENS_4fposI11__mbstate_tEEj($agg_result,$this,$0,$1){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $0; $0=STACKTOP;STACKTOP = (STACKTOP + 16)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($0)>>2)]=HEAP32[((tempParam)>>2)];HEAP32[((($0)+(4))>>2)]=HEAP32[(((tempParam)+(4))>>2)];HEAP32[((($0)+(8))>>2)]=HEAP32[(((tempParam)+(8))>>2)];HEAP32[((($0)+(12))>>2)]=HEAP32[(((tempParam)+(12))>>2)];

 var $3=$agg_result;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $st$1$0=(($3)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($3+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $4=(($agg_result+8)|0);
 var $$etemp$3$0=-1;
 var $$etemp$3$1=-1;
 var $st$4$0=(($4)|0);
 HEAP32[(($st$4$0)>>2)]=$$etemp$3$0;
 var $st$5$1=(($4+4)|0);
 HEAP32[(($st$5$1)>>2)]=$$etemp$3$1;
 STACKTOP=sp;return;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE4syncEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9showmanycEv($this){
 var label=0;


 return 0;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsgetnEPwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+12)|0);
 var $4=(($this+16)|0);
 var $_01=$__s;var $__i_02=0;label=3;break;
 case 3: 
 var $__i_02;
 var $_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($6+4)|0);
 HEAP32[(($3)>>2)]=$10;
 var $11=HEAP32[(($6)>>2)];
 var $storemerge=$11;label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+40)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=FUNCTION_TABLE[$15]($this);
 var $17=($16|0)==-1;
 if($17){var $__i_0_lcssa=$__i_02;label=8;break;}else{var $storemerge=$16;label=6;break;}
 case 6: 
 var $storemerge;
 HEAP32[(($_01)>>2)]=$storemerge;
 var $19=((($__i_02)+(1))|0);
 var $20=($19|0)<($__n|0);
 if($20){label=7;break;}else{var $__i_0_lcssa=$19;label=8;break;}
 case 7: 
 var $21=(($_01+4)|0);
 var $_01=$21;var $__i_02=$19;label=3;break;
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9underflowEv($this){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE5uflowEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+36)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=FUNCTION_TABLE[$4]($this);
 var $6=($5|0)==-1;
 if($6){var $_0=-1;label=3;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9+4)|0);
 HEAP32[(($8)>>2)]=$10;
 var $11=HEAP32[(($9)>>2)];
 var $_0=$11;label=3;break;
 case 3: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE9pbackfailEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE6xsputnEPKwi($this,$__s,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=($__n|0)>0;
 if($2){label=2;break;}else{var $__i_0_lcssa=0;label=8;break;}
 case 2: 
 var $3=(($this+24)|0);
 var $4=(($this+28)|0);
 var $__i_01=0;var $_02=$__s;label=3;break;
 case 3: 
 var $_02;
 var $__i_01;
 var $6=HEAP32[(($3)>>2)];
 var $7=HEAP32[(($4)>>2)];
 var $8=($6>>>0)<($7>>>0);
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=HEAP32[(($_02)>>2)];
 var $11=(($6+4)|0);
 HEAP32[(($3)>>2)]=$11;
 HEAP32[(($6)>>2)]=$10;
 label=6;break;
 case 5: 
 var $13=HEAP32[(($1)>>2)];
 var $14=(($13+52)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=HEAP32[(($_02)>>2)];
 var $17=FUNCTION_TABLE[$15]($this,$16);
 var $18=($17|0)==-1;
 if($18){var $__i_0_lcssa=$__i_01;label=8;break;}else{label=6;break;}
 case 6: 
 var $20=((($__i_01)+(1))|0);
 var $21=($20|0)<($__n|0);
 if($21){label=7;break;}else{var $__i_0_lcssa=$20;label=8;break;}
 case 7: 
 var $22=(($_02+4)|0);
 var $__i_01=$20;var $_02=$22;label=3;break;
 case 8: 
 var $__i_0_lcssa;
 return $__i_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115basic_streambufIwNS_11char_traitsIwEEE8overflowEj($this,$0){
 var label=0;


 return -1;
}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZTv0_n12_NSt3__113basic_istreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum5=((($5)+(16))|0);
 var $14=(($6+$_sum5)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum10=((($5)+(72))|0);
 var $19=(($6+$_sum10)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $_pre12=$5;label=6;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert11_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre12_pre=HEAP32[(($_phi_trans_insert11_phi_trans_insert)>>2)];
 var $_pre12=$_pre12_pre;label=6;break;
 case 6: 
 var $_pre12;
 HEAP8[($12)]=1;
 var $_sum6=((($_pre12)+(24))|0);
 var $25=(($6+$_sum6)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$27;
 var $29=$27;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+24)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $34=($33|0)==-1;
 if($34){label=8;break;}else{label=16;break;}
 case 8: 
 var $36=HEAP32[(($1)>>2)];
 var $37=((($36)-(12))|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($6+$39)|0);
 var $41=$40;
 var $_sum9=((($39)+(16))|0);
 var $42=(($6+$_sum9)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=$44|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($41,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $_0=$48;label=11;break;
 case 10: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 var $51=$50$0;
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 var $_0=$51;label=11;break;
 case 11: 
 var $_0;
 var $53=___cxa_begin_catch($_0);
 var $54=HEAP32[(($1)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $_sum7=((($57)+(16))|0);
 var $58=(($6+$_sum7)|0);
 var $59=$58;
 var $60=HEAP32[(($59)>>2)];
 var $61=$60|1;
 HEAP32[(($59)>>2)]=$61;
 var $_sum8=((($57)+(20))|0);
 var $62=(($6+$_sum8)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64&1;
 var $66=($65|0)==0;
 if($66){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 case 16: 
 __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($70$0)
 case 19: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1,0); var $73$1 = tempRet0;
 var $74=$73$0;
 ___clang_call_terminate($74);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+8)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(8))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZTv0_n12_NSt3__113basic_istreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(8))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__s=sp;
 var $1=$this;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(12))|0);
 var $4=$3;
 var $5=HEAP32[(($4)>>2)];
 var $6=$this;
 var $_sum=((($5)+(24))|0);
 var $7=(($6+$_sum)|0);
 var $8=$7;
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=15;break;}else{label=2;break;}
 case 2: 
 var $12=(($__s)|0);
 HEAP8[($12)]=0;
 var $13=(($__s+4)|0);
 HEAP32[(($13)>>2)]=$this;
 var $_sum5=((($5)+(16))|0);
 var $14=(($6+$_sum5)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=16;break;}
 case 3: 
 var $_sum10=((($5)+(72))|0);
 var $19=(($6+$_sum10)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=($21|0)==0;
 if($22){var $_pre12=$5;label=6;break;}else{label=4;break;}
 case 4: 
 (function() { try { __THREW__ = 0; return __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE5flushEv($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=9;break; }
 case 5: 
 var $_pre_pre=HEAP32[(($1)>>2)];
 var $_phi_trans_insert_phi_trans_insert=((($_pre_pre)-(12))|0);
 var $_phi_trans_insert11_phi_trans_insert=$_phi_trans_insert_phi_trans_insert;
 var $_pre12_pre=HEAP32[(($_phi_trans_insert11_phi_trans_insert)>>2)];
 var $_pre12=$_pre12_pre;label=6;break;
 case 6: 
 var $_pre12;
 HEAP8[($12)]=1;
 var $_sum6=((($_pre12)+(24))|0);
 var $25=(($6+$_sum6)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=$27;
 var $29=$27;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+24)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$32]($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 var $34=($33|0)==-1;
 if($34){label=8;break;}else{label=16;break;}
 case 8: 
 var $36=HEAP32[(($1)>>2)];
 var $37=((($36)-(12))|0);
 var $38=$37;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($6+$39)|0);
 var $41=$40;
 var $_sum9=((($39)+(16))|0);
 var $42=(($6+$_sum9)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=$44|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($41,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=10;break; }
 case 9: 
 var $47$0 = ___cxa_find_matching_catch(-1, -1,0); var $47$1 = tempRet0;
 var $48=$47$0;
 var $_0=$48;label=11;break;
 case 10: 
 var $50$0 = ___cxa_find_matching_catch(-1, -1,0); var $50$1 = tempRet0;
 var $51=$50$0;
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 var $_0=$51;label=11;break;
 case 11: 
 var $_0;
 var $53=___cxa_begin_catch($_0);
 var $54=HEAP32[(($1)>>2)];
 var $55=((($54)-(12))|0);
 var $56=$55;
 var $57=HEAP32[(($56)>>2)];
 var $_sum7=((($57)+(16))|0);
 var $58=(($6+$_sum7)|0);
 var $59=$58;
 var $60=HEAP32[(($59)>>2)];
 var $61=$60|1;
 HEAP32[(($59)>>2)]=$61;
 var $_sum8=((($57)+(20))|0);
 var $62=(($6+$_sum8)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $65=$64&1;
 var $66=($65|0)==0;
 if($66){label=14;break;}else{label=12;break;}
 case 12: 
 (function() { try { __THREW__ = 0; return ___cxa_rethrow() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=17;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 ___cxa_end_catch();
 label=15;break;
 case 15: 
 STACKTOP=sp;return;
 case 16: 
 __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($__s);
 label=15;break;
 case 17: 
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=19;break; }
 case 18: 
 ___resumeException($70$0)
 case 19: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1,0); var $73$1 = tempRet0;
 var $74=$73$0;
 ___clang_call_terminate($74);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZTv0_n12_NSt3__113basic_ostreamIcNS_11char_traitsIcEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIcNS_11char_traitsIcEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=(($this+4)|0);
 __ZNSt3__18ios_baseD2Ev($1);
 return;
}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $7=(($1+$6)|0);
 var $_sum=((($6)+(4))|0);
 var $8=(($1+$_sum)|0);
 var $9=$8;
 __ZNSt3__18ios_baseD2Ev($9);
 var $10=($7|0)==0;
 if($10){label=3;break;}else{label=2;break;}
 case 2: 
 _free($7);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZTv0_n12_NSt3__113basic_ostreamIwNS_11char_traitsIwEEED1Ev($this){
 var label=0;


 var $1=$this;
 var $2=$this;
 var $3=HEAP32[(($2)>>2)];
 var $4=((($3)-(12))|0);
 var $5=$4;
 var $6=HEAP32[(($5)>>2)];
 var $_sum=((($6)+(4))|0);
 var $7=(($1+$_sum)|0);
 var $8=$7;
 __ZNSt3__18ios_baseD2Ev($8);
 return;
}


function __ZNSt3__113basic_ostreamIwNS_11char_traitsIwEEE6sentryD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=HEAP32[(($3)>>2)];
 var $5=((($4)-(12))|0);
 var $6=$5;
 var $7=HEAP32[(($6)>>2)];
 var $8=$2;
 var $_sum=((($7)+(24))|0);
 var $9=(($8+$_sum)|0);
 var $10=$9;
 var $11=HEAP32[(($10)>>2)];
 var $12=($11|0)==0;
 if($12){label=9;break;}else{label=2;break;}
 case 2: 
 var $_sum1=((($7)+(16))|0);
 var $14=(($8+$_sum1)|0);
 var $15=$14;
 var $16=HEAP32[(($15)>>2)];
 var $17=($16|0)==0;
 if($17){label=3;break;}else{label=9;break;}
 case 3: 
 var $_sum2=((($7)+(4))|0);
 var $19=(($8+$_sum2)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$21&8192;
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=4;break;}
 case 4: 
 var $25=__ZSt18uncaught_exceptionv();
 if($25){label=9;break;}else{label=5;break;}
 case 5: 
 var $27=HEAP32[(($1)>>2)];
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=((($29)-(12))|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$27;
 var $_sum3=((($32)+(24))|0);
 var $34=(($33+$_sum3)|0);
 var $35=$34;
 var $36=HEAP32[(($35)>>2)];
 var $37=$36;
 var $38=$36;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+24)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($37) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=8;break; }
 case 6: 
 var $43=($42|0)==-1;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $45=HEAP32[(($1)>>2)];
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=((($47)-(12))|0);
 var $49=$48;
 var $50=HEAP32[(($49)>>2)];
 var $51=$45;
 var $52=(($51+$50)|0);
 var $53=$52;
 var $_sum4=((($50)+(16))|0);
 var $54=(($51+$_sum4)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=$56|1;
 (function() { try { __THREW__ = 0; return __ZNSt3__18ios_base5clearEj($53,$57) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $59$0 = ___cxa_find_matching_catch(-1, -1,0); var $59$1 = tempRet0;
 var $60=$59$0;
 var $61=___cxa_begin_catch($60);
 (function() { try { __THREW__ = 0; return ___cxa_end_catch() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 return;
 case 10: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1,0); var $63$1 = tempRet0;
 var $64=$63$0;
 ___clang_call_terminate($64);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__119__iostream_category4nameEv($this){
 var label=0;


 return 3752;
}


function __ZNKSt3__119__iostream_category7messageEi($agg_result,$this,$ev){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($ev|0)==1;
 if($1){label=19;break;}else{label=2;break;}
 case 2: 
 var $3=_strerror($ev);
 var $4=_strlen($3);
 var $5=($4>>>0)>4294967279;
 if($5){label=3;break;}else{label=4;break;}
 case 3: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 4: 
 var $8=($4>>>0)<11;
 if($8){label=5;break;}else{label=6;break;}
 case 5: 
 var $10=$4<<1;
 var $11=(($10)&255);
 var $12=$agg_result;
 HEAP8[($12)]=$11;
 var $13=$agg_result;
 var $14=(($13+1)|0);
 var $__p_0_i_i_i_i=$14;label=18;break;
 case 6: 
 var $15=((($4)+(16))|0);
 var $16=$15&-16;
 var $17=($16|0)==0;
 var $_size_i_i=($17?1:$16);
 label=7;break;
 case 7: 
 var $19=_malloc($_size_i_i);
 var $20=($19|0)==0;
 if($20){label=8;break;}else{label=17;break;}
 case 8: 
 var $22=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $23=($22|0)==0;
 if($23){label=14;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 10: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=12;break;
 case 11: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=12;break;
 case 12: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $27=$lpad_phi_i_i$1;
 var $28=($27|0)<0;
 if($28){label=13;break;}else{label=15;break;}
 case 13: 
 var $30=$lpad_phi_i_i$0;
 ___cxa_call_unexpected($30);
 throw "Reached an unreachable!";
 case 14: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=11;break; }
 case 15: 
 ___resumeException($lpad_phi_i_i$0)
 case 16: 
 throw "Reached an unreachable!";
 case 17: 
 var $36=(($agg_result+8)|0);
 HEAP32[(($36)>>2)]=$19;
 var $37=$16|1;
 var $38=(($agg_result)|0);
 HEAP32[(($38)>>2)]=$37;
 var $39=(($agg_result+4)|0);
 HEAP32[(($39)>>2)]=$4;
 var $__p_0_i_i_i_i=$19;label=18;break;
 case 18: 
 var $__p_0_i_i_i_i;
 assert($4 % 1 === 0);(_memcpy($__p_0_i_i_i_i, $3, $4)|0);
 var $40=(($__p_0_i_i_i_i+$4)|0);
 HEAP8[($40)]=0;
 label=20;break;
 case 19: 
 __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj($agg_result,4144,35);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__iostream_categoryD1Ev($this){
 var label=0;


 return;
}


function __ZNSt3__18ios_base7failureD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5256;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 var $12=$this;
 _free($12);
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_base7failureD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5256;
 var $2=(($this+4)|0);
 var $this_idx_val_i_i_i=HEAP32[(($2)>>2)];
 var $3=((($this_idx_val_i_i_i)-(4))|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+-1,tempValue);
 var $6=((($5)-(1))|0);
 var $7=($6|0)<0;
 if($7){label=2;break;}else{label=3;break;}
 case 2: 
 var $9=HEAP32[(($2)>>2)];
 var $10=((($9)-(12))|0);
 _free($10);
 label=3;break;
 case 3: 
 var $11=(($this)|0);

 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18ios_baseD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 __ZNSt3__18ios_baseD2Ev($this);
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__iostream_categoryD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIcED1Ev($this){
 var label=0;


 return;
}


function __ZNSt3__16locale5facetD2Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17collateIcE10do_compareEPKcS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP8[($_024)];
 var $5=HEAP8[($_015)];
 var $6=(($4<<24)>>24)<(($5<<24)>>24);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=(($5<<24)>>24)<(($4<<24)>>24);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+1)|0);
 var $11=(($_015+1)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE12do_transformEPKcS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=($3>>>0)>4294967279;
 if($4){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $7=($3>>>0)<11;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=$3<<1;
 var $10=(($9)&255);
 var $11=$agg_result;
 HEAP8[($11)]=$10;
 var $12=$agg_result;
 var $13=(($12+1)|0);
 var $__p_0_ph_i_i_i=$13;label=17;break;
 case 5: 
 var $14=((($3)+(16))|0);
 var $15=$14&-16;
 var $16=($15|0)==0;
 var $_size_i=($16?1:$15);
 label=6;break;
 case 6: 
 var $18=_malloc($_size_i);
 var $19=($18|0)==0;
 if($19){label=7;break;}else{label=16;break;}
 case 7: 
 var $21=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $22=($21|0)==0;
 if($22){label=13;break;}else{label=8;break;}
 case 8: 
 var $24=$21;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$24]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $26=$lpad_phi_i$1;
 var $27=($26|0)<0;
 if($27){label=12;break;}else{label=14;break;}
 case 12: 
 var $29=$lpad_phi_i$0;
 ___cxa_call_unexpected($29);
 throw "Reached an unreachable!";
 case 13: 
 var $31=___cxa_allocate_exception(4);
 var $32=$31;
 HEAP32[(($32)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($31,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $35=(($agg_result+8)|0);
 HEAP32[(($35)>>2)]=$18;
 var $36=$15|1;
 var $37=(($agg_result)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=(($agg_result+4)|0);
 HEAP32[(($38)>>2)]=$3;
 var $__p_0_ph_i_i_i=$18;label=17;break;
 case 17: 
 var $__p_0_ph_i_i_i;
 var $39=($__lo|0)==($__hi|0);
 if($39){var $__p_0_lcssa_i_i_i=$__p_0_ph_i_i_i;label=20;break;}else{var $__p_01_i_i_i=$__p_0_ph_i_i_i;var $_02_i_i_i=$__lo;label=18;break;}
 case 18: 
 var $_02_i_i_i;
 var $__p_01_i_i_i;
 var $40=HEAP8[($_02_i_i_i)];
 HEAP8[($__p_01_i_i_i)]=$40;
 var $41=(($_02_i_i_i+1)|0);
 var $42=(($__p_01_i_i_i+1)|0);
 var $43=($41|0)==($__hi|0);
 if($43){label=19;break;}else{var $__p_01_i_i_i=$42;var $_02_i_i_i=$41;label=18;break;}
 case 19: 
 var $44=(((-$1))|0);
 var $scevgep_i_i_i=(($__hi+$44)|0);
 var $scevgep3_i_i_i=$scevgep_i_i_i;
 var $scevgep4_i_i_i=(($__p_0_ph_i_i_i+$scevgep3_i_i_i)|0);
 var $__p_0_lcssa_i_i_i=$scevgep4_i_i_i;label=20;break;
 case 20: 
 var $__p_0_lcssa_i_i_i;
 HEAP8[($__p_0_lcssa_i_i_i)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIcE7do_hashEPKcS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP8[($__p_01)];
 var $4=(($3<<24)>>24);
 var $5=((($4)+($2))|0);
 var $6=$5&-268435456;
 var $7=$6>>>24;
 var $8=$7|$6;
 var $9=$8^$5;
 var $10=(($__p_01+1)|0);
 var $11=($10|0)==($__hi|0);
 if($11){var $__h_0_lcssa=$9;label=3;break;}else{var $__p_01=$10;var $__h_02=$9;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17collateIwED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17collateIwE10do_compareEPKwS3_S3_S3_($this,$__lo1,$__hi1,$__lo2,$__hi2){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo2|0)==($__hi2|0);
 if($1){var $_02_lcssa=$__lo1;label=6;break;}else{var $_024=$__lo1;var $_015=$__lo2;label=2;break;}
 case 2: 
 var $_015;
 var $_024;
 var $2=($_024|0)==($__hi1|0);
 if($2){var $_0=-1;label=7;break;}else{label=3;break;}
 case 3: 
 var $4=HEAP32[(($_024)>>2)];
 var $5=HEAP32[(($_015)>>2)];
 var $6=($4|0)<($5|0);
 if($6){var $_0=-1;label=7;break;}else{label=4;break;}
 case 4: 
 var $8=($5|0)<($4|0);
 if($8){var $_0=1;label=7;break;}else{label=5;break;}
 case 5: 
 var $10=(($_024+4)|0);
 var $11=(($_015+4)|0);
 var $12=($11|0)==($__hi2|0);
 if($12){var $_02_lcssa=$10;label=6;break;}else{var $_024=$10;var $_015=$11;label=2;break;}
 case 6: 
 var $_02_lcssa;
 var $13=($_02_lcssa|0)!=($__hi1|0);
 var $14=($13&1);
 var $_0=$14;label=7;break;
 case 7: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE12do_transformEPKwS3_($agg_result,$this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__lo;
 var $2=$__hi;
 var $3=((($2)-($1))|0);
 var $4=$3>>2;
 var $5=($4>>>0)>1073741807;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 3: 
 var $8=($4>>>0)<2;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=$3>>>1;
 var $11=(($10)&255);
 var $12=$agg_result;
 HEAP8[($12)]=$11;
 var $13=(($agg_result+4)|0);
 var $__p_0_ph_i_i_i=$13;label=17;break;
 case 5: 
 var $14=((($4)+(4))|0);
 var $15=$14&-4;
 var $16=$15<<2;
 var $17=($16|0)==0;
 var $_size_i=($17?1:$16);
 label=6;break;
 case 6: 
 var $19=_malloc($_size_i);
 var $20=($19|0)==0;
 if($20){label=7;break;}else{label=16;break;}
 case 7: 
 var $22=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $23=($22|0)==0;
 if($23){label=13;break;}else{label=8;break;}
 case 8: 
 var $25=$22;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$25]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=9;break; }
 case 9: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=11;break;
 case 10: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=11;break;
 case 11: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $27=$lpad_phi_i$1;
 var $28=($27|0)<0;
 if($28){label=12;break;}else{label=14;break;}
 case 12: 
 var $30=$lpad_phi_i$0;
 ___cxa_call_unexpected($30);
 throw "Reached an unreachable!";
 case 13: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=10;break; }
 case 14: 
 ___resumeException($lpad_phi_i$0)
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $36=$19;
 var $37=(($agg_result+8)|0);
 HEAP32[(($37)>>2)]=$36;
 var $38=$15|1;
 var $39=(($agg_result)|0);
 HEAP32[(($39)>>2)]=$38;
 var $40=(($agg_result+4)|0);
 HEAP32[(($40)>>2)]=$4;
 var $__p_0_ph_i_i_i=$36;label=17;break;
 case 17: 
 var $__p_0_ph_i_i_i;
 var $41=($__lo|0)==($__hi|0);
 if($41){var $__p_0_lcssa_i_i_i=$__p_0_ph_i_i_i;label=21;break;}else{label=18;break;}
 case 18: 
 var $scevgep_i_i_i=((($__hi)-(4))|0);
 var $scevgep3_i_i_i=$scevgep_i_i_i;
 var $42=(((-$1))|0);
 var $uglygep_i_i_i=(($scevgep3_i_i_i+$42)|0);
 var $__p_01_i_i_i=$__p_0_ph_i_i_i;var $_02_i_i_i=$__lo;label=19;break;
 case 19: 
 var $_02_i_i_i;
 var $__p_01_i_i_i;
 var $44=HEAP32[(($_02_i_i_i)>>2)];
 HEAP32[(($__p_01_i_i_i)>>2)]=$44;
 var $45=(($_02_i_i_i+4)|0);
 var $46=(($__p_01_i_i_i+4)|0);
 var $47=($45|0)==($__hi|0);
 if($47){label=20;break;}else{var $__p_01_i_i_i=$46;var $_02_i_i_i=$45;label=19;break;}
 case 20: 
 var $uglygep4_i_i_i=$uglygep_i_i_i;
 var $48=$uglygep4_i_i_i>>>2;
 var $49=((($48)+(1))|0);
 var $scevgep5_i_i_i=(($__p_0_ph_i_i_i+($49<<2))|0);
 var $__p_0_lcssa_i_i_i=$scevgep5_i_i_i;label=21;break;
 case 21: 
 var $__p_0_lcssa_i_i_i;
 HEAP32[(($__p_0_lcssa_i_i_i)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17collateIwE7do_hashEPKwS3_($this,$__lo,$__hi){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__lo|0)==($__hi|0);
 if($1){var $__h_0_lcssa=0;label=3;break;}else{var $__p_01=$__lo;var $__h_02=0;label=2;break;}
 case 2: 
 var $__h_02;
 var $__p_01;
 var $2=$__h_02<<4;
 var $3=HEAP32[(($__p_01)>>2)];
 var $4=((($3)+($2))|0);
 var $5=$4&-268435456;
 var $6=$5>>>24;
 var $7=$6|$5;
 var $8=$7^$4;
 var $9=(($__p_01+4)|0);
 var $10=($9|0)==($__hi|0);
 if($10){var $__h_0_lcssa=$8;label=3;break;}else{var $__p_01=$9;var $__h_02=$8;label=2;break;}
 case 3: 
 var $__h_0_lcssa;
 return $__h_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i4=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $__names=(sp)+(64);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=48;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((18672)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i_i)|0);
 HEAP32[(($37)>>2)]=18672;
 var $38=(($__p_i_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(202);
 var $39=(($__p_i_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $40=HEAP32[((18676)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($29+12)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($29+8)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=$44;
 var $49=$47;
 var $50=((($48)-($49))|0);
 var $51=$50>>2;
 var $52=($51>>>0)>($41>>>0);
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=(($47+($41<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==0;
 if($55){label=11;break;}else{label=13;break;}
 case 11: 
 var $56=___cxa_allocate_exception(4);
 var $57=$56;
 HEAP32[(($57)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($56,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $59=$54;
 var $60=(($29+4)|0);
 var $61=$60;
 var $62=(tempValue=HEAP32[(($61)>>2)],HEAP32[(($61)>>2)]=tempValue+-1,tempValue);
 var $63=($62|0)==0;
 if($63){label=14;break;}else{label=15;break;}
 case 14: 
 var $65=$29;
 var $66=$29;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($65);
 label=15;break;
 case 15: 
 var $70=HEAP32[(($28)>>2)];
 var $71=(($70+4)|0);
 var $72=$71;
 var $73=(tempValue=HEAP32[(($72)>>2)],HEAP32[(($72)>>2)]=tempValue+1,tempValue);
 var $74=$__p_i_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $75=HEAP32[((18288)>>2)];
 var $76=($75|0)==-1;
 if($76){label=17;break;}else{label=16;break;}
 case 16: 
 var $78=(($__p_i_i_i_i4)|0);
 HEAP32[(($78)>>2)]=18288;
 var $79=(($__p_i_i_i_i4+4)|0);
 HEAP32[(($79)>>2)]=(202);
 var $80=(($__p_i_i_i_i4+8)|0);
 HEAP32[(($80)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=34;break; }
 case 17: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $81=HEAP32[((18292)>>2)];
 var $82=((($81)-(1))|0);
 var $83=(($70+12)|0);
 var $84=$83;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($70+8)|0);
 var $87=$86;
 var $88=HEAP32[(($87)>>2)];
 var $89=$85;
 var $90=$88;
 var $91=((($89)-($90))|0);
 var $92=$91>>2;
 var $93=($92>>>0)>($82>>>0);
 if($93){label=18;break;}else{label=19;break;}
 case 18: 
 var $94=(($88+($82<<2))|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=19;break;}else{label=21;break;}
 case 19: 
 var $97=___cxa_allocate_exception(4);
 var $98=$97;
 HEAP32[(($98)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($97,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=34;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $100=$95;
 var $101=(($70+4)|0);
 var $102=$101;
 var $103=(tempValue=HEAP32[(($102)>>2)],HEAP32[(($102)>>2)]=tempValue+-1,tempValue);
 var $104=($103|0)==0;
 if($104){label=22;break;}else{label=23;break;}
 case 22: 
 var $106=$70;
 var $107=$70;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+8)|0);
 var $110=HEAP32[(($109)>>2)];
 FUNCTION_TABLE[$110]($106);
 label=23;break;
 case 23: 
 var $111=(($__names)|0);
 var $112=$95;
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+24)|0);
 var $115=HEAP32[(($114)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($111,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $_02=$111;label=36;break; }
 case 24: 
 var $116=(($__names+12)|0);
 var $117=HEAP32[(($112)>>2)];
 var $118=(($117+28)|0);
 var $119=HEAP32[(($118)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($116,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { var $_02=$116;label=36;break; }
 case 25: 
 var $120=(($__e)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($__names+24)|0);
 var $123=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$121,$111,$122,$59,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=41;break; }
 case 26: 
 var $124=($123|0)==($111|0);
 var $125=($124&1);
 HEAP8[($__v)]=$125;
 var $126=(($__b)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($agg_result)|0);
 HEAP32[(($128)>>2)]=$127;
 var $129=$116;
 var $130=HEAP8[($129)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=29;break;}else{label=27;break;}
 case 27: 
 var $134=(($__names+20)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==0;
 if($136){label=29;break;}else{label=28;break;}
 case 28: 
 _free($135);
 label=29;break;
 case 29: 
 var $138=$__names;
 var $139=HEAP8[($138)];
 var $140=$139&1;
 var $141=(($140<<24)>>24)==0;
 if($141){label=48;break;}else{label=30;break;}
 case 30: 
 var $143=(($__names+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=48;break;}else{label=31;break;}
 case 31: 
 _free($144);
 label=48;break;
 case 32: 
 var $148$0 = ___cxa_find_matching_catch(-1, -1); var $148$1 = tempRet0;
 var $149=$148$0;
 var $150=$148$1;
 var $151=(($29+4)|0);
 var $152=$151;
 var $153=(tempValue=HEAP32[(($152)>>2)],HEAP32[(($152)>>2)]=tempValue+-1,tempValue);
 var $154=($153|0)==0;
 if($154){label=33;break;}else{var $_0=$149;var $_01=$150;label=49;break;}
 case 33: 
 var $156=$29;
 var $157=$29;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+8)|0);
 var $160=HEAP32[(($159)>>2)];
 FUNCTION_TABLE[$160]($156);
 var $_0=$149;var $_01=$150;label=49;break;
 case 34: 
 var $162$0 = ___cxa_find_matching_catch(-1, -1); var $162$1 = tempRet0;
 var $163=$162$0;
 var $164=$162$1;
 var $165=(($70+4)|0);
 var $166=$165;
 var $167=(tempValue=HEAP32[(($166)>>2)],HEAP32[(($166)>>2)]=tempValue+-1,tempValue);
 var $168=($167|0)==0;
 if($168){label=35;break;}else{var $_0=$163;var $_01=$164;label=49;break;}
 case 35: 
 var $170=$70;
 var $171=$70;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+8)|0);
 var $174=HEAP32[(($173)>>2)];
 FUNCTION_TABLE[$174]($170);
 var $_0=$163;var $_01=$164;label=49;break;
 case 36: 
 var $_02;
 var $176$0 = ___cxa_find_matching_catch(-1, -1); var $176$1 = tempRet0;
 var $177=$176$0;
 var $178=$176$1;
 var $179=($111|0)==($_02|0);
 if($179){var $_0=$177;var $_01=$178;label=49;break;}else{var $180=$_02;label=37;break;}
 case 37: 
 var $180;
 var $181=((($180)-(12))|0);
 var $182=$181;
 var $183=HEAP8[($182)];
 var $184=$183&1;
 var $185=(($184<<24)>>24)==0;
 if($185){label=40;break;}else{label=38;break;}
 case 38: 
 var $187=((($180)-(12)+8)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){label=40;break;}else{label=39;break;}
 case 39: 
 _free($188);
 label=40;break;
 case 40: 
 var $191=($181|0)==($111|0);
 if($191){var $_0=$177;var $_01=$178;label=49;break;}else{var $180=$181;label=37;break;}
 case 41: 
 var $192$0 = ___cxa_find_matching_catch(-1, -1); var $192$1 = tempRet0;
 var $193=$192$0;
 var $194=$116;
 var $195=HEAP8[($194)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=44;break;}else{label=42;break;}
 case 42: 
 var $199=(($__names+20)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($200|0)==0;
 if($201){label=44;break;}else{label=43;break;}
 case 43: 
 _free($200);
 label=44;break;
 case 44: 
 var $203=$__names;
 var $204=HEAP8[($203)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){label=47;break;}else{label=45;break;}
 case 45: 
 var $208=(($__names+8)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($209|0)==0;
 if($210){label=47;break;}else{label=46;break;}
 case 46: 
 _free($209);
 label=47;break;
 case 47: 
 var $212=$192$1;
 var $_0=$193;var $_01=$212;label=49;break;
 case 48: 
 STACKTOP=sp;return;
 case 49: 
 var $_01;
 var $_0;
 var $213$0=$_0;
 var $213$1=0;
 var $214$0=$213$0;
 var $214$1=$_01;
 ___resumeException($214$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $17=0;label=13;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $17=$8;label=13;break;}
 case 3: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($11,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $16$1=$13$1;var $16$0=$13$0;label=12;break;
 case 6: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=10;break;
 case 7: 
 var $lpad_loopexit2$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit2$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit2$1;var $lpad_phi$0=$lpad_loopexit2$0;label=10;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit51$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit51$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit51$1;var $lpad_phi$0=$lpad_nonloopexit51$0;label=10;break;
 case 10: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $14=($17|0)==0;
 if($14){var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;}else{label=11;break;}
 case 11: 
 _free($17);
 var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;
 case 12: 
 var $16$0;
 var $16$1;
 ___resumeException($16$0)
 case 13: 
 var $17;
 var $__status_0;
 var $18=($__kb|0)==($__ke|0);
 if($18){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=14;break;}else{var $__n_might_match_061=$4;var $__n_does_match_062=0;var $__st_063=$__status_0;var $__ky_064=$__kb;label=15;break;}
 case 14: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $19=(($__b)|0);
 var $20=$__ct;
 var $__indx_0_ph=0;var $__n_does_match_2_ph=$__n_does_match_0_lcssa;var $__n_might_match_2_ph=$__n_might_match_0_lcssa;var $__e_sroa_0_0_ph=$__e_0;label=22;break;
 case 15: 
 var $__ky_064;
 var $__st_063;
 var $__n_does_match_062;
 var $__n_might_match_061;
 var $21=$__ky_064;
 var $22=HEAP8[($21)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=17;break;}else{label=16;break;}
 case 16: 
 var $26=(($__ky_064+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $31=$27;label=18;break;
 case 17: 
 var $29=($22&255);
 var $30=$29>>>1;
 var $31=$30;label=18;break;
 case 18: 
 var $31;
 var $32=($31|0)==0;
 if($32){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP8[($__st_063)]=1;
 var $__n_does_match_1=$__n_does_match_062;var $__n_might_match_1=$__n_might_match_061;label=21;break;
 case 20: 
 HEAP8[($__st_063)]=2;
 var $35=((($__n_might_match_061)-(1))|0);
 var $36=((($__n_does_match_062)+(1))|0);
 var $__n_does_match_1=$36;var $__n_might_match_1=$35;label=21;break;
 case 21: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $38=(($__ky_064+12)|0);
 var $39=(($__st_063+1)|0);
 var $40=($38|0)==($__ke|0);
 if($40){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=14;break;}else{var $__n_might_match_061=$__n_might_match_1;var $__n_does_match_062=$__n_does_match_1;var $__st_063=$39;var $__ky_064=$38;label=15;break;}
 case 22: 
 var $__e_sroa_0_0_ph;
 var $__n_might_match_2_ph;
 var $__n_does_match_2_ph;
 var $__indx_0_ph;
 var $41=($__n_might_match_2_ph|0)!=0;
 var $__indx_0=$__indx_0_ph;var $__e_sroa_0_0=$__e_sroa_0_0_ph;label=23;break;
 case 23: 
 var $__e_sroa_0_0;
 var $__indx_0;
 var $42=HEAP32[(($19)>>2)];
 var $43=($42|0)==0;
 if($43){var $57=0;label=29;break;}else{label=24;break;}
 case 24: 
 var $45=(($42+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($42+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=25;break;}else{var $57=$42;label=29;break;}
 case 25: 
 var $50=$42;
 var $51=HEAP32[(($50)>>2)];
 var $52=(($51+36)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$53]($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=7;break; }
 case 26: 
 var $55=($54|0)==-1;
 if($55){label=28;break;}else{label=27;break;}
 case 27: 
 var $_pre_i_i_i=HEAP32[(($19)>>2)];
 var $57=$_pre_i_i_i;label=29;break;
 case 28: 
 HEAP32[(($19)>>2)]=0;
 var $57=0;label=29;break;
 case 29: 
 var $57;
 var $58=($57|0)==0;
 var $59=($__e_sroa_0_0|0)==0;
 if($59){var $_pre_i2_i_i16=0;var $__e_sroa_0_1=0;label=33;break;}else{label=30;break;}
 case 30: 
 var $61=(($__e_sroa_0_0+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($__e_sroa_0_0+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){label=31;break;}else{var $_pre_i2_i_i16=$__e_sroa_0_0;var $__e_sroa_0_1=$__e_sroa_0_0;label=33;break;}
 case 31: 
 var $66=$__e_sroa_0_0;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=7;break; }
 case 32: 
 var $71=($70|0)==-1;
 var $___e_sroa_0_0=($71?0:$__e_sroa_0_0);
 var $___e_sroa_0_04=($71?0:$__e_sroa_0_0);
 var $_pre_i2_i_i16=$___e_sroa_0_04;var $__e_sroa_0_1=$___e_sroa_0_0;label=33;break;
 case 33: 
 var $__e_sroa_0_1;
 var $_pre_i2_i_i16;
 var $72=($_pre_i2_i_i16|0)==0;
 var $tmp_i_i=$58^$72;
 var $_=$tmp_i_i&$41;
 var $73=HEAP32[(($19)>>2)];
 if($_){label=34;break;}else{label=81;break;}
 case 34: 
 var $75=(($73+12)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=(($73+16)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=($76|0)==($78|0);
 if($79){label=35;break;}else{label=37;break;}
 case 35: 
 var $81=$73;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+36)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$84]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=7;break; }
 case 36: 
 var $extract_t_i=(($85)&255);
 var $_0_i_off0_i=$extract_t_i;label=38;break;
 case 37: 
 var $87=HEAP8[($76)];
 var $_0_i_off0_i=$87;label=38;break;
 case 38: 
 var $_0_i_off0_i;
 if($__case_sensitive){var $__c_0=$_0_i_off0_i;label=40;break;}else{label=39;break;}
 case 39: 
 var $89=HEAP32[(($20)>>2)];
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($__ct,$_0_i_off0_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$92;label=40;break; } else { label=7;break; }
 case 40: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($18){var $__indx_0=$_pre;var $__e_sroa_0_0=$__e_sroa_0_1;label=23;break;}else{label=41;break;}
 case 41: 
 if($__case_sensitive){var $__n_might_match_331_us=$__n_might_match_2_ph;var $__n_does_match_332_us=$__n_does_match_2_ph;var $__st_133_us=$__status_0;var $__consume_0_off035_us=0;var $__ky1_036_us=$__kb;label=42;break;}else{var $__n_might_match_331=$__n_might_match_2_ph;var $__n_does_match_332=$__n_does_match_2_ph;var $__st_133=$__status_0;var $__consume_0_off035=0;var $__ky1_036=$__kb;label=55;break;}
 case 42: 
 var $__ky1_036_us;
 var $__consume_0_off035_us;
 var $__st_133_us;
 var $__n_does_match_332_us;
 var $__n_might_match_331_us;
 var $93=HEAP8[($__st_133_us)];
 var $94=(($93<<24)>>24)==1;
 if($94){label=43;break;}else{var $__consume_1_off0_us=$__consume_0_off035_us;var $__n_does_match_4_us=$__n_does_match_332_us;var $__n_might_match_4_us=$__n_might_match_331_us;label=53;break;}
 case 43: 
 var $96=$__ky1_036_us;
 var $97=HEAP8[($96)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=45;break;}else{label=44;break;}
 case 44: 
 var $101=(($__ky1_036_us+8)|0);
 var $102=HEAP32[(($101)>>2)];
 var $106=$102;label=46;break;
 case 45: 
 var $104=$__ky1_036_us;
 var $105=(($104+1)|0);
 var $106=$105;label=46;break;
 case 46: 
 var $106;
 var $107=(($106+$__indx_0)|0);
 var $108=HEAP8[($107)];
 var $109=(($__c_0<<24)>>24)==(($108<<24)>>24);
 if($109){label=48;break;}else{label=47;break;}
 case 47: 
 HEAP8[($__st_133_us)]=0;
 var $111=((($__n_might_match_331_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off035_us;var $__n_does_match_4_us=$__n_does_match_332_us;var $__n_might_match_4_us=$111;label=53;break;
 case 48: 
 if($99){label=50;break;}else{label=49;break;}
 case 49: 
 var $114=(($__ky1_036_us+4)|0);
 var $115=HEAP32[(($114)>>2)];
 var $119=$115;label=51;break;
 case 50: 
 var $117=($97&255);
 var $118=$117>>>1;
 var $119=$118;label=51;break;
 case 51: 
 var $119;
 var $120=($119|0)==($_pre|0);
 if($120){label=52;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_332_us;var $__n_might_match_4_us=$__n_might_match_331_us;label=53;break;}
 case 52: 
 HEAP8[($__st_133_us)]=2;
 var $122=((($__n_might_match_331_us)-(1))|0);
 var $123=((($__n_does_match_332_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$123;var $__n_might_match_4_us=$122;label=53;break;
 case 53: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $125=(($__ky1_036_us+12)|0);
 var $126=($125|0)==($__ke|0);
 if($126){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=69;break;}else{label=54;break;}
 case 54: 
 var $127=(($__st_133_us+1)|0);
 var $__n_might_match_331_us=$__n_might_match_4_us;var $__n_does_match_332_us=$__n_does_match_4_us;var $__st_133_us=$127;var $__consume_0_off035_us=$__consume_1_off0_us;var $__ky1_036_us=$125;label=42;break;
 case 55: 
 var $__ky1_036;
 var $__consume_0_off035;
 var $__st_133;
 var $__n_does_match_332;
 var $__n_might_match_331;
 var $128=HEAP8[($__st_133)];
 var $129=(($128<<24)>>24)==1;
 if($129){label=56;break;}else{var $__consume_1_off0=$__consume_0_off035;var $__n_does_match_4=$__n_does_match_332;var $__n_might_match_4=$__n_might_match_331;label=67;break;}
 case 56: 
 var $131=$__ky1_036;
 var $132=HEAP8[($131)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)==0;
 if($134){label=58;break;}else{label=57;break;}
 case 57: 
 var $136=(($__ky1_036+8)|0);
 var $137=HEAP32[(($136)>>2)];
 var $142=$137;label=59;break;
 case 58: 
 var $139=$__ky1_036;
 var $140=(($139+1)|0);
 var $142=$140;label=59;break;
 case 59: 
 var $142;
 var $143=(($142+$__indx_0)|0);
 var $144=HEAP8[($143)];
 var $145=HEAP32[(($20)>>2)];
 var $146=(($145+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$147]($__ct,$144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=6;break; }
 case 60: 
 var $149=(($__c_0<<24)>>24)==(($148<<24)>>24);
 if($149){label=61;break;}else{label=66;break;}
 case 61: 
 var $151=HEAP8[($131)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=63;break;}else{label=62;break;}
 case 62: 
 var $155=(($__ky1_036+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=64;break;
 case 63: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=64;break;
 case 64: 
 var $160;
 var $161=($160|0)==($_pre|0);
 if($161){label=65;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_332;var $__n_might_match_4=$__n_might_match_331;label=67;break;}
 case 65: 
 HEAP8[($__st_133)]=2;
 var $163=((($__n_might_match_331)-(1))|0);
 var $164=((($__n_does_match_332)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$164;var $__n_might_match_4=$163;label=67;break;
 case 66: 
 HEAP8[($__st_133)]=0;
 var $166=((($__n_might_match_331)-(1))|0);
 var $__consume_1_off0=$__consume_0_off035;var $__n_does_match_4=$__n_does_match_332;var $__n_might_match_4=$166;label=67;break;
 case 67: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $168=(($__ky1_036+12)|0);
 var $169=($168|0)==($__ke|0);
 if($169){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=69;break;}else{label=68;break;}
 case 68: 
 var $170=(($__st_133+1)|0);
 var $__n_might_match_331=$__n_might_match_4;var $__n_does_match_332=$__n_does_match_4;var $__st_133=$170;var $__consume_0_off035=$__consume_1_off0;var $__ky1_036=$168;label=55;break;
 case 69: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=70;break;}else{var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_3_lcssa;var $__n_might_match_2_ph=$__n_might_match_3_lcssa;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}
 case 70: 
 var $172=HEAP32[(($19)>>2)];
 var $173=(($172+12)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($172+16)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($174|0)==($176|0);
 if($177){label=71;break;}else{label=72;break;}
 case 71: 
 var $179=$172;
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+40)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$182]($172) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=8;break; }
 case 72: 
 var $185=(($174+1)|0);
 HEAP32[(($173)>>2)]=$185;
 label=73;break;
 case 73: 
 var $186=((($__n_might_match_3_lcssa)+($__n_does_match_3_lcssa))|0);
 var $_not=($186>>>0)<2;
 if($_not){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_3_lcssa;var $__n_might_match_2_ph=$__n_might_match_3_lcssa;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_545=$__n_does_match_3_lcssa;var $__st_246=$__status_0;var $__ky2_047=$__kb;label=74;break;}
 case 74: 
 var $__ky2_047;
 var $__st_246;
 var $__n_does_match_545;
 var $187=HEAP8[($__st_246)];
 var $188=(($187<<24)>>24)==2;
 if($188){label=75;break;}else{var $__n_does_match_6=$__n_does_match_545;label=80;break;}
 case 75: 
 var $190=$__ky2_047;
 var $191=HEAP8[($190)];
 var $192=$191&1;
 var $193=(($192<<24)>>24)==0;
 if($193){label=77;break;}else{label=76;break;}
 case 76: 
 var $195=(($__ky2_047+4)|0);
 var $196=HEAP32[(($195)>>2)];
 var $200=$196;label=78;break;
 case 77: 
 var $198=($191&255);
 var $199=$198>>>1;
 var $200=$199;label=78;break;
 case 78: 
 var $200;
 var $201=($200|0)==($_pre|0);
 if($201){var $__n_does_match_6=$__n_does_match_545;label=80;break;}else{label=79;break;}
 case 79: 
 HEAP8[($__st_246)]=0;
 var $203=((($__n_does_match_545)-(1))|0);
 var $__n_does_match_6=$203;label=80;break;
 case 80: 
 var $__n_does_match_6;
 var $205=(($__ky2_047+12)|0);
 var $206=(($__st_246+1)|0);
 var $207=($205|0)==($__ke|0);
 if($207){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_6;var $__n_might_match_2_ph=$__n_might_match_3_lcssa;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_545=$__n_does_match_6;var $__st_246=$206;var $__ky2_047=$205;label=74;break;}
 case 81: 
 var $209=($73|0)==0;
 if($209){var $223=0;label=87;break;}else{label=82;break;}
 case 82: 
 var $211=(($73+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($73+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=83;break;}else{var $223=$73;label=87;break;}
 case 83: 
 var $216=$73;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+36)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$219]($73) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=9;break; }
 case 84: 
 var $221=($220|0)==-1;
 if($221){label=86;break;}else{label=85;break;}
 case 85: 
 var $_pre_i_i_i12=HEAP32[(($19)>>2)];
 var $223=$_pre_i_i_i12;label=87;break;
 case 86: 
 HEAP32[(($19)>>2)]=0;
 var $223=0;label=87;break;
 case 87: 
 var $223;
 var $224=($223|0)==0;
 if($72){label=92;break;}else{label=88;break;}
 case 88: 
 var $226=(($_pre_i2_i_i16+12)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=(($_pre_i2_i_i16+16)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($227|0)==($229|0);
 if($230){label=90;break;}else{label=89;break;}
 case 89: 
 if($224){label=95;break;}else{label=94;break;}
 case 90: 
 var $231=$_pre_i2_i_i16;
 var $232=HEAP32[(($231)>>2)];
 var $233=(($232+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$234]($_pre_i2_i_i16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=9;break; }
 case 91: 
 var $236=($235|0)==-1;
 if($236){label=92;break;}else{label=93;break;}
 case 92: 
 if($224){label=94;break;}else{label=95;break;}
 case 93: 
 if($224){label=95;break;}else{label=94;break;}
 case 94: 
 var $238=HEAP32[(($__err)>>2)];
 var $239=$238|2;
 HEAP32[(($__err)>>2)]=$239;
 label=95;break;
 case 95: 
 if($18){label=99;break;}else{label=96;break;}
 case 96: 
 var $240=HEAP8[($__status_0)];
 var $241=(($240<<24)>>24)==2;
 if($241){var $_024=$__kb;label=100;break;}else{var $_02680=$__kb;var $__st_32581=$__status_0;label=98;break;}
 case 97: 
 var $242=HEAP8[($246)];
 var $243=(($242<<24)>>24)==2;
 if($243){var $_024=$244;label=100;break;}else{var $_02680=$244;var $__st_32581=$246;label=98;break;}
 case 98: 
 var $__st_32581;
 var $_02680;
 var $244=(($_02680+12)|0);
 var $245=($244|0)==($__ke|0);
 var $246=(($__st_32581+1)|0);
 if($245){label=99;break;}else{label=97;break;}
 case 99: 
 var $247=HEAP32[(($__err)>>2)];
 var $248=$247|4;
 HEAP32[(($__err)>>2)]=$248;
 var $_024=$__ke;label=100;break;
 case 100: 
 var $_024;
 var $249=($17|0)==0;
 if($249){label=102;break;}else{label=101;break;}
 case 101: 
 _free($17);
 label=102;break;
 case 102: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_024;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[($7)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre30_i=$__buf_i;
 var $_pre31_i=(($_pre30_i+1)|0);
 var $26=$22;var $_pre_phi32_i=$_pre31_i;var $_pre_phi34_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre33_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi32_i=$25;var $_pre_phi34_i=$_pre33_i;label=9;break;
 case 9: 
 var $_pre_phi34_i;
 var $_pre_phi32_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 21: 
 var $_sroa_06_2;
 var $61=HEAP32[(($__a_end_i)>>2)];
 var $62=$61;
 var $63=$__a_0_i;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($7)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($30)>>2)];
 var $73=$69;label=24;break;
 case 23: 
 var $71=($65&255);
 var $72=$71>>>1;
 var $73=$72;label=24;break;
 case 24: 
 var $73;
 var $74=($64|0)==($73|0);
 if($74){label=25;break;}else{var $__a_1_i=$__a_0_i;label=44;break;}
 case 25: 
 if($67){label=27;break;}else{label=26;break;}
 case 26: 
 var $77=HEAP32[(($30)>>2)];
 var $81=$77;label=28;break;
 case 27: 
 var $79=($65&255);
 var $80=$79>>>1;
 var $81=$80;label=28;break;
 case 28: 
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $83=HEAP8[($7)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($29)>>2)];
 var $88=$87&-2;
 var $phitmp_i19_i=((($88)-(1))|0);
 var $89=$phitmp_i19_i;label=31;break;
 case 31: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $90=HEAP8[($7)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($_pre_phi34_i)>>2)];
 var $95=$94;label=34;break;
 case 34: 
 var $95;
 var $96=(($95+$81)|0);
 HEAP32[(($__a_end_i)>>2)]=$96;
 var $__a_1_i=$95;label=44;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=(($__buf_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=40;break;}else{label=39;break;}
 case 39: 
 _free($103);
 label=40;break;
 case 40: 
 var $106=HEAP8[($6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(($__grouping_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=43;break;}else{label=42;break;}
 case 42: 
 _free($111);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi_i$0)
 case 44: 
 var $__a_1_i;
 var $114=(($45+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($45+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=45;break;}else{label=47;break;}
 case 45: 
 var $120=$45;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=35;break; }
 case 46: 
 var $extract_t_i_i=(($124)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=48;break;
 case 47: 
 var $126=HEAP8[($115)];
 var $_0_i_off0_i_i=$126;label=48;break;
 case 48: 
 var $_0_i_off0_i_i;
 var $128=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $129=($128|0)==0;
 if($129){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 var $135=$45;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 51: 
 var $141=(($131+1)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[($6)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=54;break;}else{label=53;break;}
 case 53: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=55;break;
 case 54: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=55;break;
 case 55: 
 var $152;
 var $153=($152|0)==0;
 if($153){label=58;break;}else{label=56;break;}
 case 56: 
 var $155=HEAP32[(($__g_end_i)>>2)];
 var $156=$155;
 var $157=$__g_i;
 var $158=((($156)-($157))|0);
 var $159=($158|0)<160;
 if($159){label=57;break;}else{label=58;break;}
 case 57: 
 var $161=HEAP32[(($__dc_i)>>2)];
 var $162=(($155+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$162;
 HEAP32[(($155)>>2)]=$161;
 label=58;break;
 case 58: 
 var $163=HEAP32[(($__a_end_i)>>2)];
 var $164=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$163,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=36;break; }
 case 59: 
 HEAP32[(($__v)>>2)]=$164;
 var $166=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$166,$__err);
 if($46){var $179=0;label=63;break;}else{label=60;break;}
 case 60: 
 var $168=(($45+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($45+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=61;break;}else{var $179=$45;label=63;break;}
 case 61: 
 var $173=$45;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=36;break; }
 case 62: 
 var $178=($177|0)==-1;
 var $_=($178?0:$45);
 var $179=$_;label=63;break;
 case 63: 
 var $179;
 var $180=($179|0)==0;
 var $181=($_pre_i2_i_i_i|0)==0;
 if($181){label=68;break;}else{label=64;break;}
 case 64: 
 var $183=(($_pre_i2_i_i_i+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($_pre_i2_i_i_i+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 if($180){label=71;break;}else{label=70;break;}
 case 66: 
 var $188=$_pre_i2_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=36;break; }
 case 67: 
 var $193=($192|0)==-1;
 if($193){label=68;break;}else{label=69;break;}
 case 68: 
 if($180){label=70;break;}else{label=71;break;}
 case 69: 
 if($180){label=71;break;}else{label=70;break;}
 case 70: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=71;break;
 case 71: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$179;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $199=HEAP8[($7)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=74;break;}else{label=72;break;}
 case 72: 
 var $203=(($__buf_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)==0;
 if($205){label=74;break;}else{label=73;break;}
 case 73: 
 _free($204);
 label=74;break;
 case 74: 
 var $207=HEAP8[($6)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=77;break;}else{label=75;break;}
 case 75: 
 var $211=(($__grouping_i+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=77;break;}else{label=76;break;}
 case 76: 
 _free($212);
 label=77;break;
 case 77: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[($7)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre30_i=$__buf_i;
 var $_pre31_i=(($_pre30_i+1)|0);
 var $26=$22;var $_pre_phi32_i=$_pre31_i;var $_pre_phi34_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre33_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi32_i=$25;var $_pre_phi34_i=$_pre33_i;label=9;break;
 case 9: 
 var $_pre_phi34_i;
 var $_pre_phi32_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 21: 
 var $_sroa_06_2;
 var $61=HEAP32[(($__a_end_i)>>2)];
 var $62=$61;
 var $63=$__a_0_i;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($7)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($30)>>2)];
 var $73=$69;label=24;break;
 case 23: 
 var $71=($65&255);
 var $72=$71>>>1;
 var $73=$72;label=24;break;
 case 24: 
 var $73;
 var $74=($64|0)==($73|0);
 if($74){label=25;break;}else{var $__a_1_i=$__a_0_i;label=44;break;}
 case 25: 
 if($67){label=27;break;}else{label=26;break;}
 case 26: 
 var $77=HEAP32[(($30)>>2)];
 var $81=$77;label=28;break;
 case 27: 
 var $79=($65&255);
 var $80=$79>>>1;
 var $81=$80;label=28;break;
 case 28: 
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $83=HEAP8[($7)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($29)>>2)];
 var $88=$87&-2;
 var $phitmp_i19_i=((($88)-(1))|0);
 var $89=$phitmp_i19_i;label=31;break;
 case 31: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $90=HEAP8[($7)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($_pre_phi34_i)>>2)];
 var $95=$94;label=34;break;
 case 34: 
 var $95;
 var $96=(($95+$81)|0);
 HEAP32[(($__a_end_i)>>2)]=$96;
 var $__a_1_i=$95;label=44;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=(($__buf_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=40;break;}else{label=39;break;}
 case 39: 
 _free($103);
 label=40;break;
 case 40: 
 var $106=HEAP8[($6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(($__grouping_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=43;break;}else{label=42;break;}
 case 42: 
 _free($111);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi_i$0)
 case 44: 
 var $__a_1_i;
 var $114=(($45+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($45+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=45;break;}else{label=47;break;}
 case 45: 
 var $120=$45;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=35;break; }
 case 46: 
 var $extract_t_i_i=(($124)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=48;break;
 case 47: 
 var $126=HEAP8[($115)];
 var $_0_i_off0_i_i=$126;label=48;break;
 case 48: 
 var $_0_i_off0_i_i;
 var $128=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $129=($128|0)==0;
 if($129){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 var $135=$45;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 51: 
 var $141=(($131+1)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[($6)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=54;break;}else{label=53;break;}
 case 53: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=55;break;
 case 54: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=55;break;
 case 55: 
 var $152;
 var $153=($152|0)==0;
 if($153){label=58;break;}else{label=56;break;}
 case 56: 
 var $155=HEAP32[(($__g_end_i)>>2)];
 var $156=$155;
 var $157=$__g_i;
 var $158=((($156)-($157))|0);
 var $159=($158|0)<160;
 if($159){label=57;break;}else{label=58;break;}
 case 57: 
 var $161=HEAP32[(($__dc_i)>>2)];
 var $162=(($155+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$162;
 HEAP32[(($155)>>2)]=$161;
 label=58;break;
 case 58: 
 var $163=HEAP32[(($__a_end_i)>>2)];
 var $164$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$163,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $164$0=$164$r;var $164$1=tempRet0;if (!__THREW__) { label=59;break; } else { label=36;break; }
 case 59: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$164$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$164$1;
 var $166=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$166,$__err);
 if($46){var $179=0;label=63;break;}else{label=60;break;}
 case 60: 
 var $168=(($45+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($45+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=61;break;}else{var $179=$45;label=63;break;}
 case 61: 
 var $173=$45;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=36;break; }
 case 62: 
 var $178=($177|0)==-1;
 var $_=($178?0:$45);
 var $179=$_;label=63;break;
 case 63: 
 var $179;
 var $180=($179|0)==0;
 var $181=($_pre_i2_i_i_i|0)==0;
 if($181){label=68;break;}else{label=64;break;}
 case 64: 
 var $183=(($_pre_i2_i_i_i+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($_pre_i2_i_i_i+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 if($180){label=71;break;}else{label=70;break;}
 case 66: 
 var $188=$_pre_i2_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=36;break; }
 case 67: 
 var $193=($192|0)==-1;
 if($193){label=68;break;}else{label=69;break;}
 case 68: 
 if($180){label=70;break;}else{label=71;break;}
 case 69: 
 if($180){label=71;break;}else{label=70;break;}
 case 70: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=71;break;
 case 71: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$179;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $199=HEAP8[($7)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=74;break;}else{label=72;break;}
 case 72: 
 var $203=(($__buf_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)==0;
 if($205){label=74;break;}else{label=73;break;}
 case 73: 
 _free($204);
 label=74;break;
 case 74: 
 var $207=HEAP8[($6)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=77;break;}else{label=75;break;}
 case 75: 
 var $211=(($__grouping_i+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=77;break;}else{label=76;break;}
 case 76: 
 _free($212);
 label=77;break;
 case 77: 
 var $$etemp$11$0=26;
 var $$etemp$11$1=0;

 var $$etemp$12$0=1;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[($7)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre30_i=$__buf_i;
 var $_pre31_i=(($_pre30_i+1)|0);
 var $26=$22;var $_pre_phi32_i=$_pre31_i;var $_pre_phi34_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre33_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi32_i=$25;var $_pre_phi34_i=$_pre33_i;label=9;break;
 case 9: 
 var $_pre_phi34_i;
 var $_pre_phi32_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 21: 
 var $_sroa_06_2;
 var $61=HEAP32[(($__a_end_i)>>2)];
 var $62=$61;
 var $63=$__a_0_i;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($7)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($30)>>2)];
 var $73=$69;label=24;break;
 case 23: 
 var $71=($65&255);
 var $72=$71>>>1;
 var $73=$72;label=24;break;
 case 24: 
 var $73;
 var $74=($64|0)==($73|0);
 if($74){label=25;break;}else{var $__a_1_i=$__a_0_i;label=44;break;}
 case 25: 
 if($67){label=27;break;}else{label=26;break;}
 case 26: 
 var $77=HEAP32[(($30)>>2)];
 var $81=$77;label=28;break;
 case 27: 
 var $79=($65&255);
 var $80=$79>>>1;
 var $81=$80;label=28;break;
 case 28: 
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $83=HEAP8[($7)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($29)>>2)];
 var $88=$87&-2;
 var $phitmp_i19_i=((($88)-(1))|0);
 var $89=$phitmp_i19_i;label=31;break;
 case 31: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $90=HEAP8[($7)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($_pre_phi34_i)>>2)];
 var $95=$94;label=34;break;
 case 34: 
 var $95;
 var $96=(($95+$81)|0);
 HEAP32[(($__a_end_i)>>2)]=$96;
 var $__a_1_i=$95;label=44;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=(($__buf_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=40;break;}else{label=39;break;}
 case 39: 
 _free($103);
 label=40;break;
 case 40: 
 var $106=HEAP8[($6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(($__grouping_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=43;break;}else{label=42;break;}
 case 42: 
 _free($111);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi_i$0)
 case 44: 
 var $__a_1_i;
 var $114=(($45+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($45+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=45;break;}else{label=47;break;}
 case 45: 
 var $120=$45;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=35;break; }
 case 46: 
 var $extract_t_i_i=(($124)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=48;break;
 case 47: 
 var $126=HEAP8[($115)];
 var $_0_i_off0_i_i=$126;label=48;break;
 case 48: 
 var $_0_i_off0_i_i;
 var $128=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $129=($128|0)==0;
 if($129){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 var $135=$45;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 51: 
 var $141=(($131+1)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[($6)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=54;break;}else{label=53;break;}
 case 53: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=55;break;
 case 54: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=55;break;
 case 55: 
 var $152;
 var $153=($152|0)==0;
 if($153){label=58;break;}else{label=56;break;}
 case 56: 
 var $155=HEAP32[(($__g_end_i)>>2)];
 var $156=$155;
 var $157=$__g_i;
 var $158=((($156)-($157))|0);
 var $159=($158|0)<160;
 if($159){label=57;break;}else{label=58;break;}
 case 57: 
 var $161=HEAP32[(($__dc_i)>>2)];
 var $162=(($155+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$162;
 HEAP32[(($155)>>2)]=$161;
 label=58;break;
 case 58: 
 var $163=HEAP32[(($__a_end_i)>>2)];
 var $164=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$163,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=36;break; }
 case 59: 
 HEAP16[(($__v)>>1)]=$164;
 var $166=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$166,$__err);
 if($46){var $179=0;label=63;break;}else{label=60;break;}
 case 60: 
 var $168=(($45+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($45+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=61;break;}else{var $179=$45;label=63;break;}
 case 61: 
 var $173=$45;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=36;break; }
 case 62: 
 var $178=($177|0)==-1;
 var $_=($178?0:$45);
 var $179=$_;label=63;break;
 case 63: 
 var $179;
 var $180=($179|0)==0;
 var $181=($_pre_i2_i_i_i|0)==0;
 if($181){label=68;break;}else{label=64;break;}
 case 64: 
 var $183=(($_pre_i2_i_i_i+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($_pre_i2_i_i_i+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 if($180){label=71;break;}else{label=70;break;}
 case 66: 
 var $188=$_pre_i2_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=36;break; }
 case 67: 
 var $193=($192|0)==-1;
 if($193){label=68;break;}else{label=69;break;}
 case 68: 
 if($180){label=70;break;}else{label=71;break;}
 case 69: 
 if($180){label=71;break;}else{label=70;break;}
 case 70: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=71;break;
 case 71: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$179;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $199=HEAP8[($7)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=74;break;}else{label=72;break;}
 case 72: 
 var $203=(($__buf_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)==0;
 if($205){label=74;break;}else{label=73;break;}
 case 73: 
 _free($204);
 label=74;break;
 case 74: 
 var $207=HEAP8[($6)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=77;break;}else{label=75;break;}
 case 75: 
 var $211=(($__grouping_i+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=77;break;}else{label=76;break;}
 case 76: 
 _free($212);
 label=77;break;
 case 77: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[($7)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre30_i=$__buf_i;
 var $_pre31_i=(($_pre30_i+1)|0);
 var $26=$22;var $_pre_phi32_i=$_pre31_i;var $_pre_phi34_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre33_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi32_i=$25;var $_pre_phi34_i=$_pre33_i;label=9;break;
 case 9: 
 var $_pre_phi34_i;
 var $_pre_phi32_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 21: 
 var $_sroa_06_2;
 var $61=HEAP32[(($__a_end_i)>>2)];
 var $62=$61;
 var $63=$__a_0_i;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($7)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($30)>>2)];
 var $73=$69;label=24;break;
 case 23: 
 var $71=($65&255);
 var $72=$71>>>1;
 var $73=$72;label=24;break;
 case 24: 
 var $73;
 var $74=($64|0)==($73|0);
 if($74){label=25;break;}else{var $__a_1_i=$__a_0_i;label=44;break;}
 case 25: 
 if($67){label=27;break;}else{label=26;break;}
 case 26: 
 var $77=HEAP32[(($30)>>2)];
 var $81=$77;label=28;break;
 case 27: 
 var $79=($65&255);
 var $80=$79>>>1;
 var $81=$80;label=28;break;
 case 28: 
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $83=HEAP8[($7)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($29)>>2)];
 var $88=$87&-2;
 var $phitmp_i19_i=((($88)-(1))|0);
 var $89=$phitmp_i19_i;label=31;break;
 case 31: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $90=HEAP8[($7)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($_pre_phi34_i)>>2)];
 var $95=$94;label=34;break;
 case 34: 
 var $95;
 var $96=(($95+$81)|0);
 HEAP32[(($__a_end_i)>>2)]=$96;
 var $__a_1_i=$95;label=44;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=(($__buf_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=40;break;}else{label=39;break;}
 case 39: 
 _free($103);
 label=40;break;
 case 40: 
 var $106=HEAP8[($6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(($__grouping_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=43;break;}else{label=42;break;}
 case 42: 
 _free($111);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi_i$0)
 case 44: 
 var $__a_1_i;
 var $114=(($45+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($45+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=45;break;}else{label=47;break;}
 case 45: 
 var $120=$45;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=35;break; }
 case 46: 
 var $extract_t_i_i=(($124)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=48;break;
 case 47: 
 var $126=HEAP8[($115)];
 var $_0_i_off0_i_i=$126;label=48;break;
 case 48: 
 var $_0_i_off0_i_i;
 var $128=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $129=($128|0)==0;
 if($129){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 var $135=$45;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 51: 
 var $141=(($131+1)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[($6)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=54;break;}else{label=53;break;}
 case 53: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=55;break;
 case 54: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=55;break;
 case 55: 
 var $152;
 var $153=($152|0)==0;
 if($153){label=58;break;}else{label=56;break;}
 case 56: 
 var $155=HEAP32[(($__g_end_i)>>2)];
 var $156=$155;
 var $157=$__g_i;
 var $158=((($156)-($157))|0);
 var $159=($158|0)<160;
 if($159){label=57;break;}else{label=58;break;}
 case 57: 
 var $161=HEAP32[(($__dc_i)>>2)];
 var $162=(($155+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$162;
 HEAP32[(($155)>>2)]=$161;
 label=58;break;
 case 58: 
 var $163=HEAP32[(($__a_end_i)>>2)];
 var $164=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$163,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=36;break; }
 case 59: 
 HEAP32[(($__v)>>2)]=$164;
 var $166=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$166,$__err);
 if($46){var $179=0;label=63;break;}else{label=60;break;}
 case 60: 
 var $168=(($45+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($45+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=61;break;}else{var $179=$45;label=63;break;}
 case 61: 
 var $173=$45;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=36;break; }
 case 62: 
 var $178=($177|0)==-1;
 var $_=($178?0:$45);
 var $179=$_;label=63;break;
 case 63: 
 var $179;
 var $180=($179|0)==0;
 var $181=($_pre_i2_i_i_i|0)==0;
 if($181){label=68;break;}else{label=64;break;}
 case 64: 
 var $183=(($_pre_i2_i_i_i+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($_pre_i2_i_i_i+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 if($180){label=71;break;}else{label=70;break;}
 case 66: 
 var $188=$_pre_i2_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=36;break; }
 case 67: 
 var $193=($192|0)==-1;
 if($193){label=68;break;}else{label=69;break;}
 case 68: 
 if($180){label=70;break;}else{label=71;break;}
 case 69: 
 if($180){label=71;break;}else{label=70;break;}
 case 70: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=71;break;
 case 71: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$179;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $199=HEAP8[($7)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=74;break;}else{label=72;break;}
 case 72: 
 var $203=(($__buf_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)==0;
 if($205){label=74;break;}else{label=73;break;}
 case 73: 
 _free($204);
 label=74;break;
 case 74: 
 var $207=HEAP8[($6)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=77;break;}else{label=75;break;}
 case 75: 
 var $211=(($__grouping_i+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=77;break;}else{label=76;break;}
 case 76: 
 _free($212);
 label=77;break;
 case 77: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[($7)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre30_i=$__buf_i;
 var $_pre31_i=(($_pre30_i+1)|0);
 var $26=$22;var $_pre_phi32_i=$_pre31_i;var $_pre_phi34_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre33_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi32_i=$25;var $_pre_phi34_i=$_pre33_i;label=9;break;
 case 9: 
 var $_pre_phi34_i;
 var $_pre_phi32_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 21: 
 var $_sroa_06_2;
 var $61=HEAP32[(($__a_end_i)>>2)];
 var $62=$61;
 var $63=$__a_0_i;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($7)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($30)>>2)];
 var $73=$69;label=24;break;
 case 23: 
 var $71=($65&255);
 var $72=$71>>>1;
 var $73=$72;label=24;break;
 case 24: 
 var $73;
 var $74=($64|0)==($73|0);
 if($74){label=25;break;}else{var $__a_1_i=$__a_0_i;label=44;break;}
 case 25: 
 if($67){label=27;break;}else{label=26;break;}
 case 26: 
 var $77=HEAP32[(($30)>>2)];
 var $81=$77;label=28;break;
 case 27: 
 var $79=($65&255);
 var $80=$79>>>1;
 var $81=$80;label=28;break;
 case 28: 
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $83=HEAP8[($7)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($29)>>2)];
 var $88=$87&-2;
 var $phitmp_i19_i=((($88)-(1))|0);
 var $89=$phitmp_i19_i;label=31;break;
 case 31: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $90=HEAP8[($7)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($_pre_phi34_i)>>2)];
 var $95=$94;label=34;break;
 case 34: 
 var $95;
 var $96=(($95+$81)|0);
 HEAP32[(($__a_end_i)>>2)]=$96;
 var $__a_1_i=$95;label=44;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=(($__buf_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=40;break;}else{label=39;break;}
 case 39: 
 _free($103);
 label=40;break;
 case 40: 
 var $106=HEAP8[($6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(($__grouping_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=43;break;}else{label=42;break;}
 case 42: 
 _free($111);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi_i$0)
 case 44: 
 var $__a_1_i;
 var $114=(($45+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($45+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=45;break;}else{label=47;break;}
 case 45: 
 var $120=$45;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=35;break; }
 case 46: 
 var $extract_t_i_i=(($124)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=48;break;
 case 47: 
 var $126=HEAP8[($115)];
 var $_0_i_off0_i_i=$126;label=48;break;
 case 48: 
 var $_0_i_off0_i_i;
 var $128=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $129=($128|0)==0;
 if($129){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 var $135=$45;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 51: 
 var $141=(($131+1)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[($6)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=54;break;}else{label=53;break;}
 case 53: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=55;break;
 case 54: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=55;break;
 case 55: 
 var $152;
 var $153=($152|0)==0;
 if($153){label=58;break;}else{label=56;break;}
 case 56: 
 var $155=HEAP32[(($__g_end_i)>>2)];
 var $156=$155;
 var $157=$__g_i;
 var $158=((($156)-($157))|0);
 var $159=($158|0)<160;
 if($159){label=57;break;}else{label=58;break;}
 case 57: 
 var $161=HEAP32[(($__dc_i)>>2)];
 var $162=(($155+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$162;
 HEAP32[(($155)>>2)]=$161;
 label=58;break;
 case 58: 
 var $163=HEAP32[(($__a_end_i)>>2)];
 var $164=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$163,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=36;break; }
 case 59: 
 HEAP32[(($__v)>>2)]=$164;
 var $166=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$166,$__err);
 if($46){var $179=0;label=63;break;}else{label=60;break;}
 case 60: 
 var $168=(($45+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($45+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=61;break;}else{var $179=$45;label=63;break;}
 case 61: 
 var $173=$45;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=36;break; }
 case 62: 
 var $178=($177|0)==-1;
 var $_=($178?0:$45);
 var $179=$_;label=63;break;
 case 63: 
 var $179;
 var $180=($179|0)==0;
 var $181=($_pre_i2_i_i_i|0)==0;
 if($181){label=68;break;}else{label=64;break;}
 case 64: 
 var $183=(($_pre_i2_i_i_i+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($_pre_i2_i_i_i+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 if($180){label=71;break;}else{label=70;break;}
 case 66: 
 var $188=$_pre_i2_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=36;break; }
 case 67: 
 var $193=($192|0)==-1;
 if($193){label=68;break;}else{label=69;break;}
 case 68: 
 if($180){label=70;break;}else{label=71;break;}
 case 69: 
 if($180){label=71;break;}else{label=70;break;}
 case 70: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=71;break;
 case 71: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$179;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $199=HEAP8[($7)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=74;break;}else{label=72;break;}
 case 72: 
 var $203=(($__buf_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)==0;
 if($205){label=74;break;}else{label=73;break;}
 case 73: 
 _free($204);
 label=74;break;
 case 74: 
 var $207=HEAP8[($6)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=77;break;}else{label=75;break;}
 case 75: 
 var $211=(($__grouping_i+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=77;break;}else{label=76;break;}
 case 76: 
 _free($212);
 label=77;break;
 case 77: 
 var $$etemp$9$0=26;
 var $$etemp$9$1=0;

 var $$etemp$10$0=1;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+256)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(32);
 var $__grouping_i=(sp)+(40);
 var $__buf_i=(sp)+(56);
 var $__a_end_i=(sp)+(72);
 var $__g_i=(sp)+(80);
 var $__g_end_i=(sp)+(240);
 var $__dc_i=(sp)+(248);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=26;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $6=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $7=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $8=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $9=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $10=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($__grouping_i,$__iob,$5,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=36;break; }
 case 6: 
 var $17=HEAP8[($7)];
 var $18=$17&1;
 var $19=(($18<<24)>>24)==0;
 if($19){label=8;break;}else{label=7;break;}
 case 7: 
 var $21=(($__buf_i+8)|0);
 var $22=HEAP32[(($21)>>2)];
 var $_pre30_i=$__buf_i;
 var $_pre31_i=(($_pre30_i+1)|0);
 var $26=$22;var $_pre_phi32_i=$_pre31_i;var $_pre_phi34_i=$21;label=9;break;
 case 8: 
 var $24=$__buf_i;
 var $25=(($24+1)|0);
 var $_pre33_i=(($__buf_i+8)|0);
 var $26=$25;var $_pre_phi32_i=$25;var $_pre_phi34_i=$_pre33_i;label=9;break;
 case 9: 
 var $_pre_phi34_i;
 var $_pre_phi32_i;
 var $26;
 HEAP32[(($__a_end_i)>>2)]=$26;
 var $27=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $28=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$28;
 HEAP32[(($__dc_i)>>2)]=0;
 var $29=(($__buf_i)|0);
 var $30=(($__buf_i+4)|0);
 var $31=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$26;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $32=($_pre_i_i_i4_i|0)==0;
 if($32){var $45=0;label=14;break;}else{label=11;break;}
 case 11: 
 var $34=(($_pre_i_i_i4_i+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($_pre_i_i_i4_i+16)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($35|0)==($37|0);
 if($38){label=12;break;}else{var $45=$_pre_i_i_i4_i;label=14;break;}
 case 12: 
 var $39=$_pre_i_i_i4_i;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$42]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=35;break; }
 case 13: 
 var $44=($43|0)==-1;
 var $__pre_i_i_i4_i=($44?0:$_pre_i_i_i4_i);
 var $45=$__pre_i_i_i4_i;label=14;break;
 case 14: 
 var $45;
 var $46=($45|0)==0;
 var $47=($_sroa_06_0|0)==0;
 if($47){label=19;break;}else{label=15;break;}
 case 15: 
 var $49=(($_sroa_06_0+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=(($_sroa_06_0+16)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=($50|0)==($52|0);
 if($53){label=17;break;}else{label=16;break;}
 case 16: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 17: 
 var $54=$_sroa_06_0;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+36)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=35;break; }
 case 18: 
 var $59=($58|0)==-1;
 if($59){label=19;break;}else{label=20;break;}
 case 19: 
 if($46){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=21;break;}
 case 20: 
 if($46){var $_sroa_06_2=$_sroa_06_0;label=21;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=52;break;}
 case 21: 
 var $_sroa_06_2;
 var $61=HEAP32[(($__a_end_i)>>2)];
 var $62=$61;
 var $63=$__a_0_i;
 var $64=((($62)-($63))|0);
 var $65=HEAP8[($7)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($30)>>2)];
 var $73=$69;label=24;break;
 case 23: 
 var $71=($65&255);
 var $72=$71>>>1;
 var $73=$72;label=24;break;
 case 24: 
 var $73;
 var $74=($64|0)==($73|0);
 if($74){label=25;break;}else{var $__a_1_i=$__a_0_i;label=44;break;}
 case 25: 
 if($67){label=27;break;}else{label=26;break;}
 case 26: 
 var $77=HEAP32[(($30)>>2)];
 var $81=$77;label=28;break;
 case 27: 
 var $79=($65&255);
 var $80=$79>>>1;
 var $81=$80;label=28;break;
 case 28: 
 var $81;
 var $82=$81<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$82) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $83=HEAP8[($7)];
 var $84=$83&1;
 var $85=(($84<<24)>>24)==0;
 if($85){var $89=10;label=31;break;}else{label=30;break;}
 case 30: 
 var $87=HEAP32[(($29)>>2)];
 var $88=$87&-2;
 var $phitmp_i19_i=((($88)-(1))|0);
 var $89=$phitmp_i19_i;label=31;break;
 case 31: 
 var $89;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=32;break; } else { label=35;break; }
 case 32: 
 var $90=HEAP8[($7)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){var $95=$_pre_phi32_i;label=34;break;}else{label=33;break;}
 case 33: 
 var $94=HEAP32[(($_pre_phi34_i)>>2)];
 var $95=$94;label=34;break;
 case 34: 
 var $95;
 var $96=(($95+$81)|0);
 HEAP32[(($__a_end_i)>>2)]=$96;
 var $__a_1_i=$95;label=44;break;
 case 35: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=37;break;
 case 36: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=37;break;
 case 37: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=(($__buf_i+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=40;break;}else{label=39;break;}
 case 39: 
 _free($103);
 label=40;break;
 case 40: 
 var $106=HEAP8[($6)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(($__grouping_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=43;break;}else{label=42;break;}
 case 42: 
 _free($111);
 label=43;break;
 case 43: 
 ___resumeException($lpad_phi_i$0)
 case 44: 
 var $__a_1_i;
 var $114=(($45+12)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($45+16)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($115|0)==($117|0);
 if($118){label=45;break;}else{label=47;break;}
 case 45: 
 var $120=$45;
 var $121=HEAP32[(($120)>>2)];
 var $122=(($121+36)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$123]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=35;break; }
 case 46: 
 var $extract_t_i_i=(($124)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=48;break;
 case 47: 
 var $126=HEAP8[($115)];
 var $_0_i_off0_i_i=$126;label=48;break;
 case 48: 
 var $_0_i_off0_i_i;
 var $128=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$31,$__grouping_i,$28,$__g_end_i,$5);
 var $129=($128|0)==0;
 if($129){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $131=HEAP32[(($114)>>2)];
 var $132=HEAP32[(($116)>>2)];
 var $133=($131|0)==($132|0);
 if($133){label=50;break;}else{label=51;break;}
 case 50: 
 var $135=$45;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+40)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=35;break; }
 case 51: 
 var $141=(($131+1)|0);
 HEAP32[(($114)>>2)]=$141;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$45;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $143=HEAP8[($6)];
 var $144=$143&1;
 var $145=(($144<<24)>>24)==0;
 if($145){label=54;break;}else{label=53;break;}
 case 53: 
 var $147=(($__grouping_i+4)|0);
 var $148=HEAP32[(($147)>>2)];
 var $152=$148;label=55;break;
 case 54: 
 var $150=($143&255);
 var $151=$150>>>1;
 var $152=$151;label=55;break;
 case 55: 
 var $152;
 var $153=($152|0)==0;
 if($153){label=58;break;}else{label=56;break;}
 case 56: 
 var $155=HEAP32[(($__g_end_i)>>2)];
 var $156=$155;
 var $157=$__g_i;
 var $158=((($156)-($157))|0);
 var $159=($158|0)<160;
 if($159){label=57;break;}else{label=58;break;}
 case 57: 
 var $161=HEAP32[(($__dc_i)>>2)];
 var $162=(($155+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$162;
 HEAP32[(($155)>>2)]=$161;
 label=58;break;
 case 58: 
 var $163=HEAP32[(($__a_end_i)>>2)];
 var $164$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$163,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $164$0=$164$r;var $164$1=tempRet0;if (!__THREW__) { label=59;break; } else { label=36;break; }
 case 59: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$164$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$164$1;
 var $166=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$28,$166,$__err);
 if($46){var $179=0;label=63;break;}else{label=60;break;}
 case 60: 
 var $168=(($45+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($45+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=61;break;}else{var $179=$45;label=63;break;}
 case 61: 
 var $173=$45;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$176]($45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=62;break; } else { label=36;break; }
 case 62: 
 var $178=($177|0)==-1;
 var $_=($178?0:$45);
 var $179=$_;label=63;break;
 case 63: 
 var $179;
 var $180=($179|0)==0;
 var $181=($_pre_i2_i_i_i|0)==0;
 if($181){label=68;break;}else{label=64;break;}
 case 64: 
 var $183=(($_pre_i2_i_i_i+12)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=(($_pre_i2_i_i_i+16)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($184|0)==($186|0);
 if($187){label=66;break;}else{label=65;break;}
 case 65: 
 if($180){label=71;break;}else{label=70;break;}
 case 66: 
 var $188=$_pre_i2_i_i_i;
 var $189=HEAP32[(($188)>>2)];
 var $190=(($189+36)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$191]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=36;break; }
 case 67: 
 var $193=($192|0)==-1;
 if($193){label=68;break;}else{label=69;break;}
 case 68: 
 if($180){label=70;break;}else{label=71;break;}
 case 69: 
 if($180){label=71;break;}else{label=70;break;}
 case 70: 
 var $195=HEAP32[(($__err)>>2)];
 var $196=$195|2;
 HEAP32[(($__err)>>2)]=$196;
 label=71;break;
 case 71: 
 var $198=(($agg_result)|0);
 HEAP32[(($198)>>2)]=$179;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $199=HEAP8[($7)];
 var $200=$199&1;
 var $201=(($200<<24)>>24)==0;
 if($201){label=74;break;}else{label=72;break;}
 case 72: 
 var $203=(($__buf_i+8)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=($204|0)==0;
 if($205){label=74;break;}else{label=73;break;}
 case 73: 
 _free($204);
 label=74;break;
 case 74: 
 var $207=HEAP8[($6)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=77;break;}else{label=75;break;}
 case 75: 
 var $211=(($__grouping_i+8)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==0;
 if($213){label=77;break;}else{label=76;break;}
 case 76: 
 _free($212);
 label=77;break;
 case 77: 
 var $$etemp$11$0=26;
 var $$etemp$11$1=0;

 var $$etemp$12$0=1;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[($7)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $20=$16;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi33_i=$19;var $_pre_phi35_i=$_pre34_i;label=5;break;
 case 5: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[($__decimal_point_i)];
 var $26=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$20;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i4_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i4_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i4_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i4_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i4_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i4_i=($39?0:$_pre_i_i_i4_i);
 var $40=$__pre_i_i_i4_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=48;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=48;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=48;break;}
 case 17: 
 var $_sroa_06_2;
 var $56=HEAP32[(($__a_end_i)>>2)];
 var $57=$56;
 var $58=$__a_0_i;
 var $59=((($57)-($58))|0);
 var $60=HEAP8[($7)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=HEAP32[(($24)>>2)];
 var $68=$64;label=20;break;
 case 19: 
 var $66=($60&255);
 var $67=$66>>>1;
 var $68=$67;label=20;break;
 case 20: 
 var $68;
 var $69=($59|0)==($68|0);
 if($69){label=21;break;}else{var $__a_1_i=$__a_0_i;label=40;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $72=HEAP32[(($24)>>2)];
 var $76=$72;label=24;break;
 case 23: 
 var $74=($60&255);
 var $75=$74>>>1;
 var $76=$75;label=24;break;
 case 24: 
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $78=HEAP8[($7)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $82=HEAP32[(($23)>>2)];
 var $83=$82&-2;
 var $phitmp_i19_i=((($83)-(1))|0);
 var $84=$phitmp_i19_i;label=27;break;
 case 27: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $85=HEAP8[($7)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi33_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($_pre_phi35_i)>>2)];
 var $90=$89;label=30;break;
 case 30: 
 var $90;
 var $91=(($90+$76)|0);
 HEAP32[(($__a_end_i)>>2)]=$91;
 var $__a_1_i=$90;label=40;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $93=HEAP8[($7)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=36;break;}else{label=34;break;}
 case 34: 
 var $97=(($__buf_i+8)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 if($99){label=36;break;}else{label=35;break;}
 case 35: 
 _free($98);
 label=36;break;
 case 36: 
 var $101=HEAP8[($6)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=39;break;}else{label=37;break;}
 case 37: 
 var $105=(($__grouping_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==0;
 if($107){label=39;break;}else{label=38;break;}
 case 38: 
 _free($106);
 label=39;break;
 case 39: 
 ___resumeException($lpad_phi_i$0)
 case 40: 
 var $__a_1_i;
 var $109=(($40+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($40+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$40;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=31;break; }
 case 42: 
 var $extract_t_i_i=(($119)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i_i;
 var $123=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $124=($123|0)==0;
 if($124){label=45;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=48;break;}
 case 45: 
 var $126=HEAP32[(($109)>>2)];
 var $127=HEAP32[(($111)>>2)];
 var $128=($126|0)==($127|0);
 if($128){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=$40;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+40)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$133]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 47: 
 var $136=(($126+1)|0);
 HEAP32[(($109)>>2)]=$136;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 48: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $138=HEAP8[($6)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=50;break;}else{label=49;break;}
 case 49: 
 var $142=(($__grouping_i+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $147=$143;label=51;break;
 case 50: 
 var $145=($138&255);
 var $146=$145>>>1;
 var $147=$146;label=51;break;
 case 51: 
 var $147;
 var $148=($147|0)==0;
 if($148){label=55;break;}else{label=52;break;}
 case 52: 
 var $150=HEAP8[($__in_units_i)];
 var $151=(($150<<24)>>24)==0;
 if($151){label=55;break;}else{label=53;break;}
 case 53: 
 var $153=HEAP32[(($__g_end_i)>>2)];
 var $154=$153;
 var $155=$__g_i;
 var $156=((($154)-($155))|0);
 var $157=($156|0)<160;
 if($157){label=54;break;}else{label=55;break;}
 case 54: 
 var $159=HEAP32[(($__dc_i)>>2)];
 var $160=(($153+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$160;
 HEAP32[(($153)>>2)]=$159;
 label=55;break;
 case 55: 
 var $161=HEAP32[(($__a_end_i)>>2)];
 var $162=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$161,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 HEAPF32[(($__v)>>2)]=$162;
 var $164=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$164,$__err);
 if($41){var $177=0;label=60;break;}else{label=57;break;}
 case 57: 
 var $166=(($40+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($40+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($167|0)==($169|0);
 if($170){label=58;break;}else{var $177=$40;label=60;break;}
 case 58: 
 var $171=$40;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+36)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=32;break; }
 case 59: 
 var $176=($175|0)==-1;
 var $_=($176?0:$40);
 var $177=$_;label=60;break;
 case 60: 
 var $177;
 var $178=($177|0)==0;
 var $179=($_pre_i2_i_i_i|0)==0;
 if($179){label=65;break;}else{label=61;break;}
 case 61: 
 var $181=(($_pre_i2_i_i_i+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($_pre_i2_i_i_i+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=63;break;}else{label=62;break;}
 case 62: 
 if($178){label=68;break;}else{label=67;break;}
 case 63: 
 var $186=$_pre_i2_i_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=32;break; }
 case 64: 
 var $191=($190|0)==-1;
 if($191){label=65;break;}else{label=66;break;}
 case 65: 
 if($178){label=67;break;}else{label=68;break;}
 case 66: 
 if($178){label=68;break;}else{label=67;break;}
 case 67: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=68;break;
 case 68: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$177;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $197=HEAP8[($7)];
 var $198=$197&1;
 var $199=(($198<<24)>>24)==0;
 if($199){label=71;break;}else{label=69;break;}
 case 69: 
 var $201=(($__buf_i+8)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($202|0)==0;
 if($203){label=71;break;}else{label=70;break;}
 case 70: 
 _free($202);
 label=71;break;
 case 71: 
 var $205=HEAP8[($6)];
 var $206=$205&1;
 var $207=(($206<<24)>>24)==0;
 if($207){label=74;break;}else{label=72;break;}
 case 72: 
 var $209=(($__grouping_i+8)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==0;
 if($211){label=74;break;}else{label=73;break;}
 case 73: 
 _free($210);
 label=74;break;
 case 74: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[($7)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $20=$16;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi33_i=$19;var $_pre_phi35_i=$_pre34_i;label=5;break;
 case 5: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[($__decimal_point_i)];
 var $26=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$20;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i4_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i4_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i4_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i4_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i4_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i4_i=($39?0:$_pre_i_i_i4_i);
 var $40=$__pre_i_i_i4_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=48;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=48;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=48;break;}
 case 17: 
 var $_sroa_06_2;
 var $56=HEAP32[(($__a_end_i)>>2)];
 var $57=$56;
 var $58=$__a_0_i;
 var $59=((($57)-($58))|0);
 var $60=HEAP8[($7)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=HEAP32[(($24)>>2)];
 var $68=$64;label=20;break;
 case 19: 
 var $66=($60&255);
 var $67=$66>>>1;
 var $68=$67;label=20;break;
 case 20: 
 var $68;
 var $69=($59|0)==($68|0);
 if($69){label=21;break;}else{var $__a_1_i=$__a_0_i;label=40;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $72=HEAP32[(($24)>>2)];
 var $76=$72;label=24;break;
 case 23: 
 var $74=($60&255);
 var $75=$74>>>1;
 var $76=$75;label=24;break;
 case 24: 
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $78=HEAP8[($7)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $82=HEAP32[(($23)>>2)];
 var $83=$82&-2;
 var $phitmp_i19_i=((($83)-(1))|0);
 var $84=$phitmp_i19_i;label=27;break;
 case 27: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $85=HEAP8[($7)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi33_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($_pre_phi35_i)>>2)];
 var $90=$89;label=30;break;
 case 30: 
 var $90;
 var $91=(($90+$76)|0);
 HEAP32[(($__a_end_i)>>2)]=$91;
 var $__a_1_i=$90;label=40;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $93=HEAP8[($7)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=36;break;}else{label=34;break;}
 case 34: 
 var $97=(($__buf_i+8)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 if($99){label=36;break;}else{label=35;break;}
 case 35: 
 _free($98);
 label=36;break;
 case 36: 
 var $101=HEAP8[($6)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=39;break;}else{label=37;break;}
 case 37: 
 var $105=(($__grouping_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==0;
 if($107){label=39;break;}else{label=38;break;}
 case 38: 
 _free($106);
 label=39;break;
 case 39: 
 ___resumeException($lpad_phi_i$0)
 case 40: 
 var $__a_1_i;
 var $109=(($40+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($40+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$40;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=31;break; }
 case 42: 
 var $extract_t_i_i=(($119)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i_i;
 var $123=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $124=($123|0)==0;
 if($124){label=45;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=48;break;}
 case 45: 
 var $126=HEAP32[(($109)>>2)];
 var $127=HEAP32[(($111)>>2)];
 var $128=($126|0)==($127|0);
 if($128){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=$40;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+40)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$133]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 47: 
 var $136=(($126+1)|0);
 HEAP32[(($109)>>2)]=$136;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 48: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $138=HEAP8[($6)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=50;break;}else{label=49;break;}
 case 49: 
 var $142=(($__grouping_i+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $147=$143;label=51;break;
 case 50: 
 var $145=($138&255);
 var $146=$145>>>1;
 var $147=$146;label=51;break;
 case 51: 
 var $147;
 var $148=($147|0)==0;
 if($148){label=55;break;}else{label=52;break;}
 case 52: 
 var $150=HEAP8[($__in_units_i)];
 var $151=(($150<<24)>>24)==0;
 if($151){label=55;break;}else{label=53;break;}
 case 53: 
 var $153=HEAP32[(($__g_end_i)>>2)];
 var $154=$153;
 var $155=$__g_i;
 var $156=((($154)-($155))|0);
 var $157=($156|0)<160;
 if($157){label=54;break;}else{label=55;break;}
 case 54: 
 var $159=HEAP32[(($__dc_i)>>2)];
 var $160=(($153+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$160;
 HEAP32[(($153)>>2)]=$159;
 label=55;break;
 case 55: 
 var $161=HEAP32[(($__a_end_i)>>2)];
 var $162=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$161,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 HEAPF64[(($__v)>>3)]=$162;
 var $164=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$164,$__err);
 if($41){var $177=0;label=60;break;}else{label=57;break;}
 case 57: 
 var $166=(($40+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($40+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($167|0)==($169|0);
 if($170){label=58;break;}else{var $177=$40;label=60;break;}
 case 58: 
 var $171=$40;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+36)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=32;break; }
 case 59: 
 var $176=($175|0)==-1;
 var $_=($176?0:$40);
 var $177=$_;label=60;break;
 case 60: 
 var $177;
 var $178=($177|0)==0;
 var $179=($_pre_i2_i_i_i|0)==0;
 if($179){label=65;break;}else{label=61;break;}
 case 61: 
 var $181=(($_pre_i2_i_i_i+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($_pre_i2_i_i_i+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=63;break;}else{label=62;break;}
 case 62: 
 if($178){label=68;break;}else{label=67;break;}
 case 63: 
 var $186=$_pre_i2_i_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=32;break; }
 case 64: 
 var $191=($190|0)==-1;
 if($191){label=65;break;}else{label=66;break;}
 case 65: 
 if($178){label=67;break;}else{label=68;break;}
 case 66: 
 if($178){label=68;break;}else{label=67;break;}
 case 67: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=68;break;
 case 68: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$177;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $197=HEAP8[($7)];
 var $198=$197&1;
 var $199=(($198<<24)>>24)==0;
 if($199){label=71;break;}else{label=69;break;}
 case 69: 
 var $201=(($__buf_i+8)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($202|0)==0;
 if($203){label=71;break;}else{label=70;break;}
 case 70: 
 _free($202);
 label=71;break;
 case 71: 
 var $205=HEAP8[($6)];
 var $206=$205&1;
 var $207=(($206<<24)>>24)==0;
 if($207){label=74;break;}else{label=72;break;}
 case 72: 
 var $209=(($__grouping_i+8)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==0;
 if($211){label=74;break;}else{label=73;break;}
 case 73: 
 _free($210);
 label=74;break;
 case 74: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+280)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(32);
 var $__thousands_sep_i=(sp)+(40);
 var $__grouping_i=(sp)+(48);
 var $__buf_i=(sp)+(64);
 var $__a_end_i=(sp)+(80);
 var $__g_i=(sp)+(88);
 var $__g_end_i=(sp)+(248);
 var $__dc_i=(sp)+(256);
 var $__in_units_i=(sp)+(264);
 var $__exp_i=(sp)+(272);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=(($__atoms_i)|0);
 var $$etemp$0$0=32;
 var $$etemp$0$1=0;

 var $$etemp$1$0=1;
 var $$etemp$1$1=0;

 var $$etemp$2$0=1;
 var $$etemp$2$1=0;

 var $6=$__grouping_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $7=$__buf_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $8=$__a_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $9=$__g_end_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $10=$__dc_i;
 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $$etemp$9$0=1;
 var $$etemp$9$1=0;

 __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($__grouping_i,$__iob,$5,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=32;break; }
 case 2: 
 var $11=HEAP8[($7)];
 var $12=$11&1;
 var $13=(($12<<24)>>24)==0;
 if($13){label=4;break;}else{label=3;break;}
 case 3: 
 var $15=(($__buf_i+8)|0);
 var $16=HEAP32[(($15)>>2)];
 var $_pre31_i=$__buf_i;
 var $_pre32_i=(($_pre31_i+1)|0);
 var $20=$16;var $_pre_phi33_i=$_pre32_i;var $_pre_phi35_i=$15;label=5;break;
 case 4: 
 var $18=$__buf_i;
 var $19=(($18+1)|0);
 var $_pre34_i=(($__buf_i+8)|0);
 var $20=$19;var $_pre_phi33_i=$19;var $_pre_phi35_i=$_pre34_i;label=5;break;
 case 5: 
 var $_pre_phi35_i;
 var $_pre_phi33_i;
 var $20;
 HEAP32[(($__a_end_i)>>2)]=$20;
 var $21=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $22=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$22;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $23=(($__buf_i)|0);
 var $24=(($__buf_i+4)|0);
 var $25=HEAP8[($__decimal_point_i)];
 var $26=HEAP8[($__thousands_sep_i)];
 var $__a_0_i=$20;var $_pre_i_i_i4_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i4_i;
 var $__a_0_i;
 var $27=($_pre_i_i_i4_i|0)==0;
 if($27){var $40=0;label=10;break;}else{label=7;break;}
 case 7: 
 var $29=(($_pre_i_i_i4_i+12)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=(($_pre_i_i_i4_i+16)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($30|0)==($32|0);
 if($33){label=8;break;}else{var $40=$_pre_i_i_i4_i;label=10;break;}
 case 8: 
 var $34=$_pre_i_i_i4_i;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+36)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($_pre_i_i_i4_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=31;break; }
 case 9: 
 var $39=($38|0)==-1;
 var $__pre_i_i_i4_i=($39?0:$_pre_i_i_i4_i);
 var $40=$__pre_i_i_i4_i;label=10;break;
 case 10: 
 var $40;
 var $41=($40|0)==0;
 var $42=($_sroa_06_0|0)==0;
 if($42){label=15;break;}else{label=11;break;}
 case 11: 
 var $44=(($_sroa_06_0+12)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(($_sroa_06_0+16)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($45|0)==($47|0);
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=48;break;}
 case 13: 
 var $49=$_sroa_06_0;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+36)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=31;break; }
 case 14: 
 var $54=($53|0)==-1;
 if($54){label=15;break;}else{label=16;break;}
 case 15: 
 if($41){var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=0;label=48;break;}else{var $_sroa_06_2=0;label=17;break;}
 case 16: 
 if($41){var $_sroa_06_2=$_sroa_06_0;label=17;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i2_i_i_i=$_sroa_06_0;label=48;break;}
 case 17: 
 var $_sroa_06_2;
 var $56=HEAP32[(($__a_end_i)>>2)];
 var $57=$56;
 var $58=$__a_0_i;
 var $59=((($57)-($58))|0);
 var $60=HEAP8[($7)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=19;break;}else{label=18;break;}
 case 18: 
 var $64=HEAP32[(($24)>>2)];
 var $68=$64;label=20;break;
 case 19: 
 var $66=($60&255);
 var $67=$66>>>1;
 var $68=$67;label=20;break;
 case 20: 
 var $68;
 var $69=($59|0)==($68|0);
 if($69){label=21;break;}else{var $__a_1_i=$__a_0_i;label=40;break;}
 case 21: 
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $72=HEAP32[(($24)>>2)];
 var $76=$72;label=24;break;
 case 23: 
 var $74=($60&255);
 var $75=$74>>>1;
 var $76=$75;label=24;break;
 case 24: 
 var $76;
 var $77=$76<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$77) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=31;break; }
 case 25: 
 var $78=HEAP8[($7)];
 var $79=$78&1;
 var $80=(($79<<24)>>24)==0;
 if($80){var $84=10;label=27;break;}else{label=26;break;}
 case 26: 
 var $82=HEAP32[(($23)>>2)];
 var $83=$82&-2;
 var $phitmp_i19_i=((($83)-(1))|0);
 var $84=$phitmp_i19_i;label=27;break;
 case 27: 
 var $84;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$84) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 28: 
 var $85=HEAP8[($7)];
 var $86=$85&1;
 var $87=(($86<<24)>>24)==0;
 if($87){var $90=$_pre_phi33_i;label=30;break;}else{label=29;break;}
 case 29: 
 var $89=HEAP32[(($_pre_phi35_i)>>2)];
 var $90=$89;label=30;break;
 case 30: 
 var $90;
 var $91=(($90+$76)|0);
 HEAP32[(($__a_end_i)>>2)]=$91;
 var $__a_1_i=$90;label=40;break;
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $93=HEAP8[($7)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=36;break;}else{label=34;break;}
 case 34: 
 var $97=(($__buf_i+8)|0);
 var $98=HEAP32[(($97)>>2)];
 var $99=($98|0)==0;
 if($99){label=36;break;}else{label=35;break;}
 case 35: 
 _free($98);
 label=36;break;
 case 36: 
 var $101=HEAP8[($6)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=39;break;}else{label=37;break;}
 case 37: 
 var $105=(($__grouping_i+8)|0);
 var $106=HEAP32[(($105)>>2)];
 var $107=($106|0)==0;
 if($107){label=39;break;}else{label=38;break;}
 case 38: 
 _free($106);
 label=39;break;
 case 39: 
 ___resumeException($lpad_phi_i$0)
 case 40: 
 var $__a_1_i;
 var $109=(($40+12)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=(($40+16)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($110|0)==($112|0);
 if($113){label=41;break;}else{label=43;break;}
 case 41: 
 var $115=$40;
 var $116=HEAP32[(($115)>>2)];
 var $117=(($116+36)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=31;break; }
 case 42: 
 var $extract_t_i_i=(($119)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=44;break;
 case 43: 
 var $121=HEAP8[($110)];
 var $_0_i_off0_i_i=$121;label=44;break;
 case 44: 
 var $_0_i_off0_i_i;
 var $123=__ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($_0_i_off0_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$25,$26,$__grouping_i,$22,$__g_end_i,$__dc_i,$5);
 var $124=($123|0)==0;
 if($124){label=45;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i2_i_i_i=$_sroa_06_2;label=48;break;}
 case 45: 
 var $126=HEAP32[(($109)>>2)];
 var $127=HEAP32[(($111)>>2)];
 var $128=($126|0)==($127|0);
 if($128){label=46;break;}else{label=47;break;}
 case 46: 
 var $130=$40;
 var $131=HEAP32[(($130)>>2)];
 var $132=(($131+40)|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$133]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=31;break; }
 case 47: 
 var $136=(($126+1)|0);
 HEAP32[(($109)>>2)]=$136;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i4_i=$40;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 48: 
 var $_pre_i2_i_i_i;
 var $__a_2_i;
 var $138=HEAP8[($6)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=50;break;}else{label=49;break;}
 case 49: 
 var $142=(($__grouping_i+4)|0);
 var $143=HEAP32[(($142)>>2)];
 var $147=$143;label=51;break;
 case 50: 
 var $145=($138&255);
 var $146=$145>>>1;
 var $147=$146;label=51;break;
 case 51: 
 var $147;
 var $148=($147|0)==0;
 if($148){label=55;break;}else{label=52;break;}
 case 52: 
 var $150=HEAP8[($__in_units_i)];
 var $151=(($150<<24)>>24)==0;
 if($151){label=55;break;}else{label=53;break;}
 case 53: 
 var $153=HEAP32[(($__g_end_i)>>2)];
 var $154=$153;
 var $155=$__g_i;
 var $156=((($154)-($155))|0);
 var $157=($156|0)<160;
 if($157){label=54;break;}else{label=55;break;}
 case 54: 
 var $159=HEAP32[(($__dc_i)>>2)];
 var $160=(($153+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$160;
 HEAP32[(($153)>>2)]=$159;
 label=55;break;
 case 55: 
 var $161=HEAP32[(($__a_end_i)>>2)];
 var $162=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$161,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=32;break; }
 case 56: 
 HEAPF64[(($__v)>>3)]=$162;
 var $164=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$22,$164,$__err);
 if($41){var $177=0;label=60;break;}else{label=57;break;}
 case 57: 
 var $166=(($40+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($40+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($167|0)==($169|0);
 if($170){label=58;break;}else{var $177=$40;label=60;break;}
 case 58: 
 var $171=$40;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+36)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=32;break; }
 case 59: 
 var $176=($175|0)==-1;
 var $_=($176?0:$40);
 var $177=$_;label=60;break;
 case 60: 
 var $177;
 var $178=($177|0)==0;
 var $179=($_pre_i2_i_i_i|0)==0;
 if($179){label=65;break;}else{label=61;break;}
 case 61: 
 var $181=(($_pre_i2_i_i_i+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($_pre_i2_i_i_i+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=63;break;}else{label=62;break;}
 case 62: 
 if($178){label=68;break;}else{label=67;break;}
 case 63: 
 var $186=$_pre_i2_i_i_i;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($_pre_i2_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=32;break; }
 case 64: 
 var $191=($190|0)==-1;
 if($191){label=65;break;}else{label=66;break;}
 case 65: 
 if($178){label=67;break;}else{label=68;break;}
 case 66: 
 if($178){label=68;break;}else{label=67;break;}
 case 67: 
 var $193=HEAP32[(($__err)>>2)];
 var $194=$193|2;
 HEAP32[(($__err)>>2)]=$194;
 label=68;break;
 case 68: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$177;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $197=HEAP8[($7)];
 var $198=$197&1;
 var $199=(($198<<24)>>24)==0;
 if($199){label=71;break;}else{label=69;break;}
 case 69: 
 var $201=(($__buf_i+8)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($202|0)==0;
 if($203){label=71;break;}else{label=70;break;}
 case 70: 
 _free($202);
 label=71;break;
 case 71: 
 var $205=HEAP8[($6)];
 var $206=$205&1;
 var $207=(($206<<24)>>24)==0;
 if($207){label=74;break;}else{label=72;break;}
 case 72: 
 var $209=(($__grouping_i+8)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==0;
 if($211){label=74;break;}else{label=73;break;}
 case 73: 
 _free($210);
 label=74;break;
 case 74: 
 var $$etemp$12$0=32;
 var $$etemp$12$1=0;

 var $$etemp$13$0=1;
 var $$etemp$13$1=0;

 var $$etemp$14$0=1;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(48);
 var $__buf=(sp)+(64);
 var $__a_end=(sp)+(80);
 var $__g=(sp)+(88);
 var $__g_end=(sp)+(248);
 var $__dc=(sp)+(256);
 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18672)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18672;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=42;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18676)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=42;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($__atoms)|0);
 var $34=$27;
 var $35=HEAP32[(($34)>>2)];
 var $36=(($35+32)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($32,13512,13538,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=42;break; }
 case 8: 
 var $39=(($2+4)|0);
 var $40=$39;
 var $41=(tempValue=HEAP32[(($40)>>2)],HEAP32[(($40)>>2)]=tempValue+-1,tempValue);
 var $42=($41|0)==0;
 if($42){label=9;break;}else{label=10;break;}
 case 9: 
 var $44=$2;
 var $45=$2;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+8)|0);
 var $48=HEAP32[(($47)>>2)];
 FUNCTION_TABLE[$48]($44);
 label=10;break;
 case 10: 
 var $this2_i_i_i6=$__buf;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=45;break; }
 case 11: 
 var $49=HEAP8[($this2_i_i_i6)];
 var $50=$49&1;
 var $51=(($50<<24)>>24)==0;
 if($51){label=13;break;}else{label=12;break;}
 case 12: 
 var $53=(($__buf+8)|0);
 var $54=HEAP32[(($53)>>2)];
 var $_pre33=$__buf;
 var $_pre34=(($_pre33+1)|0);
 var $58=$54;var $_pre_phi35=$_pre34;var $_pre_phi37=$53;label=14;break;
 case 13: 
 var $56=$__buf;
 var $57=(($56+1)|0);
 var $_pre36=(($__buf+8)|0);
 var $58=$57;var $_pre_phi35=$57;var $_pre_phi37=$_pre36;label=14;break;
 case 14: 
 var $_pre_phi37;
 var $_pre_phi35;
 var $58;
 HEAP32[(($__a_end)>>2)]=$58;
 var $59=$__g;
 var $$etemp$2$0=160;
 var $$etemp$2$1=0;

 var $60=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$60;
 HEAP32[(($__dc)>>2)]=0;
 var $61=(($__b)|0);
 var $62=(($__e)|0);
 var $63=(($__buf)|0);
 var $64=(($__buf+4)|0);
 var $_pre=HEAP32[(($61)>>2)];
 var $__a_0=$58;var $_pre_i_i_i9=$_pre;label=15;break;
 case 15: 
 var $_pre_i_i_i9;
 var $__a_0;
 var $65=($_pre_i_i_i9|0)==0;
 if($65){var $79=0;label=20;break;}else{label=16;break;}
 case 16: 
 var $67=(($_pre_i_i_i9+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($_pre_i_i_i9+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($68|0)==($70|0);
 if($71){label=17;break;}else{var $79=$_pre_i_i_i9;label=20;break;}
 case 17: 
 var $72=$_pre_i_i_i9;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+36)|0);
 var $75=HEAP32[(($74)>>2)];
 var $76=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$75]($_pre_i_i_i9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=44;break; }
 case 18: 
 var $77=($76|0)==-1;
 if($77){label=19;break;}else{var $79=$_pre_i_i_i9;label=20;break;}
 case 19: 
 HEAP32[(($61)>>2)]=0;
 var $79=0;label=20;break;
 case 20: 
 var $79;
 var $80=($79|0)==0;
 var $81=HEAP32[(($62)>>2)];
 var $82=($81|0)==0;
 if($82){label=26;break;}else{label=21;break;}
 case 21: 
 var $84=(($81+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($81+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=23;break;}else{label=22;break;}
 case 22: 
 if($80){label=28;break;}else{var $__a_2=$__a_0;label=57;break;}
 case 23: 
 var $89=$81;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+36)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($81) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=44;break; }
 case 24: 
 var $94=($93|0)==-1;
 if($94){label=25;break;}else{label=27;break;}
 case 25: 
 HEAP32[(($62)>>2)]=0;
 label=26;break;
 case 26: 
 if($80){var $__a_2=$__a_0;label=57;break;}else{label=28;break;}
 case 27: 
 if($80){label=28;break;}else{var $__a_2=$__a_0;label=57;break;}
 case 28: 
 var $97=HEAP32[(($__a_end)>>2)];
 var $98=$97;
 var $99=$__a_0;
 var $100=((($98)-($99))|0);
 var $101=HEAP8[($this2_i_i_i6)];
 var $102=$101&1;
 var $103=(($102<<24)>>24)==0;
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 var $105=HEAP32[(($64)>>2)];
 var $109=$105;label=31;break;
 case 30: 
 var $107=($101&255);
 var $108=$107>>>1;
 var $109=$108;label=31;break;
 case 31: 
 var $109;
 var $110=($100|0)==($109|0);
 if($110){label=32;break;}else{var $__a_1=$__a_0;label=49;break;}
 case 32: 
 if($103){label=34;break;}else{label=33;break;}
 case 33: 
 var $113=HEAP32[(($64)>>2)];
 var $117=$113;label=35;break;
 case 34: 
 var $115=($101&255);
 var $116=$115>>>1;
 var $117=$116;label=35;break;
 case 35: 
 var $117;
 var $118=$117<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=44;break; }
 case 36: 
 var $119=HEAP8[($this2_i_i_i6)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){var $125=10;label=38;break;}else{label=37;break;}
 case 37: 
 var $123=HEAP32[(($63)>>2)];
 var $124=$123&-2;
 var $phitmp_i22=((($124)-(1))|0);
 var $125=$phitmp_i22;label=38;break;
 case 38: 
 var $125;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=44;break; }
 case 39: 
 var $126=HEAP8[($this2_i_i_i6)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){var $131=$_pre_phi35;label=41;break;}else{label=40;break;}
 case 40: 
 var $130=HEAP32[(($_pre_phi37)>>2)];
 var $131=$130;label=41;break;
 case 41: 
 var $131;
 var $132=(($131+$117)|0);
 HEAP32[(($__a_end)>>2)]=$132;
 var $__a_1=$131;label=49;break;
 case 42: 
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $137=(($2+4)|0);
 var $138=$137;
 var $139=(tempValue=HEAP32[(($138)>>2)],HEAP32[(($138)>>2)]=tempValue+-1,tempValue);
 var $140=($139|0)==0;
 if($140){label=43;break;}else{var $_0=$135;var $_01=$136;label=86;break;}
 case 43: 
 var $142=$2;
 var $143=$2;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+8)|0);
 var $146=HEAP32[(($145)>>2)];
 FUNCTION_TABLE[$146]($142);
 var $_0=$135;var $_01=$136;label=86;break;
 case 44: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=46;break;
 case 45: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=46;break;
 case 46: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $147=$eh_lpad_body$0;
 var $148=$eh_lpad_body$1;
 var $149=HEAP8[($this2_i_i_i6)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){var $_0=$147;var $_01=$148;label=86;break;}else{label=47;break;}
 case 47: 
 var $153=(($__buf+8)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($154|0)==0;
 if($155){var $_0=$147;var $_01=$148;label=86;break;}else{label=48;break;}
 case 48: 
 _free($154);
 var $_0=$147;var $_01=$148;label=86;break;
 case 49: 
 var $__a_1;
 var $157=(($79+12)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=(($79+16)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=($158|0)==($160|0);
 if($161){label=50;break;}else{label=52;break;}
 case 50: 
 var $163=$79;
 var $164=HEAP32[(($163)>>2)];
 var $165=(($164+36)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$166]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=44;break; }
 case 51: 
 var $extract_t_i=(($167)&255);
 var $_0_i_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $169=HEAP8[($158)];
 var $_0_i_off0_i=$169;label=53;break;
 case 53: 
 var $_0_i_off0_i;
 var $171=__ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($_0_i_off0_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$60,$__g_end,$33);
 var $172=($171|0)==0;
 if($172){label=54;break;}else{var $__a_2=$__a_1;label=57;break;}
 case 54: 
 var $174=HEAP32[(($157)>>2)];
 var $175=HEAP32[(($159)>>2)];
 var $176=($174|0)==($175|0);
 if($176){label=55;break;}else{label=56;break;}
 case 55: 
 var $178=$79;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+40)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($79) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i9=$79;label=15;break; } else { label=44;break; }
 case 56: 
 var $184=(($174+1)|0);
 HEAP32[(($157)>>2)]=$184;
 var $__a_0=$__a_1;var $_pre_i_i_i9=$79;label=15;break;
 case 57: 
 var $__a_2;
 var $186=(($__a_2+3)|0);
 HEAP8[($186)]=0;
 var $187=HEAP8[(19232)];
 var $188=(($187<<24)>>24)==0;
 if($188){label=58;break;}else{label=62;break;}
 case 58: 
 var $190=___cxa_guard_acquire(19232);
 var $191=($190|0)==0;
 if($191){label=62;break;}else{label=59;break;}
 case 59: 
 var $193=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=61;break; }
 case 60: 
 HEAP32[((17128)>>2)]=$193;

 label=62;break;
 case 61: 
 var $196$0 = ___cxa_find_matching_catch(-1, -1); var $196$1 = tempRet0;

 var $eh_lpad_body$1=$196$1;var $eh_lpad_body$0=$196$0;label=46;break;
 case 62: 
 var $198=HEAP32[((17128)>>2)];
 var $199=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$198,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=63;break; } else { label=45;break; }
 case 63: 
 var $201=($199|0)==1;
 if($201){label=65;break;}else{label=64;break;}
 case 64: 
 HEAP32[(($__err)>>2)]=4;
 label=65;break;
 case 65: 
 var $204=HEAP32[(($61)>>2)];
 var $205=($204|0)==0;
 if($205){var $219=0;label=70;break;}else{label=66;break;}
 case 66: 
 var $207=(($204+12)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=(($204+16)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($208|0)==($210|0);
 if($211){label=67;break;}else{var $219=$204;label=70;break;}
 case 67: 
 var $212=$204;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+36)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$215]($204) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=45;break; }
 case 68: 
 var $217=($216|0)==-1;
 if($217){label=69;break;}else{var $219=$204;label=70;break;}
 case 69: 
 HEAP32[(($61)>>2)]=0;
 var $219=0;label=70;break;
 case 70: 
 var $219;
 var $220=($219|0)==0;
 var $221=HEAP32[(($62)>>2)];
 var $222=($221|0)==0;
 if($222){label=76;break;}else{label=71;break;}
 case 71: 
 var $224=(($221+12)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=(($221+16)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($225|0)==($227|0);
 if($228){label=73;break;}else{label=72;break;}
 case 72: 
 if($220){label=79;break;}else{label=78;break;}
 case 73: 
 var $229=$221;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+36)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$232]($221) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=45;break; }
 case 74: 
 var $234=($233|0)==-1;
 if($234){label=75;break;}else{label=77;break;}
 case 75: 
 HEAP32[(($62)>>2)]=0;
 label=76;break;
 case 76: 
 if($220){label=78;break;}else{label=79;break;}
 case 77: 
 if($220){label=79;break;}else{label=78;break;}
 case 78: 
 var $236=HEAP32[(($__err)>>2)];
 var $237=$236|2;
 HEAP32[(($__err)>>2)]=$237;
 label=79;break;
 case 79: 
 var $239=(($agg_result)|0);
 HEAP32[(($239)>>2)]=$219;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 var $240=HEAP8[($this2_i_i_i6)];
 var $241=$240&1;
 var $242=(($241<<24)>>24)==0;
 if($242){label=82;break;}else{label=80;break;}
 case 80: 
 var $244=(($__buf+8)|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($245|0)==0;
 if($246){label=82;break;}else{label=81;break;}
 case 81: 
 _free($245);
 label=82;break;
 case 82: 
 var $248=HEAP8[($this2_i_i_i)];
 var $249=$248&1;
 var $250=(($249<<24)>>24)==0;
 if($250){label=85;break;}else{label=83;break;}
 case 83: 
 var $252=(($__grouping+8)|0);
 var $253=HEAP32[(($252)>>2)];
 var $254=($253|0)==0;
 if($254){label=85;break;}else{label=84;break;}
 case 84: 
 _free($253);
 label=85;break;
 case 85: 
 STACKTOP=sp;return;
 case 86: 
 var $_01;
 var $_0;
 var $256=HEAP8[($this2_i_i_i)];
 var $257=$256&1;
 var $258=(($257<<24)>>24)==0;
 if($258){label=89;break;}else{label=87;break;}
 case 87: 
 var $260=(($__grouping+8)|0);
 var $261=HEAP32[(($260)>>2)];
 var $262=($261|0)==0;
 if($262){label=89;break;}else{label=88;break;}
 case 88: 
 _free($261);
 label=89;break;
 case 89: 
 var $264$0=$_0;
 var $264$1=0;
 var $265$0=$264$0;
 var $265$1=$_01;
 ___resumeException($265$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_loopEciPcRS2_RjcRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_S2_($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+24)|0);
 var $5=HEAP8[($4)];
 var $6=(($5<<24)>>24)==(($__ct<<24)>>24);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+25)|0);
 var $9=HEAP8[($8)];
 var $10=(($9<<24)>>24)==(($__ct<<24)>>24);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+26)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP8[($_01_i)];
 var $43=(($42<<24)>>24)==(($__ct<<24)>>24);
 var $44=(($_01_i+1)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=($47|0)>23;
 if($48){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $51=($47|0)<($__base|0);
 if($51){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $53=($47|0)<22;
 if($53){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $56=$1;
 var $57=$__a;
 var $58=((($56)-($57))|0);
 var $59=($58|0)<3;
 if($59){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $61=((($1)-(1))|0);
 var $62=HEAP8[($61)];
 var $63=(($62<<24)>>24)==48;
 if($63){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $65=((13512+$47)|0);
 var $66=HEAP8[($65)];
 var $67=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$67;
 HEAP8[($1)]=$66;
 var $_0=0;label=23;break;
 case 22: 
 var $69=((13512+$47)|0);
 var $70=HEAP8[($69)];
 var $71=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$71;
 HEAP8[($1)]=$70;
 var $72=HEAP32[(($__dc)>>2)];
 var $73=((($72)+(1))|0);
 HEAP32[(($__dc)>>2)]=$73;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__s,$__l,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsscanf($__s,2688,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRb($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i4=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__lv=(sp)+(32);
 var $1=(sp)+(40);
 var $2=(sp)+(48);
 var $3=(sp)+(56);
 var $__names=(sp)+(64);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{label=7;break;}
 case 2: 
 HEAP32[(($__lv)>>2)]=-1;
 var $9=$this;
 var $10=HEAP32[(($9)>>2)];
 var $11=(($10+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($__b)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=(($2)|0);
 HEAP32[(($15)>>2)]=$14;
 var $16=(($__e)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($3)|0);
 HEAP32[(($18)>>2)]=$17;
 FUNCTION_TABLE[$12]($1,$this,$2,$3,$__iob,$__err,$__lv);
 var $19=(($1)|0);
 var $20=HEAP32[(($19)>>2)];
 HEAP32[(($13)>>2)]=$20;
 var $21=HEAP32[(($__lv)>>2)];
 if(($21|0)==0){ label=3;break;}else if(($21|0)==1){ label=4;break;}else{label=5;break;}
 case 3: 
 HEAP8[($__v)]=0;
 label=6;break;
 case 4: 
 HEAP8[($__v)]=1;
 label=6;break;
 case 5: 
 HEAP8[($__v)]=1;
 HEAP32[(($__err)>>2)]=4;
 label=6;break;
 case 6: 
 var $26=(($agg_result)|0);
 HEAP32[(($26)>>2)]=$20;
 label=48;break;
 case 7: 
 var $28=(($__iob+28)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+4)|0);
 var $31=$30;
 var $32=(tempValue=HEAP32[(($31)>>2)],HEAP32[(($31)>>2)]=tempValue+1,tempValue);
 var $33=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $34=HEAP32[((18664)>>2)];
 var $35=($34|0)==-1;
 if($35){label=9;break;}else{label=8;break;}
 case 8: 
 var $37=(($__p_i_i_i_i)|0);
 HEAP32[(($37)>>2)]=18664;
 var $38=(($__p_i_i_i_i+4)|0);
 HEAP32[(($38)>>2)]=(202);
 var $39=(($__p_i_i_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $40=HEAP32[((18668)>>2)];
 var $41=((($40)-(1))|0);
 var $42=(($29+12)|0);
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($29+8)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=$44;
 var $49=$47;
 var $50=((($48)-($49))|0);
 var $51=$50>>2;
 var $52=($51>>>0)>($41>>>0);
 if($52){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=(($47+($41<<2))|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==0;
 if($55){label=11;break;}else{label=13;break;}
 case 11: 
 var $56=___cxa_allocate_exception(4);
 var $57=$56;
 HEAP32[(($57)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($56,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 throw "Reached an unreachable!";
 case 13: 
 var $59=$54;
 var $60=(($29+4)|0);
 var $61=$60;
 var $62=(tempValue=HEAP32[(($61)>>2)],HEAP32[(($61)>>2)]=tempValue+-1,tempValue);
 var $63=($62|0)==0;
 if($63){label=14;break;}else{label=15;break;}
 case 14: 
 var $65=$29;
 var $66=$29;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+8)|0);
 var $69=HEAP32[(($68)>>2)];
 FUNCTION_TABLE[$69]($65);
 label=15;break;
 case 15: 
 var $70=HEAP32[(($28)>>2)];
 var $71=(($70+4)|0);
 var $72=$71;
 var $73=(tempValue=HEAP32[(($72)>>2)],HEAP32[(($72)>>2)]=tempValue+1,tempValue);
 var $74=$__p_i_i_i_i4;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $75=HEAP32[((18280)>>2)];
 var $76=($75|0)==-1;
 if($76){label=17;break;}else{label=16;break;}
 case 16: 
 var $78=(($__p_i_i_i_i4)|0);
 HEAP32[(($78)>>2)]=18280;
 var $79=(($__p_i_i_i_i4+4)|0);
 HEAP32[(($79)>>2)]=(202);
 var $80=(($__p_i_i_i_i4+8)|0);
 HEAP32[(($80)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$74) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=34;break; }
 case 17: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $81=HEAP32[((18284)>>2)];
 var $82=((($81)-(1))|0);
 var $83=(($70+12)|0);
 var $84=$83;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($70+8)|0);
 var $87=$86;
 var $88=HEAP32[(($87)>>2)];
 var $89=$85;
 var $90=$88;
 var $91=((($89)-($90))|0);
 var $92=$91>>2;
 var $93=($92>>>0)>($82>>>0);
 if($93){label=18;break;}else{label=19;break;}
 case 18: 
 var $94=(($88+($82<<2))|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=19;break;}else{label=21;break;}
 case 19: 
 var $97=___cxa_allocate_exception(4);
 var $98=$97;
 HEAP32[(($98)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($97,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=34;break; }
 case 20: 
 throw "Reached an unreachable!";
 case 21: 
 var $100=$95;
 var $101=(($70+4)|0);
 var $102=$101;
 var $103=(tempValue=HEAP32[(($102)>>2)],HEAP32[(($102)>>2)]=tempValue+-1,tempValue);
 var $104=($103|0)==0;
 if($104){label=22;break;}else{label=23;break;}
 case 22: 
 var $106=$70;
 var $107=$70;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+8)|0);
 var $110=HEAP32[(($109)>>2)];
 FUNCTION_TABLE[$110]($106);
 label=23;break;
 case 23: 
 var $111=(($__names)|0);
 var $112=$95;
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+24)|0);
 var $115=HEAP32[(($114)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$115]($111,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { var $_02=$111;label=36;break; }
 case 24: 
 var $116=(($__names+12)|0);
 var $117=HEAP32[(($112)>>2)];
 var $118=(($117+28)|0);
 var $119=HEAP32[(($118)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$119]($116,$100) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { var $_02=$116;label=36;break; }
 case 25: 
 var $120=(($__e)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=(($__names+24)|0);
 var $123=(function() { try { __THREW__ = 0; return __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$121,$111,$122,$59,$__err,1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=41;break; }
 case 26: 
 var $124=($123|0)==($111|0);
 var $125=($124&1);
 HEAP8[($__v)]=$125;
 var $126=(($__b)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(($agg_result)|0);
 HEAP32[(($128)>>2)]=$127;
 var $129=$116;
 var $130=HEAP8[($129)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=29;break;}else{label=27;break;}
 case 27: 
 var $134=(($__names+20)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==0;
 if($136){label=29;break;}else{label=28;break;}
 case 28: 
 var $138=$135;
 _free($138);
 label=29;break;
 case 29: 
 var $139=$__names;
 var $140=HEAP8[($139)];
 var $141=$140&1;
 var $142=(($141<<24)>>24)==0;
 if($142){label=48;break;}else{label=30;break;}
 case 30: 
 var $144=(($__names+8)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=($145|0)==0;
 if($146){label=48;break;}else{label=31;break;}
 case 31: 
 var $148=$145;
 _free($148);
 label=48;break;
 case 32: 
 var $150$0 = ___cxa_find_matching_catch(-1, -1); var $150$1 = tempRet0;
 var $151=$150$0;
 var $152=$150$1;
 var $153=(($29+4)|0);
 var $154=$153;
 var $155=(tempValue=HEAP32[(($154)>>2)],HEAP32[(($154)>>2)]=tempValue+-1,tempValue);
 var $156=($155|0)==0;
 if($156){label=33;break;}else{var $_0=$151;var $_01=$152;label=49;break;}
 case 33: 
 var $158=$29;
 var $159=$29;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+8)|0);
 var $162=HEAP32[(($161)>>2)];
 FUNCTION_TABLE[$162]($158);
 var $_0=$151;var $_01=$152;label=49;break;
 case 34: 
 var $164$0 = ___cxa_find_matching_catch(-1, -1); var $164$1 = tempRet0;
 var $165=$164$0;
 var $166=$164$1;
 var $167=(($70+4)|0);
 var $168=$167;
 var $169=(tempValue=HEAP32[(($168)>>2)],HEAP32[(($168)>>2)]=tempValue+-1,tempValue);
 var $170=($169|0)==0;
 if($170){label=35;break;}else{var $_0=$165;var $_01=$166;label=49;break;}
 case 35: 
 var $172=$70;
 var $173=$70;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+8)|0);
 var $176=HEAP32[(($175)>>2)];
 FUNCTION_TABLE[$176]($172);
 var $_0=$165;var $_01=$166;label=49;break;
 case 36: 
 var $_02;
 var $178$0 = ___cxa_find_matching_catch(-1, -1); var $178$1 = tempRet0;
 var $179=$178$0;
 var $180=$178$1;
 var $181=($111|0)==($_02|0);
 if($181){var $_0=$179;var $_01=$180;label=49;break;}else{var $182=$_02;label=37;break;}
 case 37: 
 var $182;
 var $183=((($182)-(12))|0);
 var $184=$183;
 var $185=HEAP8[($184)];
 var $186=$185&1;
 var $187=(($186<<24)>>24)==0;
 if($187){label=40;break;}else{label=38;break;}
 case 38: 
 var $189=((($182)-(12)+8)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($190|0)==0;
 if($191){label=40;break;}else{label=39;break;}
 case 39: 
 var $193=$190;
 _free($193);
 label=40;break;
 case 40: 
 var $194=($183|0)==($111|0);
 if($194){var $_0=$179;var $_01=$180;label=49;break;}else{var $182=$183;label=37;break;}
 case 41: 
 var $195$0 = ___cxa_find_matching_catch(-1, -1); var $195$1 = tempRet0;
 var $196=$195$0;
 var $197=$116;
 var $198=HEAP8[($197)];
 var $199=$198&1;
 var $200=(($199<<24)>>24)==0;
 if($200){label=44;break;}else{label=42;break;}
 case 42: 
 var $202=(($__names+20)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==0;
 if($204){label=44;break;}else{label=43;break;}
 case 43: 
 var $206=$203;
 _free($206);
 label=44;break;
 case 44: 
 var $207=$__names;
 var $208=HEAP8[($207)];
 var $209=$208&1;
 var $210=(($209<<24)>>24)==0;
 if($210){label=47;break;}else{label=45;break;}
 case 45: 
 var $212=(($__names+8)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=($213|0)==0;
 if($214){label=47;break;}else{label=46;break;}
 case 46: 
 var $216=$213;
 _free($216);
 label=47;break;
 case 47: 
 var $217=$195$1;
 var $_0=$196;var $_01=$217;label=49;break;
 case 48: 
 STACKTOP=sp;return;
 case 49: 
 var $_01;
 var $_0;
 var $218$0=$_0;
 var $218$1=0;
 var $219$0=$218$0;
 var $219$1=$_01;
 ___resumeException($219$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$__e_0,$__kb,$__ke,$__ct,$__err,$__case_sensitive){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__statbuf=sp;
 var $1=$__ke;
 var $2=$__kb;
 var $3=((($1)-($2))|0);
 var $4=(((($3|0))/(12))&-1);
 var $5=(($__statbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $6=($4>>>0)>100;
 if($6){label=2;break;}else{var $__status_0=$5;var $17=0;label=13;break;}
 case 2: 
 var $8=_malloc($4);
 var $9=($8|0)==0;
 if($9){label=3;break;}else{var $__status_0=$8;var $17=$8;label=13;break;}
 case 3: 
 var $11=___cxa_allocate_exception(4);
 var $12=$11;
 HEAP32[(($12)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($11,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 throw "Reached an unreachable!";
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $16$1=$13$1;var $16$0=$13$0;label=12;break;
 case 6: 
 var $lpad_us_lcssa$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_us_lcssa$1 = tempRet0;
 var $lpad_phi$1=$lpad_us_lcssa$1;var $lpad_phi$0=$lpad_us_lcssa$0;label=10;break;
 case 7: 
 var $lpad_loopexit2$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit2$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit2$1;var $lpad_phi$0=$lpad_loopexit2$0;label=10;break;
 case 8: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=10;break;
 case 9: 
 var $lpad_nonloopexit55$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit55$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit55$1;var $lpad_phi$0=$lpad_nonloopexit55$0;label=10;break;
 case 10: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $14=($17|0)==0;
 if($14){var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;}else{label=11;break;}
 case 11: 
 _free($17);
 var $16$1=$lpad_phi$1;var $16$0=$lpad_phi$0;label=12;break;
 case 12: 
 var $16$0;
 var $16$1;
 ___resumeException($16$0)
 case 13: 
 var $17;
 var $__status_0;
 var $18=($__kb|0)==($__ke|0);
 if($18){var $__n_might_match_0_lcssa=$4;var $__n_does_match_0_lcssa=0;label=14;break;}else{var $__n_might_match_065=$4;var $__n_does_match_066=0;var $__st_067=$__status_0;var $__ky_068=$__kb;label=15;break;}
 case 14: 
 var $__n_does_match_0_lcssa;
 var $__n_might_match_0_lcssa;
 var $19=(($__b)|0);
 var $20=$__ct;
 var $__indx_0_ph=0;var $__n_does_match_2_ph=$__n_does_match_0_lcssa;var $__n_might_match_2_ph=$__n_might_match_0_lcssa;var $__e_sroa_0_0_ph=$__e_0;label=22;break;
 case 15: 
 var $__ky_068;
 var $__st_067;
 var $__n_does_match_066;
 var $__n_might_match_065;
 var $21=$__ky_068;
 var $22=HEAP8[($21)];
 var $23=$22&1;
 var $24=(($23<<24)>>24)==0;
 if($24){label=17;break;}else{label=16;break;}
 case 16: 
 var $26=(($__ky_068+4)|0);
 var $27=HEAP32[(($26)>>2)];
 var $31=$27;label=18;break;
 case 17: 
 var $29=($22&255);
 var $30=$29>>>1;
 var $31=$30;label=18;break;
 case 18: 
 var $31;
 var $32=($31|0)==0;
 if($32){label=20;break;}else{label=19;break;}
 case 19: 
 HEAP8[($__st_067)]=1;
 var $__n_does_match_1=$__n_does_match_066;var $__n_might_match_1=$__n_might_match_065;label=21;break;
 case 20: 
 HEAP8[($__st_067)]=2;
 var $35=((($__n_might_match_065)-(1))|0);
 var $36=((($__n_does_match_066)+(1))|0);
 var $__n_does_match_1=$36;var $__n_might_match_1=$35;label=21;break;
 case 21: 
 var $__n_might_match_1;
 var $__n_does_match_1;
 var $38=(($__ky_068+12)|0);
 var $39=(($__st_067+1)|0);
 var $40=($38|0)==($__ke|0);
 if($40){var $__n_might_match_0_lcssa=$__n_might_match_1;var $__n_does_match_0_lcssa=$__n_does_match_1;label=14;break;}else{var $__n_might_match_065=$__n_might_match_1;var $__n_does_match_066=$__n_does_match_1;var $__st_067=$39;var $__ky_068=$38;label=15;break;}
 case 22: 
 var $__e_sroa_0_0_ph;
 var $__n_might_match_2_ph;
 var $__n_does_match_2_ph;
 var $__indx_0_ph;
 var $41=($__n_might_match_2_ph|0)!=0;
 var $__indx_0=$__indx_0_ph;var $__e_sroa_0_0=$__e_sroa_0_0_ph;label=23;break;
 case 23: 
 var $__e_sroa_0_0;
 var $__indx_0;
 var $42=HEAP32[(($19)>>2)];
 var $43=($42|0)==0;
 if($43){var $60=1;label=30;break;}else{label=24;break;}
 case 24: 
 var $45=(($42+12)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($42+16)|0);
 var $48=HEAP32[(($47)>>2)];
 var $49=($46|0)==($48|0);
 if($49){label=25;break;}else{label=26;break;}
 case 25: 
 var $51=$42;
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$54]($42) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$55;label=27;break; } else { label=7;break; }
 case 26: 
 var $57=HEAP32[(($46)>>2)];
 var $_0_i_i_i_i=$57;label=27;break;
 case 27: 
 var $_0_i_i_i_i;
 var $58=($_0_i_i_i_i|0)==-1;
 if($58){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre_i_i_i=HEAP32[(($19)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $60=$phitmp_i_i_i;label=30;break;
 case 29: 
 HEAP32[(($19)>>2)]=0;
 var $60=1;label=30;break;
 case 30: 
 var $60;
 var $61=($__e_sroa_0_0|0)==0;
 if($61){var $77=1;var $_pre_i3_i_i19=0;var $__e_sroa_0_1=0;label=35;break;}else{label=31;break;}
 case 31: 
 var $63=(($__e_sroa_0_0+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(($__e_sroa_0_0+16)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($64|0)==($66|0);
 if($67){label=32;break;}else{label=33;break;}
 case 32: 
 var $69=$__e_sroa_0_0;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+36)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$73;label=34;break; } else { label=7;break; }
 case 33: 
 var $75=HEAP32[(($64)>>2)];
 var $_0_i_i1_i_i=$75;label=34;break;
 case 34: 
 var $_0_i_i1_i_i;
 var $76=($_0_i_i1_i_i|0)==-1;
 var $___e_sroa_0_0=($76?0:$__e_sroa_0_0);
 var $___e_sroa_0_04=($76?0:$__e_sroa_0_0);
 var $_5=($76?1:0);
 var $77=$_5;var $_pre_i3_i_i19=$___e_sroa_0_04;var $__e_sroa_0_1=$___e_sroa_0_0;label=35;break;
 case 35: 
 var $__e_sroa_0_1;
 var $_pre_i3_i_i19;
 var $77;
 var $tmp_i_i=$60^$77;
 var $_=$tmp_i_i&$41;
 var $78=HEAP32[(($19)>>2)];
 if($_){label=36;break;}else{label=82;break;}
 case 36: 
 var $80=(($78+12)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=(($78+16)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=($81|0)==($83|0);
 if($84){label=37;break;}else{label=38;break;}
 case 37: 
 var $86=$78;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+36)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$90;label=39;break; } else { label=7;break; }
 case 38: 
 var $92=HEAP32[(($81)>>2)];
 var $_0_i_i=$92;label=39;break;
 case 39: 
 var $_0_i_i;
 if($__case_sensitive){var $__c_0=$_0_i_i;label=41;break;}else{label=40;break;}
 case 40: 
 var $94=HEAP32[(($20)>>2)];
 var $95=(($94+28)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($__ct,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__c_0=$97;label=41;break; } else { label=7;break; }
 case 41: 
 var $__c_0;
 var $_pre=((($__indx_0)+(1))|0);
 if($18){var $__indx_0=$_pre;var $__e_sroa_0_0=$__e_sroa_0_1;label=23;break;}else{label=42;break;}
 case 42: 
 if($__case_sensitive){var $__n_might_match_335_us=$__n_might_match_2_ph;var $__n_does_match_336_us=$__n_does_match_2_ph;var $__st_137_us=$__status_0;var $__consume_0_off039_us=0;var $__ky1_040_us=$__kb;label=43;break;}else{var $__n_might_match_335=$__n_might_match_2_ph;var $__n_does_match_336=$__n_does_match_2_ph;var $__st_137=$__status_0;var $__consume_0_off039=0;var $__ky1_040=$__kb;label=56;break;}
 case 43: 
 var $__ky1_040_us;
 var $__consume_0_off039_us;
 var $__st_137_us;
 var $__n_does_match_336_us;
 var $__n_might_match_335_us;
 var $98=HEAP8[($__st_137_us)];
 var $99=(($98<<24)>>24)==1;
 if($99){label=44;break;}else{var $__consume_1_off0_us=$__consume_0_off039_us;var $__n_does_match_4_us=$__n_does_match_336_us;var $__n_might_match_4_us=$__n_might_match_335_us;label=54;break;}
 case 44: 
 var $101=$__ky1_040_us;
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=46;break;}else{label=45;break;}
 case 45: 
 var $106=(($__ky1_040_us+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $110=$107;label=47;break;
 case 46: 
 var $109=(($__ky1_040_us+4)|0);
 var $110=$109;label=47;break;
 case 47: 
 var $110;
 var $111=(($110+($__indx_0<<2))|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=($__c_0|0)==($112|0);
 if($113){label=49;break;}else{label=48;break;}
 case 48: 
 HEAP8[($__st_137_us)]=0;
 var $115=((($__n_might_match_335_us)-(1))|0);
 var $__consume_1_off0_us=$__consume_0_off039_us;var $__n_does_match_4_us=$__n_does_match_336_us;var $__n_might_match_4_us=$115;label=54;break;
 case 49: 
 if($104){label=51;break;}else{label=50;break;}
 case 50: 
 var $118=(($__ky1_040_us+4)|0);
 var $119=HEAP32[(($118)>>2)];
 var $123=$119;label=52;break;
 case 51: 
 var $121=($102&255);
 var $122=$121>>>1;
 var $123=$122;label=52;break;
 case 52: 
 var $123;
 var $124=($123|0)==($_pre|0);
 if($124){label=53;break;}else{var $__consume_1_off0_us=1;var $__n_does_match_4_us=$__n_does_match_336_us;var $__n_might_match_4_us=$__n_might_match_335_us;label=54;break;}
 case 53: 
 HEAP8[($__st_137_us)]=2;
 var $126=((($__n_might_match_335_us)-(1))|0);
 var $127=((($__n_does_match_336_us)+(1))|0);
 var $__consume_1_off0_us=1;var $__n_does_match_4_us=$127;var $__n_might_match_4_us=$126;label=54;break;
 case 54: 
 var $__n_might_match_4_us;
 var $__n_does_match_4_us;
 var $__consume_1_off0_us;
 var $129=(($__ky1_040_us+12)|0);
 var $130=($129|0)==($__ke|0);
 if($130){var $__n_might_match_3_lcssa=$__n_might_match_4_us;var $__n_does_match_3_lcssa=$__n_does_match_4_us;var $__consume_0_off0_lcssa=$__consume_1_off0_us;label=70;break;}else{label=55;break;}
 case 55: 
 var $131=(($__st_137_us+1)|0);
 var $__n_might_match_335_us=$__n_might_match_4_us;var $__n_does_match_336_us=$__n_does_match_4_us;var $__st_137_us=$131;var $__consume_0_off039_us=$__consume_1_off0_us;var $__ky1_040_us=$129;label=43;break;
 case 56: 
 var $__ky1_040;
 var $__consume_0_off039;
 var $__st_137;
 var $__n_does_match_336;
 var $__n_might_match_335;
 var $132=HEAP8[($__st_137)];
 var $133=(($132<<24)>>24)==1;
 if($133){label=57;break;}else{var $__consume_1_off0=$__consume_0_off039;var $__n_does_match_4=$__n_does_match_336;var $__n_might_match_4=$__n_might_match_335;label=68;break;}
 case 57: 
 var $135=$__ky1_040;
 var $136=HEAP8[($135)];
 var $137=$136&1;
 var $138=(($137<<24)>>24)==0;
 if($138){label=59;break;}else{label=58;break;}
 case 58: 
 var $140=(($__ky1_040+8)|0);
 var $141=HEAP32[(($140)>>2)];
 var $145=$141;label=60;break;
 case 59: 
 var $143=(($__ky1_040+4)|0);
 var $145=$143;label=60;break;
 case 60: 
 var $145;
 var $146=(($145+($__indx_0<<2))|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=HEAP32[(($20)>>2)];
 var $149=(($148+28)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$150]($__ct,$147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=6;break; }
 case 61: 
 var $152=($__c_0|0)==($151|0);
 if($152){label=62;break;}else{label=67;break;}
 case 62: 
 var $154=HEAP8[($135)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=64;break;}else{label=63;break;}
 case 63: 
 var $158=(($__ky1_040+4)|0);
 var $159=HEAP32[(($158)>>2)];
 var $163=$159;label=65;break;
 case 64: 
 var $161=($154&255);
 var $162=$161>>>1;
 var $163=$162;label=65;break;
 case 65: 
 var $163;
 var $164=($163|0)==($_pre|0);
 if($164){label=66;break;}else{var $__consume_1_off0=1;var $__n_does_match_4=$__n_does_match_336;var $__n_might_match_4=$__n_might_match_335;label=68;break;}
 case 66: 
 HEAP8[($__st_137)]=2;
 var $166=((($__n_might_match_335)-(1))|0);
 var $167=((($__n_does_match_336)+(1))|0);
 var $__consume_1_off0=1;var $__n_does_match_4=$167;var $__n_might_match_4=$166;label=68;break;
 case 67: 
 HEAP8[($__st_137)]=0;
 var $169=((($__n_might_match_335)-(1))|0);
 var $__consume_1_off0=$__consume_0_off039;var $__n_does_match_4=$__n_does_match_336;var $__n_might_match_4=$169;label=68;break;
 case 68: 
 var $__n_might_match_4;
 var $__n_does_match_4;
 var $__consume_1_off0;
 var $171=(($__ky1_040+12)|0);
 var $172=($171|0)==($__ke|0);
 if($172){var $__n_might_match_3_lcssa=$__n_might_match_4;var $__n_does_match_3_lcssa=$__n_does_match_4;var $__consume_0_off0_lcssa=$__consume_1_off0;label=70;break;}else{label=69;break;}
 case 69: 
 var $173=(($__st_137+1)|0);
 var $__n_might_match_335=$__n_might_match_4;var $__n_does_match_336=$__n_does_match_4;var $__st_137=$173;var $__consume_0_off039=$__consume_1_off0;var $__ky1_040=$171;label=56;break;
 case 70: 
 var $__consume_0_off0_lcssa;
 var $__n_does_match_3_lcssa;
 var $__n_might_match_3_lcssa;
 if($__consume_0_off0_lcssa){label=71;break;}else{var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_3_lcssa;var $__n_might_match_2_ph=$__n_might_match_3_lcssa;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}
 case 71: 
 var $175=HEAP32[(($19)>>2)];
 var $176=(($175+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($175+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=72;break;}else{label=73;break;}
 case 72: 
 var $182=$175;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+40)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($175) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=8;break; }
 case 73: 
 var $188=(($177+4)|0);
 HEAP32[(($176)>>2)]=$188;
 label=74;break;
 case 74: 
 var $189=((($__n_might_match_3_lcssa)+($__n_does_match_3_lcssa))|0);
 var $_not=($189>>>0)<2;
 if($_not){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_3_lcssa;var $__n_might_match_2_ph=$__n_might_match_3_lcssa;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_549=$__n_does_match_3_lcssa;var $__st_250=$__status_0;var $__ky2_051=$__kb;label=75;break;}
 case 75: 
 var $__ky2_051;
 var $__st_250;
 var $__n_does_match_549;
 var $190=HEAP8[($__st_250)];
 var $191=(($190<<24)>>24)==2;
 if($191){label=76;break;}else{var $__n_does_match_6=$__n_does_match_549;label=81;break;}
 case 76: 
 var $193=$__ky2_051;
 var $194=HEAP8[($193)];
 var $195=$194&1;
 var $196=(($195<<24)>>24)==0;
 if($196){label=78;break;}else{label=77;break;}
 case 77: 
 var $198=(($__ky2_051+4)|0);
 var $199=HEAP32[(($198)>>2)];
 var $203=$199;label=79;break;
 case 78: 
 var $201=($194&255);
 var $202=$201>>>1;
 var $203=$202;label=79;break;
 case 79: 
 var $203;
 var $204=($203|0)==($_pre|0);
 if($204){var $__n_does_match_6=$__n_does_match_549;label=81;break;}else{label=80;break;}
 case 80: 
 HEAP8[($__st_250)]=0;
 var $206=((($__n_does_match_549)-(1))|0);
 var $__n_does_match_6=$206;label=81;break;
 case 81: 
 var $__n_does_match_6;
 var $208=(($__ky2_051+12)|0);
 var $209=(($__st_250+1)|0);
 var $210=($208|0)==($__ke|0);
 if($210){var $__indx_0_ph=$_pre;var $__n_does_match_2_ph=$__n_does_match_6;var $__n_might_match_2_ph=$__n_might_match_3_lcssa;var $__e_sroa_0_0_ph=$__e_sroa_0_1;label=22;break;}else{var $__n_does_match_549=$__n_does_match_6;var $__st_250=$209;var $__ky2_051=$208;label=75;break;}
 case 82: 
 var $212=($78|0)==0;
 if($212){var $229=1;label=89;break;}else{label=83;break;}
 case 83: 
 var $214=(($78+12)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($78+16)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=($215|0)==($217|0);
 if($218){label=84;break;}else{label=85;break;}
 case 84: 
 var $220=$78;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+36)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i11=$224;label=86;break; } else { label=9;break; }
 case 85: 
 var $226=HEAP32[(($215)>>2)];
 var $_0_i_i_i_i11=$226;label=86;break;
 case 86: 
 var $_0_i_i_i_i11;
 var $227=($_0_i_i_i_i11|0)==-1;
 if($227){label=88;break;}else{label=87;break;}
 case 87: 
 var $_pre_i_i_i13=HEAP32[(($19)>>2)];
 var $phitmp_i_i_i14=($_pre_i_i_i13|0)==0;
 var $229=$phitmp_i_i_i14;label=89;break;
 case 88: 
 HEAP32[(($19)>>2)]=0;
 var $229=1;label=89;break;
 case 89: 
 var $229;
 var $230=($_pre_i3_i_i19|0)==0;
 if($230){label=94;break;}else{label=90;break;}
 case 90: 
 var $232=(($_pre_i3_i_i19+12)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=(($_pre_i3_i_i19+16)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=($233|0)==($235|0);
 if($236){label=91;break;}else{label=92;break;}
 case 91: 
 var $238=$_pre_i3_i_i19;
 var $239=HEAP32[(($238)>>2)];
 var $240=(($239+36)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$241]($_pre_i3_i_i19) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i17=$242;label=93;break; } else { label=9;break; }
 case 92: 
 var $244=HEAP32[(($233)>>2)];
 var $_0_i_i1_i_i17=$244;label=93;break;
 case 93: 
 var $_0_i_i1_i_i17;
 var $245=($_0_i_i1_i_i17|0)==-1;
 if($245){label=94;break;}else{label=95;break;}
 case 94: 
 if($229){label=96;break;}else{label=97;break;}
 case 95: 
 if($229){label=97;break;}else{label=96;break;}
 case 96: 
 var $247=HEAP32[(($__err)>>2)];
 var $248=$247|2;
 HEAP32[(($__err)>>2)]=$248;
 label=97;break;
 case 97: 
 if($18){label=101;break;}else{label=98;break;}
 case 98: 
 var $249=HEAP8[($__status_0)];
 var $250=(($249<<24)>>24)==2;
 if($250){var $_028=$__kb;label=102;break;}else{var $_03082=$__kb;var $__st_32983=$__status_0;label=100;break;}
 case 99: 
 var $251=HEAP8[($255)];
 var $252=(($251<<24)>>24)==2;
 if($252){var $_028=$253;label=102;break;}else{var $_03082=$253;var $__st_32983=$255;label=100;break;}
 case 100: 
 var $__st_32983;
 var $_03082;
 var $253=(($_03082+12)|0);
 var $254=($253|0)==($__ke|0);
 var $255=(($__st_32983+1)|0);
 if($254){label=101;break;}else{label=99;break;}
 case 101: 
 var $256=HEAP32[(($__err)>>2)];
 var $257=$256|4;
 HEAP32[(($__err)>>2)]=$257;
 var $_028=$__ke;label=102;break;
 case 102: 
 var $_028;
 var $258=($17|0)==0;
 if($258){label=104;break;}else{label=103;break;}
 case 103: 
 _free($17);
 label=104;break;
 case 104: 
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $_028;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRl($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[($7)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $28=$24;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi34_i=$27;var $_pre_phi36_i=$_pre35_i;label=9;break;
 case 9: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=52;break;}
 case 22: 
 var $_sroa_06_2;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($7)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=HEAP32[(($32)>>2)];
 var $81=$77;label=25;break;
 case 24: 
 var $79=($73&255);
 var $80=$79>>>1;
 var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82=($72|0)==($81|0);
 if($82){label=26;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 26: 
 if($75){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=HEAP32[(($32)>>2)];
 var $89=$85;label=29;break;
 case 28: 
 var $87=($73&255);
 var $88=$87>>>1;
 var $89=$88;label=29;break;
 case 29: 
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $95=HEAP32[(($31)>>2)];
 var $96=$95&-2;
 var $phitmp_i23_i=((($96)-(1))|0);
 var $97=$phitmp_i23_i;label=32;break;
 case 32: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi34_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($_pre_phi36_i)>>2)];
 var $103=$102;label=35;break;
 case 35: 
 var $103;
 var $104=(($103+$89)|0);
 HEAP32[(($__a_end_i)>>2)]=$104;
 var $__a_1_i=$103;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $106=HEAP8[($7)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=41;break;}else{label=39;break;}
 case 39: 
 var $110=(($__buf_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 _free($111);
 label=41;break;
 case 41: 
 var $114=HEAP8[($6)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=44;break;}else{label=42;break;}
 case 42: 
 var $118=(($__grouping_i+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=44;break;}else{label=43;break;}
 case 43: 
 _free($119);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $122=(($50+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($50+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$50;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$132;label=48;break; } else { label=36;break; }
 case 47: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i=$134;label=48;break;
 case 48: 
 var $_0_i_i_i;
 var $136=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $137=($136|0)==0;
 if($137){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $139=HEAP32[(($122)>>2)];
 var $140=HEAP32[(($124)>>2)];
 var $141=($139|0)==($140|0);
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=$50;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 51: 
 var $149=(($139+4)|0);
 HEAP32[(($122)>>2)]=$149;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $151=HEAP8[($6)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=54;break;}else{label=53;break;}
 case 53: 
 var $155=(($__grouping_i+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=55;break;
 case 54: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=58;break;}else{label=56;break;}
 case 56: 
 var $163=HEAP32[(($__g_end_i)>>2)];
 var $164=$163;
 var $165=$__g_i;
 var $166=((($164)-($165))|0);
 var $167=($166|0)<160;
 if($167){label=57;break;}else{label=58;break;}
 case 57: 
 var $169=HEAP32[(($__dc_i)>>2)];
 var $170=(($163+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$170;
 HEAP32[(($163)>>2)]=$169;
 label=58;break;
 case 58: 
 var $171=HEAP32[(($__a_end_i)>>2)];
 var $172=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a_2_i,$171,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=37;break; }
 case 59: 
 HEAP32[(($__v)>>2)]=$172;
 var $174=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$174,$__err);
 var $175=($50|0)==0;
 if($175){var $192=1;var $191=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $177=(($50+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($50+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=61;break;}else{label=62;break;}
 case 61: 
 var $183=$50;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$187;label=63;break; } else { label=37;break; }
 case 62: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i_i_i_i=$189;label=63;break;
 case 63: 
 var $_0_i_i_i_i_i;
 var $190=($_0_i_i_i_i_i|0)==-1;
 var $_7=($190?0:$50);
 var $_8=($190?1:0);
 var $192=$_8;var $191=$_7;label=64;break;
 case 64: 
 var $191;
 var $192;
 var $193=($_pre_i3_i_i_i|0)==0;
 if($193){label=69;break;}else{label=65;break;}
 case 65: 
 var $195=(($_pre_i3_i_i_i+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($_pre_i3_i_i_i+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($196|0)==($198|0);
 if($199){label=66;break;}else{label=67;break;}
 case 66: 
 var $201=$_pre_i3_i_i_i;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$205;label=68;break; } else { label=37;break; }
 case 67: 
 var $207=HEAP32[(($196)>>2)];
 var $_0_i_i1_i_i_i=$207;label=68;break;
 case 68: 
 var $_0_i_i1_i_i_i;
 var $208=($_0_i_i1_i_i_i|0)==-1;
 if($208){label=69;break;}else{label=70;break;}
 case 69: 
 if($192){label=71;break;}else{label=72;break;}
 case 70: 
 if($192){label=72;break;}else{label=71;break;}
 case 71: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 label=72;break;
 case 72: 
 var $213=(($agg_result)|0);
 HEAP32[(($213)>>2)]=$191;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $214=HEAP8[($7)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=75;break;}else{label=73;break;}
 case 73: 
 var $218=(($__buf_i+8)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==0;
 if($220){label=75;break;}else{label=74;break;}
 case 74: 
 _free($219);
 label=75;break;
 case 75: 
 var $222=HEAP8[($6)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=78;break;}else{label=76;break;}
 case 76: 
 var $226=(($__grouping_i+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($227|0)==0;
 if($228){label=78;break;}else{label=77;break;}
 case 77: 
 _free($227);
 label=78;break;
 case 78: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRx($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[($7)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $28=$24;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi34_i=$27;var $_pre_phi36_i=$_pre35_i;label=9;break;
 case 9: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=52;break;}
 case 22: 
 var $_sroa_06_2;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($7)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=HEAP32[(($32)>>2)];
 var $81=$77;label=25;break;
 case 24: 
 var $79=($73&255);
 var $80=$79>>>1;
 var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82=($72|0)==($81|0);
 if($82){label=26;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 26: 
 if($75){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=HEAP32[(($32)>>2)];
 var $89=$85;label=29;break;
 case 28: 
 var $87=($73&255);
 var $88=$87>>>1;
 var $89=$88;label=29;break;
 case 29: 
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $95=HEAP32[(($31)>>2)];
 var $96=$95&-2;
 var $phitmp_i23_i=((($96)-(1))|0);
 var $97=$phitmp_i23_i;label=32;break;
 case 32: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi34_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($_pre_phi36_i)>>2)];
 var $103=$102;label=35;break;
 case 35: 
 var $103;
 var $104=(($103+$89)|0);
 HEAP32[(($__a_end_i)>>2)]=$104;
 var $__a_1_i=$103;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $106=HEAP8[($7)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=41;break;}else{label=39;break;}
 case 39: 
 var $110=(($__buf_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 _free($111);
 label=41;break;
 case 41: 
 var $114=HEAP8[($6)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=44;break;}else{label=42;break;}
 case 42: 
 var $118=(($__grouping_i+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=44;break;}else{label=43;break;}
 case 43: 
 _free($119);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $122=(($50+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($50+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$50;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$132;label=48;break; } else { label=36;break; }
 case 47: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i=$134;label=48;break;
 case 48: 
 var $_0_i_i_i;
 var $136=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $137=($136|0)==0;
 if($137){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $139=HEAP32[(($122)>>2)];
 var $140=HEAP32[(($124)>>2)];
 var $141=($139|0)==($140|0);
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=$50;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 51: 
 var $149=(($139+4)|0);
 HEAP32[(($122)>>2)]=$149;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $151=HEAP8[($6)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=54;break;}else{label=53;break;}
 case 53: 
 var $155=(($__grouping_i+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=55;break;
 case 54: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=58;break;}else{label=56;break;}
 case 56: 
 var $163=HEAP32[(($__g_end_i)>>2)];
 var $164=$163;
 var $165=$__g_i;
 var $166=((($164)-($165))|0);
 var $167=($166|0)<160;
 if($167){label=57;break;}else{label=58;break;}
 case 57: 
 var $169=HEAP32[(($__dc_i)>>2)];
 var $170=(($163+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$170;
 HEAP32[(($163)>>2)]=$169;
 label=58;break;
 case 58: 
 var $171=HEAP32[(($__a_end_i)>>2)];
 var $172$r=(function() { try { __THREW__ = 0; return __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a_2_i,$171,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $172$0=$172$r;var $172$1=tempRet0;if (!__THREW__) { label=59;break; } else { label=37;break; }
 case 59: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$172$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$172$1;
 var $174=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$174,$__err);
 var $175=($50|0)==0;
 if($175){var $192=1;var $191=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $177=(($50+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($50+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=61;break;}else{label=62;break;}
 case 61: 
 var $183=$50;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$187;label=63;break; } else { label=37;break; }
 case 62: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i_i_i_i=$189;label=63;break;
 case 63: 
 var $_0_i_i_i_i_i;
 var $190=($_0_i_i_i_i_i|0)==-1;
 var $_7=($190?0:$50);
 var $_8=($190?1:0);
 var $192=$_8;var $191=$_7;label=64;break;
 case 64: 
 var $191;
 var $192;
 var $193=($_pre_i3_i_i_i|0)==0;
 if($193){label=69;break;}else{label=65;break;}
 case 65: 
 var $195=(($_pre_i3_i_i_i+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($_pre_i3_i_i_i+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($196|0)==($198|0);
 if($199){label=66;break;}else{label=67;break;}
 case 66: 
 var $201=$_pre_i3_i_i_i;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$205;label=68;break; } else { label=37;break; }
 case 67: 
 var $207=HEAP32[(($196)>>2)];
 var $_0_i_i1_i_i_i=$207;label=68;break;
 case 68: 
 var $_0_i_i1_i_i_i;
 var $208=($_0_i_i1_i_i_i|0)==-1;
 if($208){label=69;break;}else{label=70;break;}
 case 69: 
 if($192){label=71;break;}else{label=72;break;}
 case 70: 
 if($192){label=72;break;}else{label=71;break;}
 case 71: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 label=72;break;
 case 72: 
 var $213=(($agg_result)|0);
 HEAP32[(($213)>>2)]=$191;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $214=HEAP8[($7)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=75;break;}else{label=73;break;}
 case 73: 
 var $218=(($__buf_i+8)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==0;
 if($220){label=75;break;}else{label=74;break;}
 case 74: 
 _free($219);
 label=75;break;
 case 75: 
 var $222=HEAP8[($6)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=78;break;}else{label=76;break;}
 case 76: 
 var $226=(($__grouping_i+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($227|0)==0;
 if($228){label=78;break;}else{label=77;break;}
 case 77: 
 _free($227);
 label=78;break;
 case 78: 
 var $$etemp$11$0=104;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRt($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[($7)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $28=$24;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi34_i=$27;var $_pre_phi36_i=$_pre35_i;label=9;break;
 case 9: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=52;break;}
 case 22: 
 var $_sroa_06_2;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($7)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=HEAP32[(($32)>>2)];
 var $81=$77;label=25;break;
 case 24: 
 var $79=($73&255);
 var $80=$79>>>1;
 var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82=($72|0)==($81|0);
 if($82){label=26;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 26: 
 if($75){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=HEAP32[(($32)>>2)];
 var $89=$85;label=29;break;
 case 28: 
 var $87=($73&255);
 var $88=$87>>>1;
 var $89=$88;label=29;break;
 case 29: 
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $95=HEAP32[(($31)>>2)];
 var $96=$95&-2;
 var $phitmp_i23_i=((($96)-(1))|0);
 var $97=$phitmp_i23_i;label=32;break;
 case 32: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi34_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($_pre_phi36_i)>>2)];
 var $103=$102;label=35;break;
 case 35: 
 var $103;
 var $104=(($103+$89)|0);
 HEAP32[(($__a_end_i)>>2)]=$104;
 var $__a_1_i=$103;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $106=HEAP8[($7)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=41;break;}else{label=39;break;}
 case 39: 
 var $110=(($__buf_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 _free($111);
 label=41;break;
 case 41: 
 var $114=HEAP8[($6)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=44;break;}else{label=42;break;}
 case 42: 
 var $118=(($__grouping_i+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=44;break;}else{label=43;break;}
 case 43: 
 _free($119);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $122=(($50+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($50+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$50;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$132;label=48;break; } else { label=36;break; }
 case 47: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i=$134;label=48;break;
 case 48: 
 var $_0_i_i_i;
 var $136=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $137=($136|0)==0;
 if($137){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $139=HEAP32[(($122)>>2)];
 var $140=HEAP32[(($124)>>2)];
 var $141=($139|0)==($140|0);
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=$50;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 51: 
 var $149=(($139+4)|0);
 HEAP32[(($122)>>2)]=$149;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $151=HEAP8[($6)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=54;break;}else{label=53;break;}
 case 53: 
 var $155=(($__grouping_i+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=55;break;
 case 54: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=58;break;}else{label=56;break;}
 case 56: 
 var $163=HEAP32[(($__g_end_i)>>2)];
 var $164=$163;
 var $165=$__g_i;
 var $166=((($164)-($165))|0);
 var $167=($166|0)<160;
 if($167){label=57;break;}else{label=58;break;}
 case 57: 
 var $169=HEAP32[(($__dc_i)>>2)];
 var $170=(($163+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$170;
 HEAP32[(($163)>>2)]=$169;
 label=58;break;
 case 58: 
 var $171=HEAP32[(($__a_end_i)>>2)];
 var $172=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a_2_i,$171,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=37;break; }
 case 59: 
 HEAP16[(($__v)>>1)]=$172;
 var $174=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$174,$__err);
 var $175=($50|0)==0;
 if($175){var $192=1;var $191=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $177=(($50+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($50+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=61;break;}else{label=62;break;}
 case 61: 
 var $183=$50;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$187;label=63;break; } else { label=37;break; }
 case 62: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i_i_i_i=$189;label=63;break;
 case 63: 
 var $_0_i_i_i_i_i;
 var $190=($_0_i_i_i_i_i|0)==-1;
 var $_7=($190?0:$50);
 var $_8=($190?1:0);
 var $192=$_8;var $191=$_7;label=64;break;
 case 64: 
 var $191;
 var $192;
 var $193=($_pre_i3_i_i_i|0)==0;
 if($193){label=69;break;}else{label=65;break;}
 case 65: 
 var $195=(($_pre_i3_i_i_i+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($_pre_i3_i_i_i+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($196|0)==($198|0);
 if($199){label=66;break;}else{label=67;break;}
 case 66: 
 var $201=$_pre_i3_i_i_i;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$205;label=68;break; } else { label=37;break; }
 case 67: 
 var $207=HEAP32[(($196)>>2)];
 var $_0_i_i1_i_i_i=$207;label=68;break;
 case 68: 
 var $_0_i_i1_i_i_i;
 var $208=($_0_i_i1_i_i_i|0)==-1;
 if($208){label=69;break;}else{label=70;break;}
 case 69: 
 if($192){label=71;break;}else{label=72;break;}
 case 70: 
 if($192){label=72;break;}else{label=71;break;}
 case 71: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 label=72;break;
 case 72: 
 var $213=(($agg_result)|0);
 HEAP32[(($213)>>2)]=$191;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $214=HEAP8[($7)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=75;break;}else{label=73;break;}
 case 73: 
 var $218=(($__buf_i+8)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==0;
 if($220){label=75;break;}else{label=74;break;}
 case 74: 
 _free($219);
 label=75;break;
 case 75: 
 var $222=HEAP8[($6)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=78;break;}else{label=76;break;}
 case 76: 
 var $226=(($__grouping_i+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($227|0)==0;
 if($228){label=78;break;}else{label=77;break;}
 case 77: 
 _free($227);
 label=78;break;
 case 78: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjS8_($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[($7)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $28=$24;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi34_i=$27;var $_pre_phi36_i=$_pre35_i;label=9;break;
 case 9: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=52;break;}
 case 22: 
 var $_sroa_06_2;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($7)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=HEAP32[(($32)>>2)];
 var $81=$77;label=25;break;
 case 24: 
 var $79=($73&255);
 var $80=$79>>>1;
 var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82=($72|0)==($81|0);
 if($82){label=26;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 26: 
 if($75){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=HEAP32[(($32)>>2)];
 var $89=$85;label=29;break;
 case 28: 
 var $87=($73&255);
 var $88=$87>>>1;
 var $89=$88;label=29;break;
 case 29: 
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $95=HEAP32[(($31)>>2)];
 var $96=$95&-2;
 var $phitmp_i23_i=((($96)-(1))|0);
 var $97=$phitmp_i23_i;label=32;break;
 case 32: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi34_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($_pre_phi36_i)>>2)];
 var $103=$102;label=35;break;
 case 35: 
 var $103;
 var $104=(($103+$89)|0);
 HEAP32[(($__a_end_i)>>2)]=$104;
 var $__a_1_i=$103;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $106=HEAP8[($7)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=41;break;}else{label=39;break;}
 case 39: 
 var $110=(($__buf_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 _free($111);
 label=41;break;
 case 41: 
 var $114=HEAP8[($6)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=44;break;}else{label=42;break;}
 case 42: 
 var $118=(($__grouping_i+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=44;break;}else{label=43;break;}
 case 43: 
 _free($119);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $122=(($50+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($50+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$50;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$132;label=48;break; } else { label=36;break; }
 case 47: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i=$134;label=48;break;
 case 48: 
 var $_0_i_i_i;
 var $136=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $137=($136|0)==0;
 if($137){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $139=HEAP32[(($122)>>2)];
 var $140=HEAP32[(($124)>>2)];
 var $141=($139|0)==($140|0);
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=$50;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 51: 
 var $149=(($139+4)|0);
 HEAP32[(($122)>>2)]=$149;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $151=HEAP8[($6)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=54;break;}else{label=53;break;}
 case 53: 
 var $155=(($__grouping_i+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=55;break;
 case 54: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=58;break;}else{label=56;break;}
 case 56: 
 var $163=HEAP32[(($__g_end_i)>>2)];
 var $164=$163;
 var $165=$__g_i;
 var $166=((($164)-($165))|0);
 var $167=($166|0)<160;
 if($167){label=57;break;}else{label=58;break;}
 case 57: 
 var $169=HEAP32[(($__dc_i)>>2)];
 var $170=(($163+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$170;
 HEAP32[(($163)>>2)]=$169;
 label=58;break;
 case 58: 
 var $171=HEAP32[(($__a_end_i)>>2)];
 var $172=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a_2_i,$171,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=37;break; }
 case 59: 
 HEAP32[(($__v)>>2)]=$172;
 var $174=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$174,$__err);
 var $175=($50|0)==0;
 if($175){var $192=1;var $191=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $177=(($50+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($50+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=61;break;}else{label=62;break;}
 case 61: 
 var $183=$50;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$187;label=63;break; } else { label=37;break; }
 case 62: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i_i_i_i=$189;label=63;break;
 case 63: 
 var $_0_i_i_i_i_i;
 var $190=($_0_i_i_i_i_i|0)==-1;
 var $_7=($190?0:$50);
 var $_8=($190?1:0);
 var $192=$_8;var $191=$_7;label=64;break;
 case 64: 
 var $191;
 var $192;
 var $193=($_pre_i3_i_i_i|0)==0;
 if($193){label=69;break;}else{label=65;break;}
 case 65: 
 var $195=(($_pre_i3_i_i_i+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($_pre_i3_i_i_i+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($196|0)==($198|0);
 if($199){label=66;break;}else{label=67;break;}
 case 66: 
 var $201=$_pre_i3_i_i_i;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$205;label=68;break; } else { label=37;break; }
 case 67: 
 var $207=HEAP32[(($196)>>2)];
 var $_0_i_i1_i_i_i=$207;label=68;break;
 case 68: 
 var $_0_i_i1_i_i_i;
 var $208=($_0_i_i1_i_i_i|0)==-1;
 if($208){label=69;break;}else{label=70;break;}
 case 69: 
 if($192){label=71;break;}else{label=72;break;}
 case 70: 
 if($192){label=72;break;}else{label=71;break;}
 case 71: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 label=72;break;
 case 72: 
 var $213=(($agg_result)|0);
 HEAP32[(($213)>>2)]=$191;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $214=HEAP8[($7)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=75;break;}else{label=73;break;}
 case 73: 
 var $218=(($__buf_i+8)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==0;
 if($220){label=75;break;}else{label=74;break;}
 case 74: 
 _free($219);
 label=75;break;
 case 75: 
 var $222=HEAP8[($6)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=78;break;}else{label=76;break;}
 case 76: 
 var $226=(($__grouping_i+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($227|0)==0;
 if($228){label=78;break;}else{label=77;break;}
 case 77: 
 _free($227);
 label=78;break;
 case 78: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRm($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[($7)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $28=$24;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi34_i=$27;var $_pre_phi36_i=$_pre35_i;label=9;break;
 case 9: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=52;break;}
 case 22: 
 var $_sroa_06_2;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($7)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=HEAP32[(($32)>>2)];
 var $81=$77;label=25;break;
 case 24: 
 var $79=($73&255);
 var $80=$79>>>1;
 var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82=($72|0)==($81|0);
 if($82){label=26;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 26: 
 if($75){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=HEAP32[(($32)>>2)];
 var $89=$85;label=29;break;
 case 28: 
 var $87=($73&255);
 var $88=$87>>>1;
 var $89=$88;label=29;break;
 case 29: 
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $95=HEAP32[(($31)>>2)];
 var $96=$95&-2;
 var $phitmp_i23_i=((($96)-(1))|0);
 var $97=$phitmp_i23_i;label=32;break;
 case 32: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi34_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($_pre_phi36_i)>>2)];
 var $103=$102;label=35;break;
 case 35: 
 var $103;
 var $104=(($103+$89)|0);
 HEAP32[(($__a_end_i)>>2)]=$104;
 var $__a_1_i=$103;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $106=HEAP8[($7)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=41;break;}else{label=39;break;}
 case 39: 
 var $110=(($__buf_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 _free($111);
 label=41;break;
 case 41: 
 var $114=HEAP8[($6)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=44;break;}else{label=42;break;}
 case 42: 
 var $118=(($__grouping_i+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=44;break;}else{label=43;break;}
 case 43: 
 _free($119);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $122=(($50+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($50+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$50;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$132;label=48;break; } else { label=36;break; }
 case 47: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i=$134;label=48;break;
 case 48: 
 var $_0_i_i_i;
 var $136=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $137=($136|0)==0;
 if($137){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $139=HEAP32[(($122)>>2)];
 var $140=HEAP32[(($124)>>2)];
 var $141=($139|0)==($140|0);
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=$50;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 51: 
 var $149=(($139+4)|0);
 HEAP32[(($122)>>2)]=$149;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $151=HEAP8[($6)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=54;break;}else{label=53;break;}
 case 53: 
 var $155=(($__grouping_i+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=55;break;
 case 54: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=58;break;}else{label=56;break;}
 case 56: 
 var $163=HEAP32[(($__g_end_i)>>2)];
 var $164=$163;
 var $165=$__g_i;
 var $166=((($164)-($165))|0);
 var $167=($166|0)<160;
 if($167){label=57;break;}else{label=58;break;}
 case 57: 
 var $169=HEAP32[(($__dc_i)>>2)];
 var $170=(($163+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$170;
 HEAP32[(($163)>>2)]=$169;
 label=58;break;
 case 58: 
 var $171=HEAP32[(($__a_end_i)>>2)];
 var $172=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a_2_i,$171,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=37;break; }
 case 59: 
 HEAP32[(($__v)>>2)]=$172;
 var $174=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$174,$__err);
 var $175=($50|0)==0;
 if($175){var $192=1;var $191=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $177=(($50+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($50+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=61;break;}else{label=62;break;}
 case 61: 
 var $183=$50;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$187;label=63;break; } else { label=37;break; }
 case 62: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i_i_i_i=$189;label=63;break;
 case 63: 
 var $_0_i_i_i_i_i;
 var $190=($_0_i_i_i_i_i|0)==-1;
 var $_7=($190?0:$50);
 var $_8=($190?1:0);
 var $192=$_8;var $191=$_7;label=64;break;
 case 64: 
 var $191;
 var $192;
 var $193=($_pre_i3_i_i_i|0)==0;
 if($193){label=69;break;}else{label=65;break;}
 case 65: 
 var $195=(($_pre_i3_i_i_i+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($_pre_i3_i_i_i+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($196|0)==($198|0);
 if($199){label=66;break;}else{label=67;break;}
 case 66: 
 var $201=$_pre_i3_i_i_i;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$205;label=68;break; } else { label=37;break; }
 case 67: 
 var $207=HEAP32[(($196)>>2)];
 var $_0_i_i1_i_i_i=$207;label=68;break;
 case 68: 
 var $_0_i_i1_i_i_i;
 var $208=($_0_i_i1_i_i_i|0)==-1;
 if($208){label=69;break;}else{label=70;break;}
 case 69: 
 if($192){label=71;break;}else{label=72;break;}
 case 70: 
 if($192){label=72;break;}else{label=71;break;}
 case 71: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 label=72;break;
 case 72: 
 var $213=(($agg_result)|0);
 HEAP32[(($213)>>2)]=$191;
 var $$etemp$8$0=160;
 var $$etemp$8$1=0;

 var $214=HEAP8[($7)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=75;break;}else{label=73;break;}
 case 73: 
 var $218=(($__buf_i+8)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==0;
 if($220){label=75;break;}else{label=74;break;}
 case 74: 
 _free($219);
 label=75;break;
 case 75: 
 var $222=HEAP8[($6)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=78;break;}else{label=76;break;}
 case 76: 
 var $226=(($__grouping_i+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($227|0)==0;
 if($228){label=78;break;}else{label=77;break;}
 case 77: 
 _free($227);
 label=78;break;
 case 78: 
 var $$etemp$9$0=104;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRy($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+328)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__thousands_sep_i=(sp)+(104);
 var $__grouping_i=(sp)+(112);
 var $__buf_i=(sp)+(128);
 var $__a_end_i=(sp)+(144);
 var $__g_i=(sp)+(152);
 var $__g_end_i=(sp)+(312);
 var $__dc_i=(sp)+(320);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__thousands_sep_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__grouping_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $7=$__buf_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__a_end_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $9=$__g_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__dc_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=(($__iob+4)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=$12&74;
 if(($13|0)==8){ label=2;break;}else if(($13|0)==0){ label=3;break;}else if(($13|0)==64){ var $_0_i_i=8;label=5;break;}else{label=4;break;}
 case 2: 
 var $_0_i_i=16;label=5;break;
 case 3: 
 var $_0_i_i=0;label=5;break;
 case 4: 
 var $_0_i_i=10;label=5;break;
 case 5: 
 var $_0_i_i;
 var $17=$__atoms_i;
 var $$etemp$6$0=104;
 var $$etemp$6$1=0;

 var $18=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($__grouping_i,$__iob,$18,$__thousands_sep_i);
 HEAP32[(($7)>>2)]=0; HEAP32[((($7)+(4))>>2)]=0; HEAP32[((($7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=37;break; }
 case 6: 
 var $19=HEAP8[($7)];
 var $20=$19&1;
 var $21=(($20<<24)>>24)==0;
 if($21){label=8;break;}else{label=7;break;}
 case 7: 
 var $23=(($__buf_i+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $_pre32_i=$__buf_i;
 var $_pre33_i=(($_pre32_i+1)|0);
 var $28=$24;var $_pre_phi34_i=$_pre33_i;var $_pre_phi36_i=$23;label=9;break;
 case 8: 
 var $26=$__buf_i;
 var $27=(($26+1)|0);
 var $_pre35_i=(($__buf_i+8)|0);
 var $28=$27;var $_pre_phi34_i=$27;var $_pre_phi36_i=$_pre35_i;label=9;break;
 case 9: 
 var $_pre_phi36_i;
 var $_pre_phi34_i;
 var $28;
 HEAP32[(($__a_end_i)>>2)]=$28;
 var $29=$__g_i;
 var $$etemp$7$0=160;
 var $$etemp$7$1=0;

 var $30=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$30;
 HEAP32[(($__dc_i)>>2)]=0;
 var $31=(($__buf_i)|0);
 var $32=(($__buf_i+4)|0);
 var $33=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$28;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=10;break;
 case 10: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $34=($_pre_i_i_i5_i|0)==0;
 if($34){var $51=1;var $50=0;label=15;break;}else{label=11;break;}
 case 11: 
 var $36=(($_pre_i_i_i5_i+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(($_pre_i_i_i5_i+16)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($37|0)==($39|0);
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=$_pre_i_i_i5_i;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+36)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$45]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$46;label=14;break; } else { label=36;break; }
 case 13: 
 var $48=HEAP32[(($37)>>2)];
 var $_0_i_i_i_i3_i=$48;label=14;break;
 case 14: 
 var $_0_i_i_i_i3_i;
 var $49=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($49?0:$_pre_i_i_i5_i);
 var $_=($49?1:0);
 var $51=$_;var $50=$__pre_i_i_i5_i;label=15;break;
 case 15: 
 var $50;
 var $51;
 var $52=($_sroa_06_0|0)==0;
 if($52){label=20;break;}else{label=16;break;}
 case 16: 
 var $54=(($_sroa_06_0+12)|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=(($_sroa_06_0+16)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($55|0)==($57|0);
 if($58){label=17;break;}else{label=18;break;}
 case 17: 
 var $60=$_sroa_06_0;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$63]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$64;label=19;break; } else { label=36;break; }
 case 18: 
 var $66=HEAP32[(($55)>>2)];
 var $_0_i_i1_i_i9_i=$66;label=19;break;
 case 19: 
 var $_0_i_i1_i_i9_i;
 var $67=($_0_i_i1_i_i9_i|0)==-1;
 if($67){label=20;break;}else{label=21;break;}
 case 20: 
 if($51){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=52;break;}else{var $_sroa_06_2=0;label=22;break;}
 case 21: 
 if($51){var $_sroa_06_2=$_sroa_06_0;label=22;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=52;break;}
 case 22: 
 var $_sroa_06_2;
 var $69=HEAP32[(($__a_end_i)>>2)];
 var $70=$69;
 var $71=$__a_0_i;
 var $72=((($70)-($71))|0);
 var $73=HEAP8[($7)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=24;break;}else{label=23;break;}
 case 23: 
 var $77=HEAP32[(($32)>>2)];
 var $81=$77;label=25;break;
 case 24: 
 var $79=($73&255);
 var $80=$79>>>1;
 var $81=$80;label=25;break;
 case 25: 
 var $81;
 var $82=($72|0)==($81|0);
 if($82){label=26;break;}else{var $__a_1_i=$__a_0_i;label=45;break;}
 case 26: 
 if($75){label=28;break;}else{label=27;break;}
 case 27: 
 var $85=HEAP32[(($32)>>2)];
 var $89=$85;label=29;break;
 case 28: 
 var $87=($73&255);
 var $88=$87>>>1;
 var $89=$88;label=29;break;
 case 29: 
 var $89;
 var $90=$89<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$90) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=36;break; }
 case 30: 
 var $91=HEAP8[($7)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){var $97=10;label=32;break;}else{label=31;break;}
 case 31: 
 var $95=HEAP32[(($31)>>2)];
 var $96=$95&-2;
 var $phitmp_i23_i=((($96)-(1))|0);
 var $97=$phitmp_i23_i;label=32;break;
 case 32: 
 var $97;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$97) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=36;break; }
 case 33: 
 var $98=HEAP8[($7)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){var $103=$_pre_phi34_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $102=HEAP32[(($_pre_phi36_i)>>2)];
 var $103=$102;label=35;break;
 case 35: 
 var $103;
 var $104=(($103+$89)|0);
 HEAP32[(($__a_end_i)>>2)]=$104;
 var $__a_1_i=$103;label=45;break;
 case 36: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=38;break;
 case 37: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=38;break;
 case 38: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $106=HEAP8[($7)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=41;break;}else{label=39;break;}
 case 39: 
 var $110=(($__buf_i+8)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=($111|0)==0;
 if($112){label=41;break;}else{label=40;break;}
 case 40: 
 _free($111);
 label=41;break;
 case 41: 
 var $114=HEAP8[($6)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=44;break;}else{label=42;break;}
 case 42: 
 var $118=(($__grouping_i+8)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($119|0)==0;
 if($120){label=44;break;}else{label=43;break;}
 case 43: 
 _free($119);
 label=44;break;
 case 44: 
 ___resumeException($lpad_phi_i$0)
 case 45: 
 var $__a_1_i;
 var $122=(($50+12)|0);
 var $123=HEAP32[(($122)>>2)];
 var $124=(($50+16)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=($123|0)==($125|0);
 if($126){label=46;break;}else{label=47;break;}
 case 46: 
 var $128=$50;
 var $129=HEAP32[(($128)>>2)];
 var $130=(($129+36)|0);
 var $131=HEAP32[(($130)>>2)];
 var $132=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$131]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$132;label=48;break; } else { label=36;break; }
 case 47: 
 var $134=HEAP32[(($123)>>2)];
 var $_0_i_i_i=$134;label=48;break;
 case 48: 
 var $_0_i_i_i;
 var $136=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i_i,$_0_i_i,$__a_1_i,$__a_end_i,$__dc_i,$33,$__grouping_i,$30,$__g_end_i,$18);
 var $137=($136|0)==0;
 if($137){label=49;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=52;break;}
 case 49: 
 var $139=HEAP32[(($122)>>2)];
 var $140=HEAP32[(($124)>>2)];
 var $141=($139|0)==($140|0);
 if($141){label=50;break;}else{label=51;break;}
 case 50: 
 var $143=$50;
 var $144=HEAP32[(($143)>>2)];
 var $145=(($144+40)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$146]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break; } else { label=36;break; }
 case 51: 
 var $149=(($139+4)|0);
 HEAP32[(($122)>>2)]=$149;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$50;var $_sroa_06_0=$_sroa_06_2;label=10;break;
 case 52: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $151=HEAP8[($6)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=54;break;}else{label=53;break;}
 case 53: 
 var $155=(($__grouping_i+4)|0);
 var $156=HEAP32[(($155)>>2)];
 var $160=$156;label=55;break;
 case 54: 
 var $158=($151&255);
 var $159=$158>>>1;
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=($160|0)==0;
 if($161){label=58;break;}else{label=56;break;}
 case 56: 
 var $163=HEAP32[(($__g_end_i)>>2)];
 var $164=$163;
 var $165=$__g_i;
 var $166=((($164)-($165))|0);
 var $167=($166|0)<160;
 if($167){label=57;break;}else{label=58;break;}
 case 57: 
 var $169=HEAP32[(($__dc_i)>>2)];
 var $170=(($163+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$170;
 HEAP32[(($163)>>2)]=$169;
 label=58;break;
 case 58: 
 var $171=HEAP32[(($__a_end_i)>>2)];
 var $172$r=(function() { try { __THREW__ = 0; return __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a_2_i,$171,$__err,$_0_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();var $172$0=$172$r;var $172$1=tempRet0;if (!__THREW__) { label=59;break; } else { label=37;break; }
 case 59: 
 var $st$8$0=(($__v)|0);
 HEAP32[(($st$8$0)>>2)]=$172$0;
 var $st$9$1=(($__v+4)|0);
 HEAP32[(($st$9$1)>>2)]=$172$1;
 var $174=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$30,$174,$__err);
 var $175=($50|0)==0;
 if($175){var $192=1;var $191=0;label=64;break;}else{label=60;break;}
 case 60: 
 var $177=(($50+12)|0);
 var $178=HEAP32[(($177)>>2)];
 var $179=(($50+16)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=($178|0)==($180|0);
 if($181){label=61;break;}else{label=62;break;}
 case 61: 
 var $183=$50;
 var $184=HEAP32[(($183)>>2)];
 var $185=(($184+36)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$186]($50) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$187;label=63;break; } else { label=37;break; }
 case 62: 
 var $189=HEAP32[(($178)>>2)];
 var $_0_i_i_i_i_i=$189;label=63;break;
 case 63: 
 var $_0_i_i_i_i_i;
 var $190=($_0_i_i_i_i_i|0)==-1;
 var $_7=($190?0:$50);
 var $_8=($190?1:0);
 var $192=$_8;var $191=$_7;label=64;break;
 case 64: 
 var $191;
 var $192;
 var $193=($_pre_i3_i_i_i|0)==0;
 if($193){label=69;break;}else{label=65;break;}
 case 65: 
 var $195=(($_pre_i3_i_i_i+12)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(($_pre_i3_i_i_i+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($196|0)==($198|0);
 if($199){label=66;break;}else{label=67;break;}
 case 66: 
 var $201=$_pre_i3_i_i_i;
 var $202=HEAP32[(($201)>>2)];
 var $203=(($202+36)|0);
 var $204=HEAP32[(($203)>>2)];
 var $205=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$204]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$205;label=68;break; } else { label=37;break; }
 case 67: 
 var $207=HEAP32[(($196)>>2)];
 var $_0_i_i1_i_i_i=$207;label=68;break;
 case 68: 
 var $_0_i_i1_i_i_i;
 var $208=($_0_i_i1_i_i_i|0)==-1;
 if($208){label=69;break;}else{label=70;break;}
 case 69: 
 if($192){label=71;break;}else{label=72;break;}
 case 70: 
 if($192){label=72;break;}else{label=71;break;}
 case 71: 
 var $210=HEAP32[(($__err)>>2)];
 var $211=$210|2;
 HEAP32[(($__err)>>2)]=$211;
 label=72;break;
 case 72: 
 var $213=(($agg_result)|0);
 HEAP32[(($213)>>2)]=$191;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $214=HEAP8[($7)];
 var $215=$214&1;
 var $216=(($215<<24)>>24)==0;
 if($216){label=75;break;}else{label=73;break;}
 case 73: 
 var $218=(($__buf_i+8)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=($219|0)==0;
 if($220){label=75;break;}else{label=74;break;}
 case 74: 
 _free($219);
 label=75;break;
 case 75: 
 var $222=HEAP8[($6)];
 var $223=$222&1;
 var $224=(($223<<24)>>24)==0;
 if($224){label=78;break;}else{label=76;break;}
 case 76: 
 var $226=(($__grouping_i+8)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=($227|0)==0;
 if($228){label=78;break;}else{label=77;break;}
 case 77: 
 _free($227);
 label=78;break;
 case 78: 
 var $$etemp$11$0=104;
 var $$etemp$11$1=0;

 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=4;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRf($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[($8)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre33_i=$__buf_i;
 var $_pre34_i=(($_pre33_i+1)|0);
 var $23=$19;var $_pre_phi35_i=$_pre34_i;var $_pre_phi37_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre36_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi35_i=$22;var $_pre_phi37_i=$_pre36_i;label=5;break;
 case 5: 
 var $_pre_phi37_i;
 var $_pre_phi35_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i5_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i5_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i5_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i5_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i3_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i3_i;
 var $45=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($45?0:$_pre_i_i_i5_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i5_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i9_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i9_i;
 var $63=($_0_i_i1_i_i9_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=48;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=48;break;}
 case 18: 
 var $_sroa_06_2;
 var $65=HEAP32[(($__a_end_i)>>2)];
 var $66=$65;
 var $67=$__a_0_i;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($8)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=20;break;}else{label=19;break;}
 case 19: 
 var $73=HEAP32[(($27)>>2)];
 var $77=$73;label=21;break;
 case 20: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=21;break;
 case 21: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=22;break;}else{var $__a_1_i=$__a_0_i;label=41;break;}
 case 22: 
 if($71){label=24;break;}else{label=23;break;}
 case 23: 
 var $81=HEAP32[(($27)>>2)];
 var $85=$81;label=25;break;
 case 24: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=$84;label=25;break;
 case 25: 
 var $85;
 var $86=$85<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $87=HEAP8[($8)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){var $93=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $91=HEAP32[(($26)>>2)];
 var $92=$91&-2;
 var $phitmp_i23_i=((($92)-(1))|0);
 var $93=$phitmp_i23_i;label=28;break;
 case 28: 
 var $93;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $94=HEAP8[($8)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){var $99=$_pre_phi35_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $98=HEAP32[(($_pre_phi37_i)>>2)];
 var $99=$98;label=31;break;
 case 31: 
 var $99;
 var $100=(($99+$85)|0);
 HEAP32[(($__a_end_i)>>2)]=$100;
 var $__a_1_i=$99;label=41;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $102=HEAP8[($8)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=37;break;}else{label=35;break;}
 case 35: 
 var $106=(($__buf_i+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=37;break;}else{label=36;break;}
 case 36: 
 _free($107);
 label=37;break;
 case 37: 
 var $110=HEAP8[($7)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=40;break;}else{label=38;break;}
 case 38: 
 var $114=(($__grouping_i+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)==0;
 if($116){label=40;break;}else{label=39;break;}
 case 39: 
 _free($115);
 label=40;break;
 case 40: 
 ___resumeException($lpad_phi_i$0)
 case 41: 
 var $__a_1_i;
 var $118=(($46+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($46+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=42;break;}else{label=43;break;}
 case 42: 
 var $124=$46;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=44;break; } else { label=32;break; }
 case 43: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=44;break;
 case 44: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $133=($132|0)==0;
 if($133){label=45;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=48;break;}
 case 45: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=46;break;}else{label=47;break;}
 case 46: 
 var $139=$46;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 47: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 48: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=50;break;}else{label=49;break;}
 case 49: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=51;break;
 case 50: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=51;break;
 case 51: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=55;break;}else{label=52;break;}
 case 52: 
 var $159=HEAP8[($__in_units_i)];
 var $160=(($159<<24)>>24)==0;
 if($160){label=55;break;}else{label=53;break;}
 case 53: 
 var $162=HEAP32[(($__g_end_i)>>2)];
 var $163=$162;
 var $164=$__g_i;
 var $165=((($163)-($164))|0);
 var $166=($165|0)<160;
 if($166){label=54;break;}else{label=55;break;}
 case 54: 
 var $168=HEAP32[(($__dc_i)>>2)];
 var $169=(($162+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$169;
 HEAP32[(($162)>>2)]=$168;
 label=55;break;
 case 55: 
 var $170=HEAP32[(($__a_end_i)>>2)];
 var $171=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a_2_i,$170,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=33;break; }
 case 56: 
 HEAPF32[(($__v)>>2)]=$171;
 var $173=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$173,$__err);
 var $174=($46|0)==0;
 if($174){var $191=1;var $190=0;label=61;break;}else{label=57;break;}
 case 57: 
 var $176=(($46+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($46+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=58;break;}else{label=59;break;}
 case 58: 
 var $182=$46;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$186;label=60;break; } else { label=33;break; }
 case 59: 
 var $188=HEAP32[(($177)>>2)];
 var $_0_i_i_i_i_i=$188;label=60;break;
 case 60: 
 var $_0_i_i_i_i_i;
 var $189=($_0_i_i_i_i_i|0)==-1;
 var $_8=($189?0:$46);
 var $_9=($189?1:0);
 var $191=$_9;var $190=$_8;label=61;break;
 case 61: 
 var $190;
 var $191;
 var $192=($_pre_i3_i_i_i|0)==0;
 if($192){label=66;break;}else{label=62;break;}
 case 62: 
 var $194=(($_pre_i3_i_i_i+12)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($_pre_i3_i_i_i+16)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($195|0)==($197|0);
 if($198){label=63;break;}else{label=64;break;}
 case 63: 
 var $200=$_pre_i3_i_i_i;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+36)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$204;label=65;break; } else { label=33;break; }
 case 64: 
 var $206=HEAP32[(($195)>>2)];
 var $_0_i_i1_i_i_i=$206;label=65;break;
 case 65: 
 var $_0_i_i1_i_i_i;
 var $207=($_0_i_i1_i_i_i|0)==-1;
 if($207){label=66;break;}else{label=67;break;}
 case 66: 
 if($191){label=68;break;}else{label=69;break;}
 case 67: 
 if($191){label=69;break;}else{label=68;break;}
 case 68: 
 var $209=HEAP32[(($__err)>>2)];
 var $210=$209|2;
 HEAP32[(($__err)>>2)]=$210;
 label=69;break;
 case 69: 
 var $212=(($agg_result)|0);
 HEAP32[(($212)>>2)]=$190;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $213=HEAP8[($8)];
 var $214=$213&1;
 var $215=(($214<<24)>>24)==0;
 if($215){label=72;break;}else{label=70;break;}
 case 70: 
 var $217=(($__buf_i+8)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($218|0)==0;
 if($219){label=72;break;}else{label=71;break;}
 case 71: 
 _free($218);
 label=72;break;
 case 72: 
 var $221=HEAP8[($7)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=75;break;}else{label=73;break;}
 case 73: 
 var $225=(($__grouping_i+8)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=75;break;}else{label=74;break;}
 case 74: 
 _free($226);
 label=75;break;
 case 75: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRd($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[($8)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre33_i=$__buf_i;
 var $_pre34_i=(($_pre33_i+1)|0);
 var $23=$19;var $_pre_phi35_i=$_pre34_i;var $_pre_phi37_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre36_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi35_i=$22;var $_pre_phi37_i=$_pre36_i;label=5;break;
 case 5: 
 var $_pre_phi37_i;
 var $_pre_phi35_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i5_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i5_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i5_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i5_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i3_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i3_i;
 var $45=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($45?0:$_pre_i_i_i5_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i5_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i9_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i9_i;
 var $63=($_0_i_i1_i_i9_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=48;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=48;break;}
 case 18: 
 var $_sroa_06_2;
 var $65=HEAP32[(($__a_end_i)>>2)];
 var $66=$65;
 var $67=$__a_0_i;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($8)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=20;break;}else{label=19;break;}
 case 19: 
 var $73=HEAP32[(($27)>>2)];
 var $77=$73;label=21;break;
 case 20: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=21;break;
 case 21: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=22;break;}else{var $__a_1_i=$__a_0_i;label=41;break;}
 case 22: 
 if($71){label=24;break;}else{label=23;break;}
 case 23: 
 var $81=HEAP32[(($27)>>2)];
 var $85=$81;label=25;break;
 case 24: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=$84;label=25;break;
 case 25: 
 var $85;
 var $86=$85<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $87=HEAP8[($8)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){var $93=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $91=HEAP32[(($26)>>2)];
 var $92=$91&-2;
 var $phitmp_i23_i=((($92)-(1))|0);
 var $93=$phitmp_i23_i;label=28;break;
 case 28: 
 var $93;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $94=HEAP8[($8)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){var $99=$_pre_phi35_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $98=HEAP32[(($_pre_phi37_i)>>2)];
 var $99=$98;label=31;break;
 case 31: 
 var $99;
 var $100=(($99+$85)|0);
 HEAP32[(($__a_end_i)>>2)]=$100;
 var $__a_1_i=$99;label=41;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $102=HEAP8[($8)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=37;break;}else{label=35;break;}
 case 35: 
 var $106=(($__buf_i+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=37;break;}else{label=36;break;}
 case 36: 
 _free($107);
 label=37;break;
 case 37: 
 var $110=HEAP8[($7)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=40;break;}else{label=38;break;}
 case 38: 
 var $114=(($__grouping_i+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)==0;
 if($116){label=40;break;}else{label=39;break;}
 case 39: 
 _free($115);
 label=40;break;
 case 40: 
 ___resumeException($lpad_phi_i$0)
 case 41: 
 var $__a_1_i;
 var $118=(($46+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($46+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=42;break;}else{label=43;break;}
 case 42: 
 var $124=$46;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=44;break; } else { label=32;break; }
 case 43: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=44;break;
 case 44: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $133=($132|0)==0;
 if($133){label=45;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=48;break;}
 case 45: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=46;break;}else{label=47;break;}
 case 46: 
 var $139=$46;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 47: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 48: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=50;break;}else{label=49;break;}
 case 49: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=51;break;
 case 50: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=51;break;
 case 51: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=55;break;}else{label=52;break;}
 case 52: 
 var $159=HEAP8[($__in_units_i)];
 var $160=(($159<<24)>>24)==0;
 if($160){label=55;break;}else{label=53;break;}
 case 53: 
 var $162=HEAP32[(($__g_end_i)>>2)];
 var $163=$162;
 var $164=$__g_i;
 var $165=((($163)-($164))|0);
 var $166=($165|0)<160;
 if($166){label=54;break;}else{label=55;break;}
 case 54: 
 var $168=HEAP32[(($__dc_i)>>2)];
 var $169=(($162+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$169;
 HEAP32[(($162)>>2)]=$168;
 label=55;break;
 case 55: 
 var $170=HEAP32[(($__a_end_i)>>2)];
 var $171=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a_2_i,$170,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=33;break; }
 case 56: 
 HEAPF64[(($__v)>>3)]=$171;
 var $173=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$173,$__err);
 var $174=($46|0)==0;
 if($174){var $191=1;var $190=0;label=61;break;}else{label=57;break;}
 case 57: 
 var $176=(($46+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($46+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=58;break;}else{label=59;break;}
 case 58: 
 var $182=$46;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$186;label=60;break; } else { label=33;break; }
 case 59: 
 var $188=HEAP32[(($177)>>2)];
 var $_0_i_i_i_i_i=$188;label=60;break;
 case 60: 
 var $_0_i_i_i_i_i;
 var $189=($_0_i_i_i_i_i|0)==-1;
 var $_8=($189?0:$46);
 var $_9=($189?1:0);
 var $191=$_9;var $190=$_8;label=61;break;
 case 61: 
 var $190;
 var $191;
 var $192=($_pre_i3_i_i_i|0)==0;
 if($192){label=66;break;}else{label=62;break;}
 case 62: 
 var $194=(($_pre_i3_i_i_i+12)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($_pre_i3_i_i_i+16)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($195|0)==($197|0);
 if($198){label=63;break;}else{label=64;break;}
 case 63: 
 var $200=$_pre_i3_i_i_i;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+36)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$204;label=65;break; } else { label=33;break; }
 case 64: 
 var $206=HEAP32[(($195)>>2)];
 var $_0_i_i1_i_i_i=$206;label=65;break;
 case 65: 
 var $_0_i_i1_i_i_i;
 var $207=($_0_i_i1_i_i_i|0)==-1;
 if($207){label=66;break;}else{label=67;break;}
 case 66: 
 if($191){label=68;break;}else{label=69;break;}
 case 67: 
 if($191){label=69;break;}else{label=68;break;}
 case 68: 
 var $209=HEAP32[(($__err)>>2)];
 var $210=$209|2;
 HEAP32[(($__err)>>2)]=$210;
 label=69;break;
 case 69: 
 var $212=(($agg_result)|0);
 HEAP32[(($212)>>2)]=$190;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $213=HEAP8[($8)];
 var $214=$213&1;
 var $215=(($214<<24)>>24)==0;
 if($215){label=72;break;}else{label=70;break;}
 case 70: 
 var $217=(($__buf_i+8)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($218|0)==0;
 if($219){label=72;break;}else{label=71;break;}
 case 71: 
 _free($218);
 label=72;break;
 case 72: 
 var $221=HEAP8[($7)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=75;break;}else{label=73;break;}
 case 73: 
 var $225=(($__grouping_i+8)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=75;break;}else{label=74;break;}
 case 74: 
 _free($226);
 label=75;break;
 case 75: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+376)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__atoms_i=sp;
 var $__decimal_point_i=(sp)+(128);
 var $__thousands_sep_i=(sp)+(136);
 var $__grouping_i=(sp)+(144);
 var $__buf_i=(sp)+(160);
 var $__a_end_i=(sp)+(176);
 var $__g_i=(sp)+(184);
 var $__g_end_i=(sp)+(344);
 var $__dc_i=(sp)+(352);
 var $__in_units_i=(sp)+(360);
 var $__exp_i=(sp)+(368);
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$__decimal_point_i;
 var $$etemp$0$0=4;
 var $$etemp$0$1=0;

 var $6=$__thousands_sep_i;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $7=$__grouping_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $8=$__buf_i;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $9=$__a_end_i;
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $10=$__g_end_i;
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $11=$__dc_i;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $$etemp$7$0=1;
 var $$etemp$7$1=0;

 var $$etemp$8$0=1;
 var $$etemp$8$1=0;

 var $12=$__atoms_i;
 var $$etemp$9$0=128;
 var $$etemp$9$1=0;

 var $13=(($__atoms_i)|0);
 __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($__grouping_i,$__iob,$13,$__decimal_point_i,$__thousands_sep_i);
 HEAP32[(($8)>>2)]=0; HEAP32[((($8)+(4))>>2)]=0; HEAP32[((($8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=33;break; }
 case 2: 
 var $14=HEAP8[($8)];
 var $15=$14&1;
 var $16=(($15<<24)>>24)==0;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__buf_i+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $_pre33_i=$__buf_i;
 var $_pre34_i=(($_pre33_i+1)|0);
 var $23=$19;var $_pre_phi35_i=$_pre34_i;var $_pre_phi37_i=$18;label=5;break;
 case 4: 
 var $21=$__buf_i;
 var $22=(($21+1)|0);
 var $_pre36_i=(($__buf_i+8)|0);
 var $23=$22;var $_pre_phi35_i=$22;var $_pre_phi37_i=$_pre36_i;label=5;break;
 case 5: 
 var $_pre_phi37_i;
 var $_pre_phi35_i;
 var $23;
 HEAP32[(($__a_end_i)>>2)]=$23;
 var $24=$__g_i;
 var $$etemp$10$0=160;
 var $$etemp$10$1=0;

 var $25=(($__g_i)|0);
 HEAP32[(($__g_end_i)>>2)]=$25;
 HEAP32[(($__dc_i)>>2)]=0;
 HEAP8[($__in_units_i)]=1;
 HEAP8[($__exp_i)]=69;
 var $26=(($__buf_i)|0);
 var $27=(($__buf_i+4)|0);
 var $28=HEAP32[(($__decimal_point_i)>>2)];
 var $29=HEAP32[(($__thousands_sep_i)>>2)];
 var $__a_0_i=$23;var $_pre_i_i_i5_i=$2;var $_sroa_06_0=$4;label=6;break;
 case 6: 
 var $_sroa_06_0;
 var $_pre_i_i_i5_i;
 var $__a_0_i;
 var $30=($_pre_i_i_i5_i|0)==0;
 if($30){var $47=1;var $46=0;label=11;break;}else{label=7;break;}
 case 7: 
 var $32=(($_pre_i_i_i5_i+12)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=(($_pre_i_i_i5_i+16)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($33|0)==($35|0);
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$_pre_i_i_i5_i;
 var $39=HEAP32[(($38)>>2)];
 var $40=(($39+36)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$41]($_pre_i_i_i5_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i3_i=$42;label=10;break; } else { label=32;break; }
 case 9: 
 var $44=HEAP32[(($33)>>2)];
 var $_0_i_i_i_i3_i=$44;label=10;break;
 case 10: 
 var $_0_i_i_i_i3_i;
 var $45=($_0_i_i_i_i3_i|0)==-1;
 var $__pre_i_i_i5_i=($45?0:$_pre_i_i_i5_i);
 var $_=($45?1:0);
 var $47=$_;var $46=$__pre_i_i_i5_i;label=11;break;
 case 11: 
 var $46;
 var $47;
 var $48=($_sroa_06_0|0)==0;
 if($48){label=16;break;}else{label=12;break;}
 case 12: 
 var $50=(($_sroa_06_0+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($_sroa_06_0+16)|0);
 var $53=HEAP32[(($52)>>2)];
 var $54=($51|0)==($53|0);
 if($54){label=13;break;}else{label=14;break;}
 case 13: 
 var $56=$_sroa_06_0;
 var $57=HEAP32[(($56)>>2)];
 var $58=(($57+36)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]($_sroa_06_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i9_i=$60;label=15;break; } else { label=32;break; }
 case 14: 
 var $62=HEAP32[(($51)>>2)];
 var $_0_i_i1_i_i9_i=$62;label=15;break;
 case 15: 
 var $_0_i_i1_i_i9_i;
 var $63=($_0_i_i1_i_i9_i|0)==-1;
 if($63){label=16;break;}else{label=17;break;}
 case 16: 
 if($47){var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=0;label=48;break;}else{var $_sroa_06_2=0;label=18;break;}
 case 17: 
 if($47){var $_sroa_06_2=$_sroa_06_0;label=18;break;}else{var $__a_2_i=$__a_0_i;var $_pre_i3_i_i_i=$_sroa_06_0;label=48;break;}
 case 18: 
 var $_sroa_06_2;
 var $65=HEAP32[(($__a_end_i)>>2)];
 var $66=$65;
 var $67=$__a_0_i;
 var $68=((($66)-($67))|0);
 var $69=HEAP8[($8)];
 var $70=$69&1;
 var $71=(($70<<24)>>24)==0;
 if($71){label=20;break;}else{label=19;break;}
 case 19: 
 var $73=HEAP32[(($27)>>2)];
 var $77=$73;label=21;break;
 case 20: 
 var $75=($69&255);
 var $76=$75>>>1;
 var $77=$76;label=21;break;
 case 21: 
 var $77;
 var $78=($68|0)==($77|0);
 if($78){label=22;break;}else{var $__a_1_i=$__a_0_i;label=41;break;}
 case 22: 
 if($71){label=24;break;}else{label=23;break;}
 case 23: 
 var $81=HEAP32[(($27)>>2)];
 var $85=$81;label=25;break;
 case 24: 
 var $83=($69&255);
 var $84=$83>>>1;
 var $85=$84;label=25;break;
 case 25: 
 var $85;
 var $86=$85<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$86) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 var $87=HEAP8[($8)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){var $93=10;label=28;break;}else{label=27;break;}
 case 27: 
 var $91=HEAP32[(($26)>>2)];
 var $92=$91&-2;
 var $phitmp_i23_i=((($92)-(1))|0);
 var $93=$phitmp_i23_i;label=28;break;
 case 28: 
 var $93;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf_i,$93) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 var $94=HEAP8[($8)];
 var $95=$94&1;
 var $96=(($95<<24)>>24)==0;
 if($96){var $99=$_pre_phi35_i;label=31;break;}else{label=30;break;}
 case 30: 
 var $98=HEAP32[(($_pre_phi37_i)>>2)];
 var $99=$98;label=31;break;
 case 31: 
 var $99;
 var $100=(($99+$85)|0);
 HEAP32[(($__a_end_i)>>2)]=$100;
 var $__a_1_i=$99;label=41;break;
 case 32: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=34;break;
 case 33: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=34;break;
 case 34: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $102=HEAP8[($8)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=37;break;}else{label=35;break;}
 case 35: 
 var $106=(($__buf_i+8)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=37;break;}else{label=36;break;}
 case 36: 
 _free($107);
 label=37;break;
 case 37: 
 var $110=HEAP8[($7)];
 var $111=$110&1;
 var $112=(($111<<24)>>24)==0;
 if($112){label=40;break;}else{label=38;break;}
 case 38: 
 var $114=(($__grouping_i+8)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=($115|0)==0;
 if($116){label=40;break;}else{label=39;break;}
 case 39: 
 _free($115);
 label=40;break;
 case 40: 
 ___resumeException($lpad_phi_i$0)
 case 41: 
 var $__a_1_i;
 var $118=(($46+12)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=(($46+16)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($119|0)==($121|0);
 if($122){label=42;break;}else{label=43;break;}
 case 42: 
 var $124=$46;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($125+36)|0);
 var $127=HEAP32[(($126)>>2)];
 var $128=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$127]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i=$128;label=44;break; } else { label=32;break; }
 case 43: 
 var $130=HEAP32[(($119)>>2)];
 var $_0_i_i_i=$130;label=44;break;
 case 44: 
 var $_0_i_i_i;
 var $132=__ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($_0_i_i_i,$__in_units_i,$__exp_i,$__a_1_i,$__a_end_i,$28,$29,$__grouping_i,$25,$__g_end_i,$__dc_i,$13);
 var $133=($132|0)==0;
 if($133){label=45;break;}else{var $__a_2_i=$__a_1_i;var $_pre_i3_i_i_i=$_sroa_06_2;label=48;break;}
 case 45: 
 var $135=HEAP32[(($118)>>2)];
 var $136=HEAP32[(($120)>>2)];
 var $137=($135|0)==($136|0);
 if($137){label=46;break;}else{label=47;break;}
 case 46: 
 var $139=$46;
 var $140=HEAP32[(($139)>>2)];
 var $141=(($140+40)|0);
 var $142=HEAP32[(($141)>>2)];
 var $143=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$142]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break; } else { label=32;break; }
 case 47: 
 var $145=(($135+4)|0);
 HEAP32[(($118)>>2)]=$145;
 var $__a_0_i=$__a_1_i;var $_pre_i_i_i5_i=$46;var $_sroa_06_0=$_sroa_06_2;label=6;break;
 case 48: 
 var $_pre_i3_i_i_i;
 var $__a_2_i;
 var $147=HEAP8[($7)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=50;break;}else{label=49;break;}
 case 49: 
 var $151=(($__grouping_i+4)|0);
 var $152=HEAP32[(($151)>>2)];
 var $156=$152;label=51;break;
 case 50: 
 var $154=($147&255);
 var $155=$154>>>1;
 var $156=$155;label=51;break;
 case 51: 
 var $156;
 var $157=($156|0)==0;
 if($157){label=55;break;}else{label=52;break;}
 case 52: 
 var $159=HEAP8[($__in_units_i)];
 var $160=(($159<<24)>>24)==0;
 if($160){label=55;break;}else{label=53;break;}
 case 53: 
 var $162=HEAP32[(($__g_end_i)>>2)];
 var $163=$162;
 var $164=$__g_i;
 var $165=((($163)-($164))|0);
 var $166=($165|0)<160;
 if($166){label=54;break;}else{label=55;break;}
 case 54: 
 var $168=HEAP32[(($__dc_i)>>2)];
 var $169=(($162+4)|0);
 HEAP32[(($__g_end_i)>>2)]=$169;
 HEAP32[(($162)>>2)]=$168;
 label=55;break;
 case 55: 
 var $170=HEAP32[(($__a_end_i)>>2)];
 var $171=(function() { try { __THREW__ = 0; return __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a_2_i,$170,$__err) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=33;break; }
 case 56: 
 HEAPF64[(($__v)>>3)]=$171;
 var $173=HEAP32[(($__g_end_i)>>2)];
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping_i,$25,$173,$__err);
 var $174=($46|0)==0;
 if($174){var $191=1;var $190=0;label=61;break;}else{label=57;break;}
 case 57: 
 var $176=(($46+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($46+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=58;break;}else{label=59;break;}
 case 58: 
 var $182=$46;
 var $183=HEAP32[(($182)>>2)];
 var $184=(($183+36)|0);
 var $185=HEAP32[(($184)>>2)];
 var $186=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$185]($46) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i_i=$186;label=60;break; } else { label=33;break; }
 case 59: 
 var $188=HEAP32[(($177)>>2)];
 var $_0_i_i_i_i_i=$188;label=60;break;
 case 60: 
 var $_0_i_i_i_i_i;
 var $189=($_0_i_i_i_i_i|0)==-1;
 var $_8=($189?0:$46);
 var $_9=($189?1:0);
 var $191=$_9;var $190=$_8;label=61;break;
 case 61: 
 var $190;
 var $191;
 var $192=($_pre_i3_i_i_i|0)==0;
 if($192){label=66;break;}else{label=62;break;}
 case 62: 
 var $194=(($_pre_i3_i_i_i+12)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=(($_pre_i3_i_i_i+16)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=($195|0)==($197|0);
 if($198){label=63;break;}else{label=64;break;}
 case 63: 
 var $200=$_pre_i3_i_i_i;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+36)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($_pre_i3_i_i_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i_i=$204;label=65;break; } else { label=33;break; }
 case 64: 
 var $206=HEAP32[(($195)>>2)];
 var $_0_i_i1_i_i_i=$206;label=65;break;
 case 65: 
 var $_0_i_i1_i_i_i;
 var $207=($_0_i_i1_i_i_i|0)==-1;
 if($207){label=66;break;}else{label=67;break;}
 case 66: 
 if($191){label=68;break;}else{label=69;break;}
 case 67: 
 if($191){label=69;break;}else{label=68;break;}
 case 68: 
 var $209=HEAP32[(($__err)>>2)];
 var $210=$209|2;
 HEAP32[(($__err)>>2)]=$210;
 label=69;break;
 case 69: 
 var $212=(($agg_result)|0);
 HEAP32[(($212)>>2)]=$190;
 var $$etemp$11$0=160;
 var $$etemp$11$1=0;

 var $213=HEAP8[($8)];
 var $214=$213&1;
 var $215=(($214<<24)>>24)==0;
 if($215){label=72;break;}else{label=70;break;}
 case 70: 
 var $217=(($__buf_i+8)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=($218|0)==0;
 if($219){label=72;break;}else{label=71;break;}
 case 71: 
 _free($218);
 label=72;break;
 case 72: 
 var $221=HEAP8[($7)];
 var $222=$221&1;
 var $223=(($222<<24)>>24)==0;
 if($223){label=75;break;}else{label=73;break;}
 case 73: 
 var $225=(($__grouping_i+8)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=($226|0)==0;
 if($227){label=75;break;}else{label=74;break;}
 case 74: 
 _free($226);
 label=75;break;
 case 75: 
 var $$etemp$12$0=128;
 var $$etemp$12$1=0;

 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $$etemp$14$0=4;
 var $$etemp$14$1=0;

 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=4;
 var $$etemp$17$1=0;

 var $$etemp$18$0=4;
 var $$etemp$18$1=0;

 var $$etemp$19$0=4;
 var $$etemp$19$1=0;

 var $$etemp$20$0=1;
 var $$etemp$20$1=0;

 var $$etemp$21$0=1;
 var $$etemp$21$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjRPv($agg_result,$this,$__b,$__e,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+336)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__atoms=(sp)+(16);
 var $__grouping=(sp)+(120);
 var $__buf=(sp)+(136);
 var $__a_end=(sp)+(152);
 var $__g=(sp)+(160);
 var $__g_end=(sp)+(320);
 var $__dc=(sp)+(328);
 var $1=$__atoms;
 var $$etemp$0$0=104;
 var $$etemp$0$1=0;

 var $this2_i_i_i=$__grouping;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $2=(($__iob+28)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $8=HEAP32[((18664)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=18664;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(202);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $14=HEAP32[((18668)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($3+12)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($3+8)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$18;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($15>>>0);
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=(($21+($15<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 HEAP32[(($31)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$28;
 var $34=(($__atoms)|0);
 var $35=$28;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+48)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$38]($33,13512,13538,$34) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=43;break; }
 case 8: 
 var $40=(($3+4)|0);
 var $41=$40;
 var $42=(tempValue=HEAP32[(($41)>>2)],HEAP32[(($41)>>2)]=tempValue+-1,tempValue);
 var $43=($42|0)==0;
 if($43){label=9;break;}else{label=10;break;}
 case 9: 
 var $45=$3;
 var $46=$3;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+8)|0);
 var $49=HEAP32[(($48)>>2)];
 FUNCTION_TABLE[$49]($45);
 label=10;break;
 case 10: 
 var $this2_i_i_i6=$__buf;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=46;break; }
 case 11: 
 var $50=HEAP8[($this2_i_i_i6)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=13;break;}else{label=12;break;}
 case 12: 
 var $54=(($__buf+8)|0);
 var $55=HEAP32[(($54)>>2)];
 var $_pre35=$__buf;
 var $_pre36=(($_pre35+1)|0);
 var $59=$55;var $_pre_phi37=$_pre36;var $_pre_phi39=$54;label=14;break;
 case 13: 
 var $57=$__buf;
 var $58=(($57+1)|0);
 var $_pre38=(($__buf+8)|0);
 var $59=$58;var $_pre_phi37=$58;var $_pre_phi39=$_pre38;label=14;break;
 case 14: 
 var $_pre_phi39;
 var $_pre_phi37;
 var $59;
 HEAP32[(($__a_end)>>2)]=$59;
 var $60=$__g;
 var $$etemp$3$0=160;
 var $$etemp$3$1=0;

 var $61=(($__g)|0);
 HEAP32[(($__g_end)>>2)]=$61;
 HEAP32[(($__dc)>>2)]=0;
 var $62=(($__b)|0);
 var $63=(($__e)|0);
 var $64=(($__buf)|0);
 var $65=(($__buf+4)|0);
 var $_pre=HEAP32[(($62)>>2)];
 var $__a_0=$59;var $_pre_i_i_i10=$_pre;label=15;break;
 case 15: 
 var $_pre_i_i_i10;
 var $__a_0;
 var $66=($_pre_i_i_i10|0)==0;
 if($66){var $84=1;var $83=0;label=21;break;}else{label=16;break;}
 case 16: 
 var $68=(($_pre_i_i_i10+12)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($_pre_i_i_i10+16)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=($69|0)==($71|0);
 if($72){label=17;break;}else{label=18;break;}
 case 17: 
 var $74=$_pre_i_i_i10;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+36)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$77]($_pre_i_i_i10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i8=$78;label=19;break; } else { label=45;break; }
 case 18: 
 var $80=HEAP32[(($69)>>2)];
 var $_0_i_i_i_i8=$80;label=19;break;
 case 19: 
 var $_0_i_i_i_i8;
 var $81=($_0_i_i_i_i8|0)==-1;
 if($81){label=20;break;}else{var $84=0;var $83=$_pre_i_i_i10;label=21;break;}
 case 20: 
 HEAP32[(($62)>>2)]=0;
 var $84=1;var $83=0;label=21;break;
 case 21: 
 var $83;
 var $84;
 var $85=HEAP32[(($63)>>2)];
 var $86=($85|0)==0;
 if($86){label=27;break;}else{label=22;break;}
 case 22: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=23;break;}else{label=24;break;}
 case 23: 
 var $94=$85;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($85) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i14=$98;label=25;break; } else { label=45;break; }
 case 24: 
 var $100=HEAP32[(($89)>>2)];
 var $_0_i_i1_i_i14=$100;label=25;break;
 case 25: 
 var $_0_i_i1_i_i14;
 var $101=($_0_i_i1_i_i14|0)==-1;
 if($101){label=26;break;}else{label=28;break;}
 case 26: 
 HEAP32[(($63)>>2)]=0;
 label=27;break;
 case 27: 
 if($84){var $__a_2=$__a_0;label=57;break;}else{label=29;break;}
 case 28: 
 if($84){label=29;break;}else{var $__a_2=$__a_0;label=57;break;}
 case 29: 
 var $104=HEAP32[(($__a_end)>>2)];
 var $105=$104;
 var $106=$__a_0;
 var $107=((($105)-($106))|0);
 var $108=HEAP8[($this2_i_i_i6)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){label=31;break;}else{label=30;break;}
 case 30: 
 var $112=HEAP32[(($65)>>2)];
 var $116=$112;label=32;break;
 case 31: 
 var $114=($108&255);
 var $115=$114>>>1;
 var $116=$115;label=32;break;
 case 32: 
 var $116;
 var $117=($107|0)==($116|0);
 if($117){label=33;break;}else{var $__a_1=$__a_0;label=50;break;}
 case 33: 
 if($110){label=35;break;}else{label=34;break;}
 case 34: 
 var $120=HEAP32[(($65)>>2)];
 var $124=$120;label=36;break;
 case 35: 
 var $122=($108&255);
 var $123=$122>>>1;
 var $124=$123;label=36;break;
 case 36: 
 var $124;
 var $125=$124<<1;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$125) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=45;break; }
 case 37: 
 var $126=HEAP8[($this2_i_i_i6)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){var $132=10;label=39;break;}else{label=38;break;}
 case 38: 
 var $130=HEAP32[(($64)>>2)];
 var $131=$130&-2;
 var $phitmp_i26=((($131)-(1))|0);
 var $132=$phitmp_i26;label=39;break;
 case 39: 
 var $132;
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6resizeEjc($__buf,$132) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=45;break; }
 case 40: 
 var $133=HEAP8[($this2_i_i_i6)];
 var $134=$133&1;
 var $135=(($134<<24)>>24)==0;
 if($135){var $138=$_pre_phi37;label=42;break;}else{label=41;break;}
 case 41: 
 var $137=HEAP32[(($_pre_phi39)>>2)];
 var $138=$137;label=42;break;
 case 42: 
 var $138;
 var $139=(($138+$124)|0);
 HEAP32[(($__a_end)>>2)]=$139;
 var $__a_1=$138;label=50;break;
 case 43: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1); var $141$1 = tempRet0;
 var $142=$141$0;
 var $143=$141$1;
 var $144=(($3+4)|0);
 var $145=$144;
 var $146=(tempValue=HEAP32[(($145)>>2)],HEAP32[(($145)>>2)]=tempValue+-1,tempValue);
 var $147=($146|0)==0;
 if($147){label=44;break;}else{var $_0=$142;var $_01=$143;label=87;break;}
 case 44: 
 var $149=$3;
 var $150=$3;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+8)|0);
 var $153=HEAP32[(($152)>>2)];
 FUNCTION_TABLE[$153]($149);
 var $_0=$142;var $_01=$143;label=87;break;
 case 45: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=47;break;
 case 46: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit$1;var $eh_lpad_body$0=$lpad_nonloopexit$0;label=47;break;
 case 47: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $154=$eh_lpad_body$0;
 var $155=$eh_lpad_body$1;
 var $156=HEAP8[($this2_i_i_i6)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){var $_0=$154;var $_01=$155;label=87;break;}else{label=48;break;}
 case 48: 
 var $160=(($__buf+8)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=($161|0)==0;
 if($162){var $_0=$154;var $_01=$155;label=87;break;}else{label=49;break;}
 case 49: 
 _free($161);
 var $_0=$154;var $_01=$155;label=87;break;
 case 50: 
 var $__a_1;
 var $164=(($83+12)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=(($83+16)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=($165|0)==($167|0);
 if($168){label=51;break;}else{label=52;break;}
 case 51: 
 var $170=$83;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$174;label=53;break; } else { label=45;break; }
 case 52: 
 var $176=HEAP32[(($165)>>2)];
 var $_0_i_i=$176;label=53;break;
 case 53: 
 var $_0_i_i;
 var $178=__ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($_0_i_i,16,$__a_1,$__a_end,$__dc,0,$__grouping,$61,$__g_end,$34);
 var $179=($178|0)==0;
 if($179){label=54;break;}else{var $__a_2=$__a_1;label=57;break;}
 case 54: 
 var $181=HEAP32[(($164)>>2)];
 var $182=HEAP32[(($166)>>2)];
 var $183=($181|0)==($182|0);
 if($183){label=55;break;}else{label=56;break;}
 case 55: 
 var $185=$83;
 var $186=HEAP32[(($185)>>2)];
 var $187=(($186+40)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$188]($83) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__a_0=$__a_1;var $_pre_i_i_i10=$83;label=15;break; } else { label=45;break; }
 case 56: 
 var $191=(($181+4)|0);
 HEAP32[(($164)>>2)]=$191;
 var $__a_0=$__a_1;var $_pre_i_i_i10=$83;label=15;break;
 case 57: 
 var $__a_2;
 var $193=(($__a_2+3)|0);
 HEAP8[($193)]=0;
 var $194=HEAP8[(19232)];
 var $195=(($194<<24)>>24)==0;
 if($195){label=58;break;}else{label=62;break;}
 case 58: 
 var $197=___cxa_guard_acquire(19232);
 var $198=($197|0)==0;
 if($198){label=62;break;}else{label=59;break;}
 case 59: 
 var $200=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=61;break; }
 case 60: 
 HEAP32[((17128)>>2)]=$200;

 label=62;break;
 case 61: 
 var $203$0 = ___cxa_find_matching_catch(-1, -1); var $203$1 = tempRet0;

 var $eh_lpad_body$1=$203$1;var $eh_lpad_body$0=$203$0;label=47;break;
 case 62: 
 var $205=HEAP32[((17128)>>2)];
 var $206=(function() { try { __THREW__ = 0; return __ZNSt3__110__sscanf_lEPKcP15__locale_structS1_z($__a_2,$205,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=63;break; } else { label=46;break; }
 case 63: 
 var $208=($206|0)==1;
 if($208){label=65;break;}else{label=64;break;}
 case 64: 
 HEAP32[(($__err)>>2)]=4;
 label=65;break;
 case 65: 
 var $211=HEAP32[(($62)>>2)];
 var $212=($211|0)==0;
 if($212){var $230=1;var $229=0;label=71;break;}else{label=66;break;}
 case 66: 
 var $214=(($211+12)|0);
 var $215=HEAP32[(($214)>>2)];
 var $216=(($211+16)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=($215|0)==($217|0);
 if($218){label=67;break;}else{label=68;break;}
 case 67: 
 var $220=$211;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+36)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$223]($211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$224;label=69;break; } else { label=46;break; }
 case 68: 
 var $226=HEAP32[(($215)>>2)];
 var $_0_i_i_i_i=$226;label=69;break;
 case 69: 
 var $_0_i_i_i_i;
 var $227=($_0_i_i_i_i|0)==-1;
 if($227){label=70;break;}else{var $230=0;var $229=$211;label=71;break;}
 case 70: 
 HEAP32[(($62)>>2)]=0;
 var $230=1;var $229=0;label=71;break;
 case 71: 
 var $229;
 var $230;
 var $231=HEAP32[(($63)>>2)];
 var $232=($231|0)==0;
 if($232){label=77;break;}else{label=72;break;}
 case 72: 
 var $234=(($231+12)|0);
 var $235=HEAP32[(($234)>>2)];
 var $236=(($231+16)|0);
 var $237=HEAP32[(($236)>>2)];
 var $238=($235|0)==($237|0);
 if($238){label=73;break;}else{label=74;break;}
 case 73: 
 var $240=$231;
 var $241=HEAP32[(($240)>>2)];
 var $242=(($241+36)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$243]($231) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$244;label=75;break; } else { label=46;break; }
 case 74: 
 var $246=HEAP32[(($235)>>2)];
 var $_0_i_i1_i_i=$246;label=75;break;
 case 75: 
 var $_0_i_i1_i_i;
 var $247=($_0_i_i1_i_i|0)==-1;
 if($247){label=76;break;}else{label=78;break;}
 case 76: 
 HEAP32[(($63)>>2)]=0;
 label=77;break;
 case 77: 
 if($230){label=79;break;}else{label=80;break;}
 case 78: 
 if($230){label=80;break;}else{label=79;break;}
 case 79: 
 var $249=HEAP32[(($__err)>>2)];
 var $250=$249|2;
 HEAP32[(($__err)>>2)]=$250;
 label=80;break;
 case 80: 
 var $252=(($agg_result)|0);
 HEAP32[(($252)>>2)]=$229;
 var $$etemp$4$0=160;
 var $$etemp$4$1=0;

 var $253=HEAP8[($this2_i_i_i6)];
 var $254=$253&1;
 var $255=(($254<<24)>>24)==0;
 if($255){label=83;break;}else{label=81;break;}
 case 81: 
 var $257=(($__buf+8)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==0;
 if($259){label=83;break;}else{label=82;break;}
 case 82: 
 _free($258);
 label=83;break;
 case 83: 
 var $261=HEAP8[($this2_i_i_i)];
 var $262=$261&1;
 var $263=(($262<<24)>>24)==0;
 if($263){label=86;break;}else{label=84;break;}
 case 84: 
 var $265=(($__grouping+8)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($266|0)==0;
 if($267){label=86;break;}else{label=85;break;}
 case 85: 
 _free($266);
 label=86;break;
 case 86: 
 var $$etemp$5$0=104;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 87: 
 var $_01;
 var $_0;
 var $269=HEAP8[($this2_i_i_i)];
 var $270=$269&1;
 var $271=(($270<<24)>>24)==0;
 if($271){label=90;break;}else{label=88;break;}
 case 88: 
 var $273=(($__grouping+8)|0);
 var $274=HEAP32[(($273)>>2)];
 var $275=($274|0)==0;
 if($275){label=90;break;}else{label=89;break;}
 case 89: 
 _free($274);
 label=90;break;
 case 90: 
 var $277$0=$_0;
 var $277$1=0;
 var $278$0=$277$0;
 var $278$1=$_01;
 ___resumeException($278$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_loopEwiPcRS2_RjwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSD_Pw($__ct,$__base,$__a,$__a_end,$__dc,$__thousands_sep,$__grouping,$__g,$__g_end,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($__a_end)>>2)];
 var $2=($1|0)==($__a|0);
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=(($__atoms+96)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==($__ct|0);
 if($6){label=4;break;}else{label=3;break;}
 case 3: 
 var $8=(($__atoms+100)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($__ct|0);
 if($10){label=4;break;}else{label=5;break;}
 case 4: 
 var $12=($6?43:45);
 var $13=(($__a+1)|0);
 HEAP32[(($__a_end)>>2)]=$13;
 HEAP8[($__a)]=$12;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 5: 
 var $15=$__grouping;
 var $16=HEAP8[($15)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $20=(($__grouping+4)|0);
 var $21=HEAP32[(($20)>>2)];
 var $25=$21;label=8;break;
 case 7: 
 var $23=($16&255);
 var $24=$23>>>1;
 var $25=$24;label=8;break;
 case 8: 
 var $25;
 var $26=($25|0)!=0;
 var $27=($__ct|0)==($__thousands_sep|0);
 var $or_cond=$26&$27;
 if($or_cond){label=9;break;}else{label=11;break;}
 case 9: 
 var $29=HEAP32[(($__g_end)>>2)];
 var $30=$29;
 var $31=$__g;
 var $32=((($30)-($31))|0);
 var $33=($32|0)<160;
 if($33){label=10;break;}else{var $_0=0;label=23;break;}
 case 10: 
 var $35=HEAP32[(($__dc)>>2)];
 var $36=(($29+4)|0);
 HEAP32[(($__g_end)>>2)]=$36;
 HEAP32[(($29)>>2)]=$35;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=23;break;
 case 11: 
 var $38=(($__atoms+104)|0);
 var $_01_i=$__atoms;label=13;break;
 case 12: 
 var $40=($44|0)==($38|0);
 if($40){var $_0_lcssa_i=$38;label=14;break;}else{var $_01_i=$44;label=13;break;}
 case 13: 
 var $_01_i;
 var $42=HEAP32[(($_01_i)>>2)];
 var $43=($42|0)==($__ct|0);
 var $44=(($_01_i+4)|0);
 if($43){var $_0_lcssa_i=$_01_i;label=14;break;}else{label=12;break;}
 case 14: 
 var $_0_lcssa_i;
 var $45=$_0_lcssa_i;
 var $46=$__atoms;
 var $47=((($45)-($46))|0);
 var $48=$47>>2;
 var $49=($47|0)>92;
 if($49){var $_0=-1;label=23;break;}else{label=15;break;}
 case 15: 
 if(($__base|0)==8|($__base|0)==10){ label=16;break;}else if(($__base|0)==16){ label=17;break;}else{label=22;break;}
 case 16: 
 var $52=($48|0)<($__base|0);
 if($52){label=22;break;}else{var $_0=-1;label=23;break;}
 case 17: 
 var $54=($47|0)<88;
 if($54){label=22;break;}else{label=18;break;}
 case 18: 
 if($2){var $_0=-1;label=23;break;}else{label=19;break;}
 case 19: 
 var $57=$1;
 var $58=$__a;
 var $59=((($57)-($58))|0);
 var $60=($59|0)<3;
 if($60){label=20;break;}else{var $_0=-1;label=23;break;}
 case 20: 
 var $62=((($1)-(1))|0);
 var $63=HEAP8[($62)];
 var $64=(($63<<24)>>24)==48;
 if($64){label=21;break;}else{var $_0=-1;label=23;break;}
 case 21: 
 HEAP32[(($__dc)>>2)]=0;
 var $66=((13512+$48)|0);
 var $67=HEAP8[($66)];
 var $68=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$68;
 HEAP8[($1)]=$67;
 var $_0=0;label=23;break;
 case 22: 
 var $70=((13512+$48)|0);
 var $71=HEAP8[($70)];
 var $72=(($1+1)|0);
 HEAP32[(($__a_end)>>2)]=$72;
 HEAP8[($1)]=$71;
 var $73=HEAP32[(($__dc)>>2)];
 var $74=((($73)+(1))|0);
 HEAP32[(($__dc)>>2)]=$74;
 var $_0=0;label=23;break;
 case 23: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE17__stage2_int_prepERNS_8ios_baseEPcRc($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18672)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18672;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=19;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18676)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=$27;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+32)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32,13512,13538,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=19;break; }
 case 8: 
 var $38=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $39=HEAP32[((18288)>>2)];
 var $40=($39|0)==-1;
 if($40){label=10;break;}else{label=9;break;}
 case 9: 
 var $42=(($__p_i_i_i_i3)|0);
 HEAP32[(($42)>>2)]=18288;
 var $43=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($43)>>2)]=(202);
 var $44=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=19;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $45=HEAP32[((18292)>>2)];
 var $46=((($45)-(1))|0);
 var $47=HEAP32[(($16)>>2)];
 var $48=HEAP32[(($19)>>2)];
 var $49=$47;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($46>>>0);
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $54=(($48+($46<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=12;break;}else{label=14;break;}
 case 12: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=19;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $60=$55;
 var $61=$55;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 HEAP8[($__thousands_sep)]=$65;
 var $66=$55;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($agg_result,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=19;break; }
 case 16: 
 var $70=(($2+4)|0);
 var $71=$70;
 var $72=(tempValue=HEAP32[(($71)>>2)],HEAP32[(($71)>>2)]=tempValue+-1,tempValue);
 var $73=($72|0)==0;
 if($73){label=17;break;}else{label=18;break;}
 case 17: 
 var $75=$2;
 var $76=$2;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+8)|0);
 var $79=HEAP32[(($78)>>2)];
 FUNCTION_TABLE[$79]($75);
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
 case 19: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $82=(($2+4)|0);
 var $83=$82;
 var $84=(tempValue=HEAP32[(($83)>>2)],HEAP32[(($83)>>2)]=tempValue+-1,tempValue);
 var $85=($84|0)==0;
 if($85){label=20;break;}else{label=21;break;}
 case 20: 
 var $87=$2;
 var $88=$2;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+8)|0);
 var $91=HEAP32[(($90)>>2)];
 FUNCTION_TABLE[$91]($87);
 label=21;break;
 case 21: 
 ___resumeException($81$0)
  default: assert(0, "bad label: " + label);
 }

}



function __ZNSt3__19__num_getIcE19__stage2_float_prepERNS_8ios_baseEPcRcS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18672)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18672;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18676)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=20;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=$27;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+32)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32,13512,13544,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=20;break; }
 case 8: 
 var $38=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $39=HEAP32[((18288)>>2)];
 var $40=($39|0)==-1;
 if($40){label=10;break;}else{label=9;break;}
 case 9: 
 var $42=(($__p_i_i_i_i3)|0);
 HEAP32[(($42)>>2)]=18288;
 var $43=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($43)>>2)]=(202);
 var $44=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=20;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $45=HEAP32[((18292)>>2)];
 var $46=((($45)-(1))|0);
 var $47=HEAP32[(($16)>>2)];
 var $48=HEAP32[(($19)>>2)];
 var $49=$47;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($46>>>0);
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $54=(($48+($46<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=12;break;}else{label=14;break;}
 case 12: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=20;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $60=$55;
 var $61=$55;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 HEAP8[($__decimal_point)]=$65;
 var $66=HEAP32[(($61)>>2)];
 var $67=(($66+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 HEAP8[($__thousands_sep)]=$69;
 var $70=$55;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+20)|0);
 var $73=HEAP32[(($72)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($agg_result,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $74=(($2+4)|0);
 var $75=$74;
 var $76=(tempValue=HEAP32[(($75)>>2)],HEAP32[(($75)>>2)]=tempValue+-1,tempValue);
 var $77=($76|0)==0;
 if($77){label=18;break;}else{label=19;break;}
 case 18: 
 var $79=$2;
 var $80=$2;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 FUNCTION_TABLE[$83]($79);
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
 case 20: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $86=(($2+4)|0);
 var $87=$86;
 var $88=(tempValue=HEAP32[(($87)>>2)],HEAP32[(($87)>>2)]=tempValue+-1,tempValue);
 var $89=($88|0)==0;
 if($89){label=21;break;}else{label=22;break;}
 case 21: 
 var $91=$2;
 var $92=$2;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+8)|0);
 var $95=HEAP32[(($94)>>2)];
 FUNCTION_TABLE[$95]($91);
 label=22;break;
 case 22: 
 ___resumeException($85$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIcE19__stage2_float_loopEcRbRcPcRS4_ccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjS4_($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__ct<<24)>>24)==(($__decimal_point<<24)>>24);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[($6)]=46;
 var $8=$__grouping;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=(($__ct<<24)>>24)==(($__thousands_sep<<24)>>24);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[($__in_units)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+32)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP8[($_01_i)];
 var $62=(($61<<24)>>24)==(($__ct<<24)>>24);
 var $63=(($_01_i+1)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=($66|0)>31;
 if($67){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $69=((13512+$66)|0);
 var $70=HEAP8[($69)];
 if(($66|0)==25|($66|0)==24){ label=22;break;}else if(($66|0)==22|($66|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $72=HEAP32[(($__a_end)>>2)];
 var $73=($72|0)==($__a|0);
 if($73){label=24;break;}else{label=23;break;}
 case 23: 
 var $75=((($72)-(1))|0);
 var $76=HEAP8[($75)];
 var $77=($76&255);
 var $78=$77&95;
 var $79=HEAP8[($__exp)];
 var $80=($79&255);
 var $81=$80&127;
 var $82=($78|0)==($81|0);
 if($82){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $84=(($72+1)|0);
 HEAP32[(($__a_end)>>2)]=$84;
 HEAP8[($72)]=$70;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 var $85=HEAP32[(($__a_end)>>2)];
 var $86=(($85+1)|0);
 HEAP32[(($__a_end)>>2)]=$86;
 HEAP8[($85)]=$70;
 var $_0=0;label=36;break;
 case 26: 
 var $88=($70&255);
 var $89=$88&95;
 var $90=HEAP8[($__exp)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[($__exp)]=$94;
 var $95=HEAP8[($__in_units)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $98=$__grouping;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[($120)]=$70;
 var $122=($66|0)>21;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE17__stage2_int_prepERNS_8ios_baseEPwRw($agg_result,$__iob,$__atoms,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18664)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18664;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=19;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18668)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=19;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=$27;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+48)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32,13512,13538,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=19;break; }
 case 8: 
 var $38=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $39=HEAP32[((18280)>>2)];
 var $40=($39|0)==-1;
 if($40){label=10;break;}else{label=9;break;}
 case 9: 
 var $42=(($__p_i_i_i_i3)|0);
 HEAP32[(($42)>>2)]=18280;
 var $43=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($43)>>2)]=(202);
 var $44=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=19;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $45=HEAP32[((18284)>>2)];
 var $46=((($45)-(1))|0);
 var $47=HEAP32[(($16)>>2)];
 var $48=HEAP32[(($19)>>2)];
 var $49=$47;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($46>>>0);
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $54=(($48+($46<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=12;break;}else{label=14;break;}
 case 12: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=19;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $60=$55;
 var $61=$55;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=19;break; }
 case 15: 
 HEAP32[(($__thousands_sep)>>2)]=$65;
 var $66=$55;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$69]($agg_result,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=19;break; }
 case 16: 
 var $70=(($2+4)|0);
 var $71=$70;
 var $72=(tempValue=HEAP32[(($71)>>2)],HEAP32[(($71)>>2)]=tempValue+-1,tempValue);
 var $73=($72|0)==0;
 if($73){label=17;break;}else{label=18;break;}
 case 17: 
 var $75=$2;
 var $76=$2;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+8)|0);
 var $79=HEAP32[(($78)>>2)];
 FUNCTION_TABLE[$79]($75);
 label=18;break;
 case 18: 
 STACKTOP=sp;return;
 case 19: 
 var $81$0 = ___cxa_find_matching_catch(-1, -1); var $81$1 = tempRet0;
 var $82=(($2+4)|0);
 var $83=$82;
 var $84=(tempValue=HEAP32[(($83)>>2)],HEAP32[(($83)>>2)]=tempValue+-1,tempValue);
 var $85=($84|0)==0;
 if($85){label=20;break;}else{label=21;break;}
 case 20: 
 var $87=$2;
 var $88=$2;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+8)|0);
 var $91=HEAP32[(($90)>>2)];
 FUNCTION_TABLE[$91]($87);
 label=21;break;
 case 21: 
 ___resumeException($81$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_prepERNS_8ios_baseEPwRwS5_($agg_result,$__iob,$__atoms,$__decimal_point,$__thousands_sep){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+32)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i3=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18664)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18664;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=20;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18668)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=20;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=$27;
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+48)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$36]($32,13512,13544,$__atoms) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=20;break; }
 case 8: 
 var $38=$__p_i_i_i_i3;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $39=HEAP32[((18280)>>2)];
 var $40=($39|0)==-1;
 if($40){label=10;break;}else{label=9;break;}
 case 9: 
 var $42=(($__p_i_i_i_i3)|0);
 HEAP32[(($42)>>2)]=18280;
 var $43=(($__p_i_i_i_i3+4)|0);
 HEAP32[(($43)>>2)]=(202);
 var $44=(($__p_i_i_i_i3+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=20;break; }
 case 10: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $45=HEAP32[((18284)>>2)];
 var $46=((($45)-(1))|0);
 var $47=HEAP32[(($16)>>2)];
 var $48=HEAP32[(($19)>>2)];
 var $49=$47;
 var $50=$48;
 var $51=((($49)-($50))|0);
 var $52=$51>>2;
 var $53=($52>>>0)>($46>>>0);
 if($53){label=11;break;}else{label=12;break;}
 case 11: 
 var $54=(($48+($46<<2))|0);
 var $55=HEAP32[(($54)>>2)];
 var $56=($55|0)==0;
 if($56){label=12;break;}else{label=14;break;}
 case 12: 
 var $57=___cxa_allocate_exception(4);
 var $58=$57;
 HEAP32[(($58)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($57,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=20;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $60=$55;
 var $61=$55;
 var $62=HEAP32[(($61)>>2)];
 var $63=(($62+12)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$64]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=20;break; }
 case 15: 
 HEAP32[(($__decimal_point)>>2)]=$65;
 var $66=HEAP32[(($61)>>2)];
 var $67=(($66+16)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$68]($60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=20;break; }
 case 16: 
 HEAP32[(($__thousands_sep)>>2)]=$69;
 var $70=$55;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+20)|0);
 var $73=HEAP32[(($72)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($agg_result,$60) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=20;break; }
 case 17: 
 var $74=(($2+4)|0);
 var $75=$74;
 var $76=(tempValue=HEAP32[(($75)>>2)],HEAP32[(($75)>>2)]=tempValue+-1,tempValue);
 var $77=($76|0)==0;
 if($77){label=18;break;}else{label=19;break;}
 case 18: 
 var $79=$2;
 var $80=$2;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+8)|0);
 var $83=HEAP32[(($82)>>2)];
 FUNCTION_TABLE[$83]($79);
 label=19;break;
 case 19: 
 STACKTOP=sp;return;
 case 20: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1); var $85$1 = tempRet0;
 var $86=(($2+4)|0);
 var $87=$86;
 var $88=(tempValue=HEAP32[(($87)>>2)],HEAP32[(($87)>>2)]=tempValue+-1,tempValue);
 var $89=($88|0)==0;
 if($89){label=21;break;}else{label=22;break;}
 case 21: 
 var $91=$2;
 var $92=$2;
 var $93=HEAP32[(($92)>>2)];
 var $94=(($93+8)|0);
 var $95=HEAP32[(($94)>>2)];
 FUNCTION_TABLE[$95]($91);
 label=22;break;
 case 22: 
 ___resumeException($85$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_getIwE19__stage2_float_loopEwRbRcPcRS4_wwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjRSE_RjPw($__ct,$__in_units,$__exp,$__a,$__a_end,$__decimal_point,$__thousands_sep,$__grouping,$__g,$__g_end,$__dc,$__atoms){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($__ct|0)==($__decimal_point|0);
 if($1){label=2;break;}else{label=9;break;}
 case 2: 
 var $3=HEAP8[($__in_units)];
 var $4=(($3<<24)>>24)==0;
 if($4){var $_0=-1;label=36;break;}else{label=3;break;}
 case 3: 
 HEAP8[($__in_units)]=0;
 var $6=HEAP32[(($__a_end)>>2)];
 var $7=(($6+1)|0);
 HEAP32[(($__a_end)>>2)]=$7;
 HEAP8[($6)]=46;
 var $8=$__grouping;
 var $9=HEAP8[($8)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=5;break;}else{label=4;break;}
 case 4: 
 var $13=(($__grouping+4)|0);
 var $14=HEAP32[(($13)>>2)];
 var $18=$14;label=6;break;
 case 5: 
 var $16=($9&255);
 var $17=$16>>>1;
 var $18=$17;label=6;break;
 case 6: 
 var $18;
 var $19=($18|0)==0;
 if($19){var $_0=0;label=36;break;}else{label=7;break;}
 case 7: 
 var $21=HEAP32[(($__g_end)>>2)];
 var $22=$21;
 var $23=$__g;
 var $24=((($22)-($23))|0);
 var $25=($24|0)<160;
 if($25){label=8;break;}else{var $_0=0;label=36;break;}
 case 8: 
 var $27=HEAP32[(($__dc)>>2)];
 var $28=(($21+4)|0);
 HEAP32[(($__g_end)>>2)]=$28;
 HEAP32[(($21)>>2)]=$27;
 var $_0=0;label=36;break;
 case 9: 
 var $30=($__ct|0)==($__thousands_sep|0);
 if($30){label=10;break;}else{label=17;break;}
 case 10: 
 var $32=$__grouping;
 var $33=HEAP8[($32)];
 var $34=$33&1;
 var $35=(($34<<24)>>24)==0;
 if($35){label=12;break;}else{label=11;break;}
 case 11: 
 var $37=(($__grouping+4)|0);
 var $38=HEAP32[(($37)>>2)];
 var $42=$38;label=13;break;
 case 12: 
 var $40=($33&255);
 var $41=$40>>>1;
 var $42=$41;label=13;break;
 case 13: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=17;break;}else{label=14;break;}
 case 14: 
 var $45=HEAP8[($__in_units)];
 var $46=(($45<<24)>>24)==0;
 if($46){var $_0=-1;label=36;break;}else{label=15;break;}
 case 15: 
 var $48=HEAP32[(($__g_end)>>2)];
 var $49=$48;
 var $50=$__g;
 var $51=((($49)-($50))|0);
 var $52=($51|0)<160;
 if($52){label=16;break;}else{var $_0=0;label=36;break;}
 case 16: 
 var $54=HEAP32[(($__dc)>>2)];
 var $55=(($48+4)|0);
 HEAP32[(($__g_end)>>2)]=$55;
 HEAP32[(($48)>>2)]=$54;
 HEAP32[(($__dc)>>2)]=0;
 var $_0=0;label=36;break;
 case 17: 
 var $57=(($__atoms+128)|0);
 var $_01_i=$__atoms;label=19;break;
 case 18: 
 var $59=($63|0)==($57|0);
 if($59){var $_0_lcssa_i=$57;label=20;break;}else{var $_01_i=$63;label=19;break;}
 case 19: 
 var $_01_i;
 var $61=HEAP32[(($_01_i)>>2)];
 var $62=($61|0)==($__ct|0);
 var $63=(($_01_i+4)|0);
 if($62){var $_0_lcssa_i=$_01_i;label=20;break;}else{label=18;break;}
 case 20: 
 var $_0_lcssa_i;
 var $64=$_0_lcssa_i;
 var $65=$__atoms;
 var $66=((($64)-($65))|0);
 var $67=$66>>2;
 var $68=($66|0)>124;
 if($68){var $_0=-1;label=36;break;}else{label=21;break;}
 case 21: 
 var $70=((13512+$67)|0);
 var $71=HEAP8[($70)];
 if(($67|0)==25|($67|0)==24){ label=22;break;}else if(($67|0)==22|($67|0)==23){ label=25;break;}else{label=26;break;}
 case 22: 
 var $73=HEAP32[(($__a_end)>>2)];
 var $74=($73|0)==($__a|0);
 if($74){label=24;break;}else{label=23;break;}
 case 23: 
 var $76=((($73)-(1))|0);
 var $77=HEAP8[($76)];
 var $78=($77&255);
 var $79=$78&95;
 var $80=HEAP8[($__exp)];
 var $81=($80&255);
 var $82=$81&127;
 var $83=($79|0)==($82|0);
 if($83){label=24;break;}else{var $_0=-1;label=36;break;}
 case 24: 
 var $85=(($73+1)|0);
 HEAP32[(($__a_end)>>2)]=$85;
 HEAP8[($73)]=$71;
 var $_0=0;label=36;break;
 case 25: 
 HEAP8[($__exp)]=80;
 label=34;break;
 case 26: 
 var $88=($71&255);
 var $89=$88&95;
 var $90=HEAP8[($__exp)];
 var $91=(($90<<24)>>24);
 var $92=($89|0)==($91|0);
 if($92){label=27;break;}else{label=34;break;}
 case 27: 
 var $94=$90|-128;
 HEAP8[($__exp)]=$94;
 var $95=HEAP8[($__in_units)];
 var $96=(($95<<24)>>24)==0;
 if($96){label=34;break;}else{label=28;break;}
 case 28: 
 HEAP8[($__in_units)]=0;
 var $98=$__grouping;
 var $99=HEAP8[($98)];
 var $100=$99&1;
 var $101=(($100<<24)>>24)==0;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $103=(($__grouping+4)|0);
 var $104=HEAP32[(($103)>>2)];
 var $108=$104;label=31;break;
 case 30: 
 var $106=($99&255);
 var $107=$106>>>1;
 var $108=$107;label=31;break;
 case 31: 
 var $108;
 var $109=($108|0)==0;
 if($109){label=34;break;}else{label=32;break;}
 case 32: 
 var $111=HEAP32[(($__g_end)>>2)];
 var $112=$111;
 var $113=$__g;
 var $114=((($112)-($113))|0);
 var $115=($114|0)<160;
 if($115){label=33;break;}else{label=34;break;}
 case 33: 
 var $117=HEAP32[(($__dc)>>2)];
 var $118=(($111+4)|0);
 HEAP32[(($__g_end)>>2)]=$118;
 HEAP32[(($111)>>2)]=$117;
 label=34;break;
 case 34: 
 var $120=HEAP32[(($__a_end)>>2)];
 var $121=(($120+1)|0);
 HEAP32[(($__a_end)>>2)]=$121;
 HEAP8[($120)]=$71;
 var $122=($66|0)>84;
 if($122){var $_0=0;label=36;break;}else{label=35;break;}
 case 35: 
 var $124=HEAP32[(($__dc)>>2)];
 var $125=((($124)+(1))|0);
 HEAP32[(($__dc)>>2)]=$125;
 var $_0=0;label=36;break;
 case 36: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $__nm=(sp)+(24);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=37;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $22=HEAP32[((18288)>>2)];
 var $23=($22|0)==-1;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=(($__p_i_i_i_i)|0);
 HEAP32[(($25)>>2)]=18288;
 var $26=(($__p_i_i_i_i+4)|0);
 HEAP32[(($26)>>2)]=(202);
 var $27=(($__p_i_i_i_i+8)|0);
 HEAP32[(($27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=29;break; }
 case 5: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $28=HEAP32[((18292)>>2)];
 var $29=((($28)-(1))|0);
 var $30=(($17+12)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($17+8)|0);
 var $34=$33;
 var $35=HEAP32[(($34)>>2)];
 var $36=$32;
 var $37=$35;
 var $38=((($36)-($37))|0);
 var $39=$38>>2;
 var $40=($39>>>0)>($29>>>0);
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 var $41=(($35+($29<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $44=___cxa_allocate_exception(4);
 var $45=$44;
 HEAP32[(($45)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($44,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=29;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $47=$42;
 var $48=(($17+4)|0);
 var $49=$48;
 var $50=(tempValue=HEAP32[(($49)>>2)],HEAP32[(($49)>>2)]=tempValue+-1,tempValue);
 var $51=($50|0)==0;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=$17;
 var $54=$17;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+8)|0);
 var $57=HEAP32[(($56)>>2)];
 FUNCTION_TABLE[$57]($53);
 label=11;break;
 case 11: 
 var $58=$42;
 var $59=HEAP32[(($58)>>2)];
 if($__v){label=12;break;}else{label=13;break;}
 case 12: 
 var $61=(($59+24)|0);
 var $62=HEAP32[(($61)>>2)];
 FUNCTION_TABLE[$62]($__nm,$47);
 label=14;break;
 case 13: 
 var $64=(($59+28)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($__nm,$47);
 label=14;break;
 case 14: 
 var $67=$__nm;
 var $68=HEAP8[($67)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=16;break;}else{label=15;break;}
 case 15: 
 var $72=(($__nm+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $_pre4=$__nm;
 var $_pre5=(($_pre4+1)|0);
 var $_ph=$73;var $_pre_phi6=$_pre5;var $_pre_phi8=$72;label=17;break;
 case 16: 
 var $75=$__nm;
 var $76=(($75+1)|0);
 var $_pre7=(($__nm+8)|0);
 var $_ph=$76;var $_pre_phi6=$76;var $_pre_phi8=$_pre7;label=17;break;
 case 17: 
 var $_pre_phi8;
 var $_pre_phi6;
 var $_ph;
 var $77=(($__s)|0);
 var $78=(($__nm+4)|0);
 var $80=$_ph;var $79=$68;label=18;break;
 case 18: 
 var $79;
 var $80;
 var $81=$79&1;
 var $82=(($81<<24)>>24)==0;
 if($82){label=20;break;}else{label=19;break;}
 case 19: 
 var $84=HEAP32[(($_pre_phi8)>>2)];
 var $85=HEAP32[(($78)>>2)];
 var $90=$85;var $89=$84;label=21;break;
 case 20: 
 var $87=($79&255);
 var $88=$87>>>1;
 var $90=$88;var $89=$_pre_phi6;label=21;break;
 case 21: 
 var $89;
 var $90;
 var $91=(($89+$90)|0);
 var $92=($80|0)==($91|0);
 if($92){label=34;break;}else{label=22;break;}
 case 22: 
 var $94=HEAP8[($80)];
 var $95=HEAP32[(($77)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{label=23;break;}
 case 23: 
 var $98=(($95+24)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(($95+28)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($99|0)==($101|0);
 if($102){label=25;break;}else{label=24;break;}
 case 24: 
 var $103=(($99+1)|0);
 HEAP32[(($98)>>2)]=$103;
 HEAP8[($99)]=$94;
 label=28;break;
 case 25: 
 var $104=$95;
 var $105=HEAP32[(($104)>>2)];
 var $106=(($105+52)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($94&255);
 var $109=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$107]($95,$108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=31;break; }
 case 26: 
 var $110=($109|0)==-1;
 if($110){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($77)>>2)]=0;
 label=28;break;
 case 28: 
 var $112=(($80+1)|0);
 var $_pre=HEAP8[($67)];
 var $80=$112;var $79=$_pre;label=18;break;
 case 29: 
 var $114$0 = ___cxa_find_matching_catch(-1, -1); var $114$1 = tempRet0;
 var $115=$114$0;
 var $116=$114$1;
 var $117=(($17+4)|0);
 var $118=$117;
 var $119=(tempValue=HEAP32[(($118)>>2)],HEAP32[(($118)>>2)]=tempValue+-1,tempValue);
 var $120=($119|0)==0;
 if($120){label=30;break;}else{var $_0=$115;var $_01=$116;label=38;break;}
 case 30: 
 var $122=$17;
 var $123=$17;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+8)|0);
 var $126=HEAP32[(($125)>>2)];
 FUNCTION_TABLE[$126]($122);
 var $_0=$115;var $_01=$116;label=38;break;
 case 31: 
 var $128$0 = ___cxa_find_matching_catch(-1, -1); var $128$1 = tempRet0;
 var $129=$128$0;
 var $130=$128$1;
 var $131=HEAP8[($67)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){var $_0=$129;var $_01=$130;label=38;break;}else{label=32;break;}
 case 32: 
 var $135=(($__nm+8)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=($136|0)==0;
 if($137){var $_0=$129;var $_01=$130;label=38;break;}else{label=33;break;}
 case 33: 
 _free($136);
 var $_0=$129;var $_01=$130;label=38;break;
 case 34: 
 var $140=HEAP32[(($77)>>2)];
 var $141=(($agg_result)|0);
 HEAP32[(($141)>>2)]=$140;
 if($82){label=37;break;}else{label=35;break;}
 case 35: 
 var $143=(($__nm+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=37;break;}else{label=36;break;}
 case 36: 
 _free($144);
 label=37;break;
 case 37: 
 STACKTOP=sp;return;
 case 38: 
 var $_01;
 var $_0;
 var $147$0=$_0;
 var $147$1=0;
 var $148$0=$147$0;
 var $148$1=$_01;
 ___resumeException($148$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5168)];HEAP8[((($2)+(1))|0)]=HEAP8[(5169)];HEAP8[((($2)+(2))|0)]=HEAP8[(5170)];HEAP8[((($2)+(3))|0)]=HEAP8[(5171)];HEAP8[((($2)+(4))|0)]=HEAP8[(5172)];HEAP8[((($2)+(5))|0)]=HEAP8[(5173)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19232)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19232);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$30;

 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;

 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17128)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i1=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i1=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i1=$50;label=23;break;
 case 22: 
 var $_0_i1=$23;label=23;break;
 case 23: 
 var $_0_i1;
 var $52=(($__o)|0);
 var $53=(($__iob+28)|0);
 var $54=(($1)|0);
 var $55=HEAP32[(($53)>>2)];
 var $56=$55;
 HEAP32[(($54)>>2)]=$56;
 var $57=(($55+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23,$_0_i1,$36,$52,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $61=HEAP32[(($54)>>2)];
 var $62=(($61+4)|0);
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=26;break;}
 case 25: 
 var $66=(($61)|0);
 var $67=$61;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=26;break;
 case 26: 
 var $71=(($__s)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=HEAP32[(($__op)>>2)];
 var $74=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$72,$52,$73,$74,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($54)>>2)];
 var $78=(($77+4)|0);
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=(($77)|0);
 var $83=$77;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 label=29;break;
 case 29: 
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($__s,$__n,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=_vsnprintf($__s,$__n,$__format,$1);

 var $5=($3|0)==0;
 if($5){label=4;break;}else{label=2;break;}
 case 2: 
 var $7=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $9$0 = ___cxa_find_matching_catch(-1, -1,0); var $9$1 = tempRet0;
 var $10=$9$0;
 ___clang_call_terminate($10);
 throw "Reached an unreachable!";
 case 4: 
 STACKTOP=sp;return $4;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((18672)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=18672;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(202);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$3);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((18676)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5224;
 ___cxa_throw($24,11720,(658));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((18288)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=18288;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(202);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$28);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((18292)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 HEAP32[(($50)>>2)]=5224;
 ___cxa_throw($49,11720,(658));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=13;break;}else{label=12;break;}
 case 12: 
 var $61=(($__grouping+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=14;break;
 case 13: 
 var $64=($57&255);
 var $65=$64>>>1;
 var $66=$65;label=14;break;
 case 14: 
 var $66;
 var $67=($66|0)==0;
 if($67){label=15;break;}else{label=23;break;}
 case 15: 
 var $69=$22;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+32)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $74=$__ne;
 var $75=$__nb;
 var $76=((($74)-($75))|0);
 var $77=(($__ob+$76)|0);
 HEAP32[(($__oe)>>2)]=$77;
 label=48;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $79=HEAP8[($56)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=22;break;}else{label=20;break;}
 case 20: 
 var $83=(($__grouping+8)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($84|0)==0;
 if($85){label=22;break;}else{label=21;break;}
 case 21: 
 _free($84);
 label=22;break;
 case 22: 
 ___resumeException($lpad_phi$0)
 case 23: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $88=HEAP8[($__nb)];
 if((($88<<24)>>24)==45|(($88<<24)>>24)==43){ label=24;break;}else{var $__nf_0=$__nb;label=26;break;}
 case 24: 
 var $90=$22;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+28)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($26,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $95=(($__nb+1)|0);
 var $96=HEAP32[(($__oe)>>2)];
 var $97=(($96+1)|0);
 HEAP32[(($__oe)>>2)]=$97;
 HEAP8[($96)]=$94;
 var $__nf_0=$95;label=26;break;
 case 26: 
 var $__nf_0;
 var $99=$__ne;
 var $100=$__nf_0;
 var $101=((($99)-($100))|0);
 var $102=($101|0)>1;
 if($102){label=27;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 27: 
 var $104=HEAP8[($__nf_0)];
 var $105=(($104<<24)>>24)==48;
 if($105){label=28;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 28: 
 var $107=(($__nf_0+1)|0);
 var $108=HEAP8[($107)];
 if((($108<<24)>>24)==120|(($108<<24)>>24)==88){ label=29;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 29: 
 var $110=$22;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+28)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=18;break; }
 case 30: 
 var $115=HEAP32[(($__oe)>>2)];
 var $116=(($115+1)|0);
 HEAP32[(($__oe)>>2)]=$116;
 HEAP8[($115)]=$114;
 var $117=HEAP8[($107)];
 var $118=HEAP32[(($110)>>2)];
 var $119=(($118+28)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($26,$117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=18;break; }
 case 31: 
 var $122=(($__nf_0+2)|0);
 var $123=HEAP32[(($__oe)>>2)];
 var $124=(($123+1)|0);
 HEAP32[(($__oe)>>2)]=$124;
 HEAP8[($123)]=$121;
 var $__nf_1=$122;label=32;break;
 case 32: 
 var $__nf_1;
 var $126=($__nf_1|0)==($__ne|0);
 if($126){label=35;break;}else{label=33;break;}
 case 33: 
 var $127=((($__ne)-(1))|0);
 var $128=($127>>>0)>($__nf_1>>>0);
 if($128){var $_012_i_i=$__nf_1;var $129=$127;label=34;break;}else{label=35;break;}
 case 34: 
 var $129;
 var $_012_i_i;
 var $130=HEAP8[($_012_i_i)];
 var $131=HEAP8[($129)];
 HEAP8[($_012_i_i)]=$131;
 HEAP8[($129)]=$130;
 var $132=(($_012_i_i+1)|0);
 var $133=((($129)-(1))|0);
 var $134=($132>>>0)<($133>>>0);
 if($134){var $_012_i_i=$132;var $129=$133;label=34;break;}else{label=35;break;}
 case 35: 
 var $135=$47;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+16)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=18;break; }
 case 36: 
 var $140=($__nf_1>>>0)<($__ne>>>0);
 if($140){label=37;break;}else{label=45;break;}
 case 37: 
 var $141=$__grouping;
 var $142=(($141+1)|0);
 var $143=$22;
 var $144=(($__grouping+4)|0);
 var $145=(($__grouping+8)|0);
 var $__dc_013=0;var $__dg_014=0;var $__p_015=$__nf_1;label=38;break;
 case 38: 
 var $__p_015;
 var $__dg_014;
 var $__dc_013;
 var $146=HEAP8[($56)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 var $149=HEAP32[(($145)>>2)];
 var $_=($148?$142:$149);
 var $150=(($_+$__dg_014)|0);
 var $151=HEAP8[($150)];
 var $152=(($151<<24)>>24)!=0;
 var $153=(($151<<24)>>24);
 var $154=($__dc_013|0)==($153|0);
 var $or_cond=$152&$154;
 if($or_cond){label=39;break;}else{var $__dg_1=$__dg_014;var $__dc_1=$__dc_013;label=43;break;}
 case 39: 
 var $156=HEAP32[(($__oe)>>2)];
 var $157=(($156+1)|0);
 HEAP32[(($__oe)>>2)]=$157;
 HEAP8[($156)]=$139;
 var $158=HEAP8[($56)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=41;break;}else{label=40;break;}
 case 40: 
 var $162=HEAP32[(($144)>>2)];
 var $166=$162;label=42;break;
 case 41: 
 var $164=($158&255);
 var $165=$164>>>1;
 var $166=$165;label=42;break;
 case 42: 
 var $166;
 var $167=((($166)-(1))|0);
 var $168=($__dg_014>>>0)<($167>>>0);
 var $169=($168&1);
 var $___dg_0=((($169)+($__dg_014))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=43;break;
 case 43: 
 var $__dc_1;
 var $__dg_1;
 var $171=HEAP8[($__p_015)];
 var $172=HEAP32[(($143)>>2)];
 var $173=(($172+28)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($26,$171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=17;break; }
 case 44: 
 var $176=HEAP32[(($__oe)>>2)];
 var $177=(($176+1)|0);
 HEAP32[(($__oe)>>2)]=$177;
 HEAP8[($176)]=$175;
 var $178=((($__dc_1)+(1))|0);
 var $179=(($__p_015+1)|0);
 var $180=($179>>>0)<($__ne>>>0);
 if($180){var $__dc_013=$178;var $__dg_014=$__dg_1;var $__p_015=$179;label=38;break;}else{label=45;break;}
 case 45: 
 var $181=$__nf_1;
 var $182=$__nb;
 var $183=((($181)-($182))|0);
 var $184=(($__ob+$183)|0);
 var $185=HEAP32[(($__oe)>>2)];
 var $186=($184|0)==($185|0);
 if($186){label=48;break;}else{label=46;break;}
 case 46: 
 var $187=((($185)-(1))|0);
 var $188=($187>>>0)>($184>>>0);
 if($188){var $_012_i_i10=$184;var $189=$187;label=47;break;}else{label=48;break;}
 case 47: 
 var $189;
 var $_012_i_i10;
 var $190=HEAP8[($_012_i_i10)];
 var $191=HEAP8[($189)];
 HEAP8[($_012_i_i10)]=$191;
 HEAP8[($189)]=$190;
 var $192=(($_012_i_i10+1)|0);
 var $193=((($189)-(1))|0);
 var $194=($192>>>0)<($193>>>0);
 if($194){var $_012_i_i10=$192;var $189=$193;label=47;break;}else{label=48;break;}
 case 48: 
 var $195=($__np|0)==($__ne|0);
 if($195){label=49;break;}else{label=50;break;}
 case 49: 
 var $197=HEAP32[(($__oe)>>2)];
 var $storemerge=$197;label=51;break;
 case 50: 
 var $199=$__np;
 var $200=$__nb;
 var $201=((($199)-($200))|0);
 var $202=(($__ob+$201)|0);
 var $storemerge=$202;label=51;break;
 case 51: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $204=HEAP8[($56)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){label=54;break;}else{label=52;break;}
 case 52: 
 var $208=(($__grouping+8)|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($209|0)==0;
 if($210){label=54;break;}else{label=53;break;}
 case 53: 
 _free($209);
 label=54;break;
 case 54: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s_0,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=($__s_0|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=0;
 label=40;break;
 case 3: 
 var $5=$__oe;
 var $6=$__ob;
 var $7=((($5)-($6))|0);
 var $8=(($__iob+12)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)>($7|0);
 var $11=((($9)-($7))|0);
 var $__ns_0=($10?$11:0);
 var $12=$__op;
 var $13=((($12)-($6))|0);
 var $14=($13|0)>0;
 if($14){label=4;break;}else{label=6;break;}
 case 4: 
 var $16=$__s_0;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+48)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=FUNCTION_TABLE[$19]($__s_0,$__ob,$13);
 var $21=($20|0)==($13|0);
 if($21){label=6;break;}else{label=5;break;}
 case 5: 
 var $23=(($agg_result)|0);
 HEAP32[(($23)>>2)]=0;
 label=40;break;
 case 6: 
 var $25=($__ns_0|0)>0;
 if($25){label=7;break;}else{label=36;break;}
 case 7: 
 var $27=($__ns_0>>>0)<11;
 if($27){label=8;break;}else{label=9;break;}
 case 8: 
 var $29=$__ns_0<<1;
 var $30=(($29)&255);
 var $31=$__sp;
 HEAP8[($31)]=$30;
 var $32=$__sp;
 var $33=(($32+1)|0);
 var $__p_0_i=$33;var $_pre_phi=$31;label=21;break;
 case 9: 
 var $34=((($__ns_0)+(16))|0);
 var $35=$34&-16;
 var $36=($35|0)==0;
 var $_size_i=($36?1:$35);
 label=10;break;
 case 10: 
 var $38=_malloc($_size_i);
 var $39=($38|0)==0;
 if($39){label=11;break;}else{label=20;break;}
 case 11: 
 var $41=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $42=($41|0)==0;
 if($42){label=17;break;}else{label=12;break;}
 case 12: 
 var $44=$41;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$44]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $46=$lpad_phi_i$1;
 var $47=($46|0)<0;
 if($47){label=16;break;}else{label=18;break;}
 case 16: 
 var $49=$lpad_phi_i$0;
 ___cxa_call_unexpected($49);
 throw "Reached an unreachable!";
 case 17: 
 var $51=___cxa_allocate_exception(4);
 var $52=$51;
 HEAP32[(($52)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($51,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 18: 
 ___resumeException($lpad_phi_i$0)
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $55=(($__sp+8)|0);
 HEAP32[(($55)>>2)]=$38;
 var $56=$35|1;
 var $57=(($__sp)|0);
 HEAP32[(($57)>>2)]=$56;
 var $58=(($__sp+4)|0);
 HEAP32[(($58)>>2)]=$__ns_0;
 var $_pre=$__sp;
 var $__p_0_i=$38;var $_pre_phi=$_pre;label=21;break;
 case 21: 
 var $_pre_phi;
 var $__p_0_i;
 _memset($__p_0_i, $__fl, $__ns_0)|0;
 var $59=(($__p_0_i+$__ns_0)|0);
 HEAP8[($59)]=0;
 var $60=HEAP8[($_pre_phi)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=23;break;}else{label=22;break;}
 case 22: 
 var $64=(($__sp+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $69=$65;label=24;break;
 case 23: 
 var $67=$__sp;
 var $68=(($67+1)|0);
 var $69=$68;label=24;break;
 case 24: 
 var $69;
 var $70=$__s_0;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+48)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$73]($__s_0,$69,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=29;break; }
 case 25: 
 var $75=($74|0)==($__ns_0|0);
 if($75){label=33;break;}else{label=26;break;}
 case 26: 
 var $76=(($agg_result)|0);
 HEAP32[(($76)>>2)]=0;
 var $77=HEAP8[($_pre_phi)];
 var $78=$77&1;
 var $79=(($78<<24)>>24)==0;
 if($79){label=40;break;}else{label=27;break;}
 case 27: 
 var $81=(($__sp+8)|0);
 var $82=HEAP32[(($81)>>2)];
 var $83=($82|0)==0;
 if($83){label=40;break;}else{label=28;break;}
 case 28: 
 _free($82);
 label=40;break;
 case 29: 
 var $86$0 = ___cxa_find_matching_catch(-1, -1); var $86$1 = tempRet0;
 var $87=HEAP8[($_pre_phi)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=32;break;}else{label=30;break;}
 case 30: 
 var $91=(($__sp+8)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=32;break;}else{label=31;break;}
 case 31: 
 _free($92);
 label=32;break;
 case 32: 
 ___resumeException($86$0)
 case 33: 
 var $96=HEAP8[($_pre_phi)];
 var $97=$96&1;
 var $98=(($97<<24)>>24)==0;
 if($98){label=36;break;}else{label=34;break;}
 case 34: 
 var $100=(($__sp+8)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==0;
 if($102){label=36;break;}else{label=35;break;}
 case 35: 
 _free($101);
 label=36;break;
 case 36: 
 var $104=((($5)-($12))|0);
 var $105=($104|0)>0;
 if($105){label=37;break;}else{label=39;break;}
 case 37: 
 var $107=$__s_0;
 var $108=HEAP32[(($107)>>2)];
 var $109=(($108+48)|0);
 var $110=HEAP32[(($109)>>2)];
 var $111=FUNCTION_TABLE[$110]($__s_0,$__op,$104);
 var $112=($111|0)==($104|0);
 if($112){label=39;break;}else{label=38;break;}
 case 38: 
 var $114=(($agg_result)|0);
 HEAP32[(($114)>>2)]=0;
 label=40;break;
 case 39: 
 HEAP32[(($8)>>2)]=0;
 var $116=(($agg_result)|0);
 HEAP32[(($116)>>2)]=$__s_0;
 label=40;break;
 case 40: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $15=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19232)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19232);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17128)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,22,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 var $$etemp$3$0=41;
 var $$etemp$3$1=0;

 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 var $$etemp$4$0=41;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+72)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(48);
 var $__oe=(sp)+(56);
 var $1=(sp)+(64);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5168)];HEAP8[((($2)+(1))|0)]=HEAP8[(5169)];HEAP8[((($2)+(2))|0)]=HEAP8[(5170)];HEAP8[((($2)+(3))|0)]=HEAP8[(5171)];HEAP8[((($2)+(4))|0)]=HEAP8[(5172)];HEAP8[((($2)+(5))|0)]=HEAP8[(5173)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19232)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19232);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$30;

 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;

 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17128)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i1=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i1=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i1=$50;label=23;break;
 case 22: 
 var $_0_i1=$23;label=23;break;
 case 23: 
 var $_0_i1;
 var $52=(($__o)|0);
 var $53=(($__iob+28)|0);
 var $54=(($1)|0);
 var $55=HEAP32[(($53)>>2)];
 var $56=$55;
 HEAP32[(($54)>>2)]=$56;
 var $57=(($55+4)|0);
 var $58=$57;
 var $59=(tempValue=HEAP32[(($58)>>2)],HEAP32[(($58)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($23,$_0_i1,$36,$52,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $61=HEAP32[(($54)>>2)];
 var $62=(($61+4)|0);
 var $63=(tempValue=HEAP32[(($62)>>2)],HEAP32[(($62)>>2)]=tempValue+-1,tempValue);
 var $64=($63|0)==0;
 if($64){label=25;break;}else{label=26;break;}
 case 25: 
 var $66=(($61)|0);
 var $67=$61;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+8)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66);
 label=26;break;
 case 26: 
 var $71=(($__s)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=HEAP32[(($__op)>>2)];
 var $74=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$72,$52,$73,$74,$__iob,$__fl);
 STACKTOP=sp;return;
 case 27: 
 var $76$0 = ___cxa_find_matching_catch(-1, -1); var $76$1 = tempRet0;
 var $77=HEAP32[(($54)>>2)];
 var $78=(($77+4)|0);
 var $79=(tempValue=HEAP32[(($78)>>2)],HEAP32[(($78)>>2)]=tempValue+-1,tempValue);
 var $80=($79|0)==0;
 if($80){label=28;break;}else{label=29;break;}
 case 28: 
 var $82=(($77)|0);
 var $83=$77;
 var $84=HEAP32[(($83)>>2)];
 var $85=(($84+8)|0);
 var $86=HEAP32[(($85)>>2)];
 FUNCTION_TABLE[$86]($82);
 label=29;break;
 case 29: 
 ___resumeException($76$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+104)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(80);
 var $__oe=(sp)+(88);
 var $1=(sp)+(96);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $15=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19232)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19232);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17128)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,23,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=(($__o)|0);
 var $$etemp$3$0=43;
 var $$etemp$3$1=0;

 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE21__widen_and_group_intEPcS2_S2_S2_RS2_S3_RKNS_6localeE($24,$_0_i1,$37,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 var $$etemp$4$0=43;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($21)]=70;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 9: 
 HEAP8[($21)]=102;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($21)]=69;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 12: 
 HEAP8[($21)]=101;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 13: 
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i12=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i12=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($21)]=71;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 18: 
 HEAP8[($21)]=103;
 var $specify_precision_0_off0_ph_i12=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i12;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19232)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19232);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17128)>>2)]=$49;

 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;

 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17128)>>2)];
 if($specify_precision_0_off0_ph_i12){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre19=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $104=0;var $103=$_pre19;label=47;break;
 case 29: 
 var $63=HEAP8[(19232)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i12){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19232);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17128)>>2)]=$70;

 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;

 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17128)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1217=$82;var $_118=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19232);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17128)>>2)]=$88;

 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;

 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17128)>>2)];
 var $94=(($__iob+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$95,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$96;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $98=HEAP32[(($__nb)>>2)];
 var $99=($98|0)==0;
 if($99){label=45;break;}else{var $__nc_2=$__nc_1;var $104=$98;var $103=$98;label=47;break;}
 case 45: 
 var $101=___cxa_allocate_exception(4);
 var $102=$101;
 HEAP32[(($102)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $103;
 var $104;
 var $__nc_2;
 var $105=(($103+$__nc_2)|0);
 var $106=HEAP32[(($5)>>2)];
 var $107=$106&176;
 if(($107|0)==16){ label=48;break;}else if(($107|0)==32){ var $_0_i7=$105;label=54;break;}else{label=53;break;}
 case 48: 
 var $109=HEAP8[($103)];
 if((($109<<24)>>24)==45|(($109<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $111=(($103+1)|0);
 var $_0_i7=$111;label=54;break;
 case 50: 
 var $113=($__nc_2|0)>1;
 var $114=(($109<<24)>>24)==48;
 var $or_cond_i=$113&$114;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $116=(($103+1)|0);
 var $117=HEAP8[($116)];
 if((($117<<24)>>24)==120|(($117<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $119=(($103+2)|0);
 var $_0_i7=$119;label=54;break;
 case 53: 
 var $_0_i7=$103;label=54;break;
 case 54: 
 var $_0_i7;
 var $121=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $122=($103|0)==($42|0);
 if($122){var $__ob_0=$121;var $137=0;var $136=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $124=$__nc_2<<1;
 var $125=_malloc($124);
 var $126=($125|0)==0;
 if($126){label=56;break;}else{var $__ob_0=$125;var $137=$125;var $136=$103;label=59;break;}
 case 56: 
 var $128=___cxa_allocate_exception(4);
 var $129=$128;
 HEAP32[(($129)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($128,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $131=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $131;
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=$132$1;
 var $_0=$133;var $_01=$134;var $182=$131;label=70;break;
 case 59: 
 var $136;
 var $137;
 var $__ob_0;
 var $138=(($__iob+28)|0);
 var $139=(($1)|0);
 var $140=HEAP32[(($138)>>2)];
 var $141=$140;
 HEAP32[(($139)>>2)]=$141;
 var $142=(($140+4)|0);
 var $143=$142;
 var $144=(tempValue=HEAP32[(($143)>>2)],HEAP32[(($143)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($136,$_0_i7,$105,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $146=HEAP32[(($139)>>2)];
 var $147=(($146+4)|0);
 var $148=(tempValue=HEAP32[(($147)>>2)],HEAP32[(($147)>>2)]=tempValue+-1,tempValue);
 var $149=($148|0)==0;
 if($149){label=61;break;}else{label=62;break;}
 case 61: 
 var $151=(($146)|0);
 var $152=$146;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+8)|0);
 var $155=HEAP32[(($154)>>2)];
 FUNCTION_TABLE[$155]($151);
 label=62;break;
 case 62: 
 var $156=(($__s)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=HEAP32[(($__op)>>2)];
 var $159=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$157,$__ob_0,$158,$159,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $131=$137;label=58;break; }
 case 63: 
 var $161=(($2)|0);
 var $162=HEAP32[(($161)>>2)];
 HEAP32[(($156)>>2)]=$162;
 var $163=(($agg_result)|0);
 HEAP32[(($163)>>2)]=$162;
 var $164=($137|0)==0;
 if($164){label=65;break;}else{label=64;break;}
 case 64: 
 _free($137);
 label=65;break;
 case 65: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $166=($104|0)==0;
 if($166){label=67;break;}else{label=66;break;}
 case 66: 
 _free($104);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $169$0 = ___cxa_find_matching_catch(-1, -1); var $169$1 = tempRet0;
 var $170=$169$0;
 var $171=$169$1;
 var $172=HEAP32[(($139)>>2)];
 var $173=(($172+4)|0);
 var $174=(tempValue=HEAP32[(($173)>>2)],HEAP32[(($173)>>2)]=tempValue+-1,tempValue);
 var $175=($174|0)==0;
 if($175){label=69;break;}else{var $_0=$170;var $_01=$171;var $182=$137;label=70;break;}
 case 69: 
 var $177=(($172)|0);
 var $178=$172;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+8)|0);
 var $181=HEAP32[(($180)>>2)];
 FUNCTION_TABLE[$181]($177);
 var $_0=$170;var $_01=$171;var $182=$137;label=70;break;
 case 70: 
 var $182;
 var $_01;
 var $_0;
 var $183=($182|0)==0;
 if($183){label=72;break;}else{label=71;break;}
 case 71: 
 _free($182);
 label=72;break;
 case 72: 
 var $185=($104|0)==0;
 if($185){var $_1217=$_01;var $_118=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($104);
 var $_1217=$_01;var $_118=$_0;label=74;break;
 case 74: 
 var $_118;
 var $_1217;
 var $187$0=$_118;
 var $187$1=0;
 var $188$0=$187$0;
 var $188$1=$_1217;
 ___resumeException($188$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__s,$__l,$__format,varrp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__va=sp;
 var $1=(($__va)|0);
 var $2=$__va;
 HEAP32[(($2)>>2)]=varrp;HEAP32[((($2)+(4))>>2)]=0;
 var $3=_uselocale($__l);
 var $4=(function() { try { __THREW__ = 0; return _vasprintf($__s,$__format,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=6;break; }
 case 2: 

 var $6=($3|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 5: 
 STACKTOP=sp;return $4;
 case 6: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1); var $13$1 = tempRet0;
 var $14=($3|0)==0;
 if($14){label=9;break;}else{label=7;break;}
 case 7: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=8;break; }
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 9: 
 ___resumeException($13$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((18672)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=18672;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(202);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$3);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((18676)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5224;
 ___cxa_throw($24,11720,(658));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((18288)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=18288;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(202);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$28);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((18292)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 HEAP32[(($50)>>2)]=5224;
 ___cxa_throw($49,11720,(658));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+28)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+1)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP8[($64)]=$62;
 var $__nf_0=$63;label=23;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit22$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit22$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit22$1;var $eh_lpad_body$0=$lpad_loopexit22$0;label=19;break;
 case 16: 
 var $lpad_loopexit30$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit30$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit30$1;var $eh_lpad_body$0=$lpad_loopexit30$0;label=19;break;
 case 17: 
 var $lpad_loopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit38$1;var $eh_lpad_body$0=$lpad_loopexit38$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit39$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit39$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit39$1;var $eh_lpad_body$0=$lpad_nonloopexit39$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $66=$__grouping;
 var $67=HEAP8[($66)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=22;break;}else{label=20;break;}
 case 20: 
 var $71=(($__grouping+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)==0;
 if($73){label=22;break;}else{label=21;break;}
 case 21: 
 _free($72);
 label=22;break;
 case 22: 
 ___resumeException($eh_lpad_body$0)
 case 23: 
 var $__nf_0;
 var $76=$__ne;
 var $77=$__nf_0;
 var $78=((($76)-($77))|0);
 var $79=($78|0)>1;
 if($79){label=25;break;}else{label=24;break;}
 case 24: 
 var $80=($__nf_0>>>0)<($__ne>>>0);
 if($80){var $__ns_134=$__nf_0;label=39;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=46;break;}
 case 25: 
 var $82=HEAP8[($__nf_0)];
 var $83=(($82<<24)>>24)==48;
 if($83){label=26;break;}else{label=24;break;}
 case 26: 
 var $85=(($__nf_0+1)|0);
 var $86=HEAP8[($85)];
 if((($86<<24)>>24)==120|(($86<<24)>>24)==88){ label=27;break;}else{label=24;break;}
 case 27: 
 var $88=$22;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+28)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $93=HEAP32[(($__oe)>>2)];
 var $94=(($93+1)|0);
 HEAP32[(($__oe)>>2)]=$94;
 HEAP8[($93)]=$92;
 var $95=(($__nf_0+2)|0);
 var $96=HEAP8[($85)];
 var $97=HEAP32[(($88)>>2)];
 var $98=(($97+28)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($26,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=18;break; }
 case 29: 
 var $101=HEAP32[(($__oe)>>2)];
 var $102=(($101+1)|0);
 HEAP32[(($__oe)>>2)]=$102;
 HEAP8[($101)]=$100;
 var $103=($95>>>0)<($__ne>>>0);
 if($103){var $__ns_043=$95;label=31;break;}else{var $__nf_1=$95;var $__ns_2=$95;label=46;break;}
 case 30: 
 var $105=($123>>>0)<($__ne>>>0);
 if($105){var $__ns_043=$123;label=31;break;}else{var $__nf_1=$95;var $__ns_2=$123;label=46;break;}
 case 31: 
 var $__ns_043;
 var $106=HEAP8[($__ns_043)];
 var $107=HEAP8[(19232)];
 var $108=(($107<<24)>>24)==0;
 if($108){label=32;break;}else{label=36;break;}
 case 32: 
 var $110=___cxa_guard_acquire(19232);
 var $111=($110|0)==0;
 if($111){label=36;break;}else{label=33;break;}
 case 33: 
 var $113=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=35;break; }
 case 34: 
 HEAP32[((17128)>>2)]=$113;

 label=36;break;
 case 35: 
 var $116$0 = ___cxa_find_matching_catch(-1, -1); var $116$1 = tempRet0;

 var $eh_lpad_body$1=$116$1;var $eh_lpad_body$0=$116$0;label=19;break;
 case 36: 
 var $118=HEAP32[((17128)>>2)];
 var $119=(($106<<24)>>24);
 var $120=(function() { try { __THREW__ = 0; return _isxdigit_l($119,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=17;break; }
 case 37: 
 var $122=($120|0)==0;
 var $123=(($__ns_043+1)|0);
 if($122){var $__nf_1=$95;var $__ns_2=$__ns_043;label=46;break;}else{label=30;break;}
 case 38: 
 var $125=($143>>>0)<($__ne>>>0);
 if($125){var $__ns_134=$143;label=39;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$143;label=46;break;}
 case 39: 
 var $__ns_134;
 var $126=HEAP8[($__ns_134)];
 var $127=HEAP8[(19232)];
 var $128=(($127<<24)>>24)==0;
 if($128){label=40;break;}else{label=44;break;}
 case 40: 
 var $130=___cxa_guard_acquire(19232);
 var $131=($130|0)==0;
 if($131){label=44;break;}else{label=41;break;}
 case 41: 
 var $133=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=43;break; }
 case 42: 
 HEAP32[((17128)>>2)]=$133;

 label=44;break;
 case 43: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;

 var $eh_lpad_body$1=$136$1;var $eh_lpad_body$0=$136$0;label=19;break;
 case 44: 
 var $138=HEAP32[((17128)>>2)];
 var $139=(($126<<24)>>24);
 var $140=(function() { try { __THREW__ = 0; return _isdigit_l($139,$138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=16;break; }
 case 45: 
 var $142=($140|0)==0;
 var $143=(($__ns_134+1)|0);
 if($142){var $__nf_1=$__nf_0;var $__ns_2=$__ns_134;label=46;break;}else{label=38;break;}
 case 46: 
 var $__ns_2;
 var $__nf_1;
 var $144=$__grouping;
 var $145=HEAP8[($144)];
 var $146=$145&1;
 var $147=(($146<<24)>>24)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 var $149=(($__grouping+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $154=$150;label=49;break;
 case 48: 
 var $152=($145&255);
 var $153=$152>>>1;
 var $154=$153;label=49;break;
 case 49: 
 var $154;
 var $155=($154|0)==0;
 if($155){label=50;break;}else{label=52;break;}
 case 50: 
 var $157=HEAP32[(($__oe)>>2)];
 var $158=$22;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+32)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($26,$__nf_1,$__ns_2,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=18;break; }
 case 51: 
 var $163=$__ns_2;
 var $164=$__nf_1;
 var $165=((($163)-($164))|0);
 var $166=HEAP32[(($__oe)>>2)];
 var $167=(($166+$165)|0);
 HEAP32[(($__oe)>>2)]=$167;
 label=68;break;
 case 52: 
 var $169=($__nf_1|0)==($__ns_2|0);
 if($169){label=55;break;}else{label=53;break;}
 case 53: 
 var $170=((($__ns_2)-(1))|0);
 var $171=($170>>>0)>($__nf_1>>>0);
 if($171){var $_012_i_i=$__nf_1;var $172=$170;label=54;break;}else{label=55;break;}
 case 54: 
 var $172;
 var $_012_i_i;
 var $173=HEAP8[($_012_i_i)];
 var $174=HEAP8[($172)];
 HEAP8[($_012_i_i)]=$174;
 HEAP8[($172)]=$173;
 var $175=(($_012_i_i+1)|0);
 var $176=((($172)-(1))|0);
 var $177=($175>>>0)<($176>>>0);
 if($177){var $_012_i_i=$175;var $172=$176;label=54;break;}else{label=55;break;}
 case 55: 
 var $178=$47;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=18;break; }
 case 56: 
 var $183=($__nf_1>>>0)<($__ns_2>>>0);
 if($183){label=57;break;}else{label=65;break;}
 case 57: 
 var $184=$__grouping;
 var $185=(($184+1)|0);
 var $186=(($__grouping+4)|0);
 var $187=(($__grouping+8)|0);
 var $188=$22;
 var $__dc_025=0;var $__dg_026=0;var $__p_027=$__nf_1;label=58;break;
 case 58: 
 var $__p_027;
 var $__dg_026;
 var $__dc_025;
 var $189=HEAP8[($144)];
 var $190=$189&1;
 var $191=(($190<<24)>>24)==0;
 var $192=HEAP32[(($187)>>2)];
 var $_=($191?$185:$192);
 var $193=(($_+$__dg_026)|0);
 var $194=HEAP8[($193)];
 var $195=(($194<<24)>>24)>0;
 var $196=(($194<<24)>>24);
 var $197=($__dc_025|0)==($196|0);
 var $or_cond=$195&$197;
 if($or_cond){label=59;break;}else{var $__dg_1=$__dg_026;var $__dc_1=$__dc_025;label=63;break;}
 case 59: 
 var $199=HEAP32[(($__oe)>>2)];
 var $200=(($199+1)|0);
 HEAP32[(($__oe)>>2)]=$200;
 HEAP8[($199)]=$182;
 var $201=HEAP8[($144)];
 var $202=$201&1;
 var $203=(($202<<24)>>24)==0;
 if($203){label=61;break;}else{label=60;break;}
 case 60: 
 var $205=HEAP32[(($186)>>2)];
 var $209=$205;label=62;break;
 case 61: 
 var $207=($201&255);
 var $208=$207>>>1;
 var $209=$208;label=62;break;
 case 62: 
 var $209;
 var $210=((($209)-(1))|0);
 var $211=($__dg_026>>>0)<($210>>>0);
 var $212=($211&1);
 var $___dg_0=((($212)+($__dg_026))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=63;break;
 case 63: 
 var $__dc_1;
 var $__dg_1;
 var $214=HEAP8[($__p_027)];
 var $215=HEAP32[(($188)>>2)];
 var $216=(($215+28)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]($26,$214) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=15;break; }
 case 64: 
 var $219=HEAP32[(($__oe)>>2)];
 var $220=(($219+1)|0);
 HEAP32[(($__oe)>>2)]=$220;
 HEAP8[($219)]=$218;
 var $221=((($__dc_1)+(1))|0);
 var $222=(($__p_027+1)|0);
 var $223=($222>>>0)<($__ns_2>>>0);
 if($223){var $__dc_025=$221;var $__dg_026=$__dg_1;var $__p_027=$222;label=58;break;}else{label=65;break;}
 case 65: 
 var $224=$__nf_1;
 var $225=$__nb;
 var $226=((($224)-($225))|0);
 var $227=(($__ob+$226)|0);
 var $228=HEAP32[(($__oe)>>2)];
 var $229=($227|0)==($228|0);
 if($229){label=68;break;}else{label=66;break;}
 case 66: 
 var $230=((($228)-(1))|0);
 var $231=($230>>>0)>($227>>>0);
 if($231){var $_012_i_i13=$227;var $232=$230;label=67;break;}else{label=68;break;}
 case 67: 
 var $232;
 var $_012_i_i13;
 var $233=HEAP8[($_012_i_i13)];
 var $234=HEAP8[($232)];
 HEAP8[($_012_i_i13)]=$234;
 HEAP8[($232)]=$233;
 var $235=(($_012_i_i13+1)|0);
 var $236=((($232)-(1))|0);
 var $237=($235>>>0)<($236>>>0);
 if($237){var $_012_i_i13=$235;var $232=$236;label=67;break;}else{label=68;break;}
 case 68: 
 var $238=($__ns_2>>>0)<($__ne>>>0);
 if($238){label=69;break;}else{var $__nf_3=$__ns_2;label=75;break;}
 case 69: 
 var $239=$22;
 var $__nf_221=$__ns_2;label=70;break;
 case 70: 
 var $__nf_221;
 var $241=HEAP8[($__nf_221)];
 var $242=(($241<<24)>>24)==46;
 if($242){label=71;break;}else{label=73;break;}
 case 71: 
 var $244=$47;
 var $245=HEAP32[(($244)>>2)];
 var $246=(($245+12)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$247]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=18;break; }
 case 72: 
 var $249=HEAP32[(($__oe)>>2)];
 var $250=(($249+1)|0);
 HEAP32[(($__oe)>>2)]=$250;
 HEAP8[($249)]=$248;
 var $251=(($__nf_221+1)|0);
 var $__nf_3=$251;label=75;break;
 case 73: 
 var $253=HEAP32[(($239)>>2)];
 var $254=(($253+28)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$255]($26,$241) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=14;break; }
 case 74: 
 var $257=HEAP32[(($__oe)>>2)];
 var $258=(($257+1)|0);
 HEAP32[(($__oe)>>2)]=$258;
 HEAP8[($257)]=$256;
 var $259=(($__nf_221+1)|0);
 var $260=($259>>>0)<($__ne>>>0);
 if($260){var $__nf_221=$259;label=70;break;}else{var $__nf_3=$259;label=75;break;}
 case 75: 
 var $__nf_3;
 var $261=HEAP32[(($__oe)>>2)];
 var $262=$22;
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+32)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$265]($26,$__nf_3,$__ne,$261) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=18;break; }
 case 76: 
 var $267=$__nf_3;
 var $268=((($76)-($267))|0);
 var $269=HEAP32[(($__oe)>>2)];
 var $270=(($269+$268)|0);
 HEAP32[(($__oe)>>2)]=$270;
 var $271=($__np|0)==($__ne|0);
 if($271){var $storemerge=$270;label=78;break;}else{label=77;break;}
 case 77: 
 var $273=$__np;
 var $274=$__nb;
 var $275=((($273)-($274))|0);
 var $276=(($__ob+$275)|0);
 var $storemerge=$276;label=78;break;
 case 78: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $278=HEAP8[($144)];
 var $279=$278&1;
 var $280=(($279<<24)>>24)==0;
 if($280){label=81;break;}else{label=79;break;}
 case 79: 
 var $282=(($__grouping+8)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($283|0)==0;
 if($284){label=81;break;}else{label=80;break;}
 case 80: 
 _free($283);
 label=81;break;
 case 81: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEce($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(sp)+(136);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 HEAP8[($21)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep16=(($_1_i+1)|0);
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep16)]=65;
 var $specify_precision_0_off0_ph_i17=0;label=19;break;
 case 15: 
 HEAP8[($scevgep16)]=97;
 var $specify_precision_0_off0_ph_i17=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i17=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i17;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19232)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19232);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17128)>>2)]=$49;

 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;

 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17128)>>2)];
 if($specify_precision_0_off0_ph_i17){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre14=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $102=0;var $101=$_pre14;label=47;break;
 case 29: 
 var $63=HEAP8[(19232)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i17){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19232);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17128)>>2)]=$70;

 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;

 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17128)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1212=$82;var $_113=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19232);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17128)>>2)]=$88;

 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;

 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17128)>>2)];
 var $94=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$94;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $96=HEAP32[(($__nb)>>2)];
 var $97=($96|0)==0;
 if($97){label=45;break;}else{var $__nc_2=$__nc_1;var $102=$96;var $101=$96;label=47;break;}
 case 45: 
 var $99=___cxa_allocate_exception(4);
 var $100=$99;
 HEAP32[(($100)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $101;
 var $102;
 var $__nc_2;
 var $103=(($101+$__nc_2)|0);
 var $104=HEAP32[(($5)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i7=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($101)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($101+1)|0);
 var $_0_i7=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($101+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($101+2)|0);
 var $_0_i7=$117;label=54;break;
 case 53: 
 var $_0_i7=$101;label=54;break;
 case 54: 
 var $_0_i7;
 var $119=(($__o)|0);
 var $$etemp$3$0=57;
 var $$etemp$3$1=0;

 var $120=($101|0)==($42|0);
 if($120){var $__ob_0=$119;var $135=0;var $134=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $122=$__nc_2<<1;
 var $123=_malloc($122);
 var $124=($123|0)==0;
 if($124){label=56;break;}else{var $__ob_0=$123;var $135=$123;var $134=$101;label=59;break;}
 case 56: 
 var $126=___cxa_allocate_exception(4);
 var $127=$126;
 HEAP32[(($127)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($126,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $129=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $129;
 var $130$0 = ___cxa_find_matching_catch(-1, -1); var $130$1 = tempRet0;
 var $131=$130$0;
 var $132=$130$1;
 var $_0=$131;var $_01=$132;var $180=$129;label=70;break;
 case 59: 
 var $134;
 var $135;
 var $__ob_0;
 var $136=(($__iob+28)|0);
 var $137=(($1)|0);
 var $138=HEAP32[(($136)>>2)];
 var $139=$138;
 HEAP32[(($137)>>2)]=$139;
 var $140=(($138+4)|0);
 var $141=$140;
 var $142=(tempValue=HEAP32[(($141)>>2)],HEAP32[(($141)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIcE23__widen_and_group_floatEPcS2_S2_S2_RS2_S3_RKNS_6localeE($134,$_0_i7,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $144=HEAP32[(($137)>>2)];
 var $145=(($144+4)|0);
 var $146=(tempValue=HEAP32[(($145)>>2)],HEAP32[(($145)>>2)]=tempValue+-1,tempValue);
 var $147=($146|0)==0;
 if($147){label=61;break;}else{label=62;break;}
 case 61: 
 var $149=(($144)|0);
 var $150=$144;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+8)|0);
 var $153=HEAP32[(($152)>>2)];
 FUNCTION_TABLE[$153]($149);
 label=62;break;
 case 62: 
 var $154=(($__s)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=HEAP32[(($__op)>>2)];
 var $157=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$155,$__ob_0,$156,$157,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $129=$135;label=58;break; }
 case 63: 
 var $159=(($2)|0);
 var $160=HEAP32[(($159)>>2)];
 HEAP32[(($154)>>2)]=$160;
 var $161=(($agg_result)|0);
 HEAP32[(($161)>>2)]=$160;
 var $162=($135|0)==0;
 if($162){label=65;break;}else{label=64;break;}
 case 64: 
 _free($135);
 label=65;break;
 case 65: 
 var $$etemp$4$0=57;
 var $$etemp$4$1=0;

 var $164=($102|0)==0;
 if($164){label=67;break;}else{label=66;break;}
 case 66: 
 _free($102);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $167$0 = ___cxa_find_matching_catch(-1, -1); var $167$1 = tempRet0;
 var $168=$167$0;
 var $169=$167$1;
 var $170=HEAP32[(($137)>>2)];
 var $171=(($170+4)|0);
 var $172=(tempValue=HEAP32[(($171)>>2)],HEAP32[(($171)>>2)]=tempValue+-1,tempValue);
 var $173=($172|0)==0;
 if($173){label=69;break;}else{var $_0=$168;var $_01=$169;var $180=$135;label=70;break;}
 case 69: 
 var $175=(($170)|0);
 var $176=$170;
 var $177=HEAP32[(($176)>>2)];
 var $178=(($177+8)|0);
 var $179=HEAP32[(($178)>>2)];
 FUNCTION_TABLE[$179]($175);
 var $_0=$168;var $_01=$169;var $180=$135;label=70;break;
 case 70: 
 var $180;
 var $_01;
 var $_0;
 var $181=($180|0)==0;
 if($181){label=72;break;}else{label=71;break;}
 case 71: 
 _free($180);
 label=72;break;
 case 72: 
 var $183=($102|0)==0;
 if($183){var $_1212=$_01;var $_113=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($102);
 var $_1212=$_01;var $_113=$_0;label=74;break;
 case 74: 
 var $_113;
 var $_1212;
 var $185$0=$_113;
 var $185$1=0;
 var $186$0=$185$0;
 var $186$1=$_1212;
 ___resumeException($186$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($1)]=HEAP8[(5176)];HEAP8[((($1)+(1))|0)]=HEAP8[(5177)];HEAP8[((($1)+(2))|0)]=HEAP8[(5178)];HEAP8[((($1)+(3))|0)]=HEAP8[(5179)];HEAP8[((($1)+(4))|0)]=HEAP8[(5180)];HEAP8[((($1)+(5))|0)]=HEAP8[(5181)];
 var $2=(($__nar)|0);
 var $3=HEAP8[(19232)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19232);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;

 ___resumeException($12$0)
 case 6: 
 var $13=HEAP32[((17128)>>2)];
 var $14=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$13,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=(($__nar+$14)|0);
 var $16=(($__iob+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&176;
 if(($18|0)==32){ var $_0_i=$15;label=13;break;}else if(($18|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $20=HEAP8[($2)];
 if((($20<<24)>>24)==45|(($20<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $22=(($__nar+1)|0);
 var $_0_i=$22;label=13;break;
 case 9: 
 var $24=($14|0)>1;
 var $25=(($20<<24)>>24)==48;
 var $or_cond_i=$24&$25;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $27=(($__nar+1)|0);
 var $28=HEAP8[($27)];
 if((($28<<24)>>24)==120|(($28<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $30=(($__nar+2)|0);
 var $_0_i=$30;label=13;break;
 case 12: 
 var $_0_i=$2;label=13;break;
 case 13: 
 var $_0_i;
 var $32=(($__o)|0);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;

 var $33=(($__iob+28)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+4)|0);
 var $36=$35;
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+1,tempValue);
 var $38=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $39=HEAP32[((18672)>>2)];
 var $40=($39|0)==-1;
 if($40){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=(($__p_i_i_i_i)|0);
 HEAP32[(($42)>>2)]=18672;
 var $43=(($__p_i_i_i_i+4)|0);
 HEAP32[(($43)>>2)]=(202);
 var $44=(($__p_i_i_i_i+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $45=HEAP32[((18676)>>2)];
 var $46=((($45)-(1))|0);
 var $47=(($34+12)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($34+8)|0);
 var $51=$50;
 var $52=HEAP32[(($51)>>2)];
 var $53=$49;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($46>>>0);
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $58=(($52+($46<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=17;break;}else{label=19;break;}
 case 17: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 HEAP32[(($62)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $64=$59;
 var $65=(($34+4)|0);
 var $66=$65;
 var $67=(tempValue=HEAP32[(($66)>>2)],HEAP32[(($66)>>2)]=tempValue+-1,tempValue);
 var $68=($67|0)==0;
 if($68){label=20;break;}else{label=21;break;}
 case 20: 
 var $70=$34;
 var $71=$34;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($70);
 label=21;break;
 case 21: 
 var $75=$59;
 var $76=HEAP32[(($75)>>2)];
 var $77=(($76+32)|0);
 var $78=HEAP32[(($77)>>2)];
 var $79=FUNCTION_TABLE[$78]($64,$2,$15,$32);
 var $80=(($__o+$14)|0);
 var $81=($_0_i|0)==($15|0);
 if($81){var $__op_0=$80;label=26;break;}else{label=25;break;}
 case 22: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1); var $83$1 = tempRet0;
 var $84=(($34+4)|0);
 var $85=$84;
 var $86=(tempValue=HEAP32[(($85)>>2)],HEAP32[(($85)>>2)]=tempValue+-1,tempValue);
 var $87=($86|0)==0;
 if($87){label=23;break;}else{label=24;break;}
 case 23: 
 var $89=$34;
 var $90=$34;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+8)|0);
 var $93=HEAP32[(($92)>>2)];
 FUNCTION_TABLE[$93]($89);
 label=24;break;
 case 24: 
 ___resumeException($83$0)
 case 25: 
 var $95=$__nar;
 var $96=$_0_i;
 var $97=((($96)-($95))|0);
 var $98=(($__o+$97)|0);
 var $__op_0=$98;label=26;break;
 case 26: 
 var $__op_0;
 var $100=(($__s)|0);
 var $101=HEAP32[(($100)>>2)];
 __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$101,$32,$__op_0,$80,$__iob,$__fl);
 var $$etemp$3$0=37;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwb($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $__nm=(sp)+(24);
 var $2=(($__iob+4)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=$3&1;
 var $5=($4|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$this;
 var $8=HEAP32[(($7)>>2)];
 var $9=(($8+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($__s)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($1)|0);
 HEAP32[(($13)>>2)]=$12;
 var $14=($__v&1);
 FUNCTION_TABLE[$10]($agg_result,$this,$1,$__iob,$__fl,$14);
 label=37;break;
 case 3: 
 var $16=(($__iob+28)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17+4)|0);
 var $19=$18;
 var $20=(tempValue=HEAP32[(($19)>>2)],HEAP32[(($19)>>2)]=tempValue+1,tempValue);
 var $21=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $22=HEAP32[((18280)>>2)];
 var $23=($22|0)==-1;
 if($23){label=5;break;}else{label=4;break;}
 case 4: 
 var $25=(($__p_i_i_i_i)|0);
 HEAP32[(($25)>>2)]=18280;
 var $26=(($__p_i_i_i_i+4)|0);
 HEAP32[(($26)>>2)]=(202);
 var $27=(($__p_i_i_i_i+8)|0);
 HEAP32[(($27)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=29;break; }
 case 5: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $28=HEAP32[((18284)>>2)];
 var $29=((($28)-(1))|0);
 var $30=(($17+12)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=(($17+8)|0);
 var $34=$33;
 var $35=HEAP32[(($34)>>2)];
 var $36=$32;
 var $37=$35;
 var $38=((($36)-($37))|0);
 var $39=$38>>2;
 var $40=($39>>>0)>($29>>>0);
 if($40){label=6;break;}else{label=7;break;}
 case 6: 
 var $41=(($35+($29<<2))|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==0;
 if($43){label=7;break;}else{label=9;break;}
 case 7: 
 var $44=___cxa_allocate_exception(4);
 var $45=$44;
 HEAP32[(($45)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($44,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=29;break; }
 case 8: 
 throw "Reached an unreachable!";
 case 9: 
 var $47=$42;
 var $48=(($17+4)|0);
 var $49=$48;
 var $50=(tempValue=HEAP32[(($49)>>2)],HEAP32[(($49)>>2)]=tempValue+-1,tempValue);
 var $51=($50|0)==0;
 if($51){label=10;break;}else{label=11;break;}
 case 10: 
 var $53=$17;
 var $54=$17;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+8)|0);
 var $57=HEAP32[(($56)>>2)];
 FUNCTION_TABLE[$57]($53);
 label=11;break;
 case 11: 
 var $58=$42;
 var $59=HEAP32[(($58)>>2)];
 if($__v){label=12;break;}else{label=13;break;}
 case 12: 
 var $61=(($59+24)|0);
 var $62=HEAP32[(($61)>>2)];
 FUNCTION_TABLE[$62]($__nm,$47);
 label=14;break;
 case 13: 
 var $64=(($59+28)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($__nm,$47);
 label=14;break;
 case 14: 
 var $67=$__nm;
 var $68=HEAP8[($67)];
 var $69=$68&1;
 var $70=(($69<<24)>>24)==0;
 if($70){label=16;break;}else{label=15;break;}
 case 15: 
 var $72=(($__nm+8)|0);
 var $73=HEAP32[(($72)>>2)];
 var $_pre4=(($__nm+4)|0);
 var $_ph=$73;var $_pre_phi=$_pre4;var $_pre_phi6=$72;label=17;break;
 case 16: 
 var $75=(($__nm+4)|0);
 var $_pre5=(($__nm+8)|0);
 var $_ph=$75;var $_pre_phi=$75;var $_pre_phi6=$_pre5;label=17;break;
 case 17: 
 var $_pre_phi6;
 var $_pre_phi;
 var $_ph;
 var $76=(($__s)|0);
 var $78=$_ph;var $77=$68;label=18;break;
 case 18: 
 var $77;
 var $78;
 var $79=$77&1;
 var $80=(($79<<24)>>24)==0;
 if($80){label=20;break;}else{label=19;break;}
 case 19: 
 var $82=HEAP32[(($_pre_phi6)>>2)];
 var $83=HEAP32[(($_pre_phi)>>2)];
 var $88=$83;var $87=$82;label=21;break;
 case 20: 
 var $85=($77&255);
 var $86=$85>>>1;
 var $88=$86;var $87=$_pre_phi;label=21;break;
 case 21: 
 var $87;
 var $88;
 var $89=(($87+($88<<2))|0);
 var $90=($78|0)==($89|0);
 if($90){label=34;break;}else{label=22;break;}
 case 22: 
 var $92=HEAP32[(($78)>>2)];
 var $93=HEAP32[(($76)>>2)];
 var $94=($93|0)==0;
 if($94){label=28;break;}else{label=23;break;}
 case 23: 
 var $96=(($93+24)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($93+28)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($97|0)==($99|0);
 if($100){label=24;break;}else{label=25;break;}
 case 24: 
 var $102=$93;
 var $103=HEAP32[(($102)>>2)];
 var $104=(($103+52)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$105]($93,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$106;label=26;break; } else { label=31;break; }
 case 25: 
 var $108=(($97+4)|0);
 HEAP32[(($96)>>2)]=$108;
 HEAP32[(($97)>>2)]=$92;
 var $_0_i_i=$92;label=26;break;
 case 26: 
 var $_0_i_i;
 var $109=($_0_i_i|0)==-1;
 if($109){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($76)>>2)]=0;
 label=28;break;
 case 28: 
 var $111=(($78+4)|0);
 var $_pre=HEAP8[($67)];
 var $78=$111;var $77=$_pre;label=18;break;
 case 29: 
 var $113$0 = ___cxa_find_matching_catch(-1, -1); var $113$1 = tempRet0;
 var $114=$113$0;
 var $115=$113$1;
 var $116=(($17+4)|0);
 var $117=$116;
 var $118=(tempValue=HEAP32[(($117)>>2)],HEAP32[(($117)>>2)]=tempValue+-1,tempValue);
 var $119=($118|0)==0;
 if($119){label=30;break;}else{var $_0=$114;var $_01=$115;label=38;break;}
 case 30: 
 var $121=$17;
 var $122=$17;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+8)|0);
 var $125=HEAP32[(($124)>>2)];
 FUNCTION_TABLE[$125]($121);
 var $_0=$114;var $_01=$115;label=38;break;
 case 31: 
 var $127$0 = ___cxa_find_matching_catch(-1, -1); var $127$1 = tempRet0;
 var $128=$127$0;
 var $129=$127$1;
 var $130=HEAP8[($67)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){var $_0=$128;var $_01=$129;label=38;break;}else{label=32;break;}
 case 32: 
 var $134=(($__nm+8)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=($135|0)==0;
 if($136){var $_0=$128;var $_01=$129;label=38;break;}else{label=33;break;}
 case 33: 
 var $138=$135;
 _free($138);
 var $_0=$128;var $_01=$129;label=38;break;
 case 34: 
 var $140=HEAP32[(($76)>>2)];
 var $141=(($agg_result)|0);
 HEAP32[(($141)>>2)]=$140;
 if($80){label=37;break;}else{label=35;break;}
 case 35: 
 var $143=(($__nm+8)|0);
 var $144=HEAP32[(($143)>>2)];
 var $145=($144|0)==0;
 if($145){label=37;break;}else{label=36;break;}
 case 36: 
 var $147=$144;
 _free($147);
 label=37;break;
 case 37: 
 STACKTOP=sp;return;
 case 38: 
 var $_01;
 var $_0;
 var $148$0=$_0;
 var $148$1=0;
 var $149$0=$148$0;
 var $149$1=$_01;
 ___resumeException($149$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwl($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5168)];HEAP8[((($2)+(1))|0)]=HEAP8[(5169)];HEAP8[((($2)+(2))|0)]=HEAP8[(5170)];HEAP8[((($2)+(3))|0)]=HEAP8[(5171)];HEAP8[((($2)+(4))|0)]=HEAP8[(5172)];HEAP8[((($2)+(5))|0)]=HEAP8[(5173)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19232)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19232);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$30;

 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;

 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17128)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i1=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i1=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i1=$50;label=23;break;
 case 22: 
 var $_0_i1=$23;label=23;break;
 case 23: 
 var $_0_i1;
 var $52=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $53=(($__o)|0);
 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23,$_0_i1,$36,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((18664)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=18664;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(202);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$3);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((18668)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5224;
 ___cxa_throw($24,11720,(658));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((18280)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=18280;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(202);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$28);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((18284)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 HEAP32[(($50)>>2)]=5224;
 ___cxa_throw($49,11720,(658));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 var $56=$__grouping;
 var $57=HEAP8[($56)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=13;break;}else{label=12;break;}
 case 12: 
 var $61=(($__grouping+4)|0);
 var $62=HEAP32[(($61)>>2)];
 var $66=$62;label=14;break;
 case 13: 
 var $64=($57&255);
 var $65=$64>>>1;
 var $66=$65;label=14;break;
 case 14: 
 var $66;
 var $67=($66|0)==0;
 if($67){label=15;break;}else{label=23;break;}
 case 15: 
 var $69=$22;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+48)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($26,$__nb,$__ne,$__ob) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=18;break; }
 case 16: 
 var $74=$__ne;
 var $75=$__nb;
 var $76=((($74)-($75))|0);
 var $77=(($__ob+($76<<2))|0);
 HEAP32[(($__oe)>>2)]=$77;
 var $195=$77;label=49;break;
 case 17: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=19;break;
 case 19: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $79=HEAP8[($56)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=22;break;}else{label=20;break;}
 case 20: 
 var $83=(($__grouping+8)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=($84|0)==0;
 if($85){label=22;break;}else{label=21;break;}
 case 21: 
 _free($84);
 label=22;break;
 case 22: 
 ___resumeException($lpad_phi$0)
 case 23: 
 HEAP32[(($__oe)>>2)]=$__ob;
 var $88=HEAP8[($__nb)];
 if((($88<<24)>>24)==45|(($88<<24)>>24)==43){ label=24;break;}else{var $__nf_0=$__nb;label=26;break;}
 case 24: 
 var $90=$22;
 var $91=HEAP32[(($90)>>2)];
 var $92=(($91+44)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($26,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=18;break; }
 case 25: 
 var $95=(($__nb+1)|0);
 var $96=HEAP32[(($__oe)>>2)];
 var $97=(($96+4)|0);
 HEAP32[(($__oe)>>2)]=$97;
 HEAP32[(($96)>>2)]=$94;
 var $__nf_0=$95;label=26;break;
 case 26: 
 var $__nf_0;
 var $99=$__ne;
 var $100=$__nf_0;
 var $101=((($99)-($100))|0);
 var $102=($101|0)>1;
 if($102){label=27;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 27: 
 var $104=HEAP8[($__nf_0)];
 var $105=(($104<<24)>>24)==48;
 if($105){label=28;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 28: 
 var $107=(($__nf_0+1)|0);
 var $108=HEAP8[($107)];
 if((($108<<24)>>24)==120|(($108<<24)>>24)==88){ label=29;break;}else{var $__nf_1=$__nf_0;label=32;break;}
 case 29: 
 var $110=$22;
 var $111=HEAP32[(($110)>>2)];
 var $112=(($111+44)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=18;break; }
 case 30: 
 var $115=HEAP32[(($__oe)>>2)];
 var $116=(($115+4)|0);
 HEAP32[(($__oe)>>2)]=$116;
 HEAP32[(($115)>>2)]=$114;
 var $117=HEAP8[($107)];
 var $118=HEAP32[(($110)>>2)];
 var $119=(($118+44)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$120]($26,$117) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=18;break; }
 case 31: 
 var $122=(($__nf_0+2)|0);
 var $123=HEAP32[(($__oe)>>2)];
 var $124=(($123+4)|0);
 HEAP32[(($__oe)>>2)]=$124;
 HEAP32[(($123)>>2)]=$121;
 var $__nf_1=$122;label=32;break;
 case 32: 
 var $__nf_1;
 var $126=($__nf_1|0)==($__ne|0);
 if($126){label=35;break;}else{label=33;break;}
 case 33: 
 var $127=((($__ne)-(1))|0);
 var $128=($127>>>0)>($__nf_1>>>0);
 if($128){var $_012_i_i=$__nf_1;var $129=$127;label=34;break;}else{label=35;break;}
 case 34: 
 var $129;
 var $_012_i_i;
 var $130=HEAP8[($_012_i_i)];
 var $131=HEAP8[($129)];
 HEAP8[($_012_i_i)]=$131;
 HEAP8[($129)]=$130;
 var $132=(($_012_i_i+1)|0);
 var $133=((($129)-(1))|0);
 var $134=($132>>>0)<($133>>>0);
 if($134){var $_012_i_i=$132;var $129=$133;label=34;break;}else{label=35;break;}
 case 35: 
 var $135=$47;
 var $136=HEAP32[(($135)>>2)];
 var $137=(($136+16)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$138]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=18;break; }
 case 36: 
 var $140=($__nf_1>>>0)<($__ne>>>0);
 if($140){label=38;break;}else{label=37;break;}
 case 37: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $181=$_pre;label=46;break;
 case 38: 
 var $141=$__grouping;
 var $142=(($141+1)|0);
 var $143=$22;
 var $144=(($__grouping+4)|0);
 var $145=(($__grouping+8)|0);
 var $__dc_012=0;var $__dg_013=0;var $__p_014=$__nf_1;label=39;break;
 case 39: 
 var $__p_014;
 var $__dg_013;
 var $__dc_012;
 var $146=HEAP8[($56)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 var $149=HEAP32[(($145)>>2)];
 var $_=($148?$142:$149);
 var $150=(($_+$__dg_013)|0);
 var $151=HEAP8[($150)];
 var $152=(($151<<24)>>24)!=0;
 var $153=(($151<<24)>>24);
 var $154=($__dc_012|0)==($153|0);
 var $or_cond=$152&$154;
 if($or_cond){label=40;break;}else{var $__dg_1=$__dg_013;var $__dc_1=$__dc_012;label=44;break;}
 case 40: 
 var $156=HEAP32[(($__oe)>>2)];
 var $157=(($156+4)|0);
 HEAP32[(($__oe)>>2)]=$157;
 HEAP32[(($156)>>2)]=$139;
 var $158=HEAP8[($56)];
 var $159=$158&1;
 var $160=(($159<<24)>>24)==0;
 if($160){label=42;break;}else{label=41;break;}
 case 41: 
 var $162=HEAP32[(($144)>>2)];
 var $166=$162;label=43;break;
 case 42: 
 var $164=($158&255);
 var $165=$164>>>1;
 var $166=$165;label=43;break;
 case 43: 
 var $166;
 var $167=((($166)-(1))|0);
 var $168=($__dg_013>>>0)<($167>>>0);
 var $169=($168&1);
 var $___dg_0=((($169)+($__dg_013))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=44;break;
 case 44: 
 var $__dc_1;
 var $__dg_1;
 var $171=HEAP8[($__p_014)];
 var $172=HEAP32[(($143)>>2)];
 var $173=(($172+44)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($26,$171) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=17;break; }
 case 45: 
 var $176=HEAP32[(($__oe)>>2)];
 var $177=(($176+4)|0);
 HEAP32[(($__oe)>>2)]=$177;
 HEAP32[(($176)>>2)]=$175;
 var $178=((($__dc_1)+(1))|0);
 var $179=(($__p_014+1)|0);
 var $180=($179>>>0)<($__ne>>>0);
 if($180){var $__dc_012=$178;var $__dg_013=$__dg_1;var $__p_014=$179;label=39;break;}else{var $181=$177;label=46;break;}
 case 46: 
 var $181;
 var $182=$__nf_1;
 var $183=$__nb;
 var $184=((($182)-($183))|0);
 var $185=(($__ob+($184<<2))|0);
 var $186=($185|0)==($181|0);
 if($186){var $195=$181;label=49;break;}else{label=47;break;}
 case 47: 
 var $187=((($181)-(4))|0);
 var $188=($187>>>0)>($185>>>0);
 if($188){var $_012_i_i10=$185;var $189=$187;label=48;break;}else{var $195=$181;label=49;break;}
 case 48: 
 var $189;
 var $_012_i_i10;
 var $190=HEAP32[(($_012_i_i10)>>2)];
 var $191=HEAP32[(($189)>>2)];
 HEAP32[(($_012_i_i10)>>2)]=$191;
 HEAP32[(($189)>>2)]=$190;
 var $192=(($_012_i_i10+4)|0);
 var $193=((($189)-(4))|0);
 var $194=($192>>>0)<($193>>>0);
 if($194){var $_012_i_i10=$192;var $189=$193;label=48;break;}else{var $195=$181;label=49;break;}
 case 49: 
 var $195;
 var $196=($__np|0)==($__ne|0);
 if($196){var $storemerge=$195;label=51;break;}else{label=50;break;}
 case 50: 
 var $198=$__np;
 var $199=$__nb;
 var $200=((($198)-($199))|0);
 var $201=(($__ob+($200<<2))|0);
 var $storemerge=$201;label=51;break;
 case 51: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $203=HEAP8[($56)];
 var $204=$203&1;
 var $205=(($204<<24)>>24)==0;
 if($205){label=54;break;}else{label=52;break;}
 case 52: 
 var $207=(($__grouping+8)|0);
 var $208=HEAP32[(($207)>>2)];
 var $209=($208|0)==0;
 if($209){label=54;break;}else{label=53;break;}
 case 53: 
 _free($208);
 label=54;break;
 case 54: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$__s_0,$__ob,$__op,$__oe,$__iob,$__fl){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__sp=sp;
 var $1=($__s_0|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=(($agg_result)|0);
 HEAP32[(($3)>>2)]=0;
 label=44;break;
 case 3: 
 var $5=$__oe;
 var $6=$__ob;
 var $7=((($5)-($6))|0);
 var $8=$7>>2;
 var $9=(($__iob+12)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)>($8|0);
 var $12=((($10)-($8))|0);
 var $__ns_0=($11?$12:0);
 var $13=$__op;
 var $14=((($13)-($6))|0);
 var $15=$14>>2;
 var $16=($14|0)>0;
 if($16){label=4;break;}else{label=6;break;}
 case 4: 
 var $18=$__s_0;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+48)|0);
 var $21=HEAP32[(($20)>>2)];
 var $22=FUNCTION_TABLE[$21]($__s_0,$__ob,$15);
 var $23=($22|0)==($15|0);
 if($23){label=6;break;}else{label=5;break;}
 case 5: 
 var $25=(($agg_result)|0);
 HEAP32[(($25)>>2)]=0;
 label=44;break;
 case 6: 
 var $27=($__ns_0|0)>0;
 if($27){label=7;break;}else{label=40;break;}
 case 7: 
 var $29=($__ns_0>>>0)>1073741807;
 if($29){label=8;break;}else{label=9;break;}
 case 8: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 9: 
 var $32=($__ns_0>>>0)<2;
 if($32){label=10;break;}else{label=11;break;}
 case 10: 
 var $33=$__ns_0<<1;
 var $34=(($33)&255);
 var $35=$__sp;
 HEAP8[($35)]=$34;
 var $36=(($__sp+4)|0);
 var $__p_0_i1_ph=$36;label=23;break;
 case 11: 
 var $37=((($__ns_0)+(4))|0);
 var $38=$37&-4;
 var $39=$38<<2;
 var $40=($39|0)==0;
 var $_size_i=($40?1:$39);
 label=12;break;
 case 12: 
 var $42=_malloc($_size_i);
 var $43=($42|0)==0;
 if($43){label=13;break;}else{label=22;break;}
 case 13: 
 var $45=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $46=($45|0)==0;
 if($46){label=19;break;}else{label=14;break;}
 case 14: 
 var $48=$45;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$48]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=15;break; }
 case 15: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=17;break;
 case 16: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=17;break;
 case 17: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $50=$lpad_phi_i$1;
 var $51=($50|0)<0;
 if($51){label=18;break;}else{label=20;break;}
 case 18: 
 var $53=$lpad_phi_i$0;
 ___cxa_call_unexpected($53);
 throw "Reached an unreachable!";
 case 19: 
 var $55=___cxa_allocate_exception(4);
 var $56=$55;
 HEAP32[(($56)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($55,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=16;break; }
 case 20: 
 ___resumeException($lpad_phi_i$0)
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $60=$42;
 var $61=(($__sp+8)|0);
 HEAP32[(($61)>>2)]=$60;
 var $62=$38|1;
 var $63=(($__sp)|0);
 HEAP32[(($63)>>2)]=$62;
 var $64=(($__sp+4)|0);
 HEAP32[(($64)>>2)]=$__ns_0;
 var $65=($__ns_0|0)==0;
 if($65){var $__p_0_i2=$60;label=25;break;}else{var $__p_0_i1_ph=$60;label=23;break;}
 case 23: 
 var $__p_0_i1_ph;
 var $_012_i_i=$__ns_0;var $_03_i_i=$__p_0_i1_ph;label=24;break;
 case 24: 
 var $_03_i_i;
 var $_012_i_i;
 var $66=((($_012_i_i)-(1))|0);
 var $67=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=$__fl;
 var $68=($66|0)==0;
 if($68){var $__p_0_i2=$__p_0_i1_ph;label=25;break;}else{var $_012_i_i=$66;var $_03_i_i=$67;label=24;break;}
 case 25: 
 var $__p_0_i2;
 var $69=(($__p_0_i2+($__ns_0<<2))|0);
 HEAP32[(($69)>>2)]=0;
 var $70=$__sp;
 var $71=HEAP8[($70)];
 var $72=$71&1;
 var $73=(($72<<24)>>24)==0;
 if($73){label=27;break;}else{label=26;break;}
 case 26: 
 var $75=(($__sp+8)|0);
 var $76=HEAP32[(($75)>>2)];
 var $79=$76;label=28;break;
 case 27: 
 var $78=(($__sp+4)|0);
 var $79=$78;label=28;break;
 case 28: 
 var $79;
 var $80=$__s_0;
 var $81=HEAP32[(($80)>>2)];
 var $82=(($81+48)|0);
 var $83=HEAP32[(($82)>>2)];
 var $84=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$83]($__s_0,$79,$__ns_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=33;break; }
 case 29: 
 var $85=($84|0)==($__ns_0|0);
 if($85){label=37;break;}else{label=30;break;}
 case 30: 
 var $86=(($agg_result)|0);
 HEAP32[(($86)>>2)]=0;
 var $87=HEAP8[($70)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=44;break;}else{label=31;break;}
 case 31: 
 var $91=(($__sp+8)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){label=44;break;}else{label=32;break;}
 case 32: 
 var $95=$92;
 _free($95);
 label=44;break;
 case 33: 
 var $97$0 = ___cxa_find_matching_catch(-1, -1); var $97$1 = tempRet0;
 var $98=HEAP8[($70)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=36;break;}else{label=34;break;}
 case 34: 
 var $102=(($__sp+8)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=36;break;}else{label=35;break;}
 case 35: 
 var $106=$103;
 _free($106);
 label=36;break;
 case 36: 
 ___resumeException($97$0)
 case 37: 
 var $108=HEAP8[($70)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){label=40;break;}else{label=38;break;}
 case 38: 
 var $112=(($__sp+8)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($113|0)==0;
 if($114){label=40;break;}else{label=39;break;}
 case 39: 
 var $116=$113;
 _free($116);
 label=40;break;
 case 40: 
 var $117=((($5)-($13))|0);
 var $118=$117>>2;
 var $119=($117|0)>0;
 if($119){label=41;break;}else{label=43;break;}
 case 41: 
 var $121=$__s_0;
 var $122=HEAP32[(($121)>>2)];
 var $123=(($122+48)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=FUNCTION_TABLE[$124]($__s_0,$__op,$118);
 var $126=($125|0)==($118|0);
 if($126){label=43;break;}else{label=42;break;}
 case 42: 
 var $128=(($agg_result)|0);
 HEAP32[(($128)>>2)]=0;
 label=44;break;
 case 43: 
 HEAP32[(($9)>>2)]=0;
 var $130=(($agg_result)|0);
 HEAP32[(($130)>>2)]=$__s_0;
 label=44;break;
 case 44: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwx($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+224)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(200);
 var $__oe=(sp)+(208);
 var $1=(sp)+(216);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $15=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=100;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19232)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19232);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17128)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,22,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=$__o;
 var $$etemp$3$0=164;
 var $$etemp$3$1=0;

 var $54=(($__o)|0);
 var $55=(($__iob+28)|0);
 var $56=(($1)|0);
 var $57=HEAP32[(($55)>>2)];
 var $58=$57;
 HEAP32[(($56)>>2)]=$58;
 var $59=(($57+4)|0);
 var $60=$59;
 var $61=(tempValue=HEAP32[(($60)>>2)],HEAP32[(($60)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $63=HEAP32[(($56)>>2)];
 var $64=(($63+4)|0);
 var $65=(tempValue=HEAP32[(($64)>>2)],HEAP32[(($64)>>2)]=tempValue+-1,tempValue);
 var $66=($65|0)==0;
 if($66){label=25;break;}else{label=26;break;}
 case 25: 
 var $68=(($63)|0);
 var $69=$63;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+8)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68);
 label=26;break;
 case 26: 
 var $73=(($__s)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=HEAP32[(($__op)>>2)];
 var $76=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$74,$54,$75,$76,$__iob,$__fl);
 var $$etemp$4$0=164;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 27: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1); var $78$1 = tempRet0;
 var $79=HEAP32[(($56)>>2)];
 var $80=(($79+4)|0);
 var $81=(tempValue=HEAP32[(($80)>>2)],HEAP32[(($80)>>2)]=tempValue+-1,tempValue);
 var $82=($81|0)==0;
 if($82){label=28;break;}else{label=29;break;}
 case 28: 
 var $84=(($79)|0);
 var $85=$79;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+8)|0);
 var $88=HEAP32[(($87)>>2)];
 FUNCTION_TABLE[$88]($84);
 label=29;break;
 case 29: 
 ___resumeException($78$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwm($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+136)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(24);
 var $__op=(sp)+(112);
 var $__oe=(sp)+(120);
 var $1=(sp)+(128);
 var $2=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($2)]=HEAP8[(5168)];HEAP8[((($2)+(1))|0)]=HEAP8[(5169)];HEAP8[((($2)+(2))|0)]=HEAP8[(5170)];HEAP8[((($2)+(3))|0)]=HEAP8[(5171)];HEAP8[((($2)+(4))|0)]=HEAP8[(5172)];HEAP8[((($2)+(5))|0)]=HEAP8[(5173)];
 var $3=(($__fmt+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($__fmt+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 HEAP8[($_13_i_ph)]=108;
 var $scevgep=(($_13_i_ph+1)|0);
 var $15=$5&74;
 if(($15|0)==64){ label=6;break;}else if(($15|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $18=$5&16384;
 var $19=($18|0)==0;
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $23=(($__nar)|0);
 var $24=HEAP8[(19232)];
 var $25=(($24<<24)>>24)==0;
 if($25){label=12;break;}else{label=16;break;}
 case 12: 
 var $27=___cxa_guard_acquire(19232);
 var $28=($27|0)==0;
 if($28){label=16;break;}else{label=13;break;}
 case 13: 
 var $30=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$30;

 label=16;break;
 case 15: 
 var $33$0 = ___cxa_find_matching_catch(-1, -1); var $33$1 = tempRet0;

 ___resumeException($33$0)
 case 16: 
 var $34=HEAP32[((17128)>>2)];
 var $35=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($23,12,$34,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $36=(($__nar+$35)|0);
 var $37=HEAP32[(($4)>>2)];
 var $38=$37&176;
 if(($38|0)==16){ label=17;break;}else if(($38|0)==32){ var $_0_i1=$36;label=23;break;}else{label=22;break;}
 case 17: 
 var $40=HEAP8[($23)];
 if((($40<<24)>>24)==45|(($40<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $42=(($__nar+1)|0);
 var $_0_i1=$42;label=23;break;
 case 19: 
 var $44=($35|0)>1;
 var $45=(($40<<24)>>24)==48;
 var $or_cond_i=$44&$45;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $47=(($__nar+1)|0);
 var $48=HEAP8[($47)];
 if((($48<<24)>>24)==120|(($48<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $50=(($__nar+2)|0);
 var $_0_i1=$50;label=23;break;
 case 22: 
 var $_0_i1=$23;label=23;break;
 case 23: 
 var $_0_i1;
 var $52=$__o;
 var $$etemp$0$0=84;
 var $$etemp$0$1=0;

 var $53=(($__o)|0);
 var $54=(($__iob+28)|0);
 var $55=(($1)|0);
 var $56=HEAP32[(($54)>>2)];
 var $57=$56;
 HEAP32[(($55)>>2)]=$57;
 var $58=(($56+4)|0);
 var $59=$58;
 var $60=(tempValue=HEAP32[(($59)>>2)],HEAP32[(($59)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($23,$_0_i1,$36,$53,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $62=HEAP32[(($55)>>2)];
 var $63=(($62+4)|0);
 var $64=(tempValue=HEAP32[(($63)>>2)],HEAP32[(($63)>>2)]=tempValue+-1,tempValue);
 var $65=($64|0)==0;
 if($65){label=25;break;}else{label=26;break;}
 case 25: 
 var $67=(($62)|0);
 var $68=$62;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+8)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($67);
 label=26;break;
 case 26: 
 var $72=(($__s)|0);
 var $73=HEAP32[(($72)>>2)];
 var $74=HEAP32[(($__op)>>2)];
 var $75=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$73,$53,$74,$75,$__iob,$__fl);
 var $$etemp$1$0=84;
 var $$etemp$1$1=0;

 STACKTOP=sp;return;
 case 27: 
 var $77$0 = ___cxa_find_matching_catch(-1, -1); var $77$1 = tempRet0;
 var $78=HEAP32[(($55)>>2)];
 var $79=(($78+4)|0);
 var $80=(tempValue=HEAP32[(($79)>>2)],HEAP32[(($79)>>2)]=tempValue+-1,tempValue);
 var $81=($80|0)==0;
 if($81){label=28;break;}else{label=29;break;}
 case 28: 
 var $83=(($78)|0);
 var $84=$78;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+8)|0);
 var $87=HEAP32[(($86)>>2)];
 FUNCTION_TABLE[$87]($83);
 label=29;break;
 case 29: 
 ___resumeException($77$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwy($agg_result,$this,$__s,$__iob,$__fl,$__v$0,$__v$1){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+232)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__o=(sp)+(32);
 var $__op=(sp)+(208);
 var $__oe=(sp)+(216);
 var $1=(sp)+(224);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $2=$__fmt;
 var $3=(($2+1)|0);
 var $4=(($__iob+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&2048;
 var $7=($6|0)==0;
 if($7){var $_0_i=$3;label=3;break;}else{label=2;break;}
 case 2: 
 var $9=(($2+2)|0);
 HEAP8[($3)]=43;
 var $_0_i=$9;label=3;break;
 case 3: 
 var $_0_i;
 var $11=$5&512;
 var $12=($11|0)==0;
 if($12){var $_13_i_ph=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $14=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_13_i_ph=$14;label=5;break;
 case 5: 
 var $_13_i_ph;
 var $15=(($_13_i_ph+1)|0);
 HEAP8[($_13_i_ph)]=108;
 HEAP8[($15)]=108;
 var $scevgep=(($_13_i_ph+2)|0);
 var $16=$5&74;
 if(($16|0)==64){ label=6;break;}else if(($16|0)==8){ label=7;break;}else{label=10;break;}
 case 6: 
 HEAP8[($scevgep)]=111;
 label=11;break;
 case 7: 
 var $19=$5&16384;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=88;
 label=11;break;
 case 9: 
 HEAP8[($scevgep)]=120;
 label=11;break;
 case 10: 
 HEAP8[($scevgep)]=117;
 label=11;break;
 case 11: 
 var $24=(($__nar)|0);
 var $25=HEAP8[(19232)];
 var $26=(($25<<24)>>24)==0;
 if($26){label=12;break;}else{label=16;break;}
 case 12: 
 var $28=___cxa_guard_acquire(19232);
 var $29=($28|0)==0;
 if($29){label=16;break;}else{label=13;break;}
 case 13: 
 var $31=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=15;break; }
 case 14: 
 HEAP32[((17128)>>2)]=$31;

 label=16;break;
 case 15: 
 var $34$0 = ___cxa_find_matching_catch(-1, -1); var $34$1 = tempRet0;

 ___resumeException($34$0)
 case 16: 
 var $35=HEAP32[((17128)>>2)];
 var $36=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($24,23,$35,$2,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v$0,HEAP32[(((tempVarArgs)+(8))>>2)]=$__v$1,tempVarArgs)); STACKTOP=tempVarArgs;
 var $37=(($__nar+$36)|0);
 var $38=HEAP32[(($4)>>2)];
 var $39=$38&176;
 if(($39|0)==16){ label=17;break;}else if(($39|0)==32){ var $_0_i1=$37;label=23;break;}else{label=22;break;}
 case 17: 
 var $41=HEAP8[($24)];
 if((($41<<24)>>24)==45|(($41<<24)>>24)==43){ label=18;break;}else{label=19;break;}
 case 18: 
 var $43=(($__nar+1)|0);
 var $_0_i1=$43;label=23;break;
 case 19: 
 var $45=($36|0)>1;
 var $46=(($41<<24)>>24)==48;
 var $or_cond_i=$45&$46;
 if($or_cond_i){label=20;break;}else{label=22;break;}
 case 20: 
 var $48=(($__nar+1)|0);
 var $49=HEAP8[($48)];
 if((($49<<24)>>24)==120|(($49<<24)>>24)==88){ label=21;break;}else{label=22;break;}
 case 21: 
 var $51=(($__nar+2)|0);
 var $_0_i1=$51;label=23;break;
 case 22: 
 var $_0_i1=$24;label=23;break;
 case 23: 
 var $_0_i1;
 var $53=$__o;
 var $$etemp$3$0=172;
 var $$etemp$3$1=0;

 var $54=(($__o)|0);
 var $55=(($__iob+28)|0);
 var $56=(($1)|0);
 var $57=HEAP32[(($55)>>2)];
 var $58=$57;
 HEAP32[(($56)>>2)]=$58;
 var $59=(($57+4)|0);
 var $60=$59;
 var $61=(tempValue=HEAP32[(($60)>>2)],HEAP32[(($60)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE21__widen_and_group_intEPcS2_S2_PwRS3_S4_RKNS_6localeE($24,$_0_i1,$37,$54,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=27;break; }
 case 24: 
 var $63=HEAP32[(($56)>>2)];
 var $64=(($63+4)|0);
 var $65=(tempValue=HEAP32[(($64)>>2)],HEAP32[(($64)>>2)]=tempValue+-1,tempValue);
 var $66=($65|0)==0;
 if($66){label=25;break;}else{label=26;break;}
 case 25: 
 var $68=(($63)|0);
 var $69=$63;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+8)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($68);
 label=26;break;
 case 26: 
 var $73=(($__s)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=HEAP32[(($__op)>>2)];
 var $76=HEAP32[(($__oe)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$74,$54,$75,$76,$__iob,$__fl);
 var $$etemp$4$0=172;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 27: 
 var $78$0 = ___cxa_find_matching_catch(-1, -1); var $78$1 = tempRet0;
 var $79=HEAP32[(($56)>>2)];
 var $80=(($79+4)|0);
 var $81=(tempValue=HEAP32[(($80)>>2)],HEAP32[(($80)>>2)]=tempValue+-1,tempValue);
 var $82=($81|0)==0;
 if($82){label=28;break;}else{label=29;break;}
 case 28: 
 var $84=(($79)|0);
 var $85=$79;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+8)|0);
 var $88=HEAP32[(($87)>>2)];
 FUNCTION_TABLE[$88]($84);
 label=29;break;
 case 29: 
 ___resumeException($78$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwd($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($21)]=70;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 9: 
 HEAP8[($21)]=102;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($21)]=69;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 12: 
 HEAP8[($21)]=101;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 13: 
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($_1_i)]=65;
 var $specify_precision_0_off0_ph_i10=0;label=19;break;
 case 15: 
 HEAP8[($_1_i)]=97;
 var $specify_precision_0_off0_ph_i10=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($21)]=71;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 18: 
 HEAP8[($21)]=103;
 var $specify_precision_0_off0_ph_i10=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i10;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19232)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19232);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17128)>>2)]=$49;

 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;

 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17128)>>2)];
 if($specify_precision_0_off0_ph_i10){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre17=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $104=0;var $103=$_pre17;label=47;break;
 case 29: 
 var $63=HEAP8[(19232)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i10){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19232);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17128)>>2)]=$70;

 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;

 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17128)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1215=$82;var $_116=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19232);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17128)>>2)]=$88;

 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;

 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17128)>>2)];
 var $94=(($__iob+8)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$95,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$96;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $98=HEAP32[(($__nb)>>2)];
 var $99=($98|0)==0;
 if($99){label=45;break;}else{var $__nc_2=$__nc_1;var $104=$98;var $103=$98;label=47;break;}
 case 45: 
 var $101=___cxa_allocate_exception(4);
 var $102=$101;
 HEAP32[(($102)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($101,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $103;
 var $104;
 var $__nc_2;
 var $105=(($103+$__nc_2)|0);
 var $106=HEAP32[(($5)>>2)];
 var $107=$106&176;
 if(($107|0)==16){ label=48;break;}else if(($107|0)==32){ var $_0_i7=$105;label=54;break;}else{label=53;break;}
 case 48: 
 var $109=HEAP8[($103)];
 if((($109<<24)>>24)==45|(($109<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $111=(($103+1)|0);
 var $_0_i7=$111;label=54;break;
 case 50: 
 var $113=($__nc_2|0)>1;
 var $114=(($109<<24)>>24)==48;
 var $or_cond_i=$113&$114;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $116=(($103+1)|0);
 var $117=HEAP8[($116)];
 if((($117<<24)>>24)==120|(($117<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $119=(($103+2)|0);
 var $_0_i7=$119;label=54;break;
 case 53: 
 var $_0_i7=$103;label=54;break;
 case 54: 
 var $_0_i7;
 var $121=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $122=(($__o)|0);
 var $123=($103|0)==($42|0);
 if($123){var $__ob_0=$122;var $139=0;var $138=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $125=$__nc_2<<3;
 var $126=_malloc($125);
 var $127=$126;
 var $128=($126|0)==0;
 if($128){label=56;break;}else{var $__ob_0=$127;var $139=$127;var $138=$103;label=59;break;}
 case 56: 
 var $130=___cxa_allocate_exception(4);
 var $131=$130;
 HEAP32[(($131)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($130,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $133=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $133;
 var $134$0 = ___cxa_find_matching_catch(-1, -1); var $134$1 = tempRet0;
 var $135=$134$0;
 var $136=$134$1;
 var $_0=$135;var $_01=$136;var $185=$133;label=70;break;
 case 59: 
 var $138;
 var $139;
 var $__ob_0;
 var $140=(($__iob+28)|0);
 var $141=(($1)|0);
 var $142=HEAP32[(($140)>>2)];
 var $143=$142;
 HEAP32[(($141)>>2)]=$143;
 var $144=(($142+4)|0);
 var $145=$144;
 var $146=(tempValue=HEAP32[(($145)>>2)],HEAP32[(($145)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($138,$_0_i7,$105,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $148=HEAP32[(($141)>>2)];
 var $149=(($148+4)|0);
 var $150=(tempValue=HEAP32[(($149)>>2)],HEAP32[(($149)>>2)]=tempValue+-1,tempValue);
 var $151=($150|0)==0;
 if($151){label=61;break;}else{label=62;break;}
 case 61: 
 var $153=(($148)|0);
 var $154=$148;
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+8)|0);
 var $157=HEAP32[(($156)>>2)];
 FUNCTION_TABLE[$157]($153);
 label=62;break;
 case 62: 
 var $158=(($__s)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=HEAP32[(($__op)>>2)];
 var $161=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$159,$__ob_0,$160,$161,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $133=$139;label=58;break; }
 case 63: 
 var $163=(($2)|0);
 var $164=HEAP32[(($163)>>2)];
 HEAP32[(($158)>>2)]=$164;
 var $165=(($agg_result)|0);
 HEAP32[(($165)>>2)]=$164;
 var $166=($139|0)==0;
 if($166){label=65;break;}else{label=64;break;}
 case 64: 
 var $168=$139;
 _free($168);
 label=65;break;
 case 65: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $169=($104|0)==0;
 if($169){label=67;break;}else{label=66;break;}
 case 66: 
 _free($104);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $172$0 = ___cxa_find_matching_catch(-1, -1); var $172$1 = tempRet0;
 var $173=$172$0;
 var $174=$172$1;
 var $175=HEAP32[(($141)>>2)];
 var $176=(($175+4)|0);
 var $177=(tempValue=HEAP32[(($176)>>2)],HEAP32[(($176)>>2)]=tempValue+-1,tempValue);
 var $178=($177|0)==0;
 if($178){label=69;break;}else{var $_0=$173;var $_01=$174;var $185=$139;label=70;break;}
 case 69: 
 var $180=(($175)|0);
 var $181=$175;
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+8)|0);
 var $184=HEAP32[(($183)>>2)];
 FUNCTION_TABLE[$184]($180);
 var $_0=$173;var $_01=$174;var $185=$139;label=70;break;
 case 70: 
 var $185;
 var $_01;
 var $_0;
 var $186=($185|0)==0;
 if($186){label=72;break;}else{label=71;break;}
 case 71: 
 var $188=$185;
 _free($188);
 label=72;break;
 case 72: 
 var $189=($104|0)==0;
 if($189){var $_1215=$_01;var $_116=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($104);
 var $_1215=$_01;var $_116=$_0;label=74;break;
 case 74: 
 var $_116;
 var $_1215;
 var $191$0=$_116;
 var $191$1=0;
 var $192$0=$191$0;
 var $192$1=$_1215;
 ___resumeException($192$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($__nb,$__np,$__ne,$__ob,$__op,$__oe,$__loc){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+48)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i1=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $__grouping=(sp)+(32);
 var $1=(($__loc)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $4=HEAP32[((18664)>>2)];
 var $5=($4|0)==-1;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__p_i_i_i_i)|0);
 HEAP32[(($7)>>2)]=18664;
 var $8=(($__p_i_i_i_i+4)|0);
 HEAP32[(($8)>>2)]=(202);
 var $9=(($__p_i_i_i_i+8)|0);
 HEAP32[(($9)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$3);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $10=HEAP32[((18668)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($2+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($2+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5224;
 ___cxa_throw($24,11720,(658));
 throw "Reached an unreachable!";
 case 6: 
 var $26=$22;
 var $27=HEAP32[(($1)>>2)];
 var $28=$__p_i_i_i_i1;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $29=HEAP32[((18280)>>2)];
 var $30=($29|0)==-1;
 if($30){label=8;break;}else{label=7;break;}
 case 7: 
 var $32=(($__p_i_i_i_i1)|0);
 HEAP32[(($32)>>2)]=18280;
 var $33=(($__p_i_i_i_i1+4)|0);
 HEAP32[(($33)>>2)]=(202);
 var $34=(($__p_i_i_i_i1+8)|0);
 HEAP32[(($34)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$28);
 label=8;break;
 case 8: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $35=HEAP32[((18284)>>2)];
 var $36=((($35)-(1))|0);
 var $37=(($27+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($27+8)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$38;
 var $42=$40;
 var $43=((($41)-($42))|0);
 var $44=$43>>2;
 var $45=($44>>>0)>($36>>>0);
 if($45){label=9;break;}else{label=10;break;}
 case 9: 
 var $46=(($40+($36<<2))|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=($47|0)==0;
 if($48){label=10;break;}else{label=11;break;}
 case 10: 
 var $49=___cxa_allocate_exception(4);
 var $50=$49;
 HEAP32[(($50)>>2)]=5224;
 ___cxa_throw($49,11720,(658));
 throw "Reached an unreachable!";
 case 11: 
 var $51=$47;
 var $52=$47;
 var $53=HEAP32[(($52)>>2)];
 var $54=(($53+20)|0);
 var $55=HEAP32[(($54)>>2)];
 FUNCTION_TABLE[$55]($__grouping,$51);
 HEAP32[(($__oe)>>2)]=$__ob;
 var $56=HEAP8[($__nb)];
 if((($56<<24)>>24)==45|(($56<<24)>>24)==43){ label=12;break;}else{var $__nf_0=$__nb;label=23;break;}
 case 12: 
 var $58=$22;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($26,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=18;break; }
 case 13: 
 var $63=(($__nb+1)|0);
 var $64=HEAP32[(($__oe)>>2)];
 var $65=(($64+4)|0);
 HEAP32[(($__oe)>>2)]=$65;
 HEAP32[(($64)>>2)]=$62;
 var $__nf_0=$63;label=23;break;
 case 14: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit$1;var $eh_lpad_body$0=$lpad_loopexit$0;label=19;break;
 case 15: 
 var $lpad_loopexit21$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit21$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit21$1;var $eh_lpad_body$0=$lpad_loopexit21$0;label=19;break;
 case 16: 
 var $lpad_loopexit29$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit29$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit29$1;var $eh_lpad_body$0=$lpad_loopexit29$0;label=19;break;
 case 17: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_loopexit37$1;var $eh_lpad_body$0=$lpad_loopexit37$0;label=19;break;
 case 18: 
 var $lpad_nonloopexit38$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit38$1 = tempRet0;
 var $eh_lpad_body$1=$lpad_nonloopexit38$1;var $eh_lpad_body$0=$lpad_nonloopexit38$0;label=19;break;
 case 19: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $66=$__grouping;
 var $67=HEAP8[($66)];
 var $68=$67&1;
 var $69=(($68<<24)>>24)==0;
 if($69){label=22;break;}else{label=20;break;}
 case 20: 
 var $71=(($__grouping+8)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=($72|0)==0;
 if($73){label=22;break;}else{label=21;break;}
 case 21: 
 _free($72);
 label=22;break;
 case 22: 
 ___resumeException($eh_lpad_body$0)
 case 23: 
 var $__nf_0;
 var $76=$__ne;
 var $77=$__nf_0;
 var $78=((($76)-($77))|0);
 var $79=($78|0)>1;
 if($79){label=25;break;}else{label=24;break;}
 case 24: 
 var $80=($__nf_0>>>0)<($__ne>>>0);
 if($80){var $__ns_133=$__nf_0;label=39;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$__nf_0;label=46;break;}
 case 25: 
 var $82=HEAP8[($__nf_0)];
 var $83=(($82<<24)>>24)==48;
 if($83){label=26;break;}else{label=24;break;}
 case 26: 
 var $85=(($__nf_0+1)|0);
 var $86=HEAP8[($85)];
 if((($86<<24)>>24)==120|(($86<<24)>>24)==88){ label=27;break;}else{label=24;break;}
 case 27: 
 var $88=$22;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+44)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$91]($26,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=18;break; }
 case 28: 
 var $93=HEAP32[(($__oe)>>2)];
 var $94=(($93+4)|0);
 HEAP32[(($__oe)>>2)]=$94;
 HEAP32[(($93)>>2)]=$92;
 var $95=(($__nf_0+2)|0);
 var $96=HEAP8[($85)];
 var $97=HEAP32[(($88)>>2)];
 var $98=(($97+44)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$99]($26,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=18;break; }
 case 29: 
 var $101=HEAP32[(($__oe)>>2)];
 var $102=(($101+4)|0);
 HEAP32[(($__oe)>>2)]=$102;
 HEAP32[(($101)>>2)]=$100;
 var $103=($95>>>0)<($__ne>>>0);
 if($103){var $__ns_042=$95;label=31;break;}else{var $__nf_1=$95;var $__ns_2=$95;label=46;break;}
 case 30: 
 var $105=($123>>>0)<($__ne>>>0);
 if($105){var $__ns_042=$123;label=31;break;}else{var $__nf_1=$95;var $__ns_2=$123;label=46;break;}
 case 31: 
 var $__ns_042;
 var $106=HEAP8[($__ns_042)];
 var $107=HEAP8[(19232)];
 var $108=(($107<<24)>>24)==0;
 if($108){label=32;break;}else{label=36;break;}
 case 32: 
 var $110=___cxa_guard_acquire(19232);
 var $111=($110|0)==0;
 if($111){label=36;break;}else{label=33;break;}
 case 33: 
 var $113=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=35;break; }
 case 34: 
 HEAP32[((17128)>>2)]=$113;

 label=36;break;
 case 35: 
 var $116$0 = ___cxa_find_matching_catch(-1, -1); var $116$1 = tempRet0;

 var $eh_lpad_body$1=$116$1;var $eh_lpad_body$0=$116$0;label=19;break;
 case 36: 
 var $118=HEAP32[((17128)>>2)];
 var $119=(($106<<24)>>24);
 var $120=(function() { try { __THREW__ = 0; return _isxdigit_l($119,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=17;break; }
 case 37: 
 var $122=($120|0)==0;
 var $123=(($__ns_042+1)|0);
 if($122){var $__nf_1=$95;var $__ns_2=$__ns_042;label=46;break;}else{label=30;break;}
 case 38: 
 var $125=($143>>>0)<($__ne>>>0);
 if($125){var $__ns_133=$143;label=39;break;}else{var $__nf_1=$__nf_0;var $__ns_2=$143;label=46;break;}
 case 39: 
 var $__ns_133;
 var $126=HEAP8[($__ns_133)];
 var $127=HEAP8[(19232)];
 var $128=(($127<<24)>>24)==0;
 if($128){label=40;break;}else{label=44;break;}
 case 40: 
 var $130=___cxa_guard_acquire(19232);
 var $131=($130|0)==0;
 if($131){label=44;break;}else{label=41;break;}
 case 41: 
 var $133=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=43;break; }
 case 42: 
 HEAP32[((17128)>>2)]=$133;

 label=44;break;
 case 43: 
 var $136$0 = ___cxa_find_matching_catch(-1, -1); var $136$1 = tempRet0;

 var $eh_lpad_body$1=$136$1;var $eh_lpad_body$0=$136$0;label=19;break;
 case 44: 
 var $138=HEAP32[((17128)>>2)];
 var $139=(($126<<24)>>24);
 var $140=(function() { try { __THREW__ = 0; return _isdigit_l($139,$138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=16;break; }
 case 45: 
 var $142=($140|0)==0;
 var $143=(($__ns_133+1)|0);
 if($142){var $__nf_1=$__nf_0;var $__ns_2=$__ns_133;label=46;break;}else{label=38;break;}
 case 46: 
 var $__ns_2;
 var $__nf_1;
 var $144=$__grouping;
 var $145=HEAP8[($144)];
 var $146=$145&1;
 var $147=(($146<<24)>>24)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 var $149=(($__grouping+4)|0);
 var $150=HEAP32[(($149)>>2)];
 var $154=$150;label=49;break;
 case 48: 
 var $152=($145&255);
 var $153=$152>>>1;
 var $154=$153;label=49;break;
 case 49: 
 var $154;
 var $155=($154|0)==0;
 if($155){label=50;break;}else{label=52;break;}
 case 50: 
 var $157=HEAP32[(($__oe)>>2)];
 var $158=$22;
 var $159=HEAP32[(($158)>>2)];
 var $160=(($159+48)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$161]($26,$__nf_1,$__ns_2,$157) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=18;break; }
 case 51: 
 var $163=$__ns_2;
 var $164=$__nf_1;
 var $165=((($163)-($164))|0);
 var $166=HEAP32[(($__oe)>>2)];
 var $167=(($166+($165<<2))|0);
 HEAP32[(($__oe)>>2)]=$167;
 var $238=$167;label=69;break;
 case 52: 
 var $169=($__nf_1|0)==($__ns_2|0);
 if($169){label=55;break;}else{label=53;break;}
 case 53: 
 var $170=((($__ns_2)-(1))|0);
 var $171=($170>>>0)>($__nf_1>>>0);
 if($171){var $_012_i_i=$__nf_1;var $172=$170;label=54;break;}else{label=55;break;}
 case 54: 
 var $172;
 var $_012_i_i;
 var $173=HEAP8[($_012_i_i)];
 var $174=HEAP8[($172)];
 HEAP8[($_012_i_i)]=$174;
 HEAP8[($172)]=$173;
 var $175=(($_012_i_i+1)|0);
 var $176=((($172)-(1))|0);
 var $177=($175>>>0)<($176>>>0);
 if($177){var $_012_i_i=$175;var $172=$176;label=54;break;}else{label=55;break;}
 case 55: 
 var $178=$47;
 var $179=HEAP32[(($178)>>2)];
 var $180=(($179+16)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=18;break; }
 case 56: 
 var $183=($__nf_1>>>0)<($__ns_2>>>0);
 if($183){label=58;break;}else{label=57;break;}
 case 57: 
 var $_pre=HEAP32[(($__oe)>>2)];
 var $224=$_pre;label=66;break;
 case 58: 
 var $184=$__grouping;
 var $185=(($184+1)|0);
 var $186=(($__grouping+4)|0);
 var $187=(($__grouping+8)|0);
 var $188=$22;
 var $__dc_024=0;var $__dg_025=0;var $__p_026=$__nf_1;label=59;break;
 case 59: 
 var $__p_026;
 var $__dg_025;
 var $__dc_024;
 var $189=HEAP8[($144)];
 var $190=$189&1;
 var $191=(($190<<24)>>24)==0;
 var $192=HEAP32[(($187)>>2)];
 var $_=($191?$185:$192);
 var $193=(($_+$__dg_025)|0);
 var $194=HEAP8[($193)];
 var $195=(($194<<24)>>24)>0;
 var $196=(($194<<24)>>24);
 var $197=($__dc_024|0)==($196|0);
 var $or_cond=$195&$197;
 if($or_cond){label=60;break;}else{var $__dg_1=$__dg_025;var $__dc_1=$__dc_024;label=64;break;}
 case 60: 
 var $199=HEAP32[(($__oe)>>2)];
 var $200=(($199+4)|0);
 HEAP32[(($__oe)>>2)]=$200;
 HEAP32[(($199)>>2)]=$182;
 var $201=HEAP8[($144)];
 var $202=$201&1;
 var $203=(($202<<24)>>24)==0;
 if($203){label=62;break;}else{label=61;break;}
 case 61: 
 var $205=HEAP32[(($186)>>2)];
 var $209=$205;label=63;break;
 case 62: 
 var $207=($201&255);
 var $208=$207>>>1;
 var $209=$208;label=63;break;
 case 63: 
 var $209;
 var $210=((($209)-(1))|0);
 var $211=($__dg_025>>>0)<($210>>>0);
 var $212=($211&1);
 var $___dg_0=((($212)+($__dg_025))|0);
 var $__dg_1=$___dg_0;var $__dc_1=0;label=64;break;
 case 64: 
 var $__dc_1;
 var $__dg_1;
 var $214=HEAP8[($__p_026)];
 var $215=HEAP32[(($188)>>2)];
 var $216=(($215+44)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$217]($26,$214) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=65;break; } else { label=15;break; }
 case 65: 
 var $219=HEAP32[(($__oe)>>2)];
 var $220=(($219+4)|0);
 HEAP32[(($__oe)>>2)]=$220;
 HEAP32[(($219)>>2)]=$218;
 var $221=((($__dc_1)+(1))|0);
 var $222=(($__p_026+1)|0);
 var $223=($222>>>0)<($__ns_2>>>0);
 if($223){var $__dc_024=$221;var $__dg_025=$__dg_1;var $__p_026=$222;label=59;break;}else{var $224=$220;label=66;break;}
 case 66: 
 var $224;
 var $225=$__nf_1;
 var $226=$__nb;
 var $227=((($225)-($226))|0);
 var $228=(($__ob+($227<<2))|0);
 var $229=($228|0)==($224|0);
 if($229){var $238=$224;label=69;break;}else{label=67;break;}
 case 67: 
 var $230=((($224)-(4))|0);
 var $231=($230>>>0)>($228>>>0);
 if($231){var $_012_i_i13=$228;var $232=$230;label=68;break;}else{var $238=$224;label=69;break;}
 case 68: 
 var $232;
 var $_012_i_i13;
 var $233=HEAP32[(($_012_i_i13)>>2)];
 var $234=HEAP32[(($232)>>2)];
 HEAP32[(($_012_i_i13)>>2)]=$234;
 HEAP32[(($232)>>2)]=$233;
 var $235=(($_012_i_i13+4)|0);
 var $236=((($232)-(4))|0);
 var $237=($235>>>0)<($236>>>0);
 if($237){var $_012_i_i13=$235;var $232=$236;label=68;break;}else{var $238=$224;label=69;break;}
 case 69: 
 var $238;
 var $239=($__ns_2>>>0)<($__ne>>>0);
 if($239){label=70;break;}else{var $__nf_3=$__ns_2;var $262=$238;label=76;break;}
 case 70: 
 var $240=$22;
 var $__nf_220=$__ns_2;label=71;break;
 case 71: 
 var $__nf_220;
 var $242=HEAP8[($__nf_220)];
 var $243=(($242<<24)>>24)==46;
 if($243){label=72;break;}else{label=74;break;}
 case 72: 
 var $245=$47;
 var $246=HEAP32[(($245)>>2)];
 var $247=(($246+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$248]($51) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=18;break; }
 case 73: 
 var $250=HEAP32[(($__oe)>>2)];
 var $251=(($250+4)|0);
 HEAP32[(($__oe)>>2)]=$251;
 HEAP32[(($250)>>2)]=$249;
 var $252=(($__nf_220+1)|0);
 var $__nf_3=$252;var $262=$251;label=76;break;
 case 74: 
 var $254=HEAP32[(($240)>>2)];
 var $255=(($254+44)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$256]($26,$242) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=14;break; }
 case 75: 
 var $258=HEAP32[(($__oe)>>2)];
 var $259=(($258+4)|0);
 HEAP32[(($__oe)>>2)]=$259;
 HEAP32[(($258)>>2)]=$257;
 var $260=(($__nf_220+1)|0);
 var $261=($260>>>0)<($__ne>>>0);
 if($261){var $__nf_220=$260;label=71;break;}else{var $__nf_3=$260;var $262=$259;label=76;break;}
 case 76: 
 var $262;
 var $__nf_3;
 var $263=$22;
 var $264=HEAP32[(($263)>>2)];
 var $265=(($264+48)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$266]($26,$__nf_3,$__ne,$262) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=77;break; } else { label=18;break; }
 case 77: 
 var $268=$__nf_3;
 var $269=((($76)-($268))|0);
 var $270=HEAP32[(($__oe)>>2)];
 var $271=(($270+($269<<2))|0);
 HEAP32[(($__oe)>>2)]=$271;
 var $272=($__np|0)==($__ne|0);
 if($272){var $storemerge=$271;label=79;break;}else{label=78;break;}
 case 78: 
 var $274=$__np;
 var $275=$__nb;
 var $276=((($274)-($275))|0);
 var $277=(($__ob+($276<<2))|0);
 var $storemerge=$277;label=79;break;
 case 79: 
 var $storemerge;
 HEAP32[(($__op)>>2)]=$storemerge;
 var $279=HEAP8[($144)];
 var $280=$279&1;
 var $281=(($280<<24)>>24)==0;
 if($281){label=82;break;}else{label=80;break;}
 case 80: 
 var $283=(($__grouping+8)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=82;break;}else{label=81;break;}
 case 81: 
 _free($284);
 label=82;break;
 case 82: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwe($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+312)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__fmt=sp;
 var $__nar=(sp)+(8);
 var $__nb=(sp)+(40);
 var $__o=(sp)+(48);
 var $__op=(sp)+(280);
 var $__oe=(sp)+(288);
 var $1=(sp)+(296);
 var $2=(sp)+(304);
 var $$etemp$0$0=37;
 var $$etemp$0$1=0;
 var $st$1$0=(($__fmt)|0);
 HEAP32[(($st$1$0)>>2)]=$$etemp$0$0;
 var $st$2$1=(($__fmt+4)|0);
 HEAP32[(($st$2$1)>>2)]=$$etemp$0$1;
 var $3=$__fmt;
 var $4=(($3+1)|0);
 var $5=(($__iob+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6&2048;
 var $8=($7|0)==0;
 if($8){var $_0_i=$4;label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($3+2)|0);
 HEAP8[($4)]=43;
 var $_0_i=$10;label=3;break;
 case 3: 
 var $_0_i;
 var $12=$6&1024;
 var $13=($12|0)==0;
 if($13){var $_1_i=$_0_i;label=5;break;}else{label=4;break;}
 case 4: 
 var $15=(($_0_i+1)|0);
 HEAP8[($_0_i)]=35;
 var $_1_i=$15;label=5;break;
 case 5: 
 var $_1_i;
 var $17=$6&260;
 var $18=$6>>>14;
 var $19=($17|0)==260;
 if($19){label=13;break;}else{label=6;break;}
 case 6: 
 var $20=(($_1_i+1)|0);
 HEAP8[($_1_i)]=46;
 var $21=(($_1_i+2)|0);
 HEAP8[($20)]=42;
 HEAP8[($21)]=76;
 var $scevgep=(($_1_i+3)|0);
 if(($17|0)==256){ label=10;break;}else if(($17|0)==4){ label=7;break;}else{label=16;break;}
 case 7: 
 var $23=$18&1;
 var $24=($23|0)==0;
 if($24){label=9;break;}else{label=8;break;}
 case 8: 
 HEAP8[($scevgep)]=70;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 9: 
 HEAP8[($scevgep)]=102;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 10: 
 var $28=$18&1;
 var $29=($28|0)==0;
 if($29){label=12;break;}else{label=11;break;}
 case 11: 
 HEAP8[($scevgep)]=69;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 12: 
 HEAP8[($scevgep)]=101;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 13: 
 HEAP8[($_1_i)]=76;
 var $scevgep14=(($_1_i+1)|0);
 var $33=$18&1;
 var $34=($33|0)==0;
 if($34){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP8[($scevgep14)]=65;
 var $specify_precision_0_off0_ph_i15=0;label=19;break;
 case 15: 
 HEAP8[($scevgep14)]=97;
 var $specify_precision_0_off0_ph_i15=0;label=19;break;
 case 16: 
 var $38=$18&1;
 var $39=($38|0)==0;
 if($39){label=18;break;}else{label=17;break;}
 case 17: 
 HEAP8[($scevgep)]=71;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 18: 
 HEAP8[($scevgep)]=103;
 var $specify_precision_0_off0_ph_i15=1;label=19;break;
 case 19: 
 var $specify_precision_0_off0_ph_i15;
 var $42=(($__nar)|0);
 HEAP32[(($__nb)>>2)]=$42;
 var $43=HEAP8[(19232)];
 var $44=(($43<<24)>>24)==0;
 if($44){label=20;break;}else{label=24;break;}
 case 20: 
 var $46=___cxa_guard_acquire(19232);
 var $47=($46|0)==0;
 if($47){label=24;break;}else{label=21;break;}
 case 21: 
 var $49=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=23;break; }
 case 22: 
 HEAP32[((17128)>>2)]=$49;

 label=24;break;
 case 23: 
 var $52$0 = ___cxa_find_matching_catch(-1, -1); var $52$1 = tempRet0;

 ___resumeException($52$0)
 case 24: 
 var $53=HEAP32[((17128)>>2)];
 if($specify_precision_0_off0_ph_i15){label=25;break;}else{label=26;break;}
 case 25: 
 var $55=(($__iob+8)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$56,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$57;label=27;break;
 case 26: 
 var $59=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($42,30,$53,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $__nc_0=$59;label=27;break;
 case 27: 
 var $__nc_0;
 var $61=($__nc_0|0)>29;
 if($61){label=29;break;}else{label=28;break;}
 case 28: 
 var $_pre12=HEAP32[(($__nb)>>2)];
 var $__nc_2=$__nc_0;var $102=0;var $101=$_pre12;label=47;break;
 case 29: 
 var $63=HEAP8[(19232)];
 var $64=(($63<<24)>>24)==0;
 if($specify_precision_0_off0_ph_i15){label=30;break;}else{label=38;break;}
 case 30: 
 if($64){label=31;break;}else{label=35;break;}
 case 31: 
 var $67=___cxa_guard_acquire(19232);
 var $68=($67|0)==0;
 if($68){label=35;break;}else{label=32;break;}
 case 32: 
 var $70=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=34;break; }
 case 33: 
 HEAP32[((17128)>>2)]=$70;

 label=35;break;
 case 34: 
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;

 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;label=37;break;
 case 35: 
 var $75=HEAP32[((17128)>>2)];
 var $76=(($__iob+8)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$75,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 16)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$77,HEAPF64[(((tempVarArgs)+(8))>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$78;label=44;break; } else { label=36;break; }
 case 36: 
 var $80$0 = ___cxa_find_matching_catch(-1, -1); var $80$1 = tempRet0;
 var $eh_lpad_body$1=$80$1;var $eh_lpad_body$0=$80$0;label=37;break;
 case 37: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $81=$eh_lpad_body$0;
 var $82=$eh_lpad_body$1;
 var $_1210=$82;var $_111=$81;label=74;break;
 case 38: 
 if($64){label=39;break;}else{label=43;break;}
 case 39: 
 var $85=___cxa_guard_acquire(19232);
 var $86=($85|0)==0;
 if($86){label=43;break;}else{label=40;break;}
 case 40: 
 var $88=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 HEAP32[((17128)>>2)]=$88;

 label=43;break;
 case 42: 
 var $91$0 = ___cxa_find_matching_catch(-1, -1); var $91$1 = tempRet0;

 var $eh_lpad_body$1=$91$1;var $eh_lpad_body$0=$91$0;label=37;break;
 case 43: 
 var $93=HEAP32[((17128)>>2)];
 var $94=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__nb,$93,$3,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__v,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { var $__nc_1=$94;label=44;break; } else { label=36;break; }
 case 44: 
 var $__nc_1;
 var $96=HEAP32[(($__nb)>>2)];
 var $97=($96|0)==0;
 if($97){label=45;break;}else{var $__nc_2=$__nc_1;var $102=$96;var $101=$96;label=47;break;}
 case 45: 
 var $99=___cxa_allocate_exception(4);
 var $100=$99;
 HEAP32[(($100)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($99,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=36;break; }
 case 46: 
 throw "Reached an unreachable!";
 case 47: 
 var $101;
 var $102;
 var $__nc_2;
 var $103=(($101+$__nc_2)|0);
 var $104=HEAP32[(($5)>>2)];
 var $105=$104&176;
 if(($105|0)==16){ label=48;break;}else if(($105|0)==32){ var $_0_i7=$103;label=54;break;}else{label=53;break;}
 case 48: 
 var $107=HEAP8[($101)];
 if((($107<<24)>>24)==45|(($107<<24)>>24)==43){ label=49;break;}else{label=50;break;}
 case 49: 
 var $109=(($101+1)|0);
 var $_0_i7=$109;label=54;break;
 case 50: 
 var $111=($__nc_2|0)>1;
 var $112=(($107<<24)>>24)==48;
 var $or_cond_i=$111&$112;
 if($or_cond_i){label=51;break;}else{label=53;break;}
 case 51: 
 var $114=(($101+1)|0);
 var $115=HEAP8[($114)];
 if((($115<<24)>>24)==120|(($115<<24)>>24)==88){ label=52;break;}else{label=53;break;}
 case 52: 
 var $117=(($101+2)|0);
 var $_0_i7=$117;label=54;break;
 case 53: 
 var $_0_i7=$101;label=54;break;
 case 54: 
 var $_0_i7;
 var $119=$__o;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $120=(($__o)|0);
 var $121=($101|0)==($42|0);
 if($121){var $__ob_0=$120;var $137=0;var $136=$42;label=59;break;}else{label=55;break;}
 case 55: 
 var $123=$__nc_2<<3;
 var $124=_malloc($123);
 var $125=$124;
 var $126=($124|0)==0;
 if($126){label=56;break;}else{var $__ob_0=$125;var $137=$125;var $136=$101;label=59;break;}
 case 56: 
 var $128=___cxa_allocate_exception(4);
 var $129=$128;
 HEAP32[(($129)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($128,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { var $131=0;label=58;break; }
 case 57: 
 throw "Reached an unreachable!";
 case 58: 
 var $131;
 var $132$0 = ___cxa_find_matching_catch(-1, -1); var $132$1 = tempRet0;
 var $133=$132$0;
 var $134=$132$1;
 var $_0=$133;var $_01=$134;var $183=$131;label=70;break;
 case 59: 
 var $136;
 var $137;
 var $__ob_0;
 var $138=(($__iob+28)|0);
 var $139=(($1)|0);
 var $140=HEAP32[(($138)>>2)];
 var $141=$140;
 HEAP32[(($139)>>2)]=$141;
 var $142=(($140+4)|0);
 var $143=$142;
 var $144=(tempValue=HEAP32[(($143)>>2)],HEAP32[(($143)>>2)]=tempValue+1,tempValue);
 (function() { try { __THREW__ = 0; return __ZNSt3__19__num_putIwE23__widen_and_group_floatEPcS2_S2_PwRS3_S4_RKNS_6localeE($136,$_0_i7,$103,$__ob_0,$__op,$__oe,$1) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=68;break; }
 case 60: 
 var $146=HEAP32[(($139)>>2)];
 var $147=(($146+4)|0);
 var $148=(tempValue=HEAP32[(($147)>>2)],HEAP32[(($147)>>2)]=tempValue+-1,tempValue);
 var $149=($148|0)==0;
 if($149){label=61;break;}else{label=62;break;}
 case 61: 
 var $151=(($146)|0);
 var $152=$146;
 var $153=HEAP32[(($152)>>2)];
 var $154=(($153+8)|0);
 var $155=HEAP32[(($154)>>2)];
 FUNCTION_TABLE[$155]($151);
 label=62;break;
 case 62: 
 var $156=(($__s)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=HEAP32[(($__op)>>2)];
 var $159=HEAP32[(($__oe)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($2,$157,$__ob_0,$158,$159,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { var $131=$137;label=58;break; }
 case 63: 
 var $161=(($2)|0);
 var $162=HEAP32[(($161)>>2)];
 HEAP32[(($156)>>2)]=$162;
 var $163=(($agg_result)|0);
 HEAP32[(($163)>>2)]=$162;
 var $164=($137|0)==0;
 if($164){label=65;break;}else{label=64;break;}
 case 64: 
 var $166=$137;
 _free($166);
 label=65;break;
 case 65: 
 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $167=($102|0)==0;
 if($167){label=67;break;}else{label=66;break;}
 case 66: 
 _free($102);
 label=67;break;
 case 67: 
 STACKTOP=sp;return;
 case 68: 
 var $170$0 = ___cxa_find_matching_catch(-1, -1); var $170$1 = tempRet0;
 var $171=$170$0;
 var $172=$170$1;
 var $173=HEAP32[(($139)>>2)];
 var $174=(($173+4)|0);
 var $175=(tempValue=HEAP32[(($174)>>2)],HEAP32[(($174)>>2)]=tempValue+-1,tempValue);
 var $176=($175|0)==0;
 if($176){label=69;break;}else{var $_0=$171;var $_01=$172;var $183=$137;label=70;break;}
 case 69: 
 var $178=(($173)|0);
 var $179=$173;
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+8)|0);
 var $182=HEAP32[(($181)>>2)];
 FUNCTION_TABLE[$182]($178);
 var $_0=$171;var $_01=$172;var $183=$137;label=70;break;
 case 70: 
 var $183;
 var $_01;
 var $_0;
 var $184=($183|0)==0;
 if($184){label=72;break;}else{label=71;break;}
 case 71: 
 var $186=$183;
 _free($186);
 label=72;break;
 case 72: 
 var $187=($102|0)==0;
 if($187){var $_1210=$_01;var $_111=$_0;label=74;break;}else{label=73;break;}
 case 73: 
 _free($102);
 var $_1210=$_01;var $_111=$_0;label=74;break;
 case 74: 
 var $_111;
 var $_1210;
 var $189$0=$_111;
 var $189$1=0;
 var $190$0=$189$0;
 var $190$1=$_1210;
 ___resumeException($190$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17num_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPKv($agg_result,$this,$__s,$__iob,$__fl,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+200)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__fmt=(sp)+(16);
 var $__nar=(sp)+(24);
 var $__o=(sp)+(48);
 var $1=(($__fmt)|0);
 assert(6 % 1 === 0);HEAP8[($1)]=HEAP8[(5176)];HEAP8[((($1)+(1))|0)]=HEAP8[(5177)];HEAP8[((($1)+(2))|0)]=HEAP8[(5178)];HEAP8[((($1)+(3))|0)]=HEAP8[(5179)];HEAP8[((($1)+(4))|0)]=HEAP8[(5180)];HEAP8[((($1)+(5))|0)]=HEAP8[(5181)];
 var $2=(($__nar)|0);
 var $3=HEAP8[(19232)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19232);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1); var $12$1 = tempRet0;

 ___resumeException($12$0)
 case 6: 
 var $13=HEAP32[((17128)>>2)];
 var $14=__ZNSt3__112__snprintf_lEPcjP15__locale_structPKcz($2,20,$13,$1,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $15=(($__nar+$14)|0);
 var $16=(($__iob+4)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=$17&176;
 if(($18|0)==32){ var $_0_i=$15;label=13;break;}else if(($18|0)==16){ label=7;break;}else{label=12;break;}
 case 7: 
 var $20=HEAP8[($2)];
 if((($20<<24)>>24)==45|(($20<<24)>>24)==43){ label=8;break;}else{label=9;break;}
 case 8: 
 var $22=(($__nar+1)|0);
 var $_0_i=$22;label=13;break;
 case 9: 
 var $24=($14|0)>1;
 var $25=(($20<<24)>>24)==48;
 var $or_cond_i=$24&$25;
 if($or_cond_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $27=(($__nar+1)|0);
 var $28=HEAP8[($27)];
 if((($28<<24)>>24)==120|(($28<<24)>>24)==88){ label=11;break;}else{label=12;break;}
 case 11: 
 var $30=(($__nar+2)|0);
 var $_0_i=$30;label=13;break;
 case 12: 
 var $_0_i=$2;label=13;break;
 case 13: 
 var $_0_i;
 var $32=$__o;
 var $$etemp$0$0=148;
 var $$etemp$0$1=0;

 var $33=(($__iob+28)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($34+4)|0);
 var $36=$35;
 var $37=(tempValue=HEAP32[(($36)>>2)],HEAP32[(($36)>>2)]=tempValue+1,tempValue);
 var $38=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $39=HEAP32[((18664)>>2)];
 var $40=($39|0)==-1;
 if($40){label=15;break;}else{label=14;break;}
 case 14: 
 var $42=(($__p_i_i_i_i)|0);
 HEAP32[(($42)>>2)]=18664;
 var $43=(($__p_i_i_i_i+4)|0);
 HEAP32[(($43)>>2)]=(202);
 var $44=(($__p_i_i_i_i+8)|0);
 HEAP32[(($44)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$38) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $45=HEAP32[((18668)>>2)];
 var $46=((($45)-(1))|0);
 var $47=(($34+12)|0);
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($34+8)|0);
 var $51=$50;
 var $52=HEAP32[(($51)>>2)];
 var $53=$49;
 var $54=$52;
 var $55=((($53)-($54))|0);
 var $56=$55>>2;
 var $57=($56>>>0)>($46>>>0);
 if($57){label=16;break;}else{label=17;break;}
 case 16: 
 var $58=(($52+($46<<2))|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==0;
 if($60){label=17;break;}else{label=19;break;}
 case 17: 
 var $61=___cxa_allocate_exception(4);
 var $62=$61;
 HEAP32[(($62)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($61,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 throw "Reached an unreachable!";
 case 19: 
 var $64=$59;
 var $65=(($34+4)|0);
 var $66=$65;
 var $67=(tempValue=HEAP32[(($66)>>2)],HEAP32[(($66)>>2)]=tempValue+-1,tempValue);
 var $68=($67|0)==0;
 if($68){label=20;break;}else{label=21;break;}
 case 20: 
 var $70=$34;
 var $71=$34;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($70);
 label=21;break;
 case 21: 
 var $75=(($__o)|0);
 var $76=$59;
 var $77=HEAP32[(($76)>>2)];
 var $78=(($77+48)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=FUNCTION_TABLE[$79]($64,$2,$15,$75);
 var $81=(($__o+($14<<2))|0);
 var $82=($_0_i|0)==($15|0);
 if($82){var $__op_0=$81;label=26;break;}else{label=25;break;}
 case 22: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1); var $84$1 = tempRet0;
 var $85=(($34+4)|0);
 var $86=$85;
 var $87=(tempValue=HEAP32[(($86)>>2)],HEAP32[(($86)>>2)]=tempValue+-1,tempValue);
 var $88=($87|0)==0;
 if($88){label=23;break;}else{label=24;break;}
 case 23: 
 var $90=$34;
 var $91=$34;
 var $92=HEAP32[(($91)>>2)];
 var $93=(($92+8)|0);
 var $94=HEAP32[(($93)>>2)];
 FUNCTION_TABLE[$94]($90);
 label=24;break;
 case 24: 
 ___resumeException($84$0)
 case 25: 
 var $96=$__nar;
 var $97=$_0_i;
 var $98=((($97)-($96))|0);
 var $99=(($__o+($98<<2))|0);
 var $__op_0=$99;label=26;break;
 case 26: 
 var $__op_0;
 var $101=(($__s)|0);
 var $102=HEAP32[(($101)>>2)];
 __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$102,$75,$__op_0,$81,$__iob,$__fl);
 var $$etemp$3$0=148;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $10=HEAP32[((18672)>>2)];
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=(($__p_i_i_i_i)|0);
 HEAP32[(($13)>>2)]=18672;
 var $14=(($__p_i_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(202);
 var $15=(($__p_i_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=22;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $16=HEAP32[((18676)>>2)];
 var $17=((($16)-(1))|0);
 var $18=(($5+12)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($5+8)|0);
 var $22=$21;
 var $23=HEAP32[(($22)>>2)];
 var $24=$20;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=$26>>2;
 var $28=($27>>>0)>($17>>>0);
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 var $29=(($23+($17<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=5;break;}else{label=7;break;}
 case 5: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=22;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $35=$30;
 var $36=(($5+4)|0);
 var $37=$36;
 var $38=(tempValue=HEAP32[(($37)>>2)],HEAP32[(($37)>>2)]=tempValue+-1,tempValue);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$5;
 var $42=$5;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41);
 label=9;break;
 case 9: 
 HEAP32[(($__err)>>2)]=0;
 var $46=($__fmtb|0)==($__fmte|0);
 if($46){var $_pre_i_i_i21=$__b_0;var $__e_sroa_0_10=$__e_0;label=67;break;}else{label=10;break;}
 case 10: 
 var $47=$30;
 var $48=(($30+8)|0);
 var $49=$48;
 var $50=$30;
 var $51=$this;
 var $52=(($2)|0);
 var $53=(($3)|0);
 var $54=(($1)|0);
 var $_0_ph39=$__fmtb;var $_pre40=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=11;break;
 case 11: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre40;
 var $_0_ph39;
 var $56=$_pre40;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=12;break;
 case 12: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $56;
 var $57=($56|0)==0;
 if($57){label=13;break;}else{var $_pre_i_i_i21=$__b_sroa_0_1;var $__e_sroa_0_10=$__e_sroa_0_1;label=67;break;}
 case 13: 
 var $59=($__b_sroa_0_1|0)==0;
 if($59){var $72=0;var $__b_sroa_0_2=0;label=16;break;}else{label=14;break;}
 case 14: 
 var $61=(($__b_sroa_0_1+12)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($__b_sroa_0_1+16)|0);
 var $64=HEAP32[(($63)>>2)];
 var $65=($62|0)==($64|0);
 if($65){label=15;break;}else{var $72=$__b_sroa_0_1;var $__b_sroa_0_2=$__b_sroa_0_1;label=16;break;}
 case 15: 
 var $66=$__b_sroa_0_1;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=FUNCTION_TABLE[$69]($__b_sroa_0_1);
 var $71=($70|0)==-1;
 var $___b_sroa_0_1=($71?0:$__b_sroa_0_1);
 var $___b_sroa_0_13=($71?0:$__b_sroa_0_1);
 var $72=$___b_sroa_0_13;var $__b_sroa_0_2=$___b_sroa_0_1;label=16;break;
 case 16: 
 var $__b_sroa_0_2;
 var $72;
 var $73=($72|0)==0;
 var $74=($__e_sroa_0_1|0)==0;
 if($74){label=20;break;}else{label=17;break;}
 case 17: 
 var $76=(($__e_sroa_0_1+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(($__e_sroa_0_1+16)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=($77|0)==($79|0);
 if($80){label=18;break;}else{label=19;break;}
 case 18: 
 var $81=$__e_sroa_0_1;
 var $82=HEAP32[(($81)>>2)];
 var $83=(($82+36)|0);
 var $84=HEAP32[(($83)>>2)];
 var $85=FUNCTION_TABLE[$84]($__e_sroa_0_1);
 var $86=($85|0)==-1;
 if($86){label=20;break;}else{label=19;break;}
 case 19: 
 if($73){var $__e_sroa_0_4=$__e_sroa_0_1;label=25;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=21;break;}
 case 20: 
 if($73){var $__e_sroa_0_3=0;label=21;break;}else{var $__e_sroa_0_4=0;label=25;break;}
 case 21: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$72;var $__e_sroa_0_10=$__e_sroa_0_3;label=67;break;
 case 22: 
 var $89$0 = ___cxa_find_matching_catch(-1, -1); var $89$1 = tempRet0;
 var $90=(($5+4)|0);
 var $91=$90;
 var $92=(tempValue=HEAP32[(($91)>>2)],HEAP32[(($91)>>2)]=tempValue+-1,tempValue);
 var $93=($92|0)==0;
 if($93){label=23;break;}else{label=24;break;}
 case 23: 
 var $95=$5;
 var $96=$5;
 var $97=HEAP32[(($96)>>2)];
 var $98=(($97+8)|0);
 var $99=HEAP32[(($98)>>2)];
 FUNCTION_TABLE[$99]($95);
 label=24;break;
 case 24: 
 ___resumeException($89$0)
 case 25: 
 var $__e_sroa_0_4;
 var $100=HEAP8[($_0_ph39)];
 var $101=HEAP32[(($47)>>2)];
 var $102=(($101+36)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=FUNCTION_TABLE[$103]($35,$100,0);
 var $105=(($104<<24)>>24)==37;
 if($105){label=26;break;}else{label=35;break;}
 case 26: 
 var $107=(($_0_ph39+1)|0);
 var $108=($107|0)==($__fmte|0);
 if($108){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$72;var $__e_sroa_0_10=$__e_sroa_0_4;label=67;break;
 case 28: 
 var $111=HEAP8[($107)];
 var $112=HEAP32[(($47)>>2)];
 var $113=(($112+36)|0);
 var $114=HEAP32[(($113)>>2)];
 var $115=FUNCTION_TABLE[$114]($35,$111,0);
 if((($115<<24)>>24)==69|(($115<<24)>>24)==48){ label=29;break;}else{var $__opt_0=0;var $__cmd_0=$115;var $_1=$107;label=32;break;}
 case 29: 
 var $117=(($_0_ph39+2)|0);
 var $118=($117|0)==($__fmte|0);
 if($118){label=30;break;}else{label=31;break;}
 case 30: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$72;var $__e_sroa_0_10=$__e_sroa_0_4;label=67;break;
 case 31: 
 var $121=HEAP8[($117)];
 var $122=HEAP32[(($47)>>2)];
 var $123=(($122+36)|0);
 var $124=HEAP32[(($123)>>2)];
 var $125=FUNCTION_TABLE[$124]($35,$121,0);
 var $__opt_0=$115;var $__cmd_0=$125;var $_1=$117;label=32;break;
 case 32: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $127=HEAP32[(($51)>>2)];
 var $128=(($127+36)|0);
 var $129=HEAP32[(($128)>>2)];
 HEAP32[(($52)>>2)]=$72;
 HEAP32[(($53)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$129]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $130=HEAP32[(($54)>>2)];
 var $131=(($_1+1)|0);
 var $_0_ph_be=$131;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$130;label=33;break;
 case 33: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0_ph_be;
 var $132=($_0_ph_be|0)==($__fmte|0);
 if($132){var $_pre_i_i_i21=$__b_sroa_0_3;var $__e_sroa_0_10=$__e_sroa_0_5;label=67;break;}else{label=34;break;}
 case 34: 
 var $_pre40_pre=HEAP32[(($__err)>>2)];
 var $_0_ph39=$_0_ph_be;var $_pre40=$_pre40_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=11;break;
 case 35: 
 var $134=HEAP8[($_0_ph39)];
 var $isascii1_i=(($134<<24)>>24)>-1;
 if($isascii1_i){label=36;break;}else{label=58;break;}
 case 36: 
 var $135=(($134<<24)>>24);
 var $136=HEAP32[(($49)>>2)];
 var $137=(($136+($135<<1))|0);
 var $138=HEAP16[(($137)>>1)];
 var $139=$138&8192;
 var $140=(($139<<16)>>16)==0;
 if($140){label=58;break;}else{var $_0_pn=$_0_ph39;label=37;break;}
 case 37: 
 var $_0_pn;
 var $_2=(($_0_pn+1)|0);
 var $141=($_2|0)==($__fmte|0);
 if($141){var $_2_lcssa=$__fmte;label=40;break;}else{label=38;break;}
 case 38: 
 var $143=HEAP8[($_2)];
 var $isascii1_i4=(($143<<24)>>24)>-1;
 if($isascii1_i4){label=39;break;}else{var $_2_lcssa=$_2;label=40;break;}
 case 39: 
 var $144=(($143<<24)>>24);
 var $145=(($136+($144<<1))|0);
 var $146=HEAP16[(($145)>>1)];
 var $147=$146&8192;
 var $148=(($147<<16)>>16)==0;
 if($148){var $_2_lcssa=$_2;label=40;break;}else{var $_0_pn=$_2;label=37;break;}
 case 40: 
 var $_2_lcssa;
 var $_pre_i_i_i7=$72;var $149=$__e_sroa_0_4;var $_pre_i2_i_i11=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=41;break;
 case 41: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $_pre_i2_i_i11;
 var $149;
 var $_pre_i_i_i7;
 var $150=($_pre_i_i_i7|0)==0;
 if($150){var $163=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=44;break;}else{label=42;break;}
 case 42: 
 var $152=(($_pre_i_i_i7+12)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=(($_pre_i_i_i7+16)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=($153|0)==($155|0);
 if($156){label=43;break;}else{var $163=$_pre_i_i_i7;var $__b_sroa_0_5=$__b_sroa_0_4;label=44;break;}
 case 43: 
 var $157=$_pre_i_i_i7;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+36)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($_pre_i_i_i7);
 var $162=($161|0)==-1;
 var $___b_sroa_0_4=($162?0:$__b_sroa_0_4);
 var $__pre_i_i_i7=($162?0:$_pre_i_i_i7);
 var $163=$__pre_i_i_i7;var $__b_sroa_0_5=$___b_sroa_0_4;label=44;break;
 case 44: 
 var $__b_sroa_0_5;
 var $163;
 var $164=($163|0)==0;
 var $165=($149|0)==0;
 if($165){var $_pre_i2_i_i1142=$_pre_i2_i_i11;var $__e_sroa_0_7=$__e_sroa_0_6;label=48;break;}else{label=45;break;}
 case 45: 
 var $167=(($149+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($149+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=47;break;}else{label=46;break;}
 case 46: 
 if($164){var $179=$149;var $_pre_i2_i_i1141=$_pre_i2_i_i11;var $__e_sroa_0_8=$__e_sroa_0_6;label=50;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 47: 
 var $172=$149;
 var $173=HEAP32[(($172)>>2)];
 var $174=(($173+36)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=FUNCTION_TABLE[$175]($149);
 var $177=($176|0)==-1;
 if($177){var $_pre_i2_i_i1142=0;var $__e_sroa_0_7=0;label=48;break;}else{label=49;break;}
 case 48: 
 var $__e_sroa_0_7;
 var $_pre_i2_i_i1142;
 if($164){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{var $179=0;var $_pre_i2_i_i1141=$_pre_i2_i_i1142;var $__e_sroa_0_8=$__e_sroa_0_7;label=50;break;}
 case 49: 
 var $178=($_pre_i2_i_i11|0)==0;
 var $tmp_i_i13=$164^$178;
 if($tmp_i_i13){var $179=$_pre_i2_i_i11;var $_pre_i2_i_i1141=$_pre_i2_i_i11;var $__e_sroa_0_8=$__e_sroa_0_6;label=50;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 50: 
 var $__e_sroa_0_8;
 var $_pre_i2_i_i1141;
 var $179;
 var $180=(($163+12)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=(($163+16)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($181|0)==($183|0);
 if($184){label=51;break;}else{label=52;break;}
 case 51: 
 var $186=$163;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=FUNCTION_TABLE[$189]($163);
 var $extract_t_i=(($190)&255);
 var $_0_i_off0_i=$extract_t_i;label=53;break;
 case 52: 
 var $192=HEAP8[($181)];
 var $_0_i_off0_i=$192;label=53;break;
 case 53: 
 var $_0_i_off0_i;
 var $isascii1_i14=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i14){label=54;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}
 case 54: 
 var $193=(($_0_i_off0_i<<24)>>24);
 var $194=HEAP32[(($49)>>2)];
 var $195=(($194+($193<<1))|0);
 var $196=HEAP16[(($195)>>1)];
 var $197=$196&8192;
 var $198=(($197<<16)>>16)==0;
 if($198){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=33;break;}else{label=55;break;}
 case 55: 
 var $200=HEAP32[(($180)>>2)];
 var $201=HEAP32[(($182)>>2)];
 var $202=($200|0)==($201|0);
 if($202){label=56;break;}else{label=57;break;}
 case 56: 
 var $204=$163;
 var $205=HEAP32[(($204)>>2)];
 var $206=(($205+40)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=FUNCTION_TABLE[$207]($163);
 var $_pre_i_i_i7=$163;var $149=$179;var $_pre_i2_i_i11=$_pre_i2_i_i1141;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=41;break;
 case 57: 
 var $210=(($200+1)|0);
 HEAP32[(($180)>>2)]=$210;
 var $_pre_i_i_i7=$163;var $149=$179;var $_pre_i2_i_i11=$_pre_i2_i_i1141;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=41;break;
 case 58: 
 var $211=(($72+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=(($72+16)|0);
 var $214=HEAP32[(($213)>>2)];
 var $215=($212|0)==($214|0);
 if($215){label=59;break;}else{label=60;break;}
 case 59: 
 var $217=$72;
 var $218=HEAP32[(($217)>>2)];
 var $219=(($218+36)|0);
 var $220=HEAP32[(($219)>>2)];
 var $221=FUNCTION_TABLE[$220]($72);
 var $extract_t_i16=(($221)&255);
 var $_0_i_off0_i17=$extract_t_i16;label=61;break;
 case 60: 
 var $223=HEAP8[($212)];
 var $_0_i_off0_i17=$223;label=61;break;
 case 61: 
 var $_0_i_off0_i17;
 var $224=HEAP32[(($50)>>2)];
 var $225=(($224+12)|0);
 var $226=HEAP32[(($225)>>2)];
 var $227=FUNCTION_TABLE[$226]($35,$_0_i_off0_i17);
 var $228=HEAP8[($_0_ph39)];
 var $229=HEAP32[(($50)>>2)];
 var $230=(($229+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=FUNCTION_TABLE[$231]($35,$228);
 var $233=(($227<<24)>>24)==(($232<<24)>>24);
 if($233){label=62;break;}else{label=66;break;}
 case 62: 
 var $235=HEAP32[(($211)>>2)];
 var $236=HEAP32[(($213)>>2)];
 var $237=($235|0)==($236|0);
 if($237){label=63;break;}else{label=64;break;}
 case 63: 
 var $239=$72;
 var $240=HEAP32[(($239)>>2)];
 var $241=(($240+40)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=FUNCTION_TABLE[$242]($72);
 label=65;break;
 case 64: 
 var $245=(($235+1)|0);
 HEAP32[(($211)>>2)]=$245;
 label=65;break;
 case 65: 
 var $246=(($_0_ph39+1)|0);
 var $_0_ph_be=$246;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=33;break;
 case 66: 
 HEAP32[(($__err)>>2)]=4;
 var $56=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=12;break;
 case 67: 
 var $__e_sroa_0_10;
 var $_pre_i_i_i21;
 var $247=($_pre_i_i_i21|0)==0;
 if($247){var $260=0;label=70;break;}else{label=68;break;}
 case 68: 
 var $249=(($_pre_i_i_i21+12)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=(($_pre_i_i_i21+16)|0);
 var $252=HEAP32[(($251)>>2)];
 var $253=($250|0)==($252|0);
 if($253){label=69;break;}else{var $260=$_pre_i_i_i21;label=70;break;}
 case 69: 
 var $254=$_pre_i_i_i21;
 var $255=HEAP32[(($254)>>2)];
 var $256=(($255+36)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=FUNCTION_TABLE[$257]($_pre_i_i_i21);
 var $259=($258|0)==-1;
 var $__pre_i_i_i21=($259?0:$_pre_i_i_i21);
 var $260=$__pre_i_i_i21;label=70;break;
 case 70: 
 var $260;
 var $261=($260|0)==0;
 var $262=($__e_sroa_0_10|0)==0;
 if($262){label=74;break;}else{label=71;break;}
 case 71: 
 var $264=(($__e_sroa_0_10+12)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=(($__e_sroa_0_10+16)|0);
 var $267=HEAP32[(($266)>>2)];
 var $268=($265|0)==($267|0);
 if($268){label=72;break;}else{label=73;break;}
 case 72: 
 var $269=$__e_sroa_0_10;
 var $270=HEAP32[(($269)>>2)];
 var $271=(($270+36)|0);
 var $272=HEAP32[(($271)>>2)];
 var $273=FUNCTION_TABLE[$272]($__e_sroa_0_10);
 var $274=($273|0)==-1;
 if($274){label=74;break;}else{label=73;break;}
 case 73: 
 if($261){label=76;break;}else{label=75;break;}
 case 74: 
 if($261){label=75;break;}else{label=76;break;}
 case 75: 
 var $275=HEAP32[(($__err)>>2)];
 var $276=$275|2;
 HEAP32[(($__err)>>2)]=$276;
 label=76;break;
 case 76: 
 var $278=(($agg_result)|0);
 HEAP32[(($278)>>2)]=$260;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,5160,5168);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $26=$19;var $25=$17;label=4;break;
 case 3: 
 var $21=$6;
 var $22=(($21+1)|0);
 var $23=($12&255);
 var $24=$23>>>1;
 var $26=$24;var $25=$22;label=4;break;
 case 4: 
 var $25;
 var $26;
 var $27=(($25+$26)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$25,$27);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18672)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18672;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18676)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($2+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=$2;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=9;break;
 case 9: 
 var $43=(($__e)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($this+8)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=HEAP32[(($47)>>2)];
 var $49=FUNCTION_TABLE[$48]($45);
 var $50=(($49+168)|0);
 var $51=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$44,$49,$50,$32,$__err,0);
 var $52=$51;
 var $53=$49;
 var $54=((($52)-($53))|0);
 var $55=($54|0)<168;
 if($55){label=10;break;}else{label=11;break;}
 case 10: 
 var $57=(($__tm+24)|0);
 var $58=(((($54|0))/(12))&-1);
 var $59=(((($58|0))%(7))&-1);
 HEAP32[(($57)>>2)]=$59;
 label=11;break;
 case 11: 
 var $60=(($__b)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($agg_result)|0);
 HEAP32[(($62)>>2)]=$61;
 STACKTOP=sp;return;
 case 12: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=(($2+4)|0);
 var $66=$65;
 var $67=(tempValue=HEAP32[(($66)>>2)],HEAP32[(($66)>>2)]=tempValue+-1,tempValue);
 var $68=($67|0)==0;
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 var $70=$2;
 var $71=$2;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($70);
 label=14;break;
 case 14: 
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18672)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18672;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18676)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($2+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=$2;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=9;break;
 case 9: 
 var $43=(($__e)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($this+8)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($45);
 var $51=(($50+288)|0);
 var $52=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$44,$50,$51,$32,$__err,0);
 var $53=$52;
 var $54=$50;
 var $55=((($53)-($54))|0);
 var $56=($55|0)<288;
 if($56){label=10;break;}else{label=11;break;}
 case 10: 
 var $58=(($__tm+16)|0);
 var $59=(((($55|0))/(12))&-1);
 var $60=(((($59|0))%(12))&-1);
 HEAP32[(($58)>>2)]=$60;
 label=11;break;
 case 11: 
 var $61=(($__b)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=$62;
 STACKTOP=sp;return;
 case 12: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($2+4)|0);
 var $67=$66;
 var $68=(tempValue=HEAP32[(($67)>>2)],HEAP32[(($67)>>2)]=tempValue+-1,tempValue);
 var $69=($68|0)==0;
 if($69){label=13;break;}else{label=14;break;}
 case 13: 
 var $71=$2;
 var $72=$2;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+8)|0);
 var $75=HEAP32[(($74)>>2)];
 FUNCTION_TABLE[$75]($71);
 label=14;break;
 case 14: 
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18672)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18672;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=15;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18676)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=15;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($2+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=$2;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=9;break;
 case 9: 
 var $43=(($__tm+20)|0);
 var $44=(($__e)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$45,$__err,$32,4);
 var $47=HEAP32[(($__err)>>2)];
 var $48=$47&4;
 var $49=($48|0)==0;
 if($49){label=10;break;}else{label=14;break;}
 case 10: 
 var $51=($46|0)<69;
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $53=((($46)+(2000))|0);
 var $__t_0_i=$53;label=13;break;
 case 12: 
 var $_off_i=((($46)-(69))|0);
 var $55=($_off_i>>>0)<31;
 var $56=((($46)+(1900))|0);
 var $__i=($55?$56:$46);
 var $__t_0_i=$__i;label=13;break;
 case 13: 
 var $__t_0_i;
 var $58=((($__t_0_i)-(1900))|0);
 HEAP32[(($43)>>2)]=$58;
 label=14;break;
 case 14: 
 var $59=(($__b)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($agg_result)|0);
 HEAP32[(($61)>>2)]=$60;
 STACKTOP=sp;return;
 case 15: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=(($2+4)|0);
 var $65=$64;
 var $66=(tempValue=HEAP32[(($65)>>2)],HEAP32[(($65)>>2)]=tempValue+-1,tempValue);
 var $67=($66|0)==0;
 if($67){label=16;break;}else{label=17;break;}
 case 16: 
 var $69=$2;
 var $70=$2;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+8)|0);
 var $73=HEAP32[(($72)>>2)];
 FUNCTION_TABLE[$73]($69);
 label=17;break;
 case 17: 
 ___resumeException($63$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(sp)+(40);
 var $6=(sp)+(48);
 var $7=(sp)+(56);
 var $8=(sp)+(64);
 var $9=(sp)+(72);
 var $10=(sp)+(80);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $17=HEAP32[((18672)>>2)];
 var $18=($17|0)==-1;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($__p_i_i_i_i)|0);
 HEAP32[(($20)>>2)]=18672;
 var $21=(($__p_i_i_i_i+4)|0);
 HEAP32[(($21)>>2)]=(202);
 var $22=(($__p_i_i_i_i+8)|0);
 HEAP32[(($22)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $23=HEAP32[((18676)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($12+12)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($12+8)|0);
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=$27;
 var $32=$30;
 var $33=((($31)-($32))|0);
 var $34=$33>>2;
 var $35=($34>>>0)>($24>>>0);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $36=(($30+($24<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=5;break;}else{label=7;break;}
 case 5: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($39,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $42=$37;
 var $43=(($12+4)|0);
 var $44=$43;
 var $45=(tempValue=HEAP32[(($44)>>2)],HEAP32[(($44)>>2)]=tempValue+-1,tempValue);
 var $46=($45|0)==0;
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 var $48=$12;
 var $49=$12;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+8)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($48);
 label=9;break;
 case 9: 
 var $53=(($__fmt<<24)>>24);
 switch(($53|0)){case 121:{ label=102;break;}case 89:{ label=107;break;}case 37:{ label=109;break;}case 97:case 65:{ label=13;break;}case 98:case 66:case 104:{ label=15;break;}case 99:{ label=17;break;}case 100:case 101:{ label=21;break;}case 68:{ label=25;break;}case 70:{ label=26;break;}case 72:{ label=27;break;}case 73:{ label=30;break;}case 106:{ label=34;break;}case 109:{ label=37;break;}case 77:{ label=40;break;}case 110:case 116:{ label=43;break;}case 112:{ label=74;break;}case 114:{ label=88;break;}case 82:{ label=89;break;}case 83:{ label=90;break;}case 84:{ label=93;break;}case 119:{ label=94;break;}case 120:{ label=97;break;}case 88:{ label=98;break;}default:{label=139;break;}}break;
 case 10: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=(($12+4)|0);
 var $57=$56;
 var $58=(tempValue=HEAP32[(($57)>>2)],HEAP32[(($57)>>2)]=tempValue+-1,tempValue);
 var $59=($58|0)==0;
 if($59){label=11;break;}else{label=12;break;}
 case 11: 
 var $61=$12;
 var $62=$12;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($61);
 label=12;break;
 case 12: 
 ___resumeException($55$0)
 case 13: 
 var $67=(($__e)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($this+8)|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($69);
 var $74=(($73+168)|0);
 var $75=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$68,$73,$74,$42,$__err,0);
 var $76=$75;
 var $77=$73;
 var $78=((($76)-($77))|0);
 var $79=($78|0)<168;
 if($79){label=14;break;}else{label=140;break;}
 case 14: 
 var $81=(($__tm+24)|0);
 var $82=(((($78|0))/(12))&-1);
 var $83=(((($82|0))%(7))&-1);
 HEAP32[(($81)>>2)]=$83;
 label=140;break;
 case 15: 
 var $85=(($__e)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($this+8)|0);
 var $88=$87;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=FUNCTION_TABLE[$91]($87);
 var $93=(($92+288)|0);
 var $94=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$86,$92,$93,$42,$__err,0);
 var $95=$94;
 var $96=$92;
 var $97=((($95)-($96))|0);
 var $98=($97|0)<288;
 if($98){label=16;break;}else{label=140;break;}
 case 16: 
 var $100=(($__tm+16)|0);
 var $101=(((($97|0))/(12))&-1);
 var $102=(((($101|0))%(12))&-1);
 HEAP32[(($100)>>2)]=$102;
 label=140;break;
 case 17: 
 var $104=(($this+8)|0);
 var $105=$104;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($104);
 var $110=(($__b)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($__e)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$109;
 var $115=HEAP8[($114)];
 var $116=$115&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=19;break;}else{label=18;break;}
 case 18: 
 var $119=(($109+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($109+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $129=$122;var $128=$120;label=20;break;
 case 19: 
 var $124=$109;
 var $125=(($124+1)|0);
 var $126=($115&255);
 var $127=$126>>>1;
 var $129=$127;var $128=$125;label=20;break;
 case 20: 
 var $128;
 var $129;
 var $130=(($128+$129)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($2,$this,$111,$113,$__iob,$__err,$__tm,$128,$130);
 var $131=(($2)|0);
 var $132=HEAP32[(($131)>>2)];
 HEAP32[(($110)>>2)]=$132;
 label=140;break;
 case 21: 
 var $134=(($__tm+12)|0);
 var $135=(($__e)|0);
 var $136=HEAP32[(($135)>>2)];
 var $137=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$136,$__err,$42,2);
 var $138=HEAP32[(($__err)>>2)];
 var $139=$138&4;
 var $140=($139|0)==0;
 if($140){label=22;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($137)-(1))|0);
 var $142=($_off_i>>>0)<31;
 if($142){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($134)>>2)]=$137;
 label=140;break;
 case 24: 
 var $145=$138|4;
 HEAP32[(($__err)>>2)]=$145;
 label=140;break;
 case 25: 
 var $147=(($__b)|0);
 var $148=HEAP32[(($147)>>2)];
 var $149=(($__e)|0);
 var $150=HEAP32[(($149)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($3,$this,$148,$150,$__iob,$__err,$__tm,5152,5160);
 var $151=(($3)|0);
 var $152=HEAP32[(($151)>>2)];
 HEAP32[(($147)>>2)]=$152;
 label=140;break;
 case 26: 
 var $154=(($__b)|0);
 var $155=HEAP32[(($154)>>2)];
 var $156=(($__e)|0);
 var $157=HEAP32[(($156)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($4,$this,$155,$157,$__iob,$__err,$__tm,5144,5152);
 var $158=(($4)|0);
 var $159=HEAP32[(($158)>>2)];
 HEAP32[(($154)>>2)]=$159;
 label=140;break;
 case 27: 
 var $161=(($__e)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$162,$__err,$42,2);
 var $164=HEAP32[(($__err)>>2)];
 var $165=$164&4;
 var $166=($165|0)==0;
 var $167=($163|0)<24;
 var $or_cond_i=$166&$167;
 if($or_cond_i){label=28;break;}else{label=29;break;}
 case 28: 
 var $169=(($__tm+8)|0);
 HEAP32[(($169)>>2)]=$163;
 label=140;break;
 case 29: 
 var $171=$164|4;
 HEAP32[(($__err)>>2)]=$171;
 label=140;break;
 case 30: 
 var $173=(($__tm+8)|0);
 var $174=(($__e)|0);
 var $175=HEAP32[(($174)>>2)];
 var $176=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$175,$__err,$42,2);
 var $177=HEAP32[(($__err)>>2)];
 var $178=$177&4;
 var $179=($178|0)==0;
 if($179){label=31;break;}else{label=33;break;}
 case 31: 
 var $_off_i12=((($176)-(1))|0);
 var $181=($_off_i12>>>0)<12;
 if($181){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($173)>>2)]=$176;
 label=140;break;
 case 33: 
 var $184=$177|4;
 HEAP32[(($__err)>>2)]=$184;
 label=140;break;
 case 34: 
 var $186=(($__e)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$187,$__err,$42,3);
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189&4;
 var $191=($190|0)==0;
 var $192=($188|0)<366;
 var $or_cond_i15=$191&$192;
 if($or_cond_i15){label=35;break;}else{label=36;break;}
 case 35: 
 var $194=(($__tm+28)|0);
 HEAP32[(($194)>>2)]=$188;
 label=140;break;
 case 36: 
 var $196=$189|4;
 HEAP32[(($__err)>>2)]=$196;
 label=140;break;
 case 37: 
 var $198=(($__e)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$199,$__err,$42,2);
 var $201=HEAP32[(($__err)>>2)];
 var $202=$201&4;
 var $203=($202|0)==0;
 var $204=($200|0)<13;
 var $or_cond_i18=$203&$204;
 if($or_cond_i18){label=38;break;}else{label=39;break;}
 case 38: 
 var $206=(($__tm+16)|0);
 var $207=((($200)-(1))|0);
 HEAP32[(($206)>>2)]=$207;
 label=140;break;
 case 39: 
 var $209=$201|4;
 HEAP32[(($__err)>>2)]=$209;
 label=140;break;
 case 40: 
 var $211=(($__e)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$212,$__err,$42,2);
 var $214=HEAP32[(($__err)>>2)];
 var $215=$214&4;
 var $216=($215|0)==0;
 var $217=($213|0)<60;
 var $or_cond_i21=$216&$217;
 if($or_cond_i21){label=41;break;}else{label=42;break;}
 case 41: 
 var $219=(($__tm+4)|0);
 HEAP32[(($219)>>2)]=$213;
 label=140;break;
 case 42: 
 var $221=$214|4;
 HEAP32[(($__err)>>2)]=$221;
 label=140;break;
 case 43: 
 var $223=(($__e)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=(($__b)|0);
 var $226=(($37+8)|0);
 var $227=$226;
 var $_sroa_054_0=$224;label=44;break;
 case 44: 
 var $_sroa_054_0;
 var $228=HEAP32[(($225)>>2)];
 var $229=($228|0)==0;
 if($229){var $243=0;label=49;break;}else{label=45;break;}
 case 45: 
 var $231=(($228+12)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($228+16)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=($232|0)==($234|0);
 if($235){label=46;break;}else{var $243=$228;label=49;break;}
 case 46: 
 var $236=$228;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+36)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=FUNCTION_TABLE[$239]($228);
 var $241=($240|0)==-1;
 if($241){label=48;break;}else{label=47;break;}
 case 47: 
 var $_pre_i_i_i_i7=HEAP32[(($225)>>2)];
 var $243=$_pre_i_i_i_i7;label=49;break;
 case 48: 
 HEAP32[(($225)>>2)]=0;
 var $243=0;label=49;break;
 case 49: 
 var $243;
 var $244=($243|0)==0;
 var $245=($_sroa_054_0|0)==0;
 if($245){label=53;break;}else{label=50;break;}
 case 50: 
 var $247=(($_sroa_054_0+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($_sroa_054_0+16)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=52;break;}else{label=51;break;}
 case 51: 
 if($244){var $_sroa_054_2=$_sroa_054_0;label=55;break;}else{var $_pre_i2_i_i6_i=$_sroa_054_0;label=63;break;}
 case 52: 
 var $252=$_sroa_054_0;
 var $253=HEAP32[(($252)>>2)];
 var $254=(($253+36)|0);
 var $255=HEAP32[(($254)>>2)];
 var $256=FUNCTION_TABLE[$255]($_sroa_054_0);
 var $257=($256|0)==-1;
 if($257){label=53;break;}else{label=54;break;}
 case 53: 
 if($244){var $_pre_i2_i_i6_i=0;label=63;break;}else{var $_sroa_054_2=0;label=55;break;}
 case 54: 
 if($244){var $_sroa_054_2=$_sroa_054_0;label=55;break;}else{var $_pre_i2_i_i6_i=$_sroa_054_0;label=63;break;}
 case 55: 
 var $_sroa_054_2;
 var $258=HEAP32[(($225)>>2)];
 var $259=(($258+12)|0);
 var $260=HEAP32[(($259)>>2)];
 var $261=(($258+16)|0);
 var $262=HEAP32[(($261)>>2)];
 var $263=($260|0)==($262|0);
 if($263){label=56;break;}else{label=57;break;}
 case 56: 
 var $265=$258;
 var $266=HEAP32[(($265)>>2)];
 var $267=(($266+36)|0);
 var $268=HEAP32[(($267)>>2)];
 var $269=FUNCTION_TABLE[$268]($258);
 var $extract_t_i_i11=(($269)&255);
 var $_0_i_off0_i_i12=$extract_t_i_i11;label=58;break;
 case 57: 
 var $271=HEAP8[($260)];
 var $_0_i_off0_i_i12=$271;label=58;break;
 case 58: 
 var $_0_i_off0_i_i12;
 var $isascii1_i_i=(($_0_i_off0_i_i12<<24)>>24)>-1;
 if($isascii1_i_i){label=59;break;}else{var $_pre_i2_i_i6_i=$_sroa_054_2;label=63;break;}
 case 59: 
 var $272=(($_0_i_off0_i_i12<<24)>>24);
 var $273=HEAP32[(($227)>>2)];
 var $274=(($273+($272<<1))|0);
 var $275=HEAP16[(($274)>>1)];
 var $276=$275&8192;
 var $277=(($276<<16)>>16)==0;
 if($277){var $_pre_i2_i_i6_i=$_sroa_054_2;label=63;break;}else{label=60;break;}
 case 60: 
 var $279=HEAP32[(($225)>>2)];
 var $280=(($279+12)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($279+16)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($281|0)==($283|0);
 if($284){label=61;break;}else{label=62;break;}
 case 61: 
 var $286=$279;
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+40)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=FUNCTION_TABLE[$289]($279);
 var $_sroa_054_0=$_sroa_054_2;label=44;break;
 case 62: 
 var $292=(($281+1)|0);
 HEAP32[(($280)>>2)]=$292;
 var $_sroa_054_0=$_sroa_054_2;label=44;break;
 case 63: 
 var $_pre_i2_i_i6_i;
 var $293=HEAP32[(($225)>>2)];
 var $294=($293|0)==0;
 if($294){var $308=0;label=68;break;}else{label=64;break;}
 case 64: 
 var $296=(($293+12)|0);
 var $297=HEAP32[(($296)>>2)];
 var $298=(($293+16)|0);
 var $299=HEAP32[(($298)>>2)];
 var $300=($297|0)==($299|0);
 if($300){label=65;break;}else{var $308=$293;label=68;break;}
 case 65: 
 var $301=$293;
 var $302=HEAP32[(($301)>>2)];
 var $303=(($302+36)|0);
 var $304=HEAP32[(($303)>>2)];
 var $305=FUNCTION_TABLE[$304]($293);
 var $306=($305|0)==-1;
 if($306){label=67;break;}else{label=66;break;}
 case 66: 
 var $_pre_i_i_i2_i15=HEAP32[(($225)>>2)];
 var $308=$_pre_i_i_i2_i15;label=68;break;
 case 67: 
 HEAP32[(($225)>>2)]=0;
 var $308=0;label=68;break;
 case 68: 
 var $308;
 var $309=($308|0)==0;
 var $310=($_pre_i2_i_i6_i|0)==0;
 if($310){label=72;break;}else{label=69;break;}
 case 69: 
 var $312=(($_pre_i2_i_i6_i+12)|0);
 var $313=HEAP32[(($312)>>2)];
 var $314=(($_pre_i2_i_i6_i+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($313|0)==($315|0);
 if($316){label=70;break;}else{label=71;break;}
 case 70: 
 var $317=$_pre_i2_i_i6_i;
 var $318=HEAP32[(($317)>>2)];
 var $319=(($318+36)|0);
 var $320=HEAP32[(($319)>>2)];
 var $321=FUNCTION_TABLE[$320]($_pre_i2_i_i6_i);
 var $322=($321|0)==-1;
 if($322){label=72;break;}else{label=71;break;}
 case 71: 
 if($309){label=140;break;}else{label=73;break;}
 case 72: 
 if($309){label=73;break;}else{label=140;break;}
 case 73: 
 var $324=HEAP32[(($__err)>>2)];
 var $325=$324|2;
 HEAP32[(($__err)>>2)]=$325;
 label=140;break;
 case 74: 
 var $327=(($__tm+8)|0);
 var $328=(($__e)|0);
 var $329=HEAP32[(($328)>>2)];
 var $330=(($this+8)|0);
 var $331=$330;
 var $332=HEAP32[(($331)>>2)];
 var $333=(($332+8)|0);
 var $334=HEAP32[(($333)>>2)];
 var $335=FUNCTION_TABLE[$334]($330);
 var $336=$335;
 var $337=HEAP8[($336)];
 var $338=$337&1;
 var $339=(($338<<24)>>24)==0;
 if($339){label=76;break;}else{label=75;break;}
 case 75: 
 var $341=(($335+4)|0);
 var $342=HEAP32[(($341)>>2)];
 var $346=$342;label=77;break;
 case 76: 
 var $344=($337&255);
 var $345=$344>>>1;
 var $346=$345;label=77;break;
 case 77: 
 var $346;
 var $347=(($335+12)|0);
 var $348=$347;
 var $349=HEAP8[($348)];
 var $350=$349&1;
 var $351=(($350<<24)>>24)==0;
 if($351){label=79;break;}else{label=78;break;}
 case 78: 
 var $353=(($335+16)|0);
 var $354=HEAP32[(($353)>>2)];
 var $358=$354;label=80;break;
 case 79: 
 var $356=($349&255);
 var $357=$356>>>1;
 var $358=$357;label=80;break;
 case 80: 
 var $358;
 var $359=(((-$358))|0);
 var $360=($346|0)==($359|0);
 if($360){label=81;break;}else{label=82;break;}
 case 81: 
 var $362=HEAP32[(($__err)>>2)];
 var $363=$362|4;
 HEAP32[(($__err)>>2)]=$363;
 label=140;break;
 case 82: 
 var $365=(($335+24)|0);
 var $366=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEPKNS_12basic_stringIcS3_NS_9allocatorIcEEEENS_5ctypeIcEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$329,$335,$365,$42,$__err,0);
 var $367=$366;
 var $368=$335;
 var $369=((($367)-($368))|0);
 var $370=($366|0)==($335|0);
 if($370){label=83;break;}else{label=85;break;}
 case 83: 
 var $372=HEAP32[(($327)>>2)];
 var $373=($372|0)==12;
 if($373){label=84;break;}else{label=85;break;}
 case 84: 
 HEAP32[(($327)>>2)]=0;
 label=140;break;
 case 85: 
 var $376=($369|0)==12;
 if($376){label=86;break;}else{label=140;break;}
 case 86: 
 var $378=HEAP32[(($327)>>2)];
 var $379=($378|0)<12;
 if($379){label=87;break;}else{label=140;break;}
 case 87: 
 var $381=((($378)+(12))|0);
 HEAP32[(($327)>>2)]=$381;
 label=140;break;
 case 88: 
 var $383=(($__b)|0);
 var $384=HEAP32[(($383)>>2)];
 var $385=(($__e)|0);
 var $386=HEAP32[(($385)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($5,$this,$384,$386,$__iob,$__err,$__tm,5128,5139);
 var $387=(($5)|0);
 var $388=HEAP32[(($387)>>2)];
 HEAP32[(($383)>>2)]=$388;
 label=140;break;
 case 89: 
 var $390=(($__b)|0);
 var $391=HEAP32[(($390)>>2)];
 var $392=(($__e)|0);
 var $393=HEAP32[(($392)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($6,$this,$391,$393,$__iob,$__err,$__tm,5120,5125);
 var $394=(($6)|0);
 var $395=HEAP32[(($394)>>2)];
 HEAP32[(($390)>>2)]=$395;
 label=140;break;
 case 90: 
 var $397=(($__e)|0);
 var $398=HEAP32[(($397)>>2)];
 var $399=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$398,$__err,$42,2);
 var $400=HEAP32[(($__err)>>2)];
 var $401=$400&4;
 var $402=($401|0)==0;
 var $403=($399|0)<61;
 var $or_cond_i24=$402&$403;
 if($or_cond_i24){label=91;break;}else{label=92;break;}
 case 91: 
 var $405=(($__tm)|0);
 HEAP32[(($405)>>2)]=$399;
 label=140;break;
 case 92: 
 var $407=$400|4;
 HEAP32[(($__err)>>2)]=$407;
 label=140;break;
 case 93: 
 var $409=(($__b)|0);
 var $410=HEAP32[(($409)>>2)];
 var $411=(($__e)|0);
 var $412=HEAP32[(($411)>>2)];
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($7,$this,$410,$412,$__iob,$__err,$__tm,5112,5120);
 var $413=(($7)|0);
 var $414=HEAP32[(($413)>>2)];
 HEAP32[(($409)>>2)]=$414;
 label=140;break;
 case 94: 
 var $416=(($__e)|0);
 var $417=HEAP32[(($416)>>2)];
 var $418=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$417,$__err,$42,1);
 var $419=HEAP32[(($__err)>>2)];
 var $420=$419&4;
 var $421=($420|0)==0;
 var $422=($418|0)<7;
 var $or_cond_i27=$421&$422;
 if($or_cond_i27){label=95;break;}else{label=96;break;}
 case 95: 
 var $424=(($__tm+24)|0);
 HEAP32[(($424)>>2)]=$418;
 label=140;break;
 case 96: 
 var $426=$419|4;
 HEAP32[(($__err)>>2)]=$426;
 label=140;break;
 case 97: 
 var $428=$this;
 var $429=HEAP32[(($428)>>2)];
 var $430=(($429+20)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=(($__b)|0);
 var $433=HEAP32[(($432)>>2)];
 var $434=(($8)|0);
 HEAP32[(($434)>>2)]=$433;
 var $435=(($__e)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=(($9)|0);
 HEAP32[(($437)>>2)]=$436;
 FUNCTION_TABLE[$431]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=141;break;
 case 98: 
 var $439=(($this+8)|0);
 var $440=$439;
 var $441=HEAP32[(($440)>>2)];
 var $442=(($441+24)|0);
 var $443=HEAP32[(($442)>>2)];
 var $444=FUNCTION_TABLE[$443]($439);
 var $445=(($__b)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=(($__e)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=$444;
 var $450=HEAP8[($449)];
 var $451=$450&1;
 var $452=(($451<<24)>>24)==0;
 if($452){label=100;break;}else{label=99;break;}
 case 99: 
 var $454=(($444+8)|0);
 var $455=HEAP32[(($454)>>2)];
 var $456=(($444+4)|0);
 var $457=HEAP32[(($456)>>2)];
 var $464=$457;var $463=$455;label=101;break;
 case 100: 
 var $459=$444;
 var $460=(($459+1)|0);
 var $461=($450&255);
 var $462=$461>>>1;
 var $464=$462;var $463=$460;label=101;break;
 case 101: 
 var $463;
 var $464;
 var $465=(($463+$464)|0);
 __ZNKSt3__18time_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKcSC_($10,$this,$446,$448,$__iob,$__err,$__tm,$463,$465);
 var $466=(($10)|0);
 var $467=HEAP32[(($466)>>2)];
 HEAP32[(($445)>>2)]=$467;
 label=140;break;
 case 102: 
 var $469=(($__tm+20)|0);
 var $470=(($__e)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$471,$__err,$42,4);
 var $473=HEAP32[(($__err)>>2)];
 var $474=$473&4;
 var $475=($474|0)==0;
 if($475){label=103;break;}else{label=140;break;}
 case 103: 
 var $477=($472|0)<69;
 if($477){label=104;break;}else{label=105;break;}
 case 104: 
 var $479=((($472)+(2000))|0);
 var $__t_0_i=$479;label=106;break;
 case 105: 
 var $_off_i33=((($472)-(69))|0);
 var $481=($_off_i33>>>0)<31;
 var $482=((($472)+(1900))|0);
 var $__i=($481?$482:$472);
 var $__t_0_i=$__i;label=106;break;
 case 106: 
 var $__t_0_i;
 var $484=((($__t_0_i)-(1900))|0);
 HEAP32[(($469)>>2)]=$484;
 label=140;break;
 case 107: 
 var $486=(($__e)|0);
 var $487=HEAP32[(($486)>>2)];
 var $488=__ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$487,$__err,$42,4);
 var $489=HEAP32[(($__err)>>2)];
 var $490=$489&4;
 var $491=($490|0)==0;
 if($491){label=108;break;}else{label=140;break;}
 case 108: 
 var $493=(($__tm+20)|0);
 var $494=((($488)-(1900))|0);
 HEAP32[(($493)>>2)]=$494;
 label=140;break;
 case 109: 
 var $496=(($__e)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=(($__b)|0);
 var $499=HEAP32[(($498)>>2)];
 var $500=($499|0)==0;
 if($500){var $514=0;label=114;break;}else{label=110;break;}
 case 110: 
 var $502=(($499+12)|0);
 var $503=HEAP32[(($502)>>2)];
 var $504=(($499+16)|0);
 var $505=HEAP32[(($504)>>2)];
 var $506=($503|0)==($505|0);
 if($506){label=111;break;}else{var $514=$499;label=114;break;}
 case 111: 
 var $507=$499;
 var $508=HEAP32[(($507)>>2)];
 var $509=(($508+36)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=FUNCTION_TABLE[$510]($499);
 var $512=($511|0)==-1;
 if($512){label=113;break;}else{label=112;break;}
 case 112: 
 var $_pre_i_i_i_i=HEAP32[(($498)>>2)];
 var $514=$_pre_i_i_i_i;label=114;break;
 case 113: 
 HEAP32[(($498)>>2)]=0;
 var $514=0;label=114;break;
 case 114: 
 var $514;
 var $515=($514|0)==0;
 var $516=($497|0)==0;
 if($516){label=118;break;}else{label=115;break;}
 case 115: 
 var $518=(($497+12)|0);
 var $519=HEAP32[(($518)>>2)];
 var $520=(($497+16)|0);
 var $521=HEAP32[(($520)>>2)];
 var $522=($519|0)==($521|0);
 if($522){label=116;break;}else{label=117;break;}
 case 116: 
 var $523=$497;
 var $524=HEAP32[(($523)>>2)];
 var $525=(($524+36)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=FUNCTION_TABLE[$526]($497);
 var $528=($527|0)==-1;
 if($528){label=118;break;}else{label=117;break;}
 case 117: 
 if($515){var $_pre_i2_i_i611_i=$497;label=120;break;}else{label=119;break;}
 case 118: 
 if($515){label=119;break;}else{var $_pre_i2_i_i611_i=0;label=120;break;}
 case 119: 
 var $530=HEAP32[(($__err)>>2)];
 var $531=$530|6;
 HEAP32[(($__err)>>2)]=$531;
 label=140;break;
 case 120: 
 var $_pre_i2_i_i611_i;
 var $532=HEAP32[(($498)>>2)];
 var $533=(($532+12)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=(($532+16)|0);
 var $536=HEAP32[(($535)>>2)];
 var $537=($534|0)==($536|0);
 if($537){label=121;break;}else{label=122;break;}
 case 121: 
 var $539=$532;
 var $540=HEAP32[(($539)>>2)];
 var $541=(($540+36)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=FUNCTION_TABLE[$542]($532);
 var $extract_t_i_i=(($543)&255);
 var $_0_i_off0_i_i=$extract_t_i_i;label=123;break;
 case 122: 
 var $545=HEAP8[($534)];
 var $_0_i_off0_i_i=$545;label=123;break;
 case 123: 
 var $_0_i_off0_i_i;
 var $546=$37;
 var $547=HEAP32[(($546)>>2)];
 var $548=(($547+36)|0);
 var $549=HEAP32[(($548)>>2)];
 var $550=FUNCTION_TABLE[$549]($42,$_0_i_off0_i_i,0);
 var $551=(($550<<24)>>24)==37;
 if($551){label=125;break;}else{label=124;break;}
 case 124: 
 var $553=HEAP32[(($__err)>>2)];
 var $554=$553|4;
 HEAP32[(($__err)>>2)]=$554;
 label=140;break;
 case 125: 
 var $556=HEAP32[(($498)>>2)];
 var $557=(($556+12)|0);
 var $558=HEAP32[(($557)>>2)];
 var $559=(($556+16)|0);
 var $560=HEAP32[(($559)>>2)];
 var $561=($558|0)==($560|0);
 if($561){label=126;break;}else{label=127;break;}
 case 126: 
 var $563=$556;
 var $564=HEAP32[(($563)>>2)];
 var $565=(($564+40)|0);
 var $566=HEAP32[(($565)>>2)];
 var $567=FUNCTION_TABLE[$566]($556);
 label=128;break;
 case 127: 
 var $569=(($558+1)|0);
 HEAP32[(($557)>>2)]=$569;
 label=128;break;
 case 128: 
 var $570=HEAP32[(($498)>>2)];
 var $571=($570|0)==0;
 if($571){var $585=0;label=133;break;}else{label=129;break;}
 case 129: 
 var $573=(($570+12)|0);
 var $574=HEAP32[(($573)>>2)];
 var $575=(($570+16)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=($574|0)==($576|0);
 if($577){label=130;break;}else{var $585=$570;label=133;break;}
 case 130: 
 var $578=$570;
 var $579=HEAP32[(($578)>>2)];
 var $580=(($579+36)|0);
 var $581=HEAP32[(($580)>>2)];
 var $582=FUNCTION_TABLE[$581]($570);
 var $583=($582|0)==-1;
 if($583){label=132;break;}else{label=131;break;}
 case 131: 
 var $_pre_i_i_i2_i=HEAP32[(($498)>>2)];
 var $585=$_pre_i_i_i2_i;label=133;break;
 case 132: 
 HEAP32[(($498)>>2)]=0;
 var $585=0;label=133;break;
 case 133: 
 var $585;
 var $586=($585|0)==0;
 var $587=($_pre_i2_i_i611_i|0)==0;
 if($587){label=137;break;}else{label=134;break;}
 case 134: 
 var $589=(($_pre_i2_i_i611_i+12)|0);
 var $590=HEAP32[(($589)>>2)];
 var $591=(($_pre_i2_i_i611_i+16)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=($590|0)==($592|0);
 if($593){label=135;break;}else{label=136;break;}
 case 135: 
 var $594=$_pre_i2_i_i611_i;
 var $595=HEAP32[(($594)>>2)];
 var $596=(($595+36)|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=FUNCTION_TABLE[$597]($_pre_i2_i_i611_i);
 var $599=($598|0)==-1;
 if($599){label=137;break;}else{label=136;break;}
 case 136: 
 if($586){label=140;break;}else{label=138;break;}
 case 137: 
 if($586){label=138;break;}else{label=140;break;}
 case 138: 
 var $601=HEAP32[(($__err)>>2)];
 var $602=$601|2;
 HEAP32[(($__err)>>2)]=$602;
 label=140;break;
 case 139: 
 var $604=HEAP32[(($__err)>>2)];
 var $605=$604|4;
 HEAP32[(($__err)>>2)]=$605;
 label=140;break;
 case 140: 
 var $606=(($__b)|0);
 var $607=HEAP32[(($606)>>2)];
 var $608=(($agg_result)|0);
 HEAP32[(($608)>>2)]=$607;
 label=141;break;
 case 141: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $17=0;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{var $17=$2;label=6;break;}
 case 3: 
 var $10=$2;
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11+36)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=FUNCTION_TABLE[$13]($2);
 var $15=($14|0)==-1;
 if($15){label=5;break;}else{label=4;break;}
 case 4: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $17=$_pre_i_i_i;label=6;break;
 case 5: 
 HEAP32[(($1)>>2)]=0;
 var $17=0;label=6;break;
 case 6: 
 var $17;
 var $18=($17|0)==0;
 var $19=($__e_0|0)==0;
 if($19){label=10;break;}else{label=7;break;}
 case 7: 
 var $21=(($__e_0+12)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($__e_0+16)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($22|0)==($24|0);
 if($25){label=8;break;}else{label=9;break;}
 case 8: 
 var $26=$__e_0;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($27+36)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=FUNCTION_TABLE[$29]($__e_0);
 var $31=($30|0)==-1;
 if($31){label=10;break;}else{label=9;break;}
 case 9: 
 if($18){var $35=$__e_0;label=12;break;}else{label=11;break;}
 case 10: 
 if($18){label=11;break;}else{var $35=0;label=12;break;}
 case 11: 
 var $33=HEAP32[(($__err)>>2)];
 var $34=$33|6;
 HEAP32[(($__err)>>2)]=$34;
 var $_01=0;label=49;break;
 case 12: 
 var $35;
 var $36=HEAP32[(($1)>>2)];
 var $37=(($36+12)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($36+16)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($38|0)==($40|0);
 if($41){label=13;break;}else{label=14;break;}
 case 13: 
 var $43=$36;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+36)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=FUNCTION_TABLE[$46]($36);
 var $extract_t_i=(($47)&255);
 var $_0_i_off0_i=$extract_t_i;label=15;break;
 case 14: 
 var $49=HEAP8[($38)];
 var $_0_i_off0_i=$49;label=15;break;
 case 15: 
 var $_0_i_off0_i;
 var $isascii1_i=(($_0_i_off0_i<<24)>>24)>-1;
 if($isascii1_i){label=16;break;}else{label=17;break;}
 case 16: 
 var $50=(($_0_i_off0_i<<24)>>24);
 var $51=(($__ct+8)|0);
 var $52=HEAP32[(($51)>>2)];
 var $53=(($52+($50<<1))|0);
 var $54=HEAP16[(($53)>>1)];
 var $55=$54&2048;
 var $56=(($55<<16)>>16)==0;
 if($56){label=17;break;}else{label=18;break;}
 case 17: 
 var $57=HEAP32[(($__err)>>2)];
 var $58=$57|4;
 HEAP32[(($__err)>>2)]=$58;
 var $_01=0;label=49;break;
 case 18: 
 var $60=$__ct;
 var $61=HEAP32[(($60)>>2)];
 var $62=(($61+36)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=FUNCTION_TABLE[$63]($__ct,$_0_i_off0_i,0);
 var $65=(($64<<24)>>24);
 var $66=HEAP32[(($1)>>2)];
 var $67=(($66+12)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($66+16)|0);
 var $70=HEAP32[(($69)>>2)];
 var $71=($68|0)==($70|0);
 if($71){label=19;break;}else{label=20;break;}
 case 19: 
 var $73=$66;
 var $74=HEAP32[(($73)>>2)];
 var $75=(($74+40)|0);
 var $76=HEAP32[(($75)>>2)];
 var $77=FUNCTION_TABLE[$76]($66);
 var $__r_0_in=$65;var $_0_in=$__n;var $80=$35;var $_pre_i2_i_i7=$35;label=21;break;
 case 20: 
 var $79=(($68+1)|0);
 HEAP32[(($67)>>2)]=$79;
 var $__r_0_in=$65;var $_0_in=$__n;var $80=$35;var $_pre_i2_i_i7=$35;label=21;break;
 case 21: 
 var $_pre_i2_i_i7;
 var $80;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $81=HEAP32[(($1)>>2)];
 var $82=($81|0)==0;
 if($82){var $96=0;label=26;break;}else{label=22;break;}
 case 22: 
 var $84=(($81+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=(($81+16)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=($85|0)==($87|0);
 if($88){label=23;break;}else{var $96=$81;label=26;break;}
 case 23: 
 var $89=$81;
 var $90=HEAP32[(($89)>>2)];
 var $91=(($90+36)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=FUNCTION_TABLE[$92]($81);
 var $94=($93|0)==-1;
 if($94){label=25;break;}else{label=24;break;}
 case 24: 
 var $_pre_i_i_i3=HEAP32[(($1)>>2)];
 var $96=$_pre_i_i_i3;label=26;break;
 case 25: 
 HEAP32[(($1)>>2)]=0;
 var $96=0;label=26;break;
 case 26: 
 var $96;
 var $97=($96|0)==0;
 var $98=($80|0)==0;
 if($98){var $111=0;var $_pre_i2_i_i21=$_pre_i2_i_i7;label=29;break;}else{label=27;break;}
 case 27: 
 var $100=(($80+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=(($80+16)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($101|0)==($103|0);
 if($104){label=28;break;}else{var $111=$80;var $_pre_i2_i_i21=$_pre_i2_i_i7;label=29;break;}
 case 28: 
 var $105=$80;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+36)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($80);
 var $110=($109|0)==-1;
 var $__pre_i2_i_i7=($110?0:$_pre_i2_i_i7);
 var $__pre_i2_i_i73=($110?0:$_pre_i2_i_i7);
 var $111=$__pre_i2_i_i73;var $_pre_i2_i_i21=$__pre_i2_i_i7;label=29;break;
 case 29: 
 var $_pre_i2_i_i21;
 var $111;
 var $112=($111|0)==0;
 var $tmp_i_i9=$97^$112;
 var $113=($_0|0)>0;
 var $_=$tmp_i_i9&$113;
 var $114=HEAP32[(($1)>>2)];
 if($_){label=30;break;}else{label=38;break;}
 case 30: 
 var $116=(($114+12)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=(($114+16)|0);
 var $119=HEAP32[(($118)>>2)];
 var $120=($117|0)==($119|0);
 if($120){label=31;break;}else{label=32;break;}
 case 31: 
 var $122=$114;
 var $123=HEAP32[(($122)>>2)];
 var $124=(($123+36)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=FUNCTION_TABLE[$125]($114);
 var $extract_t_i10=(($126)&255);
 var $_0_i_off0_i11=$extract_t_i10;label=33;break;
 case 32: 
 var $128=HEAP8[($117)];
 var $_0_i_off0_i11=$128;label=33;break;
 case 33: 
 var $_0_i_off0_i11;
 var $isascii1_i13=(($_0_i_off0_i11<<24)>>24)>-1;
 if($isascii1_i13){label=34;break;}else{var $_01=$__r_0;label=49;break;}
 case 34: 
 var $129=(($_0_i_off0_i11<<24)>>24);
 var $130=HEAP32[(($51)>>2)];
 var $131=(($130+($129<<1))|0);
 var $132=HEAP16[(($131)>>1)];
 var $133=$132&2048;
 var $134=(($133<<16)>>16)==0;
 if($134){var $_01=$__r_0;label=49;break;}else{label=35;break;}
 case 35: 
 var $136=((($__r_0)*(10))&-1);
 var $137=HEAP32[(($60)>>2)];
 var $138=(($137+36)|0);
 var $139=HEAP32[(($138)>>2)];
 var $140=FUNCTION_TABLE[$139]($__ct,$_0_i_off0_i11,0);
 var $141=(($140<<24)>>24);
 var $142=((($141)+($136))|0);
 var $143=HEAP32[(($1)>>2)];
 var $144=(($143+12)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=(($143+16)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=($145|0)==($147|0);
 if($148){label=36;break;}else{label=37;break;}
 case 36: 
 var $150=$143;
 var $151=HEAP32[(($150)>>2)];
 var $152=(($151+40)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=FUNCTION_TABLE[$153]($143);
 var $__r_0_in=$142;var $_0_in=$_0;var $80=$111;var $_pre_i2_i_i7=$_pre_i2_i_i21;label=21;break;
 case 37: 
 var $156=(($145+1)|0);
 HEAP32[(($144)>>2)]=$156;
 var $__r_0_in=$142;var $_0_in=$_0;var $80=$111;var $_pre_i2_i_i7=$_pre_i2_i_i21;label=21;break;
 case 38: 
 var $158=($114|0)==0;
 if($158){var $172=0;label=43;break;}else{label=39;break;}
 case 39: 
 var $160=(($114+12)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=(($114+16)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=($161|0)==($163|0);
 if($164){label=40;break;}else{var $172=$114;label=43;break;}
 case 40: 
 var $165=$114;
 var $166=HEAP32[(($165)>>2)];
 var $167=(($166+36)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=FUNCTION_TABLE[$168]($114);
 var $170=($169|0)==-1;
 if($170){label=42;break;}else{label=41;break;}
 case 41: 
 var $_pre_i_i_i17=HEAP32[(($1)>>2)];
 var $172=$_pre_i_i_i17;label=43;break;
 case 42: 
 HEAP32[(($1)>>2)]=0;
 var $172=0;label=43;break;
 case 43: 
 var $172;
 var $173=($172|0)==0;
 var $174=($_pre_i2_i_i21|0)==0;
 if($174){label=47;break;}else{label=44;break;}
 case 44: 
 var $176=(($_pre_i2_i_i21+12)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(($_pre_i2_i_i21+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($177|0)==($179|0);
 if($180){label=45;break;}else{label=46;break;}
 case 45: 
 var $181=$_pre_i2_i_i21;
 var $182=HEAP32[(($181)>>2)];
 var $183=(($182+36)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=FUNCTION_TABLE[$184]($_pre_i2_i_i21);
 var $186=($185|0)==-1;
 if($186){label=47;break;}else{label=46;break;}
 case 46: 
 if($173){var $_01=$__r_0;label=49;break;}else{label=48;break;}
 case 47: 
 if($173){label=48;break;}else{var $_01=$__r_0;label=49;break;}
 case 48: 
 var $188=HEAP32[(($__err)>>2)];
 var $189=$188|2;
 HEAP32[(($__err)>>2)]=$189;
 var $_01=$__r_0;label=49;break;
 case 49: 
 var $_01;
 return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$__b_0,$__e_0,$__iob,$__err,$__tm,$__fmtb,$__fmte){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(sp)+(16);
 var $2=(sp)+(24);
 var $3=(sp)+(32);
 var $4=(($__iob+28)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($5+4)|0);
 var $7=$6;
 var $8=(tempValue=HEAP32[(($7)>>2)],HEAP32[(($7)>>2)]=tempValue+1,tempValue);
 var $9=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $10=HEAP32[((18664)>>2)];
 var $11=($10|0)==-1;
 if($11){label=3;break;}else{label=2;break;}
 case 2: 
 var $13=(($__p_i_i_i_i)|0);
 HEAP32[(($13)>>2)]=18664;
 var $14=(($__p_i_i_i_i+4)|0);
 HEAP32[(($14)>>2)]=(202);
 var $15=(($__p_i_i_i_i+8)|0);
 HEAP32[(($15)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$9) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=26;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $16=HEAP32[((18668)>>2)];
 var $17=((($16)-(1))|0);
 var $18=(($5+12)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=(($5+8)|0);
 var $22=$21;
 var $23=HEAP32[(($22)>>2)];
 var $24=$20;
 var $25=$23;
 var $26=((($24)-($25))|0);
 var $27=$26>>2;
 var $28=($27>>>0)>($17>>>0);
 if($28){label=4;break;}else{label=5;break;}
 case 4: 
 var $29=(($23+($17<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($30|0)==0;
 if($31){label=5;break;}else{label=7;break;}
 case 5: 
 var $32=___cxa_allocate_exception(4);
 var $33=$32;
 HEAP32[(($33)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($32,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=26;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $35=$30;
 var $36=(($5+4)|0);
 var $37=$36;
 var $38=(tempValue=HEAP32[(($37)>>2)],HEAP32[(($37)>>2)]=tempValue+-1,tempValue);
 var $39=($38|0)==0;
 if($39){label=8;break;}else{label=9;break;}
 case 8: 
 var $41=$5;
 var $42=$5;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+8)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41);
 label=9;break;
 case 9: 
 HEAP32[(($__err)>>2)]=0;
 var $46=($__fmtb|0)==($__fmte|0);
 if($46){var $_pre_i_i_i21=$__b_0;var $__e_sroa_0_10=$__e_0;label=71;break;}else{label=10;break;}
 case 10: 
 var $47=$30;
 var $48=$30;
 var $49=$30;
 var $50=$this;
 var $51=(($2)|0);
 var $52=(($3)|0);
 var $53=(($1)|0);
 var $_0_ph43=$__fmtb;var $_pre44=0;var $__e_sroa_0_0=$__e_0;var $__b_sroa_0_0=$__b_0;label=11;break;
 case 11: 
 var $__b_sroa_0_0;
 var $__e_sroa_0_0;
 var $_pre44;
 var $_0_ph43;
 var $55=$_pre44;var $__e_sroa_0_1=$__e_sroa_0_0;var $__b_sroa_0_1=$__b_sroa_0_0;label=12;break;
 case 12: 
 var $__b_sroa_0_1;
 var $__e_sroa_0_1;
 var $55;
 var $56=($55|0)==0;
 if($56){label=13;break;}else{var $_pre_i_i_i21=$__b_sroa_0_1;var $__e_sroa_0_10=$__e_sroa_0_1;label=71;break;}
 case 13: 
 var $58=($__b_sroa_0_1|0)==0;
 if($58){var $75=1;var $74=0;var $__b_sroa_0_2=0;label=18;break;}else{label=14;break;}
 case 14: 
 var $60=(($__b_sroa_0_1+12)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($__b_sroa_0_1+16)|0);
 var $63=HEAP32[(($62)>>2)];
 var $64=($61|0)==($63|0);
 if($64){label=15;break;}else{label=16;break;}
 case 15: 
 var $66=$__b_sroa_0_1;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+36)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=FUNCTION_TABLE[$69]($__b_sroa_0_1);
 var $_0_i_i_i_i=$70;label=17;break;
 case 16: 
 var $72=HEAP32[(($61)>>2)];
 var $_0_i_i_i_i=$72;label=17;break;
 case 17: 
 var $_0_i_i_i_i;
 var $73=($_0_i_i_i_i|0)==-1;
 var $___b_sroa_0_1=($73?0:$__b_sroa_0_1);
 var $___b_sroa_0_13=($73?0:$__b_sroa_0_1);
 var $_=($73?1:0);
 var $75=$_;var $74=$___b_sroa_0_13;var $__b_sroa_0_2=$___b_sroa_0_1;label=18;break;
 case 18: 
 var $__b_sroa_0_2;
 var $74;
 var $75;
 var $76=($__e_sroa_0_1|0)==0;
 if($76){label=23;break;}else{label=19;break;}
 case 19: 
 var $78=(($__e_sroa_0_1+12)|0);
 var $79=HEAP32[(($78)>>2)];
 var $80=(($__e_sroa_0_1+16)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($79|0)==($81|0);
 if($82){label=20;break;}else{label=21;break;}
 case 20: 
 var $84=$__e_sroa_0_1;
 var $85=HEAP32[(($84)>>2)];
 var $86=(($85+36)|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=FUNCTION_TABLE[$87]($__e_sroa_0_1);
 var $_0_i_i1_i_i=$88;label=22;break;
 case 21: 
 var $90=HEAP32[(($79)>>2)];
 var $_0_i_i1_i_i=$90;label=22;break;
 case 22: 
 var $_0_i_i1_i_i;
 var $91=($_0_i_i1_i_i|0)==-1;
 if($91){label=23;break;}else{label=24;break;}
 case 23: 
 if($75){var $__e_sroa_0_3=0;label=25;break;}else{var $__e_sroa_0_4=0;label=29;break;}
 case 24: 
 if($75){var $__e_sroa_0_4=$__e_sroa_0_1;label=29;break;}else{var $__e_sroa_0_3=$__e_sroa_0_1;label=25;break;}
 case 25: 
 var $__e_sroa_0_3;
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$74;var $__e_sroa_0_10=$__e_sroa_0_3;label=71;break;
 case 26: 
 var $94$0 = ___cxa_find_matching_catch(-1, -1); var $94$1 = tempRet0;
 var $95=(($5+4)|0);
 var $96=$95;
 var $97=(tempValue=HEAP32[(($96)>>2)],HEAP32[(($96)>>2)]=tempValue+-1,tempValue);
 var $98=($97|0)==0;
 if($98){label=27;break;}else{label=28;break;}
 case 27: 
 var $100=$5;
 var $101=$5;
 var $102=HEAP32[(($101)>>2)];
 var $103=(($102+8)|0);
 var $104=HEAP32[(($103)>>2)];
 FUNCTION_TABLE[$104]($100);
 label=28;break;
 case 28: 
 ___resumeException($94$0)
 case 29: 
 var $__e_sroa_0_4;
 var $106=HEAP32[(($_0_ph43)>>2)];
 var $107=HEAP32[(($47)>>2)];
 var $108=(($107+52)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($35,$106,0);
 var $111=(($110<<24)>>24)==37;
 if($111){label=30;break;}else{label=39;break;}
 case 30: 
 var $113=(($_0_ph43+4)|0);
 var $114=($113|0)==($__fmte|0);
 if($114){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$74;var $__e_sroa_0_10=$__e_sroa_0_4;label=71;break;
 case 32: 
 var $117=HEAP32[(($113)>>2)];
 var $118=HEAP32[(($47)>>2)];
 var $119=(($118+52)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=FUNCTION_TABLE[$120]($35,$117,0);
 if((($121<<24)>>24)==69|(($121<<24)>>24)==48){ label=33;break;}else{var $__opt_0=0;var $__cmd_0=$121;var $_1=$113;label=36;break;}
 case 33: 
 var $123=(($_0_ph43+8)|0);
 var $124=($123|0)==($__fmte|0);
 if($124){label=34;break;}else{label=35;break;}
 case 34: 
 HEAP32[(($__err)>>2)]=4;
 var $_pre_i_i_i21=$74;var $__e_sroa_0_10=$__e_sroa_0_4;label=71;break;
 case 35: 
 var $127=HEAP32[(($123)>>2)];
 var $128=HEAP32[(($47)>>2)];
 var $129=(($128+52)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=FUNCTION_TABLE[$130]($35,$127,0);
 var $__opt_0=$121;var $__cmd_0=$131;var $_1=$123;label=36;break;
 case 36: 
 var $_1;
 var $__cmd_0;
 var $__opt_0;
 var $133=HEAP32[(($50)>>2)];
 var $134=(($133+36)|0);
 var $135=HEAP32[(($134)>>2)];
 HEAP32[(($51)>>2)]=$74;
 HEAP32[(($52)>>2)]=$__e_sroa_0_4;
 FUNCTION_TABLE[$135]($1,$this,$2,$3,$__iob,$__err,$__tm,$__cmd_0,$__opt_0);
 var $136=HEAP32[(($53)>>2)];
 var $137=(($_1+4)|0);
 var $_0_ph_be=$137;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$136;label=37;break;
 case 37: 
 var $__b_sroa_0_3;
 var $__e_sroa_0_5;
 var $_0_ph_be;
 var $138=($_0_ph_be|0)==($__fmte|0);
 if($138){var $_pre_i_i_i21=$__b_sroa_0_3;var $__e_sroa_0_10=$__e_sroa_0_5;label=71;break;}else{label=38;break;}
 case 38: 
 var $_pre44_pre=HEAP32[(($__err)>>2)];
 var $_0_ph43=$_0_ph_be;var $_pre44=$_pre44_pre;var $__e_sroa_0_0=$__e_sroa_0_5;var $__b_sroa_0_0=$__b_sroa_0_3;label=11;break;
 case 39: 
 var $140=HEAP32[(($_0_ph43)>>2)];
 var $141=HEAP32[(($48)>>2)];
 var $142=(($141+12)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=FUNCTION_TABLE[$143]($35,8192,$140);
 if($144){var $_0_pn=$_0_ph43;label=40;break;}else{label=62;break;}
 case 40: 
 var $_0_pn;
 var $_2=(($_0_pn+4)|0);
 var $145=($_2|0)==($__fmte|0);
 if($145){var $_2_lcssa=$__fmte;label=42;break;}else{label=41;break;}
 case 41: 
 var $147=HEAP32[(($_2)>>2)];
 var $148=HEAP32[(($48)>>2)];
 var $149=(($148+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=FUNCTION_TABLE[$150]($35,8192,$147);
 if($151){var $_0_pn=$_2;label=40;break;}else{var $_2_lcssa=$_2;label=42;break;}
 case 42: 
 var $_2_lcssa;
 var $_pre_i_i_i6=$74;var $152=$__e_sroa_0_4;var $_pre_i3_i_i12=$__e_sroa_0_4;var $__e_sroa_0_6=$__e_sroa_0_4;var $__b_sroa_0_4=$__b_sroa_0_2;label=43;break;
 case 43: 
 var $__b_sroa_0_4;
 var $__e_sroa_0_6;
 var $_pre_i3_i_i12;
 var $152;
 var $_pre_i_i_i6;
 var $153=($_pre_i_i_i6|0)==0;
 if($153){var $170=1;var $169=0;var $__b_sroa_0_5=$__b_sroa_0_4;label=48;break;}else{label=44;break;}
 case 44: 
 var $155=(($_pre_i_i_i6+12)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=(($_pre_i_i_i6+16)|0);
 var $158=HEAP32[(($157)>>2)];
 var $159=($156|0)==($158|0);
 if($159){label=45;break;}else{label=46;break;}
 case 45: 
 var $161=$_pre_i_i_i6;
 var $162=HEAP32[(($161)>>2)];
 var $163=(($162+36)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=FUNCTION_TABLE[$164]($_pre_i_i_i6);
 var $_0_i_i_i_i4=$165;label=47;break;
 case 46: 
 var $167=HEAP32[(($156)>>2)];
 var $_0_i_i_i_i4=$167;label=47;break;
 case 47: 
 var $_0_i_i_i_i4;
 var $168=($_0_i_i_i_i4|0)==-1;
 var $___b_sroa_0_4=($168?0:$__b_sroa_0_4);
 var $__pre_i_i_i6=($168?0:$_pre_i_i_i6);
 var $_4=($168?1:0);
 var $170=$_4;var $169=$__pre_i_i_i6;var $__b_sroa_0_5=$___b_sroa_0_4;label=48;break;
 case 48: 
 var $__b_sroa_0_5;
 var $169;
 var $170;
 var $171=($152|0)==0;
 if($171){var $_pre_i3_i_i1246=$_pre_i3_i_i12;var $__e_sroa_0_7=$__e_sroa_0_6;label=53;break;}else{label=49;break;}
 case 49: 
 var $173=(($152+12)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($152+16)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($174|0)==($176|0);
 if($177){label=50;break;}else{label=51;break;}
 case 50: 
 var $179=$152;
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+36)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=FUNCTION_TABLE[$182]($152);
 var $_0_i_i1_i_i10=$183;label=52;break;
 case 51: 
 var $185=HEAP32[(($174)>>2)];
 var $_0_i_i1_i_i10=$185;label=52;break;
 case 52: 
 var $_0_i_i1_i_i10;
 var $186=($_0_i_i1_i_i10|0)==-1;
 if($186){var $_pre_i3_i_i1246=0;var $__e_sroa_0_7=0;label=53;break;}else{label=54;break;}
 case 53: 
 var $__e_sroa_0_7;
 var $_pre_i3_i_i1246;
 if($170){var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_7;var $__b_sroa_0_3=$__b_sroa_0_5;label=37;break;}else{var $187=0;var $_pre_i3_i_i1245=$_pre_i3_i_i1246;var $__e_sroa_0_8=$__e_sroa_0_7;label=55;break;}
 case 54: 
 var $phitmp_i4_i_i13=($_pre_i3_i_i12|0)==0;
 var $tmp_i_i15=$170^$phitmp_i4_i_i13;
 if($tmp_i_i15){var $187=$_pre_i3_i_i12;var $_pre_i3_i_i1245=$_pre_i3_i_i12;var $__e_sroa_0_8=$__e_sroa_0_6;label=55;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_6;var $__b_sroa_0_3=$__b_sroa_0_5;label=37;break;}
 case 55: 
 var $__e_sroa_0_8;
 var $_pre_i3_i_i1245;
 var $187;
 var $188=(($169+12)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(($169+16)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($189|0)==($191|0);
 if($192){label=56;break;}else{label=57;break;}
 case 56: 
 var $194=$169;
 var $195=HEAP32[(($194)>>2)];
 var $196=(($195+36)|0);
 var $197=HEAP32[(($196)>>2)];
 var $198=FUNCTION_TABLE[$197]($169);
 var $_0_i_i=$198;label=58;break;
 case 57: 
 var $200=HEAP32[(($189)>>2)];
 var $_0_i_i=$200;label=58;break;
 case 58: 
 var $_0_i_i;
 var $201=HEAP32[(($48)>>2)];
 var $202=(($201+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=FUNCTION_TABLE[$203]($35,8192,$_0_i_i);
 if($204){label=59;break;}else{var $_0_ph_be=$_2_lcssa;var $__e_sroa_0_5=$__e_sroa_0_8;var $__b_sroa_0_3=$__b_sroa_0_5;label=37;break;}
 case 59: 
 var $206=HEAP32[(($188)>>2)];
 var $207=HEAP32[(($190)>>2)];
 var $208=($206|0)==($207|0);
 if($208){label=60;break;}else{label=61;break;}
 case 60: 
 var $210=$169;
 var $211=HEAP32[(($210)>>2)];
 var $212=(($211+40)|0);
 var $213=HEAP32[(($212)>>2)];
 var $214=FUNCTION_TABLE[$213]($169);
 var $_pre_i_i_i6=$169;var $152=$187;var $_pre_i3_i_i12=$_pre_i3_i_i1245;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=43;break;
 case 61: 
 var $216=(($206+4)|0);
 HEAP32[(($188)>>2)]=$216;
 var $_pre_i_i_i6=$169;var $152=$187;var $_pre_i3_i_i12=$_pre_i3_i_i1245;var $__e_sroa_0_6=$__e_sroa_0_8;var $__b_sroa_0_4=$__b_sroa_0_5;label=43;break;
 case 62: 
 var $218=(($74+12)|0);
 var $219=HEAP32[(($218)>>2)];
 var $220=(($74+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($219|0)==($221|0);
 if($222){label=63;break;}else{label=64;break;}
 case 63: 
 var $224=$74;
 var $225=HEAP32[(($224)>>2)];
 var $226=(($225+36)|0);
 var $227=HEAP32[(($226)>>2)];
 var $228=FUNCTION_TABLE[$227]($74);
 var $_0_i_i16=$228;label=65;break;
 case 64: 
 var $230=HEAP32[(($219)>>2)];
 var $_0_i_i16=$230;label=65;break;
 case 65: 
 var $_0_i_i16;
 var $231=HEAP32[(($49)>>2)];
 var $232=(($231+28)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=FUNCTION_TABLE[$233]($35,$_0_i_i16);
 var $235=HEAP32[(($_0_ph43)>>2)];
 var $236=HEAP32[(($49)>>2)];
 var $237=(($236+28)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=FUNCTION_TABLE[$238]($35,$235);
 var $240=($234|0)==($239|0);
 if($240){label=66;break;}else{label=70;break;}
 case 66: 
 var $242=HEAP32[(($218)>>2)];
 var $243=HEAP32[(($220)>>2)];
 var $244=($242|0)==($243|0);
 if($244){label=67;break;}else{label=68;break;}
 case 67: 
 var $246=$74;
 var $247=HEAP32[(($246)>>2)];
 var $248=(($247+40)|0);
 var $249=HEAP32[(($248)>>2)];
 var $250=FUNCTION_TABLE[$249]($74);
 label=69;break;
 case 68: 
 var $252=(($242+4)|0);
 HEAP32[(($218)>>2)]=$252;
 label=69;break;
 case 69: 
 var $253=(($_0_ph43+4)|0);
 var $_0_ph_be=$253;var $__e_sroa_0_5=$__e_sroa_0_4;var $__b_sroa_0_3=$__b_sroa_0_2;label=37;break;
 case 70: 
 HEAP32[(($__err)>>2)]=4;
 var $55=4;var $__e_sroa_0_1=$__e_sroa_0_4;var $__b_sroa_0_1=$__b_sroa_0_2;label=12;break;
 case 71: 
 var $__e_sroa_0_10;
 var $_pre_i_i_i21;
 var $254=($_pre_i_i_i21|0)==0;
 if($254){var $271=1;var $270=0;label=76;break;}else{label=72;break;}
 case 72: 
 var $256=(($_pre_i_i_i21+12)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=(($_pre_i_i_i21+16)|0);
 var $259=HEAP32[(($258)>>2)];
 var $260=($257|0)==($259|0);
 if($260){label=73;break;}else{label=74;break;}
 case 73: 
 var $262=$_pre_i_i_i21;
 var $263=HEAP32[(($262)>>2)];
 var $264=(($263+36)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=FUNCTION_TABLE[$265]($_pre_i_i_i21);
 var $_0_i_i_i_i19=$266;label=75;break;
 case 74: 
 var $268=HEAP32[(($257)>>2)];
 var $_0_i_i_i_i19=$268;label=75;break;
 case 75: 
 var $_0_i_i_i_i19;
 var $269=($_0_i_i_i_i19|0)==-1;
 var $__pre_i_i_i21=($269?0:$_pre_i_i_i21);
 var $_5=($269?1:0);
 var $271=$_5;var $270=$__pre_i_i_i21;label=76;break;
 case 76: 
 var $270;
 var $271;
 var $272=($__e_sroa_0_10|0)==0;
 if($272){label=81;break;}else{label=77;break;}
 case 77: 
 var $274=(($__e_sroa_0_10+12)|0);
 var $275=HEAP32[(($274)>>2)];
 var $276=(($__e_sroa_0_10+16)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=($275|0)==($277|0);
 if($278){label=78;break;}else{label=79;break;}
 case 78: 
 var $280=$__e_sroa_0_10;
 var $281=HEAP32[(($280)>>2)];
 var $282=(($281+36)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=FUNCTION_TABLE[$283]($__e_sroa_0_10);
 var $_0_i_i1_i_i25=$284;label=80;break;
 case 79: 
 var $286=HEAP32[(($275)>>2)];
 var $_0_i_i1_i_i25=$286;label=80;break;
 case 80: 
 var $_0_i_i1_i_i25;
 var $287=($_0_i_i1_i_i25|0)==-1;
 if($287){label=81;break;}else{label=82;break;}
 case 81: 
 if($271){label=83;break;}else{label=84;break;}
 case 82: 
 if($271){label=84;break;}else{label=83;break;}
 case 83: 
 var $288=HEAP32[(($__err)>>2)];
 var $289=$288|2;
 HEAP32[(($__err)>>2)]=$289;
 label=84;break;
 case 84: 
 var $291=(($agg_result)|0);
 HEAP32[(($291)>>2)]=$270;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE13do_date_orderEv($this){
 var label=0;


 return 2;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_timeES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];

 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($__e)|0);
 var $4=HEAP32[(($3)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$2,$4,$__iob,$__err,$__tm,5080,5112);
 STACKTOP=sp;return;
}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_dateES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3+20)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=FUNCTION_TABLE[$5]($1);
 var $7=(($__b)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=(($__e)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$6;
 var $12=HEAP8[($11)];
 var $13=$12&1;
 var $14=(($13<<24)>>24)==0;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($6+8)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($6+4)|0);
 var $19=HEAP32[(($18)>>2)];
 var $25=$19;var $24=$17;label=4;break;
 case 3: 
 var $21=(($6+4)|0);
 var $22=($12&255);
 var $23=$22>>>1;
 var $25=$23;var $24=$21;label=4;break;
 case 4: 
 var $24;
 var $25;
 var $26=(($24+($25<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($agg_result,$this,$8,$10,$__iob,$__err,$__tm,$24,$26);
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE14do_get_weekdayES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18664)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18664;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18668)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($2+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=$2;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=9;break;
 case 9: 
 var $43=(($__e)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($this+8)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=HEAP32[(($47)>>2)];
 var $49=FUNCTION_TABLE[$48]($45);
 var $50=(($49+168)|0);
 var $51=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$44,$49,$50,$32,$__err,0);
 var $52=$51;
 var $53=$49;
 var $54=((($52)-($53))|0);
 var $55=($54|0)<168;
 if($55){label=10;break;}else{label=11;break;}
 case 10: 
 var $57=(($__tm+24)|0);
 var $58=(((($54|0))/(12))&-1);
 var $59=(((($58|0))%(7))&-1);
 HEAP32[(($57)>>2)]=$59;
 label=11;break;
 case 11: 
 var $60=(($__b)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(($agg_result)|0);
 HEAP32[(($62)>>2)]=$61;
 STACKTOP=sp;return;
 case 12: 
 var $64$0 = ___cxa_find_matching_catch(-1, -1); var $64$1 = tempRet0;
 var $65=(($2+4)|0);
 var $66=$65;
 var $67=(tempValue=HEAP32[(($66)>>2)],HEAP32[(($66)>>2)]=tempValue+-1,tempValue);
 var $68=($67|0)==0;
 if($68){label=13;break;}else{label=14;break;}
 case 13: 
 var $70=$2;
 var $71=$2;
 var $72=HEAP32[(($71)>>2)];
 var $73=(($72+8)|0);
 var $74=HEAP32[(($73)>>2)];
 FUNCTION_TABLE[$74]($70);
 label=14;break;
 case 14: 
 ___resumeException($64$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE16do_get_monthnameES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18664)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18664;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=12;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18668)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=12;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($2+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=$2;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=9;break;
 case 9: 
 var $43=(($__e)|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=(($this+8)|0);
 var $46=$45;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+4)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=FUNCTION_TABLE[$49]($45);
 var $51=(($50+288)|0);
 var $52=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$44,$50,$51,$32,$__err,0);
 var $53=$52;
 var $54=$50;
 var $55=((($53)-($54))|0);
 var $56=($55|0)<288;
 if($56){label=10;break;}else{label=11;break;}
 case 10: 
 var $58=(($__tm+16)|0);
 var $59=(((($55|0))/(12))&-1);
 var $60=(((($59|0))%(12))&-1);
 HEAP32[(($58)>>2)]=$60;
 label=11;break;
 case 11: 
 var $61=(($__b)|0);
 var $62=HEAP32[(($61)>>2)];
 var $63=(($agg_result)|0);
 HEAP32[(($63)>>2)]=$62;
 STACKTOP=sp;return;
 case 12: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=(($2+4)|0);
 var $67=$66;
 var $68=(tempValue=HEAP32[(($67)>>2)],HEAP32[(($67)>>2)]=tempValue+-1,tempValue);
 var $69=($68|0)==0;
 if($69){label=13;break;}else{label=14;break;}
 case 13: 
 var $71=$2;
 var $72=$2;
 var $73=HEAP32[(($72)>>2)];
 var $74=(($73+8)|0);
 var $75=HEAP32[(($74)>>2)];
 FUNCTION_TABLE[$75]($71);
 label=14;break;
 case 14: 
 ___resumeException($65$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE11do_get_yearES4_S4_RNS_8ios_baseERjP2tm($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($2+4)|0);
 var $4=$3;
 var $5=(tempValue=HEAP32[(($4)>>2)],HEAP32[(($4)>>2)]=tempValue+1,tempValue);
 var $6=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $7=HEAP32[((18664)>>2)];
 var $8=($7|0)==-1;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__p_i_i_i_i)|0);
 HEAP32[(($10)>>2)]=18664;
 var $11=(($__p_i_i_i_i+4)|0);
 HEAP32[(($11)>>2)]=(202);
 var $12=(($__p_i_i_i_i+8)|0);
 HEAP32[(($12)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$6) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=15;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18668)>>2)];
 var $14=((($13)-(1))|0);
 var $15=(($2+12)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($2+8)|0);
 var $19=$18;
 var $20=HEAP32[(($19)>>2)];
 var $21=$17;
 var $22=$20;
 var $23=((($21)-($22))|0);
 var $24=$23>>2;
 var $25=($24>>>0)>($14>>>0);
 if($25){label=4;break;}else{label=5;break;}
 case 4: 
 var $26=(($20+($14<<2))|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==0;
 if($28){label=5;break;}else{label=7;break;}
 case 5: 
 var $29=___cxa_allocate_exception(4);
 var $30=$29;
 HEAP32[(($30)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($29,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=15;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $32=$27;
 var $33=(($2+4)|0);
 var $34=$33;
 var $35=(tempValue=HEAP32[(($34)>>2)],HEAP32[(($34)>>2)]=tempValue+-1,tempValue);
 var $36=($35|0)==0;
 if($36){label=8;break;}else{label=9;break;}
 case 8: 
 var $38=$2;
 var $39=$2;
 var $40=HEAP32[(($39)>>2)];
 var $41=(($40+8)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($38);
 label=9;break;
 case 9: 
 var $43=(($__tm+20)|0);
 var $44=(($__e)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$45,$__err,$32,4);
 var $47=HEAP32[(($__err)>>2)];
 var $48=$47&4;
 var $49=($48|0)==0;
 if($49){label=10;break;}else{label=14;break;}
 case 10: 
 var $51=($46|0)<69;
 if($51){label=11;break;}else{label=12;break;}
 case 11: 
 var $53=((($46)+(2000))|0);
 var $__t_0_i=$53;label=13;break;
 case 12: 
 var $_off_i=((($46)-(69))|0);
 var $55=($_off_i>>>0)<31;
 var $56=((($46)+(1900))|0);
 var $__i=($55?$56:$46);
 var $__t_0_i=$__i;label=13;break;
 case 13: 
 var $__t_0_i;
 var $58=((($__t_0_i)-(1900))|0);
 HEAP32[(($43)>>2)]=$58;
 label=14;break;
 case 14: 
 var $59=(($__b)|0);
 var $60=HEAP32[(($59)>>2)];
 var $61=(($agg_result)|0);
 HEAP32[(($61)>>2)]=$60;
 STACKTOP=sp;return;
 case 15: 
 var $63$0 = ___cxa_find_matching_catch(-1, -1); var $63$1 = tempRet0;
 var $64=(($2+4)|0);
 var $65=$64;
 var $66=(tempValue=HEAP32[(($65)>>2)],HEAP32[(($65)>>2)]=tempValue+-1,tempValue);
 var $67=($66|0)==0;
 if($67){label=16;break;}else{label=17;break;}
 case 16: 
 var $69=$2;
 var $70=$2;
 var $71=HEAP32[(($70)>>2)];
 var $72=(($71+8)|0);
 var $73=HEAP32[(($72)>>2)];
 FUNCTION_TABLE[$73]($69);
 label=17;break;
 case 17: 
 ___resumeException($63$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_RNS_8ios_baseERjP2tmcc($agg_result,$this,$__b,$__e,$__iob,$__err,$__tm,$__fmt,$0){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+88)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $2=(sp)+(16);
 var $3=(sp)+(24);
 var $4=(sp)+(32);
 var $5=(sp)+(40);
 var $6=(sp)+(48);
 var $7=(sp)+(56);
 var $8=(sp)+(64);
 var $9=(sp)+(72);
 var $10=(sp)+(80);
 HEAP32[(($__err)>>2)]=0;
 var $11=(($__iob+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+4)|0);
 var $14=$13;
 var $15=(tempValue=HEAP32[(($14)>>2)],HEAP32[(($14)>>2)]=tempValue+1,tempValue);
 var $16=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $17=HEAP32[((18664)>>2)];
 var $18=($17|0)==-1;
 if($18){label=3;break;}else{label=2;break;}
 case 2: 
 var $20=(($__p_i_i_i_i)|0);
 HEAP32[(($20)>>2)]=18664;
 var $21=(($__p_i_i_i_i+4)|0);
 HEAP32[(($21)>>2)]=(202);
 var $22=(($__p_i_i_i_i+8)|0);
 HEAP32[(($22)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$16) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=10;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $23=HEAP32[((18668)>>2)];
 var $24=((($23)-(1))|0);
 var $25=(($12+12)|0);
 var $26=$25;
 var $27=HEAP32[(($26)>>2)];
 var $28=(($12+8)|0);
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=$27;
 var $32=$30;
 var $33=((($31)-($32))|0);
 var $34=$33>>2;
 var $35=($34>>>0)>($24>>>0);
 if($35){label=4;break;}else{label=5;break;}
 case 4: 
 var $36=(($30+($24<<2))|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=($37|0)==0;
 if($38){label=5;break;}else{label=7;break;}
 case 5: 
 var $39=___cxa_allocate_exception(4);
 var $40=$39;
 HEAP32[(($40)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($39,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=10;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $42=$37;
 var $43=(($12+4)|0);
 var $44=$43;
 var $45=(tempValue=HEAP32[(($44)>>2)],HEAP32[(($44)>>2)]=tempValue+-1,tempValue);
 var $46=($45|0)==0;
 if($46){label=8;break;}else{label=9;break;}
 case 8: 
 var $48=$12;
 var $49=$12;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+8)|0);
 var $52=HEAP32[(($51)>>2)];
 FUNCTION_TABLE[$52]($48);
 label=9;break;
 case 9: 
 var $53=(($__fmt<<24)>>24);
 switch(($53|0)){case 119:{ label=100;break;}case 120:{ label=103;break;}case 88:{ label=104;break;}case 121:{ label=108;break;}case 89:{ label=113;break;}case 37:{ label=115;break;}case 97:case 65:{ label=13;break;}case 98:case 66:case 104:{ label=15;break;}case 99:{ label=17;break;}case 100:case 101:{ label=21;break;}case 68:{ label=25;break;}case 70:{ label=26;break;}case 72:{ label=27;break;}case 73:{ label=30;break;}case 106:{ label=34;break;}case 109:{ label=37;break;}case 77:{ label=40;break;}case 110:case 116:{ label=43;break;}case 112:{ label=80;break;}case 114:{ label=94;break;}case 82:{ label=95;break;}case 83:{ label=96;break;}case 84:{ label=99;break;}default:{label=153;break;}}break;
 case 10: 
 var $55$0 = ___cxa_find_matching_catch(-1, -1); var $55$1 = tempRet0;
 var $56=(($12+4)|0);
 var $57=$56;
 var $58=(tempValue=HEAP32[(($57)>>2)],HEAP32[(($57)>>2)]=tempValue+-1,tempValue);
 var $59=($58|0)==0;
 if($59){label=11;break;}else{label=12;break;}
 case 11: 
 var $61=$12;
 var $62=$12;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+8)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($61);
 label=12;break;
 case 12: 
 ___resumeException($55$0)
 case 13: 
 var $67=(($__e)|0);
 var $68=HEAP32[(($67)>>2)];
 var $69=(($this+8)|0);
 var $70=$69;
 var $71=HEAP32[(($70)>>2)];
 var $72=HEAP32[(($71)>>2)];
 var $73=FUNCTION_TABLE[$72]($69);
 var $74=(($73+168)|0);
 var $75=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$68,$73,$74,$42,$__err,0);
 var $76=$75;
 var $77=$73;
 var $78=((($76)-($77))|0);
 var $79=($78|0)<168;
 if($79){label=14;break;}else{label=154;break;}
 case 14: 
 var $81=(($__tm+24)|0);
 var $82=(((($78|0))/(12))&-1);
 var $83=(((($82|0))%(7))&-1);
 HEAP32[(($81)>>2)]=$83;
 label=154;break;
 case 15: 
 var $85=(($__e)|0);
 var $86=HEAP32[(($85)>>2)];
 var $87=(($this+8)|0);
 var $88=$87;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+4)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=FUNCTION_TABLE[$91]($87);
 var $93=(($92+288)|0);
 var $94=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$86,$92,$93,$42,$__err,0);
 var $95=$94;
 var $96=$92;
 var $97=((($95)-($96))|0);
 var $98=($97|0)<288;
 if($98){label=16;break;}else{label=154;break;}
 case 16: 
 var $100=(($__tm+16)|0);
 var $101=(((($97|0))/(12))&-1);
 var $102=(((($101|0))%(12))&-1);
 HEAP32[(($100)>>2)]=$102;
 label=154;break;
 case 17: 
 var $104=(($this+8)|0);
 var $105=$104;
 var $106=HEAP32[(($105)>>2)];
 var $107=(($106+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=FUNCTION_TABLE[$108]($104);
 var $110=(($__b)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=(($__e)|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=$109;
 var $115=HEAP8[($114)];
 var $116=$115&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=19;break;}else{label=18;break;}
 case 18: 
 var $119=(($109+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=(($109+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $128=$122;var $127=$120;label=20;break;
 case 19: 
 var $124=(($109+4)|0);
 var $125=($115&255);
 var $126=$125>>>1;
 var $128=$126;var $127=$124;label=20;break;
 case 20: 
 var $127;
 var $128;
 var $129=(($127+($128<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($2,$this,$111,$113,$__iob,$__err,$__tm,$127,$129);
 var $130=(($2)|0);
 var $131=HEAP32[(($130)>>2)];
 HEAP32[(($110)>>2)]=$131;
 label=154;break;
 case 21: 
 var $133=(($__tm+12)|0);
 var $134=(($__e)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$135,$__err,$42,2);
 var $137=HEAP32[(($__err)>>2)];
 var $138=$137&4;
 var $139=($138|0)==0;
 if($139){label=22;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($136)-(1))|0);
 var $141=($_off_i>>>0)<31;
 if($141){label=23;break;}else{label=24;break;}
 case 23: 
 HEAP32[(($133)>>2)]=$136;
 label=154;break;
 case 24: 
 var $144=$137|4;
 HEAP32[(($__err)>>2)]=$144;
 label=154;break;
 case 25: 
 var $146=(($__b)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($__e)|0);
 var $149=HEAP32[(($148)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($3,$this,$147,$149,$__iob,$__err,$__tm,5048,5080);
 var $150=(($3)|0);
 var $151=HEAP32[(($150)>>2)];
 HEAP32[(($146)>>2)]=$151;
 label=154;break;
 case 26: 
 var $153=(($__b)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($__e)|0);
 var $156=HEAP32[(($155)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($4,$this,$154,$156,$__iob,$__err,$__tm,4912,4944);
 var $157=(($4)|0);
 var $158=HEAP32[(($157)>>2)];
 HEAP32[(($153)>>2)]=$158;
 label=154;break;
 case 27: 
 var $160=(($__e)|0);
 var $161=HEAP32[(($160)>>2)];
 var $162=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$161,$__err,$42,2);
 var $163=HEAP32[(($__err)>>2)];
 var $164=$163&4;
 var $165=($164|0)==0;
 var $166=($162|0)<24;
 var $or_cond_i=$165&$166;
 if($or_cond_i){label=28;break;}else{label=29;break;}
 case 28: 
 var $168=(($__tm+8)|0);
 HEAP32[(($168)>>2)]=$162;
 label=154;break;
 case 29: 
 var $170=$163|4;
 HEAP32[(($__err)>>2)]=$170;
 label=154;break;
 case 30: 
 var $172=(($__tm+8)|0);
 var $173=(($__e)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$174,$__err,$42,2);
 var $176=HEAP32[(($__err)>>2)];
 var $177=$176&4;
 var $178=($177|0)==0;
 if($178){label=31;break;}else{label=33;break;}
 case 31: 
 var $_off_i12=((($175)-(1))|0);
 var $180=($_off_i12>>>0)<12;
 if($180){label=32;break;}else{label=33;break;}
 case 32: 
 HEAP32[(($172)>>2)]=$175;
 label=154;break;
 case 33: 
 var $183=$176|4;
 HEAP32[(($__err)>>2)]=$183;
 label=154;break;
 case 34: 
 var $185=(($__e)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$186,$__err,$42,3);
 var $188=HEAP32[(($__err)>>2)];
 var $189=$188&4;
 var $190=($189|0)==0;
 var $191=($187|0)<366;
 var $or_cond_i15=$190&$191;
 if($or_cond_i15){label=35;break;}else{label=36;break;}
 case 35: 
 var $193=(($__tm+28)|0);
 HEAP32[(($193)>>2)]=$187;
 label=154;break;
 case 36: 
 var $195=$188|4;
 HEAP32[(($__err)>>2)]=$195;
 label=154;break;
 case 37: 
 var $197=(($__e)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$198,$__err,$42,2);
 var $200=HEAP32[(($__err)>>2)];
 var $201=$200&4;
 var $202=($201|0)==0;
 var $203=($199|0)<13;
 var $or_cond_i18=$202&$203;
 if($or_cond_i18){label=38;break;}else{label=39;break;}
 case 38: 
 var $205=(($__tm+16)|0);
 var $206=((($199)-(1))|0);
 HEAP32[(($205)>>2)]=$206;
 label=154;break;
 case 39: 
 var $208=$200|4;
 HEAP32[(($__err)>>2)]=$208;
 label=154;break;
 case 40: 
 var $210=(($__e)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$211,$__err,$42,2);
 var $213=HEAP32[(($__err)>>2)];
 var $214=$213&4;
 var $215=($214|0)==0;
 var $216=($212|0)<60;
 var $or_cond_i21=$215&$216;
 if($or_cond_i21){label=41;break;}else{label=42;break;}
 case 41: 
 var $218=(($__tm+4)|0);
 HEAP32[(($218)>>2)]=$212;
 label=154;break;
 case 42: 
 var $220=$213|4;
 HEAP32[(($__err)>>2)]=$220;
 label=154;break;
 case 43: 
 var $222=(($__e)|0);
 var $223=HEAP32[(($222)>>2)];
 var $224=(($__b)|0);
 var $225=$37;
 var $_sroa_059_0=$223;label=44;break;
 case 44: 
 var $_sroa_059_0;
 var $226=HEAP32[(($224)>>2)];
 var $227=($226|0)==0;
 if($227){var $244=1;label=51;break;}else{label=45;break;}
 case 45: 
 var $229=(($226+12)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=(($226+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($230|0)==($232|0);
 if($233){label=46;break;}else{label=47;break;}
 case 46: 
 var $235=$226;
 var $236=HEAP32[(($235)>>2)];
 var $237=(($236+36)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=FUNCTION_TABLE[$238]($226);
 var $_0_i_i_i_i_i6=$239;label=48;break;
 case 47: 
 var $241=HEAP32[(($230)>>2)];
 var $_0_i_i_i_i_i6=$241;label=48;break;
 case 48: 
 var $_0_i_i_i_i_i6;
 var $242=($_0_i_i_i_i_i6|0)==-1;
 if($242){label=50;break;}else{label=49;break;}
 case 49: 
 var $_pre_i_i_i_i8=HEAP32[(($224)>>2)];
 var $phitmp_i_i_i_i9=($_pre_i_i_i_i8|0)==0;
 var $244=$phitmp_i_i_i_i9;label=51;break;
 case 50: 
 HEAP32[(($224)>>2)]=0;
 var $244=1;label=51;break;
 case 51: 
 var $244;
 var $245=($_sroa_059_0|0)==0;
 if($245){label=56;break;}else{label=52;break;}
 case 52: 
 var $247=(($_sroa_059_0+12)|0);
 var $248=HEAP32[(($247)>>2)];
 var $249=(($_sroa_059_0+16)|0);
 var $250=HEAP32[(($249)>>2)];
 var $251=($248|0)==($250|0);
 if($251){label=53;break;}else{label=54;break;}
 case 53: 
 var $253=$_sroa_059_0;
 var $254=HEAP32[(($253)>>2)];
 var $255=(($254+36)|0);
 var $256=HEAP32[(($255)>>2)];
 var $257=FUNCTION_TABLE[$256]($_sroa_059_0);
 var $_0_i_i1_i_i_i12=$257;label=55;break;
 case 54: 
 var $259=HEAP32[(($248)>>2)];
 var $_0_i_i1_i_i_i12=$259;label=55;break;
 case 55: 
 var $_0_i_i1_i_i_i12;
 var $260=($_0_i_i1_i_i_i12|0)==-1;
 if($260){label=56;break;}else{label=57;break;}
 case 56: 
 if($244){var $_pre_i3_i_i9_i=0;label=65;break;}else{var $_sroa_059_2=0;label=58;break;}
 case 57: 
 if($244){var $_sroa_059_2=$_sroa_059_0;label=58;break;}else{var $_pre_i3_i_i9_i=$_sroa_059_0;label=65;break;}
 case 58: 
 var $_sroa_059_2;
 var $261=HEAP32[(($224)>>2)];
 var $262=(($261+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($261+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=59;break;}else{label=60;break;}
 case 59: 
 var $268=$261;
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269+36)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=FUNCTION_TABLE[$271]($261);
 var $_0_i_i_i14=$272;label=61;break;
 case 60: 
 var $274=HEAP32[(($263)>>2)];
 var $_0_i_i_i14=$274;label=61;break;
 case 61: 
 var $_0_i_i_i14;
 var $275=HEAP32[(($225)>>2)];
 var $276=(($275+12)|0);
 var $277=HEAP32[(($276)>>2)];
 var $278=FUNCTION_TABLE[$277]($42,8192,$_0_i_i_i14);
 if($278){label=62;break;}else{var $_pre_i3_i_i9_i=$_sroa_059_2;label=65;break;}
 case 62: 
 var $280=HEAP32[(($224)>>2)];
 var $281=(($280+12)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=(($280+16)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($282|0)==($284|0);
 if($285){label=63;break;}else{label=64;break;}
 case 63: 
 var $287=$280;
 var $288=HEAP32[(($287)>>2)];
 var $289=(($288+40)|0);
 var $290=HEAP32[(($289)>>2)];
 var $291=FUNCTION_TABLE[$290]($280);
 var $_sroa_059_0=$_sroa_059_2;label=44;break;
 case 64: 
 var $293=(($282+4)|0);
 HEAP32[(($281)>>2)]=$293;
 var $_sroa_059_0=$_sroa_059_2;label=44;break;
 case 65: 
 var $_pre_i3_i_i9_i;
 var $294=HEAP32[(($224)>>2)];
 var $295=($294|0)==0;
 if($295){var $312=1;label=72;break;}else{label=66;break;}
 case 66: 
 var $297=(($294+12)|0);
 var $298=HEAP32[(($297)>>2)];
 var $299=(($294+16)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($298|0)==($300|0);
 if($301){label=67;break;}else{label=68;break;}
 case 67: 
 var $303=$294;
 var $304=HEAP32[(($303)>>2)];
 var $305=(($304+36)|0);
 var $306=HEAP32[(($305)>>2)];
 var $307=FUNCTION_TABLE[$306]($294);
 var $_0_i_i_i_i1_i16=$307;label=69;break;
 case 68: 
 var $309=HEAP32[(($298)>>2)];
 var $_0_i_i_i_i1_i16=$309;label=69;break;
 case 69: 
 var $_0_i_i_i_i1_i16;
 var $310=($_0_i_i_i_i1_i16|0)==-1;
 if($310){label=71;break;}else{label=70;break;}
 case 70: 
 var $_pre_i_i_i3_i18=HEAP32[(($224)>>2)];
 var $phitmp_i_i_i4_i19=($_pre_i_i_i3_i18|0)==0;
 var $312=$phitmp_i_i_i4_i19;label=72;break;
 case 71: 
 HEAP32[(($224)>>2)]=0;
 var $312=1;label=72;break;
 case 72: 
 var $312;
 var $313=($_pre_i3_i_i9_i|0)==0;
 if($313){label=77;break;}else{label=73;break;}
 case 73: 
 var $315=(($_pre_i3_i_i9_i+12)|0);
 var $316=HEAP32[(($315)>>2)];
 var $317=(($_pre_i3_i_i9_i+16)|0);
 var $318=HEAP32[(($317)>>2)];
 var $319=($316|0)==($318|0);
 if($319){label=74;break;}else{label=75;break;}
 case 74: 
 var $321=$_pre_i3_i_i9_i;
 var $322=HEAP32[(($321)>>2)];
 var $323=(($322+36)|0);
 var $324=HEAP32[(($323)>>2)];
 var $325=FUNCTION_TABLE[$324]($_pre_i3_i_i9_i);
 var $_0_i_i1_i_i7_i22=$325;label=76;break;
 case 75: 
 var $327=HEAP32[(($316)>>2)];
 var $_0_i_i1_i_i7_i22=$327;label=76;break;
 case 76: 
 var $_0_i_i1_i_i7_i22;
 var $328=($_0_i_i1_i_i7_i22|0)==-1;
 if($328){label=77;break;}else{label=78;break;}
 case 77: 
 if($312){label=79;break;}else{label=154;break;}
 case 78: 
 if($312){label=154;break;}else{label=79;break;}
 case 79: 
 var $330=HEAP32[(($__err)>>2)];
 var $331=$330|2;
 HEAP32[(($__err)>>2)]=$331;
 label=154;break;
 case 80: 
 var $333=(($__tm+8)|0);
 var $334=(($__e)|0);
 var $335=HEAP32[(($334)>>2)];
 var $336=(($this+8)|0);
 var $337=$336;
 var $338=HEAP32[(($337)>>2)];
 var $339=(($338+8)|0);
 var $340=HEAP32[(($339)>>2)];
 var $341=FUNCTION_TABLE[$340]($336);
 var $342=$341;
 var $343=HEAP8[($342)];
 var $344=$343&1;
 var $345=(($344<<24)>>24)==0;
 if($345){label=82;break;}else{label=81;break;}
 case 81: 
 var $347=(($341+4)|0);
 var $348=HEAP32[(($347)>>2)];
 var $352=$348;label=83;break;
 case 82: 
 var $350=($343&255);
 var $351=$350>>>1;
 var $352=$351;label=83;break;
 case 83: 
 var $352;
 var $353=(($341+12)|0);
 var $354=$353;
 var $355=HEAP8[($354)];
 var $356=$355&1;
 var $357=(($356<<24)>>24)==0;
 if($357){label=85;break;}else{label=84;break;}
 case 84: 
 var $359=(($341+16)|0);
 var $360=HEAP32[(($359)>>2)];
 var $364=$360;label=86;break;
 case 85: 
 var $362=($355&255);
 var $363=$362>>>1;
 var $364=$363;label=86;break;
 case 86: 
 var $364;
 var $365=(((-$364))|0);
 var $366=($352|0)==($365|0);
 if($366){label=87;break;}else{label=88;break;}
 case 87: 
 var $368=HEAP32[(($__err)>>2)];
 var $369=$368|4;
 HEAP32[(($__err)>>2)]=$369;
 label=154;break;
 case 88: 
 var $371=(($341+24)|0);
 var $372=__ZNSt3__114__scan_keywordINS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEPKNS_12basic_stringIwS3_NS_9allocatorIwEEEENS_5ctypeIwEEEET0_RT_SE_SD_SD_RKT1_Rjb($__b,$335,$341,$371,$42,$__err,0);
 var $373=$372;
 var $374=$341;
 var $375=((($373)-($374))|0);
 var $376=($372|0)==($341|0);
 if($376){label=89;break;}else{label=91;break;}
 case 89: 
 var $378=HEAP32[(($333)>>2)];
 var $379=($378|0)==12;
 if($379){label=90;break;}else{label=91;break;}
 case 90: 
 HEAP32[(($333)>>2)]=0;
 label=154;break;
 case 91: 
 var $382=($375|0)==12;
 if($382){label=92;break;}else{label=154;break;}
 case 92: 
 var $384=HEAP32[(($333)>>2)];
 var $385=($384|0)<12;
 if($385){label=93;break;}else{label=154;break;}
 case 93: 
 var $387=((($384)+(12))|0);
 HEAP32[(($333)>>2)]=$387;
 label=154;break;
 case 94: 
 var $389=(($__b)|0);
 var $390=HEAP32[(($389)>>2)];
 var $391=(($__e)|0);
 var $392=HEAP32[(($391)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($5,$this,$390,$392,$__iob,$__err,$__tm,5000,5044);
 var $393=(($5)|0);
 var $394=HEAP32[(($393)>>2)];
 HEAP32[(($389)>>2)]=$394;
 label=154;break;
 case 95: 
 var $396=(($__b)|0);
 var $397=HEAP32[(($396)>>2)];
 var $398=(($__e)|0);
 var $399=HEAP32[(($398)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($6,$this,$397,$399,$__iob,$__err,$__tm,4976,4996);
 var $400=(($6)|0);
 var $401=HEAP32[(($400)>>2)];
 HEAP32[(($396)>>2)]=$401;
 label=154;break;
 case 96: 
 var $403=(($__e)|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$404,$__err,$42,2);
 var $406=HEAP32[(($__err)>>2)];
 var $407=$406&4;
 var $408=($407|0)==0;
 var $409=($405|0)<61;
 var $or_cond_i24=$408&$409;
 if($or_cond_i24){label=97;break;}else{label=98;break;}
 case 97: 
 var $411=(($__tm)|0);
 HEAP32[(($411)>>2)]=$405;
 label=154;break;
 case 98: 
 var $413=$406|4;
 HEAP32[(($__err)>>2)]=$413;
 label=154;break;
 case 99: 
 var $415=(($__b)|0);
 var $416=HEAP32[(($415)>>2)];
 var $417=(($__e)|0);
 var $418=HEAP32[(($417)>>2)];
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($7,$this,$416,$418,$__iob,$__err,$__tm,4944,4976);
 var $419=(($7)|0);
 var $420=HEAP32[(($419)>>2)];
 HEAP32[(($415)>>2)]=$420;
 label=154;break;
 case 100: 
 var $422=(($__e)|0);
 var $423=HEAP32[(($422)>>2)];
 var $424=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$423,$__err,$42,1);
 var $425=HEAP32[(($__err)>>2)];
 var $426=$425&4;
 var $427=($426|0)==0;
 var $428=($424|0)<7;
 var $or_cond_i27=$427&$428;
 if($or_cond_i27){label=101;break;}else{label=102;break;}
 case 101: 
 var $430=(($__tm+24)|0);
 HEAP32[(($430)>>2)]=$424;
 label=154;break;
 case 102: 
 var $432=$425|4;
 HEAP32[(($__err)>>2)]=$432;
 label=154;break;
 case 103: 
 var $434=$this;
 var $435=HEAP32[(($434)>>2)];
 var $436=(($435+20)|0);
 var $437=HEAP32[(($436)>>2)];
 var $438=(($__b)|0);
 var $439=HEAP32[(($438)>>2)];
 var $440=(($8)|0);
 HEAP32[(($440)>>2)]=$439;
 var $441=(($__e)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=(($9)|0);
 HEAP32[(($443)>>2)]=$442;
 FUNCTION_TABLE[$437]($agg_result,$this,$8,$9,$__iob,$__err,$__tm);
 label=155;break;
 case 104: 
 var $445=(($this+8)|0);
 var $446=$445;
 var $447=HEAP32[(($446)>>2)];
 var $448=(($447+24)|0);
 var $449=HEAP32[(($448)>>2)];
 var $450=FUNCTION_TABLE[$449]($445);
 var $451=(($__b)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=(($__e)|0);
 var $454=HEAP32[(($453)>>2)];
 var $455=$450;
 var $456=HEAP8[($455)];
 var $457=$456&1;
 var $458=(($457<<24)>>24)==0;
 if($458){label=106;break;}else{label=105;break;}
 case 105: 
 var $460=(($450+8)|0);
 var $461=HEAP32[(($460)>>2)];
 var $462=(($450+4)|0);
 var $463=HEAP32[(($462)>>2)];
 var $469=$463;var $468=$461;label=107;break;
 case 106: 
 var $465=(($450+4)|0);
 var $466=($456&255);
 var $467=$466>>>1;
 var $469=$467;var $468=$465;label=107;break;
 case 107: 
 var $468;
 var $469;
 var $470=(($468+($469<<2))|0);
 __ZNKSt3__18time_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE3getES4_S4_RNS_8ios_baseERjP2tmPKwSC_($10,$this,$452,$454,$__iob,$__err,$__tm,$468,$470);
 var $471=(($10)|0);
 var $472=HEAP32[(($471)>>2)];
 HEAP32[(($451)>>2)]=$472;
 label=154;break;
 case 108: 
 var $474=(($__tm+20)|0);
 var $475=(($__e)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$476,$__err,$42,4);
 var $478=HEAP32[(($__err)>>2)];
 var $479=$478&4;
 var $480=($479|0)==0;
 if($480){label=109;break;}else{label=154;break;}
 case 109: 
 var $482=($477|0)<69;
 if($482){label=110;break;}else{label=111;break;}
 case 110: 
 var $484=((($477)+(2000))|0);
 var $__t_0_i=$484;label=112;break;
 case 111: 
 var $_off_i33=((($477)-(69))|0);
 var $486=($_off_i33>>>0)<31;
 var $487=((($477)+(1900))|0);
 var $__i=($486?$487:$477);
 var $__t_0_i=$__i;label=112;break;
 case 112: 
 var $__t_0_i;
 var $489=((($__t_0_i)-(1900))|0);
 HEAP32[(($474)>>2)]=$489;
 label=154;break;
 case 113: 
 var $491=(($__e)|0);
 var $492=HEAP32[(($491)>>2)];
 var $493=__ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$492,$__err,$42,4);
 var $494=HEAP32[(($__err)>>2)];
 var $495=$494&4;
 var $496=($495|0)==0;
 if($496){label=114;break;}else{label=154;break;}
 case 114: 
 var $498=(($__tm+20)|0);
 var $499=((($493)-(1900))|0);
 HEAP32[(($498)>>2)]=$499;
 label=154;break;
 case 115: 
 var $501=(($__e)|0);
 var $502=HEAP32[(($501)>>2)];
 var $503=(($__b)|0);
 var $504=HEAP32[(($503)>>2)];
 var $505=($504|0)==0;
 if($505){var $522=1;label=122;break;}else{label=116;break;}
 case 116: 
 var $507=(($504+12)|0);
 var $508=HEAP32[(($507)>>2)];
 var $509=(($504+16)|0);
 var $510=HEAP32[(($509)>>2)];
 var $511=($508|0)==($510|0);
 if($511){label=117;break;}else{label=118;break;}
 case 117: 
 var $513=$504;
 var $514=HEAP32[(($513)>>2)];
 var $515=(($514+36)|0);
 var $516=HEAP32[(($515)>>2)];
 var $517=FUNCTION_TABLE[$516]($504);
 var $_0_i_i_i_i_i=$517;label=119;break;
 case 118: 
 var $519=HEAP32[(($508)>>2)];
 var $_0_i_i_i_i_i=$519;label=119;break;
 case 119: 
 var $_0_i_i_i_i_i;
 var $520=($_0_i_i_i_i_i|0)==-1;
 if($520){label=121;break;}else{label=120;break;}
 case 120: 
 var $_pre_i_i_i_i=HEAP32[(($503)>>2)];
 var $phitmp_i_i_i_i=($_pre_i_i_i_i|0)==0;
 var $522=$phitmp_i_i_i_i;label=122;break;
 case 121: 
 HEAP32[(($503)>>2)]=0;
 var $522=1;label=122;break;
 case 122: 
 var $522;
 var $523=($502|0)==0;
 if($523){label=127;break;}else{label=123;break;}
 case 123: 
 var $525=(($502+12)|0);
 var $526=HEAP32[(($525)>>2)];
 var $527=(($502+16)|0);
 var $528=HEAP32[(($527)>>2)];
 var $529=($526|0)==($528|0);
 if($529){label=124;break;}else{label=125;break;}
 case 124: 
 var $531=$502;
 var $532=HEAP32[(($531)>>2)];
 var $533=(($532+36)|0);
 var $534=HEAP32[(($533)>>2)];
 var $535=FUNCTION_TABLE[$534]($502);
 var $_0_i_i1_i_i_i=$535;label=126;break;
 case 125: 
 var $537=HEAP32[(($526)>>2)];
 var $_0_i_i1_i_i_i=$537;label=126;break;
 case 126: 
 var $_0_i_i1_i_i_i;
 var $538=($_0_i_i1_i_i_i|0)==-1;
 if($538){label=127;break;}else{label=128;break;}
 case 127: 
 if($522){label=129;break;}else{var $_pre_i3_i_i915_i=0;label=130;break;}
 case 128: 
 if($522){var $_pre_i3_i_i915_i=$502;label=130;break;}else{label=129;break;}
 case 129: 
 var $540=HEAP32[(($__err)>>2)];
 var $541=$540|6;
 HEAP32[(($__err)>>2)]=$541;
 label=154;break;
 case 130: 
 var $_pre_i3_i_i915_i;
 var $542=HEAP32[(($503)>>2)];
 var $543=(($542+12)|0);
 var $544=HEAP32[(($543)>>2)];
 var $545=(($542+16)|0);
 var $546=HEAP32[(($545)>>2)];
 var $547=($544|0)==($546|0);
 if($547){label=131;break;}else{label=132;break;}
 case 131: 
 var $549=$542;
 var $550=HEAP32[(($549)>>2)];
 var $551=(($550+36)|0);
 var $552=HEAP32[(($551)>>2)];
 var $553=FUNCTION_TABLE[$552]($542);
 var $_0_i_i_i=$553;label=133;break;
 case 132: 
 var $555=HEAP32[(($544)>>2)];
 var $_0_i_i_i=$555;label=133;break;
 case 133: 
 var $_0_i_i_i;
 var $556=$37;
 var $557=HEAP32[(($556)>>2)];
 var $558=(($557+52)|0);
 var $559=HEAP32[(($558)>>2)];
 var $560=FUNCTION_TABLE[$559]($42,$_0_i_i_i,0);
 var $561=(($560<<24)>>24)==37;
 if($561){label=135;break;}else{label=134;break;}
 case 134: 
 var $563=HEAP32[(($__err)>>2)];
 var $564=$563|4;
 HEAP32[(($__err)>>2)]=$564;
 label=154;break;
 case 135: 
 var $566=HEAP32[(($503)>>2)];
 var $567=(($566+12)|0);
 var $568=HEAP32[(($567)>>2)];
 var $569=(($566+16)|0);
 var $570=HEAP32[(($569)>>2)];
 var $571=($568|0)==($570|0);
 if($571){label=136;break;}else{label=137;break;}
 case 136: 
 var $573=$566;
 var $574=HEAP32[(($573)>>2)];
 var $575=(($574+40)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=FUNCTION_TABLE[$576]($566);
 label=138;break;
 case 137: 
 var $579=(($568+4)|0);
 HEAP32[(($567)>>2)]=$579;
 label=138;break;
 case 138: 
 var $580=HEAP32[(($503)>>2)];
 var $581=($580|0)==0;
 if($581){var $598=1;label=145;break;}else{label=139;break;}
 case 139: 
 var $583=(($580+12)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($580+16)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=($584|0)==($586|0);
 if($587){label=140;break;}else{label=141;break;}
 case 140: 
 var $589=$580;
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+36)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=FUNCTION_TABLE[$592]($580);
 var $_0_i_i_i_i1_i=$593;label=142;break;
 case 141: 
 var $595=HEAP32[(($584)>>2)];
 var $_0_i_i_i_i1_i=$595;label=142;break;
 case 142: 
 var $_0_i_i_i_i1_i;
 var $596=($_0_i_i_i_i1_i|0)==-1;
 if($596){label=144;break;}else{label=143;break;}
 case 143: 
 var $_pre_i_i_i3_i=HEAP32[(($503)>>2)];
 var $phitmp_i_i_i4_i=($_pre_i_i_i3_i|0)==0;
 var $598=$phitmp_i_i_i4_i;label=145;break;
 case 144: 
 HEAP32[(($503)>>2)]=0;
 var $598=1;label=145;break;
 case 145: 
 var $598;
 var $599=($_pre_i3_i_i915_i|0)==0;
 if($599){label=150;break;}else{label=146;break;}
 case 146: 
 var $601=(($_pre_i3_i_i915_i+12)|0);
 var $602=HEAP32[(($601)>>2)];
 var $603=(($_pre_i3_i_i915_i+16)|0);
 var $604=HEAP32[(($603)>>2)];
 var $605=($602|0)==($604|0);
 if($605){label=147;break;}else{label=148;break;}
 case 147: 
 var $607=$_pre_i3_i_i915_i;
 var $608=HEAP32[(($607)>>2)];
 var $609=(($608+36)|0);
 var $610=HEAP32[(($609)>>2)];
 var $611=FUNCTION_TABLE[$610]($_pre_i3_i_i915_i);
 var $_0_i_i1_i_i7_i=$611;label=149;break;
 case 148: 
 var $613=HEAP32[(($602)>>2)];
 var $_0_i_i1_i_i7_i=$613;label=149;break;
 case 149: 
 var $_0_i_i1_i_i7_i;
 var $614=($_0_i_i1_i_i7_i|0)==-1;
 if($614){label=150;break;}else{label=151;break;}
 case 150: 
 if($598){label=152;break;}else{label=154;break;}
 case 151: 
 if($598){label=154;break;}else{label=152;break;}
 case 152: 
 var $616=HEAP32[(($__err)>>2)];
 var $617=$616|2;
 HEAP32[(($__err)>>2)]=$617;
 label=154;break;
 case 153: 
 var $619=HEAP32[(($__err)>>2)];
 var $620=$619|4;
 HEAP32[(($__err)>>2)]=$620;
 label=154;break;
 case 154: 
 var $621=(($__b)|0);
 var $622=HEAP32[(($621)>>2)];
 var $623=(($agg_result)|0);
 HEAP32[(($623)>>2)]=$622;
 label=155;break;
 case 155: 
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__120__get_up_to_n_digitsIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEEEiRT0_S5_RjRKNS_5ctypeIT_EEi($__b,$__e_0,$__err,$__ct,$__n){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $20=1;label=8;break;}else{label=2;break;}
 case 2: 
 var $5=(($2+12)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=(($2+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($6|0)==($8|0);
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 var $11=$2;
 var $12=HEAP32[(($11)>>2)];
 var $13=(($12+36)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=FUNCTION_TABLE[$14]($2);
 var $_0_i_i_i_i=$15;label=5;break;
 case 4: 
 var $17=HEAP32[(($6)>>2)];
 var $_0_i_i_i_i=$17;label=5;break;
 case 5: 
 var $_0_i_i_i_i;
 var $18=($_0_i_i_i_i|0)==-1;
 if($18){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre_i_i_i=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $20=$phitmp_i_i_i;label=8;break;
 case 7: 
 HEAP32[(($1)>>2)]=0;
 var $20=1;label=8;break;
 case 8: 
 var $20;
 var $21=($__e_0|0)==0;
 if($21){label=13;break;}else{label=9;break;}
 case 9: 
 var $23=(($__e_0+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($__e_0+16)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($24|0)==($26|0);
 if($27){label=10;break;}else{label=11;break;}
 case 10: 
 var $29=$__e_0;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+36)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__e_0);
 var $_0_i_i1_i_i=$33;label=12;break;
 case 11: 
 var $35=HEAP32[(($24)>>2)];
 var $_0_i_i1_i_i=$35;label=12;break;
 case 12: 
 var $_0_i_i1_i_i;
 var $36=($_0_i_i1_i_i|0)==-1;
 if($36){label=13;break;}else{label=14;break;}
 case 13: 
 if($20){label=15;break;}else{var $40=0;label=16;break;}
 case 14: 
 if($20){var $40=$__e_0;label=16;break;}else{label=15;break;}
 case 15: 
 var $38=HEAP32[(($__err)>>2)];
 var $39=$38|6;
 HEAP32[(($__err)>>2)]=$39;
 var $_01=0;label=59;break;
 case 16: 
 var $40;
 var $41=HEAP32[(($1)>>2)];
 var $42=(($41+12)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=(($41+16)|0);
 var $45=HEAP32[(($44)>>2)];
 var $46=($43|0)==($45|0);
 if($46){label=17;break;}else{label=18;break;}
 case 17: 
 var $48=$41;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+36)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=FUNCTION_TABLE[$51]($41);
 var $_0_i_i=$52;label=19;break;
 case 18: 
 var $54=HEAP32[(($43)>>2)];
 var $_0_i_i=$54;label=19;break;
 case 19: 
 var $_0_i_i;
 var $55=$__ct;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+12)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=FUNCTION_TABLE[$58]($__ct,2048,$_0_i_i);
 if($59){label=21;break;}else{label=20;break;}
 case 20: 
 var $61=HEAP32[(($__err)>>2)];
 var $62=$61|4;
 HEAP32[(($__err)>>2)]=$62;
 var $_01=0;label=59;break;
 case 21: 
 var $64=$__ct;
 var $65=HEAP32[(($64)>>2)];
 var $66=(($65+52)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=FUNCTION_TABLE[$67]($__ct,$_0_i_i,0);
 var $69=(($68<<24)>>24);
 var $70=HEAP32[(($1)>>2)];
 var $71=(($70+12)|0);
 var $72=HEAP32[(($71)>>2)];
 var $73=(($70+16)|0);
 var $74=HEAP32[(($73)>>2)];
 var $75=($72|0)==($74|0);
 if($75){label=22;break;}else{label=23;break;}
 case 22: 
 var $77=$70;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+40)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=FUNCTION_TABLE[$80]($70);
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$40;var $_pre_i3_i_i10=$40;label=24;break;
 case 23: 
 var $83=(($72+4)|0);
 HEAP32[(($71)>>2)]=$83;
 var $__r_0_in=$69;var $_0_in=$__n;var $84=$40;var $_pre_i3_i_i10=$40;label=24;break;
 case 24: 
 var $_pre_i3_i_i10;
 var $84;
 var $_0_in;
 var $__r_0_in;
 var $__r_0=((($__r_0_in)-(48))|0);
 var $_0=((($_0_in)-(1))|0);
 var $85=HEAP32[(($1)>>2)];
 var $86=($85|0)==0;
 if($86){var $103=1;label=31;break;}else{label=25;break;}
 case 25: 
 var $88=(($85+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(($85+16)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=($89|0)==($91|0);
 if($92){label=26;break;}else{label=27;break;}
 case 26: 
 var $94=$85;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+36)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=FUNCTION_TABLE[$97]($85);
 var $_0_i_i_i_i2=$98;label=28;break;
 case 27: 
 var $100=HEAP32[(($89)>>2)];
 var $_0_i_i_i_i2=$100;label=28;break;
 case 28: 
 var $_0_i_i_i_i2;
 var $101=($_0_i_i_i_i2|0)==-1;
 if($101){label=30;break;}else{label=29;break;}
 case 29: 
 var $_pre_i_i_i4=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i5=($_pre_i_i_i4|0)==0;
 var $103=$phitmp_i_i_i5;label=31;break;
 case 30: 
 HEAP32[(($1)>>2)]=0;
 var $103=1;label=31;break;
 case 31: 
 var $103;
 var $104=($84|0)==0;
 if($104){var $121=1;var $120=0;var $_pre_i3_i_i25=$_pre_i3_i_i10;label=36;break;}else{label=32;break;}
 case 32: 
 var $106=(($84+12)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=(($84+16)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=($107|0)==($109|0);
 if($110){label=33;break;}else{label=34;break;}
 case 33: 
 var $112=$84;
 var $113=HEAP32[(($112)>>2)];
 var $114=(($113+36)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=FUNCTION_TABLE[$115]($84);
 var $_0_i_i1_i_i8=$116;label=35;break;
 case 34: 
 var $118=HEAP32[(($107)>>2)];
 var $_0_i_i1_i_i8=$118;label=35;break;
 case 35: 
 var $_0_i_i1_i_i8;
 var $119=($_0_i_i1_i_i8|0)==-1;
 var $phitmp_i4_i_i11=($_pre_i3_i_i10|0)==0;
 var $__pre_i3_i_i10=($119?0:$_pre_i3_i_i10);
 var $__pre_i3_i_i103=($119?0:$_pre_i3_i_i10);
 var $_phitmp_i4_i_i11=($119?1:$phitmp_i4_i_i11);
 var $121=$_phitmp_i4_i_i11;var $120=$__pre_i3_i_i103;var $_pre_i3_i_i25=$__pre_i3_i_i10;label=36;break;
 case 36: 
 var $_pre_i3_i_i25;
 var $120;
 var $121;
 var $tmp_i_i13=$103^$121;
 var $122=($_0|0)>0;
 var $_=$tmp_i_i13&$122;
 var $123=HEAP32[(($1)>>2)];
 if($_){label=37;break;}else{label=44;break;}
 case 37: 
 var $125=(($123+12)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($123+16)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($126|0)==($128|0);
 if($129){label=38;break;}else{label=39;break;}
 case 38: 
 var $131=$123;
 var $132=HEAP32[(($131)>>2)];
 var $133=(($132+36)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=FUNCTION_TABLE[$134]($123);
 var $_0_i_i14=$135;label=40;break;
 case 39: 
 var $137=HEAP32[(($126)>>2)];
 var $_0_i_i14=$137;label=40;break;
 case 40: 
 var $_0_i_i14;
 var $138=HEAP32[(($55)>>2)];
 var $139=(($138+12)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=FUNCTION_TABLE[$140]($__ct,2048,$_0_i_i14);
 if($141){label=41;break;}else{var $_01=$__r_0;label=59;break;}
 case 41: 
 var $143=((($__r_0)*(10))&-1);
 var $144=HEAP32[(($64)>>2)];
 var $145=(($144+52)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=FUNCTION_TABLE[$146]($__ct,$_0_i_i14,0);
 var $148=(($147<<24)>>24);
 var $149=((($148)+($143))|0);
 var $150=HEAP32[(($1)>>2)];
 var $151=(($150+12)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=(($150+16)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=($152|0)==($154|0);
 if($155){label=42;break;}else{label=43;break;}
 case 42: 
 var $157=$150;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+40)|0);
 var $160=HEAP32[(($159)>>2)];
 var $161=FUNCTION_TABLE[$160]($150);
 var $__r_0_in=$149;var $_0_in=$_0;var $84=$120;var $_pre_i3_i_i10=$_pre_i3_i_i25;label=24;break;
 case 43: 
 var $163=(($152+4)|0);
 HEAP32[(($151)>>2)]=$163;
 var $__r_0_in=$149;var $_0_in=$_0;var $84=$120;var $_pre_i3_i_i10=$_pre_i3_i_i25;label=24;break;
 case 44: 
 var $165=($123|0)==0;
 if($165){var $182=1;label=51;break;}else{label=45;break;}
 case 45: 
 var $167=(($123+12)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=(($123+16)|0);
 var $170=HEAP32[(($169)>>2)];
 var $171=($168|0)==($170|0);
 if($171){label=46;break;}else{label=47;break;}
 case 46: 
 var $173=$123;
 var $174=HEAP32[(($173)>>2)];
 var $175=(($174+36)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=FUNCTION_TABLE[$176]($123);
 var $_0_i_i_i_i17=$177;label=48;break;
 case 47: 
 var $179=HEAP32[(($168)>>2)];
 var $_0_i_i_i_i17=$179;label=48;break;
 case 48: 
 var $_0_i_i_i_i17;
 var $180=($_0_i_i_i_i17|0)==-1;
 if($180){label=50;break;}else{label=49;break;}
 case 49: 
 var $_pre_i_i_i19=HEAP32[(($1)>>2)];
 var $phitmp_i_i_i20=($_pre_i_i_i19|0)==0;
 var $182=$phitmp_i_i_i20;label=51;break;
 case 50: 
 HEAP32[(($1)>>2)]=0;
 var $182=1;label=51;break;
 case 51: 
 var $182;
 var $183=($_pre_i3_i_i25|0)==0;
 if($183){label=56;break;}else{label=52;break;}
 case 52: 
 var $185=(($_pre_i3_i_i25+12)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=(($_pre_i3_i_i25+16)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=($186|0)==($188|0);
 if($189){label=53;break;}else{label=54;break;}
 case 53: 
 var $191=$_pre_i3_i_i25;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+36)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=FUNCTION_TABLE[$194]($_pre_i3_i_i25);
 var $_0_i_i1_i_i23=$195;label=55;break;
 case 54: 
 var $197=HEAP32[(($186)>>2)];
 var $_0_i_i1_i_i23=$197;label=55;break;
 case 55: 
 var $_0_i_i1_i_i23;
 var $198=($_0_i_i1_i_i23|0)==-1;
 if($198){label=56;break;}else{label=57;break;}
 case 56: 
 if($182){label=58;break;}else{var $_01=$__r_0;label=59;break;}
 case 57: 
 if($182){var $_01=$__r_0;label=59;break;}else{label=58;break;}
 case 58: 
 var $200=HEAP32[(($__err)>>2)];
 var $201=$200|2;
 HEAP32[(($__err)>>2)]=$201;
 var $_01=$__r_0;label=59;break;
 case 59: 
 var $_01;
 return $_01;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(19232)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19232);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i_i$1=$12$1;var $eh_lpad_body_i_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((17128)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$19$1;var $eh_lpad_body_i_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i_i$0;
 var $eh_lpad_body_i_i_i$1;
 var $20=$eh_lpad_body_i_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=($this|0)==0;
 if($21){label=12;break;}else{label=11;break;}
 case 11: 
 var $23=$this;
 _free($23);
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(19232)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19232);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$12$1;var $eh_lpad_body_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((17128)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$19$1;var $eh_lpad_body_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $20=$eh_lpad_body_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_RNS_8ios_baseEcPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+112)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i=sp;
 var $__nar=(sp)+(8);
 var $3=(($__nar)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $4=(($fmt_i)|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 HEAP8[($4)]=37;
 var $5=(($fmt_i+1)|0);
 HEAP8[($5)]=$__fmt;
 var $6=(($fmt_i+2)|0);
 HEAP8[($6)]=$__mod;
 var $7=(($fmt_i+3)|0);
 HEAP8[($7)]=0;
 var $8=(($__mod<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($5)]=$__mod;
 HEAP8[($6)]=$__fmt;
 label=3;break;
 case 3: 
 var $10=(($this+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=_strftime_l($3,100,$4,$__tm,$11);
 var $13=(($__nar+$12)|0);
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $14=(($__s)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($12|0)==0;
 if($16){var $39=$15;label=9;break;}else{var $_01_i_i=$3;var $18=$15;var $17=$15;label=4;break;}
 case 4: 
 var $17;
 var $18;
 var $_01_i_i;
 var $19=HEAP8[($_01_i_i)];
 var $20=($18|0)==0;
 if($20){var $36=0;var $35=$17;label=8;break;}else{label=5;break;}
 case 5: 
 var $22=(($18+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=(($18+28)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=($23|0)==($25|0);
 if($26){label=7;break;}else{label=6;break;}
 case 6: 
 var $27=(($23+1)|0);
 HEAP32[(($22)>>2)]=$27;
 HEAP8[($23)]=$19;
 var $36=$18;var $35=$17;label=8;break;
 case 7: 
 var $28=$18;
 var $29=HEAP32[(($28)>>2)];
 var $30=(($29+52)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=($19&255);
 var $33=FUNCTION_TABLE[$31]($18,$32);
 var $34=($33|0)==-1;
 var $__i=($34?0:$17);
 var $_7_i=($34?0:$18);
 var $36=$_7_i;var $35=$__i;label=8;break;
 case 8: 
 var $35;
 var $36;
 var $37=(($_01_i_i+1)|0);
 var $38=($37|0)==($13|0);
 if($38){var $39=$35;label=9;break;}else{var $_01_i_i=$37;var $18=$36;var $17=$35;label=4;break;}
 case 9: 
 var $39;
 var $40=(($agg_result)|0);
 HEAP32[(($40)>>2)]=$39;
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(19232)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19232);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i_i$1=$12$1;var $eh_lpad_body_i_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((17128)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i_i$1=$19$1;var $eh_lpad_body_i_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i_i$0;
 var $eh_lpad_body_i_i_i$1;
 var $20=$eh_lpad_body_i_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 var $21=($this|0)==0;
 if($21){label=12;break;}else{label=11;break;}
 case 11: 
 var $23=$this;
 _free($23);
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=HEAP8[(19232)];
 var $4=(($3<<24)>>24)==0;
 if($4){label=2;break;}else{label=6;break;}
 case 2: 
 var $6=___cxa_guard_acquire(19232);
 var $7=($6|0)==0;
 if($7){label=6;break;}else{label=3;break;}
 case 3: 
 var $9=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$9;

 label=6;break;
 case 5: 
 var $12$0 = ___cxa_find_matching_catch(-1, -1,0); var $12$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$12$1;var $eh_lpad_body_i_i$0=$12$0;label=9;break;
 case 6: 
 var $14=HEAP32[((17128)>>2)];
 var $15=($2|0)==($14|0);
 if($15){label=10;break;}else{label=7;break;}
 case 7: 
 var $17=HEAP32[(($1)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($17) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $19$0 = ___cxa_find_matching_catch(-1, -1,0); var $19$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$19$1;var $eh_lpad_body_i_i$0=$19$0;label=9;break;
 case 9: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $20=$eh_lpad_body_i_i$0;
 ___clang_call_terminate($20);
 throw "Reached an unreachable!";
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18time_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_RNS_8ios_baseEwPK2tmcc($agg_result,$this,$__s,$0,$1,$__tm,$__fmt,$__mod){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+528)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $fmt_i_i=sp;
 var $__nar_i=(sp)+(8);
 var $mb_i=(sp)+(112);
 var $__nb_i=(sp)+(120);
 var $__nar=(sp)+(128);
 var $3=$__nar;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $4=(($__nar)|0);
 var $5=$mb_i;
 var $$etemp$1$0=8;
 var $$etemp$1$1=0;

 var $6=$__nb_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $tmpcast_i=$mb_i;
 var $7=(($__nar_i)|0);
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 var $8=(($fmt_i_i)|0);
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 HEAP8[($8)]=37;
 var $9=(($fmt_i_i+1)|0);
 HEAP8[($9)]=$__fmt;
 var $10=(($fmt_i_i+2)|0);
 HEAP8[($10)]=$__mod;
 var $11=(($fmt_i_i+3)|0);
 HEAP8[($11)]=0;
 var $12=(($__mod<<24)>>24)==0;
 if($12){label=3;break;}else{label=2;break;}
 case 2: 
 HEAP8[($9)]=$__mod;
 HEAP8[($10)]=$__fmt;
 label=3;break;
 case 3: 
 var $14=(($this+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=_strftime_l($7,100,$8,$__tm,$15);
 var $$etemp$5$0=4;
 var $$etemp$5$1=0;

 var $$etemp$6$0=0;
 var $$etemp$6$1=0;
 var $st$7$0=(($mb_i)|0);
 HEAP32[(($st$7$0)>>2)]=$$etemp$6$0;
 var $st$8$1=(($mb_i+4)|0);
 HEAP32[(($st$8$1)>>2)]=$$etemp$6$1;
 HEAP32[(($__nb_i)>>2)]=$7;
 var $17=HEAP32[(($14)>>2)];
 var $18=_uselocale($17);
 var $19=_mbsrtowcs($4,$__nb_i,100,$tmpcast_i);
 var $20=($18|0)==0;
 if($20){label=6;break;}else{label=4;break;}
 case 4: 
 var $22=(function() { try { __THREW__ = 0; return _uselocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1,0); var $24$1 = tempRet0;
 var $25=$24$0;
 ___clang_call_terminate($25);
 throw "Reached an unreachable!";
 case 6: 
 var $26=($19|0)==-1;
 if($26){label=7;break;}else{label=8;break;}
 case 7: 
 __ZNSt3__121__throw_runtime_errorEPKc(2152);
 throw "Reached an unreachable!";
 case 8: 
 var $28=(($__nar+($19<<2))|0);
 var $$etemp$9$0=100;
 var $$etemp$9$1=0;

 var $$etemp$10$0=8;
 var $$etemp$10$1=0;

 var $$etemp$11$0=4;
 var $$etemp$11$1=0;

 var $29=(($__s)|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=($19|0)==0;
 if($31){var $55=$30;label=15;break;}else{var $_01_i_i=$4;var $33=$30;var $32=$30;label=9;break;}
 case 9: 
 var $32;
 var $33;
 var $_01_i_i;
 var $34=HEAP32[(($_01_i_i)>>2)];
 var $35=($33|0)==0;
 if($35){var $52=0;var $51=$32;label=14;break;}else{label=10;break;}
 case 10: 
 var $37=(($33+24)|0);
 var $38=HEAP32[(($37)>>2)];
 var $39=(($33+28)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=($38|0)==($40|0);
 if($41){label=11;break;}else{label=12;break;}
 case 11: 
 var $43=$33;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+52)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=FUNCTION_TABLE[$46]($33,$34);
 var $_0_i_i_i_i=$47;label=13;break;
 case 12: 
 var $49=(($38+4)|0);
 HEAP32[(($37)>>2)]=$49;
 HEAP32[(($38)>>2)]=$34;
 var $_0_i_i_i_i=$34;label=13;break;
 case 13: 
 var $_0_i_i_i_i;
 var $50=($_0_i_i_i_i|0)==-1;
 var $__i=($50?0:$32);
 var $_7_i=($50?0:$33);
 var $52=$_7_i;var $51=$__i;label=14;break;
 case 14: 
 var $51;
 var $52;
 var $53=(($_01_i_i+4)|0);
 var $54=($53|0)==($28|0);
 if($54){var $55=$51;label=15;break;}else{var $_01_i_i=$53;var $33=$52;var $32=$51;label=9;break;}
 case 15: 
 var $55;
 var $56=(($agg_result)|0);
 HEAP32[(($56)>>2)]=$55;
 var $$etemp$12$0=400;
 var $$etemp$12$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb0EED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb0EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[($1)]=2;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 HEAP8[($3)]=45;
 var $4=(($2+2)|0);
 HEAP8[($4)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIcLb1EED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIcLb1EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 127;
}


function __ZNKSt3__110moneypunctIcLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[($1)]=2;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 HEAP8[($3)]=45;
 var $4=(($2+2)|0);
 HEAP8[($4)]=0;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIcLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb0EED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIwLb0EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb0EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE16do_negative_signEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[($1)]=2;
 var $2=(($agg_result+4)|0);
 var $_012_i_i=1;var $_03_i_i=$2;label=2;break;
 case 2: 
 var $_03_i_i;
 var $_012_i_i;
 var $3=((($_012_i_i)-(1))|0);
 var $4=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_012_i_i=$3;var $_03_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110moneypunctIwLb0EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb0EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__110moneypunctIwLb1EED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__110moneypunctIwLb1EED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_decimal_pointEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_thousands_sepEv($this){
 var label=0;


 return 2147483647;
}


function __ZNKSt3__110moneypunctIwLb1EE11do_groupingEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE14do_curr_symbolEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_positive_signEv($agg_result,$this){
 var label=0;


 var $this2_i_i_i=$agg_result;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE16do_negative_signEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$agg_result;
 HEAP8[($1)]=2;
 var $2=(($agg_result+4)|0);
 var $_012_i_i=1;var $_03_i_i=$2;label=2;break;
 case 2: 
 var $_03_i_i;
 var $_012_i_i;
 var $3=((($_012_i_i)-(1))|0);
 var $4=(($_03_i_i+4)|0);
 HEAP32[(($_03_i_i)>>2)]=45;
 var $5=($3|0)==0;
 if($5){label=3;break;}else{var $_012_i_i=$3;var $_03_i_i=$4;label=2;break;}
 case 3: 
 var $6=(($2+4)|0);
 HEAP32[(($6)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__110moneypunctIwLb1EE14do_frac_digitsEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_pos_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNKSt3__110moneypunctIwLb1EE13do_neg_formatEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 tempBigInt=67109634;HEAP8[($1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($1)+(3))|0)]=tempBigInt&0xff;
 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+264)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__neg=(sp)+(136);
 var $__atoms=(sp)+(144);
 var $__nbuf=(sp)+(160);
 var $1=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=538;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((18672)>>2)];
 var $13=($12|0)==-1;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $15=(($__p_i_i_i_i)|0);
 HEAP32[(($15)>>2)]=18672;
 var $16=(($__p_i_i_i_i+4)|0);
 HEAP32[(($16)>>2)]=(202);
 var $17=(($__p_i_i_i_i+8)|0);
 HEAP32[(($17)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=14;break; }
 case 3: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $18=HEAP32[((18676)>>2)];
 var $19=((($18)-(1))|0);
 var $20=(($6+12)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($6+8)|0);
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 var $26=$22;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=$28>>2;
 var $30=($29>>>0)>($19>>>0);
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=(($25+($19<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){label=5;break;}else{label=7;break;}
 case 5: 
 var $34=___cxa_allocate_exception(4);
 var $35=$34;
 HEAP32[(($35)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($34,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $37=$32;
 HEAP8[($__neg)]=0;
 var $38=(($__e)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($__iob+4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$39,$__intl,$7,$41,$__err,$__neg,$37,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 if($42){label=9;break;}else{label=48;break;}
 case 9: 
 var $45=(($__atoms)|0);
 var $46=$32;
 var $47=HEAP32[(($46)>>2)];
 var $48=(($47+32)|0);
 var $49=HEAP32[(($48)>>2)];
 var $50=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$49]($37,4896,4906,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $51=(($__nbuf)|0);
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 var $52=HEAP32[(($__wn)>>2)];
 var $53=HEAP32[(($2)>>2)];
 var $54=$52;
 var $55=$53;
 var $56=((($54)-($55))|0);
 var $57=($56|0)>98;
 if($57){label=11;break;}else{var $__nc_0=$51;var $77=0;label=18;break;}
 case 11: 
 var $58=((($56)+(2))|0);
 var $59=_malloc($58);
 var $60=($59|0)==0;
 if($60){label=12;break;}else{var $__nc_0=$59;var $77=$59;label=18;break;}
 case 12: 
 var $62=___cxa_allocate_exception(4);
 var $63=$62;
 HEAP32[(($63)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($62,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $69=0;label=15;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $65$0 = ___cxa_find_matching_catch(-1, -1); var $65$1 = tempRet0;
 var $66=$65$0;
 var $67=$65$1;
 var $_0=$66;var $_01=$67;label=68;break;
 case 15: 
 var $69;
 var $70$0 = ___cxa_find_matching_catch(-1, -1); var $70$1 = tempRet0;
 var $eh_lpad_body$1=$70$1;var $eh_lpad_body$0=$70$0;var $71=$69;label=16;break;
 case 16: 
 var $71;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $72=$eh_lpad_body$0;
 var $73=$eh_lpad_body$1;
 var $74=($71|0)==0;
 if($74){var $_0=$72;var $_01=$73;label=68;break;}else{label=17;break;}
 case 17: 
 _free($71);
 var $_0=$72;var $_01=$73;label=68;break;
 case 18: 
 var $77;
 var $__nc_0;
 var $78=HEAP8[($__neg)];
 var $79=(($78<<24)>>24)==0;
 if($79){var $__nc_1=$__nc_0;label=20;break;}else{label=19;break;}
 case 19: 
 var $81=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$81;label=20;break;
 case 20: 
 var $__nc_1;
 var $83=($53>>>0)<($52>>>0);
 if($83){label=21;break;}else{var $__nc_2_lcssa=$__nc_1;label=26;break;}
 case 21: 
 var $84=(($__atoms+10)|0);
 var $85=$__atoms;
 var $__nc_211=$__nc_1;var $__w_012=$53;label=22;break;
 case 22: 
 var $__w_012;
 var $__nc_211;
 var $87=HEAP8[($__w_012)];
 var $_01_i=$45;label=24;break;
 case 23: 
 var $89=($93|0)==($84|0);
 if($89){var $_0_lcssa_i=$84;label=25;break;}else{var $_01_i=$93;label=24;break;}
 case 24: 
 var $_01_i;
 var $91=HEAP8[($_01_i)];
 var $92=(($91<<24)>>24)==(($87<<24)>>24);
 var $93=(($_01_i+1)|0);
 if($92){var $_0_lcssa_i=$_01_i;label=25;break;}else{label=23;break;}
 case 25: 
 var $_0_lcssa_i;
 var $94=$_0_lcssa_i;
 var $95=((($94)-($85))|0);
 var $96=((4896+$95)|0);
 var $97=HEAP8[($96)];
 HEAP8[($__nc_211)]=$97;
 var $98=(($__w_012+1)|0);
 var $99=(($__nc_211+1)|0);
 var $100=HEAP32[(($__wn)>>2)];
 var $101=($98>>>0)<($100>>>0);
 if($101){var $__nc_211=$99;var $__w_012=$98;label=22;break;}else{var $__nc_2_lcssa=$99;label=26;break;}
 case 26: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $102=_sscanf($51,3784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $103=($102|0)==1;
 if($103){label=46;break;}else{label=27;break;}
 case 27: 
 var $105=___cxa_allocate_exception(8);
 var $106=$105;
 HEAP32[(($106)>>2)]=5256;
 label=28;break;
 case 28: 
 var $108=_malloc(28);
 var $109=($108|0)==0;
 if($109){label=29;break;}else{label=43;break;}
 case 29: 
 var $111=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $112=($111|0)==0;
 if($112){label=36;break;}else{label=30;break;}
 case 30: 
 var $114=$111;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$114]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $116=$lpad_phi_i$1;
 var $117=($116|0)<0;
 if($117){label=34;break;}else{var $eh_lpad_body6$1=$lpad_phi_i$1;var $eh_lpad_body6$0=$lpad_phi_i$0;label=39;break;}
 case 34: 
 var $119=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($119) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $121=___cxa_allocate_exception(4);
 var $122=$121;
 HEAP32[(($122)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($121,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=32;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1); var $125$1 = tempRet0;
 var $eh_lpad_body6$1=$125$1;var $eh_lpad_body6$0=$125$0;label=39;break;
 case 39: 
 var $eh_lpad_body6$0;
 var $eh_lpad_body6$1;
 var $126=$eh_lpad_body6$1;
 var $127=($126|0)<0;
 if($127){label=40;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body6$1;var $eh_lpad_body_i$0=$eh_lpad_body6$0;label=45;break;}
 case 40: 
 var $129=$eh_lpad_body6$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($129) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1); var $131$1 = tempRet0;
 var $eh_lpad_body_i$1=$131$1;var $eh_lpad_body_i$0=$131$0;label=45;break;
 case 43: 
 var $133=(($105+4)|0);
 var $134=$133;
 var $135=$108;
 var $136=(($108+4)|0);
 var $137=$136;
 HEAP32[(($137)>>2)]=15;
 HEAP32[(($135)>>2)]=15;
 var $138=(($108+12)|0);
 HEAP32[(($134)>>2)]=$138;
 var $139=(($108+8)|0);
 var $140=$139;
 HEAP32[(($140)>>2)]=0;
 assert(16 % 1 === 0);(_memcpy($138, 3632, 16)|0);
 (function() { try { __THREW__ = 0; return ___cxa_throw($105,11736,(236)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { var $69=$77;label=15;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $141=$105;

 ___cxa_free_exception($105);
 var $eh_lpad_body$1=$eh_lpad_body_i$1;var $eh_lpad_body$0=$eh_lpad_body_i$0;var $71=$77;label=16;break;
 case 46: 
 var $143=($77|0)==0;
 if($143){label=48;break;}else{label=47;break;}
 case 47: 
 _free($77);
 label=48;break;
 case 48: 
 var $145=(($__b)|0);
 var $146=HEAP32[(($145)>>2)];
 var $147=($146|0)==0;
 if($147){var $161=0;label=53;break;}else{label=49;break;}
 case 49: 
 var $149=(($146+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($146+16)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($150|0)==($152|0);
 if($153){label=50;break;}else{var $161=$146;label=53;break;}
 case 50: 
 var $154=$146;
 var $155=HEAP32[(($154)>>2)];
 var $156=(($155+36)|0);
 var $157=HEAP32[(($156)>>2)];
 var $158=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$157]($146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=14;break; }
 case 51: 
 var $159=($158|0)==-1;
 if($159){label=52;break;}else{var $161=$146;label=53;break;}
 case 52: 
 HEAP32[(($145)>>2)]=0;
 var $161=0;label=53;break;
 case 53: 
 var $161;
 var $162=($161|0)==0;
 var $163=HEAP32[(($38)>>2)];
 var $164=($163|0)==0;
 if($164){label=59;break;}else{label=54;break;}
 case 54: 
 var $166=(($163+12)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($163+16)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=($167|0)==($169|0);
 if($170){label=56;break;}else{label=55;break;}
 case 55: 
 if($162){label=62;break;}else{label=61;break;}
 case 56: 
 var $171=$163;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+36)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$174]($163) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=14;break; }
 case 57: 
 var $176=($175|0)==-1;
 if($176){label=58;break;}else{label=60;break;}
 case 58: 
 HEAP32[(($38)>>2)]=0;
 label=59;break;
 case 59: 
 if($162){label=61;break;}else{label=62;break;}
 case 60: 
 if($162){label=62;break;}else{label=61;break;}
 case 61: 
 var $179=HEAP32[(($__err)>>2)];
 var $180=$179|2;
 HEAP32[(($__err)>>2)]=$180;
 label=62;break;
 case 62: 
 var $182=(($agg_result)|0);
 HEAP32[(($182)>>2)]=$161;
 var $183=(($6+4)|0);
 var $184=$183;
 var $185=(tempValue=HEAP32[(($184)>>2)],HEAP32[(($184)>>2)]=tempValue+-1,tempValue);
 var $186=($185|0)==0;
 if($186){label=63;break;}else{label=64;break;}
 case 63: 
 var $188=$6;
 var $189=$6;
 var $190=HEAP32[(($189)>>2)];
 var $191=(($190+8)|0);
 var $192=HEAP32[(($191)>>2)];
 FUNCTION_TABLE[$192]($188);
 label=64;break;
 case 64: 
 var $193=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $194=($193|0)==0;
 if($194){label=67;break;}else{label=65;break;}
 case 65: 
 var $196=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$196]($193) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=66;break; }
 case 66: 
 var $198$0 = ___cxa_find_matching_catch(-1, -1,0); var $198$1 = tempRet0;
 var $199=$198$0;
 ___clang_call_terminate($199);
 throw "Reached an unreachable!";
 case 67: 
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 STACKTOP=sp;return;
 case 68: 
 var $_01;
 var $_0;
 var $200=(($6+4)|0);
 var $201=$200;
 var $202=(tempValue=HEAP32[(($201)>>2)],HEAP32[(($201)>>2)]=tempValue+-1,tempValue);
 var $203=($202|0)==0;
 if($203){label=69;break;}else{label=70;break;}
 case 69: 
 var $205=$6;
 var $206=$6;
 var $207=HEAP32[(($206)>>2)];
 var $208=(($207+8)|0);
 var $209=HEAP32[(($208)>>2)];
 FUNCTION_TABLE[$209]($205);
 label=70;break;
 case 70: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $210=($_pre|0)==0;
 if($210){label=73;break;}else{label=71;break;}
 case 71: 
 var $_pre20=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre20]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=72;break; }
 case 72: 
 var $213$0 = ___cxa_find_matching_catch(-1, -1,0); var $213$1 = tempRet0;
 var $214=$213$0;
 ___clang_call_terminate($214);
 throw "Reached an unreachable!";
 case 73: 
 var $215$0=$_0;
 var $215$1=0;
 var $216$0=$215$0;
 var $216$1=$_01;
 ___resumeException($216$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__112__do_nothingEPv($0){
 var label=0;


 return;
}


function __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+672)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i8_i=sp;
 var $__p_i_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=(sp)+(56);
 var $4=(sp)+(72);
 var $5=(sp)+(88);
 var $6=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 var $__gbuf=(sp)+(176);
 var $__pat=(sp)+(576);
 var $__grp=(sp)+(584);
 var $__sym=(sp)+(600);
 var $__psn=(sp)+(616);
 var $__nsn=(sp)+(632);
 var $__spaces=(sp)+(648);
 var $__et=(sp)+(664);
 var $11=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $12=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i9=$__sym;
 HEAP32[(($this2_i_i_i9)>>2)]=0; HEAP32[((($this2_i_i_i9)+(4))>>2)]=0; HEAP32[((($this2_i_i_i9)+(8))>>2)]=0;
 var $this2_i_i_i10=$__psn;
 HEAP32[(($this2_i_i_i10)>>2)]=0; HEAP32[((($this2_i_i_i10)+(4))>>2)]=0; HEAP32[((($this2_i_i_i10)+(8))>>2)]=0;
 var $this2_i_i_i12=$__nsn;
 HEAP32[(($this2_i_i_i12)>>2)]=0; HEAP32[((($this2_i_i_i12)+(4))>>2)]=0; HEAP32[((($this2_i_i_i12)+(8))>>2)]=0;
 var $this2_i_i_i15=$__spaces;
 HEAP32[(($this2_i_i_i15)>>2)]=0; HEAP32[((($this2_i_i_i15)+(4))>>2)]=0; HEAP32[((($this2_i_i_i15)+(8))>>2)]=0;
 var $13=$1;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $14=$2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $15=$3;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $16=$4;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $17=$5;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $18=$6;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $19=$7;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $20=$8;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $21=$9;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $22=$10;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 if($__intl){label=2;break;}else{label=36;break;}
 case 2: 
 var $tmpcast1_i=$1;
 var $24=$__p_i_i_i_i_i;
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $25=HEAP32[((19144)>>2)];
 var $26=($25|0)==-1;
 if($26){label=4;break;}else{label=3;break;}
 case 3: 
 var $28=(($__p_i_i_i_i_i)|0);
 HEAP32[(($28)>>2)]=19144;
 var $29=(($__p_i_i_i_i_i+4)|0);
 HEAP32[(($29)>>2)]=(202);
 var $30=(($__p_i_i_i_i_i+8)|0);
 HEAP32[(($30)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19144,$24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=94;break; }
 case 4: 
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $31=HEAP32[((19148)>>2)];
 var $32=((($31)-(1))|0);
 var $33=(($__loc_0_0_val+12)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=(($__loc_0_0_val+8)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=$34;
 var $38=$36;
 var $39=((($37)-($38))|0);
 var $40=$39>>2;
 var $41=($40>>>0)>($32>>>0);
 if($41){label=5;break;}else{label=6;break;}
 case 5: 
 var $42=(($36+($32<<2))|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=($43|0)==0;
 if($44){label=6;break;}else{label=8;break;}
 case 6: 
 var $45=___cxa_allocate_exception(4);
 var $46=$45;
 HEAP32[(($46)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($45,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=94;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $47=$43;
 var $48=$43;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+44)|0);
 var $51=HEAP32[(($50)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($tmpcast1_i,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=94;break; }
 case 9: 
 var $52=HEAP32[(($1)>>2)];
 HEAP32[(($__pat)>>2)]=$52;
 var $53=$43;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+32)|0);
 var $56=HEAP32[(($55)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$56]($2,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=94;break; }
 case 10: 
 var $57=HEAP8[($this2_i_i_i12)];
 var $58=$57&1;
 var $59=(($58<<24)>>24)==0;
 if($59){label=12;break;}else{label=11;break;}
 case 11: 
 var $61=(($__nsn+8)|0);
 var $62=HEAP32[(($61)>>2)];
 HEAP8[($62)]=0;
 var $63=(($__nsn+4)|0);
 HEAP32[(($63)>>2)]=0;
 label=13;break;
 case 12: 
 var $65=$__nsn;
 var $66=(($65+1)|0);
 HEAP8[($66)]=0;
 HEAP8[($this2_i_i_i12)]=0;
 label=13;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 var $69=$68$0;
 ___clang_call_terminate($69);
 throw "Reached an unreachable!";
 case 15: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i12)>>2)]=HEAP32[(($14)>>2)];HEAP32[((($this2_i_i_i12)+(4))>>2)]=HEAP32[((($14)+(4))>>2)];HEAP32[((($this2_i_i_i12)+(8))>>2)]=HEAP32[((($14)+(8))>>2)];
 HEAP32[(($14)>>2)]=0; HEAP32[((($14)+(4))>>2)]=0; HEAP32[((($14)+(8))>>2)]=0;
 var $70=HEAP32[(($53)>>2)];
 var $71=(($70+28)|0);
 var $72=HEAP32[(($71)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($3,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=94;break; }
 case 16: 
 var $73=HEAP8[($this2_i_i_i10)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=18;break;}else{label=17;break;}
 case 17: 
 var $77=(($__psn+8)|0);
 var $78=HEAP32[(($77)>>2)];
 HEAP8[($78)]=0;
 var $79=(($__psn+4)|0);
 HEAP32[(($79)>>2)]=0;
 label=19;break;
 case 18: 
 var $81=$__psn;
 var $82=(($81+1)|0);
 HEAP8[($82)]=0;
 HEAP8[($this2_i_i_i10)]=0;
 label=19;break;
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1,0); var $84$1 = tempRet0;
 var $85=$84$0;
 ___clang_call_terminate($85);
 throw "Reached an unreachable!";
 case 21: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i10)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($this2_i_i_i10)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($this2_i_i_i10)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 HEAP32[(($15)>>2)]=0; HEAP32[((($15)+(4))>>2)]=0; HEAP32[((($15)+(8))>>2)]=0;
 var $86=$43;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$89]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=94;break; }
 case 22: 
 var $91=HEAP32[(($86)>>2)];
 var $92=(($91+16)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$93]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=94;break; }
 case 23: 
 var $95=HEAP32[(($53)>>2)];
 var $96=(($95+20)|0);
 var $97=HEAP32[(($96)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($4,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=94;break; }
 case 24: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=26;break;}else{label=25;break;}
 case 25: 
 var $102=(($__grp+8)|0);
 var $103=HEAP32[(($102)>>2)];
 HEAP8[($103)]=0;
 var $104=(($__grp+4)|0);
 HEAP32[(($104)>>2)]=0;
 label=27;break;
 case 26: 
 var $106=$__grp;
 var $107=(($106+1)|0);
 HEAP8[($107)]=0;
 HEAP8[($this2_i_i_i)]=0;
 label=27;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=28;break; }
 case 28: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1,0); var $109$1 = tempRet0;
 var $110=$109$0;
 ___clang_call_terminate($110);
 throw "Reached an unreachable!";
 case 29: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 var $111=HEAP32[(($53)>>2)];
 var $112=(($111+24)|0);
 var $113=HEAP32[(($112)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($5,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=94;break; }
 case 30: 
 var $114=HEAP8[($this2_i_i_i9)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=32;break;}else{label=31;break;}
 case 31: 
 var $118=(($__sym+8)|0);
 var $119=HEAP32[(($118)>>2)];
 HEAP8[($119)]=0;
 var $120=(($__sym+4)|0);
 HEAP32[(($120)>>2)]=0;
 label=33;break;
 case 32: 
 var $122=$__sym;
 var $123=(($122+1)|0);
 HEAP8[($123)]=0;
 HEAP8[($this2_i_i_i9)]=0;
 label=33;break;
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=34;break; }
 case 34: 
 var $125$0 = ___cxa_find_matching_catch(-1, -1,0); var $125$1 = tempRet0;
 var $126=$125$0;
 ___clang_call_terminate($126);
 throw "Reached an unreachable!";
 case 35: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i9)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($this2_i_i_i9)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($this2_i_i_i9)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0; HEAP32[((($17)+(8))>>2)]=0;
 var $127=$43;
 var $128=HEAP32[(($127)>>2)];
 var $129=(($128+36)|0);
 var $130=HEAP32[(($129)>>2)];
 var $131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$130]($47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$131;var $__ts_0=$94;var $__dp_0=$90;label=70;break; } else { label=94;break; }
 case 36: 
 var $tmpcast_i=$6;
 var $133=$__p_i_i_i_i8_i;
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $134=HEAP32[((19152)>>2)];
 var $135=($134|0)==-1;
 if($135){label=38;break;}else{label=37;break;}
 case 37: 
 var $137=(($__p_i_i_i_i8_i)|0);
 HEAP32[(($137)>>2)]=19152;
 var $138=(($__p_i_i_i_i8_i+4)|0);
 HEAP32[(($138)>>2)]=(202);
 var $139=(($__p_i_i_i_i8_i+8)|0);
 HEAP32[(($139)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19152,$133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=94;break; }
 case 38: 
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $140=HEAP32[((19156)>>2)];
 var $141=((($140)-(1))|0);
 var $142=(($__loc_0_0_val+12)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=(($__loc_0_0_val+8)|0);
 var $145=HEAP32[(($144)>>2)];
 var $146=$143;
 var $147=$145;
 var $148=((($146)-($147))|0);
 var $149=$148>>2;
 var $150=($149>>>0)>($141>>>0);
 if($150){label=39;break;}else{label=40;break;}
 case 39: 
 var $151=(($145+($141<<2))|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=($152|0)==0;
 if($153){label=40;break;}else{label=42;break;}
 case 40: 
 var $154=___cxa_allocate_exception(4);
 var $155=$154;
 HEAP32[(($155)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($154,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=94;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $156=$152;
 var $157=$152;
 var $158=HEAP32[(($157)>>2)];
 var $159=(($158+44)|0);
 var $160=HEAP32[(($159)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$160]($tmpcast_i,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=94;break; }
 case 43: 
 var $161=HEAP32[(($6)>>2)];
 HEAP32[(($__pat)>>2)]=$161;
 var $162=$152;
 var $163=HEAP32[(($162)>>2)];
 var $164=(($163+32)|0);
 var $165=HEAP32[(($164)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$165]($7,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=94;break; }
 case 44: 
 var $166=HEAP8[($this2_i_i_i12)];
 var $167=$166&1;
 var $168=(($167<<24)>>24)==0;
 if($168){label=46;break;}else{label=45;break;}
 case 45: 
 var $170=(($__nsn+8)|0);
 var $171=HEAP32[(($170)>>2)];
 HEAP8[($171)]=0;
 var $172=(($__nsn+4)|0);
 HEAP32[(($172)>>2)]=0;
 label=47;break;
 case 46: 
 var $174=$__nsn;
 var $175=(($174+1)|0);
 HEAP8[($175)]=0;
 HEAP8[($this2_i_i_i12)]=0;
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=48;break; }
 case 48: 
 var $177$0 = ___cxa_find_matching_catch(-1, -1,0); var $177$1 = tempRet0;
 var $178=$177$0;
 ___clang_call_terminate($178);
 throw "Reached an unreachable!";
 case 49: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i12)>>2)]=HEAP32[(($19)>>2)];HEAP32[((($this2_i_i_i12)+(4))>>2)]=HEAP32[((($19)+(4))>>2)];HEAP32[((($this2_i_i_i12)+(8))>>2)]=HEAP32[((($19)+(8))>>2)];
 HEAP32[(($19)>>2)]=0; HEAP32[((($19)+(4))>>2)]=0; HEAP32[((($19)+(8))>>2)]=0;
 var $179=HEAP32[(($162)>>2)];
 var $180=(($179+28)|0);
 var $181=HEAP32[(($180)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$181]($8,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=94;break; }
 case 50: 
 var $182=HEAP8[($this2_i_i_i10)];
 var $183=$182&1;
 var $184=(($183<<24)>>24)==0;
 if($184){label=52;break;}else{label=51;break;}
 case 51: 
 var $186=(($__psn+8)|0);
 var $187=HEAP32[(($186)>>2)];
 HEAP8[($187)]=0;
 var $188=(($__psn+4)|0);
 HEAP32[(($188)>>2)]=0;
 label=53;break;
 case 52: 
 var $190=$__psn;
 var $191=(($190+1)|0);
 HEAP8[($191)]=0;
 HEAP8[($this2_i_i_i10)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $193$0 = ___cxa_find_matching_catch(-1, -1,0); var $193$1 = tempRet0;
 var $194=$193$0;
 ___clang_call_terminate($194);
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i10)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($this2_i_i_i10)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($this2_i_i_i10)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $195=$152;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+12)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]($156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=94;break; }
 case 56: 
 var $200=HEAP32[(($195)>>2)];
 var $201=(($200+16)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$202]($156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=94;break; }
 case 57: 
 var $204=HEAP32[(($162)>>2)];
 var $205=(($204+20)|0);
 var $206=HEAP32[(($205)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$206]($9,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=94;break; }
 case 58: 
 var $207=HEAP8[($this2_i_i_i)];
 var $208=$207&1;
 var $209=(($208<<24)>>24)==0;
 if($209){label=60;break;}else{label=59;break;}
 case 59: 
 var $211=(($__grp+8)|0);
 var $212=HEAP32[(($211)>>2)];
 HEAP8[($212)]=0;
 var $213=(($__grp+4)|0);
 HEAP32[(($213)>>2)]=0;
 label=61;break;
 case 60: 
 var $215=$__grp;
 var $216=(($215+1)|0);
 HEAP8[($216)]=0;
 HEAP8[($this2_i_i_i)]=0;
 label=61;break;
 case 61: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=62;break; }
 case 62: 
 var $218$0 = ___cxa_find_matching_catch(-1, -1,0); var $218$1 = tempRet0;
 var $219=$218$0;
 ___clang_call_terminate($219);
 throw "Reached an unreachable!";
 case 63: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 HEAP32[(($21)>>2)]=0; HEAP32[((($21)+(4))>>2)]=0; HEAP32[((($21)+(8))>>2)]=0;
 var $220=HEAP32[(($162)>>2)];
 var $221=(($220+24)|0);
 var $222=HEAP32[(($221)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$222]($10,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=94;break; }
 case 64: 
 var $223=HEAP8[($this2_i_i_i9)];
 var $224=$223&1;
 var $225=(($224<<24)>>24)==0;
 if($225){label=66;break;}else{label=65;break;}
 case 65: 
 var $227=(($__sym+8)|0);
 var $228=HEAP32[(($227)>>2)];
 HEAP8[($228)]=0;
 var $229=(($__sym+4)|0);
 HEAP32[(($229)>>2)]=0;
 label=67;break;
 case 66: 
 var $231=$__sym;
 var $232=(($231+1)|0);
 HEAP8[($232)]=0;
 HEAP8[($this2_i_i_i9)]=0;
 label=67;break;
 case 67: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=68;break; }
 case 68: 
 var $234$0 = ___cxa_find_matching_catch(-1, -1,0); var $234$1 = tempRet0;
 var $235=$234$0;
 ___clang_call_terminate($235);
 throw "Reached an unreachable!";
 case 69: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i9)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($this2_i_i_i9)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($this2_i_i_i9)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0;
 var $236=$152;
 var $237=HEAP32[(($236)>>2)];
 var $238=(($237+36)|0);
 var $239=HEAP32[(($238)>>2)];
 var $240=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$239]($156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$240;var $__ts_0=$203;var $__dp_0=$199;label=70;break; } else { label=94;break; }
 case 70: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $242=(($__gbuf+400)|0);
 var $243=(($__wb)|0);
 var $244=HEAP32[(($243)>>2)];
 HEAP32[(($__wn)>>2)]=$244;
 var $245=(($__b)|0);
 var $246=$__pat;
 var $247=(($__ct+8)|0);
 var $248=$__nsn;
 var $249=(($248+1)|0);
 var $250=(($__nsn+4)|0);
 var $251=(($__nsn+8)|0);
 var $252=$__psn;
 var $253=(($252+1)|0);
 var $254=(($__psn+4)|0);
 var $255=(($__psn+8)|0);
 var $256=$__flags&512;
 var $257=($256|0)!=0;
 var $258=$__sym;
 var $259=(($258+1)|0);
 var $260=(($__sym+8)|0);
 var $261=(($__sym+4)|0);
 var $262=$__spaces;
 var $263=(($262+1)|0);
 var $264=(($__spaces+8)|0);
 var $265=(($__spaces+4)|0);
 var $266=(($246+3)|0);
 var $267=(($__wb+4)|0);
 var $268=(($__grp+4)|0);
 var $269=(($__spaces)|0);
 var $273=$__we;var $free214358=538;var $272=$12;var $271=$12;var $270=$242;var $__p_0362=0;var $__trailing_sign_0364=0;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=71;break;
 case 71: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $__trailing_sign_0364;
 var $__p_0362;
 var $270;
 var $271;
 var $272;
 var $free214358;
 var $273;
 var $274=HEAP32[(($245)>>2)];
 var $275=($274|0)==0;
 if($275){var $289=0;label=77;break;}else{label=72;break;}
 case 72: 
 var $277=(($274+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=(($274+16)|0);
 var $280=HEAP32[(($279)>>2)];
 var $281=($278|0)==($280|0);
 if($281){label=73;break;}else{var $289=$274;label=77;break;}
 case 73: 
 var $282=$274;
 var $283=HEAP32[(($282)>>2)];
 var $284=(($283+36)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$285]($274) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 74: 
 var $287=($286|0)==-1;
 if($287){label=76;break;}else{label=75;break;}
 case 75: 
 var $_pre_i_i_i19=HEAP32[(($245)>>2)];
 var $289=$_pre_i_i_i19;label=77;break;
 case 76: 
 HEAP32[(($245)>>2)]=0;
 var $289=0;label=77;break;
 case 77: 
 var $289;
 var $290=($289|0)==0;
 var $291=($__e_sroa_0_0|0)==0;
 if($291){label=82;break;}else{label=78;break;}
 case 78: 
 var $293=(($__e_sroa_0_0+12)|0);
 var $294=HEAP32[(($293)>>2)];
 var $295=(($__e_sroa_0_0+16)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=($294|0)==($296|0);
 if($297){label=80;break;}else{label=79;break;}
 case 79: 
 if($290){var $__e_sroa_0_2=$__e_sroa_0_0;label=84;break;}else{var $free214_lcssa=$free214358;var $_lcssa302=$272;var $_lcssa318=$271;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;var $__e_sroa_0_21=$__e_sroa_0_0;label=411;break;}
 case 80: 
 var $298=$__e_sroa_0_0;
 var $299=HEAP32[(($298)>>2)];
 var $300=(($299+36)|0);
 var $301=HEAP32[(($300)>>2)];
 var $302=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$301]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 81: 
 var $303=($302|0)==-1;
 if($303){label=82;break;}else{label=83;break;}
 case 82: 
 if($290){var $free214_lcssa=$free214358;var $_lcssa302=$272;var $_lcssa318=$271;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;var $__e_sroa_0_21=0;label=411;break;}else{var $__e_sroa_0_2=0;label=84;break;}
 case 83: 
 if($290){var $__e_sroa_0_2=$__e_sroa_0_0;label=84;break;}else{var $free214_lcssa=$free214358;var $_lcssa302=$272;var $_lcssa318=$271;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;var $__e_sroa_0_21=$__e_sroa_0_0;label=411;break;}
 case 84: 
 var $__e_sroa_0_2;
 var $306=(($246+$__p_0362)|0);
 var $307=HEAP8[($306)];
 var $308=(($307<<24)>>24);
 switch(($308|0)){case 1:{ label=114;break;}case 0:{ label=136;break;}case 3:{ label=170;break;}case 2:{ label=239;break;}case 4:{ var $__ng_0=0;var $911=$270;var $910=$271;var $909=$272;var $free213=$free214358;var $908=$273;var $__e_sroa_0_10=$__e_sroa_0_2;label=291;break;}default:{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;}}break;
 case 85: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $309=$_lcssa302;var $free218=$free214_lcssa;label=95;break;
 case 86: 
 var $free218_ph_ph_ph;
 var $_ph_ph_ph;
 var $lpad_loopexit2$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit2$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit2$1;var $lpad_phi$0=$lpad_loopexit2$0;var $309=$_ph_ph_ph;var $free218=$free218_ph_ph_ph;label=95;break;
 case 87: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $309=$909;var $free218=$free213;label=95;break;
 case 88: 
 var $lpad_loopexit4$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit4$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit4$1;var $lpad_phi$0=$lpad_loopexit4$0;var $309=$1085;var $free218=$free216;label=95;break;
 case 89: 
 var $lpad_nonloopexit5$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit5$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit5$1;var $lpad_phi$0=$lpad_nonloopexit5$0;var $309=$1085;var $free218=$free216;label=95;break;
 case 90: 
 var $lpad_loopexit274$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit274$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit274$1;var $lpad_phi$0=$lpad_loopexit274$0;var $309=$272;var $free218=$free214358;label=95;break;
 case 91: 
 var $lpad_loopexit280$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit280$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit280$1;var $lpad_phi$0=$lpad_loopexit280$0;var $309=$272;var $free218=$free214358;label=95;break;
 case 92: 
 var $free218_ph_ph243_ph_ph_ph_ph_ph;
 var $_ph_ph244_ph_ph_ph_ph_ph;
 var $lpad_loopexit8$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit8$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit8$1;var $lpad_phi$0=$lpad_loopexit8$0;var $309=$_ph_ph244_ph_ph_ph_ph_ph;var $free218=$free218_ph_ph243_ph_ph_ph_ph_ph;label=95;break;
 case 93: 
 var $lpad_nonloopexit9$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit9$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit9$1;var $lpad_phi$0=$lpad_nonloopexit9$0;var $309=$909;var $free218=$free213;label=95;break;
 case 94: 
 var $lpad_nonloopexit283$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit283$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit283$1;var $lpad_phi$0=$lpad_nonloopexit283$0;var $309=$12;var $free218=538;label=95;break;
 case 95: 
 var $free218;
 var $309;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $310=HEAP8[($this2_i_i_i15)];
 var $311=$310&1;
 var $312=(($311<<24)>>24)==0;
 if($312){label=98;break;}else{label=96;break;}
 case 96: 
 var $314=(($__spaces+8)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($315|0)==0;
 if($316){label=98;break;}else{label=97;break;}
 case 97: 
 _free($315);
 label=98;break;
 case 98: 
 var $318=HEAP8[($this2_i_i_i12)];
 var $319=$318&1;
 var $320=(($319<<24)>>24)==0;
 if($320){label=101;break;}else{label=99;break;}
 case 99: 
 var $322=(($__nsn+8)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=($323|0)==0;
 if($324){label=101;break;}else{label=100;break;}
 case 100: 
 _free($323);
 label=101;break;
 case 101: 
 var $326=HEAP8[($this2_i_i_i10)];
 var $327=$326&1;
 var $328=(($327<<24)>>24)==0;
 if($328){label=104;break;}else{label=102;break;}
 case 102: 
 var $330=(($__psn+8)|0);
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 if($332){label=104;break;}else{label=103;break;}
 case 103: 
 _free($331);
 label=104;break;
 case 104: 
 var $334=HEAP8[($this2_i_i_i9)];
 var $335=$334&1;
 var $336=(($335<<24)>>24)==0;
 if($336){label=107;break;}else{label=105;break;}
 case 105: 
 var $338=(($__sym+8)|0);
 var $339=HEAP32[(($338)>>2)];
 var $340=($339|0)==0;
 if($340){label=107;break;}else{label=106;break;}
 case 106: 
 _free($339);
 label=107;break;
 case 107: 
 var $342=HEAP8[($this2_i_i_i)];
 var $343=$342&1;
 var $344=(($343<<24)>>24)==0;
 if($344){label=110;break;}else{label=108;break;}
 case 108: 
 var $346=(($__grp+8)|0);
 var $347=HEAP32[(($346)>>2)];
 var $348=($347|0)==0;
 if($348){label=110;break;}else{label=109;break;}
 case 109: 
 _free($347);
 label=110;break;
 case 110: 
 var $350=($309|0)==0;
 if($350){label=113;break;}else{label=111;break;}
 case 111: 
 var $352=$309;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free218]($352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=113;break; } else { label=112;break; }
 case 112: 
 var $354$0 = ___cxa_find_matching_catch(-1, -1,0); var $354$1 = tempRet0;
 var $355=$354$0;
 ___clang_call_terminate($355);
 throw "Reached an unreachable!";
 case 113: 
 ___resumeException($lpad_phi$0)
 case 114: 
 var $cond=($__p_0362|0)==3;
 if($cond){var $free214_lcssa=$free214358;var $_lcssa302=$272;var $_lcssa318=$271;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;var $__e_sroa_0_21=$__e_sroa_0_2;label=411;break;}else{label=115;break;}
 case 115: 
 var $358=HEAP32[(($245)>>2)];
 var $359=(($358+12)|0);
 var $360=HEAP32[(($359)>>2)];
 var $361=(($358+16)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=($360|0)==($362|0);
 if($363){label=116;break;}else{label=118;break;}
 case 116: 
 var $365=$358;
 var $366=HEAP32[(($365)>>2)];
 var $367=(($366+36)|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$368]($358) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=117;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 117: 
 var $extract_t_i29=(($369)&255);
 var $_0_i_off0_i30=$extract_t_i29;label=119;break;
 case 118: 
 var $371=HEAP8[($360)];
 var $_0_i_off0_i30=$371;label=119;break;
 case 119: 
 var $_0_i_off0_i30;
 var $isascii1_i=(($_0_i_off0_i30<<24)>>24)>-1;
 if($isascii1_i){label=120;break;}else{label=135;break;}
 case 120: 
 var $372=(($_0_i_off0_i30<<24)>>24);
 var $373=HEAP32[(($247)>>2)];
 var $374=(($373+($372<<1))|0);
 var $375=HEAP16[(($374)>>1)];
 var $376=$375&8192;
 var $377=(($376<<16)>>16)==0;
 if($377){label=135;break;}else{label=121;break;}
 case 121: 
 var $379=HEAP32[(($245)>>2)];
 var $380=(($379+12)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(($379+16)|0);
 var $383=HEAP32[(($382)>>2)];
 var $384=($381|0)==($383|0);
 if($384){label=122;break;}else{label=124;break;}
 case 122: 
 var $386=$379;
 var $387=HEAP32[(($386)>>2)];
 var $388=(($387+40)|0);
 var $389=HEAP32[(($388)>>2)];
 var $390=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$389]($379) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=123;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 123: 
 var $extract_t_i33=(($390)&255);
 var $_0_i_off0_i34=$extract_t_i33;label=125;break;
 case 124: 
 var $392=(($381+1)|0);
 HEAP32[(($380)>>2)]=$392;
 var $393=HEAP8[($381)];
 var $_0_i_off0_i34=$393;label=125;break;
 case 125: 
 var $_0_i_off0_i34;
 var $394=HEAP8[($this2_i_i_i15)];
 var $395=$394&1;
 var $396=(($395<<24)>>24)!=0;
 if($396){label=127;break;}else{label=126;break;}
 case 126: 
 var $398=($394&255);
 var $399=$398>>>1;
 var $__sz_0_i=$399;var $__cap_0_i=10;label=128;break;
 case 127: 
 var $401=HEAP32[(($269)>>2)];
 var $402=$401&-2;
 var $403=((($402)-(1))|0);
 var $404=HEAP32[(($265)>>2)];
 var $__sz_0_i=$404;var $__cap_0_i=$403;label=128;break;
 case 128: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $406=($__sz_0_i|0)==($__cap_0_i|0);
 if($406){label=129;break;}else{label=131;break;}
 case 129: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=130;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 130: 
 var $408=HEAP8[($this2_i_i_i15)];
 var $409=$408&1;
 var $410=(($409<<24)>>24)==0;
 if($410){label=132;break;}else{label=133;break;}
 case 131: 
 if($396){label=133;break;}else{label=132;break;}
 case 132: 
 var $413=$__sz_0_i<<1;
 var $414=((($413)+(2))|0);
 var $415=(($414)&255);
 HEAP8[($this2_i_i_i15)]=$415;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$263;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=134;break;
 case 133: 
 var $417=HEAP32[(($264)>>2)];
 var $418=((($__sz_0_i)+(1))|0);
 HEAP32[(($265)>>2)]=$418;
 var $_pn_i=$417;var $__p_0_sum_pre_phi_i=$418;label=134;break;
 case 134: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$_0_i_off0_i34;
 var $419=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($419)]=0;
 label=136;break;
 case 135: 
 var $420=HEAP32[(($__err)>>2)];
 var $421=$420|4;
 HEAP32[(($__err)>>2)]=$421;
 var $_0=0;var $1381=$272;var $free220=$free214358;label=444;break;
 case 136: 
 var $423=($__p_0362|0)==3;
 if($423){var $free214_lcssa=$free214358;var $_lcssa302=$272;var $_lcssa318=$271;var $__trailing_sign_0_lcssa=$__trailing_sign_0364;var $__e_sroa_0_21=$__e_sroa_0_2;label=411;break;}else{var $424=$__e_sroa_0_2;var $_pre_i2_i_i41=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=137;break;}
 case 137: 
 var $__e_sroa_0_3;
 var $_pre_i2_i_i41;
 var $424;
 var $425=HEAP32[(($245)>>2)];
 var $426=($425|0)==0;
 if($426){var $440=0;label=143;break;}else{label=138;break;}
 case 138: 
 var $428=(($425+12)|0);
 var $429=HEAP32[(($428)>>2)];
 var $430=(($425+16)|0);
 var $431=HEAP32[(($430)>>2)];
 var $432=($429|0)==($431|0);
 if($432){label=139;break;}else{var $440=$425;label=143;break;}
 case 139: 
 var $433=$425;
 var $434=HEAP32[(($433)>>2)];
 var $435=(($434+36)|0);
 var $436=HEAP32[(($435)>>2)];
 var $437=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$436]($425) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=140;break; } else { label=91;break; }
 case 140: 
 var $438=($437|0)==-1;
 if($438){label=142;break;}else{label=141;break;}
 case 141: 
 var $_pre_i_i_i37=HEAP32[(($245)>>2)];
 var $440=$_pre_i_i_i37;label=143;break;
 case 142: 
 HEAP32[(($245)>>2)]=0;
 var $440=0;label=143;break;
 case 143: 
 var $440;
 var $441=($440|0)==0;
 var $442=($424|0)==0;
 if($442){var $_pre_i2_i_i41433=$_pre_i2_i_i41;var $__e_sroa_0_4=$__e_sroa_0_3;label=148;break;}else{label=144;break;}
 case 144: 
 var $444=(($424+12)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=(($424+16)|0);
 var $447=HEAP32[(($446)>>2)];
 var $448=($445|0)==($447|0);
 if($448){label=146;break;}else{label=145;break;}
 case 145: 
 if($441){var $457=$424;var $_pre_i2_i_i41435=$_pre_i2_i_i41;var $__e_sroa_0_5=$__e_sroa_0_3;label=150;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=410;break;}
 case 146: 
 var $449=$424;
 var $450=HEAP32[(($449)>>2)];
 var $451=(($450+36)|0);
 var $452=HEAP32[(($451)>>2)];
 var $453=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$452]($424) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=147;break; } else { label=91;break; }
 case 147: 
 var $454=($453|0)==-1;
 if($454){var $_pre_i2_i_i41433=0;var $__e_sroa_0_4=0;label=148;break;}else{label=149;break;}
 case 148: 
 var $__e_sroa_0_4;
 var $_pre_i2_i_i41433;
 if($441){var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=410;break;}else{var $457=0;var $_pre_i2_i_i41435=$_pre_i2_i_i41433;var $__e_sroa_0_5=$__e_sroa_0_4;label=150;break;}
 case 149: 
 var $456=($_pre_i2_i_i41|0)==0;
 var $tmp_i_i43=$441^$456;
 if($tmp_i_i43){var $457=$_pre_i2_i_i41;var $_pre_i2_i_i41435=$_pre_i2_i_i41;var $__e_sroa_0_5=$__e_sroa_0_3;label=150;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=410;break;}
 case 150: 
 var $__e_sroa_0_5;
 var $_pre_i2_i_i41435;
 var $457;
 var $458=HEAP32[(($245)>>2)];
 var $459=(($458+12)|0);
 var $460=HEAP32[(($459)>>2)];
 var $461=(($458+16)|0);
 var $462=HEAP32[(($461)>>2)];
 var $463=($460|0)==($462|0);
 if($463){label=151;break;}else{label=153;break;}
 case 151: 
 var $465=$458;
 var $466=HEAP32[(($465)>>2)];
 var $467=(($466+36)|0);
 var $468=HEAP32[(($467)>>2)];
 var $469=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$468]($458) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=152;break; } else { label=91;break; }
 case 152: 
 var $extract_t_i47=(($469)&255);
 var $_0_i_off0_i48=$extract_t_i47;label=154;break;
 case 153: 
 var $471=HEAP8[($460)];
 var $_0_i_off0_i48=$471;label=154;break;
 case 154: 
 var $_0_i_off0_i48;
 var $isascii1_i51=(($_0_i_off0_i48<<24)>>24)>-1;
 if($isascii1_i51){label=155;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=410;break;}
 case 155: 
 var $472=(($_0_i_off0_i48<<24)>>24);
 var $473=HEAP32[(($247)>>2)];
 var $474=(($473+($472<<1))|0);
 var $475=HEAP16[(($474)>>1)];
 var $476=$475&8192;
 var $477=(($476<<16)>>16)==0;
 if($477){var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=410;break;}else{label=156;break;}
 case 156: 
 var $479=HEAP32[(($245)>>2)];
 var $480=(($479+12)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=(($479+16)|0);
 var $483=HEAP32[(($482)>>2)];
 var $484=($481|0)==($483|0);
 if($484){label=157;break;}else{label=159;break;}
 case 157: 
 var $486=$479;
 var $487=HEAP32[(($486)>>2)];
 var $488=(($487+40)|0);
 var $489=HEAP32[(($488)>>2)];
 var $490=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$489]($479) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=158;break; } else { label=91;break; }
 case 158: 
 var $extract_t_i53=(($490)&255);
 var $_0_i_off0_i54=$extract_t_i53;label=160;break;
 case 159: 
 var $492=(($481+1)|0);
 HEAP32[(($480)>>2)]=$492;
 var $493=HEAP8[($481)];
 var $_0_i_off0_i54=$493;label=160;break;
 case 160: 
 var $_0_i_off0_i54;
 var $494=HEAP8[($this2_i_i_i15)];
 var $495=$494&1;
 var $496=(($495<<24)>>24)!=0;
 if($496){label=162;break;}else{label=161;break;}
 case 161: 
 var $498=($494&255);
 var $499=$498>>>1;
 var $__sz_0_i34=$499;var $__cap_0_i33=10;label=163;break;
 case 162: 
 var $501=HEAP32[(($269)>>2)];
 var $502=$501&-2;
 var $503=((($502)-(1))|0);
 var $504=HEAP32[(($265)>>2)];
 var $__sz_0_i34=$504;var $__cap_0_i33=$503;label=163;break;
 case 163: 
 var $__cap_0_i33;
 var $__sz_0_i34;
 var $506=($__sz_0_i34|0)==($__cap_0_i33|0);
 if($506){label=164;break;}else{label=166;break;}
 case 164: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i33,1,$__cap_0_i33,$__cap_0_i33,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=165;break; } else { label=91;break; }
 case 165: 
 var $508=HEAP8[($this2_i_i_i15)];
 var $509=$508&1;
 var $510=(($509<<24)>>24)==0;
 if($510){label=167;break;}else{label=168;break;}
 case 166: 
 if($496){label=168;break;}else{label=167;break;}
 case 167: 
 var $513=$__sz_0_i34<<1;
 var $514=((($513)+(2))|0);
 var $515=(($514)&255);
 HEAP8[($this2_i_i_i15)]=$515;
 var $__p_0_sum_pre_i35=((($__sz_0_i34)+(1))|0);
 var $_pn_i37=$263;var $__p_0_sum_pre_phi_i36=$__p_0_sum_pre_i35;label=169;break;
 case 168: 
 var $517=HEAP32[(($264)>>2)];
 var $518=((($__sz_0_i34)+(1))|0);
 HEAP32[(($265)>>2)]=$518;
 var $_pn_i37=$517;var $__p_0_sum_pre_phi_i36=$518;label=169;break;
 case 169: 
 var $__p_0_sum_pre_phi_i36;
 var $_pn_i37;
 var $__p_0_i38=(($_pn_i37+$__sz_0_i34)|0);
 HEAP8[($__p_0_i38)]=$_0_i_off0_i54;
 var $519=(($_pn_i37+$__p_0_sum_pre_phi_i36)|0);
 HEAP8[($519)]=0;
 var $424=$457;var $_pre_i2_i_i41=$_pre_i2_i_i41435;var $__e_sroa_0_3=$__e_sroa_0_5;label=137;break;
 case 170: 
 var $521=HEAP8[($this2_i_i_i10)];
 var $522=$521&1;
 var $523=(($522<<24)>>24)==0;
 if($523){label=172;break;}else{label=171;break;}
 case 171: 
 var $525=HEAP32[(($254)>>2)];
 var $529=$525;label=173;break;
 case 172: 
 var $527=($521&255);
 var $528=$527>>>1;
 var $529=$528;label=173;break;
 case 173: 
 var $529;
 var $530=HEAP8[($this2_i_i_i12)];
 var $531=$530&1;
 var $532=(($531<<24)>>24)==0;
 if($532){label=175;break;}else{label=174;break;}
 case 174: 
 var $534=HEAP32[(($250)>>2)];
 var $538=$534;label=176;break;
 case 175: 
 var $536=($530&255);
 var $537=$536>>>1;
 var $538=$537;label=176;break;
 case 176: 
 var $538;
 var $539=(((-$538))|0);
 var $540=($529|0)==($539|0);
 if($540){var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;}else{label=177;break;}
 case 177: 
 if($523){label=179;break;}else{label=178;break;}
 case 178: 
 var $543=HEAP32[(($254)>>2)];
 var $547=$543;label=180;break;
 case 179: 
 var $545=($521&255);
 var $546=$545>>>1;
 var $547=$546;label=180;break;
 case 180: 
 var $547;
 var $548=($547|0)==0;
 if($548){label=185;break;}else{label=181;break;}
 case 181: 
 if($532){label=183;break;}else{label=182;break;}
 case 182: 
 var $551=HEAP32[(($250)>>2)];
 var $555=$551;label=184;break;
 case 183: 
 var $553=($530&255);
 var $554=$553>>>1;
 var $555=$554;label=184;break;
 case 184: 
 var $555;
 var $556=($555|0)==0;
 if($556){label=185;break;}else{label=214;break;}
 case 185: 
 if($523){label=187;break;}else{label=186;break;}
 case 186: 
 var $559=HEAP32[(($254)>>2)];
 var $563=$559;label=188;break;
 case 187: 
 var $561=($521&255);
 var $562=$561>>>1;
 var $563=$562;label=188;break;
 case 188: 
 var $563;
 var $564=($563|0)==0;
 var $565=HEAP32[(($245)>>2)];
 var $566=(($565+12)|0);
 var $567=HEAP32[(($566)>>2)];
 var $568=(($565+16)|0);
 var $569=HEAP32[(($568)>>2)];
 var $570=($567|0)==($569|0);
 if($564){label=202;break;}else{label=189;break;}
 case 189: 
 if($570){label=190;break;}else{label=192;break;}
 case 190: 
 var $573=$565;
 var $574=HEAP32[(($573)>>2)];
 var $575=(($574+36)|0);
 var $576=HEAP32[(($575)>>2)];
 var $577=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$576]($565) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=191;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 191: 
 var $extract_t_i73=(($577)&255);
 var $_pre436=HEAP8[($this2_i_i_i10)];
 var $_0_i_off0_i74=$extract_t_i73;var $580=$_pre436;label=193;break;
 case 192: 
 var $579=HEAP8[($567)];
 var $_0_i_off0_i74=$579;var $580=$521;label=193;break;
 case 193: 
 var $580;
 var $_0_i_off0_i74;
 var $581=$580&1;
 var $582=(($581<<24)>>24)==0;
 var $583=HEAP32[(($255)>>2)];
 var $_=($582?$253:$583);
 var $584=HEAP8[($_)];
 var $585=(($_0_i_off0_i74<<24)>>24)==(($584<<24)>>24);
 if($585){label=194;break;}else{label=201;break;}
 case 194: 
 var $587=HEAP32[(($245)>>2)];
 var $588=(($587+12)|0);
 var $589=HEAP32[(($588)>>2)];
 var $590=(($587+16)|0);
 var $591=HEAP32[(($590)>>2)];
 var $592=($589|0)==($591|0);
 if($592){label=195;break;}else{label=196;break;}
 case 195: 
 var $594=$587;
 var $595=HEAP32[(($594)>>2)];
 var $596=(($595+40)|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$597]($587) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=197;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 196: 
 var $600=(($589+1)|0);
 HEAP32[(($588)>>2)]=$600;
 label=197;break;
 case 197: 
 var $601=HEAP8[($this2_i_i_i10)];
 var $602=$601&1;
 var $603=(($602<<24)>>24)==0;
 if($603){label=199;break;}else{label=198;break;}
 case 198: 
 var $605=HEAP32[(($254)>>2)];
 var $609=$605;label=200;break;
 case 199: 
 var $607=($601&255);
 var $608=$607>>>1;
 var $609=$608;label=200;break;
 case 200: 
 var $609;
 var $610=($609>>>0)>1;
 var $__psn___trailing_sign_0=($610?$__psn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;
 case 201: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;
 case 202: 
 if($570){label=203;break;}else{label=205;break;}
 case 203: 
 var $614=$565;
 var $615=HEAP32[(($614)>>2)];
 var $616=(($615+36)|0);
 var $617=HEAP32[(($616)>>2)];
 var $618=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$617]($565) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=204;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 204: 
 var $extract_t_i91=(($618)&255);
 var $_pre=HEAP8[($this2_i_i_i12)];
 var $_0_i_off0_i92=$extract_t_i91;var $621=$_pre;label=206;break;
 case 205: 
 var $620=HEAP8[($567)];
 var $_0_i_off0_i92=$620;var $621=$530;label=206;break;
 case 206: 
 var $621;
 var $_0_i_off0_i92;
 var $622=$621&1;
 var $623=(($622<<24)>>24)==0;
 var $624=HEAP32[(($251)>>2)];
 var $_463=($623?$249:$624);
 var $625=HEAP8[($_463)];
 var $626=(($_0_i_off0_i92<<24)>>24)==(($625<<24)>>24);
 if($626){label=207;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;}
 case 207: 
 var $628=HEAP32[(($245)>>2)];
 var $629=(($628+12)|0);
 var $630=HEAP32[(($629)>>2)];
 var $631=(($628+16)|0);
 var $632=HEAP32[(($631)>>2)];
 var $633=($630|0)==($632|0);
 if($633){label=208;break;}else{label=209;break;}
 case 208: 
 var $635=$628;
 var $636=HEAP32[(($635)>>2)];
 var $637=(($636+40)|0);
 var $638=HEAP32[(($637)>>2)];
 var $639=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$638]($628) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=210;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 209: 
 var $641=(($630+1)|0);
 HEAP32[(($629)>>2)]=$641;
 label=210;break;
 case 210: 
 HEAP8[($__neg)]=1;
 var $642=HEAP8[($this2_i_i_i12)];
 var $643=$642&1;
 var $644=(($643<<24)>>24)==0;
 if($644){label=212;break;}else{label=211;break;}
 case 211: 
 var $646=HEAP32[(($250)>>2)];
 var $650=$646;label=213;break;
 case 212: 
 var $648=($642&255);
 var $649=$648>>>1;
 var $650=$649;label=213;break;
 case 213: 
 var $650;
 var $651=($650>>>0)>1;
 var $__nsn___trailing_sign_0=($651?$__nsn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;
 case 214: 
 var $653=HEAP32[(($245)>>2)];
 var $654=(($653+12)|0);
 var $655=HEAP32[(($654)>>2)];
 var $656=(($653+16)|0);
 var $657=HEAP32[(($656)>>2)];
 var $658=($655|0)==($657|0);
 if($658){label=215;break;}else{label=217;break;}
 case 215: 
 var $660=$653;
 var $661=HEAP32[(($660)>>2)];
 var $662=(($661+36)|0);
 var $663=HEAP32[(($662)>>2)];
 var $664=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$663]($653) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=216;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 216: 
 var $extract_t_i105=(($664)&255);
 var $_pre437=HEAP8[($this2_i_i_i10)];
 var $_pre575=HEAP32[(($245)>>2)];
 var $_phi_trans_insert=(($_pre575+12)|0);
 var $_pre576=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert577=(($_pre575+16)|0);
 var $_pre578=HEAP32[(($_phi_trans_insert577)>>2)];
 var $_0_i_off0_i106=$extract_t_i105;var $670=$_pre437;var $669=$_pre575;var $668=$_pre576;var $667=$_pre578;label=218;break;
 case 217: 
 var $666=HEAP8[($655)];
 var $_0_i_off0_i106=$666;var $670=$521;var $669=$653;var $668=$655;var $667=$657;label=218;break;
 case 218: 
 var $667;
 var $668;
 var $669;
 var $670;
 var $_0_i_off0_i106;
 var $671=$670&1;
 var $672=(($671<<24)>>24)==0;
 var $673=HEAP32[(($255)>>2)];
 var $_464=($672?$253:$673);
 var $674=HEAP8[($_464)];
 var $675=(($_0_i_off0_i106<<24)>>24)==(($674<<24)>>24);
 var $676=(($669+12)|0);
 var $677=($668|0)==($667|0);
 if($675){label=219;break;}else{label=226;break;}
 case 219: 
 if($677){label=220;break;}else{label=221;break;}
 case 220: 
 var $680=$669;
 var $681=HEAP32[(($680)>>2)];
 var $682=(($681+40)|0);
 var $683=HEAP32[(($682)>>2)];
 var $684=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$683]($669) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=222;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 221: 
 var $686=(($668+1)|0);
 HEAP32[(($676)>>2)]=$686;
 label=222;break;
 case 222: 
 var $687=HEAP8[($this2_i_i_i10)];
 var $688=$687&1;
 var $689=(($688<<24)>>24)==0;
 if($689){label=224;break;}else{label=223;break;}
 case 223: 
 var $691=HEAP32[(($254)>>2)];
 var $695=$691;label=225;break;
 case 224: 
 var $693=($687&255);
 var $694=$693>>>1;
 var $695=$694;label=225;break;
 case 225: 
 var $695;
 var $696=($695>>>0)>1;
 var $__psn___trailing_sign_05=($696?$__psn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__psn___trailing_sign_05;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;
 case 226: 
 if($677){label=227;break;}else{label=229;break;}
 case 227: 
 var $699=$669;
 var $700=HEAP32[(($699)>>2)];
 var $701=(($700+36)|0);
 var $702=HEAP32[(($701)>>2)];
 var $703=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$702]($669) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=228;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 228: 
 var $extract_t_i124=(($703)&255);
 var $_0_i_off0_i125=$extract_t_i124;label=230;break;
 case 229: 
 var $705=HEAP8[($668)];
 var $_0_i_off0_i125=$705;label=230;break;
 case 230: 
 var $_0_i_off0_i125;
 var $706=HEAP8[($this2_i_i_i12)];
 var $707=$706&1;
 var $708=(($707<<24)>>24)==0;
 var $709=HEAP32[(($251)>>2)];
 var $_465=($708?$249:$709);
 var $710=HEAP8[($_465)];
 var $711=(($_0_i_off0_i125<<24)>>24)==(($710<<24)>>24);
 if($711){label=231;break;}else{label=238;break;}
 case 231: 
 var $713=HEAP32[(($245)>>2)];
 var $714=(($713+12)|0);
 var $715=HEAP32[(($714)>>2)];
 var $716=(($713+16)|0);
 var $717=HEAP32[(($716)>>2)];
 var $718=($715|0)==($717|0);
 if($718){label=232;break;}else{label=233;break;}
 case 232: 
 var $720=$713;
 var $721=HEAP32[(($720)>>2)];
 var $722=(($721+40)|0);
 var $723=HEAP32[(($722)>>2)];
 var $724=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$723]($713) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=234;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$272;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free214358;label=92;break; }
 case 233: 
 var $726=(($715+1)|0);
 HEAP32[(($714)>>2)]=$726;
 label=234;break;
 case 234: 
 HEAP8[($__neg)]=1;
 var $727=HEAP8[($this2_i_i_i12)];
 var $728=$727&1;
 var $729=(($728<<24)>>24)==0;
 if($729){label=236;break;}else{label=235;break;}
 case 235: 
 var $731=HEAP32[(($250)>>2)];
 var $735=$731;label=237;break;
 case 236: 
 var $733=($727&255);
 var $734=$733>>>1;
 var $735=$734;label=237;break;
 case 237: 
 var $735;
 var $736=($735>>>0)>1;
 var $__nsn___trailing_sign_06=($736?$__nsn:$__trailing_sign_0364);
 var $__trailing_sign_1=$__nsn___trailing_sign_06;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;
 case 238: 
 var $738=HEAP32[(($__err)>>2)];
 var $739=$738|4;
 HEAP32[(($__err)>>2)]=$739;
 var $_0=0;var $1381=$272;var $free220=$free214358;label=444;break;
 case 239: 
 var $741=($__trailing_sign_0364|0)!=0;
 var $742=($__p_0362>>>0)<2;
 var $or_cond=$741|$742;
 if($or_cond){label=243;break;}else{label=240;break;}
 case 240: 
 var $744=($__p_0362|0)==2;
 if($744){label=241;break;}else{var $749=0;label=242;break;}
 case 241: 
 var $746=HEAP8[($266)];
 var $747=(($746<<24)>>24)!=0;
 var $749=$747;label=242;break;
 case 242: 
 var $749;
 var $brmerge=$257|$749;
 if($brmerge){label=243;break;}else{var $__trailing_sign_1=0;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=410;break;}
 case 243: 
 var $750=HEAP8[($this2_i_i_i9)];
 var $751=$750&1;
 var $752=(($751<<24)>>24)==0;
 var $753=HEAP32[(($260)>>2)];
 var $_466=($752?$259:$753);
 var $754=($__p_0362|0)==0;
 if($754){var $812=$_466;var $811=$750;var $810=$__e_sroa_0_2;var $_pre_i2_i_i192=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=259;break;}else{label=244;break;}
 case 244: 
 var $756=((($__p_0362)-(1))|0);
 var $757=(($246+$756)|0);
 var $758=HEAP8[($757)];
 var $switch=($758&255)<2;
 if($switch){label=245;break;}else{var $812=$_466;var $811=$750;var $810=$__e_sroa_0_2;var $_pre_i2_i_i192=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=259;break;}
 case 245: 
 var $759=($750&255);
 var $760=$759>>>1;
 var $761=HEAP32[(($261)>>2)];
 var $_468=($752?$760:$761);
 var $762=(($_466+$_468)|0);
 var $763=$_466;label=246;break;
 case 246: 
 var $763;
 var $764=($763|0)==($762|0);
 if($764){var $_lcssa536=$762;label=249;break;}else{label=247;break;}
 case 247: 
 var $766=HEAP8[($763)];
 var $isascii1_i147=(($766<<24)>>24)>-1;
 if($isascii1_i147){label=248;break;}else{var $_lcssa536=$763;label=249;break;}
 case 248: 
 var $767=(($766<<24)>>24);
 var $768=HEAP32[(($247)>>2)];
 var $769=(($768+($767<<1))|0);
 var $770=HEAP16[(($769)>>1)];
 var $771=$770&8192;
 var $772=(($771<<16)>>16)==0;
 var $773=(($763+1)|0);
 if($772){var $_lcssa536=$763;label=249;break;}else{var $763=$773;label=246;break;}
 case 249: 
 var $_lcssa536;
 var $774=$_lcssa536;
 var $775=$_466;
 var $776=((($774)-($775))|0);
 var $777=HEAP8[($this2_i_i_i15)];
 var $778=$777&1;
 var $779=(($778<<24)>>24)==0;
 if($779){label=251;break;}else{label=250;break;}
 case 250: 
 var $781=HEAP32[(($265)>>2)];
 var $785=$781;label=252;break;
 case 251: 
 var $783=($777&255);
 var $784=$783>>>1;
 var $785=$784;label=252;break;
 case 252: 
 var $785;
 var $786=($776>>>0)>($785>>>0);
 if($786){var $812=$_466;var $811=$750;var $810=$__e_sroa_0_2;var $_pre_i2_i_i192=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=259;break;}else{label=253;break;}
 case 253: 
 if($779){label=255;break;}else{label=254;break;}
 case 254: 
 var $789=HEAP32[(($264)>>2)];
 var $790=HEAP32[(($265)>>2)];
 var $_sum=((($790)-($776))|0);
 var $791=(($789+$_sum)|0);
 var $798=$790;var $797=$789;var $796=$791;label=256;break;
 case 255: 
 var $793=($777&255);
 var $794=$793>>>1;
 var $_sum455=((($794)-($776))|0);
 var $795=(($262+1+$_sum455)|0);
 var $798=$794;var $797=$263;var $796=$795;label=256;break;
 case 256: 
 var $796;
 var $797;
 var $798;
 var $799=(($797+$798)|0);
 var $800=($796|0)==($799|0);
 if($800){var $812=$_lcssa536;var $811=$750;var $810=$__e_sroa_0_2;var $_pre_i2_i_i192=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=259;break;}else{var $802=$796;var $801=$_466;label=257;break;}
 case 257: 
 var $801;
 var $802;
 var $803=HEAP8[($802)];
 var $804=HEAP8[($801)];
 var $805=(($803<<24)>>24)==(($804<<24)>>24);
 if($805){label=258;break;}else{var $812=$_466;var $811=$750;var $810=$__e_sroa_0_2;var $_pre_i2_i_i192=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=259;break;}
 case 258: 
 var $807=(($802+1)|0);
 var $808=(($801+1)|0);
 var $809=($807|0)==($799|0);
 if($809){var $812=$_lcssa536;var $811=$750;var $810=$__e_sroa_0_2;var $_pre_i2_i_i192=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=259;break;}else{var $802=$807;var $801=$808;label=257;break;}
 case 259: 
 var $__e_sroa_0_6;
 var $_pre_i2_i_i192;
 var $810;
 var $811;
 var $812;
 var $813=$811&1;
 var $814=(($813<<24)>>24)==0;
 if($814){label=261;break;}else{label=260;break;}
 case 260: 
 var $816=HEAP32[(($260)>>2)];
 var $817=HEAP32[(($261)>>2)];
 var $822=$817;var $821=$816;label=262;break;
 case 261: 
 var $819=($811&255);
 var $820=$819>>>1;
 var $822=$820;var $821=$259;label=262;break;
 case 262: 
 var $821;
 var $822;
 var $823=(($821+$822)|0);
 var $824=($812|0)==($823|0);
 if($824){var $__e_sroa_0_9=$__e_sroa_0_6;label=285;break;}else{label=263;break;}
 case 263: 
 var $826=HEAP32[(($245)>>2)];
 var $827=($826|0)==0;
 if($827){var $841=0;label=269;break;}else{label=264;break;}
 case 264: 
 var $829=(($826+12)|0);
 var $830=HEAP32[(($829)>>2)];
 var $831=(($826+16)|0);
 var $832=HEAP32[(($831)>>2)];
 var $833=($830|0)==($832|0);
 if($833){label=265;break;}else{var $841=$826;label=269;break;}
 case 265: 
 var $834=$826;
 var $835=HEAP32[(($834)>>2)];
 var $836=(($835+36)|0);
 var $837=HEAP32[(($836)>>2)];
 var $838=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$837]($826) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=266;break; } else { label=90;break; }
 case 266: 
 var $839=($838|0)==-1;
 if($839){label=268;break;}else{label=267;break;}
 case 267: 
 var $_pre_i_i_i188=HEAP32[(($245)>>2)];
 var $841=$_pre_i_i_i188;label=269;break;
 case 268: 
 HEAP32[(($245)>>2)]=0;
 var $841=0;label=269;break;
 case 269: 
 var $841;
 var $842=($841|0)==0;
 var $843=($810|0)==0;
 if($843){var $_pre_i2_i_i192440=$_pre_i2_i_i192;var $__e_sroa_0_7=$__e_sroa_0_6;label=274;break;}else{label=270;break;}
 case 270: 
 var $845=(($810+12)|0);
 var $846=HEAP32[(($845)>>2)];
 var $847=(($810+16)|0);
 var $848=HEAP32[(($847)>>2)];
 var $849=($846|0)==($848|0);
 if($849){label=272;break;}else{label=271;break;}
 case 271: 
 if($842){var $858=$810;var $_pre_i2_i_i192439=$_pre_i2_i_i192;var $__e_sroa_0_8=$__e_sroa_0_6;label=276;break;}else{var $__e_sroa_0_9=$__e_sroa_0_6;label=285;break;}
 case 272: 
 var $850=$810;
 var $851=HEAP32[(($850)>>2)];
 var $852=(($851+36)|0);
 var $853=HEAP32[(($852)>>2)];
 var $854=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$853]($810) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=273;break; } else { label=90;break; }
 case 273: 
 var $855=($854|0)==-1;
 if($855){var $_pre_i2_i_i192440=0;var $__e_sroa_0_7=0;label=274;break;}else{label=275;break;}
 case 274: 
 var $__e_sroa_0_7;
 var $_pre_i2_i_i192440;
 if($842){var $__e_sroa_0_9=$__e_sroa_0_7;label=285;break;}else{var $858=0;var $_pre_i2_i_i192439=$_pre_i2_i_i192440;var $__e_sroa_0_8=$__e_sroa_0_7;label=276;break;}
 case 275: 
 var $857=($_pre_i2_i_i192|0)==0;
 var $tmp_i_i194=$842^$857;
 if($tmp_i_i194){var $858=$_pre_i2_i_i192;var $_pre_i2_i_i192439=$_pre_i2_i_i192;var $__e_sroa_0_8=$__e_sroa_0_6;label=276;break;}else{var $__e_sroa_0_9=$__e_sroa_0_6;label=285;break;}
 case 276: 
 var $__e_sroa_0_8;
 var $_pre_i2_i_i192439;
 var $858;
 var $859=HEAP32[(($245)>>2)];
 var $860=(($859+12)|0);
 var $861=HEAP32[(($860)>>2)];
 var $862=(($859+16)|0);
 var $863=HEAP32[(($862)>>2)];
 var $864=($861|0)==($863|0);
 if($864){label=277;break;}else{label=279;break;}
 case 277: 
 var $866=$859;
 var $867=HEAP32[(($866)>>2)];
 var $868=(($867+36)|0);
 var $869=HEAP32[(($868)>>2)];
 var $870=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$869]($859) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=278;break; } else { label=90;break; }
 case 278: 
 var $extract_t_i183=(($870)&255);
 var $_0_i_off0_i184=$extract_t_i183;label=280;break;
 case 279: 
 var $872=HEAP8[($861)];
 var $_0_i_off0_i184=$872;label=280;break;
 case 280: 
 var $_0_i_off0_i184;
 var $873=HEAP8[($812)];
 var $874=(($_0_i_off0_i184<<24)>>24)==(($873<<24)>>24);
 if($874){label=281;break;}else{var $__e_sroa_0_9=$__e_sroa_0_8;label=285;break;}
 case 281: 
 var $876=HEAP32[(($245)>>2)];
 var $877=(($876+12)|0);
 var $878=HEAP32[(($877)>>2)];
 var $879=(($876+16)|0);
 var $880=HEAP32[(($879)>>2)];
 var $881=($878|0)==($880|0);
 if($881){label=282;break;}else{label=283;break;}
 case 282: 
 var $883=$876;
 var $884=HEAP32[(($883)>>2)];
 var $885=(($884+40)|0);
 var $886=HEAP32[(($885)>>2)];
 var $887=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$886]($876) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=284;break; } else { label=90;break; }
 case 283: 
 var $889=(($878+1)|0);
 HEAP32[(($877)>>2)]=$889;
 label=284;break;
 case 284: 
 var $890=(($812+1)|0);
 var $_pre438=HEAP8[($this2_i_i_i9)];
 var $812=$890;var $811=$_pre438;var $810=$858;var $_pre_i2_i_i192=$_pre_i2_i_i192439;var $__e_sroa_0_6=$__e_sroa_0_8;label=259;break;
 case 285: 
 var $__e_sroa_0_9;
 if($257){label=286;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=410;break;}
 case 286: 
 var $892=HEAP8[($this2_i_i_i9)];
 var $893=$892&1;
 var $894=(($893<<24)>>24)==0;
 if($894){label=288;break;}else{label=287;break;}
 case 287: 
 var $896=HEAP32[(($260)>>2)];
 var $897=HEAP32[(($261)>>2)];
 var $902=$897;var $901=$896;label=289;break;
 case 288: 
 var $899=($892&255);
 var $900=$899>>>1;
 var $902=$900;var $901=$259;label=289;break;
 case 289: 
 var $901;
 var $902;
 var $903=(($901+$902)|0);
 var $904=($812|0)==($903|0);
 if($904){var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$270;var $1281=$271;var $1280=$272;var $free215=$free214358;var $1279=$273;var $__fd_3=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=410;break;}else{label=290;break;}
 case 290: 
 var $906=HEAP32[(($__err)>>2)];
 var $907=$906|4;
 HEAP32[(($__err)>>2)]=$907;
 var $_0=0;var $1381=$272;var $free220=$free214358;label=444;break;
 case 291: 
 var $__e_sroa_0_10;
 var $908;
 var $free213;
 var $909;
 var $910;
 var $911;
 var $__ng_0;
 var $912=HEAP32[(($245)>>2)];
 var $913=($912|0)==0;
 if($913){var $927=0;label=297;break;}else{label=292;break;}
 case 292: 
 var $915=(($912+12)|0);
 var $916=HEAP32[(($915)>>2)];
 var $917=(($912+16)|0);
 var $918=HEAP32[(($917)>>2)];
 var $919=($916|0)==($918|0);
 if($919){label=293;break;}else{var $927=$912;label=297;break;}
 case 293: 
 var $920=$912;
 var $921=HEAP32[(($920)>>2)];
 var $922=(($921+36)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$923]($912) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=294;break; } else { var $_ph_ph_ph=$909;var $free218_ph_ph_ph=$free213;label=86;break; }
 case 294: 
 var $925=($924|0)==-1;
 if($925){label=296;break;}else{label=295;break;}
 case 295: 
 var $_pre_i_i_i168=HEAP32[(($245)>>2)];
 var $927=$_pre_i_i_i168;label=297;break;
 case 296: 
 HEAP32[(($245)>>2)]=0;
 var $927=0;label=297;break;
 case 297: 
 var $927;
 var $928=($927|0)==0;
 var $929=($__e_sroa_0_10|0)==0;
 if($929){label=302;break;}else{label=298;break;}
 case 298: 
 var $931=(($__e_sroa_0_10+12)|0);
 var $932=HEAP32[(($931)>>2)];
 var $933=(($__e_sroa_0_10+16)|0);
 var $934=HEAP32[(($933)>>2)];
 var $935=($932|0)==($934|0);
 if($935){label=300;break;}else{label=299;break;}
 case 299: 
 if($928){var $__e_sroa_0_12=$__e_sroa_0_10;label=304;break;}else{var $__e_sroa_0_13=$__e_sroa_0_10;label=337;break;}
 case 300: 
 var $936=$__e_sroa_0_10;
 var $937=HEAP32[(($936)>>2)];
 var $938=(($937+36)|0);
 var $939=HEAP32[(($938)>>2)];
 var $940=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$939]($__e_sroa_0_10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=301;break; } else { var $_ph_ph_ph=$909;var $free218_ph_ph_ph=$free213;label=86;break; }
 case 301: 
 var $941=($940|0)==-1;
 if($941){label=302;break;}else{label=303;break;}
 case 302: 
 if($928){var $__e_sroa_0_13=0;label=337;break;}else{var $__e_sroa_0_12=0;label=304;break;}
 case 303: 
 if($928){var $__e_sroa_0_12=$__e_sroa_0_10;label=304;break;}else{var $__e_sroa_0_13=$__e_sroa_0_10;label=337;break;}
 case 304: 
 var $__e_sroa_0_12;
 var $943=HEAP32[(($245)>>2)];
 var $944=(($943+12)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=(($943+16)|0);
 var $947=HEAP32[(($946)>>2)];
 var $948=($945|0)==($947|0);
 if($948){label=305;break;}else{label=307;break;}
 case 305: 
 var $950=$943;
 var $951=HEAP32[(($950)>>2)];
 var $952=(($951+36)|0);
 var $953=HEAP32[(($952)>>2)];
 var $954=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$953]($943) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=306;break; } else { var $_ph_ph_ph=$909;var $free218_ph_ph_ph=$free213;label=86;break; }
 case 306: 
 var $extract_t_i162=(($954)&255);
 var $_0_i_off0_i163=$extract_t_i162;label=308;break;
 case 307: 
 var $956=HEAP8[($945)];
 var $_0_i_off0_i163=$956;label=308;break;
 case 308: 
 var $_0_i_off0_i163;
 var $isascii1_i160=(($_0_i_off0_i163<<24)>>24)>-1;
 if($isascii1_i160){label=309;break;}else{label=322;break;}
 case 309: 
 var $957=(($_0_i_off0_i163<<24)>>24);
 var $958=HEAP32[(($247)>>2)];
 var $959=(($958+($957<<1))|0);
 var $960=HEAP16[(($959)>>1)];
 var $961=$960&2048;
 var $962=(($961<<16)>>16)==0;
 if($962){label=322;break;}else{label=310;break;}
 case 310: 
 var $964=HEAP32[(($__wn)>>2)];
 var $965=($964|0)==($908|0);
 if($965){label=311;break;}else{var $994=$908;var $993=$964;label=321;break;}
 case 311: 
 var $967=HEAP32[(($267)>>2)];
 var $968=($967|0)!=((538)|0);
 var $969=HEAP32[(($243)>>2)];
 var $970=$908;
 var $971=$969;
 var $972=((($970)-($971))|0);
 var $973=($972>>>0)<2147483647;
 var $974=$972<<1;
 var $__i151=($973?$974:-1);
 var $975=($968?$969:0);
 var $976=_realloc($975,$__i151);
 var $977=($976|0)==0;
 if($977){label=312;break;}else{label=314;break;}
 case 312: 
 var $979=___cxa_allocate_exception(4);
 var $980=$979;
 HEAP32[(($980)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($979,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=313;break; } else { label=87;break; }
 case 313: 
 throw "Reached an unreachable!";
 case 314: 
 if($968){label=315;break;}else{label=316;break;}
 case 315: 
 HEAP32[(($243)>>2)]=$976;
 var $988=$976;label=320;break;
 case 316: 
 var $_pr_i153=HEAP32[(($243)>>2)];
 HEAP32[(($243)>>2)]=$976;
 var $982=($_pr_i153|0)==0;
 if($982){var $988=$976;label=320;break;}else{label=317;break;}
 case 317: 
 var $984=HEAP32[(($267)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$984]($_pr_i153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=318;break; } else { label=319;break; }
 case 318: 
 var $_pre_i154=HEAP32[(($243)>>2)];
 var $988=$_pre_i154;label=320;break;
 case 319: 
 var $986$0 = ___cxa_find_matching_catch(-1, -1,0); var $986$1 = tempRet0;
 var $987=$986$0;
 ___clang_call_terminate($987);
 throw "Reached an unreachable!";
 case 320: 
 var $988;
 HEAP32[(($267)>>2)]=282;
 var $989=(($988+$972)|0);
 HEAP32[(($__wn)>>2)]=$989;
 var $990=HEAP32[(($243)>>2)];
 var $991=(($990+$__i151)|0);
 var $994=$991;var $993=$989;label=321;break;
 case 321: 
 var $993;
 var $994;
 var $995=(($993+1)|0);
 HEAP32[(($__wn)>>2)]=$995;
 HEAP8[($993)]=$_0_i_off0_i163;
 var $996=((($__ng_0)+(1))|0);
 var $__ng_1=$996;var $1040=$911;var $1039=$910;var $1038=$909;var $free=$free213;var $1037=$994;label=334;break;
 case 322: 
 var $997=HEAP8[($this2_i_i_i)];
 var $998=$997&1;
 var $999=(($998<<24)>>24)==0;
 if($999){label=324;break;}else{label=323;break;}
 case 323: 
 var $1001=HEAP32[(($268)>>2)];
 var $1005=$1001;label=325;break;
 case 324: 
 var $1003=($997&255);
 var $1004=$1003>>>1;
 var $1005=$1004;label=325;break;
 case 325: 
 var $1005;
 var $1006=($1005|0)==0;
 var $1007=($__ng_0|0)==0;
 var $or_cond7=$1006|$1007;
 var $or_cond7_not=$or_cond7^1;
 var $1008=(($_0_i_off0_i163<<24)>>24)==(($__ts_0<<24)>>24);
 var $or_cond14=$or_cond7_not&$1008;
 if($or_cond14){label=326;break;}else{var $__e_sroa_0_13=$__e_sroa_0_12;label=337;break;}
 case 326: 
 var $1010=($910|0)==($911|0);
 if($1010){label=327;break;}else{var $1034=$911;var $1033=$910;var $1032=$909;var $free212=$free213;label=333;break;}
 case 327: 
 var $1012=($free213|0)==((538)|0);
 var $1013=$910;
 var $1014=$909;
 var $1015=((($1013)-($1014))|0);
 var $1016=($1015>>>0)<2147483647;
 var $1017=$1015<<1;
 var $__i139=($1016?$1017:-1);
 var $1018=$1015>>2;
 if($1012){var $1021=0;label=329;break;}else{label=328;break;}
 case 328: 
 var $phitmp_i140=$909;
 var $1021=$phitmp_i140;label=329;break;
 case 329: 
 var $1021;
 var $1022=_realloc($1021,$__i139);
 var $1023=$1022;
 var $1024=($1022|0)==0;
 if($1024){label=330;break;}else{label=332;break;}
 case 330: 
 var $1026=___cxa_allocate_exception(4);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1026,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=331;break; } else { label=87;break; }
 case 331: 
 throw "Reached an unreachable!";
 case 332: 
 var $1028=$__i139>>>2;
 var $1029=(($1023+($1018<<2))|0);
 var $1030=(($1023+($1028<<2))|0);
 var $1034=$1030;var $1033=$1029;var $1032=$1023;var $free212=282;label=333;break;
 case 333: 
 var $free212;
 var $1032;
 var $1033;
 var $1034;
 var $1035=(($1033+4)|0);
 HEAP32[(($1033)>>2)]=$__ng_0;
 var $__ng_1=0;var $1040=$1034;var $1039=$1035;var $1038=$1032;var $free=$free212;var $1037=$908;label=334;break;
 case 334: 
 var $1037;
 var $free;
 var $1038;
 var $1039;
 var $1040;
 var $__ng_1;
 var $1041=HEAP32[(($245)>>2)];
 var $1042=(($1041+12)|0);
 var $1043=HEAP32[(($1042)>>2)];
 var $1044=(($1041+16)|0);
 var $1045=HEAP32[(($1044)>>2)];
 var $1046=($1043|0)==($1045|0);
 if($1046){label=335;break;}else{label=336;break;}
 case 335: 
 var $1048=$1041;
 var $1049=HEAP32[(($1048)>>2)];
 var $1050=(($1049+40)|0);
 var $1051=HEAP32[(($1050)>>2)];
 var $1052=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1051]($1041) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $911=$1040;var $910=$1039;var $909=$1038;var $free213=$free;var $908=$1037;var $__e_sroa_0_10=$__e_sroa_0_12;label=291;break; } else { var $_ph_ph_ph=$1038;var $free218_ph_ph_ph=$free;label=86;break; }
 case 336: 
 var $1054=(($1043+1)|0);
 HEAP32[(($1042)>>2)]=$1054;
 var $__ng_0=$__ng_1;var $911=$1040;var $910=$1039;var $909=$1038;var $free213=$free;var $908=$1037;var $__e_sroa_0_10=$__e_sroa_0_12;label=291;break;
 case 337: 
 var $__e_sroa_0_13;
 var $1056=($909|0)==($910|0);
 var $1057=($__ng_0|0)==0;
 var $or_cond8=$1056|$1057;
 if($or_cond8){var $1087=$911;var $1086=$910;var $1085=$909;var $free216=$free213;label=346;break;}else{label=338;break;}
 case 338: 
 var $1059=($910|0)==($911|0);
 if($1059){label=339;break;}else{var $1083=$911;var $1082=$910;var $1081=$909;var $free217=$free213;label=345;break;}
 case 339: 
 var $1061=($free213|0)==((538)|0);
 var $1062=$910;
 var $1063=$909;
 var $1064=((($1062)-($1063))|0);
 var $1065=($1064>>>0)<2147483647;
 var $1066=$1064<<1;
 var $__i129=($1065?$1066:-1);
 var $1067=$1064>>2;
 if($1061){var $1070=0;label=341;break;}else{label=340;break;}
 case 340: 
 var $phitmp_i=$909;
 var $1070=$phitmp_i;label=341;break;
 case 341: 
 var $1070;
 var $1071=_realloc($1070,$__i129);
 var $1072=$1071;
 var $1073=($1071|0)==0;
 if($1073){label=342;break;}else{label=344;break;}
 case 342: 
 var $1075=___cxa_allocate_exception(4);
 var $1076=$1075;
 HEAP32[(($1076)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1075,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=343;break; } else { label=93;break; }
 case 343: 
 throw "Reached an unreachable!";
 case 344: 
 var $1077=$__i129>>>2;
 var $1078=(($1072+($1067<<2))|0);
 var $1079=(($1072+($1077<<2))|0);
 var $1083=$1079;var $1082=$1078;var $1081=$1072;var $free217=282;label=345;break;
 case 345: 
 var $free217;
 var $1081;
 var $1082;
 var $1083;
 var $1084=(($1082+4)|0);
 HEAP32[(($1082)>>2)]=$__ng_0;
 var $1087=$1083;var $1086=$1084;var $1085=$1081;var $free216=$free217;label=346;break;
 case 346: 
 var $free216;
 var $1085;
 var $1086;
 var $1087;
 var $1088=($__fd_0|0)>0;
 if($1088){label=347;break;}else{var $1272=$908;var $__fd_2=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=408;break;}
 case 347: 
 var $1090=HEAP32[(($245)>>2)];
 var $1091=($1090|0)==0;
 if($1091){var $1105=0;label=353;break;}else{label=348;break;}
 case 348: 
 var $1093=(($1090+12)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=(($1090+16)|0);
 var $1096=HEAP32[(($1095)>>2)];
 var $1097=($1094|0)==($1096|0);
 if($1097){label=349;break;}else{var $1105=$1090;label=353;break;}
 case 349: 
 var $1098=$1090;
 var $1099=HEAP32[(($1098)>>2)];
 var $1100=(($1099+36)|0);
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1101]($1090) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=350;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$1085;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free216;label=92;break; }
 case 350: 
 var $1103=($1102|0)==-1;
 if($1103){label=352;break;}else{label=351;break;}
 case 351: 
 var $_pre_i_i_i111=HEAP32[(($245)>>2)];
 var $1105=$_pre_i_i_i111;label=353;break;
 case 352: 
 HEAP32[(($245)>>2)]=0;
 var $1105=0;label=353;break;
 case 353: 
 var $1105;
 var $1106=($1105|0)==0;
 var $1107=($__e_sroa_0_13|0)==0;
 if($1107){label=358;break;}else{label=354;break;}
 case 354: 
 var $1109=(($__e_sroa_0_13+12)|0);
 var $1110=HEAP32[(($1109)>>2)];
 var $1111=(($__e_sroa_0_13+16)|0);
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=($1110|0)==($1112|0);
 if($1113){label=356;break;}else{label=355;break;}
 case 355: 
 if($1106){var $__e_sroa_0_15=$__e_sroa_0_13;label=360;break;}else{label=365;break;}
 case 356: 
 var $1114=$__e_sroa_0_13;
 var $1115=HEAP32[(($1114)>>2)];
 var $1116=(($1115+36)|0);
 var $1117=HEAP32[(($1116)>>2)];
 var $1118=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1117]($__e_sroa_0_13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=357;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$1085;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free216;label=92;break; }
 case 357: 
 var $1119=($1118|0)==-1;
 if($1119){label=358;break;}else{label=359;break;}
 case 358: 
 if($1106){label=365;break;}else{var $__e_sroa_0_15=0;label=360;break;}
 case 359: 
 if($1106){var $__e_sroa_0_15=$__e_sroa_0_13;label=360;break;}else{label=365;break;}
 case 360: 
 var $__e_sroa_0_15;
 var $1120=HEAP32[(($245)>>2)];
 var $1121=(($1120+12)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=(($1120+16)|0);
 var $1124=HEAP32[(($1123)>>2)];
 var $1125=($1122|0)==($1124|0);
 if($1125){label=361;break;}else{label=363;break;}
 case 361: 
 var $1127=$1120;
 var $1128=HEAP32[(($1127)>>2)];
 var $1129=(($1128+36)|0);
 var $1130=HEAP32[(($1129)>>2)];
 var $1131=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1130]($1120) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=362;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$1085;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free216;label=92;break; }
 case 362: 
 var $extract_t_i101=(($1131)&255);
 var $_0_i_off0_i102=$extract_t_i101;label=364;break;
 case 363: 
 var $1133=HEAP8[($1122)];
 var $_0_i_off0_i102=$1133;label=364;break;
 case 364: 
 var $_0_i_off0_i102;
 var $1134=(($_0_i_off0_i102<<24)>>24)==(($__dp_0<<24)>>24);
 if($1134){label=366;break;}else{label=365;break;}
 case 365: 
 var $1136=HEAP32[(($__err)>>2)];
 var $1137=$1136|4;
 HEAP32[(($__err)>>2)]=$1137;
 var $_0=0;var $1381=$1085;var $free220=$free216;label=444;break;
 case 366: 
 var $1139=HEAP32[(($245)>>2)];
 var $1140=(($1139+12)|0);
 var $1141=HEAP32[(($1140)>>2)];
 var $1142=(($1139+16)|0);
 var $1143=HEAP32[(($1142)>>2)];
 var $1144=($1141|0)==($1143|0);
 if($1144){label=367;break;}else{label=368;break;}
 case 367: 
 var $1146=$1139;
 var $1147=HEAP32[(($1146)>>2)];
 var $1148=(($1147+40)|0);
 var $1149=HEAP32[(($1148)>>2)];
 var $1150=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1149]($1139) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $1154=$908;var $1153=$__e_sroa_0_15;var $_pre_i2_i_i82=$__e_sroa_0_15;var $__fd_1=$__fd_0;var $__e_sroa_0_16=$__e_sroa_0_15;label=369;break; } else { var $_ph_ph244_ph_ph_ph_ph_ph=$1085;var $free218_ph_ph243_ph_ph_ph_ph_ph=$free216;label=92;break; }
 case 368: 
 var $1152=(($1141+1)|0);
 HEAP32[(($1140)>>2)]=$1152;
 var $1154=$908;var $1153=$__e_sroa_0_15;var $_pre_i2_i_i82=$__e_sroa_0_15;var $__fd_1=$__fd_0;var $__e_sroa_0_16=$__e_sroa_0_15;label=369;break;
 case 369: 
 var $__e_sroa_0_16;
 var $__fd_1;
 var $_pre_i2_i_i82;
 var $1153;
 var $1154;
 var $1155=HEAP32[(($245)>>2)];
 var $1156=($1155|0)==0;
 if($1156){var $1170=0;label=375;break;}else{label=370;break;}
 case 370: 
 var $1158=(($1155+12)|0);
 var $1159=HEAP32[(($1158)>>2)];
 var $1160=(($1155+16)|0);
 var $1161=HEAP32[(($1160)>>2)];
 var $1162=($1159|0)==($1161|0);
 if($1162){label=371;break;}else{var $1170=$1155;label=375;break;}
 case 371: 
 var $1163=$1155;
 var $1164=HEAP32[(($1163)>>2)];
 var $1165=(($1164+36)|0);
 var $1166=HEAP32[(($1165)>>2)];
 var $1167=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1166]($1155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=372;break; } else { label=88;break; }
 case 372: 
 var $1168=($1167|0)==-1;
 if($1168){label=374;break;}else{label=373;break;}
 case 373: 
 var $_pre_i_i_i78=HEAP32[(($245)>>2)];
 var $1170=$_pre_i_i_i78;label=375;break;
 case 374: 
 HEAP32[(($245)>>2)]=0;
 var $1170=0;label=375;break;
 case 375: 
 var $1170;
 var $1171=($1170|0)==0;
 var $1172=($1153|0)==0;
 if($1172){var $_pre_i2_i_i82444_ph=$_pre_i2_i_i82;var $__e_sroa_0_17=$__e_sroa_0_16;label=380;break;}else{label=376;break;}
 case 376: 
 var $1174=(($1153+12)|0);
 var $1175=HEAP32[(($1174)>>2)];
 var $1176=(($1153+16)|0);
 var $1177=HEAP32[(($1176)>>2)];
 var $1178=($1175|0)==($1177|0);
 if($1178){label=378;break;}else{label=377;break;}
 case 377: 
 if($1171){var $_pre_i2_i_i82444459=$_pre_i2_i_i82;var $1186=$1153;var $__e_sroa_0_18=$__e_sroa_0_16;label=382;break;}else{label=388;break;}
 case 378: 
 var $1179=$1153;
 var $1180=HEAP32[(($1179)>>2)];
 var $1181=(($1180+36)|0);
 var $1182=HEAP32[(($1181)>>2)];
 var $1183=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1182]($1153) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=379;break; } else { label=88;break; }
 case 379: 
 var $1184=($1183|0)==-1;
 if($1184){var $_pre_i2_i_i82444_ph=0;var $__e_sroa_0_17=0;label=380;break;}else{label=381;break;}
 case 380: 
 var $__e_sroa_0_17;
 var $_pre_i2_i_i82444_ph;
 if($1171){label=388;break;}else{var $_pre_i2_i_i82444459=$_pre_i2_i_i82444_ph;var $1186=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=382;break;}
 case 381: 
 var $1185=($_pre_i2_i_i82|0)==0;
 var $tmp_i_i84=$1171^$1185;
 if($tmp_i_i84){var $_pre_i2_i_i82444459=$_pre_i2_i_i82;var $1186=$_pre_i2_i_i82;var $__e_sroa_0_18=$__e_sroa_0_16;label=382;break;}else{label=388;break;}
 case 382: 
 var $__e_sroa_0_18;
 var $1186;
 var $_pre_i2_i_i82444459;
 var $1187=HEAP32[(($245)>>2)];
 var $1188=(($1187+12)|0);
 var $1189=HEAP32[(($1188)>>2)];
 var $1190=(($1187+16)|0);
 var $1191=HEAP32[(($1190)>>2)];
 var $1192=($1189|0)==($1191|0);
 if($1192){label=383;break;}else{label=385;break;}
 case 383: 
 var $1194=$1187;
 var $1195=HEAP32[(($1194)>>2)];
 var $1196=(($1195+36)|0);
 var $1197=HEAP32[(($1196)>>2)];
 var $1198=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1197]($1187) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=384;break; } else { label=88;break; }
 case 384: 
 var $extract_t_i69=(($1198)&255);
 var $_0_i_off0_i70=$extract_t_i69;label=386;break;
 case 385: 
 var $1200=HEAP8[($1189)];
 var $_0_i_off0_i70=$1200;label=386;break;
 case 386: 
 var $_0_i_off0_i70;
 var $isascii1_i67=(($_0_i_off0_i70<<24)>>24)>-1;
 if($isascii1_i67){label=387;break;}else{label=388;break;}
 case 387: 
 var $1201=(($_0_i_off0_i70<<24)>>24);
 var $1202=HEAP32[(($247)>>2)];
 var $1203=(($1202+($1201<<1))|0);
 var $1204=HEAP16[(($1203)>>1)];
 var $1205=$1204&2048;
 var $1206=(($1205<<16)>>16)==0;
 if($1206){label=388;break;}else{label=389;break;}
 case 388: 
 var $1207=HEAP32[(($__err)>>2)];
 var $1208=$1207|4;
 HEAP32[(($__err)>>2)]=$1208;
 var $_0=0;var $1381=$1085;var $free220=$free216;label=444;break;
 case 389: 
 var $1210=HEAP32[(($__wn)>>2)];
 var $1211=($1210|0)==($1154|0);
 if($1211){label=390;break;}else{var $1239=$1154;var $1238=$1210;label=400;break;}
 case 390: 
 var $1213=HEAP32[(($267)>>2)];
 var $1214=($1213|0)!=((538)|0);
 var $1215=HEAP32[(($243)>>2)];
 var $1216=$1154;
 var $1217=$1215;
 var $1218=((($1216)-($1217))|0);
 var $1219=($1218>>>0)<2147483647;
 var $1220=$1218<<1;
 var $__i=($1219?$1220:-1);
 var $1221=($1214?$1215:0);
 var $1222=_realloc($1221,$__i);
 var $1223=($1222|0)==0;
 if($1223){label=391;break;}else{label=393;break;}
 case 391: 
 var $1225=___cxa_allocate_exception(4);
 var $1226=$1225;
 HEAP32[(($1226)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1225,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=392;break; } else { label=89;break; }
 case 392: 
 throw "Reached an unreachable!";
 case 393: 
 if($1214){label=394;break;}else{label=395;break;}
 case 394: 
 HEAP32[(($243)>>2)]=$1222;
 var $1234=$1222;label=399;break;
 case 395: 
 var $_pr_i=HEAP32[(($243)>>2)];
 HEAP32[(($243)>>2)]=$1222;
 var $1228=($_pr_i|0)==0;
 if($1228){var $1234=$1222;label=399;break;}else{label=396;break;}
 case 396: 
 var $1230=HEAP32[(($267)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1230]($_pr_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=397;break; } else { label=398;break; }
 case 397: 
 var $_pre_i=HEAP32[(($243)>>2)];
 var $1234=$_pre_i;label=399;break;
 case 398: 
 var $1232$0 = ___cxa_find_matching_catch(-1, -1,0); var $1232$1 = tempRet0;
 var $1233=$1232$0;
 ___clang_call_terminate($1233);
 throw "Reached an unreachable!";
 case 399: 
 var $1234;
 HEAP32[(($267)>>2)]=282;
 var $1235=(($1234+$1218)|0);
 HEAP32[(($__wn)>>2)]=$1235;
 var $1236=HEAP32[(($243)>>2)];
 var $1237=(($1236+$__i)|0);
 var $1239=$1237;var $1238=$1235;label=400;break;
 case 400: 
 var $1238;
 var $1239;
 var $1240=HEAP32[(($245)>>2)];
 var $1241=(($1240+12)|0);
 var $1242=HEAP32[(($1241)>>2)];
 var $1243=(($1240+16)|0);
 var $1244=HEAP32[(($1243)>>2)];
 var $1245=($1242|0)==($1244|0);
 if($1245){label=401;break;}else{label=403;break;}
 case 401: 
 var $1247=$1240;
 var $1248=HEAP32[(($1247)>>2)];
 var $1249=(($1248+36)|0);
 var $1250=HEAP32[(($1249)>>2)];
 var $1251=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1250]($1240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=402;break; } else { label=88;break; }
 case 402: 
 var $extract_t_i57=(($1251)&255);
 var $_pre442=HEAP32[(($__wn)>>2)];
 var $_0_i_off0_i58=$extract_t_i57;var $1254=$_pre442;label=404;break;
 case 403: 
 var $1253=HEAP8[($1242)];
 var $_0_i_off0_i58=$1253;var $1254=$1238;label=404;break;
 case 404: 
 var $1254;
 var $_0_i_off0_i58;
 var $1255=(($1254+1)|0);
 HEAP32[(($__wn)>>2)]=$1255;
 HEAP8[($1254)]=$_0_i_off0_i58;
 var $1256=((($__fd_1)-(1))|0);
 var $1257=HEAP32[(($245)>>2)];
 var $1258=(($1257+12)|0);
 var $1259=HEAP32[(($1258)>>2)];
 var $1260=(($1257+16)|0);
 var $1261=HEAP32[(($1260)>>2)];
 var $1262=($1259|0)==($1261|0);
 if($1262){label=405;break;}else{label=407;break;}
 case 405: 
 var $1264=$1257;
 var $1265=HEAP32[(($1264)>>2)];
 var $1266=(($1265+40)|0);
 var $1267=HEAP32[(($1266)>>2)];
 var $1268=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1267]($1257) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=406;break; } else { label=88;break; }
 case 406: 
 var $1269=($1256|0)>0;
 if($1269){var $1154=$1239;var $1153=$1186;var $_pre_i2_i_i82=$_pre_i2_i_i82444459;var $__fd_1=$1256;var $__e_sroa_0_16=$__e_sroa_0_18;label=369;break;}else{var $1272=$1239;var $__fd_2=$1256;var $__e_sroa_0_19=$__e_sroa_0_18;label=408;break;}
 case 407: 
 var $1271=(($1259+1)|0);
 HEAP32[(($1258)>>2)]=$1271;
 label=406;break;
 case 408: 
 var $__e_sroa_0_19;
 var $__fd_2;
 var $1272;
 var $1273=HEAP32[(($__wn)>>2)];
 var $1274=HEAP32[(($243)>>2)];
 var $1275=($1273|0)==($1274|0);
 if($1275){label=409;break;}else{var $__trailing_sign_1=$__trailing_sign_0364;var $1282=$1087;var $1281=$1086;var $1280=$1085;var $free215=$free216;var $1279=$1272;var $__fd_3=$__fd_2;var $__e_sroa_0_20=$__e_sroa_0_19;label=410;break;}
 case 409: 
 var $1277=HEAP32[(($__err)>>2)];
 var $1278=$1277|4;
 HEAP32[(($__err)>>2)]=$1278;
 var $_0=0;var $1381=$1085;var $free220=$free216;label=444;break;
 case 410: 
 var $__e_sroa_0_20;
 var $__fd_3;
 var $1279;
 var $free215;
 var $1280;
 var $1281;
 var $1282;
 var $__trailing_sign_1;
 var $1283=((($__p_0362)+(1))|0);
 var $1284=($1283>>>0)<4;
 if($1284){var $273=$1279;var $free214358=$free215;var $272=$1280;var $271=$1281;var $270=$1282;var $__p_0362=$1283;var $__trailing_sign_0364=$__trailing_sign_1;var $__fd_0=$__fd_3;var $__e_sroa_0_0=$__e_sroa_0_20;label=71;break;}else{var $free214_lcssa=$free215;var $_lcssa302=$1280;var $_lcssa318=$1281;var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $__e_sroa_0_21=$__e_sroa_0_20;label=411;break;}
 case 411: 
 var $__e_sroa_0_21;
 var $__trailing_sign_0_lcssa;
 var $_lcssa318;
 var $_lcssa302;
 var $free214_lcssa;
 var $1285=($__trailing_sign_0_lcssa|0)==0;
 if($1285){label=441;break;}else{label=412;break;}
 case 412: 
 var $1286=$__trailing_sign_0_lcssa;
 var $1287=$__trailing_sign_0_lcssa;
 var $1288=(($1287+1)|0);
 var $1289=(($__trailing_sign_0_lcssa+8)|0);
 var $1290=(($__trailing_sign_0_lcssa+4)|0);
 var $__i_0=1;var $__e_sroa_0_22=$__e_sroa_0_21;label=413;break;
 case 413: 
 var $__e_sroa_0_22;
 var $__i_0;
 var $1291=HEAP8[($1286)];
 var $1292=$1291&1;
 var $1293=(($1292<<24)>>24)==0;
 if($1293){label=415;break;}else{label=414;break;}
 case 414: 
 var $1295=HEAP32[(($1290)>>2)];
 var $1299=$1295;label=416;break;
 case 415: 
 var $1297=($1291&255);
 var $1298=$1297>>>1;
 var $1299=$1298;label=416;break;
 case 416: 
 var $1299;
 var $1300=($__i_0>>>0)<($1299>>>0);
 if($1300){label=417;break;}else{label=441;break;}
 case 417: 
 var $1302=HEAP32[(($245)>>2)];
 var $1303=($1302|0)==0;
 if($1303){var $1317=0;label=423;break;}else{label=418;break;}
 case 418: 
 var $1305=(($1302+12)|0);
 var $1306=HEAP32[(($1305)>>2)];
 var $1307=(($1302+16)|0);
 var $1308=HEAP32[(($1307)>>2)];
 var $1309=($1306|0)==($1308|0);
 if($1309){label=419;break;}else{var $1317=$1302;label=423;break;}
 case 419: 
 var $1310=$1302;
 var $1311=HEAP32[(($1310)>>2)];
 var $1312=(($1311+36)|0);
 var $1313=HEAP32[(($1312)>>2)];
 var $1314=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1313]($1302) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=420;break; } else { label=85;break; }
 case 420: 
 var $1315=($1314|0)==-1;
 if($1315){label=422;break;}else{label=421;break;}
 case 421: 
 var $_pre_i_i_i=HEAP32[(($245)>>2)];
 var $1317=$_pre_i_i_i;label=423;break;
 case 422: 
 HEAP32[(($245)>>2)]=0;
 var $1317=0;label=423;break;
 case 423: 
 var $1317;
 var $1318=($1317|0)==0;
 var $1319=($__e_sroa_0_22|0)==0;
 if($1319){label=428;break;}else{label=424;break;}
 case 424: 
 var $1321=(($__e_sroa_0_22+12)|0);
 var $1322=HEAP32[(($1321)>>2)];
 var $1323=(($__e_sroa_0_22+16)|0);
 var $1324=HEAP32[(($1323)>>2)];
 var $1325=($1322|0)==($1324|0);
 if($1325){label=426;break;}else{label=425;break;}
 case 425: 
 if($1318){var $__e_sroa_0_24=$__e_sroa_0_22;label=430;break;}else{label=437;break;}
 case 426: 
 var $1326=$__e_sroa_0_22;
 var $1327=HEAP32[(($1326)>>2)];
 var $1328=(($1327+36)|0);
 var $1329=HEAP32[(($1328)>>2)];
 var $1330=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1329]($__e_sroa_0_22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=427;break; } else { label=85;break; }
 case 427: 
 var $1331=($1330|0)==-1;
 if($1331){label=428;break;}else{label=429;break;}
 case 428: 
 if($1318){label=437;break;}else{var $__e_sroa_0_24=0;label=430;break;}
 case 429: 
 if($1318){var $__e_sroa_0_24=$__e_sroa_0_22;label=430;break;}else{label=437;break;}
 case 430: 
 var $__e_sroa_0_24;
 var $1332=HEAP32[(($245)>>2)];
 var $1333=(($1332+12)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1332+16)|0);
 var $1336=HEAP32[(($1335)>>2)];
 var $1337=($1334|0)==($1336|0);
 if($1337){label=431;break;}else{label=433;break;}
 case 431: 
 var $1339=$1332;
 var $1340=HEAP32[(($1339)>>2)];
 var $1341=(($1340+36)|0);
 var $1342=HEAP32[(($1341)>>2)];
 var $1343=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1342]($1332) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=432;break; } else { label=85;break; }
 case 432: 
 var $extract_t_i=(($1343)&255);
 var $_0_i_off0_i=$extract_t_i;label=434;break;
 case 433: 
 var $1345=HEAP8[($1334)];
 var $_0_i_off0_i=$1345;label=434;break;
 case 434: 
 var $_0_i_off0_i;
 var $1346=HEAP8[($1286)];
 var $1347=$1346&1;
 var $1348=(($1347<<24)>>24)==0;
 if($1348){var $1351=$1288;label=436;break;}else{label=435;break;}
 case 435: 
 var $1350=HEAP32[(($1289)>>2)];
 var $1351=$1350;label=436;break;
 case 436: 
 var $1351;
 var $1352=(($1351+$__i_0)|0);
 var $1353=HEAP8[($1352)];
 var $1354=(($_0_i_off0_i<<24)>>24)==(($1353<<24)>>24);
 if($1354){label=438;break;}else{label=437;break;}
 case 437: 
 var $1356=HEAP32[(($__err)>>2)];
 var $1357=$1356|4;
 HEAP32[(($__err)>>2)]=$1357;
 var $_0=0;var $1381=$_lcssa302;var $free220=$free214_lcssa;label=444;break;
 case 438: 
 var $1359=((($__i_0)+(1))|0);
 var $1360=HEAP32[(($245)>>2)];
 var $1361=(($1360+12)|0);
 var $1362=HEAP32[(($1361)>>2)];
 var $1363=(($1360+16)|0);
 var $1364=HEAP32[(($1363)>>2)];
 var $1365=($1362|0)==($1364|0);
 if($1365){label=439;break;}else{label=440;break;}
 case 439: 
 var $1367=$1360;
 var $1368=HEAP32[(($1367)>>2)];
 var $1369=(($1368+40)|0);
 var $1370=HEAP32[(($1369)>>2)];
 var $1371=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1370]($1360) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1359;var $__e_sroa_0_22=$__e_sroa_0_24;label=413;break; } else { label=85;break; }
 case 440: 
 var $1373=(($1362+1)|0);
 HEAP32[(($1361)>>2)]=$1373;
 var $__i_0=$1359;var $__e_sroa_0_22=$__e_sroa_0_24;label=413;break;
 case 441: 
 var $1374=($_lcssa302|0)==($_lcssa318|0);
 if($1374){var $_0=1;var $1381=$_lcssa318;var $free220=$free214_lcssa;label=444;break;}else{label=442;break;}
 case 442: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa302,$_lcssa318,$__et);
 var $1376=HEAP32[(($__et)>>2)];
 var $1377=($1376|0)==0;
 if($1377){var $_0=1;var $1381=$_lcssa302;var $free220=$free214_lcssa;label=444;break;}else{label=443;break;}
 case 443: 
 var $1379=HEAP32[(($__err)>>2)];
 var $1380=$1379|4;
 HEAP32[(($__err)>>2)]=$1380;
 var $_0=0;var $1381=$_lcssa302;var $free220=$free214_lcssa;label=444;break;
 case 444: 
 var $free220;
 var $1381;
 var $_0;
 var $1382=HEAP8[($this2_i_i_i15)];
 var $1383=$1382&1;
 var $1384=(($1383<<24)>>24)==0;
 if($1384){label=447;break;}else{label=445;break;}
 case 445: 
 var $1386=HEAP32[(($264)>>2)];
 var $1387=($1386|0)==0;
 if($1387){label=447;break;}else{label=446;break;}
 case 446: 
 _free($1386);
 label=447;break;
 case 447: 
 var $1389=HEAP8[($this2_i_i_i12)];
 var $1390=$1389&1;
 var $1391=(($1390<<24)>>24)==0;
 if($1391){label=450;break;}else{label=448;break;}
 case 448: 
 var $1393=HEAP32[(($251)>>2)];
 var $1394=($1393|0)==0;
 if($1394){label=450;break;}else{label=449;break;}
 case 449: 
 _free($1393);
 label=450;break;
 case 450: 
 var $1396=HEAP8[($this2_i_i_i10)];
 var $1397=$1396&1;
 var $1398=(($1397<<24)>>24)==0;
 if($1398){label=453;break;}else{label=451;break;}
 case 451: 
 var $1400=HEAP32[(($255)>>2)];
 var $1401=($1400|0)==0;
 if($1401){label=453;break;}else{label=452;break;}
 case 452: 
 _free($1400);
 label=453;break;
 case 453: 
 var $1403=HEAP8[($this2_i_i_i9)];
 var $1404=$1403&1;
 var $1405=(($1404<<24)>>24)==0;
 if($1405){label=456;break;}else{label=454;break;}
 case 454: 
 var $1407=HEAP32[(($260)>>2)];
 var $1408=($1407|0)==0;
 if($1408){label=456;break;}else{label=455;break;}
 case 455: 
 _free($1407);
 label=456;break;
 case 456: 
 var $1410=HEAP8[($this2_i_i_i)];
 var $1411=$1410&1;
 var $1412=(($1411<<24)>>24)==0;
 if($1412){label=459;break;}else{label=457;break;}
 case 457: 
 var $1414=(($__grp+8)|0);
 var $1415=HEAP32[(($1414)>>2)];
 var $1416=($1415|0)==0;
 if($1416){label=459;break;}else{label=458;break;}
 case 458: 
 _free($1415);
 label=459;break;
 case 459: 
 var $1418=($1381|0)==0;
 if($1418){label=462;break;}else{label=460;break;}
 case 460: 
 var $1420=$1381;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free220]($1420) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=462;break; } else { label=461;break; }
 case 461: 
 var $1422$0 = ___cxa_find_matching_catch(-1, -1,0); var $1422$1 = tempRet0;
 var $1423=$1422$0;
 ___clang_call_terminate($1423);
 throw "Reached an unreachable!";
 case 462: 
 var $$etemp$25$0=400;
 var $$etemp$25$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__121__throw_runtime_errorEPKc($msg){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 HEAP32[(($2)>>2)]=5256;
 var $3=_strlen($msg);
 var $4=((($3)+(13))|0);
 var $5=($4|0)==0;
 var $_size_i=($5?1:$4);
 label=2;break;
 case 2: 
 var $7=_malloc($_size_i);
 var $8=($7|0)==0;
 if($8){label=3;break;}else{label=17;break;}
 case 3: 
 var $10=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $11=($10|0)==0;
 if($11){label=10;break;}else{label=4;break;}
 case 4: 
 var $13=$10;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$13]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $15=$lpad_phi_i$1;
 var $16=($15|0)<0;
 if($16){label=8;break;}else{var $eh_lpad_body2$1=$lpad_phi_i$1;var $eh_lpad_body2$0=$lpad_phi_i$0;label=13;break;}
 case 8: 
 var $18=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $20=___cxa_allocate_exception(4);
 var $21=$20;
 HEAP32[(($21)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($20,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $24$0 = ___cxa_find_matching_catch(-1, -1); var $24$1 = tempRet0;
 var $eh_lpad_body2$1=$24$1;var $eh_lpad_body2$0=$24$0;label=13;break;
 case 13: 
 var $eh_lpad_body2$0;
 var $eh_lpad_body2$1;
 var $25=$eh_lpad_body2$1;
 var $26=($25|0)<0;
 if($26){label=14;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body2$1;var $eh_lpad_body_i$0=$eh_lpad_body2$0;label=18;break;}
 case 14: 
 var $28=$eh_lpad_body2$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($28) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $30$0 = ___cxa_find_matching_catch(-1, -1); var $30$1 = tempRet0;
 var $eh_lpad_body_i$1=$30$1;var $eh_lpad_body_i$0=$30$0;label=18;break;
 case 17: 
 var $32=(($1+4)|0);
 var $33=$32;
 var $34=((($3)+(1))|0);
 var $35=$7;
 var $36=(($7+4)|0);
 var $37=$36;
 HEAP32[(($37)>>2)]=$3;
 HEAP32[(($35)>>2)]=$3;
 var $38=(($7+12)|0);
 HEAP32[(($33)>>2)]=$38;
 var $39=(($7+8)|0);
 var $40=$39;
 HEAP32[(($40)>>2)]=0;
 assert($34 % 1 === 0);(_memcpy($38, $msg, $34)|0);
 ___cxa_throw($1,11736,(236));
 throw "Reached an unreachable!";
 case 18: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $41=$1;

 ___cxa_free_exception($1);
 ___resumeException($eh_lpad_body_i$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+144)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(120);
 var $__wn=(sp)+(128);
 var $__neg=(sp)+(136);
 var $1=(($__wbuf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 var $2=(($__wb)|0);
 HEAP32[(($2)>>2)]=$1;
 var $3=(($__wb+4)|0);
 HEAP32[(($3)>>2)]=538;
 var $4=(($__wbuf+100)|0);
 var $5=(($__iob+28)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$6;
 var $8=(($6+4)|0);
 var $9=$8;
 var $10=(tempValue=HEAP32[(($9)>>2)],HEAP32[(($9)>>2)]=tempValue+1,tempValue);
 var $11=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $12=HEAP32[((18672)>>2)];
 var $13=($12|0)==-1;
 if($13){label=3;break;}else{label=2;break;}
 case 2: 
 var $15=(($__p_i_i_i_i)|0);
 HEAP32[(($15)>>2)]=18672;
 var $16=(($__p_i_i_i_i+4)|0);
 HEAP32[(($16)>>2)]=(202);
 var $17=(($__p_i_i_i_i+8)|0);
 HEAP32[(($17)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=64;break; }
 case 3: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $18=HEAP32[((18676)>>2)];
 var $19=((($18)-(1))|0);
 var $20=(($6+12)|0);
 var $21=$20;
 var $22=HEAP32[(($21)>>2)];
 var $23=(($6+8)|0);
 var $24=$23;
 var $25=HEAP32[(($24)>>2)];
 var $26=$22;
 var $27=$25;
 var $28=((($26)-($27))|0);
 var $29=$28>>2;
 var $30=($29>>>0)>($19>>>0);
 if($30){label=4;break;}else{label=5;break;}
 case 4: 
 var $31=(($25+($19<<2))|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=($32|0)==0;
 if($33){label=5;break;}else{label=7;break;}
 case 5: 
 var $34=___cxa_allocate_exception(4);
 var $35=$34;
 HEAP32[(($35)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($34,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=64;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $37=$32;
 HEAP8[($__neg)]=0;
 var $38=(($__e)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($__iob+4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIcNS_19istreambuf_iteratorIcNS_11char_traitsIcEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIcEERNS_10unique_ptrIcPFvPvEEERPcSM_($__b,$39,$__intl,$7,$41,$__err,$__neg,$37,$__wb,$__wn,$4) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=64;break; }
 case 8: 
 if($42){label=9;break;}else{label=44;break;}
 case 9: 
 var $45=$__v;
 var $46=HEAP8[($45)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)==0;
 if($48){label=11;break;}else{label=10;break;}
 case 10: 
 var $50=(($__v+8)|0);
 var $51=HEAP32[(($50)>>2)];
 HEAP8[($51)]=0;
 var $52=(($__v+4)|0);
 HEAP32[(($52)>>2)]=0;
 label=12;break;
 case 11: 
 var $54=$__v;
 var $55=(($54+1)|0);
 HEAP8[($55)]=0;
 HEAP8[($45)]=0;
 label=12;break;
 case 12: 
 var $56=HEAP8[($__neg)];
 var $57=(($56<<24)>>24)==0;
 var $_pre14=$32;
 if($57){label=24;break;}else{label=13;break;}
 case 13: 
 var $59=HEAP32[(($_pre14)>>2)];
 var $60=(($59+28)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($37,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=64;break; }
 case 14: 
 var $63=HEAP8[($45)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)!=0;
 if($65){label=16;break;}else{label=15;break;}
 case 15: 
 var $67=($63&255);
 var $68=$67>>>1;
 var $__sz_0_i=$68;var $__cap_0_i=10;label=17;break;
 case 16: 
 var $70=(($__v)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$71&-2;
 var $73=((($72)-(1))|0);
 var $74=(($__v+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $__sz_0_i=$75;var $__cap_0_i=$73;label=17;break;
 case 17: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $77=($__sz_0_i|0)==($__cap_0_i|0);
 if($77){label=18;break;}else{label=20;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=64;break; }
 case 19: 
 var $79=HEAP8[($45)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=21;break;}else{label=22;break;}
 case 20: 
 if($65){label=22;break;}else{label=21;break;}
 case 21: 
 var $84=$__v;
 var $85=(($84+1)|0);
 var $86=$__sz_0_i<<1;
 var $87=((($86)+(2))|0);
 var $88=(($87)&255);
 HEAP8[($45)]=$88;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$85;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=23;break;
 case 22: 
 var $90=(($__v+8)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=((($__sz_0_i)+(1))|0);
 var $93=(($__v+4)|0);
 HEAP32[(($93)>>2)]=$92;
 var $_pn_i=$91;var $__p_0_sum_pre_phi_i=$92;label=23;break;
 case 23: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$62;
 var $94=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($94)]=0;
 label=24;break;
 case 24: 
 var $95=HEAP32[(($_pre14)>>2)];
 var $96=(($95+28)|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($37,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=64;break; }
 case 25: 
 var $99=HEAP32[(($2)>>2)];
 var $100=HEAP32[(($__wn)>>2)];
 var $101=((($100)-(1))|0);
 var $102=($99>>>0)<($101>>>0);
 if($102){var $__w_09=$99;label=27;break;}else{var $__w_0_lcssa=$99;label=28;break;}
 case 26: 
 var $104=($107>>>0)<($101>>>0);
 if($104){var $__w_09=$107;label=27;break;}else{var $__w_0_lcssa=$107;label=28;break;}
 case 27: 
 var $__w_09;
 var $105=HEAP8[($__w_09)];
 var $106=(($105<<24)>>24)==(($98<<24)>>24);
 var $107=(($__w_09+1)|0);
 if($106){label=26;break;}else{var $__w_0_lcssa=$__w_09;label=28;break;}
 case 28: 
 var $__w_0_lcssa;
 var $108=$__w_0_lcssa;
 var $109=HEAP8[($45)];
 var $110=$109&1;
 var $111=(($110<<24)>>24)==0;
 if($111){label=29;break;}else{label=30;break;}
 case 29: 
 var $112=($109&255);
 var $113=$112>>>1;
 var $123=10;var $122=$109;var $121=$113;label=31;break;
 case 30: 
 var $115=(($__v+4)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($__v)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$118&-2;
 var $phitmp_i_i=((($119)-(1))|0);
 var $120=(($118)&255);
 var $123=$phitmp_i_i;var $122=$120;var $121=$116;label=31;break;
 case 31: 
 var $121;
 var $122;
 var $123;
 var $124=$100;
 var $125=((($124)-($108))|0);
 var $126=($100|0)==($__w_0_lcssa|0);
 if($126){label=44;break;}else{label=32;break;}
 case 32: 
 var $128=((($123)-($121))|0);
 var $129=($128>>>0)<($125>>>0);
 if($129){label=33;break;}else{var $134=$122;label=35;break;}
 case 33: 
 var $131=((($121)+($125))|0);
 var $132=((($131)-($123))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__v,$123,$132,$121,$121,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=64;break; }
 case 34: 
 var $_pre_i=HEAP8[($45)];
 var $134=$_pre_i;label=35;break;
 case 35: 
 var $134;
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=37;break;}else{label=36;break;}
 case 36: 
 var $138=(($__v+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $143=$139;label=38;break;
 case 37: 
 var $141=$__v;
 var $142=(($141+1)|0);
 var $143=$142;label=38;break;
 case 38: 
 var $143;
 var $144=(($143+$121)|0);
 var $145=((($121)-($108))|0);
 var $scevgep_i=(($100+$145)|0);
 var $scevgep3_i=$scevgep_i;
 var $_01_i=$__w_0_lcssa;var $__p_02_i=$144;label=39;break;
 case 39: 
 var $__p_02_i;
 var $_01_i;
 var $147=HEAP8[($_01_i)];
 HEAP8[($__p_02_i)]=$147;
 var $148=(($_01_i+1)|0);
 var $149=($148|0)==($100|0);
 if($149){label=41;break;}else{label=40;break;}
 case 40: 
 var $150=(($__p_02_i+1)|0);
 var $_01_i=$148;var $__p_02_i=$150;label=39;break;
 case 41: 
 var $scevgep4_i=(($143+$scevgep3_i)|0);
 HEAP8[($scevgep4_i)]=0;
 var $152=((($121)+($125))|0);
 var $153=HEAP8[($45)];
 var $154=$153&1;
 var $155=(($154<<24)>>24)==0;
 if($155){label=43;break;}else{label=42;break;}
 case 42: 
 var $157=(($__v+4)|0);
 HEAP32[(($157)>>2)]=$152;
 label=44;break;
 case 43: 
 var $159=$152<<1;
 var $160=(($159)&255);
 HEAP8[($45)]=$160;
 label=44;break;
 case 44: 
 var $161=(($__b)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=($162|0)==0;
 if($163){var $177=0;label=49;break;}else{label=45;break;}
 case 45: 
 var $165=(($162+12)|0);
 var $166=HEAP32[(($165)>>2)];
 var $167=(($162+16)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($166|0)==($168|0);
 if($169){label=46;break;}else{var $177=$162;label=49;break;}
 case 46: 
 var $170=$162;
 var $171=HEAP32[(($170)>>2)];
 var $172=(($171+36)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$173]($162) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=47;break; } else { label=64;break; }
 case 47: 
 var $175=($174|0)==-1;
 if($175){label=48;break;}else{var $177=$162;label=49;break;}
 case 48: 
 HEAP32[(($161)>>2)]=0;
 var $177=0;label=49;break;
 case 49: 
 var $177;
 var $178=($177|0)==0;
 var $179=($39|0)==0;
 if($179){label=55;break;}else{label=50;break;}
 case 50: 
 var $181=(($39+12)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(($39+16)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($182|0)==($184|0);
 if($185){label=52;break;}else{label=51;break;}
 case 51: 
 if($178){label=58;break;}else{label=57;break;}
 case 52: 
 var $186=$39;
 var $187=HEAP32[(($186)>>2)];
 var $188=(($187+36)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$189]($39) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=53;break; } else { label=64;break; }
 case 53: 
 var $191=($190|0)==-1;
 if($191){label=54;break;}else{label=56;break;}
 case 54: 
 HEAP32[(($38)>>2)]=0;
 label=55;break;
 case 55: 
 if($178){label=57;break;}else{label=58;break;}
 case 56: 
 if($178){label=58;break;}else{label=57;break;}
 case 57: 
 var $194=HEAP32[(($__err)>>2)];
 var $195=$194|2;
 HEAP32[(($__err)>>2)]=$195;
 label=58;break;
 case 58: 
 var $196=(($agg_result)|0);
 HEAP32[(($196)>>2)]=$177;
 var $197=(($6+4)|0);
 var $198=$197;
 var $199=(tempValue=HEAP32[(($198)>>2)],HEAP32[(($198)>>2)]=tempValue+-1,tempValue);
 var $200=($199|0)==0;
 if($200){label=59;break;}else{label=60;break;}
 case 59: 
 var $202=$6;
 var $203=$6;
 var $204=HEAP32[(($203)>>2)];
 var $205=(($204+8)|0);
 var $206=HEAP32[(($205)>>2)];
 FUNCTION_TABLE[$206]($202);
 label=60;break;
 case 60: 
 var $207=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $208=($207|0)==0;
 if($208){label=63;break;}else{label=61;break;}
 case 61: 
 var $210=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$210]($207) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=62;break; }
 case 62: 
 var $212$0 = ___cxa_find_matching_catch(-1, -1,0); var $212$1 = tempRet0;
 var $213=$212$0;
 ___clang_call_terminate($213);
 throw "Reached an unreachable!";
 case 63: 
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 64: 
 var $215$0 = ___cxa_find_matching_catch(-1, -1); var $215$1 = tempRet0;
 var $216=(($6+4)|0);
 var $217=$216;
 var $218=(tempValue=HEAP32[(($217)>>2)],HEAP32[(($217)>>2)]=tempValue+-1,tempValue);
 var $219=($218|0)==0;
 if($219){label=65;break;}else{label=66;break;}
 case 65: 
 var $221=$6;
 var $222=$6;
 var $223=HEAP32[(($222)>>2)];
 var $224=(($223+8)|0);
 var $225=HEAP32[(($224)>>2)];
 FUNCTION_TABLE[$225]($221);
 label=66;break;
 case 66: 
 var $_pre=HEAP32[(($2)>>2)];
 HEAP32[(($2)>>2)]=0;
 var $226=($_pre|0)==0;
 if($226){label=69;break;}else{label=67;break;}
 case 67: 
 var $228=HEAP32[(($3)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$228]($_pre) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=68;break; }
 case 68: 
 var $230$0 = ___cxa_find_matching_catch(-1, -1,0); var $230$1 = tempRet0;
 var $231=$230$0;
 ___clang_call_terminate($231);
 throw "Reached an unreachable!";
 case 69: 
 ___resumeException($215$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grouping,$__g,$__g_end,$__err){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$__grouping;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__grouping+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $11=$7;label=4;break;
 case 3: 
 var $9=($2&255);
 var $10=$9>>>1;
 var $11=$10;label=4;break;
 case 4: 
 var $11;
 var $12=($11|0)==0;
 if($12){label=21;break;}else{label=5;break;}
 case 5: 
 var $14=($__g|0)==($__g_end|0);
 if($14){var $23=$2;label=9;break;}else{label=6;break;}
 case 6: 
 var $15=((($__g_end)-(4))|0);
 var $16=($15>>>0)>($__g>>>0);
 if($16){var $_012_i_i=$__g;var $17=$15;label=7;break;}else{var $23=$2;label=9;break;}
 case 7: 
 var $17;
 var $_012_i_i;
 var $18=HEAP32[(($_012_i_i)>>2)];
 var $19=HEAP32[(($17)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$19;
 HEAP32[(($17)>>2)]=$18;
 var $20=(($_012_i_i+4)|0);
 var $21=((($17)-(4))|0);
 var $22=($20>>>0)<($21>>>0);
 if($22){var $_012_i_i=$20;var $17=$21;label=7;break;}else{label=8;break;}
 case 8: 
 var $_pre=HEAP8[($1)];
 var $23=$_pre;label=9;break;
 case 9: 
 var $23;
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $27=(($__grouping+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($__grouping+4)|0);
 var $30=HEAP32[(($29)>>2)];
 var $37=$30;var $36=$28;label=12;break;
 case 11: 
 var $32=$__grouping;
 var $33=(($32+1)|0);
 var $34=($23&255);
 var $35=$34>>>1;
 var $37=$35;var $36=$33;label=12;break;
 case 12: 
 var $36;
 var $37;
 var $38=((($__g_end)-(4))|0);
 var $39=($38>>>0)>($__g>>>0);
 var $40=HEAP8[($36)];
 var $_not9=(($40<<24)>>24)<1;
 var $41=(($40<<24)>>24)==127;
 var $or_cond210=$_not9|$41;
 if($39){label=13;break;}else{var $_lcssa6=$40;var $or_cond2_lcssa=$or_cond210;label=18;break;}
 case 13: 
 var $42=(($36+$37)|0);
 var $43=$42;
 var $__ig_011=$36;var $__r_012=$__g;var $45=$40;var $or_cond213=$or_cond210;label=14;break;
 case 14: 
 var $or_cond213;
 var $45;
 var $__r_012;
 var $__ig_011;
 if($or_cond213){label=17;break;}else{label=15;break;}
 case 15: 
 var $47=(($45<<24)>>24);
 var $48=HEAP32[(($__r_012)>>2)];
 var $49=($47|0)==($48|0);
 if($49){label=17;break;}else{label=16;break;}
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 label=21;break;
 case 17: 
 var $52=$__ig_011;
 var $53=((($43)-($52))|0);
 var $54=($53|0)>1;
 var $55=(($__ig_011+1)|0);
 var $___ig_0=($54?$55:$__ig_011);
 var $56=(($__r_012+4)|0);
 var $57=($56>>>0)<($38>>>0);
 var $58=HEAP8[($___ig_0)];
 var $_not=(($58<<24)>>24)<1;
 var $59=(($58<<24)>>24)==127;
 var $or_cond2=$_not|$59;
 if($57){var $__ig_011=$___ig_0;var $__r_012=$56;var $45=$58;var $or_cond213=$or_cond2;label=14;break;}else{var $_lcssa6=$58;var $or_cond2_lcssa=$or_cond2;label=18;break;}
 case 18: 
 var $or_cond2_lcssa;
 var $_lcssa6;
 if($or_cond2_lcssa){label=21;break;}else{label=19;break;}
 case 19: 
 var $61=(($_lcssa6<<24)>>24);
 var $62=HEAP32[(($38)>>2)];
 var $63=($61>>>0)<($62>>>0);
 var $64=($62|0)==0;
 var $or_cond=$63|$64;
 if($or_cond){label=20;break;}else{label=21;break;}
 case 20: 
 HEAP32[(($__err)>>2)]=4;
 label=21;break;
 case 21: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRe($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+584)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__neg=(sp)+(432);
 var $__atoms=(sp)+(440);
 var $__nbuf=(sp)+(480);
 var $1=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=538;
 var $5=(($__wbuf+400)|0);
 var $6=(($__iob+28)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 var $11=(tempValue=HEAP32[(($10)>>2)],HEAP32[(($10)>>2)]=tempValue+1,tempValue);
 var $12=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18664)>>2)];
 var $14=($13|0)==-1;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($__p_i_i_i_i)|0);
 HEAP32[(($16)>>2)]=18664;
 var $17=(($__p_i_i_i_i+4)|0);
 HEAP32[(($17)>>2)]=(202);
 var $18=(($__p_i_i_i_i+8)|0);
 HEAP32[(($18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=14;break; }
 case 3: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $19=HEAP32[((18668)>>2)];
 var $20=((($19)-(1))|0);
 var $21=(($7+12)|0);
 var $22=$21;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($7+8)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $27=$23;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($20>>>0);
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 var $32=(($26+($20<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=5;break;}else{label=7;break;}
 case 5: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=14;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $38=$33;
 HEAP8[($__neg)]=0;
 var $39=(($__e)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($__iob+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$40,$__intl,$8,$42,$__err,$__neg,$38,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=14;break; }
 case 8: 
 if($43){label=9;break;}else{label=48;break;}
 case 9: 
 var $46=$__atoms;
 var $$etemp$3$0=40;
 var $$etemp$3$1=0;

 var $47=(($__atoms)|0);
 var $48=$33;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+48)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$51]($38,4880,4890,$47) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=14;break; }
 case 10: 
 var $53=(($__nbuf)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $54=HEAP32[(($__wn)>>2)];
 var $55=HEAP32[(($3)>>2)];
 var $56=$54;
 var $57=$55;
 var $58=((($56)-($57))|0);
 var $59=($58|0)>392;
 if($59){label=11;break;}else{var $__nc_0=$53;var $80=0;label=18;break;}
 case 11: 
 var $60=$58>>2;
 var $61=((($60)+(2))|0);
 var $62=_malloc($61);
 var $63=($62|0)==0;
 if($63){label=12;break;}else{var $__nc_0=$62;var $80=$62;label=18;break;}
 case 12: 
 var $65=___cxa_allocate_exception(4);
 var $66=$65;
 HEAP32[(($66)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($65,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { var $72=0;label=15;break; }
 case 13: 
 throw "Reached an unreachable!";
 case 14: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1); var $68$1 = tempRet0;
 var $69=$68$0;
 var $70=$68$1;
 var $_0=$69;var $_01=$70;label=69;break;
 case 15: 
 var $72;
 var $73$0 = ___cxa_find_matching_catch(-1, -1); var $73$1 = tempRet0;
 var $eh_lpad_body$1=$73$1;var $eh_lpad_body$0=$73$0;var $74=$72;label=16;break;
 case 16: 
 var $74;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $75=$eh_lpad_body$0;
 var $76=$eh_lpad_body$1;
 var $77=($74|0)==0;
 if($77){var $_0=$75;var $_01=$76;label=69;break;}else{label=17;break;}
 case 17: 
 _free($74);
 var $_0=$75;var $_01=$76;label=69;break;
 case 18: 
 var $80;
 var $__nc_0;
 var $81=HEAP8[($__neg)];
 var $82=(($81<<24)>>24)==0;
 if($82){var $__nc_1=$__nc_0;label=20;break;}else{label=19;break;}
 case 19: 
 var $84=(($__nc_0+1)|0);
 HEAP8[($__nc_0)]=45;
 var $__nc_1=$84;label=20;break;
 case 20: 
 var $__nc_1;
 var $86=($55>>>0)<($54>>>0);
 if($86){label=21;break;}else{var $__nc_2_lcssa=$__nc_1;label=26;break;}
 case 21: 
 var $87=(($__atoms+40)|0);
 var $88=$__atoms;
 var $__nc_210=$__nc_1;var $__w_011=$55;label=22;break;
 case 22: 
 var $__w_011;
 var $__nc_210;
 var $90=HEAP32[(($__w_011)>>2)];
 var $_01_i=$47;label=24;break;
 case 23: 
 var $92=($96|0)==($87|0);
 if($92){var $_0_lcssa_i=$87;label=25;break;}else{var $_01_i=$96;label=24;break;}
 case 24: 
 var $_01_i;
 var $94=HEAP32[(($_01_i)>>2)];
 var $95=($94|0)==($90|0);
 var $96=(($_01_i+4)|0);
 if($95){var $_0_lcssa_i=$_01_i;label=25;break;}else{label=23;break;}
 case 25: 
 var $_0_lcssa_i;
 var $97=$_0_lcssa_i;
 var $98=((($97)-($88))|0);
 var $99=$98>>2;
 var $100=((4880+$99)|0);
 var $101=HEAP8[($100)];
 HEAP8[($__nc_210)]=$101;
 var $102=(($__w_011+4)|0);
 var $103=(($__nc_210+1)|0);
 var $104=HEAP32[(($__wn)>>2)];
 var $105=($102>>>0)<($104>>>0);
 if($105){var $__nc_210=$103;var $__w_011=$102;label=22;break;}else{var $__nc_2_lcssa=$103;label=26;break;}
 case 26: 
 var $__nc_2_lcssa;
 HEAP8[($__nc_2_lcssa)]=0;
 var $106=_sscanf($53,3784,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAP32[((tempVarArgs)>>2)]=$__v,tempVarArgs)); STACKTOP=tempVarArgs;
 var $107=($106|0)==1;
 if($107){label=46;break;}else{label=27;break;}
 case 27: 
 var $109=___cxa_allocate_exception(8);
 var $110=$109;
 HEAP32[(($110)>>2)]=5256;
 label=28;break;
 case 28: 
 var $112=_malloc(28);
 var $113=($112|0)==0;
 if($113){label=29;break;}else{label=43;break;}
 case 29: 
 var $115=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $116=($115|0)==0;
 if($116){label=36;break;}else{label=30;break;}
 case 30: 
 var $118=$115;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=31;break; }
 case 31: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=33;break;
 case 33: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $120=$lpad_phi_i$1;
 var $121=($120|0)<0;
 if($121){label=34;break;}else{var $eh_lpad_body6$1=$lpad_phi_i$1;var $eh_lpad_body6$0=$lpad_phi_i$0;label=39;break;}
 case 34: 
 var $123=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($123) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=38;break; }
 case 35: 
 throw "Reached an unreachable!";
 case 36: 
 var $125=___cxa_allocate_exception(4);
 var $126=$125;
 HEAP32[(($126)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($125,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=32;break; }
 case 37: 
 throw "Reached an unreachable!";
 case 38: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1); var $129$1 = tempRet0;
 var $eh_lpad_body6$1=$129$1;var $eh_lpad_body6$0=$129$0;label=39;break;
 case 39: 
 var $eh_lpad_body6$0;
 var $eh_lpad_body6$1;
 var $130=$eh_lpad_body6$1;
 var $131=($130|0)<0;
 if($131){label=40;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body6$1;var $eh_lpad_body_i$0=$eh_lpad_body6$0;label=45;break;}
 case 40: 
 var $133=$eh_lpad_body6$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($133) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $135$0 = ___cxa_find_matching_catch(-1, -1); var $135$1 = tempRet0;
 var $eh_lpad_body_i$1=$135$1;var $eh_lpad_body_i$0=$135$0;label=45;break;
 case 43: 
 var $137=(($109+4)|0);
 var $138=$137;
 var $139=$112;
 var $140=(($112+4)|0);
 var $141=$140;
 HEAP32[(($141)>>2)]=15;
 HEAP32[(($139)>>2)]=15;
 var $142=(($112+12)|0);
 HEAP32[(($138)>>2)]=$142;
 var $143=(($112+8)|0);
 var $144=$143;
 HEAP32[(($144)>>2)]=0;
 assert(16 % 1 === 0);(_memcpy($142, 3632, 16)|0);
 (function() { try { __THREW__ = 0; return ___cxa_throw($109,11736,(236)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { var $72=$80;label=15;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $145=$109;

 ___cxa_free_exception($109);
 var $eh_lpad_body$1=$eh_lpad_body_i$1;var $eh_lpad_body$0=$eh_lpad_body_i$0;var $74=$80;label=16;break;
 case 46: 
 var $147=($80|0)==0;
 if($147){label=48;break;}else{label=47;break;}
 case 47: 
 _free($80);
 label=48;break;
 case 48: 
 var $149=(($__b)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){var $169=1;var $168=0;label=54;break;}else{label=49;break;}
 case 49: 
 var $153=(($150+12)|0);
 var $154=HEAP32[(($153)>>2)];
 var $155=(($150+16)|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($154|0)==($156|0);
 if($157){label=50;break;}else{label=51;break;}
 case 50: 
 var $159=$150;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($160+36)|0);
 var $162=HEAP32[(($161)>>2)];
 var $163=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$162]($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$163;label=52;break; } else { label=14;break; }
 case 51: 
 var $165=HEAP32[(($154)>>2)];
 var $_0_i_i_i_i=$165;label=52;break;
 case 52: 
 var $_0_i_i_i_i;
 var $166=($_0_i_i_i_i|0)==-1;
 if($166){label=53;break;}else{var $169=0;var $168=$150;label=54;break;}
 case 53: 
 HEAP32[(($149)>>2)]=0;
 var $169=1;var $168=0;label=54;break;
 case 54: 
 var $168;
 var $169;
 var $170=HEAP32[(($39)>>2)];
 var $171=($170|0)==0;
 if($171){label=60;break;}else{label=55;break;}
 case 55: 
 var $173=(($170+12)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($170+16)|0);
 var $176=HEAP32[(($175)>>2)];
 var $177=($174|0)==($176|0);
 if($177){label=56;break;}else{label=57;break;}
 case 56: 
 var $179=$170;
 var $180=HEAP32[(($179)>>2)];
 var $181=(($180+36)|0);
 var $182=HEAP32[(($181)>>2)];
 var $183=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$182]($170) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$183;label=58;break; } else { label=14;break; }
 case 57: 
 var $185=HEAP32[(($174)>>2)];
 var $_0_i_i1_i_i=$185;label=58;break;
 case 58: 
 var $_0_i_i1_i_i;
 var $186=($_0_i_i1_i_i|0)==-1;
 if($186){label=59;break;}else{label=61;break;}
 case 59: 
 HEAP32[(($39)>>2)]=0;
 label=60;break;
 case 60: 
 if($169){label=62;break;}else{label=63;break;}
 case 61: 
 if($169){label=63;break;}else{label=62;break;}
 case 62: 
 var $189=HEAP32[(($__err)>>2)];
 var $190=$189|2;
 HEAP32[(($__err)>>2)]=$190;
 label=63;break;
 case 63: 
 var $191=(($agg_result)|0);
 HEAP32[(($191)>>2)]=$168;
 var $192=(($7+4)|0);
 var $193=$192;
 var $194=(tempValue=HEAP32[(($193)>>2)],HEAP32[(($193)>>2)]=tempValue+-1,tempValue);
 var $195=($194|0)==0;
 if($195){label=64;break;}else{label=65;break;}
 case 64: 
 var $197=$7;
 var $198=$7;
 var $199=HEAP32[(($198)>>2)];
 var $200=(($199+8)|0);
 var $201=HEAP32[(($200)>>2)];
 FUNCTION_TABLE[$201]($197);
 label=65;break;
 case 65: 
 var $202=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $203=($202|0)==0;
 if($203){label=68;break;}else{label=66;break;}
 case 66: 
 var $205=HEAP32[(($4)>>2)];
 var $206=$202;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$205]($206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=68;break; } else { label=67;break; }
 case 67: 
 var $208$0 = ___cxa_find_matching_catch(-1, -1,0); var $208$1 = tempRet0;
 var $209=$208$0;
 ___clang_call_terminate($209);
 throw "Reached an unreachable!";
 case 68: 
 var $$etemp$5$0=400;
 var $$etemp$5$1=0;

 STACKTOP=sp;return;
 case 69: 
 var $_01;
 var $_0;
 var $210=(($7+4)|0);
 var $211=$210;
 var $212=(tempValue=HEAP32[(($211)>>2)],HEAP32[(($211)>>2)]=tempValue+-1,tempValue);
 var $213=($212|0)==0;
 if($213){label=70;break;}else{label=71;break;}
 case 70: 
 var $215=$7;
 var $216=$7;
 var $217=HEAP32[(($216)>>2)];
 var $218=(($217+8)|0);
 var $219=HEAP32[(($218)>>2)];
 FUNCTION_TABLE[$219]($215);
 label=71;break;
 case 71: 
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $220=($_pre|0)==0;
 if($220){label=74;break;}else{label=72;break;}
 case 72: 
 var $_pre19=HEAP32[(($4)>>2)];
 var $222=$_pre;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$_pre19]($222) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=74;break; } else { label=73;break; }
 case 73: 
 var $224$0 = ___cxa_find_matching_catch(-1, -1,0); var $224$1 = tempRet0;
 var $225=$224$0;
 ___clang_call_terminate($225);
 throw "Reached an unreachable!";
 case 74: 
 var $226$0=$_0;
 var $226$1=0;
 var $227$0=$226$0;
 var $227$1=$_01;
 ___resumeException($227$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$__e_0,$__intl,$__loc_0_0_val,$__flags,$__err,$__neg,$__ct,$__wb,$__wn,$__we){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+680)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i6_i=sp;
 var $__p_i_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $2=(sp)+(40);
 var $3=(sp)+(56);
 var $4=(sp)+(72);
 var $5=(sp)+(88);
 var $6=(sp)+(104);
 var $7=(sp)+(112);
 var $8=(sp)+(128);
 var $9=(sp)+(144);
 var $10=(sp)+(160);
 var $11=(sp)+(176);
 var $__gbuf=(sp)+(184);
 var $__pat=(sp)+(584);
 var $__grp=(sp)+(592);
 var $__sym=(sp)+(608);
 var $__psn=(sp)+(624);
 var $__nsn=(sp)+(640);
 var $__spaces=(sp)+(656);
 var $__et=(sp)+(672);
 HEAP32[(($11)>>2)]=$__we;
 var $12=$__gbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $13=(($__gbuf)|0);
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i9=$__sym;
 HEAP32[(($this2_i_i_i9)>>2)]=0; HEAP32[((($this2_i_i_i9)+(4))>>2)]=0; HEAP32[((($this2_i_i_i9)+(8))>>2)]=0;
 var $this2_i_i_i10=$__psn;
 HEAP32[(($this2_i_i_i10)>>2)]=0; HEAP32[((($this2_i_i_i10)+(4))>>2)]=0; HEAP32[((($this2_i_i_i10)+(8))>>2)]=0;
 var $this2_i_i_i12=$__nsn;
 HEAP32[(($this2_i_i_i12)>>2)]=0; HEAP32[((($this2_i_i_i12)+(4))>>2)]=0; HEAP32[((($this2_i_i_i12)+(8))>>2)]=0;
 var $this2_i_i_i15=$__spaces;
 HEAP32[(($this2_i_i_i15)>>2)]=0; HEAP32[((($this2_i_i_i15)+(4))>>2)]=0; HEAP32[((($this2_i_i_i15)+(8))>>2)]=0;
 var $14=$1;
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $15=$2;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $16=$3;
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $17=$4;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $18=$5;
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $19=$6;
 var $$etemp$6$0=4;
 var $$etemp$6$1=0;

 var $20=$7;
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $21=$8;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $22=$9;
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $23=$10;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 if($__intl){label=2;break;}else{label=36;break;}
 case 2: 
 var $tmpcast1_i=$1;
 var $25=$__p_i_i_i_i_i;
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $26=HEAP32[((19128)>>2)];
 var $27=($26|0)==-1;
 if($27){label=4;break;}else{label=3;break;}
 case 3: 
 var $29=(($__p_i_i_i_i_i)|0);
 HEAP32[(($29)>>2)]=19128;
 var $30=(($__p_i_i_i_i_i+4)|0);
 HEAP32[(($30)>>2)]=(202);
 var $31=(($__p_i_i_i_i_i+8)|0);
 HEAP32[(($31)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19128,$25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=95;break; }
 case 4: 
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $32=HEAP32[((19132)>>2)];
 var $33=((($32)-(1))|0);
 var $34=(($__loc_0_0_val+12)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=(($__loc_0_0_val+8)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=$35;
 var $39=$37;
 var $40=((($38)-($39))|0);
 var $41=$40>>2;
 var $42=($41>>>0)>($33>>>0);
 if($42){label=5;break;}else{label=6;break;}
 case 5: 
 var $43=(($37+($33<<2))|0);
 var $44=HEAP32[(($43)>>2)];
 var $45=($44|0)==0;
 if($45){label=6;break;}else{label=8;break;}
 case 6: 
 var $46=___cxa_allocate_exception(4);
 var $47=$46;
 HEAP32[(($47)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($46,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=95;break; }
 case 7: 
 throw "Reached an unreachable!";
 case 8: 
 var $48=$44;
 var $49=$44;
 var $50=HEAP32[(($49)>>2)];
 var $51=(($50+44)|0);
 var $52=HEAP32[(($51)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$52]($tmpcast1_i,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=95;break; }
 case 9: 
 var $53=HEAP32[(($1)>>2)];
 HEAP32[(($__pat)>>2)]=$53;
 var $54=$44;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+32)|0);
 var $57=HEAP32[(($56)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($2,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=95;break; }
 case 10: 
 var $58=HEAP8[($this2_i_i_i12)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=12;break;}else{label=11;break;}
 case 11: 
 var $62=(($__nsn+8)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($63)>>2)]=0;
 var $64=(($__nsn+4)|0);
 HEAP32[(($64)>>2)]=0;
 label=13;break;
 case 12: 
 var $66=(($__nsn+4)|0);
 HEAP32[(($66)>>2)]=0;
 HEAP8[($this2_i_i_i12)]=0;
 label=13;break;
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=14;break; }
 case 14: 
 var $68$0 = ___cxa_find_matching_catch(-1, -1,0); var $68$1 = tempRet0;
 var $69=$68$0;
 ___clang_call_terminate($69);
 throw "Reached an unreachable!";
 case 15: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i12)>>2)]=HEAP32[(($15)>>2)];HEAP32[((($this2_i_i_i12)+(4))>>2)]=HEAP32[((($15)+(4))>>2)];HEAP32[((($this2_i_i_i12)+(8))>>2)]=HEAP32[((($15)+(8))>>2)];
 HEAP32[(($15)>>2)]=0; HEAP32[((($15)+(4))>>2)]=0; HEAP32[((($15)+(8))>>2)]=0;
 var $70=HEAP32[(($54)>>2)];
 var $71=(($70+28)|0);
 var $72=HEAP32[(($71)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$72]($3,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=95;break; }
 case 16: 
 var $73=HEAP8[($this2_i_i_i10)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=18;break;}else{label=17;break;}
 case 17: 
 var $77=(($__psn+8)|0);
 var $78=HEAP32[(($77)>>2)];
 HEAP32[(($78)>>2)]=0;
 var $79=(($__psn+4)|0);
 HEAP32[(($79)>>2)]=0;
 label=19;break;
 case 18: 
 var $81=(($__psn+4)|0);
 HEAP32[(($81)>>2)]=0;
 HEAP8[($this2_i_i_i10)]=0;
 label=19;break;
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=20;break; }
 case 20: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 21: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i10)>>2)]=HEAP32[(($16)>>2)];HEAP32[((($this2_i_i_i10)+(4))>>2)]=HEAP32[((($16)+(4))>>2)];HEAP32[((($this2_i_i_i10)+(8))>>2)]=HEAP32[((($16)+(8))>>2)];
 HEAP32[(($16)>>2)]=0; HEAP32[((($16)+(4))>>2)]=0; HEAP32[((($16)+(8))>>2)]=0;
 var $85=$44;
 var $86=HEAP32[(($85)>>2)];
 var $87=(($86+12)|0);
 var $88=HEAP32[(($87)>>2)];
 var $89=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$88]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=95;break; }
 case 22: 
 var $90=HEAP32[(($85)>>2)];
 var $91=(($90+16)|0);
 var $92=HEAP32[(($91)>>2)];
 var $93=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$92]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=95;break; }
 case 23: 
 var $94=$44;
 var $95=HEAP32[(($94)>>2)];
 var $96=(($95+20)|0);
 var $97=HEAP32[(($96)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$97]($4,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=95;break; }
 case 24: 
 var $98=HEAP8[($this2_i_i_i)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=26;break;}else{label=25;break;}
 case 25: 
 var $102=(($__grp+8)|0);
 var $103=HEAP32[(($102)>>2)];
 HEAP8[($103)]=0;
 var $104=(($__grp+4)|0);
 HEAP32[(($104)>>2)]=0;
 label=27;break;
 case 26: 
 var $106=$__grp;
 var $107=(($106+1)|0);
 HEAP8[($107)]=0;
 HEAP8[($this2_i_i_i)]=0;
 label=27;break;
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=28;break; }
 case 28: 
 var $109$0 = ___cxa_find_matching_catch(-1, -1,0); var $109$1 = tempRet0;
 var $110=$109$0;
 ___clang_call_terminate($110);
 throw "Reached an unreachable!";
 case 29: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($17)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($17)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($17)+(8))>>2)];
 HEAP32[(($17)>>2)]=0; HEAP32[((($17)+(4))>>2)]=0; HEAP32[((($17)+(8))>>2)]=0;
 var $111=HEAP32[(($54)>>2)];
 var $112=(($111+24)|0);
 var $113=HEAP32[(($112)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$113]($5,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=95;break; }
 case 30: 
 var $114=HEAP8[($this2_i_i_i9)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=32;break;}else{label=31;break;}
 case 31: 
 var $118=(($__sym+8)|0);
 var $119=HEAP32[(($118)>>2)];
 HEAP32[(($119)>>2)]=0;
 var $120=(($__sym+4)|0);
 HEAP32[(($120)>>2)]=0;
 label=33;break;
 case 32: 
 var $122=(($__sym+4)|0);
 HEAP32[(($122)>>2)]=0;
 HEAP8[($this2_i_i_i9)]=0;
 label=33;break;
 case 33: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=35;break; } else { label=34;break; }
 case 34: 
 var $124$0 = ___cxa_find_matching_catch(-1, -1,0); var $124$1 = tempRet0;
 var $125=$124$0;
 ___clang_call_terminate($125);
 throw "Reached an unreachable!";
 case 35: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i9)>>2)]=HEAP32[(($18)>>2)];HEAP32[((($this2_i_i_i9)+(4))>>2)]=HEAP32[((($18)+(4))>>2)];HEAP32[((($this2_i_i_i9)+(8))>>2)]=HEAP32[((($18)+(8))>>2)];
 HEAP32[(($18)>>2)]=0; HEAP32[((($18)+(4))>>2)]=0; HEAP32[((($18)+(8))>>2)]=0;
 var $126=HEAP32[(($85)>>2)];
 var $127=(($126+36)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$128]($48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$129;var $__ts_0=$93;var $__dp_0=$89;label=70;break; } else { label=95;break; }
 case 36: 
 var $tmpcast_i=$6;
 var $131=$__p_i_i_i_i6_i;
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $132=HEAP32[((19136)>>2)];
 var $133=($132|0)==-1;
 if($133){label=38;break;}else{label=37;break;}
 case 37: 
 var $135=(($__p_i_i_i_i6_i)|0);
 HEAP32[(($135)>>2)]=19136;
 var $136=(($__p_i_i_i_i6_i+4)|0);
 HEAP32[(($136)>>2)]=(202);
 var $137=(($__p_i_i_i_i6_i+8)|0);
 HEAP32[(($137)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19136,$131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=38;break; } else { label=95;break; }
 case 38: 
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $138=HEAP32[((19140)>>2)];
 var $139=((($138)-(1))|0);
 var $140=(($__loc_0_0_val+12)|0);
 var $141=HEAP32[(($140)>>2)];
 var $142=(($__loc_0_0_val+8)|0);
 var $143=HEAP32[(($142)>>2)];
 var $144=$141;
 var $145=$143;
 var $146=((($144)-($145))|0);
 var $147=$146>>2;
 var $148=($147>>>0)>($139>>>0);
 if($148){label=39;break;}else{label=40;break;}
 case 39: 
 var $149=(($143+($139<<2))|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=40;break;}else{label=42;break;}
 case 40: 
 var $152=___cxa_allocate_exception(4);
 var $153=$152;
 HEAP32[(($153)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($152,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=95;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $154=$150;
 var $155=$150;
 var $156=HEAP32[(($155)>>2)];
 var $157=(($156+44)|0);
 var $158=HEAP32[(($157)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$158]($tmpcast_i,$154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=95;break; }
 case 43: 
 var $159=HEAP32[(($6)>>2)];
 HEAP32[(($__pat)>>2)]=$159;
 var $160=$150;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+32)|0);
 var $163=HEAP32[(($162)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$163]($7,$154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=95;break; }
 case 44: 
 var $164=HEAP8[($this2_i_i_i12)];
 var $165=$164&1;
 var $166=(($165<<24)>>24)==0;
 if($166){label=46;break;}else{label=45;break;}
 case 45: 
 var $168=(($__nsn+8)|0);
 var $169=HEAP32[(($168)>>2)];
 HEAP32[(($169)>>2)]=0;
 var $170=(($__nsn+4)|0);
 HEAP32[(($170)>>2)]=0;
 label=47;break;
 case 46: 
 var $172=(($__nsn+4)|0);
 HEAP32[(($172)>>2)]=0;
 HEAP8[($this2_i_i_i12)]=0;
 label=47;break;
 case 47: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__nsn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=48;break; }
 case 48: 
 var $174$0 = ___cxa_find_matching_catch(-1, -1,0); var $174$1 = tempRet0;
 var $175=$174$0;
 ___clang_call_terminate($175);
 throw "Reached an unreachable!";
 case 49: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i12)>>2)]=HEAP32[(($20)>>2)];HEAP32[((($this2_i_i_i12)+(4))>>2)]=HEAP32[((($20)+(4))>>2)];HEAP32[((($this2_i_i_i12)+(8))>>2)]=HEAP32[((($20)+(8))>>2)];
 HEAP32[(($20)>>2)]=0; HEAP32[((($20)+(4))>>2)]=0; HEAP32[((($20)+(8))>>2)]=0;
 var $176=HEAP32[(($160)>>2)];
 var $177=(($176+28)|0);
 var $178=HEAP32[(($177)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$178]($8,$154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=50;break; } else { label=95;break; }
 case 50: 
 var $179=HEAP8[($this2_i_i_i10)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=52;break;}else{label=51;break;}
 case 51: 
 var $183=(($__psn+8)|0);
 var $184=HEAP32[(($183)>>2)];
 HEAP32[(($184)>>2)]=0;
 var $185=(($__psn+4)|0);
 HEAP32[(($185)>>2)]=0;
 label=53;break;
 case 52: 
 var $187=(($__psn+4)|0);
 HEAP32[(($187)>>2)]=0;
 HEAP8[($this2_i_i_i10)]=0;
 label=53;break;
 case 53: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__psn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=54;break; }
 case 54: 
 var $189$0 = ___cxa_find_matching_catch(-1, -1,0); var $189$1 = tempRet0;
 var $190=$189$0;
 ___clang_call_terminate($190);
 throw "Reached an unreachable!";
 case 55: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i10)>>2)]=HEAP32[(($21)>>2)];HEAP32[((($this2_i_i_i10)+(4))>>2)]=HEAP32[((($21)+(4))>>2)];HEAP32[((($this2_i_i_i10)+(8))>>2)]=HEAP32[((($21)+(8))>>2)];
 HEAP32[(($21)>>2)]=0; HEAP32[((($21)+(4))>>2)]=0; HEAP32[((($21)+(8))>>2)]=0;
 var $191=$150;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+12)|0);
 var $194=HEAP32[(($193)>>2)];
 var $195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$194]($154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=56;break; } else { label=95;break; }
 case 56: 
 var $196=HEAP32[(($191)>>2)];
 var $197=(($196+16)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$198]($154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=95;break; }
 case 57: 
 var $200=$150;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+20)|0);
 var $203=HEAP32[(($202)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$203]($9,$154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=95;break; }
 case 58: 
 var $204=HEAP8[($this2_i_i_i)];
 var $205=$204&1;
 var $206=(($205<<24)>>24)==0;
 if($206){label=60;break;}else{label=59;break;}
 case 59: 
 var $208=(($__grp+8)|0);
 var $209=HEAP32[(($208)>>2)];
 HEAP8[($209)]=0;
 var $210=(($__grp+4)|0);
 HEAP32[(($210)>>2)]=0;
 label=61;break;
 case 60: 
 var $212=$__grp;
 var $213=(($212+1)|0);
 HEAP8[($213)]=0;
 HEAP8[($this2_i_i_i)]=0;
 label=61;break;
 case 61: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=62;break; }
 case 62: 
 var $215$0 = ___cxa_find_matching_catch(-1, -1,0); var $215$1 = tempRet0;
 var $216=$215$0;
 ___clang_call_terminate($216);
 throw "Reached an unreachable!";
 case 63: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i)>>2)]=HEAP32[(($22)>>2)];HEAP32[((($this2_i_i_i)+(4))>>2)]=HEAP32[((($22)+(4))>>2)];HEAP32[((($this2_i_i_i)+(8))>>2)]=HEAP32[((($22)+(8))>>2)];
 HEAP32[(($22)>>2)]=0; HEAP32[((($22)+(4))>>2)]=0; HEAP32[((($22)+(8))>>2)]=0;
 var $217=HEAP32[(($160)>>2)];
 var $218=(($217+24)|0);
 var $219=HEAP32[(($218)>>2)];
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$219]($10,$154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=95;break; }
 case 64: 
 var $220=HEAP8[($this2_i_i_i9)];
 var $221=$220&1;
 var $222=(($221<<24)>>24)==0;
 if($222){label=66;break;}else{label=65;break;}
 case 65: 
 var $224=(($__sym+8)|0);
 var $225=HEAP32[(($224)>>2)];
 HEAP32[(($225)>>2)]=0;
 var $226=(($__sym+4)|0);
 HEAP32[(($226)>>2)]=0;
 label=67;break;
 case 66: 
 var $228=(($__sym+4)|0);
 HEAP32[(($228)>>2)]=0;
 HEAP8[($this2_i_i_i9)]=0;
 label=67;break;
 case 67: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=68;break; }
 case 68: 
 var $230$0 = ___cxa_find_matching_catch(-1, -1,0); var $230$1 = tempRet0;
 var $231=$230$0;
 ___clang_call_terminate($231);
 throw "Reached an unreachable!";
 case 69: 
 assert(12 % 1 === 0);HEAP32[(($this2_i_i_i9)>>2)]=HEAP32[(($23)>>2)];HEAP32[((($this2_i_i_i9)+(4))>>2)]=HEAP32[((($23)+(4))>>2)];HEAP32[((($this2_i_i_i9)+(8))>>2)]=HEAP32[((($23)+(8))>>2)];
 HEAP32[(($23)>>2)]=0; HEAP32[((($23)+(4))>>2)]=0; HEAP32[((($23)+(8))>>2)]=0;
 var $232=HEAP32[(($191)>>2)];
 var $233=(($232+36)|0);
 var $234=HEAP32[(($233)>>2)];
 var $235=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$234]($154) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $storemerge_i=$235;var $__ts_0=$199;var $__dp_0=$195;label=70;break; } else { label=95;break; }
 case 70: 
 var $__dp_0;
 var $__ts_0;
 var $storemerge_i;
 var $$etemp$15$0=4;
 var $$etemp$15$1=0;

 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $237=(($__gbuf+400)|0);
 var $238=(($__wb)|0);
 var $239=HEAP32[(($238)>>2)];
 HEAP32[(($__wn)>>2)]=$239;
 var $240=(($__b)|0);
 var $241=$__pat;
 var $242=$__ct;
 var $243=(($__nsn+4)|0);
 var $244=(($__nsn+8)|0);
 var $245=(($__psn+4)|0);
 var $246=(($__psn+8)|0);
 var $247=$__flags&512;
 var $248=($247|0)!=0;
 var $249=(($__sym+4)|0);
 var $250=(($__sym+8)|0);
 var $251=(($__spaces+4)|0);
 var $252=(($__spaces+8)|0);
 var $253=(($241+3)|0);
 var $254=(($__grp+4)|0);
 var $255=(($__spaces)|0);
 var $free214336=538;var $258=$13;var $257=$13;var $256=$237;var $__p_0341=0;var $__trailing_sign_0343=0;var $__fd_0=$storemerge_i;var $__e_sroa_0_0=$__e_0;label=71;break;
 case 71: 
 var $__e_sroa_0_0;
 var $__fd_0;
 var $__trailing_sign_0343;
 var $__p_0341;
 var $256;
 var $257;
 var $258;
 var $free214336;
 var $259=HEAP32[(($240)>>2)];
 var $260=($259|0)==0;
 if($260){var $277=1;label=78;break;}else{label=72;break;}
 case 72: 
 var $262=(($259+12)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=(($259+16)|0);
 var $265=HEAP32[(($264)>>2)];
 var $266=($263|0)==($265|0);
 if($266){label=73;break;}else{label=74;break;}
 case 73: 
 var $268=$259;
 var $269=HEAP32[(($268)>>2)];
 var $270=(($269+36)|0);
 var $271=HEAP32[(($270)>>2)];
 var $272=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$271]($259) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i18=$272;label=75;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 74: 
 var $274=HEAP32[(($263)>>2)];
 var $_0_i_i_i_i18=$274;label=75;break;
 case 75: 
 var $_0_i_i_i_i18;
 var $275=($_0_i_i_i_i18|0)==-1;
 if($275){label=77;break;}else{label=76;break;}
 case 76: 
 var $_pre_i_i_i20=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i21=($_pre_i_i_i20|0)==0;
 var $277=$phitmp_i_i_i21;label=78;break;
 case 77: 
 HEAP32[(($240)>>2)]=0;
 var $277=1;label=78;break;
 case 78: 
 var $277;
 var $278=($__e_sroa_0_0|0)==0;
 if($278){label=83;break;}else{label=79;break;}
 case 79: 
 var $280=(($__e_sroa_0_0+12)|0);
 var $281=HEAP32[(($280)>>2)];
 var $282=(($__e_sroa_0_0+16)|0);
 var $283=HEAP32[(($282)>>2)];
 var $284=($281|0)==($283|0);
 if($284){label=80;break;}else{label=81;break;}
 case 80: 
 var $286=$__e_sroa_0_0;
 var $287=HEAP32[(($286)>>2)];
 var $288=(($287+36)|0);
 var $289=HEAP32[(($288)>>2)];
 var $290=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$289]($__e_sroa_0_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i24=$290;label=82;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 81: 
 var $292=HEAP32[(($281)>>2)];
 var $_0_i_i1_i_i24=$292;label=82;break;
 case 82: 
 var $_0_i_i1_i_i24;
 var $293=($_0_i_i1_i_i24|0)==-1;
 if($293){label=83;break;}else{label=84;break;}
 case 83: 
 if($277){var $free214_lcssa=$free214336;var $_lcssa285=$258;var $_lcssa300=$257;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;var $__e_sroa_0_21=0;label=395;break;}else{var $__e_sroa_0_2=0;label=85;break;}
 case 84: 
 if($277){var $__e_sroa_0_2=$__e_sroa_0_0;label=85;break;}else{var $free214_lcssa=$free214336;var $_lcssa285=$258;var $_lcssa300=$257;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;var $__e_sroa_0_21=$__e_sroa_0_0;label=395;break;}
 case 85: 
 var $__e_sroa_0_2;
 var $296=(($241+$__p_0341)|0);
 var $297=HEAP8[($296)];
 var $298=(($297<<24)>>24);
 switch(($298|0)){case 1:{ label=115;break;}case 0:{ label=135;break;}case 3:{ label=168;break;}case 2:{ label=236;break;}case 4:{ var $__ng_0=0;var $920=$256;var $919=$257;var $918=$258;var $free213=$free214336;var $__e_sroa_0_10=$__e_sroa_0_2;label=293;break;}default:{var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;}}break;
 case 86: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;var $299=$_lcssa285;var $free218=$free214_lcssa;label=96;break;
 case 87: 
 var $free218_ph_ph_ph;
 var $_ph_ph_ph;
 var $lpad_loopexit2$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit2$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit2$1;var $lpad_phi$0=$lpad_loopexit2$0;var $299=$_ph_ph_ph;var $free218=$free218_ph_ph_ph;label=96;break;
 case 88: 
 var $lpad_nonloopexit3$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit3$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit3$1;var $lpad_phi$0=$lpad_nonloopexit3$0;var $299=$918;var $free218=$free213;label=96;break;
 case 89: 
 var $lpad_loopexit252$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit252$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit252$1;var $lpad_phi$0=$lpad_loopexit252$0;var $299=$1072;var $free218=$free216;label=96;break;
 case 90: 
 var $lpad_loopexit254$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit254$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit254$1;var $lpad_phi$0=$lpad_loopexit254$0;var $299=$258;var $free218=$free214336;label=96;break;
 case 91: 
 var $lpad_loopexit259$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit259$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit259$1;var $lpad_phi$0=$lpad_loopexit259$0;var $299=$258;var $free218=$free214336;label=96;break;
 case 92: 
 var $lpad_loopexit264$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit264$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit264$1;var $lpad_phi$0=$lpad_loopexit264$0;var $299=$258;var $free218=$free214336;label=96;break;
 case 93: 
 var $free218_ph_ph236_ph_ph_ph_ph_ph_ph;
 var $_ph_ph237_ph_ph_ph_ph_ph_ph;
 var $lpad_loopexit6$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit6$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit6$1;var $lpad_phi$0=$lpad_loopexit6$0;var $299=$_ph_ph237_ph_ph_ph_ph_ph_ph;var $free218=$free218_ph_ph236_ph_ph_ph_ph_ph_ph;label=96;break;
 case 94: 
 var $lpad_nonloopexit7$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit7$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit7$1;var $lpad_phi$0=$lpad_nonloopexit7$0;var $299=$918;var $free218=$free213;label=96;break;
 case 95: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;var $299=$13;var $free218=538;label=96;break;
 case 96: 
 var $free218;
 var $299;
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $300=HEAP8[($this2_i_i_i15)];
 var $301=$300&1;
 var $302=(($301<<24)>>24)==0;
 if($302){label=99;break;}else{label=97;break;}
 case 97: 
 var $304=(($__spaces+8)|0);
 var $305=HEAP32[(($304)>>2)];
 var $306=($305|0)==0;
 if($306){label=99;break;}else{label=98;break;}
 case 98: 
 var $308=$305;
 _free($308);
 label=99;break;
 case 99: 
 var $309=HEAP8[($this2_i_i_i12)];
 var $310=$309&1;
 var $311=(($310<<24)>>24)==0;
 if($311){label=102;break;}else{label=100;break;}
 case 100: 
 var $313=(($__nsn+8)|0);
 var $314=HEAP32[(($313)>>2)];
 var $315=($314|0)==0;
 if($315){label=102;break;}else{label=101;break;}
 case 101: 
 var $317=$314;
 _free($317);
 label=102;break;
 case 102: 
 var $318=HEAP8[($this2_i_i_i10)];
 var $319=$318&1;
 var $320=(($319<<24)>>24)==0;
 if($320){label=105;break;}else{label=103;break;}
 case 103: 
 var $322=(($__psn+8)|0);
 var $323=HEAP32[(($322)>>2)];
 var $324=($323|0)==0;
 if($324){label=105;break;}else{label=104;break;}
 case 104: 
 var $326=$323;
 _free($326);
 label=105;break;
 case 105: 
 var $327=HEAP8[($this2_i_i_i9)];
 var $328=$327&1;
 var $329=(($328<<24)>>24)==0;
 if($329){label=108;break;}else{label=106;break;}
 case 106: 
 var $331=(($__sym+8)|0);
 var $332=HEAP32[(($331)>>2)];
 var $333=($332|0)==0;
 if($333){label=108;break;}else{label=107;break;}
 case 107: 
 var $335=$332;
 _free($335);
 label=108;break;
 case 108: 
 var $336=HEAP8[($this2_i_i_i)];
 var $337=$336&1;
 var $338=(($337<<24)>>24)==0;
 if($338){label=111;break;}else{label=109;break;}
 case 109: 
 var $340=(($__grp+8)|0);
 var $341=HEAP32[(($340)>>2)];
 var $342=($341|0)==0;
 if($342){label=111;break;}else{label=110;break;}
 case 110: 
 _free($341);
 label=111;break;
 case 111: 
 var $344=($299|0)==0;
 if($344){label=114;break;}else{label=112;break;}
 case 112: 
 var $346=$299;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free218]($346) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=114;break; } else { label=113;break; }
 case 113: 
 var $348$0 = ___cxa_find_matching_catch(-1, -1,0); var $348$1 = tempRet0;
 var $349=$348$0;
 ___clang_call_terminate($349);
 throw "Reached an unreachable!";
 case 114: 
 ___resumeException($lpad_phi$0)
 case 115: 
 var $cond=($__p_0341|0)==3;
 if($cond){var $free214_lcssa=$free214336;var $_lcssa285=$258;var $_lcssa300=$257;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;var $__e_sroa_0_21=$__e_sroa_0_2;label=395;break;}else{label=116;break;}
 case 116: 
 var $352=HEAP32[(($240)>>2)];
 var $353=(($352+12)|0);
 var $354=HEAP32[(($353)>>2)];
 var $355=(($352+16)|0);
 var $356=HEAP32[(($355)>>2)];
 var $357=($354|0)==($356|0);
 if($357){label=117;break;}else{label=118;break;}
 case 117: 
 var $359=$352;
 var $360=HEAP32[(($359)>>2)];
 var $361=(($360+36)|0);
 var $362=HEAP32[(($361)>>2)];
 var $363=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$362]($352) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i33=$363;label=119;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 118: 
 var $365=HEAP32[(($354)>>2)];
 var $_0_i_i33=$365;label=119;break;
 case 119: 
 var $_0_i_i33;
 var $366=HEAP32[(($242)>>2)];
 var $367=(($366+12)|0);
 var $368=HEAP32[(($367)>>2)];
 var $369=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$368]($__ct,8192,$_0_i_i33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 120: 
 if($369){label=121;break;}else{label=134;break;}
 case 121: 
 var $371=HEAP32[(($240)>>2)];
 var $372=(($371+12)|0);
 var $373=HEAP32[(($372)>>2)];
 var $374=(($371+16)|0);
 var $375=HEAP32[(($374)>>2)];
 var $376=($373|0)==($375|0);
 if($376){label=122;break;}else{label=123;break;}
 case 122: 
 var $378=$371;
 var $379=HEAP32[(($378)>>2)];
 var $380=(($379+40)|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$381]($371) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i37=$382;label=124;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 123: 
 var $384=(($373+4)|0);
 HEAP32[(($372)>>2)]=$384;
 var $385=HEAP32[(($373)>>2)];
 var $_0_i_i37=$385;label=124;break;
 case 124: 
 var $_0_i_i37;
 var $386=HEAP8[($this2_i_i_i15)];
 var $387=$386&1;
 var $388=(($387<<24)>>24)!=0;
 if($388){label=126;break;}else{label=125;break;}
 case 125: 
 var $390=($386&255);
 var $391=$390>>>1;
 var $__sz_0_i=$391;var $__cap_0_i=1;label=127;break;
 case 126: 
 var $393=HEAP32[(($255)>>2)];
 var $394=$393&-2;
 var $395=((($394)-(1))|0);
 var $396=HEAP32[(($251)>>2)];
 var $__sz_0_i=$396;var $__cap_0_i=$395;label=127;break;
 case 127: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $398=($__sz_0_i|0)==($__cap_0_i|0);
 if($398){label=128;break;}else{label=130;break;}
 case 128: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=129;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 129: 
 var $400=HEAP8[($this2_i_i_i15)];
 var $401=$400&1;
 var $402=(($401<<24)>>24)==0;
 if($402){label=131;break;}else{label=132;break;}
 case 130: 
 if($388){label=132;break;}else{label=131;break;}
 case 131: 
 var $405=$__sz_0_i<<1;
 var $406=((($405)+(2))|0);
 var $407=(($406)&255);
 HEAP8[($this2_i_i_i15)]=$407;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$251;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=133;break;
 case 132: 
 var $409=HEAP32[(($252)>>2)];
 var $410=((($__sz_0_i)+(1))|0);
 HEAP32[(($251)>>2)]=$410;
 var $_pn_i=$409;var $__p_0_sum_pre_phi_i=$410;label=133;break;
 case 133: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+($__sz_0_i<<2))|0);
 HEAP32[(($__p_0_i)>>2)]=$_0_i_i37;
 var $411=(($_pn_i+($__p_0_sum_pre_phi_i<<2))|0);
 HEAP32[(($411)>>2)]=0;
 label=135;break;
 case 134: 
 var $413=HEAP32[(($__err)>>2)];
 var $414=$413|4;
 HEAP32[(($__err)>>2)]=$414;
 var $_0=0;var $1353=$258;var $free220=$free214336;label=428;break;
 case 135: 
 var $416=($__p_0341|0)==3;
 if($416){var $free214_lcssa=$free214336;var $_lcssa285=$258;var $_lcssa300=$257;var $__trailing_sign_0_lcssa=$__trailing_sign_0343;var $__e_sroa_0_21=$__e_sroa_0_2;label=395;break;}else{var $417=$__e_sroa_0_2;var $_pre_i3_i_i47=$__e_sroa_0_2;var $__e_sroa_0_3=$__e_sroa_0_2;label=136;break;}
 case 136: 
 var $__e_sroa_0_3;
 var $_pre_i3_i_i47;
 var $417;
 var $418=HEAP32[(($240)>>2)];
 var $419=($418|0)==0;
 if($419){var $436=1;label=143;break;}else{label=137;break;}
 case 137: 
 var $421=(($418+12)|0);
 var $422=HEAP32[(($421)>>2)];
 var $423=(($418+16)|0);
 var $424=HEAP32[(($423)>>2)];
 var $425=($422|0)==($424|0);
 if($425){label=138;break;}else{label=139;break;}
 case 138: 
 var $427=$418;
 var $428=HEAP32[(($427)>>2)];
 var $429=(($428+36)|0);
 var $430=HEAP32[(($429)>>2)];
 var $431=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$430]($418) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i39=$431;label=140;break; } else { label=92;break; }
 case 139: 
 var $433=HEAP32[(($422)>>2)];
 var $_0_i_i_i_i39=$433;label=140;break;
 case 140: 
 var $_0_i_i_i_i39;
 var $434=($_0_i_i_i_i39|0)==-1;
 if($434){label=142;break;}else{label=141;break;}
 case 141: 
 var $_pre_i_i_i41=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i42=($_pre_i_i_i41|0)==0;
 var $436=$phitmp_i_i_i42;label=143;break;
 case 142: 
 HEAP32[(($240)>>2)]=0;
 var $436=1;label=143;break;
 case 143: 
 var $436;
 var $437=($417|0)==0;
 if($437){var $_pre_i3_i_i47396=$_pre_i3_i_i47;var $__e_sroa_0_4=$__e_sroa_0_3;label=148;break;}else{label=144;break;}
 case 144: 
 var $439=(($417+12)|0);
 var $440=HEAP32[(($439)>>2)];
 var $441=(($417+16)|0);
 var $442=HEAP32[(($441)>>2)];
 var $443=($440|0)==($442|0);
 if($443){label=145;break;}else{label=146;break;}
 case 145: 
 var $445=$417;
 var $446=HEAP32[(($445)>>2)];
 var $447=(($446+36)|0);
 var $448=HEAP32[(($447)>>2)];
 var $449=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$448]($417) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i45=$449;label=147;break; } else { label=92;break; }
 case 146: 
 var $451=HEAP32[(($440)>>2)];
 var $_0_i_i1_i_i45=$451;label=147;break;
 case 147: 
 var $_0_i_i1_i_i45;
 var $452=($_0_i_i1_i_i45|0)==-1;
 if($452){var $_pre_i3_i_i47396=0;var $__e_sroa_0_4=0;label=148;break;}else{label=149;break;}
 case 148: 
 var $__e_sroa_0_4;
 var $_pre_i3_i_i47396;
 if($436){var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_4;label=394;break;}else{var $454=0;var $_pre_i3_i_i47398=$_pre_i3_i_i47396;var $__e_sroa_0_5=$__e_sroa_0_4;label=150;break;}
 case 149: 
 var $phitmp_i4_i_i48=($_pre_i3_i_i47|0)==0;
 var $tmp_i_i50=$436^$phitmp_i4_i_i48;
 if($tmp_i_i50){var $454=$_pre_i3_i_i47;var $_pre_i3_i_i47398=$_pre_i3_i_i47;var $__e_sroa_0_5=$__e_sroa_0_3;label=150;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_3;label=394;break;}
 case 150: 
 var $__e_sroa_0_5;
 var $_pre_i3_i_i47398;
 var $454;
 var $455=HEAP32[(($240)>>2)];
 var $456=(($455+12)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=(($455+16)|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=($457|0)==($459|0);
 if($460){label=151;break;}else{label=152;break;}
 case 151: 
 var $462=$455;
 var $463=HEAP32[(($462)>>2)];
 var $464=(($463+36)|0);
 var $465=HEAP32[(($464)>>2)];
 var $466=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$465]($455) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i54=$466;label=153;break; } else { label=92;break; }
 case 152: 
 var $468=HEAP32[(($457)>>2)];
 var $_0_i_i54=$468;label=153;break;
 case 153: 
 var $_0_i_i54;
 var $469=HEAP32[(($242)>>2)];
 var $470=(($469+12)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$471]($__ct,8192,$_0_i_i54) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=154;break; } else { label=92;break; }
 case 154: 
 if($472){label=155;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_5;label=394;break;}
 case 155: 
 var $474=HEAP32[(($240)>>2)];
 var $475=(($474+12)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=(($474+16)|0);
 var $478=HEAP32[(($477)>>2)];
 var $479=($476|0)==($478|0);
 if($479){label=156;break;}else{label=157;break;}
 case 156: 
 var $481=$474;
 var $482=HEAP32[(($481)>>2)];
 var $483=(($482+40)|0);
 var $484=HEAP32[(($483)>>2)];
 var $485=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$484]($474) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i59=$485;label=158;break; } else { label=92;break; }
 case 157: 
 var $487=(($476+4)|0);
 HEAP32[(($475)>>2)]=$487;
 var $488=HEAP32[(($476)>>2)];
 var $_0_i_i59=$488;label=158;break;
 case 158: 
 var $_0_i_i59;
 var $489=HEAP8[($this2_i_i_i15)];
 var $490=$489&1;
 var $491=(($490<<24)>>24)!=0;
 if($491){label=160;break;}else{label=159;break;}
 case 159: 
 var $493=($489&255);
 var $494=$493>>>1;
 var $__sz_0_i29=$494;var $__cap_0_i28=1;label=161;break;
 case 160: 
 var $496=HEAP32[(($255)>>2)];
 var $497=$496&-2;
 var $498=((($497)-(1))|0);
 var $499=HEAP32[(($251)>>2)];
 var $__sz_0_i29=$499;var $__cap_0_i28=$498;label=161;break;
 case 161: 
 var $__cap_0_i28;
 var $__sz_0_i29;
 var $501=($__sz_0_i29|0)==($__cap_0_i28|0);
 if($501){label=162;break;}else{label=164;break;}
 case 162: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__spaces,$__cap_0_i28,1,$__cap_0_i28,$__cap_0_i28,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=163;break; } else { label=92;break; }
 case 163: 
 var $503=HEAP8[($this2_i_i_i15)];
 var $504=$503&1;
 var $505=(($504<<24)>>24)==0;
 if($505){label=165;break;}else{label=166;break;}
 case 164: 
 if($491){label=166;break;}else{label=165;break;}
 case 165: 
 var $508=$__sz_0_i29<<1;
 var $509=((($508)+(2))|0);
 var $510=(($509)&255);
 HEAP8[($this2_i_i_i15)]=$510;
 var $__p_0_sum_pre_i30=((($__sz_0_i29)+(1))|0);
 var $_pn_i32=$251;var $__p_0_sum_pre_phi_i31=$__p_0_sum_pre_i30;label=167;break;
 case 166: 
 var $512=HEAP32[(($252)>>2)];
 var $513=((($__sz_0_i29)+(1))|0);
 HEAP32[(($251)>>2)]=$513;
 var $_pn_i32=$512;var $__p_0_sum_pre_phi_i31=$513;label=167;break;
 case 167: 
 var $__p_0_sum_pre_phi_i31;
 var $_pn_i32;
 var $__p_0_i33=(($_pn_i32+($__sz_0_i29<<2))|0);
 HEAP32[(($__p_0_i33)>>2)]=$_0_i_i59;
 var $514=(($_pn_i32+($__p_0_sum_pre_phi_i31<<2))|0);
 HEAP32[(($514)>>2)]=0;
 var $417=$454;var $_pre_i3_i_i47=$_pre_i3_i_i47398;var $__e_sroa_0_3=$__e_sroa_0_5;label=136;break;
 case 168: 
 var $516=HEAP8[($this2_i_i_i10)];
 var $517=$516&1;
 var $518=(($517<<24)>>24)==0;
 if($518){label=170;break;}else{label=169;break;}
 case 169: 
 var $520=HEAP32[(($245)>>2)];
 var $524=$520;label=171;break;
 case 170: 
 var $522=($516&255);
 var $523=$522>>>1;
 var $524=$523;label=171;break;
 case 171: 
 var $524;
 var $525=HEAP8[($this2_i_i_i12)];
 var $526=$525&1;
 var $527=(($526<<24)>>24)==0;
 if($527){label=173;break;}else{label=172;break;}
 case 172: 
 var $529=HEAP32[(($243)>>2)];
 var $533=$529;label=174;break;
 case 173: 
 var $531=($525&255);
 var $532=$531>>>1;
 var $533=$532;label=174;break;
 case 174: 
 var $533;
 var $534=(((-$533))|0);
 var $535=($524|0)==($534|0);
 if($535){var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;}else{label=175;break;}
 case 175: 
 if($518){label=177;break;}else{label=176;break;}
 case 176: 
 var $538=HEAP32[(($245)>>2)];
 var $542=$538;label=178;break;
 case 177: 
 var $540=($516&255);
 var $541=$540>>>1;
 var $542=$541;label=178;break;
 case 178: 
 var $542;
 var $543=($542|0)==0;
 if($543){label=183;break;}else{label=179;break;}
 case 179: 
 if($527){label=181;break;}else{label=180;break;}
 case 180: 
 var $546=HEAP32[(($243)>>2)];
 var $550=$546;label=182;break;
 case 181: 
 var $548=($525&255);
 var $549=$548>>>1;
 var $550=$549;label=182;break;
 case 182: 
 var $550;
 var $551=($550|0)==0;
 if($551){label=183;break;}else{label=212;break;}
 case 183: 
 if($518){label=185;break;}else{label=184;break;}
 case 184: 
 var $554=HEAP32[(($245)>>2)];
 var $558=$554;label=186;break;
 case 185: 
 var $556=($516&255);
 var $557=$556>>>1;
 var $558=$557;label=186;break;
 case 186: 
 var $558;
 var $559=($558|0)==0;
 var $560=HEAP32[(($240)>>2)];
 var $561=(($560+12)|0);
 var $562=HEAP32[(($561)>>2)];
 var $563=(($560+16)|0);
 var $564=HEAP32[(($563)>>2)];
 var $565=($562|0)==($564|0);
 if($559){label=200;break;}else{label=187;break;}
 case 187: 
 if($565){label=188;break;}else{label=190;break;}
 case 188: 
 var $568=$560;
 var $569=HEAP32[(($568)>>2)];
 var $570=(($569+36)|0);
 var $571=HEAP32[(($570)>>2)];
 var $572=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$571]($560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=189;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 189: 
 var $_pre411=HEAP8[($this2_i_i_i10)];
 var $_0_i_i75=$572;var $575=$_pre411;label=191;break;
 case 190: 
 var $574=HEAP32[(($562)>>2)];
 var $_0_i_i75=$574;var $575=$516;label=191;break;
 case 191: 
 var $575;
 var $_0_i_i75;
 var $576=$575&1;
 var $577=(($576<<24)>>24)==0;
 var $578=HEAP32[(($246)>>2)];
 var $_=($577?$245:$578);
 var $579=HEAP32[(($_)>>2)];
 var $580=($_0_i_i75|0)==($579|0);
 if($580){label=192;break;}else{label=199;break;}
 case 192: 
 var $582=HEAP32[(($240)>>2)];
 var $583=(($582+12)|0);
 var $584=HEAP32[(($583)>>2)];
 var $585=(($582+16)|0);
 var $586=HEAP32[(($585)>>2)];
 var $587=($584|0)==($586|0);
 if($587){label=193;break;}else{label=194;break;}
 case 193: 
 var $589=$582;
 var $590=HEAP32[(($589)>>2)];
 var $591=(($590+40)|0);
 var $592=HEAP32[(($591)>>2)];
 var $593=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$592]($582) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=195;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 194: 
 var $595=(($584+4)|0);
 HEAP32[(($583)>>2)]=$595;
 label=195;break;
 case 195: 
 var $596=HEAP8[($this2_i_i_i10)];
 var $597=$596&1;
 var $598=(($597<<24)>>24)==0;
 if($598){label=197;break;}else{label=196;break;}
 case 196: 
 var $600=HEAP32[(($245)>>2)];
 var $604=$600;label=198;break;
 case 197: 
 var $602=($596&255);
 var $603=$602>>>1;
 var $604=$603;label=198;break;
 case 198: 
 var $604;
 var $605=($604>>>0)>1;
 var $__psn___trailing_sign_0=($605?$__psn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__psn___trailing_sign_0;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;
 case 199: 
 HEAP8[($__neg)]=1;
 var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;
 case 200: 
 if($565){label=201;break;}else{label=203;break;}
 case 201: 
 var $609=$560;
 var $610=HEAP32[(($609)>>2)];
 var $611=(($610+36)|0);
 var $612=HEAP32[(($611)>>2)];
 var $613=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$612]($560) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=202;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 202: 
 var $_pre410=HEAP8[($this2_i_i_i12)];
 var $_0_i_i96=$613;var $616=$_pre410;label=204;break;
 case 203: 
 var $615=HEAP32[(($562)>>2)];
 var $_0_i_i96=$615;var $616=$525;label=204;break;
 case 204: 
 var $616;
 var $_0_i_i96;
 var $617=$616&1;
 var $618=(($617<<24)>>24)==0;
 var $619=HEAP32[(($244)>>2)];
 var $_422=($618?$243:$619);
 var $620=HEAP32[(($_422)>>2)];
 var $621=($_0_i_i96|0)==($620|0);
 if($621){label=205;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;}
 case 205: 
 var $623=HEAP32[(($240)>>2)];
 var $624=(($623+12)|0);
 var $625=HEAP32[(($624)>>2)];
 var $626=(($623+16)|0);
 var $627=HEAP32[(($626)>>2)];
 var $628=($625|0)==($627|0);
 if($628){label=206;break;}else{label=207;break;}
 case 206: 
 var $630=$623;
 var $631=HEAP32[(($630)>>2)];
 var $632=(($631+40)|0);
 var $633=HEAP32[(($632)>>2)];
 var $634=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$633]($623) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=208;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 207: 
 var $636=(($625+4)|0);
 HEAP32[(($624)>>2)]=$636;
 label=208;break;
 case 208: 
 HEAP8[($__neg)]=1;
 var $637=HEAP8[($this2_i_i_i12)];
 var $638=$637&1;
 var $639=(($638<<24)>>24)==0;
 if($639){label=210;break;}else{label=209;break;}
 case 209: 
 var $641=HEAP32[(($243)>>2)];
 var $645=$641;label=211;break;
 case 210: 
 var $643=($637&255);
 var $644=$643>>>1;
 var $645=$644;label=211;break;
 case 211: 
 var $645;
 var $646=($645>>>0)>1;
 var $__nsn___trailing_sign_0=($646?$__nsn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__nsn___trailing_sign_0;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;
 case 212: 
 var $648=HEAP32[(($240)>>2)];
 var $649=(($648+12)|0);
 var $650=HEAP32[(($649)>>2)];
 var $651=(($648+16)|0);
 var $652=HEAP32[(($651)>>2)];
 var $653=($650|0)==($652|0);
 if($653){label=213;break;}else{label=215;break;}
 case 213: 
 var $655=$648;
 var $656=HEAP32[(($655)>>2)];
 var $657=(($656+36)|0);
 var $658=HEAP32[(($657)>>2)];
 var $659=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$658]($648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=214;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 214: 
 var $_pre412=HEAP8[($this2_i_i_i10)];
 var $_pre9=HEAP32[(($240)>>2)];
 var $_phi_trans_insert=(($_pre9+12)|0);
 var $_pre10=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert11=(($_pre9+16)|0);
 var $_pre12=HEAP32[(($_phi_trans_insert11)>>2)];
 var $_0_i_i108=$659;var $665=$_pre412;var $664=$_pre9;var $663=$_pre10;var $662=$_pre12;label=216;break;
 case 215: 
 var $661=HEAP32[(($650)>>2)];
 var $_0_i_i108=$661;var $665=$516;var $664=$648;var $663=$650;var $662=$652;label=216;break;
 case 216: 
 var $662;
 var $663;
 var $664;
 var $665;
 var $_0_i_i108;
 var $666=$665&1;
 var $667=(($666<<24)>>24)==0;
 var $668=HEAP32[(($246)>>2)];
 var $_423=($667?$245:$668);
 var $669=HEAP32[(($_423)>>2)];
 var $670=($_0_i_i108|0)==($669|0);
 var $671=(($664+12)|0);
 var $672=($663|0)==($662|0);
 if($670){label=217;break;}else{label=224;break;}
 case 217: 
 if($672){label=218;break;}else{label=219;break;}
 case 218: 
 var $675=$664;
 var $676=HEAP32[(($675)>>2)];
 var $677=(($676+40)|0);
 var $678=HEAP32[(($677)>>2)];
 var $679=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$678]($664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=220;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 219: 
 var $681=(($663+4)|0);
 HEAP32[(($671)>>2)]=$681;
 label=220;break;
 case 220: 
 var $682=HEAP8[($this2_i_i_i10)];
 var $683=$682&1;
 var $684=(($683<<24)>>24)==0;
 if($684){label=222;break;}else{label=221;break;}
 case 221: 
 var $686=HEAP32[(($245)>>2)];
 var $690=$686;label=223;break;
 case 222: 
 var $688=($682&255);
 var $689=$688>>>1;
 var $690=$689;label=223;break;
 case 223: 
 var $690;
 var $691=($690>>>0)>1;
 var $__psn___trailing_sign_05=($691?$__psn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__psn___trailing_sign_05;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;
 case 224: 
 if($672){label=225;break;}else{label=226;break;}
 case 225: 
 var $694=$664;
 var $695=HEAP32[(($694)>>2)];
 var $696=(($695+36)|0);
 var $697=HEAP32[(($696)>>2)];
 var $698=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$697]($664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i130=$698;label=227;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 226: 
 var $700=HEAP32[(($663)>>2)];
 var $_0_i_i130=$700;label=227;break;
 case 227: 
 var $_0_i_i130;
 var $701=HEAP8[($this2_i_i_i12)];
 var $702=$701&1;
 var $703=(($702<<24)>>24)==0;
 var $704=HEAP32[(($244)>>2)];
 var $_424=($703?$243:$704);
 var $705=HEAP32[(($_424)>>2)];
 var $706=($_0_i_i130|0)==($705|0);
 if($706){label=228;break;}else{label=235;break;}
 case 228: 
 var $708=HEAP32[(($240)>>2)];
 var $709=(($708+12)|0);
 var $710=HEAP32[(($709)>>2)];
 var $711=(($708+16)|0);
 var $712=HEAP32[(($711)>>2)];
 var $713=($710|0)==($712|0);
 if($713){label=229;break;}else{label=230;break;}
 case 229: 
 var $715=$708;
 var $716=HEAP32[(($715)>>2)];
 var $717=(($716+40)|0);
 var $718=HEAP32[(($717)>>2)];
 var $719=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$718]($708) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=231;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$258;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free214336;label=93;break; }
 case 230: 
 var $721=(($710+4)|0);
 HEAP32[(($709)>>2)]=$721;
 label=231;break;
 case 231: 
 HEAP8[($__neg)]=1;
 var $722=HEAP8[($this2_i_i_i12)];
 var $723=$722&1;
 var $724=(($723<<24)>>24)==0;
 if($724){label=233;break;}else{label=232;break;}
 case 232: 
 var $726=HEAP32[(($243)>>2)];
 var $730=$726;label=234;break;
 case 233: 
 var $728=($722&255);
 var $729=$728>>>1;
 var $730=$729;label=234;break;
 case 234: 
 var $730;
 var $731=($730>>>0)>1;
 var $__nsn___trailing_sign_06=($731?$__nsn:$__trailing_sign_0343);
 var $__trailing_sign_1=$__nsn___trailing_sign_06;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;
 case 235: 
 var $733=HEAP32[(($__err)>>2)];
 var $734=$733|4;
 HEAP32[(($__err)>>2)]=$734;
 var $_0=0;var $1353=$258;var $free220=$free214336;label=428;break;
 case 236: 
 var $736=($__trailing_sign_0343|0)!=0;
 var $737=($__p_0341>>>0)<2;
 var $or_cond=$736|$737;
 if($or_cond){label=240;break;}else{label=237;break;}
 case 237: 
 var $739=($__p_0341|0)==2;
 if($739){label=238;break;}else{var $744=0;label=239;break;}
 case 238: 
 var $741=HEAP8[($253)];
 var $742=(($741<<24)>>24)!=0;
 var $744=$742;label=239;break;
 case 239: 
 var $744;
 var $brmerge=$248|$744;
 if($brmerge){label=240;break;}else{var $__trailing_sign_1=0;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_2;label=394;break;}
 case 240: 
 var $745=HEAP8[($this2_i_i_i9)];
 var $746=$745&1;
 var $747=(($746<<24)>>24)==0;
 var $748=HEAP32[(($250)>>2)];
 var $_425=($747?$249:$748);
 var $749=($__p_0341|0)==0;
 if($749){var $818=$_425;var $817=$745;var $816=$__e_sroa_0_2;var $_pre_i3_i_i191=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=261;break;}else{label=241;break;}
 case 241: 
 var $751=((($__p_0341)-(1))|0);
 var $752=(($241+$751)|0);
 var $753=HEAP8[($752)];
 var $switch=($753&255)<2;
 if($switch){var $755=$_425;var $754=$745;label=242;break;}else{var $818=$_425;var $817=$745;var $816=$__e_sroa_0_2;var $_pre_i3_i_i191=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=261;break;}
 case 242: 
 var $754;
 var $755;
 var $756=$754&1;
 var $757=(($756<<24)>>24)==0;
 if($757){label=244;break;}else{label=243;break;}
 case 243: 
 var $759=HEAP32[(($250)>>2)];
 var $760=HEAP32[(($249)>>2)];
 var $765=$760;var $764=$759;label=245;break;
 case 244: 
 var $762=($754&255);
 var $763=$762>>>1;
 var $765=$763;var $764=$249;label=245;break;
 case 245: 
 var $764;
 var $765;
 var $766=(($764+($765<<2))|0);
 var $767=($755|0)==($766|0);
 if($767){var $775=$754;label=250;break;}else{label=246;break;}
 case 246: 
 var $769=HEAP32[(($755)>>2)];
 var $770=HEAP32[(($242)>>2)];
 var $771=(($770+12)|0);
 var $772=HEAP32[(($771)>>2)];
 var $773=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$772]($__ct,8192,$769) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=247;break; } else { label=90;break; }
 case 247: 
 if($773){label=248;break;}else{label=249;break;}
 case 248: 
 var $774=(($755+4)|0);
 var $_pre413=HEAP8[($this2_i_i_i9)];
 var $755=$774;var $754=$_pre413;label=242;break;
 case 249: 
 var $_pre414=HEAP8[($this2_i_i_i9)];
 var $775=$_pre414;label=250;break;
 case 250: 
 var $775;
 var $776=$775&1;
 var $777=(($776<<24)>>24)==0;
 var $778=HEAP32[(($250)>>2)];
 var $_426=($777?$249:$778);
 var $779=$755;
 var $780=$_426;
 var $781=((($779)-($780))|0);
 var $782=$781>>2;
 var $783=HEAP8[($this2_i_i_i15)];
 var $784=$783&1;
 var $785=(($784<<24)>>24)==0;
 if($785){label=252;break;}else{label=251;break;}
 case 251: 
 var $787=HEAP32[(($251)>>2)];
 var $791=$787;label=253;break;
 case 252: 
 var $789=($783&255);
 var $790=$789>>>1;
 var $791=$790;label=253;break;
 case 253: 
 var $791;
 var $792=($782>>>0)>($791>>>0);
 if($792){var $818=$_426;var $817=$775;var $816=$__e_sroa_0_2;var $_pre_i3_i_i191=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=261;break;}else{label=254;break;}
 case 254: 
 if($785){label=256;break;}else{label=255;break;}
 case 255: 
 var $795=HEAP32[(($252)>>2)];
 var $796=HEAP32[(($251)>>2)];
 var $_sum=((($796)-($782))|0);
 var $797=(($795+($_sum<<2))|0);
 var $804=$796;var $803=$795;var $802=$797;label=257;break;
 case 256: 
 var $799=($783&255);
 var $800=$799>>>1;
 var $_sum416=((($800)-($782))|0);
 var $801=(($251+($_sum416<<2))|0);
 var $804=$800;var $803=$251;var $802=$801;label=257;break;
 case 257: 
 var $802;
 var $803;
 var $804;
 var $805=(($803+($804<<2))|0);
 var $806=($802|0)==($805|0);
 if($806){var $818=$755;var $817=$775;var $816=$__e_sroa_0_2;var $_pre_i3_i_i191=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=261;break;}else{var $808=$802;var $807=$_426;label=258;break;}
 case 258: 
 var $807;
 var $808;
 var $809=HEAP32[(($808)>>2)];
 var $810=HEAP32[(($807)>>2)];
 var $811=($809|0)==($810|0);
 if($811){label=259;break;}else{var $818=$_426;var $817=$775;var $816=$__e_sroa_0_2;var $_pre_i3_i_i191=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=261;break;}
 case 259: 
 var $813=(($808+4)|0);
 var $814=($813|0)==($805|0);
 if($814){var $818=$755;var $817=$775;var $816=$__e_sroa_0_2;var $_pre_i3_i_i191=$__e_sroa_0_2;var $__e_sroa_0_6=$__e_sroa_0_2;label=261;break;}else{label=260;break;}
 case 260: 
 var $815=(($807+4)|0);
 var $808=$813;var $807=$815;label=258;break;
 case 261: 
 var $__e_sroa_0_6;
 var $_pre_i3_i_i191;
 var $816;
 var $817;
 var $818;
 var $819=$817&1;
 var $820=(($819<<24)>>24)==0;
 if($820){label=263;break;}else{label=262;break;}
 case 262: 
 var $822=HEAP32[(($250)>>2)];
 var $823=HEAP32[(($249)>>2)];
 var $828=$823;var $827=$822;label=264;break;
 case 263: 
 var $825=($817&255);
 var $826=$825>>>1;
 var $828=$826;var $827=$249;label=264;break;
 case 264: 
 var $827;
 var $828;
 var $829=(($827+($828<<2))|0);
 var $830=($818|0)==($829|0);
 if($830){var $__e_sroa_0_9=$__e_sroa_0_6;label=287;break;}else{label=265;break;}
 case 265: 
 var $832=HEAP32[(($240)>>2)];
 var $833=($832|0)==0;
 if($833){var $850=1;label=272;break;}else{label=266;break;}
 case 266: 
 var $835=(($832+12)|0);
 var $836=HEAP32[(($835)>>2)];
 var $837=(($832+16)|0);
 var $838=HEAP32[(($837)>>2)];
 var $839=($836|0)==($838|0);
 if($839){label=267;break;}else{label=268;break;}
 case 267: 
 var $841=$832;
 var $842=HEAP32[(($841)>>2)];
 var $843=(($842+36)|0);
 var $844=HEAP32[(($843)>>2)];
 var $845=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$844]($832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i183=$845;label=269;break; } else { label=91;break; }
 case 268: 
 var $847=HEAP32[(($836)>>2)];
 var $_0_i_i_i_i183=$847;label=269;break;
 case 269: 
 var $_0_i_i_i_i183;
 var $848=($_0_i_i_i_i183|0)==-1;
 if($848){label=271;break;}else{label=270;break;}
 case 270: 
 var $_pre_i_i_i185=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i186=($_pre_i_i_i185|0)==0;
 var $850=$phitmp_i_i_i186;label=272;break;
 case 271: 
 HEAP32[(($240)>>2)]=0;
 var $850=1;label=272;break;
 case 272: 
 var $850;
 var $851=($816|0)==0;
 if($851){var $_pre_i3_i_i191400=$_pre_i3_i_i191;var $__e_sroa_0_7=$__e_sroa_0_6;label=277;break;}else{label=273;break;}
 case 273: 
 var $853=(($816+12)|0);
 var $854=HEAP32[(($853)>>2)];
 var $855=(($816+16)|0);
 var $856=HEAP32[(($855)>>2)];
 var $857=($854|0)==($856|0);
 if($857){label=274;break;}else{label=275;break;}
 case 274: 
 var $859=$816;
 var $860=HEAP32[(($859)>>2)];
 var $861=(($860+36)|0);
 var $862=HEAP32[(($861)>>2)];
 var $863=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$862]($816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i189=$863;label=276;break; } else { label=91;break; }
 case 275: 
 var $865=HEAP32[(($854)>>2)];
 var $_0_i_i1_i_i189=$865;label=276;break;
 case 276: 
 var $_0_i_i1_i_i189;
 var $866=($_0_i_i1_i_i189|0)==-1;
 if($866){var $_pre_i3_i_i191400=0;var $__e_sroa_0_7=0;label=277;break;}else{label=278;break;}
 case 277: 
 var $__e_sroa_0_7;
 var $_pre_i3_i_i191400;
 if($850){var $__e_sroa_0_9=$__e_sroa_0_7;label=287;break;}else{var $868=0;var $_pre_i3_i_i191399=$_pre_i3_i_i191400;var $__e_sroa_0_8=$__e_sroa_0_7;label=279;break;}
 case 278: 
 var $phitmp_i4_i_i192=($_pre_i3_i_i191|0)==0;
 var $tmp_i_i194=$850^$phitmp_i4_i_i192;
 if($tmp_i_i194){var $868=$_pre_i3_i_i191;var $_pre_i3_i_i191399=$_pre_i3_i_i191;var $__e_sroa_0_8=$__e_sroa_0_6;label=279;break;}else{var $__e_sroa_0_9=$__e_sroa_0_6;label=287;break;}
 case 279: 
 var $__e_sroa_0_8;
 var $_pre_i3_i_i191399;
 var $868;
 var $869=HEAP32[(($240)>>2)];
 var $870=(($869+12)|0);
 var $871=HEAP32[(($870)>>2)];
 var $872=(($869+16)|0);
 var $873=HEAP32[(($872)>>2)];
 var $874=($871|0)==($873|0);
 if($874){label=280;break;}else{label=281;break;}
 case 280: 
 var $876=$869;
 var $877=HEAP32[(($876)>>2)];
 var $878=(($877+36)|0);
 var $879=HEAP32[(($878)>>2)];
 var $880=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$879]($869) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i179=$880;label=282;break; } else { label=91;break; }
 case 281: 
 var $882=HEAP32[(($871)>>2)];
 var $_0_i_i179=$882;label=282;break;
 case 282: 
 var $_0_i_i179;
 var $883=HEAP32[(($818)>>2)];
 var $884=($_0_i_i179|0)==($883|0);
 if($884){label=283;break;}else{var $__e_sroa_0_9=$__e_sroa_0_8;label=287;break;}
 case 283: 
 var $886=HEAP32[(($240)>>2)];
 var $887=(($886+12)|0);
 var $888=HEAP32[(($887)>>2)];
 var $889=(($886+16)|0);
 var $890=HEAP32[(($889)>>2)];
 var $891=($888|0)==($890|0);
 if($891){label=284;break;}else{label=285;break;}
 case 284: 
 var $893=$886;
 var $894=HEAP32[(($893)>>2)];
 var $895=(($894+40)|0);
 var $896=HEAP32[(($895)>>2)];
 var $897=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$896]($886) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=286;break; } else { label=91;break; }
 case 285: 
 var $899=(($888+4)|0);
 HEAP32[(($887)>>2)]=$899;
 label=286;break;
 case 286: 
 var $900=(($818+4)|0);
 var $_pre=HEAP8[($this2_i_i_i9)];
 var $818=$900;var $817=$_pre;var $816=$868;var $_pre_i3_i_i191=$_pre_i3_i_i191399;var $__e_sroa_0_6=$__e_sroa_0_8;label=261;break;
 case 287: 
 var $__e_sroa_0_9;
 if($248){label=288;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=394;break;}
 case 288: 
 var $902=HEAP8[($this2_i_i_i9)];
 var $903=$902&1;
 var $904=(($903<<24)>>24)==0;
 if($904){label=290;break;}else{label=289;break;}
 case 289: 
 var $906=HEAP32[(($250)>>2)];
 var $907=HEAP32[(($249)>>2)];
 var $912=$907;var $911=$906;label=291;break;
 case 290: 
 var $909=($902&255);
 var $910=$909>>>1;
 var $912=$910;var $911=$249;label=291;break;
 case 291: 
 var $911;
 var $912;
 var $913=(($911+($912<<2))|0);
 var $914=($818|0)==($913|0);
 if($914){var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$256;var $1250=$257;var $1249=$258;var $free215=$free214336;var $__fd_2=$__fd_0;var $__e_sroa_0_20=$__e_sroa_0_9;label=394;break;}else{label=292;break;}
 case 292: 
 var $916=HEAP32[(($__err)>>2)];
 var $917=$916|4;
 HEAP32[(($__err)>>2)]=$917;
 var $_0=0;var $1353=$258;var $free220=$free214336;label=428;break;
 case 293: 
 var $__e_sroa_0_10;
 var $free213;
 var $918;
 var $919;
 var $920;
 var $__ng_0;
 var $921=HEAP32[(($240)>>2)];
 var $922=($921|0)==0;
 if($922){var $939=1;label=300;break;}else{label=294;break;}
 case 294: 
 var $924=(($921+12)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($921+16)|0);
 var $927=HEAP32[(($926)>>2)];
 var $928=($925|0)==($927|0);
 if($928){label=295;break;}else{label=296;break;}
 case 295: 
 var $930=$921;
 var $931=HEAP32[(($930)>>2)];
 var $932=(($931+36)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$933]($921) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i158=$934;label=297;break; } else { var $_ph_ph_ph=$918;var $free218_ph_ph_ph=$free213;label=87;break; }
 case 296: 
 var $936=HEAP32[(($925)>>2)];
 var $_0_i_i_i_i158=$936;label=297;break;
 case 297: 
 var $_0_i_i_i_i158;
 var $937=($_0_i_i_i_i158|0)==-1;
 if($937){label=299;break;}else{label=298;break;}
 case 298: 
 var $_pre_i_i_i160=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i161=($_pre_i_i_i160|0)==0;
 var $939=$phitmp_i_i_i161;label=300;break;
 case 299: 
 HEAP32[(($240)>>2)]=0;
 var $939=1;label=300;break;
 case 300: 
 var $939;
 var $940=($__e_sroa_0_10|0)==0;
 if($940){label=305;break;}else{label=301;break;}
 case 301: 
 var $942=(($__e_sroa_0_10+12)|0);
 var $943=HEAP32[(($942)>>2)];
 var $944=(($__e_sroa_0_10+16)|0);
 var $945=HEAP32[(($944)>>2)];
 var $946=($943|0)==($945|0);
 if($946){label=302;break;}else{label=303;break;}
 case 302: 
 var $948=$__e_sroa_0_10;
 var $949=HEAP32[(($948)>>2)];
 var $950=(($949+36)|0);
 var $951=HEAP32[(($950)>>2)];
 var $952=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$951]($__e_sroa_0_10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i164=$952;label=304;break; } else { var $_ph_ph_ph=$918;var $free218_ph_ph_ph=$free213;label=87;break; }
 case 303: 
 var $954=HEAP32[(($943)>>2)];
 var $_0_i_i1_i_i164=$954;label=304;break;
 case 304: 
 var $_0_i_i1_i_i164;
 var $955=($_0_i_i1_i_i164|0)==-1;
 if($955){label=305;break;}else{label=306;break;}
 case 305: 
 if($939){var $__e_sroa_0_13=0;label=331;break;}else{var $__e_sroa_0_12=0;label=307;break;}
 case 306: 
 if($939){var $__e_sroa_0_12=$__e_sroa_0_10;label=307;break;}else{var $__e_sroa_0_13=$__e_sroa_0_10;label=331;break;}
 case 307: 
 var $__e_sroa_0_12;
 var $957=HEAP32[(($240)>>2)];
 var $958=(($957+12)|0);
 var $959=HEAP32[(($958)>>2)];
 var $960=(($957+16)|0);
 var $961=HEAP32[(($960)>>2)];
 var $962=($959|0)==($961|0);
 if($962){label=308;break;}else{label=309;break;}
 case 308: 
 var $964=$957;
 var $965=HEAP32[(($964)>>2)];
 var $966=(($965+36)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$967]($957) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i155=$968;label=310;break; } else { var $_ph_ph_ph=$918;var $free218_ph_ph_ph=$free213;label=87;break; }
 case 309: 
 var $970=HEAP32[(($959)>>2)];
 var $_0_i_i155=$970;label=310;break;
 case 310: 
 var $_0_i_i155;
 var $971=HEAP32[(($242)>>2)];
 var $972=(($971+12)|0);
 var $973=HEAP32[(($972)>>2)];
 var $974=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$973]($__ct,2048,$_0_i_i155) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=311;break; } else { var $_ph_ph_ph=$918;var $free218_ph_ph_ph=$free213;label=87;break; }
 case 311: 
 if($974){label=312;break;}else{label=316;break;}
 case 312: 
 var $976=HEAP32[(($__wn)>>2)];
 var $977=HEAP32[(($11)>>2)];
 var $978=($976|0)==($977|0);
 if($978){label=313;break;}else{var $981=$976;label=315;break;}
 case 313: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=314;break; } else { var $_ph_ph_ph=$918;var $free218_ph_ph_ph=$free213;label=87;break; }
 case 314: 
 var $_pre415=HEAP32[(($__wn)>>2)];
 var $981=$_pre415;label=315;break;
 case 315: 
 var $981;
 var $982=(($981+4)|0);
 HEAP32[(($__wn)>>2)]=$982;
 HEAP32[(($981)>>2)]=$_0_i_i155;
 var $983=((($__ng_0)+(1))|0);
 var $__ng_1=$983;var $1027=$920;var $1026=$919;var $1025=$918;var $free=$free213;label=328;break;
 case 316: 
 var $985=HEAP8[($this2_i_i_i)];
 var $986=$985&1;
 var $987=(($986<<24)>>24)==0;
 if($987){label=318;break;}else{label=317;break;}
 case 317: 
 var $989=HEAP32[(($254)>>2)];
 var $993=$989;label=319;break;
 case 318: 
 var $991=($985&255);
 var $992=$991>>>1;
 var $993=$992;label=319;break;
 case 319: 
 var $993;
 var $994=($993|0)==0;
 var $995=($__ng_0|0)==0;
 var $or_cond7=$994|$995;
 var $or_cond7_not=$or_cond7^1;
 var $996=($_0_i_i155|0)==($__ts_0|0);
 var $or_cond17=$or_cond7_not&$996;
 if($or_cond17){label=320;break;}else{var $__e_sroa_0_13=$__e_sroa_0_12;label=331;break;}
 case 320: 
 var $998=($919|0)==($920|0);
 if($998){label=321;break;}else{var $1022=$920;var $1021=$919;var $1020=$918;var $free212=$free213;label=327;break;}
 case 321: 
 var $1000=($free213|0)==((538)|0);
 var $1001=$919;
 var $1002=$918;
 var $1003=((($1001)-($1002))|0);
 var $1004=($1003>>>0)<2147483647;
 var $1005=$1003<<1;
 var $__i140=($1004?$1005:-1);
 var $1006=$1003>>2;
 if($1000){var $1009=0;label=323;break;}else{label=322;break;}
 case 322: 
 var $phitmp_i141=$918;
 var $1009=$phitmp_i141;label=323;break;
 case 323: 
 var $1009;
 var $1010=_realloc($1009,$__i140);
 var $1011=$1010;
 var $1012=($1010|0)==0;
 if($1012){label=324;break;}else{label=326;break;}
 case 324: 
 var $1014=___cxa_allocate_exception(4);
 var $1015=$1014;
 HEAP32[(($1015)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1014,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=325;break; } else { label=88;break; }
 case 325: 
 throw "Reached an unreachable!";
 case 326: 
 var $1016=$__i140>>>2;
 var $1017=(($1011+($1006<<2))|0);
 var $1018=(($1011+($1016<<2))|0);
 var $1022=$1018;var $1021=$1017;var $1020=$1011;var $free212=282;label=327;break;
 case 327: 
 var $free212;
 var $1020;
 var $1021;
 var $1022;
 var $1023=(($1021+4)|0);
 HEAP32[(($1021)>>2)]=$__ng_0;
 var $__ng_1=0;var $1027=$1022;var $1026=$1023;var $1025=$1020;var $free=$free212;label=328;break;
 case 328: 
 var $free;
 var $1025;
 var $1026;
 var $1027;
 var $__ng_1;
 var $1028=HEAP32[(($240)>>2)];
 var $1029=(($1028+12)|0);
 var $1030=HEAP32[(($1029)>>2)];
 var $1031=(($1028+16)|0);
 var $1032=HEAP32[(($1031)>>2)];
 var $1033=($1030|0)==($1032|0);
 if($1033){label=329;break;}else{label=330;break;}
 case 329: 
 var $1035=$1028;
 var $1036=HEAP32[(($1035)>>2)];
 var $1037=(($1036+40)|0);
 var $1038=HEAP32[(($1037)>>2)];
 var $1039=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1038]($1028) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__ng_0=$__ng_1;var $920=$1027;var $919=$1026;var $918=$1025;var $free213=$free;var $__e_sroa_0_10=$__e_sroa_0_12;label=293;break; } else { var $_ph_ph_ph=$1025;var $free218_ph_ph_ph=$free;label=87;break; }
 case 330: 
 var $1041=(($1030+4)|0);
 HEAP32[(($1029)>>2)]=$1041;
 var $__ng_0=$__ng_1;var $920=$1027;var $919=$1026;var $918=$1025;var $free213=$free;var $__e_sroa_0_10=$__e_sroa_0_12;label=293;break;
 case 331: 
 var $__e_sroa_0_13;
 var $1043=($918|0)==($919|0);
 var $1044=($__ng_0|0)==0;
 var $or_cond8=$1043|$1044;
 if($or_cond8){var $1074=$920;var $1073=$919;var $1072=$918;var $free216=$free213;label=340;break;}else{label=332;break;}
 case 332: 
 var $1046=($919|0)==($920|0);
 if($1046){label=333;break;}else{var $1070=$920;var $1069=$919;var $1068=$918;var $free217=$free213;label=339;break;}
 case 333: 
 var $1048=($free213|0)==((538)|0);
 var $1049=$919;
 var $1050=$918;
 var $1051=((($1049)-($1050))|0);
 var $1052=($1051>>>0)<2147483647;
 var $1053=$1051<<1;
 var $__i=($1052?$1053:-1);
 var $1054=$1051>>2;
 if($1048){var $1057=0;label=335;break;}else{label=334;break;}
 case 334: 
 var $phitmp_i=$918;
 var $1057=$phitmp_i;label=335;break;
 case 335: 
 var $1057;
 var $1058=_realloc($1057,$__i);
 var $1059=$1058;
 var $1060=($1058|0)==0;
 if($1060){label=336;break;}else{label=338;break;}
 case 336: 
 var $1062=___cxa_allocate_exception(4);
 var $1063=$1062;
 HEAP32[(($1063)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($1062,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=337;break; } else { label=94;break; }
 case 337: 
 throw "Reached an unreachable!";
 case 338: 
 var $1064=$__i>>>2;
 var $1065=(($1059+($1054<<2))|0);
 var $1066=(($1059+($1064<<2))|0);
 var $1070=$1066;var $1069=$1065;var $1068=$1059;var $free217=282;label=339;break;
 case 339: 
 var $free217;
 var $1068;
 var $1069;
 var $1070;
 var $1071=(($1069+4)|0);
 HEAP32[(($1069)>>2)]=$__ng_0;
 var $1074=$1070;var $1073=$1071;var $1072=$1068;var $free216=$free217;label=340;break;
 case 340: 
 var $free216;
 var $1072;
 var $1073;
 var $1074;
 var $1075=($__fd_0|0)>0;
 if($1075){label=341;break;}else{var $__fd_1=$__fd_0;var $__e_sroa_0_19=$__e_sroa_0_13;label=392;break;}
 case 341: 
 var $1077=HEAP32[(($240)>>2)];
 var $1078=($1077|0)==0;
 if($1078){var $1095=1;label=348;break;}else{label=342;break;}
 case 342: 
 var $1080=(($1077+12)|0);
 var $1081=HEAP32[(($1080)>>2)];
 var $1082=(($1077+16)|0);
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=($1081|0)==($1083|0);
 if($1084){label=343;break;}else{label=344;break;}
 case 343: 
 var $1086=$1077;
 var $1087=HEAP32[(($1086)>>2)];
 var $1088=(($1087+36)|0);
 var $1089=HEAP32[(($1088)>>2)];
 var $1090=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1089]($1077) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i112=$1090;label=345;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$1072;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free216;label=93;break; }
 case 344: 
 var $1092=HEAP32[(($1081)>>2)];
 var $_0_i_i_i_i112=$1092;label=345;break;
 case 345: 
 var $_0_i_i_i_i112;
 var $1093=($_0_i_i_i_i112|0)==-1;
 if($1093){label=347;break;}else{label=346;break;}
 case 346: 
 var $_pre_i_i_i114=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i115=($_pre_i_i_i114|0)==0;
 var $1095=$phitmp_i_i_i115;label=348;break;
 case 347: 
 HEAP32[(($240)>>2)]=0;
 var $1095=1;label=348;break;
 case 348: 
 var $1095;
 var $1096=($__e_sroa_0_13|0)==0;
 if($1096){label=353;break;}else{label=349;break;}
 case 349: 
 var $1098=(($__e_sroa_0_13+12)|0);
 var $1099=HEAP32[(($1098)>>2)];
 var $1100=(($__e_sroa_0_13+16)|0);
 var $1101=HEAP32[(($1100)>>2)];
 var $1102=($1099|0)==($1101|0);
 if($1102){label=350;break;}else{label=351;break;}
 case 350: 
 var $1104=$__e_sroa_0_13;
 var $1105=HEAP32[(($1104)>>2)];
 var $1106=(($1105+36)|0);
 var $1107=HEAP32[(($1106)>>2)];
 var $1108=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1107]($__e_sroa_0_13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i118=$1108;label=352;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$1072;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free216;label=93;break; }
 case 351: 
 var $1110=HEAP32[(($1099)>>2)];
 var $_0_i_i1_i_i118=$1110;label=352;break;
 case 352: 
 var $_0_i_i1_i_i118;
 var $1111=($_0_i_i1_i_i118|0)==-1;
 if($1111){label=353;break;}else{label=354;break;}
 case 353: 
 if($1095){label=359;break;}else{var $__e_sroa_0_15=0;label=355;break;}
 case 354: 
 if($1095){var $__e_sroa_0_15=$__e_sroa_0_13;label=355;break;}else{label=359;break;}
 case 355: 
 var $__e_sroa_0_15;
 var $1112=HEAP32[(($240)>>2)];
 var $1113=(($1112+12)|0);
 var $1114=HEAP32[(($1113)>>2)];
 var $1115=(($1112+16)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1114|0)==($1116|0);
 if($1117){label=356;break;}else{label=357;break;}
 case 356: 
 var $1119=$1112;
 var $1120=HEAP32[(($1119)>>2)];
 var $1121=(($1120+36)|0);
 var $1122=HEAP32[(($1121)>>2)];
 var $1123=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1122]($1112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i105=$1123;label=358;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$1072;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free216;label=93;break; }
 case 357: 
 var $1125=HEAP32[(($1114)>>2)];
 var $_0_i_i105=$1125;label=358;break;
 case 358: 
 var $_0_i_i105;
 var $1126=($_0_i_i105|0)==($__dp_0|0);
 if($1126){label=360;break;}else{label=359;break;}
 case 359: 
 var $1128=HEAP32[(($__err)>>2)];
 var $1129=$1128|4;
 HEAP32[(($__err)>>2)]=$1129;
 var $_0=0;var $1353=$1072;var $free220=$free216;label=428;break;
 case 360: 
 var $1131=HEAP32[(($240)>>2)];
 var $1132=(($1131+12)|0);
 var $1133=HEAP32[(($1132)>>2)];
 var $1134=(($1131+16)|0);
 var $1135=HEAP32[(($1134)>>2)];
 var $1136=($1133|0)==($1135|0);
 if($1136){label=361;break;}else{label=362;break;}
 case 361: 
 var $1138=$1131;
 var $1139=HEAP32[(($1138)>>2)];
 var $1140=(($1139+40)|0);
 var $1141=HEAP32[(($1140)>>2)];
 var $1142=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1141]($1131) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $1146=$__e_sroa_0_15;var $1145=$__fd_0;var $_pre_i3_i_i86=$__e_sroa_0_15;var $__e_sroa_0_16=$__e_sroa_0_15;label=363;break; } else { var $_ph_ph237_ph_ph_ph_ph_ph_ph=$1072;var $free218_ph_ph236_ph_ph_ph_ph_ph_ph=$free216;label=93;break; }
 case 362: 
 var $1144=(($1133+4)|0);
 HEAP32[(($1132)>>2)]=$1144;
 var $1146=$__e_sroa_0_15;var $1145=$__fd_0;var $_pre_i3_i_i86=$__e_sroa_0_15;var $__e_sroa_0_16=$__e_sroa_0_15;label=363;break;
 case 363: 
 var $__e_sroa_0_16;
 var $_pre_i3_i_i86;
 var $1145;
 var $1146;
 var $1147=HEAP32[(($240)>>2)];
 var $1148=($1147|0)==0;
 if($1148){var $1165=1;label=370;break;}else{label=364;break;}
 case 364: 
 var $1150=(($1147+12)|0);
 var $1151=HEAP32[(($1150)>>2)];
 var $1152=(($1147+16)|0);
 var $1153=HEAP32[(($1152)>>2)];
 var $1154=($1151|0)==($1153|0);
 if($1154){label=365;break;}else{label=366;break;}
 case 365: 
 var $1156=$1147;
 var $1157=HEAP32[(($1156)>>2)];
 var $1158=(($1157+36)|0);
 var $1159=HEAP32[(($1158)>>2)];
 var $1160=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1159]($1147) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i78=$1160;label=367;break; } else { label=89;break; }
 case 366: 
 var $1162=HEAP32[(($1151)>>2)];
 var $_0_i_i_i_i78=$1162;label=367;break;
 case 367: 
 var $_0_i_i_i_i78;
 var $1163=($_0_i_i_i_i78|0)==-1;
 if($1163){label=369;break;}else{label=368;break;}
 case 368: 
 var $_pre_i_i_i80=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i81=($_pre_i_i_i80|0)==0;
 var $1165=$phitmp_i_i_i81;label=370;break;
 case 369: 
 HEAP32[(($240)>>2)]=0;
 var $1165=1;label=370;break;
 case 370: 
 var $1165;
 var $1166=($1146|0)==0;
 if($1166){var $_pre_i3_i_i86403_ph=$_pre_i3_i_i86;var $__e_sroa_0_17=$__e_sroa_0_16;label=375;break;}else{label=371;break;}
 case 371: 
 var $1168=(($1146+12)|0);
 var $1169=HEAP32[(($1168)>>2)];
 var $1170=(($1146+16)|0);
 var $1171=HEAP32[(($1170)>>2)];
 var $1172=($1169|0)==($1171|0);
 if($1172){label=372;break;}else{label=373;break;}
 case 372: 
 var $1174=$1146;
 var $1175=HEAP32[(($1174)>>2)];
 var $1176=(($1175+36)|0);
 var $1177=HEAP32[(($1176)>>2)];
 var $1178=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1177]($1146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i84=$1178;label=374;break; } else { label=89;break; }
 case 373: 
 var $1180=HEAP32[(($1169)>>2)];
 var $_0_i_i1_i_i84=$1180;label=374;break;
 case 374: 
 var $_0_i_i1_i_i84;
 var $1181=($_0_i_i1_i_i84|0)==-1;
 if($1181){var $_pre_i3_i_i86403_ph=0;var $__e_sroa_0_17=0;label=375;break;}else{label=376;break;}
 case 375: 
 var $__e_sroa_0_17;
 var $_pre_i3_i_i86403_ph;
 if($1165){label=382;break;}else{var $_pre_i3_i_i86403420=$_pre_i3_i_i86403_ph;var $1183=0;var $__e_sroa_0_18=$__e_sroa_0_17;label=377;break;}
 case 376: 
 var $phitmp_i4_i_i87=($_pre_i3_i_i86|0)==0;
 var $tmp_i_i89=$1165^$phitmp_i4_i_i87;
 if($tmp_i_i89){var $_pre_i3_i_i86403420=$_pre_i3_i_i86;var $1183=$_pre_i3_i_i86;var $__e_sroa_0_18=$__e_sroa_0_16;label=377;break;}else{label=382;break;}
 case 377: 
 var $__e_sroa_0_18;
 var $1183;
 var $_pre_i3_i_i86403420;
 var $1184=HEAP32[(($240)>>2)];
 var $1185=(($1184+12)|0);
 var $1186=HEAP32[(($1185)>>2)];
 var $1187=(($1184+16)|0);
 var $1188=HEAP32[(($1187)>>2)];
 var $1189=($1186|0)==($1188|0);
 if($1189){label=378;break;}else{label=379;break;}
 case 378: 
 var $1191=$1184;
 var $1192=HEAP32[(($1191)>>2)];
 var $1193=(($1192+36)|0);
 var $1194=HEAP32[(($1193)>>2)];
 var $1195=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1194]($1184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i72=$1195;label=380;break; } else { label=89;break; }
 case 379: 
 var $1197=HEAP32[(($1186)>>2)];
 var $_0_i_i72=$1197;label=380;break;
 case 380: 
 var $_0_i_i72;
 var $1198=HEAP32[(($242)>>2)];
 var $1199=(($1198+12)|0);
 var $1200=HEAP32[(($1199)>>2)];
 var $1201=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1200]($__ct,2048,$_0_i_i72) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=381;break; } else { label=89;break; }
 case 381: 
 if($1201){label=383;break;}else{label=382;break;}
 case 382: 
 var $1203=HEAP32[(($__err)>>2)];
 var $1204=$1203|4;
 HEAP32[(($__err)>>2)]=$1204;
 var $_0=0;var $1353=$1072;var $free220=$free216;label=428;break;
 case 383: 
 var $1206=HEAP32[(($__wn)>>2)];
 var $1207=HEAP32[(($11)>>2)];
 var $1208=($1206|0)==($1207|0);
 if($1208){label=384;break;}else{label=385;break;}
 case 384: 
 (function() { try { __THREW__ = 0; return __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__wb,$__wn,$11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=385;break; } else { label=89;break; }
 case 385: 
 var $1211=HEAP32[(($240)>>2)];
 var $1212=(($1211+12)|0);
 var $1213=HEAP32[(($1212)>>2)];
 var $1214=(($1211+16)|0);
 var $1215=HEAP32[(($1214)>>2)];
 var $1216=($1213|0)==($1215|0);
 if($1216){label=386;break;}else{label=387;break;}
 case 386: 
 var $1218=$1211;
 var $1219=HEAP32[(($1218)>>2)];
 var $1220=(($1219+36)|0);
 var $1221=HEAP32[(($1220)>>2)];
 var $1222=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1221]($1211) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i64=$1222;label=388;break; } else { label=89;break; }
 case 387: 
 var $1224=HEAP32[(($1213)>>2)];
 var $_0_i_i64=$1224;label=388;break;
 case 388: 
 var $_0_i_i64;
 var $1225=HEAP32[(($__wn)>>2)];
 var $1226=(($1225+4)|0);
 HEAP32[(($__wn)>>2)]=$1226;
 HEAP32[(($1225)>>2)]=$_0_i_i64;
 var $1227=((($1145)-(1))|0);
 var $1228=HEAP32[(($240)>>2)];
 var $1229=(($1228+12)|0);
 var $1230=HEAP32[(($1229)>>2)];
 var $1231=(($1228+16)|0);
 var $1232=HEAP32[(($1231)>>2)];
 var $1233=($1230|0)==($1232|0);
 if($1233){label=389;break;}else{label=391;break;}
 case 389: 
 var $1235=$1228;
 var $1236=HEAP32[(($1235)>>2)];
 var $1237=(($1236+40)|0);
 var $1238=HEAP32[(($1237)>>2)];
 var $1239=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1238]($1228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=390;break; } else { label=89;break; }
 case 390: 
 var $1240=($1227|0)>0;
 if($1240){var $1146=$1183;var $1145=$1227;var $_pre_i3_i_i86=$_pre_i3_i_i86403420;var $__e_sroa_0_16=$__e_sroa_0_18;label=363;break;}else{var $__fd_1=$1227;var $__e_sroa_0_19=$__e_sroa_0_18;label=392;break;}
 case 391: 
 var $1242=(($1230+4)|0);
 HEAP32[(($1229)>>2)]=$1242;
 label=390;break;
 case 392: 
 var $__e_sroa_0_19;
 var $__fd_1;
 var $1243=HEAP32[(($__wn)>>2)];
 var $1244=HEAP32[(($238)>>2)];
 var $1245=($1243|0)==($1244|0);
 if($1245){label=393;break;}else{var $__trailing_sign_1=$__trailing_sign_0343;var $1251=$1074;var $1250=$1073;var $1249=$1072;var $free215=$free216;var $__fd_2=$__fd_1;var $__e_sroa_0_20=$__e_sroa_0_19;label=394;break;}
 case 393: 
 var $1247=HEAP32[(($__err)>>2)];
 var $1248=$1247|4;
 HEAP32[(($__err)>>2)]=$1248;
 var $_0=0;var $1353=$1072;var $free220=$free216;label=428;break;
 case 394: 
 var $__e_sroa_0_20;
 var $__fd_2;
 var $free215;
 var $1249;
 var $1250;
 var $1251;
 var $__trailing_sign_1;
 var $1252=((($__p_0341)+(1))|0);
 var $1253=($1252>>>0)<4;
 if($1253){var $free214336=$free215;var $258=$1249;var $257=$1250;var $256=$1251;var $__p_0341=$1252;var $__trailing_sign_0343=$__trailing_sign_1;var $__fd_0=$__fd_2;var $__e_sroa_0_0=$__e_sroa_0_20;label=71;break;}else{var $free214_lcssa=$free215;var $_lcssa285=$1249;var $_lcssa300=$1250;var $__trailing_sign_0_lcssa=$__trailing_sign_1;var $__e_sroa_0_21=$__e_sroa_0_20;label=395;break;}
 case 395: 
 var $__e_sroa_0_21;
 var $__trailing_sign_0_lcssa;
 var $_lcssa300;
 var $_lcssa285;
 var $free214_lcssa;
 var $1254=($__trailing_sign_0_lcssa|0)==0;
 if($1254){label=425;break;}else{label=396;break;}
 case 396: 
 var $1255=$__trailing_sign_0_lcssa;
 var $1256=(($__trailing_sign_0_lcssa+4)|0);
 var $1257=(($__trailing_sign_0_lcssa+8)|0);
 var $__i_0=1;var $__e_sroa_0_22=$__e_sroa_0_21;label=397;break;
 case 397: 
 var $__e_sroa_0_22;
 var $__i_0;
 var $1258=HEAP8[($1255)];
 var $1259=$1258&1;
 var $1260=(($1259<<24)>>24)==0;
 if($1260){label=399;break;}else{label=398;break;}
 case 398: 
 var $1262=HEAP32[(($1256)>>2)];
 var $1266=$1262;label=400;break;
 case 399: 
 var $1264=($1258&255);
 var $1265=$1264>>>1;
 var $1266=$1265;label=400;break;
 case 400: 
 var $1266;
 var $1267=($__i_0>>>0)<($1266>>>0);
 if($1267){label=401;break;}else{label=425;break;}
 case 401: 
 var $1269=HEAP32[(($240)>>2)];
 var $1270=($1269|0)==0;
 if($1270){var $1287=1;label=408;break;}else{label=402;break;}
 case 402: 
 var $1272=(($1269+12)|0);
 var $1273=HEAP32[(($1272)>>2)];
 var $1274=(($1269+16)|0);
 var $1275=HEAP32[(($1274)>>2)];
 var $1276=($1273|0)==($1275|0);
 if($1276){label=403;break;}else{label=404;break;}
 case 403: 
 var $1278=$1269;
 var $1279=HEAP32[(($1278)>>2)];
 var $1280=(($1279+36)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1281]($1269) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$1282;label=405;break; } else { label=86;break; }
 case 404: 
 var $1284=HEAP32[(($1273)>>2)];
 var $_0_i_i_i_i=$1284;label=405;break;
 case 405: 
 var $_0_i_i_i_i;
 var $1285=($_0_i_i_i_i|0)==-1;
 if($1285){label=407;break;}else{label=406;break;}
 case 406: 
 var $_pre_i_i_i=HEAP32[(($240)>>2)];
 var $phitmp_i_i_i=($_pre_i_i_i|0)==0;
 var $1287=$phitmp_i_i_i;label=408;break;
 case 407: 
 HEAP32[(($240)>>2)]=0;
 var $1287=1;label=408;break;
 case 408: 
 var $1287;
 var $1288=($__e_sroa_0_22|0)==0;
 if($1288){label=413;break;}else{label=409;break;}
 case 409: 
 var $1290=(($__e_sroa_0_22+12)|0);
 var $1291=HEAP32[(($1290)>>2)];
 var $1292=(($__e_sroa_0_22+16)|0);
 var $1293=HEAP32[(($1292)>>2)];
 var $1294=($1291|0)==($1293|0);
 if($1294){label=410;break;}else{label=411;break;}
 case 410: 
 var $1296=$__e_sroa_0_22;
 var $1297=HEAP32[(($1296)>>2)];
 var $1298=(($1297+36)|0);
 var $1299=HEAP32[(($1298)>>2)];
 var $1300=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1299]($__e_sroa_0_22) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$1300;label=412;break; } else { label=86;break; }
 case 411: 
 var $1302=HEAP32[(($1291)>>2)];
 var $_0_i_i1_i_i=$1302;label=412;break;
 case 412: 
 var $_0_i_i1_i_i;
 var $1303=($_0_i_i1_i_i|0)==-1;
 if($1303){label=413;break;}else{label=414;break;}
 case 413: 
 if($1287){label=421;break;}else{var $__e_sroa_0_24=0;label=415;break;}
 case 414: 
 if($1287){var $__e_sroa_0_24=$__e_sroa_0_22;label=415;break;}else{label=421;break;}
 case 415: 
 var $__e_sroa_0_24;
 var $1304=HEAP32[(($240)>>2)];
 var $1305=(($1304+12)|0);
 var $1306=HEAP32[(($1305)>>2)];
 var $1307=(($1304+16)|0);
 var $1308=HEAP32[(($1307)>>2)];
 var $1309=($1306|0)==($1308|0);
 if($1309){label=416;break;}else{label=417;break;}
 case 416: 
 var $1311=$1304;
 var $1312=HEAP32[(($1311)>>2)];
 var $1313=(($1312+36)|0);
 var $1314=HEAP32[(($1313)>>2)];
 var $1315=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1314]($1304) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i=$1315;label=418;break; } else { label=86;break; }
 case 417: 
 var $1317=HEAP32[(($1306)>>2)];
 var $_0_i_i=$1317;label=418;break;
 case 418: 
 var $_0_i_i;
 var $1318=HEAP8[($1255)];
 var $1319=$1318&1;
 var $1320=(($1319<<24)>>24)==0;
 if($1320){var $1323=$1256;label=420;break;}else{label=419;break;}
 case 419: 
 var $1322=HEAP32[(($1257)>>2)];
 var $1323=$1322;label=420;break;
 case 420: 
 var $1323;
 var $1324=(($1323+($__i_0<<2))|0);
 var $1325=HEAP32[(($1324)>>2)];
 var $1326=($_0_i_i|0)==($1325|0);
 if($1326){label=422;break;}else{label=421;break;}
 case 421: 
 var $1328=HEAP32[(($__err)>>2)];
 var $1329=$1328|4;
 HEAP32[(($__err)>>2)]=$1329;
 var $_0=0;var $1353=$_lcssa285;var $free220=$free214_lcssa;label=428;break;
 case 422: 
 var $1331=((($__i_0)+(1))|0);
 var $1332=HEAP32[(($240)>>2)];
 var $1333=(($1332+12)|0);
 var $1334=HEAP32[(($1333)>>2)];
 var $1335=(($1332+16)|0);
 var $1336=HEAP32[(($1335)>>2)];
 var $1337=($1334|0)==($1336|0);
 if($1337){label=423;break;}else{label=424;break;}
 case 423: 
 var $1339=$1332;
 var $1340=HEAP32[(($1339)>>2)];
 var $1341=(($1340+40)|0);
 var $1342=HEAP32[(($1341)>>2)];
 var $1343=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$1342]($1332) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $__i_0=$1331;var $__e_sroa_0_22=$__e_sroa_0_24;label=397;break; } else { label=86;break; }
 case 424: 
 var $1345=(($1334+4)|0);
 HEAP32[(($1333)>>2)]=$1345;
 var $__i_0=$1331;var $__e_sroa_0_22=$__e_sroa_0_24;label=397;break;
 case 425: 
 var $1346=($_lcssa285|0)==($_lcssa300|0);
 if($1346){var $_0=1;var $1353=$_lcssa300;var $free220=$free214_lcssa;label=428;break;}else{label=426;break;}
 case 426: 
 HEAP32[(($__et)>>2)]=0;
 __ZNSt3__116__check_groupingERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEPjS8_Rj($__grp,$_lcssa285,$_lcssa300,$__et);
 var $1348=HEAP32[(($__et)>>2)];
 var $1349=($1348|0)==0;
 if($1349){var $_0=1;var $1353=$_lcssa285;var $free220=$free214_lcssa;label=428;break;}else{label=427;break;}
 case 427: 
 var $1351=HEAP32[(($__err)>>2)];
 var $1352=$1351|4;
 HEAP32[(($__err)>>2)]=$1352;
 var $_0=0;var $1353=$_lcssa285;var $free220=$free214_lcssa;label=428;break;
 case 428: 
 var $free220;
 var $1353;
 var $_0;
 var $1354=HEAP8[($this2_i_i_i15)];
 var $1355=$1354&1;
 var $1356=(($1355<<24)>>24)==0;
 if($1356){label=431;break;}else{label=429;break;}
 case 429: 
 var $1358=HEAP32[(($252)>>2)];
 var $1359=($1358|0)==0;
 if($1359){label=431;break;}else{label=430;break;}
 case 430: 
 var $1361=$1358;
 _free($1361);
 label=431;break;
 case 431: 
 var $1362=HEAP8[($this2_i_i_i12)];
 var $1363=$1362&1;
 var $1364=(($1363<<24)>>24)==0;
 if($1364){label=434;break;}else{label=432;break;}
 case 432: 
 var $1366=HEAP32[(($244)>>2)];
 var $1367=($1366|0)==0;
 if($1367){label=434;break;}else{label=433;break;}
 case 433: 
 var $1369=$1366;
 _free($1369);
 label=434;break;
 case 434: 
 var $1370=HEAP8[($this2_i_i_i10)];
 var $1371=$1370&1;
 var $1372=(($1371<<24)>>24)==0;
 if($1372){label=437;break;}else{label=435;break;}
 case 435: 
 var $1374=HEAP32[(($246)>>2)];
 var $1375=($1374|0)==0;
 if($1375){label=437;break;}else{label=436;break;}
 case 436: 
 var $1377=$1374;
 _free($1377);
 label=437;break;
 case 437: 
 var $1378=HEAP8[($this2_i_i_i9)];
 var $1379=$1378&1;
 var $1380=(($1379<<24)>>24)==0;
 if($1380){label=440;break;}else{label=438;break;}
 case 438: 
 var $1382=HEAP32[(($250)>>2)];
 var $1383=($1382|0)==0;
 if($1383){label=440;break;}else{label=439;break;}
 case 439: 
 var $1385=$1382;
 _free($1385);
 label=440;break;
 case 440: 
 var $1386=HEAP8[($this2_i_i_i)];
 var $1387=$1386&1;
 var $1388=(($1387<<24)>>24)==0;
 if($1388){label=443;break;}else{label=441;break;}
 case 441: 
 var $1390=(($__grp+8)|0);
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=($1391|0)==0;
 if($1392){label=443;break;}else{label=442;break;}
 case 442: 
 _free($1391);
 label=443;break;
 case 443: 
 var $1394=($1353|0)==0;
 if($1394){label=446;break;}else{label=444;break;}
 case 444: 
 var $1396=$1353;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$free220]($1396) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=446;break; } else { label=445;break; }
 case 445: 
 var $1398$0 = ___cxa_find_matching_catch(-1, -1,0); var $1398$1 = tempRet0;
 var $1399=$1398$0;
 ___clang_call_terminate($1399);
 throw "Reached an unreachable!";
 case 446: 
 var $$etemp$25$0=400;
 var $$etemp$25$1=0;

 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_getES4_S4_bRNS_8ios_baseERjRNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__b,$__e,$__intl,$__iob,$__err,$__v){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+440)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__b; $__b=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__b)>>2)]=HEAP32[((tempParam)>>2)];
 var tempParam = $__e; $__e=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__e)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__wbuf=(sp)+(16);
 var $__wb=(sp)+(416);
 var $__wn=(sp)+(424);
 var $__neg=(sp)+(432);
 var $1=$__wbuf;
 var $$etemp$0$0=400;
 var $$etemp$0$1=0;

 var $2=(($__wbuf)|0);
 var $3=(($__wb)|0);
 HEAP32[(($3)>>2)]=$2;
 var $4=(($__wb+4)|0);
 HEAP32[(($4)>>2)]=538;
 var $5=(($__wbuf+400)|0);
 var $6=(($__iob+28)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$7;
 var $9=(($7+4)|0);
 var $10=$9;
 var $11=(tempValue=HEAP32[(($10)>>2)],HEAP32[(($10)>>2)]=tempValue+1,tempValue);
 var $12=$__p_i_i_i_i;
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $13=HEAP32[((18664)>>2)];
 var $14=($13|0)==-1;
 if($14){label=3;break;}else{label=2;break;}
 case 2: 
 var $16=(($__p_i_i_i_i)|0);
 HEAP32[(($16)>>2)]=18664;
 var $17=(($__p_i_i_i_i+4)|0);
 HEAP32[(($17)>>2)]=(202);
 var $18=(($__p_i_i_i_i+8)|0);
 HEAP32[(($18)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$12) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=67;break; }
 case 3: 
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $19=HEAP32[((18668)>>2)];
 var $20=((($19)-(1))|0);
 var $21=(($7+12)|0);
 var $22=$21;
 var $23=HEAP32[(($22)>>2)];
 var $24=(($7+8)|0);
 var $25=$24;
 var $26=HEAP32[(($25)>>2)];
 var $27=$23;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($20>>>0);
 if($31){label=4;break;}else{label=5;break;}
 case 4: 
 var $32=(($26+($20<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=5;break;}else{label=7;break;}
 case 5: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=67;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $38=$33;
 HEAP8[($__neg)]=0;
 var $39=(($__e)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=(($__iob+4)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=(function() { try { __THREW__ = 0; return __ZNSt3__19money_getIwNS_19istreambuf_iteratorIwNS_11char_traitsIwEEEEE8__do_getERS4_S4_bRKNS_6localeEjRjRbRKNS_5ctypeIwEERNS_10unique_ptrIwPFvPvEEERPwSM_($__b,$40,$__intl,$8,$42,$__err,$__neg,$38,$__wb,$__wn,$5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=67;break; }
 case 8: 
 if($43){label=9;break;}else{label=46;break;}
 case 9: 
 var $46=$__v;
 var $47=HEAP8[($46)];
 var $48=$47&1;
 var $49=(($48<<24)>>24)==0;
 if($49){label=11;break;}else{label=10;break;}
 case 10: 
 var $51=(($__v+8)|0);
 var $52=HEAP32[(($51)>>2)];
 HEAP32[(($52)>>2)]=0;
 var $53=(($__v+4)|0);
 HEAP32[(($53)>>2)]=0;
 label=12;break;
 case 11: 
 var $55=(($__v+4)|0);
 HEAP32[(($55)>>2)]=0;
 HEAP8[($46)]=0;
 label=12;break;
 case 12: 
 var $56=HEAP8[($__neg)];
 var $57=(($56<<24)>>24)==0;
 var $_pre14=$33;
 if($57){label=24;break;}else{label=13;break;}
 case 13: 
 var $59=HEAP32[(($_pre14)>>2)];
 var $60=(($59+44)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$61]($38,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=67;break; }
 case 14: 
 var $63=HEAP8[($46)];
 var $64=$63&1;
 var $65=(($64<<24)>>24)!=0;
 if($65){label=16;break;}else{label=15;break;}
 case 15: 
 var $67=($63&255);
 var $68=$67>>>1;
 var $__sz_0_i=$68;var $__cap_0_i=1;label=17;break;
 case 16: 
 var $70=(($__v)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=$71&-2;
 var $73=((($72)-(1))|0);
 var $74=(($__v+4)|0);
 var $75=HEAP32[(($74)>>2)];
 var $__sz_0_i=$75;var $__cap_0_i=$73;label=17;break;
 case 17: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $77=($__sz_0_i|0)==($__cap_0_i|0);
 if($77){label=18;break;}else{label=20;break;}
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=67;break; }
 case 19: 
 var $79=HEAP8[($46)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=21;break;}else{label=22;break;}
 case 20: 
 if($65){label=22;break;}else{label=21;break;}
 case 21: 
 var $84=(($__v+4)|0);
 var $85=$__sz_0_i<<1;
 var $86=((($85)+(2))|0);
 var $87=(($86)&255);
 HEAP8[($46)]=$87;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$84;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=23;break;
 case 22: 
 var $89=(($__v+8)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=((($__sz_0_i)+(1))|0);
 var $92=(($__v+4)|0);
 HEAP32[(($92)>>2)]=$91;
 var $_pn_i=$90;var $__p_0_sum_pre_phi_i=$91;label=23;break;
 case 23: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+($__sz_0_i<<2))|0);
 HEAP32[(($__p_0_i)>>2)]=$62;
 var $93=(($_pn_i+($__p_0_sum_pre_phi_i<<2))|0);
 HEAP32[(($93)>>2)]=0;
 label=24;break;
 case 24: 
 var $94=HEAP32[(($_pre14)>>2)];
 var $95=(($94+44)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$96]($38,48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=67;break; }
 case 25: 
 var $98=HEAP32[(($3)>>2)];
 var $99=HEAP32[(($__wn)>>2)];
 var $100=((($99)-(4))|0);
 var $101=($98>>>0)<($100>>>0);
 if($101){var $__w_09=$98;label=27;break;}else{var $__w_0_lcssa=$98;label=28;break;}
 case 26: 
 var $103=($106>>>0)<($100>>>0);
 if($103){var $__w_09=$106;label=27;break;}else{var $__w_0_lcssa=$106;label=28;break;}
 case 27: 
 var $__w_09;
 var $104=HEAP32[(($__w_09)>>2)];
 var $105=($104|0)==($97|0);
 var $106=(($__w_09+4)|0);
 if($105){label=26;break;}else{var $__w_0_lcssa=$__w_09;label=28;break;}
 case 28: 
 var $__w_0_lcssa;
 var $107=$__w_0_lcssa;
 var $108=HEAP8[($46)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){label=29;break;}else{label=30;break;}
 case 29: 
 var $111=($108&255);
 var $112=$111>>>1;
 var $122=1;var $121=$108;var $120=$112;label=31;break;
 case 30: 
 var $114=(($__v+4)|0);
 var $115=HEAP32[(($114)>>2)];
 var $116=(($__v)|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=$117&-2;
 var $phitmp_i_i=((($118)-(1))|0);
 var $119=(($117)&255);
 var $122=$phitmp_i_i;var $121=$119;var $120=$115;label=31;break;
 case 31: 
 var $120;
 var $121;
 var $122;
 var $123=$99;
 var $124=((($123)-($107))|0);
 var $125=$124>>2;
 var $126=($125|0)==0;
 if($126){label=46;break;}else{label=32;break;}
 case 32: 
 var $128=((($122)-($120))|0);
 var $129=($128>>>0)<($125>>>0);
 if($129){label=33;break;}else{var $134=$121;label=35;break;}
 case 33: 
 var $131=((($120)+($125))|0);
 var $132=((($131)-($122))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($__v,$122,$132,$120,$120,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=67;break; }
 case 34: 
 var $_pre_i=HEAP8[($46)];
 var $134=$_pre_i;label=35;break;
 case 35: 
 var $134;
 var $135=$134&1;
 var $136=(($135<<24)>>24)==0;
 if($136){label=37;break;}else{label=36;break;}
 case 36: 
 var $138=(($__v+8)|0);
 var $139=HEAP32[(($138)>>2)];
 var $142=$139;label=38;break;
 case 37: 
 var $141=(($__v+4)|0);
 var $142=$141;label=38;break;
 case 38: 
 var $142;
 var $143=(($142+($120<<2))|0);
 var $144=($__w_0_lcssa|0)==($99|0);
 if($144){var $__p_0_lcssa_i=$143;label=43;break;}else{label=39;break;}
 case 39: 
 var $scevgep3_i=$100;
 var $145=(((-$107))|0);
 var $uglygep_i=(($scevgep3_i+$145)|0);
 var $uglygep4_i=$uglygep_i;
 var $146=$uglygep4_i>>>2;
 var $147=((($120)+($146))|0);
 var $148=((($147)+(1))|0);
 var $_01_i=$__w_0_lcssa;var $__p_02_i=$143;label=40;break;
 case 40: 
 var $__p_02_i;
 var $_01_i;
 var $150=HEAP32[(($_01_i)>>2)];
 HEAP32[(($__p_02_i)>>2)]=$150;
 var $151=(($_01_i+4)|0);
 var $152=($151|0)==($99|0);
 if($152){label=42;break;}else{label=41;break;}
 case 41: 
 var $153=(($__p_02_i+4)|0);
 var $_01_i=$151;var $__p_02_i=$153;label=40;break;
 case 42: 
 var $scevgep5_i=(($142+($148<<2))|0);
 var $__p_0_lcssa_i=$scevgep5_i;label=43;break;
 case 43: 
 var $__p_0_lcssa_i;
 HEAP32[(($__p_0_lcssa_i)>>2)]=0;
 var $155=((($120)+($125))|0);
 var $156=HEAP8[($46)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=45;break;}else{label=44;break;}
 case 44: 
 var $160=(($__v+4)|0);
 HEAP32[(($160)>>2)]=$155;
 label=46;break;
 case 45: 
 var $162=$155<<1;
 var $163=(($162)&255);
 HEAP8[($46)]=$163;
 label=46;break;
 case 46: 
 var $164=(($__b)|0);
 var $165=HEAP32[(($164)>>2)];
 var $166=($165|0)==0;
 if($166){var $184=1;var $183=0;label=52;break;}else{label=47;break;}
 case 47: 
 var $168=(($165+12)|0);
 var $169=HEAP32[(($168)>>2)];
 var $170=(($165+16)|0);
 var $171=HEAP32[(($170)>>2)];
 var $172=($169|0)==($171|0);
 if($172){label=48;break;}else{label=49;break;}
 case 48: 
 var $174=$165;
 var $175=HEAP32[(($174)>>2)];
 var $176=(($175+36)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$177]($165) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i_i_i=$178;label=50;break; } else { label=67;break; }
 case 49: 
 var $180=HEAP32[(($169)>>2)];
 var $_0_i_i_i_i=$180;label=50;break;
 case 50: 
 var $_0_i_i_i_i;
 var $181=($_0_i_i_i_i|0)==-1;
 if($181){label=51;break;}else{var $184=0;var $183=$165;label=52;break;}
 case 51: 
 HEAP32[(($164)>>2)]=0;
 var $184=1;var $183=0;label=52;break;
 case 52: 
 var $183;
 var $184;
 var $185=($40|0)==0;
 if($185){label=58;break;}else{label=53;break;}
 case 53: 
 var $187=(($40+12)|0);
 var $188=HEAP32[(($187)>>2)];
 var $189=(($40+16)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($188|0)==($190|0);
 if($191){label=54;break;}else{label=55;break;}
 case 54: 
 var $193=$40;
 var $194=HEAP32[(($193)>>2)];
 var $195=(($194+36)|0);
 var $196=HEAP32[(($195)>>2)];
 var $197=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$196]($40) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0_i_i1_i_i=$197;label=56;break; } else { label=67;break; }
 case 55: 
 var $199=HEAP32[(($188)>>2)];
 var $_0_i_i1_i_i=$199;label=56;break;
 case 56: 
 var $_0_i_i1_i_i;
 var $200=($_0_i_i1_i_i|0)==-1;
 if($200){label=57;break;}else{label=59;break;}
 case 57: 
 HEAP32[(($39)>>2)]=0;
 label=58;break;
 case 58: 
 if($184){label=60;break;}else{label=61;break;}
 case 59: 
 if($184){label=61;break;}else{label=60;break;}
 case 60: 
 var $203=HEAP32[(($__err)>>2)];
 var $204=$203|2;
 HEAP32[(($__err)>>2)]=$204;
 label=61;break;
 case 61: 
 var $205=(($agg_result)|0);
 HEAP32[(($205)>>2)]=$183;
 var $206=(($7+4)|0);
 var $207=$206;
 var $208=(tempValue=HEAP32[(($207)>>2)],HEAP32[(($207)>>2)]=tempValue+-1,tempValue);
 var $209=($208|0)==0;
 if($209){label=62;break;}else{label=63;break;}
 case 62: 
 var $211=$7;
 var $212=$7;
 var $213=HEAP32[(($212)>>2)];
 var $214=(($213+8)|0);
 var $215=HEAP32[(($214)>>2)];
 FUNCTION_TABLE[$215]($211);
 label=63;break;
 case 63: 
 var $216=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $217=($216|0)==0;
 if($217){label=66;break;}else{label=64;break;}
 case 64: 
 var $219=HEAP32[(($4)>>2)];
 var $220=$216;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$219]($220) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=65;break; }
 case 65: 
 var $222$0 = ___cxa_find_matching_catch(-1, -1,0); var $222$1 = tempRet0;
 var $223=$222$0;
 ___clang_call_terminate($223);
 throw "Reached an unreachable!";
 case 66: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 STACKTOP=sp;return;
 case 67: 
 var $225$0 = ___cxa_find_matching_catch(-1, -1); var $225$1 = tempRet0;
 var $226=(($7+4)|0);
 var $227=$226;
 var $228=(tempValue=HEAP32[(($227)>>2)],HEAP32[(($227)>>2)]=tempValue+-1,tempValue);
 var $229=($228|0)==0;
 if($229){label=68;break;}else{label=69;break;}
 case 68: 
 var $231=$7;
 var $232=$7;
 var $233=HEAP32[(($232)>>2)];
 var $234=(($233+8)|0);
 var $235=HEAP32[(($234)>>2)];
 FUNCTION_TABLE[$235]($231);
 label=69;break;
 case 69: 
 var $_pre=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $236=($_pre|0)==0;
 if($236){label=72;break;}else{label=70;break;}
 case 70: 
 var $238=HEAP32[(($4)>>2)];
 var $239=$_pre;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$238]($239) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=71;break; }
 case 71: 
 var $241$0 = ___cxa_find_matching_catch(-1, -1,0); var $241$1 = tempRet0;
 var $242=$241$0;
 ___clang_call_terminate($242);
 throw "Reached an unreachable!";
 case 72: 
 ___resumeException($225$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__119__double_or_nothingIwEEvRNS_10unique_ptrIT_PFvPvEEERPS2_S9_($__b,$__n,$__e){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($__b+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)!=((538)|0);
 var $4=HEAP32[(($__e)>>2)];
 var $5=(($__b)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=$4;
 var $8=$6;
 var $9=((($7)-($8))|0);
 var $10=($9>>>0)<2147483647;
 var $11=$9<<1;
 var $_=($10?$11:-1);
 var $12=HEAP32[(($__n)>>2)];
 var $13=$12;
 var $14=((($13)-($8))|0);
 var $15=$14>>2;
 if($3){label=2;break;}else{var $18=0;label=3;break;}
 case 2: 
 var $phitmp=$6;
 var $18=$phitmp;label=3;break;
 case 3: 
 var $18;
 var $19=_realloc($18,$_);
 var $20=$19;
 var $21=($19|0)==0;
 if($21){label=4;break;}else{label=5;break;}
 case 4: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 HEAP32[(($24)>>2)]=5192;
 ___cxa_throw($23,11704,(78));
 throw "Reached an unreachable!";
 case 5: 
 if($3){label=6;break;}else{label=7;break;}
 case 6: 
 HEAP32[(($5)>>2)]=$20;
 var $34=$20;label=11;break;
 case 7: 
 var $_pr=HEAP32[(($5)>>2)];
 HEAP32[(($5)>>2)]=$20;
 var $27=($_pr|0)==0;
 if($27){var $34=$20;label=11;break;}else{label=8;break;}
 case 8: 
 var $29=HEAP32[(($1)>>2)];
 var $30=$_pr;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$29]($30) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=10;break; }
 case 9: 
 var $_pre=HEAP32[(($5)>>2)];
 var $34=$_pre;label=11;break;
 case 10: 
 var $32$0 = ___cxa_find_matching_catch(-1, -1,0); var $32$1 = tempRet0;
 var $33=$32$0;
 ___clang_call_terminate($33);
 throw "Reached an unreachable!";
 case 11: 
 var $34;
 HEAP32[(($1)>>2)]=282;
 var $35=$_>>>2;
 var $36=(($34+($15<<2))|0);
 HEAP32[(($__n)>>2)]=$36;
 var $37=HEAP32[(($5)>>2)];
 var $38=(($37+($35<<2))|0);
 HEAP32[(($__e)>>2)]=$38;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEce($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__pat=(sp)+(232);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$1;
 var $2=(($__digits)|0);
 var $$etemp$1$0=100;
 var $$etemp$1$1=0;

 var $3=_snprintf($1,100,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $4=($3>>>0)>99;
 if($4){label=2;break;}else{var $__db_0=$2;var $__n_0=$3;var $38=0;var $37=0;label=16;break;}
 case 2: 
 var $6=HEAP8[(19232)];
 var $7=(($6<<24)>>24)==0;
 if($7){label=3;break;}else{label=7;break;}
 case 3: 
 var $9=___cxa_guard_acquire(19232);
 var $10=($9|0)==0;
 if($10){label=7;break;}else{label=4;break;}
 case 4: 
 var $12=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$12;

 label=7;break;
 case 6: 
 var $15$0 = ___cxa_find_matching_catch(-1, -1); var $15$1 = tempRet0;

 var $eh_lpad_body$1=$15$1;var $eh_lpad_body$0=$15$0;var $28=0;label=12;break;
 case 7: 
 var $17=HEAP32[((17128)>>2)];
 var $18=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$17,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $26=0;label=11;break; }
 case 8: 
 var $20=HEAP32[(($__bb)>>2)];
 var $21=($20|0)==0;
 if($21){label=9;break;}else{label=13;break;}
 case 9: 
 var $23=___cxa_allocate_exception(4);
 var $24=$23;
 HEAP32[(($24)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($23,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $26=0;label=11;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $26;
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body$1=$27$1;var $eh_lpad_body$0=$27$0;var $28=$26;label=12;break;
 case 12: 
 var $28;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $29=$eh_lpad_body$0;
 var $30=$eh_lpad_body$1;
 var $253=$28;var $_2317=$30;var $_218=$29;label=83;break;
 case 13: 
 var $31=_malloc($18);
 var $32=($31|0)==0;
 if($32){label=14;break;}else{var $__db_0=$31;var $__n_0=$18;var $38=$31;var $37=$20;label=16;break;}
 case 14: 
 var $34=___cxa_allocate_exception(4);
 var $35=$34;
 HEAP32[(($35)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($34,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { var $26=$20;label=11;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $37;
 var $38;
 var $__n_0;
 var $__db_0;
 var $39=(($__iob+28)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=$40;
 var $42=(($40+4)|0);
 var $43=$42;
 var $44=(tempValue=HEAP32[(($43)>>2)],HEAP32[(($43)>>2)]=tempValue+1,tempValue);
 var $45=$__p_i_i_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $46=HEAP32[((18672)>>2)];
 var $47=($46|0)==-1;
 if($47){label=18;break;}else{label=17;break;}
 case 17: 
 var $49=(($__p_i_i_i_i)|0);
 HEAP32[(($49)>>2)]=18672;
 var $50=(($__p_i_i_i_i+4)|0);
 HEAP32[(($50)>>2)]=(202);
 var $51=(($__p_i_i_i_i+8)|0);
 HEAP32[(($51)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=46;break; }
 case 18: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $52=HEAP32[((18676)>>2)];
 var $53=((($52)-(1))|0);
 var $54=(($40+12)|0);
 var $55=$54;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($40+8)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $60=$56;
 var $61=$59;
 var $62=((($60)-($61))|0);
 var $63=$62>>2;
 var $64=($63>>>0)>($53>>>0);
 if($64){label=19;break;}else{label=20;break;}
 case 19: 
 var $65=(($59+($53<<2))|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=($66|0)==0;
 if($67){label=20;break;}else{label=22;break;}
 case 20: 
 var $68=___cxa_allocate_exception(4);
 var $69=$68;
 HEAP32[(($69)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($68,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=46;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $71=$66;
 var $72=HEAP32[(($__bb)>>2)];
 var $73=(($72+$__n_0)|0);
 var $74=$66;
 var $75=HEAP32[(($74)>>2)];
 var $76=(($75+32)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$77]($71,$72,$73,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=46;break; }
 case 23: 
 var $79=($__n_0|0)==0;
 if($79){var $85=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $81=HEAP32[(($__bb)>>2)];
 var $82=HEAP8[($81)];
 var $83=(($82<<24)>>24)==45;
 var $85=$83;label=25;break;
 case 25: 
 var $85;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sym;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 var $this2_i_i_i8=$__sn;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$85,$41,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=47;break; }
 case 26: 
 var $87=(($__mbuf)|0);
 var $$etemp$4$0=100;
 var $$etemp$4$1=0;

 var $88=HEAP32[(($__fd)>>2)];
 var $89=($__n_0|0)>($88|0);
 if($89){label=27;break;}else{label=34;break;}
 case 27: 
 var $91=((($__n_0)-($88))|0);
 var $92=$91<<1;
 var $93=HEAP8[($this2_i_i_i8)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=29;break;}else{label=28;break;}
 case 28: 
 var $97=(($__sn+4)|0);
 var $98=HEAP32[(($97)>>2)];
 var $102=$98;label=30;break;
 case 29: 
 var $100=($93&255);
 var $101=$100>>>1;
 var $102=$101;label=30;break;
 case 30: 
 var $102;
 var $103=HEAP8[($this2_i_i_i7)];
 var $104=$103&1;
 var $105=(($104<<24)>>24)==0;
 if($105){label=32;break;}else{label=31;break;}
 case 31: 
 var $107=(($__sym+4)|0);
 var $108=HEAP32[(($107)>>2)];
 var $112=$108;label=33;break;
 case 32: 
 var $110=($103&255);
 var $111=$110>>>1;
 var $112=$111;label=33;break;
 case 33: 
 var $112;
 var $113=$92|1;
 var $114=((($102)+($113))|0);
 var $115=((($114)+($112))|0);
 var $_pn=$115;label=41;break;
 case 34: 
 var $117=HEAP8[($this2_i_i_i8)];
 var $118=$117&1;
 var $119=(($118<<24)>>24)==0;
 if($119){label=36;break;}else{label=35;break;}
 case 35: 
 var $121=(($__sn+4)|0);
 var $122=HEAP32[(($121)>>2)];
 var $126=$122;label=37;break;
 case 36: 
 var $124=($117&255);
 var $125=$124>>>1;
 var $126=$125;label=37;break;
 case 37: 
 var $126;
 var $127=HEAP8[($this2_i_i_i7)];
 var $128=$127&1;
 var $129=(($128<<24)>>24)==0;
 if($129){label=39;break;}else{label=38;break;}
 case 38: 
 var $131=(($__sym+4)|0);
 var $132=HEAP32[(($131)>>2)];
 var $136=$132;label=40;break;
 case 39: 
 var $134=($127&255);
 var $135=$134>>>1;
 var $136=$135;label=40;break;
 case 40: 
 var $136;
 var $137=((($126)+(2))|0);
 var $138=((($137)+($136))|0);
 var $_pn=$138;label=41;break;
 case 41: 
 var $_pn;
 var $140=((($_pn)+($88))|0);
 var $141=($140>>>0)>100;
 if($141){label=42;break;}else{var $__mb_0=$87;var $165=0;label=50;break;}
 case 42: 
 var $142=_malloc($140);
 var $143=($142|0)==0;
 if($143){label=43;break;}else{var $__mb_0=$142;var $165=$142;label=50;break;}
 case 43: 
 var $145=___cxa_allocate_exception(4);
 var $146=$145;
 HEAP32[(($146)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($145,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=45;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $147$0 = ___cxa_find_matching_catch(-1, -1); var $147$1 = tempRet0;
 var $148=$147$0;
 var $149=$147$1;
 var $_0=$148;var $_01=$149;label=70;break;
 case 46: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $_1=$152;var $_12=$153;label=79;break;
 case 47: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1); var $155$1 = tempRet0;
 var $156=$155$0;
 var $157=$155$1;
 var $_0=$156;var $_01=$157;label=70;break;
 case 48: 
 var $159$0 = ___cxa_find_matching_catch(-1, -1); var $159$1 = tempRet0;
 var $160=$159$0;
 var $161=$159$1;
 var $162=($165|0)==0;
 if($162){var $_0=$160;var $_01=$161;label=70;break;}else{label=49;break;}
 case 49: 
 _free($165);
 var $_0=$160;var $_01=$161;label=70;break;
 case 50: 
 var $165;
 var $__mb_0;
 var $166=(($__iob+4)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($__db_0+$__n_0)|0);
 var $169=HEAP8[($__dp)];
 var $170=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$167,$__db_0,$168,$71,$85,$tmpcast,$169,$170,$__grp,$__sym,$__sn,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=48;break; }
 case 51: 
 var $172=(($__s)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=HEAP32[(($__mi)>>2)];
 var $175=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$173,$__mb_0,$174,$175,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=48;break; }
 case 52: 
 var $177=($165|0)==0;
 if($177){label=54;break;}else{label=53;break;}
 case 53: 
 _free($165);
 label=54;break;
 case 54: 
 var $$etemp$5$0=100;
 var $$etemp$5$1=0;

 var $179=HEAP8[($this2_i_i_i8)];
 var $180=$179&1;
 var $181=(($180<<24)>>24)==0;
 if($181){label=57;break;}else{label=55;break;}
 case 55: 
 var $183=(($__sn+8)|0);
 var $184=HEAP32[(($183)>>2)];
 var $185=($184|0)==0;
 if($185){label=57;break;}else{label=56;break;}
 case 56: 
 _free($184);
 label=57;break;
 case 57: 
 var $187=HEAP8[($this2_i_i_i7)];
 var $188=$187&1;
 var $189=(($188<<24)>>24)==0;
 if($189){label=60;break;}else{label=58;break;}
 case 58: 
 var $191=(($__sym+8)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)==0;
 if($193){label=60;break;}else{label=59;break;}
 case 59: 
 _free($192);
 label=60;break;
 case 60: 
 var $195=HEAP8[($this2_i_i_i)];
 var $196=$195&1;
 var $197=(($196<<24)>>24)==0;
 if($197){label=63;break;}else{label=61;break;}
 case 61: 
 var $199=(($__grp+8)|0);
 var $200=HEAP32[(($199)>>2)];
 var $201=($200|0)==0;
 if($201){label=63;break;}else{label=62;break;}
 case 62: 
 _free($200);
 label=63;break;
 case 63: 
 var $203=(($40+4)|0);
 var $204=$203;
 var $205=(tempValue=HEAP32[(($204)>>2)],HEAP32[(($204)>>2)]=tempValue+-1,tempValue);
 var $206=($205|0)==0;
 if($206){label=64;break;}else{label=65;break;}
 case 64: 
 var $208=$40;
 var $209=$40;
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+8)|0);
 var $212=HEAP32[(($211)>>2)];
 FUNCTION_TABLE[$212]($208);
 label=65;break;
 case 65: 
 var $213=($38|0)==0;
 if($213){label=67;break;}else{label=66;break;}
 case 66: 
 _free($38);
 label=67;break;
 case 67: 
 var $215=($37|0)==0;
 if($215){label=69;break;}else{label=68;break;}
 case 68: 
 _free($37);
 label=69;break;
 case 69: 
 var $$etemp$6$0=100;
 var $$etemp$6$1=0;

 var $$etemp$7$0=100;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
 case 70: 
 var $_01;
 var $_0;
 var $217=HEAP8[($this2_i_i_i8)];
 var $218=$217&1;
 var $219=(($218<<24)>>24)==0;
 if($219){label=73;break;}else{label=71;break;}
 case 71: 
 var $221=(($__sn+8)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($222|0)==0;
 if($223){label=73;break;}else{label=72;break;}
 case 72: 
 _free($222);
 label=73;break;
 case 73: 
 var $225=HEAP8[($this2_i_i_i7)];
 var $226=$225&1;
 var $227=(($226<<24)>>24)==0;
 if($227){label=76;break;}else{label=74;break;}
 case 74: 
 var $229=(($__sym+8)|0);
 var $230=HEAP32[(($229)>>2)];
 var $231=($230|0)==0;
 if($231){label=76;break;}else{label=75;break;}
 case 75: 
 _free($230);
 label=76;break;
 case 76: 
 var $233=HEAP8[($this2_i_i_i)];
 var $234=$233&1;
 var $235=(($234<<24)>>24)==0;
 if($235){var $_1=$_0;var $_12=$_01;label=79;break;}else{label=77;break;}
 case 77: 
 var $237=(($__grp+8)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){var $_1=$_0;var $_12=$_01;label=79;break;}else{label=78;break;}
 case 78: 
 _free($238);
 var $_1=$_0;var $_12=$_01;label=79;break;
 case 79: 
 var $_12;
 var $_1;
 var $241=(($40+4)|0);
 var $242=$241;
 var $243=(tempValue=HEAP32[(($242)>>2)],HEAP32[(($242)>>2)]=tempValue+-1,tempValue);
 var $244=($243|0)==0;
 if($244){label=80;break;}else{label=81;break;}
 case 80: 
 var $246=$40;
 var $247=$40;
 var $248=HEAP32[(($247)>>2)];
 var $249=(($248+8)|0);
 var $250=HEAP32[(($249)>>2)];
 FUNCTION_TABLE[$250]($246);
 label=81;break;
 case 81: 
 var $251=($38|0)==0;
 if($251){var $253=$37;var $_2317=$_12;var $_218=$_1;label=83;break;}else{label=82;break;}
 case 82: 
 _free($38);
 var $253=$37;var $_2317=$_12;var $_218=$_1;label=83;break;
 case 83: 
 var $_218;
 var $_2317;
 var $253;
 var $254=($253|0)==0;
 if($254){label=85;break;}else{label=84;break;}
 case 84: 
 _free($253);
 label=85;break;
 case 85: 
 var $256$0=$_218;
 var $256$1=0;
 var $257$0=$256$0;
 var $257$1=$_2317;
 ___resumeException($257$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$__neg,$__loc_0_0_val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i10=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $14=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $15=HEAP32[((19144)>>2)];
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__p_i_i_i_i)|0);
 HEAP32[(($18)>>2)]=19144;
 var $19=(($__p_i_i_i_i+4)|0);
 HEAP32[(($19)>>2)]=(202);
 var $20=(($__p_i_i_i_i+8)|0);
 HEAP32[(($20)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19144,$14);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $21=HEAP32[((19148)>>2)];
 var $22=((($21)-(1))|0);
 var $23=(($__loc_0_0_val+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($__loc_0_0_val+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$24;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($22>>>0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($26+($22<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5224;
 ___cxa_throw($35,11720,(658));
 throw "Reached an unreachable!";
 case 7: 
 var $37=$33;
 var $38=$33;
 var $39=HEAP32[(($38)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $41=(($39+44)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($tmpcast3,$37);
 var $43=$__pat;
 var $44=HEAP32[(($1)>>2)];
 tempBigInt=$44;HEAP8[($43)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($43)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($43)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($43)+(3))|0)]=tempBigInt&0xff;
 var $45=$33;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+32)|0);
 var $48=HEAP32[(($47)>>2)];
 FUNCTION_TABLE[$48]($2,$37);
 var $49=$__sn;
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=10;break;}else{label=9;break;}
 case 9: 
 var $54=(($__sn+8)|0);
 var $55=HEAP32[(($54)>>2)];
 HEAP8[($55)]=0;
 var $56=(($__sn+4)|0);
 HEAP32[(($56)>>2)]=0;
 label=11;break;
 case 10: 
 var $58=$__sn;
 var $59=(($58+1)|0);
 HEAP8[($59)]=0;
 HEAP8[($49)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $61$0 = ___cxa_find_matching_catch(-1, -1,0); var $61$1 = tempRet0;
 var $62=$61$0;
 ___clang_call_terminate($62);
 throw "Reached an unreachable!";
 case 13: 
 var $63=$2;
 assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($63)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($63)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($63)+(8))>>2)];
 HEAP32[(($63)>>2)]=0; HEAP32[((($63)+(4))>>2)]=0; HEAP32[((($63)+(8))>>2)]=0;
 label=20;break;
 case 14: 
 var $65=(($39+40)|0);
 var $66=HEAP32[(($65)>>2)];
 FUNCTION_TABLE[$66]($tmpcast2,$37);
 var $67=$__pat;
 var $68=HEAP32[(($3)>>2)];
 tempBigInt=$68;HEAP8[($67)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($67)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($67)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($67)+(3))|0)]=tempBigInt&0xff;
 var $69=$33;
 var $70=HEAP32[(($69)>>2)];
 var $71=(($70+28)|0);
 var $72=HEAP32[(($71)>>2)];
 FUNCTION_TABLE[$72]($4,$37);
 var $73=$__sn;
 var $74=HEAP8[($73)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=16;break;}else{label=15;break;}
 case 15: 
 var $78=(($__sn+8)|0);
 var $79=HEAP32[(($78)>>2)];
 HEAP8[($79)]=0;
 var $80=(($__sn+4)|0);
 HEAP32[(($80)>>2)]=0;
 label=17;break;
 case 16: 
 var $82=$__sn;
 var $83=(($82+1)|0);
 HEAP8[($83)]=0;
 HEAP8[($73)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;
 var $86=$85$0;
 ___clang_call_terminate($86);
 throw "Reached an unreachable!";
 case 19: 
 var $87=$4;
 assert(12 % 1 === 0);HEAP32[(($73)>>2)]=HEAP32[(($87)>>2)];HEAP32[((($73)+(4))>>2)]=HEAP32[((($87)+(4))>>2)];HEAP32[((($73)+(8))>>2)]=HEAP32[((($87)+(8))>>2)];
 HEAP32[(($87)>>2)]=0; HEAP32[((($87)+(4))>>2)]=0; HEAP32[((($87)+(8))>>2)]=0;
 label=20;break;
 case 20: 
 var $88=$33;
 var $89=HEAP32[(($88)>>2)];
 var $90=(($89+12)|0);
 var $91=HEAP32[(($90)>>2)];
 var $92=FUNCTION_TABLE[$91]($37);
 HEAP8[($__dp)]=$92;
 var $93=HEAP32[(($88)>>2)];
 var $94=(($93+16)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=FUNCTION_TABLE[$95]($37);
 HEAP8[($__ts)]=$96;
 var $97=$33;
 var $98=HEAP32[(($97)>>2)];
 var $99=(($98+20)|0);
 var $100=HEAP32[(($99)>>2)];
 FUNCTION_TABLE[$100]($5,$37);
 var $101=$__grp;
 var $102=HEAP8[($101)];
 var $103=$102&1;
 var $104=(($103<<24)>>24)==0;
 if($104){label=22;break;}else{label=21;break;}
 case 21: 
 var $106=(($__grp+8)|0);
 var $107=HEAP32[(($106)>>2)];
 HEAP8[($107)]=0;
 var $108=(($__grp+4)|0);
 HEAP32[(($108)>>2)]=0;
 label=23;break;
 case 22: 
 var $110=$__grp;
 var $111=(($110+1)|0);
 HEAP8[($111)]=0;
 HEAP8[($101)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $113$0 = ___cxa_find_matching_catch(-1, -1,0); var $113$1 = tempRet0;
 var $114=$113$0;
 ___clang_call_terminate($114);
 throw "Reached an unreachable!";
 case 25: 
 var $115=$5;
 assert(12 % 1 === 0);HEAP32[(($101)>>2)]=HEAP32[(($115)>>2)];HEAP32[((($101)+(4))>>2)]=HEAP32[((($115)+(4))>>2)];HEAP32[((($101)+(8))>>2)]=HEAP32[((($115)+(8))>>2)];
 HEAP32[(($115)>>2)]=0; HEAP32[((($115)+(4))>>2)]=0; HEAP32[((($115)+(8))>>2)]=0;
 var $116=HEAP32[(($97)>>2)];
 var $117=(($116+24)|0);
 var $118=HEAP32[(($117)>>2)];
 FUNCTION_TABLE[$118]($6,$37);
 var $119=$__sym;
 var $120=HEAP8[($119)];
 var $121=$120&1;
 var $122=(($121<<24)>>24)==0;
 if($122){label=27;break;}else{label=26;break;}
 case 26: 
 var $124=(($__sym+8)|0);
 var $125=HEAP32[(($124)>>2)];
 HEAP8[($125)]=0;
 var $126=(($__sym+4)|0);
 HEAP32[(($126)>>2)]=0;
 label=28;break;
 case 27: 
 var $128=$__sym;
 var $129=(($128+1)|0);
 HEAP8[($129)]=0;
 HEAP8[($119)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $131$0 = ___cxa_find_matching_catch(-1, -1,0); var $131$1 = tempRet0;
 var $132=$131$0;
 ___clang_call_terminate($132);
 throw "Reached an unreachable!";
 case 30: 
 var $133=$6;
 assert(12 % 1 === 0);HEAP32[(($119)>>2)]=HEAP32[(($133)>>2)];HEAP32[((($119)+(4))>>2)]=HEAP32[((($133)+(4))>>2)];HEAP32[((($119)+(8))>>2)]=HEAP32[((($133)+(8))>>2)];
 HEAP32[(($133)>>2)]=0; HEAP32[((($133)+(4))>>2)]=0; HEAP32[((($133)+(8))>>2)]=0;
 var $134=$33;
 var $135=HEAP32[(($134)>>2)];
 var $136=(($135+36)|0);
 var $137=HEAP32[(($136)>>2)];
 var $138=FUNCTION_TABLE[$137]($37);
 var $storemerge=$138;label=60;break;
 case 31: 
 var $140=$__p_i_i_i_i10;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $141=HEAP32[((19152)>>2)];
 var $142=($141|0)==-1;
 if($142){label=33;break;}else{label=32;break;}
 case 32: 
 var $144=(($__p_i_i_i_i10)|0);
 HEAP32[(($144)>>2)]=19152;
 var $145=(($__p_i_i_i_i10+4)|0);
 HEAP32[(($145)>>2)]=(202);
 var $146=(($__p_i_i_i_i10+8)|0);
 HEAP32[(($146)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19152,$140);
 label=33;break;
 case 33: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $147=HEAP32[((19156)>>2)];
 var $148=((($147)-(1))|0);
 var $149=(($__loc_0_0_val+12)|0);
 var $150=HEAP32[(($149)>>2)];
 var $151=(($__loc_0_0_val+8)|0);
 var $152=HEAP32[(($151)>>2)];
 var $153=$150;
 var $154=$152;
 var $155=((($153)-($154))|0);
 var $156=$155>>2;
 var $157=($156>>>0)>($148>>>0);
 if($157){label=34;break;}else{label=35;break;}
 case 34: 
 var $158=(($152+($148<<2))|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=($159|0)==0;
 if($160){label=35;break;}else{label=36;break;}
 case 35: 
 var $161=___cxa_allocate_exception(4);
 var $162=$161;
 HEAP32[(($162)>>2)]=5224;
 ___cxa_throw($161,11720,(658));
 throw "Reached an unreachable!";
 case 36: 
 var $163=$159;
 var $164=$159;
 var $165=HEAP32[(($164)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $167=(($165+44)|0);
 var $168=HEAP32[(($167)>>2)];
 FUNCTION_TABLE[$168]($tmpcast1,$163);
 var $169=$__pat;
 var $170=HEAP32[(($7)>>2)];
 tempBigInt=$170;HEAP8[($169)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($169)+(3))|0)]=tempBigInt&0xff;
 var $171=$159;
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+32)|0);
 var $174=HEAP32[(($173)>>2)];
 FUNCTION_TABLE[$174]($8,$163);
 var $175=$__sn;
 var $176=HEAP8[($175)];
 var $177=$176&1;
 var $178=(($177<<24)>>24)==0;
 if($178){label=39;break;}else{label=38;break;}
 case 38: 
 var $180=(($__sn+8)|0);
 var $181=HEAP32[(($180)>>2)];
 HEAP8[($181)]=0;
 var $182=(($__sn+4)|0);
 HEAP32[(($182)>>2)]=0;
 label=40;break;
 case 39: 
 var $184=$__sn;
 var $185=(($184+1)|0);
 HEAP8[($185)]=0;
 HEAP8[($175)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $187$0 = ___cxa_find_matching_catch(-1, -1,0); var $187$1 = tempRet0;
 var $188=$187$0;
 ___clang_call_terminate($188);
 throw "Reached an unreachable!";
 case 42: 
 var $189=$8;
 assert(12 % 1 === 0);HEAP32[(($175)>>2)]=HEAP32[(($189)>>2)];HEAP32[((($175)+(4))>>2)]=HEAP32[((($189)+(4))>>2)];HEAP32[((($175)+(8))>>2)]=HEAP32[((($189)+(8))>>2)];
 HEAP32[(($189)>>2)]=0; HEAP32[((($189)+(4))>>2)]=0; HEAP32[((($189)+(8))>>2)]=0;
 label=49;break;
 case 43: 
 var $191=(($165+40)|0);
 var $192=HEAP32[(($191)>>2)];
 FUNCTION_TABLE[$192]($tmpcast,$163);
 var $193=$__pat;
 var $194=HEAP32[(($9)>>2)];
 tempBigInt=$194;HEAP8[($193)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($193)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($193)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($193)+(3))|0)]=tempBigInt&0xff;
 var $195=$159;
 var $196=HEAP32[(($195)>>2)];
 var $197=(($196+28)|0);
 var $198=HEAP32[(($197)>>2)];
 FUNCTION_TABLE[$198]($10,$163);
 var $199=$__sn;
 var $200=HEAP8[($199)];
 var $201=$200&1;
 var $202=(($201<<24)>>24)==0;
 if($202){label=45;break;}else{label=44;break;}
 case 44: 
 var $204=(($__sn+8)|0);
 var $205=HEAP32[(($204)>>2)];
 HEAP8[($205)]=0;
 var $206=(($__sn+4)|0);
 HEAP32[(($206)>>2)]=0;
 label=46;break;
 case 45: 
 var $208=$__sn;
 var $209=(($208+1)|0);
 HEAP8[($209)]=0;
 HEAP8[($199)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $211$0 = ___cxa_find_matching_catch(-1, -1,0); var $211$1 = tempRet0;
 var $212=$211$0;
 ___clang_call_terminate($212);
 throw "Reached an unreachable!";
 case 48: 
 var $213=$10;
 assert(12 % 1 === 0);HEAP32[(($199)>>2)]=HEAP32[(($213)>>2)];HEAP32[((($199)+(4))>>2)]=HEAP32[((($213)+(4))>>2)];HEAP32[((($199)+(8))>>2)]=HEAP32[((($213)+(8))>>2)];
 HEAP32[(($213)>>2)]=0; HEAP32[((($213)+(4))>>2)]=0; HEAP32[((($213)+(8))>>2)]=0;
 label=49;break;
 case 49: 
 var $214=$159;
 var $215=HEAP32[(($214)>>2)];
 var $216=(($215+12)|0);
 var $217=HEAP32[(($216)>>2)];
 var $218=FUNCTION_TABLE[$217]($163);
 HEAP8[($__dp)]=$218;
 var $219=HEAP32[(($214)>>2)];
 var $220=(($219+16)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=FUNCTION_TABLE[$221]($163);
 HEAP8[($__ts)]=$222;
 var $223=$159;
 var $224=HEAP32[(($223)>>2)];
 var $225=(($224+20)|0);
 var $226=HEAP32[(($225)>>2)];
 FUNCTION_TABLE[$226]($11,$163);
 var $227=$__grp;
 var $228=HEAP8[($227)];
 var $229=$228&1;
 var $230=(($229<<24)>>24)==0;
 if($230){label=51;break;}else{label=50;break;}
 case 50: 
 var $232=(($__grp+8)|0);
 var $233=HEAP32[(($232)>>2)];
 HEAP8[($233)]=0;
 var $234=(($__grp+4)|0);
 HEAP32[(($234)>>2)]=0;
 label=52;break;
 case 51: 
 var $236=$__grp;
 var $237=(($236+1)|0);
 HEAP8[($237)]=0;
 HEAP8[($227)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $239$0 = ___cxa_find_matching_catch(-1, -1,0); var $239$1 = tempRet0;
 var $240=$239$0;
 ___clang_call_terminate($240);
 throw "Reached an unreachable!";
 case 54: 
 var $241=$11;
 assert(12 % 1 === 0);HEAP32[(($227)>>2)]=HEAP32[(($241)>>2)];HEAP32[((($227)+(4))>>2)]=HEAP32[((($241)+(4))>>2)];HEAP32[((($227)+(8))>>2)]=HEAP32[((($241)+(8))>>2)];
 HEAP32[(($241)>>2)]=0; HEAP32[((($241)+(4))>>2)]=0; HEAP32[((($241)+(8))>>2)]=0;
 var $242=HEAP32[(($223)>>2)];
 var $243=(($242+24)|0);
 var $244=HEAP32[(($243)>>2)];
 FUNCTION_TABLE[$244]($12,$163);
 var $245=$__sym;
 var $246=HEAP8[($245)];
 var $247=$246&1;
 var $248=(($247<<24)>>24)==0;
 if($248){label=56;break;}else{label=55;break;}
 case 55: 
 var $250=(($__sym+8)|0);
 var $251=HEAP32[(($250)>>2)];
 HEAP8[($251)]=0;
 var $252=(($__sym+4)|0);
 HEAP32[(($252)>>2)]=0;
 label=57;break;
 case 56: 
 var $254=$__sym;
 var $255=(($254+1)|0);
 HEAP8[($255)]=0;
 HEAP8[($245)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $257$0 = ___cxa_find_matching_catch(-1, -1,0); var $257$1 = tempRet0;
 var $258=$257$0;
 ___clang_call_terminate($258);
 throw "Reached an unreachable!";
 case 59: 
 var $259=$12;
 assert(12 % 1 === 0);HEAP32[(($245)>>2)]=HEAP32[(($259)>>2)];HEAP32[((($245)+(4))>>2)]=HEAP32[((($259)+(4))>>2)];HEAP32[((($245)+(8))>>2)]=HEAP32[((($259)+(8))>>2)];
 HEAP32[(($259)>>2)]=0; HEAP32[((($259)+(4))>>2)]=0; HEAP32[((($259)+(8))>>2)]=0;
 var $260=$159;
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+36)|0);
 var $263=HEAP32[(($262)>>2)];
 var $264=FUNCTION_TABLE[$263]($163);
 var $storemerge=$264;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=$__sn;
 var $4=(($3+1)|0);
 var $5=(($__sn+8)|0);
 var $6=(($__sn+4)|0);
 var $7=$__sym;
 var $8=$__flags&512;
 var $9=($8|0)==0;
 var $10=$__sym;
 var $11=(($10+1)|0);
 var $12=(($__sym+8)|0);
 var $13=(($__sym+4)|0);
 var $14=($__fd|0)>0;
 var $15=$__grp;
 var $16=$__grp;
 var $17=(($16+1)|0);
 var $18=(($__grp+8)|0);
 var $19=(($__grp+4)|0);
 var $20=(($__ct+8)|0);
 var $21=(((-$__fd))|0);
 var $__p_049=0;var $_050=$__db;label=2;break;
 case 2: 
 var $_050;
 var $__p_049;
 var $23=(($__pat+$__p_049)|0);
 var $24=HEAP8[($23)];
 var $25=(($24<<24)>>24);
 switch(($25|0)){case 2:{ label=12;break;}case 4:{ label=22;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_050;label=60;break;}}break;
 case 3: 
 var $27=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$27;
 var $_2=$_050;label=60;break;
 case 4: 
 var $29=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$29;
 var $30=HEAP32[(($1)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=FUNCTION_TABLE[$32]($__ct,32);
 var $34=HEAP32[(($__me)>>2)];
 var $35=(($34+1)|0);
 HEAP32[(($__me)>>2)]=$35;
 HEAP8[($34)]=$33;
 var $_2=$_050;label=60;break;
 case 5: 
 var $37=HEAP8[($2)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=7;break;}else{label=6;break;}
 case 6: 
 var $41=HEAP32[(($6)>>2)];
 var $45=$41;label=8;break;
 case 7: 
 var $43=($37&255);
 var $44=$43>>>1;
 var $45=$44;label=8;break;
 case 8: 
 var $45;
 var $46=($45|0)==0;
 if($46){var $_2=$_050;label=60;break;}else{label=9;break;}
 case 9: 
 if($39){var $50=$4;label=11;break;}else{label=10;break;}
 case 10: 
 var $49=HEAP32[(($5)>>2)];
 var $50=$49;label=11;break;
 case 11: 
 var $50;
 var $51=HEAP8[($50)];
 var $52=HEAP32[(($__me)>>2)];
 var $53=(($52+1)|0);
 HEAP32[(($__me)>>2)]=$53;
 HEAP8[($52)]=$51;
 var $_2=$_050;label=60;break;
 case 12: 
 var $55=HEAP8[($7)];
 var $56=$55&1;
 var $57=(($56<<24)>>24)==0;
 if($57){label=14;break;}else{label=13;break;}
 case 13: 
 var $59=HEAP32[(($13)>>2)];
 var $63=$59;label=15;break;
 case 14: 
 var $61=($55&255);
 var $62=$61>>>1;
 var $63=$62;label=15;break;
 case 15: 
 var $63;
 var $64=($63|0)==0;
 var $brmerge=$64|$9;
 if($brmerge){var $_2=$_050;label=60;break;}else{label=16;break;}
 case 16: 
 if($57){label=18;break;}else{label=17;break;}
 case 17: 
 var $67=HEAP32[(($12)>>2)];
 var $68=HEAP32[(($13)>>2)];
 var $73=$68;var $72=$67;label=19;break;
 case 18: 
 var $70=($55&255);
 var $71=$70>>>1;
 var $73=$71;var $72=$11;label=19;break;
 case 19: 
 var $72;
 var $73;
 var $74=(($72+$73)|0);
 var $75=HEAP32[(($__me)>>2)];
 var $76=($72|0)==($74|0);
 if($76){var $_0_lcssa_i_i17=$75;label=21;break;}else{var $_01_i_i15=$75;var $77=$72;label=20;break;}
 case 20: 
 var $77;
 var $_01_i_i15;
 var $78=HEAP8[($77)];
 HEAP8[($_01_i_i15)]=$78;
 var $79=(($77+1)|0);
 var $80=(($_01_i_i15+1)|0);
 var $81=($79|0)==($74|0);
 if($81){var $_0_lcssa_i_i17=$80;label=21;break;}else{var $_01_i_i15=$80;var $77=$79;label=20;break;}
 case 21: 
 var $_0_lcssa_i_i17;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i17;
 var $_2=$_050;label=60;break;
 case 22: 
 var $83=HEAP32[(($__me)>>2)];
 var $84=(($_050+1)|0);
 var $__0=($__neg?$84:$_050);
 var $85=($__0>>>0)<($__de>>>0);
 if($85){var $__d_029=$__0;label=24;break;}else{var $__d_0_lcssa=$__0;label=26;break;}
 case 23: 
 var $87=($95>>>0)<($__de>>>0);
 if($87){var $__d_029=$95;label=24;break;}else{var $__d_0_lcssa=$95;label=26;break;}
 case 24: 
 var $__d_029;
 var $88=HEAP8[($__d_029)];
 var $isascii1_i=(($88<<24)>>24)>-1;
 if($isascii1_i){label=25;break;}else{var $__d_0_lcssa=$__d_029;label=26;break;}
 case 25: 
 var $89=(($88<<24)>>24);
 var $90=HEAP32[(($20)>>2)];
 var $91=(($90+($89<<1))|0);
 var $92=HEAP16[(($91)>>1)];
 var $93=$92&2048;
 var $94=(($93<<16)>>16)==0;
 var $95=(($__d_029+1)|0);
 if($94){var $__d_0_lcssa=$__d_029;label=26;break;}else{label=23;break;}
 case 26: 
 var $__d_0_lcssa;
 var $__d_0_lcssa58=$__d_0_lcssa;
 if($14){label=27;break;}else{var $__d_2=$__d_0_lcssa;label=36;break;}
 case 27: 
 var $96=($__d_0_lcssa>>>0)>($__0>>>0);
 if($96){label=28;break;}else{var $__f_0_lcssa72=$__fd;var $__d_1_lcssa74=$__d_0_lcssa;label=32;break;}
 case 28: 
 var $97=(((-$__d_0_lcssa58))|0);
 var $scevgep=(($__0+$97)|0);
 var $scevgep59=$scevgep;
 var $98=($scevgep59>>>0)<($21>>>0);
 var $umax=($98?$21:$scevgep59);
 var $umax60=$umax;
 var $scevgep61=(($umax60+$__fd)|0);
 var $scevgep6162=$scevgep61;
 var $__d_132=$__d_0_lcssa;var $__f_033=$__fd;var $100=$83;label=29;break;
 case 29: 
 var $100;
 var $__f_033;
 var $__d_132;
 var $101=((($__d_132)-(1))|0);
 var $102=HEAP8[($101)];
 var $103=(($100+1)|0);
 HEAP32[(($__me)>>2)]=$103;
 HEAP8[($100)]=$102;
 var $104=((($__f_033)-(1))|0);
 var $105=($101>>>0)>($__0>>>0);
 var $106=($104|0)>0;
 var $or_cond=$105&$106;
 if($or_cond){label=30;break;}else{label=31;break;}
 case 30: 
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_132=$101;var $__f_033=$104;var $100=$_pre;label=29;break;
 case 31: 
 var $scevgep63=(($__d_0_lcssa+$umax)|0);
 if($106){var $__f_0_lcssa72=$scevgep6162;var $__d_1_lcssa74=$scevgep63;label=32;break;}else{var $111=0;var $__f_0_lcssa71=$scevgep6162;var $__d_1_lcssa73=$scevgep63;label=33;break;}
 case 32: 
 var $__d_1_lcssa74;
 var $__f_0_lcssa72;
 var $107=HEAP32[(($1)>>2)];
 var $108=(($107+28)|0);
 var $109=HEAP32[(($108)>>2)];
 var $110=FUNCTION_TABLE[$109]($__ct,48);
 var $111=$110;var $__f_0_lcssa71=$__f_0_lcssa72;var $__d_1_lcssa73=$__d_1_lcssa74;label=33;break;
 case 33: 
 var $__d_1_lcssa73;
 var $__f_0_lcssa71;
 var $111;
 var $112=($__f_0_lcssa71|0)>0;
 var $113=HEAP32[(($__me)>>2)];
 var $114=(($113+1)|0);
 HEAP32[(($__me)>>2)]=$114;
 if($112){var $__f_139=$__f_0_lcssa71;var $115=$113;label=34;break;}else{var $_lcssa38=$113;label=35;break;}
 case 34: 
 var $115;
 var $__f_139;
 HEAP8[($115)]=$111;
 var $116=((($__f_139)-(1))|0);
 var $117=($116|0)>0;
 var $118=HEAP32[(($__me)>>2)];
 var $119=(($118+1)|0);
 HEAP32[(($__me)>>2)]=$119;
 if($117){var $__f_139=$116;var $115=$118;label=34;break;}else{var $_lcssa38=$118;label=35;break;}
 case 35: 
 var $_lcssa38;
 HEAP8[($_lcssa38)]=$__dp;
 var $__d_2=$__d_1_lcssa73;label=36;break;
 case 36: 
 var $__d_2;
 var $121=($__d_2|0)==($__0|0);
 if($121){label=37;break;}else{label=38;break;}
 case 37: 
 var $123=HEAP32[(($1)>>2)];
 var $124=(($123+28)|0);
 var $125=HEAP32[(($124)>>2)];
 var $126=FUNCTION_TABLE[$125]($__ct,48);
 var $127=HEAP32[(($__me)>>2)];
 var $128=(($127+1)|0);
 HEAP32[(($__me)>>2)]=$128;
 HEAP8[($127)]=$126;
 label=57;break;
 case 38: 
 var $130=HEAP8[($15)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=40;break;}else{label=39;break;}
 case 39: 
 var $134=HEAP32[(($19)>>2)];
 var $138=$134;label=41;break;
 case 40: 
 var $136=($130&255);
 var $137=$136>>>1;
 var $138=$137;label=41;break;
 case 41: 
 var $138;
 var $139=($138|0)==0;
 if($139){var $__d_343=$__d_2;var $__ng_044=0;var $__ig_045=0;var $__gl_046=-1;label=45;break;}else{label=42;break;}
 case 42: 
 if($132){var $143=$17;label=44;break;}else{label=43;break;}
 case 43: 
 var $142=HEAP32[(($18)>>2)];
 var $143=$142;label=44;break;
 case 44: 
 var $143;
 var $144=HEAP8[($143)];
 var $145=(($144<<24)>>24);
 var $__d_343=$__d_2;var $__ng_044=0;var $__ig_045=0;var $__gl_046=$145;label=45;break;
 case 45: 
 var $__gl_046;
 var $__ig_045;
 var $__ng_044;
 var $__d_343;
 var $146=($__ng_044|0)==($__gl_046|0);
 if($146){label=46;break;}else{var $__gl_1=$__gl_046;var $__ig_1=$__ig_045;var $__ng_1=$__ng_044;label=56;break;}
 case 46: 
 var $148=HEAP32[(($__me)>>2)];
 var $149=(($148+1)|0);
 HEAP32[(($__me)>>2)]=$149;
 HEAP8[($148)]=$__ts;
 var $150=((($__ig_045)+(1))|0);
 var $151=HEAP8[($15)];
 var $152=$151&1;
 var $153=(($152<<24)>>24)==0;
 if($153){label=48;break;}else{label=47;break;}
 case 47: 
 var $155=HEAP32[(($19)>>2)];
 var $159=$155;label=49;break;
 case 48: 
 var $157=($151&255);
 var $158=$157>>>1;
 var $159=$158;label=49;break;
 case 49: 
 var $159;
 var $160=($150>>>0)<($159>>>0);
 if($160){label=50;break;}else{var $__gl_1=$__gl_046;var $__ig_1=$150;var $__ng_1=0;label=56;break;}
 case 50: 
 if($153){var $164=$17;label=52;break;}else{label=51;break;}
 case 51: 
 var $163=HEAP32[(($18)>>2)];
 var $164=$163;label=52;break;
 case 52: 
 var $164;
 var $165=(($164+$150)|0);
 var $166=HEAP8[($165)];
 var $167=(($166<<24)>>24)==127;
 if($167){var $__gl_1=-1;var $__ig_1=$150;var $__ng_1=0;label=56;break;}else{label=53;break;}
 case 53: 
 if($153){var $171=$17;label=55;break;}else{label=54;break;}
 case 54: 
 var $170=HEAP32[(($18)>>2)];
 var $171=$170;label=55;break;
 case 55: 
 var $171;
 var $172=(($171+$150)|0);
 var $173=HEAP8[($172)];
 var $174=(($173<<24)>>24);
 var $__gl_1=$174;var $__ig_1=$150;var $__ng_1=0;label=56;break;
 case 56: 
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $175=((($__d_343)-(1))|0);
 var $176=HEAP8[($175)];
 var $177=HEAP32[(($__me)>>2)];
 var $178=(($177+1)|0);
 HEAP32[(($__me)>>2)]=$178;
 HEAP8[($177)]=$176;
 var $179=((($__ng_1)+(1))|0);
 var $180=($175|0)==($__0|0);
 if($180){label=57;break;}else{var $__d_343=$175;var $__ng_044=$179;var $__ig_045=$__ig_1;var $__gl_046=$__gl_1;label=45;break;}
 case 57: 
 var $181=HEAP32[(($__me)>>2)];
 var $182=($83|0)==($181|0);
 if($182){var $_2=$__0;label=60;break;}else{label=58;break;}
 case 58: 
 var $183=((($181)-(1))|0);
 var $184=($183>>>0)>($83>>>0);
 if($184){var $_012_i_i=$83;var $185=$183;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 59: 
 var $185;
 var $_012_i_i;
 var $186=HEAP8[($_012_i_i)];
 var $187=HEAP8[($185)];
 HEAP8[($_012_i_i)]=$187;
 HEAP8[($185)]=$186;
 var $188=(($_012_i_i+1)|0);
 var $189=((($185)-(1))|0);
 var $190=($188>>>0)<($189>>>0);
 if($190){var $_012_i_i=$188;var $185=$189;label=59;break;}else{var $_2=$__0;label=60;break;}
 case 60: 
 var $_2;
 var $191=((($__p_049)+(1))|0);
 var $192=($191>>>0)<4;
 if($192){var $__p_049=$191;var $_050=$_2;label=2;break;}else{label=61;break;}
 case 61: 
 var $194=HEAP8[($2)];
 var $195=$194&1;
 var $196=(($195<<24)>>24)==0;
 if($196){label=63;break;}else{label=62;break;}
 case 62: 
 var $198=HEAP32[(($6)>>2)];
 var $202=$198;label=64;break;
 case 63: 
 var $200=($194&255);
 var $201=$200>>>1;
 var $202=$201;label=64;break;
 case 64: 
 var $202;
 var $203=($202>>>0)>1;
 if($203){label=65;break;}else{label=71;break;}
 case 65: 
 if($196){label=67;break;}else{label=66;break;}
 case 66: 
 var $206=HEAP32[(($5)>>2)];
 var $207=HEAP32[(($6)>>2)];
 var $211=$207;var $_pn=$206;label=68;break;
 case 67: 
 var $209=($194&255);
 var $210=$209>>>1;
 var $211=$210;var $_pn=$4;label=68;break;
 case 68: 
 var $_pn;
 var $211;
 var $212=(($_pn+1)|0);
 var $213=(($_pn+$211)|0);
 var $214=HEAP32[(($__me)>>2)];
 var $215=($212|0)==($213|0);
 if($215){var $_0_lcssa_i_i=$214;label=70;break;}else{var $_01_i_i=$214;var $216=$212;label=69;break;}
 case 69: 
 var $216;
 var $_01_i_i;
 var $217=HEAP8[($216)];
 HEAP8[($_01_i_i)]=$217;
 var $218=(($216+1)|0);
 var $219=(($_01_i_i+1)|0);
 var $220=($218|0)==($213|0);
 if($220){var $_0_lcssa_i_i=$219;label=70;break;}else{var $_01_i_i=$219;var $216=$218;label=69;break;}
 case 70: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=71;break;
 case 71: 
 var $222=$__flags&176;
 if(($222|0)==32){ label=72;break;}else if(($222|0)==16){ label=74;break;}else{label=73;break;}
 case 72: 
 var $224=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$224;
 label=74;break;
 case 73: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=74;break;
 case 74: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIcNS_19ostreambuf_iteratorIcNS_11char_traitsIcEEEEE6do_putES4_bRNS_8ios_baseEcRKNS_12basic_stringIcS3_NS_9allocatorIcEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__pat=(sp)+(16);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 1)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 100)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($2+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((18672)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=18672;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(202);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=HEAP32[((18676)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($2+12)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($2+8)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$18;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($15>>>0);
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=(($21+($15<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 HEAP32[(($31)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$28;
 var $34=$__digits;
 var $35=HEAP8[($34)];
 var $36=$35&1;
 var $37=(($36<<24)>>24)==0;
 if($37){label=9;break;}else{label=8;break;}
 case 8: 
 var $39=(($__digits+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $44=$40;label=10;break;
 case 9: 
 var $42=($35&255);
 var $43=$42>>>1;
 var $44=$43;label=10;break;
 case 10: 
 var $44;
 var $45=($44|0)==0;
 if($45){var $62=0;label=16;break;}else{label=11;break;}
 case 11: 
 if($37){label=13;break;}else{label=12;break;}
 case 12: 
 var $48=(($__digits+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $53=$49;label=14;break;
 case 13: 
 var $51=$__digits;
 var $52=(($51+1)|0);
 var $53=$52;label=14;break;
 case 14: 
 var $53;
 var $54=HEAP8[($53)];
 var $55=$28;
 var $56=HEAP32[(($55)>>2)];
 var $57=(($56+28)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$58]($33,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $60=(($54<<24)>>24)==(($59<<24)>>24);
 var $62=$60;label=16;break;
 case 16: 
 var $62;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sym;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sn;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERcS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESF_SF_Ri($__intl,$62,$3,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $64=(($__mbuf)|0);
 var $$etemp$2$0=100;
 var $$etemp$2$1=0;

 var $65=HEAP8[($34)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=19;break;}else{label=18;break;}
 case 18: 
 var $69=(($__digits+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $74=$70;label=20;break;
 case 19: 
 var $72=($65&255);
 var $73=$72>>>1;
 var $74=$73;label=20;break;
 case 20: 
 var $74;
 var $75=HEAP32[(($__fd)>>2)];
 var $76=($74|0)>($75|0);
 if($76){label=21;break;}else{label=31;break;}
 case 21: 
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=(($__digits+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $84=$80;label=24;break;
 case 23: 
 var $82=($65&255);
 var $83=$82>>>1;
 var $84=$83;label=24;break;
 case 24: 
 var $84;
 var $85=((($84)-($75))|0);
 var $86=$85<<1;
 var $87=HEAP8[($this2_i_i_i6)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=26;break;}else{label=25;break;}
 case 25: 
 var $91=(($__sn+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $96=$92;label=27;break;
 case 26: 
 var $94=($87&255);
 var $95=$94>>>1;
 var $96=$95;label=27;break;
 case 27: 
 var $96;
 var $97=HEAP8[($this2_i_i_i5)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=28;break;}
 case 28: 
 var $101=(($__sym+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $106=$102;label=30;break;
 case 29: 
 var $104=($97&255);
 var $105=$104>>>1;
 var $106=$105;label=30;break;
 case 30: 
 var $106;
 var $107=$86|1;
 var $108=((($96)+($107))|0);
 var $109=((($108)+($106))|0);
 var $_pn=$109;label=38;break;
 case 31: 
 var $111=HEAP8[($this2_i_i_i6)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=33;break;}else{label=32;break;}
 case 32: 
 var $115=(($__sn+4)|0);
 var $116=HEAP32[(($115)>>2)];
 var $120=$116;label=34;break;
 case 33: 
 var $118=($111&255);
 var $119=$118>>>1;
 var $120=$119;label=34;break;
 case 34: 
 var $120;
 var $121=HEAP8[($this2_i_i_i5)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=36;break;}else{label=35;break;}
 case 35: 
 var $125=(($__sym+4)|0);
 var $126=HEAP32[(($125)>>2)];
 var $130=$126;label=37;break;
 case 36: 
 var $128=($121&255);
 var $129=$128>>>1;
 var $130=$129;label=37;break;
 case 37: 
 var $130;
 var $131=((($120)+(2))|0);
 var $132=((($131)+($130))|0);
 var $_pn=$132;label=38;break;
 case 38: 
 var $_pn;
 var $134=((($_pn)+($75))|0);
 var $135=($134>>>0)>100;
 if($135){label=39;break;}else{var $__mb_0=$64;var $159=0;label=47;break;}
 case 39: 
 var $136=_malloc($134);
 var $137=($136|0)==0;
 if($137){label=40;break;}else{var $__mb_0=$136;var $159=$136;label=47;break;}
 case 40: 
 var $139=___cxa_allocate_exception(4);
 var $140=$139;
 HEAP32[(($140)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($139,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $141$0 = ___cxa_find_matching_catch(-1, -1); var $141$1 = tempRet0;
 var $142=$141$0;
 var $143=$141$1;
 var $_0=$142;var $_01=$143;label=66;break;
 case 43: 
 var $145$0 = ___cxa_find_matching_catch(-1, -1); var $145$1 = tempRet0;
 var $146=$145$0;
 var $147=$145$1;
 var $_1=$146;var $_12=$147;label=75;break;
 case 44: 
 var $149$0 = ___cxa_find_matching_catch(-1, -1); var $149$1 = tempRet0;
 var $150=$149$0;
 var $151=$149$1;
 var $_0=$150;var $_01=$151;label=66;break;
 case 45: 
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $154=$153$0;
 var $155=$153$1;
 var $156=($159|0)==0;
 if($156){var $_0=$154;var $_01=$155;label=66;break;}else{label=46;break;}
 case 46: 
 _free($159);
 var $_0=$154;var $_01=$155;label=66;break;
 case 47: 
 var $159;
 var $__mb_0;
 var $160=(($__iob+4)|0);
 var $161=HEAP32[(($160)>>2)];
 if($67){label=49;break;}else{label=48;break;}
 case 48: 
 var $163=(($__digits+8)|0);
 var $164=HEAP32[(($163)>>2)];
 var $165=(($__digits+4)|0);
 var $166=HEAP32[(($165)>>2)];
 var $173=$166;var $172=$164;label=50;break;
 case 49: 
 var $168=$__digits;
 var $169=(($168+1)|0);
 var $170=($65&255);
 var $171=$170>>>1;
 var $173=$171;var $172=$169;label=50;break;
 case 50: 
 var $172;
 var $173;
 var $174=(($172+$173)|0);
 var $175=HEAP8[($__dp)];
 var $176=HEAP8[($__ts)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIcE8__formatEPcRS2_S3_jPKcS5_RKNS_5ctypeIcEEbRKNS_10money_base7patternEccRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEESL_SL_i($__mb_0,$__mi,$__me,$161,$172,$174,$33,$62,$tmpcast,$175,$176,$__grp,$__sym,$__sn,$75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=45;break; }
 case 51: 
 var $178=(($__s)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=HEAP32[(($__mi)>>2)];
 var $181=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIcNS_11char_traitsIcEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$179,$__mb_0,$180,$181,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=45;break; }
 case 52: 
 var $183=($159|0)==0;
 if($183){label=54;break;}else{label=53;break;}
 case 53: 
 _free($159);
 label=54;break;
 case 54: 
 var $$etemp$3$0=100;
 var $$etemp$3$1=0;

 var $185=HEAP8[($this2_i_i_i6)];
 var $186=$185&1;
 var $187=(($186<<24)>>24)==0;
 if($187){label=57;break;}else{label=55;break;}
 case 55: 
 var $189=(($__sn+8)|0);
 var $190=HEAP32[(($189)>>2)];
 var $191=($190|0)==0;
 if($191){label=57;break;}else{label=56;break;}
 case 56: 
 _free($190);
 label=57;break;
 case 57: 
 var $193=HEAP8[($this2_i_i_i5)];
 var $194=$193&1;
 var $195=(($194<<24)>>24)==0;
 if($195){label=60;break;}else{label=58;break;}
 case 58: 
 var $197=(($__sym+8)|0);
 var $198=HEAP32[(($197)>>2)];
 var $199=($198|0)==0;
 if($199){label=60;break;}else{label=59;break;}
 case 59: 
 _free($198);
 label=60;break;
 case 60: 
 var $201=HEAP8[($this2_i_i_i)];
 var $202=$201&1;
 var $203=(($202<<24)>>24)==0;
 if($203){label=63;break;}else{label=61;break;}
 case 61: 
 var $205=(($__grp+8)|0);
 var $206=HEAP32[(($205)>>2)];
 var $207=($206|0)==0;
 if($207){label=63;break;}else{label=62;break;}
 case 62: 
 _free($206);
 label=63;break;
 case 63: 
 var $209=(($2+4)|0);
 var $210=$209;
 var $211=(tempValue=HEAP32[(($210)>>2)],HEAP32[(($210)>>2)]=tempValue+-1,tempValue);
 var $212=($211|0)==0;
 if($212){label=64;break;}else{label=65;break;}
 case 64: 
 var $214=$2;
 var $215=$2;
 var $216=HEAP32[(($215)>>2)];
 var $217=(($216+8)|0);
 var $218=HEAP32[(($217)>>2)];
 FUNCTION_TABLE[$218]($214);
 label=65;break;
 case 65: 
 STACKTOP=sp;return;
 case 66: 
 var $_01;
 var $_0;
 var $219=HEAP8[($this2_i_i_i6)];
 var $220=$219&1;
 var $221=(($220<<24)>>24)==0;
 if($221){label=69;break;}else{label=67;break;}
 case 67: 
 var $223=(($__sn+8)|0);
 var $224=HEAP32[(($223)>>2)];
 var $225=($224|0)==0;
 if($225){label=69;break;}else{label=68;break;}
 case 68: 
 _free($224);
 label=69;break;
 case 69: 
 var $227=HEAP8[($this2_i_i_i5)];
 var $228=$227&1;
 var $229=(($228<<24)>>24)==0;
 if($229){label=72;break;}else{label=70;break;}
 case 70: 
 var $231=(($__sym+8)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=72;break;}else{label=71;break;}
 case 71: 
 _free($232);
 label=72;break;
 case 72: 
 var $235=HEAP8[($this2_i_i_i)];
 var $236=$235&1;
 var $237=(($236<<24)>>24)==0;
 if($237){var $_1=$_0;var $_12=$_01;label=75;break;}else{label=73;break;}
 case 73: 
 var $239=(($__grp+8)|0);
 var $240=HEAP32[(($239)>>2)];
 var $241=($240|0)==0;
 if($241){var $_1=$_0;var $_12=$_01;label=75;break;}else{label=74;break;}
 case 74: 
 _free($240);
 var $_1=$_0;var $_12=$_01;label=75;break;
 case 75: 
 var $_12;
 var $_1;
 var $243=(($2+4)|0);
 var $244=$243;
 var $245=(tempValue=HEAP32[(($244)>>2)],HEAP32[(($244)>>2)]=tempValue+-1,tempValue);
 var $246=($245|0)==0;
 if($246){label=76;break;}else{label=77;break;}
 case 76: 
 var $248=$2;
 var $249=$2;
 var $250=HEAP32[(($249)>>2)];
 var $251=(($250+8)|0);
 var $252=HEAP32[(($251)>>2)];
 FUNCTION_TABLE[$252]($248);
 label=77;break;
 case 77: 
 var $253$0=$_1;
 var $253$1=0;
 var $254$0=$253$0;
 var $254$1=$_12;
 ___resumeException($254$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwe($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__units){
 var label=0;
 var tempVarArgs=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+536)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__buf=(sp)+(16);
 var $__bb=(sp)+(120);
 var $__digits=(sp)+(128);
 var $__pat=(sp)+(528);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__buf)|0);
 var $$etemp$0$0=100;
 var $$etemp$0$1=0;

 HEAP32[(($__bb)>>2)]=$1;
 var $2=$__digits;
 var $$etemp$1$0=400;
 var $$etemp$1$1=0;

 var $3=(($__digits)|0);
 var $4=_snprintf($1,100,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)); STACKTOP=tempVarArgs;
 var $5=($4>>>0)>99;
 if($5){label=2;break;}else{var $__db_0=$3;var $__n_0=$4;var $41=0;var $40=0;label=16;break;}
 case 2: 
 var $7=HEAP8[(19232)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=7;break;}
 case 3: 
 var $10=___cxa_guard_acquire(19232);
 var $11=($10|0)==0;
 if($11){label=7;break;}else{label=4;break;}
 case 4: 
 var $13=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$13;

 label=7;break;
 case 6: 
 var $16$0 = ___cxa_find_matching_catch(-1, -1); var $16$1 = tempRet0;

 var $eh_lpad_body$1=$16$1;var $eh_lpad_body$0=$16$0;var $29=0;label=12;break;
 case 7: 
 var $18=HEAP32[((17128)>>2)];
 var $19=(function() { try { __THREW__ = 0; return __ZNSt3__112__asprintf_lEPPcP15__locale_structPKcz($__bb,$18,3528,(tempVarArgs=STACKTOP,STACKTOP = (STACKTOP + 8)|0,(assert((STACKTOP|0) < (STACK_MAX|0))|0),HEAPF64[((tempVarArgs)>>3)]=$__units,tempVarArgs)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })(); STACKTOP=tempVarArgs;if (!__THREW__) { label=8;break; } else { var $27=0;label=11;break; }
 case 8: 
 var $21=HEAP32[(($__bb)>>2)];
 var $22=($21|0)==0;
 if($22){label=9;break;}else{label=13;break;}
 case 9: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($24,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { var $27=0;label=11;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $27;
 var $28$0 = ___cxa_find_matching_catch(-1, -1); var $28$1 = tempRet0;
 var $eh_lpad_body$1=$28$1;var $eh_lpad_body$0=$28$0;var $29=$27;label=12;break;
 case 12: 
 var $29;
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $30=$eh_lpad_body$0;
 var $31=$eh_lpad_body$1;
 var $267=$29;var $_2316=$31;var $_217=$30;label=83;break;
 case 13: 
 var $32=$19<<2;
 var $33=_malloc($32);
 var $34=$33;
 var $35=($33|0)==0;
 if($35){label=14;break;}else{var $__db_0=$34;var $__n_0=$19;var $41=$34;var $40=$21;label=16;break;}
 case 14: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { var $27=$21;label=11;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $40;
 var $41;
 var $__n_0;
 var $__db_0;
 var $42=(($__iob+28)|0);
 var $43=HEAP32[(($42)>>2)];
 var $44=$43;
 var $45=(($43+4)|0);
 var $46=$45;
 var $47=(tempValue=HEAP32[(($46)>>2)],HEAP32[(($46)>>2)]=tempValue+1,tempValue);
 var $48=$__p_i_i_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $49=HEAP32[((18664)>>2)];
 var $50=($49|0)==-1;
 if($50){label=18;break;}else{label=17;break;}
 case 17: 
 var $52=(($__p_i_i_i_i)|0);
 HEAP32[(($52)>>2)]=18664;
 var $53=(($__p_i_i_i_i+4)|0);
 HEAP32[(($53)>>2)]=(202);
 var $54=(($__p_i_i_i_i+8)|0);
 HEAP32[(($54)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=46;break; }
 case 18: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $55=HEAP32[((18668)>>2)];
 var $56=((($55)-(1))|0);
 var $57=(($43+12)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $60=(($43+8)|0);
 var $61=$60;
 var $62=HEAP32[(($61)>>2)];
 var $63=$59;
 var $64=$62;
 var $65=((($63)-($64))|0);
 var $66=$65>>2;
 var $67=($66>>>0)>($56>>>0);
 if($67){label=19;break;}else{label=20;break;}
 case 19: 
 var $68=(($62+($56<<2))|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=($69|0)==0;
 if($70){label=20;break;}else{label=22;break;}
 case 20: 
 var $71=___cxa_allocate_exception(4);
 var $72=$71;
 HEAP32[(($72)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($71,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=46;break; }
 case 21: 
 throw "Reached an unreachable!";
 case 22: 
 var $74=$69;
 var $75=HEAP32[(($__bb)>>2)];
 var $76=(($75+$__n_0)|0);
 var $77=$69;
 var $78=HEAP32[(($77)>>2)];
 var $79=(($78+48)|0);
 var $80=HEAP32[(($79)>>2)];
 var $81=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$80]($74,$75,$76,$__db_0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=46;break; }
 case 23: 
 var $82=($__n_0|0)==0;
 if($82){var $88=0;label=25;break;}else{label=24;break;}
 case 24: 
 var $84=HEAP32[(($__bb)>>2)];
 var $85=HEAP8[($84)];
 var $86=(($85<<24)>>24)==45;
 var $88=$86;label=25;break;
 case 25: 
 var $88;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sym;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 var $this2_i_i_i7=$__sn;
 HEAP32[(($this2_i_i_i7)>>2)]=0; HEAP32[((($this2_i_i_i7)+(4))>>2)]=0; HEAP32[((($this2_i_i_i7)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$88,$44,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=47;break; }
 case 26: 
 var $90=$__mbuf;
 var $$etemp$4$0=400;
 var $$etemp$4$1=0;

 var $91=(($__mbuf)|0);
 var $92=HEAP32[(($__fd)>>2)];
 var $93=($__n_0|0)>($92|0);
 if($93){label=27;break;}else{label=34;break;}
 case 27: 
 var $95=((($__n_0)-($92))|0);
 var $96=$95<<1;
 var $97=HEAP8[($this2_i_i_i7)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=28;break;}
 case 28: 
 var $101=(($__sn+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $106=$102;label=30;break;
 case 29: 
 var $104=($97&255);
 var $105=$104>>>1;
 var $106=$105;label=30;break;
 case 30: 
 var $106;
 var $107=HEAP8[($this2_i_i_i6)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=32;break;}else{label=31;break;}
 case 31: 
 var $111=(($__sym+4)|0);
 var $112=HEAP32[(($111)>>2)];
 var $116=$112;label=33;break;
 case 32: 
 var $114=($107&255);
 var $115=$114>>>1;
 var $116=$115;label=33;break;
 case 33: 
 var $116;
 var $117=$96|1;
 var $118=((($106)+($117))|0);
 var $119=((($118)+($116))|0);
 var $_pn=$119;label=41;break;
 case 34: 
 var $121=HEAP8[($this2_i_i_i7)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=36;break;}else{label=35;break;}
 case 35: 
 var $125=(($__sn+4)|0);
 var $126=HEAP32[(($125)>>2)];
 var $130=$126;label=37;break;
 case 36: 
 var $128=($121&255);
 var $129=$128>>>1;
 var $130=$129;label=37;break;
 case 37: 
 var $130;
 var $131=HEAP8[($this2_i_i_i6)];
 var $132=$131&1;
 var $133=(($132<<24)>>24)==0;
 if($133){label=39;break;}else{label=38;break;}
 case 38: 
 var $135=(($__sym+4)|0);
 var $136=HEAP32[(($135)>>2)];
 var $140=$136;label=40;break;
 case 39: 
 var $138=($131&255);
 var $139=$138>>>1;
 var $140=$139;label=40;break;
 case 40: 
 var $140;
 var $141=((($130)+(2))|0);
 var $142=((($141)+($140))|0);
 var $_pn=$142;label=41;break;
 case 41: 
 var $_pn;
 var $144=((($_pn)+($92))|0);
 var $145=($144>>>0)>100;
 if($145){label=42;break;}else{var $__mb_0=$91;var $172=0;label=50;break;}
 case 42: 
 var $146=$144<<2;
 var $147=_malloc($146);
 var $148=$147;
 var $149=($147|0)==0;
 if($149){label=43;break;}else{var $__mb_0=$148;var $172=$148;label=50;break;}
 case 43: 
 var $151=___cxa_allocate_exception(4);
 var $152=$151;
 HEAP32[(($152)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($151,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=44;break; } else { label=45;break; }
 case 44: 
 throw "Reached an unreachable!";
 case 45: 
 var $153$0 = ___cxa_find_matching_catch(-1, -1); var $153$1 = tempRet0;
 var $154=$153$0;
 var $155=$153$1;
 var $_0=$154;var $_01=$155;label=70;break;
 case 46: 
 var $157$0 = ___cxa_find_matching_catch(-1, -1); var $157$1 = tempRet0;
 var $158=$157$0;
 var $159=$157$1;
 var $_1=$158;var $_12=$159;label=79;break;
 case 47: 
 var $161$0 = ___cxa_find_matching_catch(-1, -1); var $161$1 = tempRet0;
 var $162=$161$0;
 var $163=$161$1;
 var $_0=$162;var $_01=$163;label=70;break;
 case 48: 
 var $165$0 = ___cxa_find_matching_catch(-1, -1); var $165$1 = tempRet0;
 var $166=$165$0;
 var $167=$165$1;
 var $168=($172|0)==0;
 if($168){var $_0=$166;var $_01=$167;label=70;break;}else{label=49;break;}
 case 49: 
 var $170=$172;
 _free($170);
 var $_0=$166;var $_01=$167;label=70;break;
 case 50: 
 var $172;
 var $__mb_0;
 var $173=(($__iob+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=(($__db_0+($__n_0<<2))|0);
 var $176=HEAP32[(($__dp)>>2)];
 var $177=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$174,$__db_0,$175,$74,$88,$tmpcast,$176,$177,$__grp,$__sym,$__sn,$92) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=48;break; }
 case 51: 
 var $179=(($__s)|0);
 var $180=HEAP32[(($179)>>2)];
 var $181=HEAP32[(($__mi)>>2)];
 var $182=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$180,$__mb_0,$181,$182,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=48;break; }
 case 52: 
 var $184=($172|0)==0;
 if($184){label=54;break;}else{label=53;break;}
 case 53: 
 var $186=$172;
 _free($186);
 label=54;break;
 case 54: 
 var $$etemp$5$0=400;
 var $$etemp$5$1=0;

 var $187=HEAP8[($this2_i_i_i7)];
 var $188=$187&1;
 var $189=(($188<<24)>>24)==0;
 if($189){label=57;break;}else{label=55;break;}
 case 55: 
 var $191=(($__sn+8)|0);
 var $192=HEAP32[(($191)>>2)];
 var $193=($192|0)==0;
 if($193){label=57;break;}else{label=56;break;}
 case 56: 
 var $195=$192;
 _free($195);
 label=57;break;
 case 57: 
 var $196=HEAP8[($this2_i_i_i6)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=60;break;}else{label=58;break;}
 case 58: 
 var $200=(($__sym+8)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=($201|0)==0;
 if($202){label=60;break;}else{label=59;break;}
 case 59: 
 var $204=$201;
 _free($204);
 label=60;break;
 case 60: 
 var $205=HEAP8[($this2_i_i_i)];
 var $206=$205&1;
 var $207=(($206<<24)>>24)==0;
 if($207){label=63;break;}else{label=61;break;}
 case 61: 
 var $209=(($__grp+8)|0);
 var $210=HEAP32[(($209)>>2)];
 var $211=($210|0)==0;
 if($211){label=63;break;}else{label=62;break;}
 case 62: 
 _free($210);
 label=63;break;
 case 63: 
 var $213=(($43+4)|0);
 var $214=$213;
 var $215=(tempValue=HEAP32[(($214)>>2)],HEAP32[(($214)>>2)]=tempValue+-1,tempValue);
 var $216=($215|0)==0;
 if($216){label=64;break;}else{label=65;break;}
 case 64: 
 var $218=$43;
 var $219=$43;
 var $220=HEAP32[(($219)>>2)];
 var $221=(($220+8)|0);
 var $222=HEAP32[(($221)>>2)];
 FUNCTION_TABLE[$222]($218);
 label=65;break;
 case 65: 
 var $223=($41|0)==0;
 if($223){label=67;break;}else{label=66;break;}
 case 66: 
 var $225=$41;
 _free($225);
 label=67;break;
 case 67: 
 var $226=($40|0)==0;
 if($226){label=69;break;}else{label=68;break;}
 case 68: 
 _free($40);
 label=69;break;
 case 69: 
 var $$etemp$6$0=400;
 var $$etemp$6$1=0;

 var $$etemp$7$0=100;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
 case 70: 
 var $_01;
 var $_0;
 var $228=HEAP8[($this2_i_i_i7)];
 var $229=$228&1;
 var $230=(($229<<24)>>24)==0;
 if($230){label=73;break;}else{label=71;break;}
 case 71: 
 var $232=(($__sn+8)|0);
 var $233=HEAP32[(($232)>>2)];
 var $234=($233|0)==0;
 if($234){label=73;break;}else{label=72;break;}
 case 72: 
 var $236=$233;
 _free($236);
 label=73;break;
 case 73: 
 var $237=HEAP8[($this2_i_i_i6)];
 var $238=$237&1;
 var $239=(($238<<24)>>24)==0;
 if($239){label=76;break;}else{label=74;break;}
 case 74: 
 var $241=(($__sym+8)|0);
 var $242=HEAP32[(($241)>>2)];
 var $243=($242|0)==0;
 if($243){label=76;break;}else{label=75;break;}
 case 75: 
 var $245=$242;
 _free($245);
 label=76;break;
 case 76: 
 var $246=HEAP8[($this2_i_i_i)];
 var $247=$246&1;
 var $248=(($247<<24)>>24)==0;
 if($248){var $_1=$_0;var $_12=$_01;label=79;break;}else{label=77;break;}
 case 77: 
 var $250=(($__grp+8)|0);
 var $251=HEAP32[(($250)>>2)];
 var $252=($251|0)==0;
 if($252){var $_1=$_0;var $_12=$_01;label=79;break;}else{label=78;break;}
 case 78: 
 _free($251);
 var $_1=$_0;var $_12=$_01;label=79;break;
 case 79: 
 var $_12;
 var $_1;
 var $254=(($43+4)|0);
 var $255=$254;
 var $256=(tempValue=HEAP32[(($255)>>2)],HEAP32[(($255)>>2)]=tempValue+-1,tempValue);
 var $257=($256|0)==0;
 if($257){label=80;break;}else{label=81;break;}
 case 80: 
 var $259=$43;
 var $260=$43;
 var $261=HEAP32[(($260)>>2)];
 var $262=(($261+8)|0);
 var $263=HEAP32[(($262)>>2)];
 FUNCTION_TABLE[$263]($259);
 label=81;break;
 case 81: 
 var $264=($41|0)==0;
 if($264){var $267=$40;var $_2316=$_12;var $_217=$_1;label=83;break;}else{label=82;break;}
 case 82: 
 var $266=$41;
 _free($266);
 var $267=$40;var $_2316=$_12;var $_217=$_1;label=83;break;
 case 83: 
 var $_217;
 var $_2316;
 var $267;
 var $268=($267|0)==0;
 if($268){label=85;break;}else{label=84;break;}
 case 84: 
 _free($267);
 label=85;break;
 case 85: 
 var $270$0=$_217;
 var $270$1=0;
 var $271$0=$270$0;
 var $271$1=$_2316;
 ___resumeException($271$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$__neg,$__loc_0_0_val,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+40)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i8=sp;
 var $__p_i_i_i_i=(sp)+(16);
 var $1=(sp)+(32);
 var $tmpcast3=$1;
 var $2=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $3=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast2=$3;
 var $4=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $5=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $6=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $7=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast1=$7;
 var $8=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $9=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $tmpcast=$9;
 var $10=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $11=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $12=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 if($__intl){label=2;break;}else{label=31;break;}
 case 2: 
 var $14=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $15=HEAP32[((19128)>>2)];
 var $16=($15|0)==-1;
 if($16){label=4;break;}else{label=3;break;}
 case 3: 
 var $18=(($__p_i_i_i_i)|0);
 HEAP32[(($18)>>2)]=19128;
 var $19=(($__p_i_i_i_i+4)|0);
 HEAP32[(($19)>>2)]=(202);
 var $20=(($__p_i_i_i_i+8)|0);
 HEAP32[(($20)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19128,$14);
 label=4;break;
 case 4: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $21=HEAP32[((19132)>>2)];
 var $22=((($21)-(1))|0);
 var $23=(($__loc_0_0_val+12)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=(($__loc_0_0_val+8)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=$24;
 var $28=$26;
 var $29=((($27)-($28))|0);
 var $30=$29>>2;
 var $31=($30>>>0)>($22>>>0);
 if($31){label=5;break;}else{label=6;break;}
 case 5: 
 var $32=(($26+($22<<2))|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==0;
 if($34){label=6;break;}else{label=7;break;}
 case 6: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5224;
 ___cxa_throw($35,11720,(658));
 throw "Reached an unreachable!";
 case 7: 
 var $37=$33;
 var $38=$33;
 var $39=HEAP32[(($38)>>2)];
 if($__neg){label=8;break;}else{label=14;break;}
 case 8: 
 var $41=(($39+44)|0);
 var $42=HEAP32[(($41)>>2)];
 FUNCTION_TABLE[$42]($tmpcast3,$37);
 var $43=$__pat;
 var $44=HEAP32[(($1)>>2)];
 tempBigInt=$44;HEAP8[($43)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($43)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($43)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($43)+(3))|0)]=tempBigInt&0xff;
 var $45=$33;
 var $46=HEAP32[(($45)>>2)];
 var $47=(($46+32)|0);
 var $48=HEAP32[(($47)>>2)];
 FUNCTION_TABLE[$48]($2,$37);
 var $49=$__sn;
 var $50=HEAP8[($49)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=10;break;}else{label=9;break;}
 case 9: 
 var $54=(($__sn+8)|0);
 var $55=HEAP32[(($54)>>2)];
 HEAP32[(($55)>>2)]=0;
 var $56=(($__sn+4)|0);
 HEAP32[(($56)>>2)]=0;
 label=11;break;
 case 10: 
 var $58=(($__sn+4)|0);
 HEAP32[(($58)>>2)]=0;
 HEAP8[($49)]=0;
 label=11;break;
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=12;break; }
 case 12: 
 var $60$0 = ___cxa_find_matching_catch(-1, -1,0); var $60$1 = tempRet0;
 var $61=$60$0;
 ___clang_call_terminate($61);
 throw "Reached an unreachable!";
 case 13: 
 var $62=$2;
 assert(12 % 1 === 0);HEAP32[(($49)>>2)]=HEAP32[(($62)>>2)];HEAP32[((($49)+(4))>>2)]=HEAP32[((($62)+(4))>>2)];HEAP32[((($49)+(8))>>2)]=HEAP32[((($62)+(8))>>2)];
 HEAP32[(($62)>>2)]=0; HEAP32[((($62)+(4))>>2)]=0; HEAP32[((($62)+(8))>>2)]=0;
 label=20;break;
 case 14: 
 var $64=(($39+40)|0);
 var $65=HEAP32[(($64)>>2)];
 FUNCTION_TABLE[$65]($tmpcast2,$37);
 var $66=$__pat;
 var $67=HEAP32[(($3)>>2)];
 tempBigInt=$67;HEAP8[($66)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($66)+(3))|0)]=tempBigInt&0xff;
 var $68=$33;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 FUNCTION_TABLE[$71]($4,$37);
 var $72=$__sn;
 var $73=HEAP8[($72)];
 var $74=$73&1;
 var $75=(($74<<24)>>24)==0;
 if($75){label=16;break;}else{label=15;break;}
 case 15: 
 var $77=(($__sn+8)|0);
 var $78=HEAP32[(($77)>>2)];
 HEAP32[(($78)>>2)]=0;
 var $79=(($__sn+4)|0);
 HEAP32[(($79)>>2)]=0;
 label=17;break;
 case 16: 
 var $81=(($__sn+4)|0);
 HEAP32[(($81)>>2)]=0;
 HEAP8[($72)]=0;
 label=17;break;
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=18;break; }
 case 18: 
 var $83$0 = ___cxa_find_matching_catch(-1, -1,0); var $83$1 = tempRet0;
 var $84=$83$0;
 ___clang_call_terminate($84);
 throw "Reached an unreachable!";
 case 19: 
 var $85=$4;
 assert(12 % 1 === 0);HEAP32[(($72)>>2)]=HEAP32[(($85)>>2)];HEAP32[((($72)+(4))>>2)]=HEAP32[((($85)+(4))>>2)];HEAP32[((($72)+(8))>>2)]=HEAP32[((($85)+(8))>>2)];
 HEAP32[(($85)>>2)]=0; HEAP32[((($85)+(4))>>2)]=0; HEAP32[((($85)+(8))>>2)]=0;
 label=20;break;
 case 20: 
 var $86=$33;
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+12)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=FUNCTION_TABLE[$89]($37);
 HEAP32[(($__dp)>>2)]=$90;
 var $91=HEAP32[(($86)>>2)];
 var $92=(($91+16)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=FUNCTION_TABLE[$93]($37);
 HEAP32[(($__ts)>>2)]=$94;
 var $95=$33;
 var $96=HEAP32[(($95)>>2)];
 var $97=(($96+20)|0);
 var $98=HEAP32[(($97)>>2)];
 FUNCTION_TABLE[$98]($5,$37);
 var $99=$__grp;
 var $100=HEAP8[($99)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=22;break;}else{label=21;break;}
 case 21: 
 var $104=(($__grp+8)|0);
 var $105=HEAP32[(($104)>>2)];
 HEAP8[($105)]=0;
 var $106=(($__grp+4)|0);
 HEAP32[(($106)>>2)]=0;
 label=23;break;
 case 22: 
 var $108=$__grp;
 var $109=(($108+1)|0);
 HEAP8[($109)]=0;
 HEAP8[($99)]=0;
 label=23;break;
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=24;break; }
 case 24: 
 var $111$0 = ___cxa_find_matching_catch(-1, -1,0); var $111$1 = tempRet0;
 var $112=$111$0;
 ___clang_call_terminate($112);
 throw "Reached an unreachable!";
 case 25: 
 var $113=$5;
 assert(12 % 1 === 0);HEAP32[(($99)>>2)]=HEAP32[(($113)>>2)];HEAP32[((($99)+(4))>>2)]=HEAP32[((($113)+(4))>>2)];HEAP32[((($99)+(8))>>2)]=HEAP32[((($113)+(8))>>2)];
 HEAP32[(($113)>>2)]=0; HEAP32[((($113)+(4))>>2)]=0; HEAP32[((($113)+(8))>>2)]=0;
 var $114=$33;
 var $115=HEAP32[(($114)>>2)];
 var $116=(($115+24)|0);
 var $117=HEAP32[(($116)>>2)];
 FUNCTION_TABLE[$117]($6,$37);
 var $118=$__sym;
 var $119=HEAP8[($118)];
 var $120=$119&1;
 var $121=(($120<<24)>>24)==0;
 if($121){label=27;break;}else{label=26;break;}
 case 26: 
 var $123=(($__sym+8)|0);
 var $124=HEAP32[(($123)>>2)];
 HEAP32[(($124)>>2)]=0;
 var $125=(($__sym+4)|0);
 HEAP32[(($125)>>2)]=0;
 label=28;break;
 case 27: 
 var $127=(($__sym+4)|0);
 HEAP32[(($127)>>2)]=0;
 HEAP8[($118)]=0;
 label=28;break;
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=29;break; }
 case 29: 
 var $129$0 = ___cxa_find_matching_catch(-1, -1,0); var $129$1 = tempRet0;
 var $130=$129$0;
 ___clang_call_terminate($130);
 throw "Reached an unreachable!";
 case 30: 
 var $131=$6;
 assert(12 % 1 === 0);HEAP32[(($118)>>2)]=HEAP32[(($131)>>2)];HEAP32[((($118)+(4))>>2)]=HEAP32[((($131)+(4))>>2)];HEAP32[((($118)+(8))>>2)]=HEAP32[((($131)+(8))>>2)];
 HEAP32[(($131)>>2)]=0; HEAP32[((($131)+(4))>>2)]=0; HEAP32[((($131)+(8))>>2)]=0;
 var $132=HEAP32[(($86)>>2)];
 var $133=(($132+36)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=FUNCTION_TABLE[$134]($37);
 var $storemerge=$135;label=60;break;
 case 31: 
 var $137=$__p_i_i_i_i8;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $138=HEAP32[((19136)>>2)];
 var $139=($138|0)==-1;
 if($139){label=33;break;}else{label=32;break;}
 case 32: 
 var $141=(($__p_i_i_i_i8)|0);
 HEAP32[(($141)>>2)]=19136;
 var $142=(($__p_i_i_i_i8+4)|0);
 HEAP32[(($142)>>2)]=(202);
 var $143=(($__p_i_i_i_i8+8)|0);
 HEAP32[(($143)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E(19136,$137);
 label=33;break;
 case 33: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $144=HEAP32[((19140)>>2)];
 var $145=((($144)-(1))|0);
 var $146=(($__loc_0_0_val+12)|0);
 var $147=HEAP32[(($146)>>2)];
 var $148=(($__loc_0_0_val+8)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$147;
 var $151=$149;
 var $152=((($150)-($151))|0);
 var $153=$152>>2;
 var $154=($153>>>0)>($145>>>0);
 if($154){label=34;break;}else{label=35;break;}
 case 34: 
 var $155=(($149+($145<<2))|0);
 var $156=HEAP32[(($155)>>2)];
 var $157=($156|0)==0;
 if($157){label=35;break;}else{label=36;break;}
 case 35: 
 var $158=___cxa_allocate_exception(4);
 var $159=$158;
 HEAP32[(($159)>>2)]=5224;
 ___cxa_throw($158,11720,(658));
 throw "Reached an unreachable!";
 case 36: 
 var $160=$156;
 var $161=$156;
 var $162=HEAP32[(($161)>>2)];
 if($__neg){label=37;break;}else{label=43;break;}
 case 37: 
 var $164=(($162+44)|0);
 var $165=HEAP32[(($164)>>2)];
 FUNCTION_TABLE[$165]($tmpcast1,$160);
 var $166=$__pat;
 var $167=HEAP32[(($7)>>2)];
 tempBigInt=$167;HEAP8[($166)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($166)+(3))|0)]=tempBigInt&0xff;
 var $168=$156;
 var $169=HEAP32[(($168)>>2)];
 var $170=(($169+32)|0);
 var $171=HEAP32[(($170)>>2)];
 FUNCTION_TABLE[$171]($8,$160);
 var $172=$__sn;
 var $173=HEAP8[($172)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){label=39;break;}else{label=38;break;}
 case 38: 
 var $177=(($__sn+8)|0);
 var $178=HEAP32[(($177)>>2)];
 HEAP32[(($178)>>2)]=0;
 var $179=(($__sn+4)|0);
 HEAP32[(($179)>>2)]=0;
 label=40;break;
 case 39: 
 var $181=(($__sn+4)|0);
 HEAP32[(($181)>>2)]=0;
 HEAP8[($172)]=0;
 label=40;break;
 case 40: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=41;break; }
 case 41: 
 var $183$0 = ___cxa_find_matching_catch(-1, -1,0); var $183$1 = tempRet0;
 var $184=$183$0;
 ___clang_call_terminate($184);
 throw "Reached an unreachable!";
 case 42: 
 var $185=$8;
 assert(12 % 1 === 0);HEAP32[(($172)>>2)]=HEAP32[(($185)>>2)];HEAP32[((($172)+(4))>>2)]=HEAP32[((($185)+(4))>>2)];HEAP32[((($172)+(8))>>2)]=HEAP32[((($185)+(8))>>2)];
 HEAP32[(($185)>>2)]=0; HEAP32[((($185)+(4))>>2)]=0; HEAP32[((($185)+(8))>>2)]=0;
 label=49;break;
 case 43: 
 var $187=(($162+40)|0);
 var $188=HEAP32[(($187)>>2)];
 FUNCTION_TABLE[$188]($tmpcast,$160);
 var $189=$__pat;
 var $190=HEAP32[(($9)>>2)];
 tempBigInt=$190;HEAP8[($189)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($189)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($189)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($189)+(3))|0)]=tempBigInt&0xff;
 var $191=$156;
 var $192=HEAP32[(($191)>>2)];
 var $193=(($192+28)|0);
 var $194=HEAP32[(($193)>>2)];
 FUNCTION_TABLE[$194]($10,$160);
 var $195=$__sn;
 var $196=HEAP8[($195)];
 var $197=$196&1;
 var $198=(($197<<24)>>24)==0;
 if($198){label=45;break;}else{label=44;break;}
 case 44: 
 var $200=(($__sn+8)|0);
 var $201=HEAP32[(($200)>>2)];
 HEAP32[(($201)>>2)]=0;
 var $202=(($__sn+4)|0);
 HEAP32[(($202)>>2)]=0;
 label=46;break;
 case 45: 
 var $204=(($__sn+4)|0);
 HEAP32[(($204)>>2)]=0;
 HEAP8[($195)]=0;
 label=46;break;
 case 46: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sn) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=47;break; }
 case 47: 
 var $206$0 = ___cxa_find_matching_catch(-1, -1,0); var $206$1 = tempRet0;
 var $207=$206$0;
 ___clang_call_terminate($207);
 throw "Reached an unreachable!";
 case 48: 
 var $208=$10;
 assert(12 % 1 === 0);HEAP32[(($195)>>2)]=HEAP32[(($208)>>2)];HEAP32[((($195)+(4))>>2)]=HEAP32[((($208)+(4))>>2)];HEAP32[((($195)+(8))>>2)]=HEAP32[((($208)+(8))>>2)];
 HEAP32[(($208)>>2)]=0; HEAP32[((($208)+(4))>>2)]=0; HEAP32[((($208)+(8))>>2)]=0;
 label=49;break;
 case 49: 
 var $209=$156;
 var $210=HEAP32[(($209)>>2)];
 var $211=(($210+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=FUNCTION_TABLE[$212]($160);
 HEAP32[(($__dp)>>2)]=$213;
 var $214=HEAP32[(($209)>>2)];
 var $215=(($214+16)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=FUNCTION_TABLE[$216]($160);
 HEAP32[(($__ts)>>2)]=$217;
 var $218=$156;
 var $219=HEAP32[(($218)>>2)];
 var $220=(($219+20)|0);
 var $221=HEAP32[(($220)>>2)];
 FUNCTION_TABLE[$221]($11,$160);
 var $222=$__grp;
 var $223=HEAP8[($222)];
 var $224=$223&1;
 var $225=(($224<<24)>>24)==0;
 if($225){label=51;break;}else{label=50;break;}
 case 50: 
 var $227=(($__grp+8)|0);
 var $228=HEAP32[(($227)>>2)];
 HEAP8[($228)]=0;
 var $229=(($__grp+4)|0);
 HEAP32[(($229)>>2)]=0;
 label=52;break;
 case 51: 
 var $231=$__grp;
 var $232=(($231+1)|0);
 HEAP8[($232)]=0;
 HEAP8[($222)]=0;
 label=52;break;
 case 52: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE7reserveEj($__grp) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=53;break; }
 case 53: 
 var $234$0 = ___cxa_find_matching_catch(-1, -1,0); var $234$1 = tempRet0;
 var $235=$234$0;
 ___clang_call_terminate($235);
 throw "Reached an unreachable!";
 case 54: 
 var $236=$11;
 assert(12 % 1 === 0);HEAP32[(($222)>>2)]=HEAP32[(($236)>>2)];HEAP32[((($222)+(4))>>2)]=HEAP32[((($236)+(4))>>2)];HEAP32[((($222)+(8))>>2)]=HEAP32[((($236)+(8))>>2)];
 HEAP32[(($236)>>2)]=0; HEAP32[((($236)+(4))>>2)]=0; HEAP32[((($236)+(8))>>2)]=0;
 var $237=$156;
 var $238=HEAP32[(($237)>>2)];
 var $239=(($238+24)|0);
 var $240=HEAP32[(($239)>>2)];
 FUNCTION_TABLE[$240]($12,$160);
 var $241=$__sym;
 var $242=HEAP8[($241)];
 var $243=$242&1;
 var $244=(($243<<24)>>24)==0;
 if($244){label=56;break;}else{label=55;break;}
 case 55: 
 var $246=(($__sym+8)|0);
 var $247=HEAP32[(($246)>>2)];
 HEAP32[(($247)>>2)]=0;
 var $248=(($__sym+4)|0);
 HEAP32[(($248)>>2)]=0;
 label=57;break;
 case 56: 
 var $250=(($__sym+4)|0);
 HEAP32[(($250)>>2)]=0;
 HEAP8[($241)]=0;
 label=57;break;
 case 57: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE7reserveEj($__sym) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=59;break; } else { label=58;break; }
 case 58: 
 var $252$0 = ___cxa_find_matching_catch(-1, -1,0); var $252$1 = tempRet0;
 var $253=$252$0;
 ___clang_call_terminate($253);
 throw "Reached an unreachable!";
 case 59: 
 var $254=$12;
 assert(12 % 1 === 0);HEAP32[(($241)>>2)]=HEAP32[(($254)>>2)];HEAP32[((($241)+(4))>>2)]=HEAP32[((($254)+(4))>>2)];HEAP32[((($241)+(8))>>2)]=HEAP32[((($254)+(8))>>2)];
 HEAP32[(($254)>>2)]=0; HEAP32[((($254)+(4))>>2)]=0; HEAP32[((($254)+(8))>>2)]=0;
 var $255=HEAP32[(($209)>>2)];
 var $256=(($255+36)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=FUNCTION_TABLE[$257]($160);
 var $storemerge=$258;label=60;break;
 case 60: 
 var $storemerge;
 HEAP32[(($__fd)>>2)]=$storemerge;
 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb,$__mi,$__me,$__flags,$__db,$__de,$__ct,$__neg,$__pat,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($__me)>>2)]=$__mb;
 var $1=$__ct;
 var $2=$__sn;
 var $3=(($__sn+4)|0);
 var $4=(($__sn+8)|0);
 var $5=$__sym;
 var $6=$__flags&512;
 var $7=($6|0)==0;
 var $8=(($__sym+4)|0);
 var $9=(($__sym+8)|0);
 var $10=($__fd|0)>0;
 var $11=$__grp;
 var $12=$__grp;
 var $13=(($12+1)|0);
 var $14=(($__grp+8)|0);
 var $15=(($__grp+4)|0);
 var $16=$__ct;
 var $__p_058=0;var $_059=$__db;label=2;break;
 case 2: 
 var $_059;
 var $__p_058;
 var $18=(($__pat+$__p_058)|0);
 var $19=HEAP8[($18)];
 var $20=(($19<<24)>>24);
 switch(($20|0)){case 2:{ label=12;break;}case 4:{ label=25;break;}case 0:{ label=3;break;}case 1:{ label=4;break;}case 3:{ label=5;break;}default:{var $_2=$_059;label=63;break;}}break;
 case 3: 
 var $22=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$22;
 var $_2=$_059;label=63;break;
 case 4: 
 var $24=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$24;
 var $25=HEAP32[(($1)>>2)];
 var $26=(($25+44)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=FUNCTION_TABLE[$27]($__ct,32);
 var $29=HEAP32[(($__me)>>2)];
 var $30=(($29+4)|0);
 HEAP32[(($__me)>>2)]=$30;
 HEAP32[(($29)>>2)]=$28;
 var $_2=$_059;label=63;break;
 case 5: 
 var $32=HEAP8[($2)];
 var $33=$32&1;
 var $34=(($33<<24)>>24)==0;
 if($34){label=7;break;}else{label=6;break;}
 case 6: 
 var $36=HEAP32[(($3)>>2)];
 var $40=$36;label=8;break;
 case 7: 
 var $38=($32&255);
 var $39=$38>>>1;
 var $40=$39;label=8;break;
 case 8: 
 var $40;
 var $41=($40|0)==0;
 if($41){var $_2=$_059;label=63;break;}else{label=9;break;}
 case 9: 
 if($34){var $45=$3;label=11;break;}else{label=10;break;}
 case 10: 
 var $44=HEAP32[(($4)>>2)];
 var $45=$44;label=11;break;
 case 11: 
 var $45;
 var $46=HEAP32[(($45)>>2)];
 var $47=HEAP32[(($__me)>>2)];
 var $48=(($47+4)|0);
 HEAP32[(($__me)>>2)]=$48;
 HEAP32[(($47)>>2)]=$46;
 var $_2=$_059;label=63;break;
 case 12: 
 var $50=HEAP8[($5)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=14;break;}else{label=13;break;}
 case 13: 
 var $54=HEAP32[(($8)>>2)];
 var $58=$54;label=15;break;
 case 14: 
 var $56=($50&255);
 var $57=$56>>>1;
 var $58=$57;label=15;break;
 case 15: 
 var $58;
 var $59=($58|0)==0;
 var $brmerge=$59|$7;
 if($brmerge){var $_2=$_059;label=63;break;}else{label=16;break;}
 case 16: 
 if($52){label=18;break;}else{label=17;break;}
 case 17: 
 var $62=HEAP32[(($9)>>2)];
 var $63=HEAP32[(($8)>>2)];
 var $68=$63;var $67=$62;label=19;break;
 case 18: 
 var $65=($50&255);
 var $66=$65>>>1;
 var $68=$66;var $67=$8;label=19;break;
 case 19: 
 var $67;
 var $68;
 var $69=(($67+($68<<2))|0);
 var $70=HEAP32[(($__me)>>2)];
 var $71=($67|0)==($69|0);
 if($71){var $_0_lcssa_i_i22=$70;label=24;break;}else{label=20;break;}
 case 20: 
 var $_promoted4_i_i13=$67;
 var $_sum33=((($68)-(1))|0);
 var $scevgep_i_i14=(($67+($_sum33<<2))|0);
 var $scevgep3_i_i15=$scevgep_i_i14;
 var $72=(((-$_promoted4_i_i13))|0);
 var $uglygep_i_i16=(($scevgep3_i_i15+$72)|0);
 var $uglygep5_i_i17=$uglygep_i_i16;
 var $73=$uglygep5_i_i17>>>2;
 var $_01_i_i19=$70;var $75=$67;label=21;break;
 case 21: 
 var $75;
 var $_01_i_i19;
 var $76=HEAP32[(($75)>>2)];
 HEAP32[(($_01_i_i19)>>2)]=$76;
 var $77=(($75+4)|0);
 var $78=($77|0)==($69|0);
 if($78){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=(($_01_i_i19+4)|0);
 var $_01_i_i19=$79;var $75=$77;label=21;break;
 case 23: 
 var $80=((($73)+(1))|0);
 var $scevgep6_i_i20=(($70+($80<<2))|0);
 var $_0_lcssa_i_i22=$scevgep6_i_i20;label=24;break;
 case 24: 
 var $_0_lcssa_i_i22;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i22;
 var $_2=$_059;label=63;break;
 case 25: 
 var $82=HEAP32[(($__me)>>2)];
 var $83=(($_059+4)|0);
 var $__0=($__neg?$83:$_059);
 var $84=($__0>>>0)<($__de>>>0);
 if($84){var $__d_034=$__0;label=27;break;}else{var $__d_0_lcssa=$__0;label=28;break;}
 case 26: 
 var $86=($92>>>0)<($__de>>>0);
 if($86){var $__d_034=$92;label=27;break;}else{var $__d_0_lcssa=$92;label=28;break;}
 case 27: 
 var $__d_034;
 var $87=HEAP32[(($__d_034)>>2)];
 var $88=HEAP32[(($16)>>2)];
 var $89=(($88+12)|0);
 var $90=HEAP32[(($89)>>2)];
 var $91=FUNCTION_TABLE[$90]($__ct,2048,$87);
 var $92=(($__d_034+4)|0);
 if($91){label=26;break;}else{var $__d_0_lcssa=$__d_034;label=28;break;}
 case 28: 
 var $__d_0_lcssa;
 if($10){label=29;break;}else{var $__d_2=$__d_0_lcssa;label=38;break;}
 case 29: 
 var $93=($__d_0_lcssa>>>0)>($__0>>>0);
 if($93){label=30;break;}else{var $__f_0_lcssa77=$__fd;var $__d_1_lcssa79=$__d_0_lcssa;label=34;break;}
 case 30: 
 var $__me_promoted=HEAP32[(($__me)>>2)];
 var $__d_137=$__d_0_lcssa;var $__f_038=$__fd;var $95=$__me_promoted;label=31;break;
 case 31: 
 var $95;
 var $__f_038;
 var $__d_137;
 var $96=((($__d_137)-(4))|0);
 var $97=HEAP32[(($96)>>2)];
 var $98=(($95+4)|0);
 HEAP32[(($95)>>2)]=$97;
 var $99=((($__f_038)-(1))|0);
 var $100=($96>>>0)>($__0>>>0);
 var $101=($99|0)>0;
 var $or_cond=$100&$101;
 if($or_cond){var $__d_137=$96;var $__f_038=$99;var $95=$98;label=31;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($__me)>>2)]=$98;
 if($101){var $__f_0_lcssa77=$99;var $__d_1_lcssa79=$96;label=34;break;}else{label=33;break;}
 case 33: 
 var $102=(($95+8)|0);
 HEAP32[(($__me)>>2)]=$102;
 var $_lcssa44=$98;var $__d_1_lcssa7880=$96;label=37;break;
 case 34: 
 var $__d_1_lcssa79;
 var $__f_0_lcssa77;
 var $103=HEAP32[(($1)>>2)];
 var $104=(($103+44)|0);
 var $105=HEAP32[(($104)>>2)];
 var $106=FUNCTION_TABLE[$105]($__ct,48);
 var $107=($__f_0_lcssa77|0)>0;
 var $108=HEAP32[(($__me)>>2)];
 var $109=(($108+4)|0);
 HEAP32[(($__me)>>2)]=$109;
 if($107){var $__f_145=$__f_0_lcssa77;var $111=$108;var $110=$109;label=35;break;}else{var $_lcssa44=$108;var $__d_1_lcssa7880=$__d_1_lcssa79;label=37;break;}
 case 35: 
 var $110;
 var $111;
 var $__f_145;
 HEAP32[(($111)>>2)]=$106;
 var $112=((($__f_145)-(1))|0);
 var $113=($112|0)>0;
 var $114=(($110+4)|0);
 if($113){var $__f_145=$112;var $111=$110;var $110=$114;label=35;break;}else{label=36;break;}
 case 36: 
 var $_sum75=((($__f_0_lcssa77)+(1))|0);
 var $scevgep=(($108+($_sum75<<2))|0);
 var $scevgep70=(($108+($__f_0_lcssa77<<2))|0);
 HEAP32[(($__me)>>2)]=$scevgep;
 var $_lcssa44=$scevgep70;var $__d_1_lcssa7880=$__d_1_lcssa79;label=37;break;
 case 37: 
 var $__d_1_lcssa7880;
 var $_lcssa44;
 HEAP32[(($_lcssa44)>>2)]=$__dp;
 var $__d_2=$__d_1_lcssa7880;label=38;break;
 case 38: 
 var $__d_2;
 var $117=($__d_2|0)==($__0|0);
 if($117){label=39;break;}else{label=40;break;}
 case 39: 
 var $119=HEAP32[(($1)>>2)];
 var $120=(($119+44)|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=FUNCTION_TABLE[$121]($__ct,48);
 var $123=HEAP32[(($__me)>>2)];
 var $124=(($123+4)|0);
 HEAP32[(($__me)>>2)]=$124;
 HEAP32[(($123)>>2)]=$122;
 var $177=$124;label=60;break;
 case 40: 
 var $126=HEAP8[($11)];
 var $127=$126&1;
 var $128=(($127<<24)>>24)==0;
 if($128){label=42;break;}else{label=41;break;}
 case 41: 
 var $130=HEAP32[(($15)>>2)];
 var $134=$130;label=43;break;
 case 42: 
 var $132=($126&255);
 var $133=$132>>>1;
 var $134=$133;label=43;break;
 case 43: 
 var $134;
 var $135=($134|0)==0;
 if($135){var $__gl_056_ph=-1;label=47;break;}else{label=44;break;}
 case 44: 
 if($128){var $139=$13;label=46;break;}else{label=45;break;}
 case 45: 
 var $138=HEAP32[(($14)>>2)];
 var $139=$138;label=46;break;
 case 46: 
 var $139;
 var $140=HEAP8[($139)];
 var $141=(($140<<24)>>24);
 var $__gl_056_ph=$141;label=47;break;
 case 47: 
 var $__gl_056_ph;
 var $_pre=HEAP32[(($__me)>>2)];
 var $__d_353=$__d_2;var $__ng_054=0;var $__ig_055=0;var $__gl_056=$__gl_056_ph;var $142=$_pre;label=48;break;
 case 48: 
 var $142;
 var $__gl_056;
 var $__ig_055;
 var $__ng_054;
 var $__d_353;
 var $143=($__ng_054|0)==($__gl_056|0);
 if($143){label=49;break;}else{var $__gl_1=$__gl_056;var $__ig_1=$__ig_055;var $__ng_1=$__ng_054;var $171=$142;label=59;break;}
 case 49: 
 var $145=(($142+4)|0);
 HEAP32[(($__me)>>2)]=$145;
 HEAP32[(($142)>>2)]=$__ts;
 var $146=((($__ig_055)+(1))|0);
 var $147=HEAP8[($11)];
 var $148=$147&1;
 var $149=(($148<<24)>>24)==0;
 if($149){label=51;break;}else{label=50;break;}
 case 50: 
 var $151=HEAP32[(($15)>>2)];
 var $155=$151;label=52;break;
 case 51: 
 var $153=($147&255);
 var $154=$153>>>1;
 var $155=$154;label=52;break;
 case 52: 
 var $155;
 var $156=($146>>>0)<($155>>>0);
 if($156){label=53;break;}else{var $__gl_1=$__gl_056;var $__ig_1=$146;var $__ng_1=0;var $171=$145;label=59;break;}
 case 53: 
 if($149){var $160=$13;label=55;break;}else{label=54;break;}
 case 54: 
 var $159=HEAP32[(($14)>>2)];
 var $160=$159;label=55;break;
 case 55: 
 var $160;
 var $161=(($160+$146)|0);
 var $162=HEAP8[($161)];
 var $163=(($162<<24)>>24)==127;
 if($163){var $__gl_1=-1;var $__ig_1=$146;var $__ng_1=0;var $171=$145;label=59;break;}else{label=56;break;}
 case 56: 
 if($149){var $167=$13;label=58;break;}else{label=57;break;}
 case 57: 
 var $166=HEAP32[(($14)>>2)];
 var $167=$166;label=58;break;
 case 58: 
 var $167;
 var $168=(($167+$146)|0);
 var $169=HEAP8[($168)];
 var $170=(($169<<24)>>24);
 var $__gl_1=$170;var $__ig_1=$146;var $__ng_1=0;var $171=$145;label=59;break;
 case 59: 
 var $171;
 var $__ng_1;
 var $__ig_1;
 var $__gl_1;
 var $172=((($__d_353)-(4))|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=(($171+4)|0);
 HEAP32[(($__me)>>2)]=$174;
 HEAP32[(($171)>>2)]=$173;
 var $175=((($__ng_1)+(1))|0);
 var $176=($172|0)==($__0|0);
 if($176){var $177=$174;label=60;break;}else{var $__d_353=$172;var $__ng_054=$175;var $__ig_055=$__ig_1;var $__gl_056=$__gl_1;var $142=$174;label=48;break;}
 case 60: 
 var $177;
 var $178=($82|0)==($177|0);
 if($178){var $_2=$__0;label=63;break;}else{label=61;break;}
 case 61: 
 var $179=((($177)-(4))|0);
 var $180=($179>>>0)>($82>>>0);
 if($180){var $_012_i_i=$82;var $181=$179;label=62;break;}else{var $_2=$__0;label=63;break;}
 case 62: 
 var $181;
 var $_012_i_i;
 var $182=HEAP32[(($_012_i_i)>>2)];
 var $183=HEAP32[(($181)>>2)];
 HEAP32[(($_012_i_i)>>2)]=$183;
 HEAP32[(($181)>>2)]=$182;
 var $184=(($_012_i_i+4)|0);
 var $185=((($181)-(4))|0);
 var $186=($184>>>0)<($185>>>0);
 if($186){var $_012_i_i=$184;var $181=$185;label=62;break;}else{var $_2=$__0;label=63;break;}
 case 63: 
 var $_2;
 var $187=((($__p_058)+(1))|0);
 var $188=($187>>>0)<4;
 if($188){var $__p_058=$187;var $_059=$_2;label=2;break;}else{label=64;break;}
 case 64: 
 var $190=HEAP8[($2)];
 var $191=$190&1;
 var $192=(($191<<24)>>24)==0;
 if($192){label=66;break;}else{label=65;break;}
 case 65: 
 var $194=HEAP32[(($3)>>2)];
 var $198=$194;label=67;break;
 case 66: 
 var $196=($190&255);
 var $197=$196>>>1;
 var $198=$197;label=67;break;
 case 67: 
 var $198;
 var $199=($198>>>0)>1;
 if($199){label=68;break;}else{label=76;break;}
 case 68: 
 if($192){label=70;break;}else{label=69;break;}
 case 69: 
 var $202=HEAP32[(($4)>>2)];
 var $203=HEAP32[(($3)>>2)];
 var $207=$203;var $_pn=$202;label=71;break;
 case 70: 
 var $205=($190&255);
 var $206=$205>>>1;
 var $207=$206;var $_pn=$3;label=71;break;
 case 71: 
 var $_pn;
 var $207;
 var $208=(($_pn+4)|0);
 var $209=(($_pn+($207<<2))|0);
 var $210=HEAP32[(($__me)>>2)];
 var $211=($208|0)==($209|0);
 if($211){var $_0_lcssa_i_i=$210;label=75;break;}else{label=72;break;}
 case 72: 
 var $_promoted4_i_i=$208;
 var $_sum=((($207)-(1))|0);
 var $scevgep_i_i=(($_pn+($_sum<<2))|0);
 var $scevgep3_i_i=$scevgep_i_i;
 var $212=(((-$_promoted4_i_i))|0);
 var $uglygep_i_i=(($scevgep3_i_i+$212)|0);
 var $uglygep5_i_i=$uglygep_i_i;
 var $213=$uglygep5_i_i>>>2;
 var $_01_i_i=$210;var $215=$208;label=73;break;
 case 73: 
 var $215;
 var $_01_i_i;
 var $216=HEAP32[(($215)>>2)];
 HEAP32[(($_01_i_i)>>2)]=$216;
 var $217=(($215+4)|0);
 var $218=(($_01_i_i+4)|0);
 var $219=($217|0)==($209|0);
 if($219){label=74;break;}else{var $_01_i_i=$218;var $215=$217;label=73;break;}
 case 74: 
 var $220=((($213)+(1))|0);
 var $scevgep6_i_i=(($210+($220<<2))|0);
 var $_0_lcssa_i_i=$scevgep6_i_i;label=75;break;
 case 75: 
 var $_0_lcssa_i_i;
 HEAP32[(($__me)>>2)]=$_0_lcssa_i_i;
 label=76;break;
 case 76: 
 var $222=$__flags&176;
 if(($222|0)==32){ label=77;break;}else if(($222|0)==16){ label=79;break;}else{label=78;break;}
 case 77: 
 var $224=HEAP32[(($__me)>>2)];
 HEAP32[(($__mi)>>2)]=$224;
 label=79;break;
 case 78: 
 HEAP32[(($__mi)>>2)]=$__mb;
 label=79;break;
 case 79: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__19money_putIwNS_19ostreambuf_iteratorIwNS_11char_traitsIwEEEEE6do_putES4_bRNS_8ios_baseEwRKNS_12basic_stringIwS3_NS_9allocatorIwEEEE($agg_result,$this,$__s,$__intl,$__iob,$__fl,$__digits){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+24)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var tempParam = $__s; $__s=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);HEAP32[(($__s)>>2)]=HEAP32[((tempParam)>>2)];
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i_i=sp;
 var $__pat=(sp)+(16);
 var $tmpcast=$__pat;
 var $__dp=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__ts=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__grp=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sym=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__sn=STACKTOP;STACKTOP = (STACKTOP + 12)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__fd=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mbuf=STACKTOP;STACKTOP = (STACKTOP + 400)|0;(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__mi=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $__me=STACKTOP;STACKTOP = (STACKTOP + 4)|0;STACKTOP = (((STACKTOP)+7)&-8);(assert((STACKTOP|0) < (STACK_MAX|0))|0);
 var $1=(($__iob+28)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=$2;
 var $4=(($2+4)|0);
 var $5=$4;
 var $6=(tempValue=HEAP32[(($5)>>2)],HEAP32[(($5)>>2)]=tempValue+1,tempValue);
 var $7=$__p_i_i_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $8=HEAP32[((18664)>>2)];
 var $9=($8|0)==-1;
 if($9){label=3;break;}else{label=2;break;}
 case 2: 
 var $11=(($__p_i_i_i_i)|0);
 HEAP32[(($11)>>2)]=18664;
 var $12=(($__p_i_i_i_i+4)|0);
 HEAP32[(($12)>>2)]=(202);
 var $13=(($__p_i_i_i_i+8)|0);
 HEAP32[(($13)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$7) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=43;break; }
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $14=HEAP32[((18668)>>2)];
 var $15=((($14)-(1))|0);
 var $16=(($2+12)|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($2+8)|0);
 var $20=$19;
 var $21=HEAP32[(($20)>>2)];
 var $22=$18;
 var $23=$21;
 var $24=((($22)-($23))|0);
 var $25=$24>>2;
 var $26=($25>>>0)>($15>>>0);
 if($26){label=4;break;}else{label=5;break;}
 case 4: 
 var $27=(($21+($15<<2))|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=($28|0)==0;
 if($29){label=5;break;}else{label=7;break;}
 case 5: 
 var $30=___cxa_allocate_exception(4);
 var $31=$30;
 HEAP32[(($31)>>2)]=5224;
 (function() { try { __THREW__ = 0; return ___cxa_throw($30,11720,(658)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=43;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $33=$28;
 var $34=$__digits;
 var $35=HEAP8[($34)];
 var $36=$35&1;
 var $37=(($36<<24)>>24)==0;
 if($37){label=9;break;}else{label=8;break;}
 case 8: 
 var $39=(($__digits+4)|0);
 var $40=HEAP32[(($39)>>2)];
 var $44=$40;label=10;break;
 case 9: 
 var $42=($35&255);
 var $43=$42>>>1;
 var $44=$43;label=10;break;
 case 10: 
 var $44;
 var $45=($44|0)==0;
 if($45){var $61=0;label=16;break;}else{label=11;break;}
 case 11: 
 if($37){label=13;break;}else{label=12;break;}
 case 12: 
 var $48=(($__digits+8)|0);
 var $49=HEAP32[(($48)>>2)];
 var $52=$49;label=14;break;
 case 13: 
 var $51=(($__digits+4)|0);
 var $52=$51;label=14;break;
 case 14: 
 var $52;
 var $53=HEAP32[(($52)>>2)];
 var $54=$28;
 var $55=HEAP32[(($54)>>2)];
 var $56=(($55+44)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$57]($33,45) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=43;break; }
 case 15: 
 var $59=($53|0)==($58|0);
 var $61=$59;label=16;break;
 case 16: 
 var $61;
 HEAP32[(($__pat)>>2)]=0;
 var $this2_i_i_i=$__grp;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $this2_i_i_i5=$__sym;
 HEAP32[(($this2_i_i_i5)>>2)]=0; HEAP32[((($this2_i_i_i5)+(4))>>2)]=0; HEAP32[((($this2_i_i_i5)+(8))>>2)]=0;
 var $this2_i_i_i6=$__sn;
 HEAP32[(($this2_i_i_i6)>>2)]=0; HEAP32[((($this2_i_i_i6)+(4))>>2)]=0; HEAP32[((($this2_i_i_i6)+(8))>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE13__gather_infoEbbRKNS_6localeERNS_10money_base7patternERwS8_RNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERNS9_IwNSA_IwEENSC_IwEEEESJ_Ri($__intl,$61,$3,$tmpcast,$__dp,$__ts,$__grp,$__sym,$__sn,$__fd) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=44;break; }
 case 17: 
 var $63=$__mbuf;
 var $$etemp$2$0=400;
 var $$etemp$2$1=0;

 var $64=(($__mbuf)|0);
 var $65=HEAP8[($34)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=19;break;}else{label=18;break;}
 case 18: 
 var $69=(($__digits+4)|0);
 var $70=HEAP32[(($69)>>2)];
 var $74=$70;label=20;break;
 case 19: 
 var $72=($65&255);
 var $73=$72>>>1;
 var $74=$73;label=20;break;
 case 20: 
 var $74;
 var $75=HEAP32[(($__fd)>>2)];
 var $76=($74|0)>($75|0);
 if($76){label=21;break;}else{label=31;break;}
 case 21: 
 if($67){label=23;break;}else{label=22;break;}
 case 22: 
 var $79=(($__digits+4)|0);
 var $80=HEAP32[(($79)>>2)];
 var $84=$80;label=24;break;
 case 23: 
 var $82=($65&255);
 var $83=$82>>>1;
 var $84=$83;label=24;break;
 case 24: 
 var $84;
 var $85=((($84)-($75))|0);
 var $86=$85<<1;
 var $87=HEAP8[($this2_i_i_i6)];
 var $88=$87&1;
 var $89=(($88<<24)>>24)==0;
 if($89){label=26;break;}else{label=25;break;}
 case 25: 
 var $91=(($__sn+4)|0);
 var $92=HEAP32[(($91)>>2)];
 var $96=$92;label=27;break;
 case 26: 
 var $94=($87&255);
 var $95=$94>>>1;
 var $96=$95;label=27;break;
 case 27: 
 var $96;
 var $97=HEAP8[($this2_i_i_i5)];
 var $98=$97&1;
 var $99=(($98<<24)>>24)==0;
 if($99){label=29;break;}else{label=28;break;}
 case 28: 
 var $101=(($__sym+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $106=$102;label=30;break;
 case 29: 
 var $104=($97&255);
 var $105=$104>>>1;
 var $106=$105;label=30;break;
 case 30: 
 var $106;
 var $107=$86|1;
 var $108=((($96)+($107))|0);
 var $109=((($108)+($106))|0);
 var $_pn=$109;label=38;break;
 case 31: 
 var $111=HEAP8[($this2_i_i_i6)];
 var $112=$111&1;
 var $113=(($112<<24)>>24)==0;
 if($113){label=33;break;}else{label=32;break;}
 case 32: 
 var $115=(($__sn+4)|0);
 var $116=HEAP32[(($115)>>2)];
 var $120=$116;label=34;break;
 case 33: 
 var $118=($111&255);
 var $119=$118>>>1;
 var $120=$119;label=34;break;
 case 34: 
 var $120;
 var $121=HEAP8[($this2_i_i_i5)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=36;break;}else{label=35;break;}
 case 35: 
 var $125=(($__sym+4)|0);
 var $126=HEAP32[(($125)>>2)];
 var $130=$126;label=37;break;
 case 36: 
 var $128=($121&255);
 var $129=$128>>>1;
 var $130=$129;label=37;break;
 case 37: 
 var $130;
 var $131=((($120)+(2))|0);
 var $132=((($131)+($130))|0);
 var $_pn=$132;label=38;break;
 case 38: 
 var $_pn;
 var $134=((($_pn)+($75))|0);
 var $135=($134>>>0)>100;
 if($135){label=39;break;}else{var $__mb_0=$64;var $162=0;label=47;break;}
 case 39: 
 var $136=$134<<2;
 var $137=_malloc($136);
 var $138=$137;
 var $139=($137|0)==0;
 if($139){label=40;break;}else{var $__mb_0=$138;var $162=$138;label=47;break;}
 case 40: 
 var $141=___cxa_allocate_exception(4);
 var $142=$141;
 HEAP32[(($142)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($141,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=41;break; } else { label=42;break; }
 case 41: 
 throw "Reached an unreachable!";
 case 42: 
 var $143$0 = ___cxa_find_matching_catch(-1, -1); var $143$1 = tempRet0;
 var $144=$143$0;
 var $145=$143$1;
 var $_0=$144;var $_01=$145;label=66;break;
 case 43: 
 var $147$0 = ___cxa_find_matching_catch(-1, -1); var $147$1 = tempRet0;
 var $148=$147$0;
 var $149=$147$1;
 var $_1=$148;var $_12=$149;label=75;break;
 case 44: 
 var $151$0 = ___cxa_find_matching_catch(-1, -1); var $151$1 = tempRet0;
 var $152=$151$0;
 var $153=$151$1;
 var $_0=$152;var $_01=$153;label=66;break;
 case 45: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1); var $155$1 = tempRet0;
 var $156=$155$0;
 var $157=$155$1;
 var $158=($162|0)==0;
 if($158){var $_0=$156;var $_01=$157;label=66;break;}else{label=46;break;}
 case 46: 
 var $160=$162;
 _free($160);
 var $_0=$156;var $_01=$157;label=66;break;
 case 47: 
 var $162;
 var $__mb_0;
 var $163=(($__iob+4)|0);
 var $164=HEAP32[(($163)>>2)];
 if($67){label=49;break;}else{label=48;break;}
 case 48: 
 var $166=(($__digits+8)|0);
 var $167=HEAP32[(($166)>>2)];
 var $168=(($__digits+4)|0);
 var $169=HEAP32[(($168)>>2)];
 var $175=$169;var $174=$167;label=50;break;
 case 49: 
 var $171=(($__digits+4)|0);
 var $172=($65&255);
 var $173=$172>>>1;
 var $175=$173;var $174=$171;label=50;break;
 case 50: 
 var $174;
 var $175;
 var $176=(($174+($175<<2))|0);
 var $177=HEAP32[(($__dp)>>2)];
 var $178=HEAP32[(($__ts)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__111__money_putIwE8__formatEPwRS2_S3_jPKwS5_RKNS_5ctypeIwEEbRKNS_10money_base7patternEwwRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNSE_IwNSF_IwEENSH_IwEEEESQ_i($__mb_0,$__mi,$__me,$164,$174,$176,$33,$61,$tmpcast,$177,$178,$__grp,$__sym,$__sn,$75) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=45;break; }
 case 51: 
 var $180=(($__s)|0);
 var $181=HEAP32[(($180)>>2)];
 var $182=HEAP32[(($__mi)>>2)];
 var $183=HEAP32[(($__me)>>2)];
 (function() { try { __THREW__ = 0; return __ZNSt3__116__pad_and_outputIwNS_11char_traitsIwEEEENS_19ostreambuf_iteratorIT_T0_EES6_PKS4_S8_S8_RNS_8ios_baseES4_($agg_result,$181,$__mb_0,$182,$183,$__iob,$__fl) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=45;break; }
 case 52: 
 var $185=($162|0)==0;
 if($185){label=54;break;}else{label=53;break;}
 case 53: 
 var $187=$162;
 _free($187);
 label=54;break;
 case 54: 
 var $$etemp$3$0=400;
 var $$etemp$3$1=0;

 var $188=HEAP8[($this2_i_i_i6)];
 var $189=$188&1;
 var $190=(($189<<24)>>24)==0;
 if($190){label=57;break;}else{label=55;break;}
 case 55: 
 var $192=(($__sn+8)|0);
 var $193=HEAP32[(($192)>>2)];
 var $194=($193|0)==0;
 if($194){label=57;break;}else{label=56;break;}
 case 56: 
 var $196=$193;
 _free($196);
 label=57;break;
 case 57: 
 var $197=HEAP8[($this2_i_i_i5)];
 var $198=$197&1;
 var $199=(($198<<24)>>24)==0;
 if($199){label=60;break;}else{label=58;break;}
 case 58: 
 var $201=(($__sym+8)|0);
 var $202=HEAP32[(($201)>>2)];
 var $203=($202|0)==0;
 if($203){label=60;break;}else{label=59;break;}
 case 59: 
 var $205=$202;
 _free($205);
 label=60;break;
 case 60: 
 var $206=HEAP8[($this2_i_i_i)];
 var $207=$206&1;
 var $208=(($207<<24)>>24)==0;
 if($208){label=63;break;}else{label=61;break;}
 case 61: 
 var $210=(($__grp+8)|0);
 var $211=HEAP32[(($210)>>2)];
 var $212=($211|0)==0;
 if($212){label=63;break;}else{label=62;break;}
 case 62: 
 _free($211);
 label=63;break;
 case 63: 
 var $214=(($2+4)|0);
 var $215=$214;
 var $216=(tempValue=HEAP32[(($215)>>2)],HEAP32[(($215)>>2)]=tempValue+-1,tempValue);
 var $217=($216|0)==0;
 if($217){label=64;break;}else{label=65;break;}
 case 64: 
 var $219=$2;
 var $220=$2;
 var $221=HEAP32[(($220)>>2)];
 var $222=(($221+8)|0);
 var $223=HEAP32[(($222)>>2)];
 FUNCTION_TABLE[$223]($219);
 label=65;break;
 case 65: 
 STACKTOP=sp;return;
 case 66: 
 var $_01;
 var $_0;
 var $224=HEAP8[($this2_i_i_i6)];
 var $225=$224&1;
 var $226=(($225<<24)>>24)==0;
 if($226){label=69;break;}else{label=67;break;}
 case 67: 
 var $228=(($__sn+8)|0);
 var $229=HEAP32[(($228)>>2)];
 var $230=($229|0)==0;
 if($230){label=69;break;}else{label=68;break;}
 case 68: 
 var $232=$229;
 _free($232);
 label=69;break;
 case 69: 
 var $233=HEAP8[($this2_i_i_i5)];
 var $234=$233&1;
 var $235=(($234<<24)>>24)==0;
 if($235){label=72;break;}else{label=70;break;}
 case 70: 
 var $237=(($__sym+8)|0);
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){label=72;break;}else{label=71;break;}
 case 71: 
 var $241=$238;
 _free($241);
 label=72;break;
 case 72: 
 var $242=HEAP8[($this2_i_i_i)];
 var $243=$242&1;
 var $244=(($243<<24)>>24)==0;
 if($244){var $_1=$_0;var $_12=$_01;label=75;break;}else{label=73;break;}
 case 73: 
 var $246=(($__grp+8)|0);
 var $247=HEAP32[(($246)>>2)];
 var $248=($247|0)==0;
 if($248){var $_1=$_0;var $_12=$_01;label=75;break;}else{label=74;break;}
 case 74: 
 _free($247);
 var $_1=$_0;var $_12=$_01;label=75;break;
 case 75: 
 var $_12;
 var $_1;
 var $250=(($2+4)|0);
 var $251=$250;
 var $252=(tempValue=HEAP32[(($251)>>2)],HEAP32[(($251)>>2)]=tempValue+-1,tempValue);
 var $253=($252|0)==0;
 if($253){label=76;break;}else{label=77;break;}
 case 76: 
 var $255=$2;
 var $256=$2;
 var $257=HEAP32[(($256)>>2)];
 var $258=(($257+8)|0);
 var $259=HEAP32[(($258)>>2)];
 FUNCTION_TABLE[$259]($255);
 label=77;break;
 case 77: 
 var $260$0=$_1;
 var $260$1=0;
 var $261$0=$260$0;
 var $261$1=$_12;
 ___resumeException($261$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIcED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18messagesIcE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE6do_getEiiiRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__ndflt=sp;
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $1=$__dflt;
 var $2=HEAP8[($1)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__dflt+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=(($__dflt+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $16=$9;var $15=$7;label=4;break;
 case 3: 
 var $11=$__dflt;
 var $12=(($11+1)|0);
 var $13=($2&255);
 var $14=$13>>>1;
 var $16=$14;var $15=$12;label=4;break;
 case 4: 
 var $15;
 var $16;
 var $17=(($15+$16)|0);
 var $18=($15>>>0)<($17>>>0);
 if($18){label=5;break;}else{label=6;break;}
 case 5: 
 var $19=(($__ndflt)|0);
 var $20=(($__ndflt+4)|0);
 var $21=$__ndflt;
 var $22=(($21+1)|0);
 var $23=(($__ndflt+8)|0);
 var $_01_i7=$15;var $28=0;label=7;break;
 case 6: 
 var $24=($__c|0)==-1;
 var $25=$__c<<1;
 var $26=$25;
 var $27=($24?-1:$26);
 var $_pre17=$__ndflt;
 var $_pre18=(($_pre17+1)|0);
 var $62=$_pre18;var $61=$27;label=18;break;
 case 7: 
 var $28;
 var $_01_i7;
 var $29=HEAP8[($_01_i7)];
 var $30=$28&1;
 var $31=(($30<<24)>>24)!=0;
 if($31){label=9;break;}else{label=8;break;}
 case 8: 
 var $33=($28&255);
 var $34=$33>>>1;
 var $__sz_0_i=$34;var $__cap_0_i=10;label=10;break;
 case 9: 
 var $36=HEAP32[(($19)>>2)];
 var $37=$36&-2;
 var $38=((($37)-(1))|0);
 var $39=HEAP32[(($20)>>2)];
 var $__sz_0_i=$39;var $__cap_0_i=$38;label=10;break;
 case 10: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $41=($__sz_0_i|0)==($__cap_0_i|0);
 if($41){label=11;break;}else{label=13;break;}
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__ndflt,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=19;break; }
 case 12: 
 var $43=HEAP8[($this2_i_i_i)];
 var $44=$43&1;
 var $45=(($44<<24)>>24)==0;
 if($45){label=14;break;}else{label=15;break;}
 case 13: 
 if($31){label=15;break;}else{label=14;break;}
 case 14: 
 var $48=$__sz_0_i<<1;
 var $49=((($48)+(2))|0);
 var $50=(($49)&255);
 HEAP8[($this2_i_i_i)]=$50;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$22;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=16;break;
 case 15: 
 var $51=HEAP32[(($23)>>2)];
 var $52=((($__sz_0_i)+(1))|0);
 HEAP32[(($20)>>2)]=$52;
 var $_pn_i=$51;var $__p_0_sum_pre_phi_i=$52;label=16;break;
 case 16: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$29;
 var $53=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($53)]=0;
 var $54=(($_01_i7+1)|0);
 var $55=($54>>>0)<($17>>>0);
 var $_pre16=HEAP8[($this2_i_i_i)];
 if($55){var $_01_i7=$54;var $28=$_pre16;label=7;break;}else{label=17;break;}
 case 17: 
 var $phitmp=$_pre16&1;
 var $phitmp17=(($phitmp<<24)>>24)==0;
 var $56=($__c|0)==-1;
 var $57=$__c<<1;
 var $58=$57;
 var $59=($56?-1:$58);
 var $60=HEAP32[(($23)>>2)];
 var $_=($phitmp17?$22:$60);
 var $62=$_;var $61=$59;label=18;break;
 case 18: 
 var $61;
 var $62;
 var $63=(function() { try { __THREW__ = 0; return _catgets($61,$__set,$__msgid,$62) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=20;break; }
 case 19: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=21;break;
 case 20: 
 var $lpad_nonloopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit$1;var $lpad_phi$0=$lpad_nonloopexit$0;label=21;break;
 case 21: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $65=$lpad_phi$0;
 var $66=$lpad_phi$1;
 var $_01=$65;var $_02=$66;label=42;break;
 case 22: 
 var $this2_i_i_i4=$agg_result;
 HEAP32[(($this2_i_i_i4)>>2)]=0; HEAP32[((($this2_i_i_i4)+(4))>>2)]=0; HEAP32[((($this2_i_i_i4)+(8))>>2)]=0;
 var $68=_strlen($63);
 var $69=(($63+$68)|0);
 var $70=($68|0)>0;
 if($70){label=23;break;}else{label=38;break;}
 case 23: 
 var $71=(($agg_result)|0);
 var $72=(($agg_result+4)|0);
 var $73=$agg_result;
 var $74=(($73+1)|0);
 var $75=(($agg_result+8)|0);
 var $_01_i=$63;var $76=0;label=24;break;
 case 24: 
 var $76;
 var $_01_i;
 var $77=HEAP8[($_01_i)];
 var $78=$76&1;
 var $79=(($78<<24)>>24)!=0;
 if($79){label=26;break;}else{label=25;break;}
 case 25: 
 var $81=($76&255);
 var $82=$81>>>1;
 var $__sz_0_i3=$82;var $__cap_0_i2=10;label=27;break;
 case 26: 
 var $84=HEAP32[(($71)>>2)];
 var $85=$84&-2;
 var $86=((($85)-(1))|0);
 var $87=HEAP32[(($72)>>2)];
 var $__sz_0_i3=$87;var $__cap_0_i2=$86;label=27;break;
 case 27: 
 var $__cap_0_i2;
 var $__sz_0_i3;
 var $89=($__sz_0_i3|0)==($__cap_0_i2|0);
 if($89){label=28;break;}else{label=30;break;}
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($agg_result,$__cap_0_i2,1,$__cap_0_i2,$__cap_0_i2,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=35;break; }
 case 29: 
 var $91=HEAP8[($this2_i_i_i4)];
 var $92=$91&1;
 var $93=(($92<<24)>>24)==0;
 if($93){label=31;break;}else{label=32;break;}
 case 30: 
 if($79){label=32;break;}else{label=31;break;}
 case 31: 
 var $96=$__sz_0_i3<<1;
 var $97=((($96)+(2))|0);
 var $98=(($97)&255);
 HEAP8[($this2_i_i_i4)]=$98;
 var $__p_0_sum_pre_i4=((($__sz_0_i3)+(1))|0);
 var $_pn_i6=$74;var $__p_0_sum_pre_phi_i5=$__p_0_sum_pre_i4;label=33;break;
 case 32: 
 var $99=HEAP32[(($75)>>2)];
 var $100=((($__sz_0_i3)+(1))|0);
 HEAP32[(($72)>>2)]=$100;
 var $_pn_i6=$99;var $__p_0_sum_pre_phi_i5=$100;label=33;break;
 case 33: 
 var $__p_0_sum_pre_phi_i5;
 var $_pn_i6;
 var $__p_0_i7=(($_pn_i6+$__sz_0_i3)|0);
 HEAP8[($__p_0_i7)]=$77;
 var $101=(($_pn_i6+$__p_0_sum_pre_phi_i5)|0);
 HEAP8[($101)]=0;
 var $102=(($_01_i+1)|0);
 var $103=($102>>>0)<($69>>>0);
 if($103){label=34;break;}else{label=38;break;}
 case 34: 
 var $_pre15=HEAP8[($this2_i_i_i4)];
 var $_01_i=$102;var $76=$_pre15;label=24;break;
 case 35: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $106=$105$0;
 var $107=$105$1;
 var $108=HEAP8[($this2_i_i_i4)];
 var $109=$108&1;
 var $110=(($109<<24)>>24)==0;
 if($110){var $_01=$106;var $_02=$107;label=42;break;}else{label=36;break;}
 case 36: 
 var $112=HEAP32[(($75)>>2)];
 var $113=($112|0)==0;
 if($113){var $_01=$106;var $_02=$107;label=42;break;}else{label=37;break;}
 case 37: 
 _free($112);
 var $_01=$106;var $_02=$107;label=42;break;
 case 38: 
 var $115=HEAP8[($this2_i_i_i)];
 var $116=$115&1;
 var $117=(($116<<24)>>24)==0;
 if($117){label=41;break;}else{label=39;break;}
 case 39: 
 var $119=(($__ndflt+8)|0);
 var $120=HEAP32[(($119)>>2)];
 var $121=($120|0)==0;
 if($121){label=41;break;}else{label=40;break;}
 case 40: 
 _free($120);
 label=41;break;
 case 41: 
 STACKTOP=sp;return;
 case 42: 
 var $_02;
 var $_01;
 var $123=HEAP8[($this2_i_i_i)];
 var $124=$123&1;
 var $125=(($124<<24)>>24)==0;
 if($125){label=45;break;}else{label=43;break;}
 case 43: 
 var $127=(($__ndflt+8)|0);
 var $128=HEAP32[(($127)>>2)];
 var $129=($128|0)==0;
 if($129){label=45;break;}else{label=44;break;}
 case 44: 
 _free($128);
 label=45;break;
 case 45: 
 var $131$0=$_01;
 var $131$1=0;
 var $132$0=$131$0;
 var $132$1=$_02;
 ___resumeException($132$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIcE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__18messagesIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18messagesIwED1Ev($this){
 var label=0;


 return;
}


function __ZNKSt3__18messagesIwE7do_openERKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEERKNS_6localeE($this,$__nm,$0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$__nm;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=3;break;}else{label=2;break;}
 case 2: 
 var $7=(($__nm+8)|0);
 var $8=HEAP32[(($7)>>2)];
 var $12=$8;label=4;break;
 case 3: 
 var $10=$__nm;
 var $11=(($10+1)|0);
 var $12=$11;label=4;break;
 case 4: 
 var $12;
 var $13=_catopen($12,1);
 var $14=$13;
 var $not_=($13|0)!=-1;
 var $15=($not_&1);
 var $_=$14>>>($15>>>0);
 return $_;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE6do_getEiiiRKNS_12basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEEE($agg_result,$this,$__c,$__set,$__msgid,$__dflt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+240)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__mb_i11=sp;
 var $__buf_i13=(sp)+(8);
 var $__bn_i14=(sp)+(40);
 var $__wn_i=(sp)+(48);
 var $__mb_i=(sp)+(56);
 var $__buf_i=(sp)+(64);
 var $__bn_i=(sp)+(192);
 var $__nn_i=(sp)+(200);
 var $__ndflt=(sp)+(208);
 var $1=(sp)+(224);
 var $2=(sp)+(232);
 var $this2_i_i_i=$__ndflt;
 HEAP32[(($this2_i_i_i)>>2)]=0; HEAP32[((($this2_i_i_i)+(4))>>2)]=0; HEAP32[((($this2_i_i_i)+(8))>>2)]=0;
 var $3=(($1+4)|0);
 HEAP32[(($3)>>2)]=0;
 var $4=(($1)|0);
 HEAP32[(($4)>>2)]=6888;
 var $5=$__dflt;
 var $6=HEAP8[($5)];
 var $7=$6&1;
 var $8=(($7<<24)>>24)==0;
 if($8){label=3;break;}else{label=2;break;}
 case 2: 
 var $10=(($__dflt+8)|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($__dflt+4)|0);
 var $13=HEAP32[(($12)>>2)];
 var $19=$13;var $18=$11;label=4;break;
 case 3: 
 var $15=(($__dflt+4)|0);
 var $16=($6&255);
 var $17=$16>>>1;
 var $19=$17;var $18=$15;label=4;break;
 case 4: 
 var $18;
 var $19;
 var $20=(($18+($19<<2))|0);
 var $21=$__mb_i11;
 var $$etemp$0$0=8;
 var $$etemp$0$1=0;

 var $22=(($__buf_i13)|0);
 var $$etemp$1$0=32;
 var $$etemp$1$1=0;

 var $23=$__bn_i14;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $24=$__wn_i;
 var $$etemp$3$0=4;
 var $$etemp$3$1=0;

 var $tmpcast_i12=$__mb_i11;
 var $$etemp$4$0=0;
 var $$etemp$4$1=0;
 var $st$5$0=(($__mb_i11)|0);
 HEAP32[(($st$5$0)>>2)]=$$etemp$4$0;
 var $st$6$1=(($__mb_i11+4)|0);
 HEAP32[(($st$6$1)>>2)]=$$etemp$4$1;
 var $25=($18>>>0)<($20>>>0);
 if($25){label=5;break;}else{var $78=1;label=25;break;}
 case 5: 
 var $26=(($1)|0);
 var $27=$1;
 var $28=(($__buf_i13+32)|0);
 var $29=(($__ndflt)|0);
 var $30=(($__ndflt+4)|0);
 var $31=$__ndflt;
 var $32=(($31+1)|0);
 var $33=(($__ndflt+8)|0);
 var $_04_i16=$18;var $35=6888;label=6;break;
 case 6: 
 var $35;
 var $_04_i16;
 HEAP32[(($__wn_i)>>2)]=$_04_i16;
 var $36=(($35+12)|0);
 var $37=HEAP32[(($36)>>2)];
 var $38=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$37]($26,$tmpcast_i12,$_04_i16,$20,$__wn_i,$22,$28,$__bn_i14) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=31;break; }
 case 7: 
 var $39=($38|0)==2;
 var $40=HEAP32[(($__wn_i)>>2)];
 var $41=($40|0)==($_04_i16|0);
 var $or_cond2_i17=$39|$41;
 if($or_cond2_i17){label=9;break;}else{label=8;break;}
 case 8: 
 var $42=HEAP32[(($__bn_i14)>>2)];
 var $43=($22>>>0)<($42>>>0);
 if($43){var $__p_03_i20=$22;label=11;break;}else{var $76=$40;label=22;break;}
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(2152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 throw "Reached an unreachable!";
 case 11: 
 var $__p_03_i20;
 var $45=HEAP8[($__p_03_i20)];
 var $46=HEAP8[($this2_i_i_i)];
 var $47=$46&1;
 var $48=(($47<<24)>>24)!=0;
 if($48){label=13;break;}else{label=12;break;}
 case 12: 
 var $50=($46&255);
 var $51=$50>>>1;
 var $__sz_0_i=$51;var $__cap_0_i=10;label=14;break;
 case 13: 
 var $53=HEAP32[(($29)>>2)];
 var $54=$53&-2;
 var $55=((($54)-(1))|0);
 var $56=HEAP32[(($30)>>2)];
 var $__sz_0_i=$56;var $__cap_0_i=$55;label=14;break;
 case 14: 
 var $__cap_0_i;
 var $__sz_0_i;
 var $58=($__sz_0_i|0)==($__cap_0_i|0);
 if($58){label=15;break;}else{label=17;break;}
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE9__grow_byEjjjjjj($__ndflt,$__cap_0_i,1,$__cap_0_i,$__cap_0_i,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=30;break; }
 case 16: 
 var $60=HEAP8[($this2_i_i_i)];
 var $61=$60&1;
 var $62=(($61<<24)>>24)==0;
 if($62){label=18;break;}else{label=19;break;}
 case 17: 
 if($48){label=19;break;}else{label=18;break;}
 case 18: 
 var $65=$__sz_0_i<<1;
 var $66=((($65)+(2))|0);
 var $67=(($66)&255);
 HEAP8[($this2_i_i_i)]=$67;
 var $__p_0_sum_pre_i=((($__sz_0_i)+(1))|0);
 var $_pn_i=$32;var $__p_0_sum_pre_phi_i=$__p_0_sum_pre_i;label=20;break;
 case 19: 
 var $69=HEAP32[(($33)>>2)];
 var $70=((($__sz_0_i)+(1))|0);
 HEAP32[(($30)>>2)]=$70;
 var $_pn_i=$69;var $__p_0_sum_pre_phi_i=$70;label=20;break;
 case 20: 
 var $__p_0_sum_pre_phi_i;
 var $_pn_i;
 var $__p_0_i=(($_pn_i+$__sz_0_i)|0);
 HEAP8[($__p_0_i)]=$45;
 var $71=(($_pn_i+$__p_0_sum_pre_phi_i)|0);
 HEAP8[($71)]=0;
 var $72=(($__p_03_i20+1)|0);
 var $73=HEAP32[(($__bn_i14)>>2)];
 var $74=($72>>>0)<($73>>>0);
 if($74){var $__p_03_i20=$72;label=11;break;}else{label=21;break;}
 case 21: 
 var $_pre_i21=HEAP32[(($__wn_i)>>2)];
 var $76=$_pre_i21;label=22;break;
 case 22: 
 var $76;
 var $77=($76>>>0)<($20>>>0);
 if($77){label=23;break;}else{label=24;break;}
 case 23: 
 var $_pre=HEAP32[(($27)>>2)];
 var $_04_i16=$76;var $35=$_pre;label=6;break;
 case 24: 
 var $_pre12=HEAP8[($this2_i_i_i)];
 var $phitmp=$_pre12&1;
 var $phitmp14=(($phitmp<<24)>>24)==0;
 var $78=$phitmp14;label=25;break;
 case 25: 
 var $78;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;

 var $$etemp$8$0=32;
 var $$etemp$8$1=0;

 var $$etemp$9$0=4;
 var $$etemp$9$1=0;

 var $$etemp$10$0=4;
 var $$etemp$10$1=0;

 var $79=($__c|0)==-1;
 var $80=$__c<<1;
 var $81=$80;
 var $82=($79?-1:$81);
 if($78){label=27;break;}else{label=26;break;}
 case 26: 
 var $84=(($__ndflt+8)|0);
 var $85=HEAP32[(($84)>>2)];
 var $89=$85;label=28;break;
 case 27: 
 var $87=$__ndflt;
 var $88=(($87+1)|0);
 var $89=$88;label=28;break;
 case 28: 
 var $89;
 var $90=(function() { try { __THREW__ = 0; return _catgets($82,$__set,$__msgid,$89) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=29;break; }
 case 29: 
 var $92$0 = ___cxa_find_matching_catch(-1, -1); var $92$1 = tempRet0;
 var $93=$92$0;
 var $94=$92$1;
 var $_1=$93;var $_13=$94;label=64;break;
 case 30: 
 var $lpad_loopexit37$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit37$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit37$1;var $lpad_phi38$0=$lpad_loopexit37$0;label=33;break;
 case 31: 
 var $lpad_loopexit39$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit39$1 = tempRet0;
 var $lpad_phi38$1=$lpad_loopexit39$1;var $lpad_phi38$0=$lpad_loopexit39$0;label=33;break;
 case 32: 
 var $lpad_nonloopexit40$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit40$1 = tempRet0;
 var $lpad_phi38$1=$lpad_nonloopexit40$1;var $lpad_phi38$0=$lpad_nonloopexit40$0;label=33;break;
 case 33: 
 var $lpad_phi38$0;
 var $lpad_phi38$1;
 var $95=$lpad_phi38$0;
 var $96=$lpad_phi38$1;
 var $_1=$95;var $_13=$96;label=64;break;
 case 34: 
 var $this2_i_i_i8=$agg_result;
 HEAP32[(($this2_i_i_i8)>>2)]=0; HEAP32[((($this2_i_i_i8)+(4))>>2)]=0; HEAP32[((($this2_i_i_i8)+(8))>>2)]=0;
 var $98=(($2+4)|0);
 HEAP32[(($98)>>2)]=0;
 var $99=(($2)|0);
 HEAP32[(($99)>>2)]=6832;
 var $100=_strlen($90);
 var $101=(($90+$100)|0);
 var $102=$__mb_i;
 var $$etemp$11$0=8;
 var $$etemp$11$1=0;

 var $103=$__bn_i;
 var $$etemp$12$0=4;
 var $$etemp$12$1=0;

 var $104=$__nn_i;
 var $$etemp$13$0=4;
 var $$etemp$13$1=0;

 var $tmpcast_i=$__mb_i;
 var $$etemp$14$0=0;
 var $$etemp$14$1=0;
 var $st$15$0=(($__mb_i)|0);
 HEAP32[(($st$15$0)>>2)]=$$etemp$14$0;
 var $st$16$1=(($__mb_i+4)|0);
 HEAP32[(($st$16$1)>>2)]=$$etemp$14$1;
 var $105=($100|0)>0;
 if($105){label=35;break;}else{label=54;break;}
 case 35: 
 var $106=$__buf_i;
 var $107=(($2)|0);
 var $108=$2;
 var $109=$101;
 var $110=(($__buf_i)|0);
 var $111=(($__buf_i+128)|0);
 var $112=(($agg_result)|0);
 var $113=(($agg_result+4)|0);
 var $114=(($agg_result+8)|0);
 var $_04_i=$90;var $116=6832;label=36;break;
 case 36: 
 var $116;
 var $_04_i;
 var $$etemp$17$0=128;
 var $$etemp$17$1=0;

 HEAP32[(($__nn_i)>>2)]=$_04_i;
 var $117=(($116+16)|0);
 var $118=HEAP32[(($117)>>2)];
 var $119=$_04_i;
 var $120=((($109)-($119))|0);
 var $121=($120|0)>32;
 var $122=(($_04_i+32)|0);
 var $123=($121?$122:$101);
 var $124=(function() { try { __THREW__ = 0; return FUNCTION_TABLE[$118]($107,$tmpcast_i,$_04_i,$123,$__nn_i,$110,$111,$__bn_i) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=59;break; }
 case 37: 
 var $125=($124|0)==2;
 var $126=HEAP32[(($__nn_i)>>2)];
 var $127=($126|0)==($_04_i|0);
 var $or_cond2_i=$125|$127;
 if($or_cond2_i){label=39;break;}else{label=38;break;}
 case 38: 
 var $128=HEAP32[(($__bn_i)>>2)];
 var $129=($110>>>0)<($128>>>0);
 if($129){var $__p_03_i=$110;label=41;break;}else{var $161=$126;label=52;break;}
 case 39: 
 (function() { try { __THREW__ = 0; return __ZNSt3__121__throw_runtime_errorEPKc(2152) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=60;break; }
 case 40: 
 throw "Reached an unreachable!";
 case 41: 
 var $__p_03_i;
 var $131=HEAP32[(($__p_03_i)>>2)];
 var $132=HEAP8[($this2_i_i_i8)];
 var $133=$132&1;
 var $134=(($133<<24)>>24)!=0;
 if($134){label=43;break;}else{label=42;break;}
 case 42: 
 var $136=($132&255);
 var $137=$136>>>1;
 var $__sz_0_i3=$137;var $__cap_0_i2=1;label=44;break;
 case 43: 
 var $139=HEAP32[(($112)>>2)];
 var $140=$139&-2;
 var $141=((($140)-(1))|0);
 var $142=HEAP32[(($113)>>2)];
 var $__sz_0_i3=$142;var $__cap_0_i2=$141;label=44;break;
 case 44: 
 var $__cap_0_i2;
 var $__sz_0_i3;
 var $144=($__sz_0_i3|0)==($__cap_0_i2|0);
 if($144){label=45;break;}else{label=47;break;}
 case 45: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE9__grow_byEjjjjjj($agg_result,$__cap_0_i2,1,$__cap_0_i2,$__cap_0_i2,0,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=58;break; }
 case 46: 
 var $146=HEAP8[($this2_i_i_i8)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=48;break;}else{label=49;break;}
 case 47: 
 if($134){label=49;break;}else{label=48;break;}
 case 48: 
 var $151=$__sz_0_i3<<1;
 var $152=((($151)+(2))|0);
 var $153=(($152)&255);
 HEAP8[($this2_i_i_i8)]=$153;
 var $__p_0_sum_pre_i4=((($__sz_0_i3)+(1))|0);
 var $_pn_i6=$113;var $__p_0_sum_pre_phi_i5=$__p_0_sum_pre_i4;label=50;break;
 case 49: 
 var $154=HEAP32[(($114)>>2)];
 var $155=((($__sz_0_i3)+(1))|0);
 HEAP32[(($113)>>2)]=$155;
 var $_pn_i6=$154;var $__p_0_sum_pre_phi_i5=$155;label=50;break;
 case 50: 
 var $__p_0_sum_pre_phi_i5;
 var $_pn_i6;
 var $__p_0_i7=(($_pn_i6+($__sz_0_i3<<2))|0);
 HEAP32[(($__p_0_i7)>>2)]=$131;
 var $156=(($_pn_i6+($__p_0_sum_pre_phi_i5<<2))|0);
 HEAP32[(($156)>>2)]=0;
 var $157=(($__p_03_i+4)|0);
 var $158=HEAP32[(($__bn_i)>>2)];
 var $159=($157>>>0)<($158>>>0);
 if($159){var $__p_03_i=$157;label=41;break;}else{label=51;break;}
 case 51: 
 var $_pre_i=HEAP32[(($__nn_i)>>2)];
 var $161=$_pre_i;label=52;break;
 case 52: 
 var $161;
 var $$etemp$18$0=128;
 var $$etemp$18$1=0;

 var $162=($161>>>0)<($101>>>0);
 if($162){label=53;break;}else{label=54;break;}
 case 53: 
 var $_pre44=HEAP32[(($108)>>2)];
 var $_04_i=$161;var $116=$_pre44;label=36;break;
 case 54: 
 var $$etemp$19$0=8;
 var $$etemp$19$1=0;

 var $$etemp$20$0=4;
 var $$etemp$20$1=0;

 var $$etemp$21$0=4;
 var $$etemp$21$1=0;

 var $163=HEAP8[($this2_i_i_i)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=57;break;}else{label=55;break;}
 case 55: 
 var $167=(($__ndflt+8)|0);
 var $168=HEAP32[(($167)>>2)];
 var $169=($168|0)==0;
 if($169){label=57;break;}else{label=56;break;}
 case 56: 
 _free($168);
 label=57;break;
 case 57: 
 STACKTOP=sp;return;
 case 58: 
 var $lpad_loopexit$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit$1;var $lpad_phi$0=$lpad_loopexit$0;label=61;break;
 case 59: 
 var $lpad_loopexit31$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit31$1 = tempRet0;
 var $lpad_phi$1=$lpad_loopexit31$1;var $lpad_phi$0=$lpad_loopexit31$0;label=61;break;
 case 60: 
 var $lpad_nonloopexit32$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit32$1 = tempRet0;
 var $lpad_phi$1=$lpad_nonloopexit32$1;var $lpad_phi$0=$lpad_nonloopexit32$0;label=61;break;
 case 61: 
 var $lpad_phi$0;
 var $lpad_phi$1;
 var $171=$lpad_phi$0;
 var $172=$lpad_phi$1;
 var $173=HEAP8[($this2_i_i_i8)];
 var $174=$173&1;
 var $175=(($174<<24)>>24)==0;
 if($175){var $_1=$171;var $_13=$172;label=64;break;}else{label=62;break;}
 case 62: 
 var $177=HEAP32[(($114)>>2)];
 var $178=($177|0)==0;
 if($178){var $_1=$171;var $_13=$172;label=64;break;}else{label=63;break;}
 case 63: 
 var $180=$177;
 _free($180);
 var $_1=$171;var $_13=$172;label=64;break;
 case 64: 
 var $_13;
 var $_1;
 var $181=HEAP8[($this2_i_i_i)];
 var $182=$181&1;
 var $183=(($182<<24)>>24)==0;
 if($183){label=67;break;}else{label=65;break;}
 case 65: 
 var $185=(($__ndflt+8)|0);
 var $186=HEAP32[(($185)>>2)];
 var $187=($186|0)==0;
 if($187){label=67;break;}else{label=66;break;}
 case 66: 
 _free($186);
 label=67;break;
 case 67: 
 var $189$0=$_1;
 var $189$1=0;
 var $190$0=$189$0;
 var $190$1=$_13;
 ___resumeException($190$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18messagesIwE8do_closeEi($this,$__c){
 var label=0;


 var $1=($__c|0)==-1;
 var $2=$__c<<1;
 var $3=$2;
 var $4=($1?-1:$3);
 var $5=_catclose($4);
 return;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6352;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=HEAP8[(19232)];
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=6;break;}
 case 2: 
 var $7=___cxa_guard_acquire(19232);
 var $8=($7|0)==0;
 if($8){label=6;break;}else{label=3;break;}
 case 3: 
 var $10=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=5;break; }
 case 4: 
 HEAP32[((17128)>>2)]=$10;

 label=6;break;
 case 5: 
 var $13$0 = ___cxa_find_matching_catch(-1, -1,0); var $13$1 = tempRet0;

 label=9;break;
 case 6: 
 var $15=HEAP32[((17128)>>2)];
 var $16=($3|0)==($15|0);
 if($16){label=10;break;}else{label=7;break;}
 case 7: 
 var $18=HEAP32[(($2)>>2)];
 (function() { try { __THREW__ = 0; return _freelocale($18) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=8;break; }
 case 8: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 label=9;break;
 case 9: 
 __ZSt9terminatev();
 throw "Reached an unreachable!";
 case 10: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv(){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=___cxa_allocate_exception(8);
 var $2=$1;
 HEAP32[(($2)>>2)]=5320;
 label=2;break;
 case 2: 
 var $4=_malloc(19);
 var $5=($4|0)==0;
 if($5){label=3;break;}else{label=17;break;}
 case 3: 
 var $7=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $8=($7|0)==0;
 if($8){label=10;break;}else{label=4;break;}
 case 4: 
 var $10=$7;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$10]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=5;break; }
 case 5: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=7;break;
 case 6: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=7;break;
 case 7: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $12=$lpad_phi_i$1;
 var $13=($12|0)<0;
 if($13){label=8;break;}else{var $eh_lpad_body2$1=$lpad_phi_i$1;var $eh_lpad_body2$0=$lpad_phi_i$0;label=13;break;}
 case 8: 
 var $15=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($15) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=12;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $17=___cxa_allocate_exception(4);
 var $18=$17;
 HEAP32[(($18)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($17,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=6;break; }
 case 11: 
 throw "Reached an unreachable!";
 case 12: 
 var $21$0 = ___cxa_find_matching_catch(-1, -1); var $21$1 = tempRet0;
 var $eh_lpad_body2$1=$21$1;var $eh_lpad_body2$0=$21$0;label=13;break;
 case 13: 
 var $eh_lpad_body2$0;
 var $eh_lpad_body2$1;
 var $22=$eh_lpad_body2$1;
 var $23=($22|0)<0;
 if($23){label=14;break;}else{var $eh_lpad_body_i$1=$eh_lpad_body2$1;var $eh_lpad_body_i$0=$eh_lpad_body2$0;label=18;break;}
 case 14: 
 var $25=$eh_lpad_body2$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($25) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=16;break; }
 case 15: 
 throw "Reached an unreachable!";
 case 16: 
 var $27$0 = ___cxa_find_matching_catch(-1, -1); var $27$1 = tempRet0;
 var $eh_lpad_body_i$1=$27$1;var $eh_lpad_body_i$0=$27$0;label=18;break;
 case 17: 
 var $29=(($1+4)|0);
 var $30=$29;
 var $31=$4;
 var $32=(($4+4)|0);
 var $33=$32;
 HEAP32[(($33)>>2)]=6;
 HEAP32[(($31)>>2)]=6;
 var $34=(($4+12)|0);
 HEAP32[(($30)>>2)]=$34;
 var $35=(($4+8)|0);
 var $36=$35;
 HEAP32[(($36)>>2)]=0;
 assert(7 % 1 === 0);HEAP8[($34)]=HEAP8[(3448)];HEAP8[((($34)+(1))|0)]=HEAP8[(3449)];HEAP8[((($34)+(2))|0)]=HEAP8[(3450)];HEAP8[((($34)+(3))|0)]=HEAP8[(3451)];HEAP8[((($34)+(4))|0)]=HEAP8[(3452)];HEAP8[((($34)+(5))|0)]=HEAP8[(3453)];HEAP8[((($34)+(6))|0)]=HEAP8[(3454)];
 HEAP32[(($2)>>2)]=5288;
 ___cxa_throw($1,11752,(330));
 throw "Reached an unreachable!";
 case 18: 
 var $eh_lpad_body_i$0;
 var $eh_lpad_body_i$1;
 var $37=$1;

 ___cxa_free_exception($1);
 ___resumeException($eh_lpad_body_i$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__imp7installEPNS0_5facetEl($this,$f,$id){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f)|0);
 var $2=(($f+4)|0);
 var $3=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+1,tempValue);
 var $4=(($this+12)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=(($this+8)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=$5;
 var $9=$7;
 var $10=((($8)-($9))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>($id>>>0);
 if($12){var $115=$7;label=43;break;}else{label=2;break;}
 case 2: 
 var $14=((($id)+(1))|0);
 var $15=($11>>>0)<($14>>>0);
 if($15){label=3;break;}else{label=35;break;}
 case 3: 
 var $17=((($14)-($11))|0);
 var $18=(($this+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19;
 var $21=((($20)-($8))|0);
 var $22=$21>>2;
 var $23=($22>>>0)<($17>>>0);
 if($23){label=7;break;}else{var $_0_i_i=$17;var $24=$5;label=4;break;}
 case 4: 
 var $24;
 var $_0_i_i;
 var $25=($24|0)==0;
 if($25){var $27=0;label=6;break;}else{label=5;break;}
 case 5: 
 HEAP32[(($24)>>2)]=0;
 var $_pre1_i_i=HEAP32[(($4)>>2)];
 var $27=$_pre1_i_i;label=6;break;
 case 6: 
 var $27;
 var $28=(($27+4)|0);
 HEAP32[(($4)>>2)]=$28;
 var $29=((($_0_i_i)-(1))|0);
 var $30=($29|0)==0;
 if($30){label=34;break;}else{var $_0_i_i=$29;var $24=$28;label=4;break;}
 case 7: 
 var $32=(($this+24)|0);
 var $33=($14>>>0)>1073741823;
 if($33){label=8;break;}else{label=10;break;}
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__120__vector_base_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=38;break; }
 case 9: 
 throw "Reached an unreachable!";
 case 10: 
 var $36=((($20)-($9))|0);
 var $37=$36>>2;
 var $38=($37>>>0)<536870911;
 if($38){label=11;break;}else{var $_0_i569_i=1073741823;label=14;break;}
 case 11: 
 var $39=$36>>1;
 var $40=($39>>>0)<($14>>>0);
 var $41=($40?$14:$39);
 var $42=($41|0)==0;
 if($42){var $70=0;var $_0_i57_i=0;label=26;break;}else{label=12;break;}
 case 12: 
 var $44=(($this+136)|0);
 var $45=HEAP8[($44)];
 var $46=(($45<<24)>>24)==0;
 var $47=($41>>>0)<29;
 var $or_cond_i_i_i_i_i=$46&$47;
 if($or_cond_i_i_i_i_i){label=13;break;}else{var $_0_i569_i=$41;label=14;break;}
 case 13: 
 HEAP8[($44)]=1;
 var $49=$32;
 var $70=$49;var $_0_i57_i=$41;label=26;break;
 case 14: 
 var $_0_i569_i;
 var $50=$_0_i569_i<<2;
 var $51=($50|0)==0;
 var $_size_i_i=($51?1:$50);
 label=15;break;
 case 15: 
 var $53=_malloc($_size_i_i);
 var $54=($53|0)==0;
 if($54){label=16;break;}else{label=25;break;}
 case 16: 
 var $56=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $57=($56|0)==0;
 if($57){label=23;break;}else{label=17;break;}
 case 17: 
 var $59=$56;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$59]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=18;break; }
 case 18: 
 var $lpad_loopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_loopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_loopexit_i_i$0;label=20;break;
 case 19: 
 var $lpad_nonloopexit_i_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i_i$1 = tempRet0;
 var $lpad_phi_i_i$1=$lpad_nonloopexit_i_i$1;var $lpad_phi_i_i$0=$lpad_nonloopexit_i_i$0;label=20;break;
 case 20: 
 var $lpad_phi_i_i$0;
 var $lpad_phi_i_i$1;
 var $61=$lpad_phi_i_i$1;
 var $62=($61|0)<0;
 if($62){label=21;break;}else{var $eh_lpad_body$1=$lpad_phi_i_i$1;var $eh_lpad_body$0=$lpad_phi_i_i$0;label=39;break;}
 case 21: 
 var $64=$lpad_phi_i_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($64) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=38;break; }
 case 22: 
 throw "Reached an unreachable!";
 case 23: 
 var $66=___cxa_allocate_exception(4);
 var $67=$66;
 HEAP32[(($67)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($66,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=19;break; }
 case 24: 
 throw "Reached an unreachable!";
 case 25: 
 var $69=$53;
 var $70=$69;var $_0_i57_i=$_0_i569_i;label=26;break;
 case 26: 
 var $_0_i57_i;
 var $70;
 var $71=(($70+($11<<2))|0);
 var $_0_i2_i=$17;var $73=$71;label=27;break;
 case 27: 
 var $73;
 var $_0_i2_i;
 var $74=($73|0)==0;
 if($74){var $76=0;label=29;break;}else{label=28;break;}
 case 28: 
 HEAP32[(($73)>>2)]=0;
 var $76=$73;label=29;break;
 case 29: 
 var $76;
 var $77=(($76+4)|0);
 var $78=((($_0_i2_i)-(1))|0);
 var $79=($78|0)==0;
 if($79){label=30;break;}else{var $_0_i2_i=$78;var $73=$77;label=27;break;}
 case 30: 
 var $80=(($70+($_0_i57_i<<2))|0);
 var $81=HEAP32[(($6)>>2)];
 var $82=HEAP32[(($4)>>2)];
 var $83=$82;
 var $84=$81;
 var $85=((($83)-($84))|0);
 var $86=$85>>2;
 var $_sum_i=((($11)-($86))|0);
 var $87=(($70+($_sum_i<<2))|0);
 var $88=$87;
 var $89=$81;
 assert($85 % 1 === 0);(_memcpy($88, $89, $85)|0);
 HEAP32[(($6)>>2)]=$87;
 HEAP32[(($4)>>2)]=$77;
 HEAP32[(($18)>>2)]=$80;
 var $90=($81|0)==0;
 if($90){label=34;break;}else{label=31;break;}
 case 31: 
 var $92=$32;
 var $93=($92|0)==($81|0);
 if($93){label=32;break;}else{label=33;break;}
 case 32: 
 var $95=(($this+136)|0);
 HEAP8[($95)]=0;
 label=34;break;
 case 33: 
 _free($89);
 label=34;break;
 case 34: 
 var $_pre2=HEAP32[(($6)>>2)];
 var $115=$_pre2;label=43;break;
 case 35: 
 var $97=($11>>>0)>($14>>>0);
 if($97){label=36;break;}else{var $115=$7;label=43;break;}
 case 36: 
 var $99=(($7+($14<<2))|0);
 var $100=($5|0)==($99|0);
 if($100){var $115=$7;label=43;break;}else{label=37;break;}
 case 37: 
 var $__new_last2_i_i_i=$99;
 var $scevgep_i_i_i=((($5)-(4))|0);
 var $scevgep1_i_i_i=$scevgep_i_i_i;
 var $101=(((-$__new_last2_i_i_i))|0);
 var $uglygep_i_i_i=(($scevgep1_i_i_i+$101)|0);
 var $uglygep3_i_i_i=$uglygep_i_i_i;
 var $102=$uglygep3_i_i_i>>>2;
 var $103=$102^-1;
 var $scevgep4_i_i_i=(($5+($103<<2))|0);
 HEAP32[(($4)>>2)]=$scevgep4_i_i_i;
 var $115=$7;label=43;break;
 case 38: 
 var $105$0 = ___cxa_find_matching_catch(-1, -1); var $105$1 = tempRet0;
 var $eh_lpad_body$1=$105$1;var $eh_lpad_body$0=$105$0;label=39;break;
 case 39: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;
 var $106=($f|0)==0;
 if($106){label=42;break;}else{label=40;break;}
 case 40: 
 var $108=(tempValue=HEAP32[(($2)>>2)],HEAP32[(($2)>>2)]=tempValue+-1,tempValue);
 var $109=($108|0)==0;
 if($109){label=41;break;}else{label=42;break;}
 case 41: 
 var $111=$f;
 var $112=HEAP32[(($111)>>2)];
 var $113=(($112+8)|0);
 var $114=HEAP32[(($113)>>2)];
 FUNCTION_TABLE[$114]($1);
 label=42;break;
 case 42: 
 ___resumeException($eh_lpad_body$0)
 case 43: 
 var $115;
 var $116=(($115+($id<<2))|0);
 var $117=HEAP32[(($116)>>2)];
 var $118=($117|0)==0;
 if($118){var $129=$115;label=47;break;}else{label=44;break;}
 case 44: 
 var $120=(($117+4)|0);
 var $121=(tempValue=HEAP32[(($120)>>2)],HEAP32[(($120)>>2)]=tempValue+-1,tempValue);
 var $122=($121|0)==0;
 if($122){label=45;break;}else{label=46;break;}
 case 45: 
 var $124=(($117)|0);
 var $125=$117;
 var $126=HEAP32[(($125)>>2)];
 var $127=(($126+8)|0);
 var $128=HEAP32[(($127)>>2)];
 FUNCTION_TABLE[$128]($124);
 label=46;break;
 case 46: 
 var $_pre=HEAP32[(($6)>>2)];
 var $129=$_pre;label=47;break;
 case 47: 
 var $129;
 var $130=(($129+($id<<2))|0);
 HEAP32[(($130)>>2)]=$f;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 __ZNSt3__16locale5__impD2Ev($this);
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5__impD2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6608;
 var $2=(($this+12)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($this+8)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($3|0)==($5|0);
 if($6){var $31=$3;label=7;break;}else{var $i_02=0;var $8=$5;var $7=$3;label=2;break;}
 case 2: 
 var $7;
 var $8;
 var $i_02;
 var $9=(($8+($i_02<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==0;
 if($11){var $24=$7;var $23=$8;label=6;break;}else{label=3;break;}
 case 3: 
 var $13=(($10+4)|0);
 var $14=(tempValue=HEAP32[(($13)>>2)],HEAP32[(($13)>>2)]=tempValue+-1,tempValue);
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=5;break;}
 case 4: 
 var $17=(($10)|0);
 var $18=$10;
 var $19=HEAP32[(($18)>>2)];
 var $20=(($19+8)|0);
 var $21=HEAP32[(($20)>>2)];
 FUNCTION_TABLE[$21]($17);
 label=5;break;
 case 5: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre4=HEAP32[(($4)>>2)];
 var $24=$_pre;var $23=$_pre4;label=6;break;
 case 6: 
 var $23;
 var $24;
 var $25=((($i_02)+(1))|0);
 var $26=$24;
 var $27=$23;
 var $28=((($26)-($27))|0);
 var $29=$28>>2;
 var $30=($25>>>0)<($29>>>0);
 if($30){var $i_02=$25;var $8=$23;var $7=$24;label=2;break;}else{var $31=$23;label=7;break;}
 case 7: 
 var $31;
 var $32=(($this+144)|0);
 var $33=$32;
 var $34=HEAP8[($33)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){var $42=$31;label=10;break;}else{label=8;break;}
 case 8: 
 var $38=(($this+152)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==0;
 if($40){var $42=$31;label=10;break;}else{label=9;break;}
 case 9: 
 _free($39);
 var $_pre1=HEAP32[(($4)>>2)];
 var $42=$_pre1;label=10;break;
 case 10: 
 var $42;
 var $43=($42|0)==0;
 if($43){label=16;break;}else{label=11;break;}
 case 11: 
 var $45=HEAP32[(($2)>>2)];
 var $46=($45|0)==($42|0);
 if($46){label=13;break;}else{label=12;break;}
 case 12: 
 var $__new_last2_i_i_i_i_i=$42;
 var $scevgep_i_i_i_i_i=((($45)-(4))|0);
 var $scevgep1_i_i_i_i_i=$scevgep_i_i_i_i_i;
 var $47=(((-$__new_last2_i_i_i_i_i))|0);
 var $uglygep_i_i_i_i_i=(($scevgep1_i_i_i_i_i+$47)|0);
 var $uglygep3_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $48=$uglygep3_i_i_i_i_i>>>2;
 var $49=$48^-1;
 var $scevgep4_i_i_i_i_i=(($45+($49<<2))|0);
 HEAP32[(($2)>>2)]=$scevgep4_i_i_i_i_i;
 label=13;break;
 case 13: 
 var $50=(($this+24)|0);
 var $51=$50;
 var $52=($51|0)==($42|0);
 if($52){label=14;break;}else{label=15;break;}
 case 14: 
 var $54=(($this+136)|0);
 HEAP8[($54)]=0;
 label=16;break;
 case 15: 
 var $56=$42;
 _free($56);
 label=16;break;
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16localeC2Ev($this){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+448)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i_i113_i_i=sp;
 var $__p_i_i_i109_i_i=(sp)+(16);
 var $__p_i_i_i102_i_i=(sp)+(32);
 var $__p_i_i_i96_i_i=(sp)+(48);
 var $__p_i_i_i92_i_i=(sp)+(64);
 var $__p_i_i_i88_i_i=(sp)+(80);
 var $__p_i_i_i84_i_i=(sp)+(96);
 var $__p_i_i_i80_i_i=(sp)+(112);
 var $__p_i_i_i76_i_i=(sp)+(128);
 var $__p_i_i_i72_i_i=(sp)+(144);
 var $__p_i_i_i68_i_i=(sp)+(160);
 var $__p_i_i_i64_i_i=(sp)+(176);
 var $__p_i_i_i60_i_i=(sp)+(192);
 var $__p_i_i_i56_i_i=(sp)+(208);
 var $__p_i_i_i52_i_i=(sp)+(224);
 var $__p_i_i_i48_i_i=(sp)+(240);
 var $__p_i_i_i44_i_i=(sp)+(256);
 var $__p_i_i_i40_i_i=(sp)+(272);
 var $__p_i_i_i36_i_i=(sp)+(288);
 var $__p_i_i_i32_i_i=(sp)+(304);
 var $__p_i_i_i28_i_i=(sp)+(320);
 var $__p_i_i_i24_i_i=(sp)+(336);
 var $__p_i_i_i20_i_i=(sp)+(352);
 var $__p_i_i_i16_i_i=(sp)+(368);
 var $__p_i_i_i12_i_i=(sp)+(384);
 var $__p_i_i_i8_i_i=(sp)+(400);
 var $__p_i_i_i4_i_i=(sp)+(416);
 var $__p_i_i_i_i_i=(sp)+(432);
 var $1=HEAP8[(19216)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=122;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19216);
 var $5=($4|0)==0;
 if($5){label=122;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19224)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=121;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19224);
 var $11=($10|0)==0;
 if($11){label=121;break;}else{label=5;break;}
 case 5: 
 HEAP32[((17404)>>2)]=0;
 HEAP32[((17400)>>2)]=6608;
 HEAP8[(17536)]=1;
 HEAP32[((17412)>>2)]=17424;
 HEAP32[((17408)>>2)]=17424;
 HEAP32[((17416)>>2)]=17536;
 var $_0_i_i_i_i=28;var $14=17424;label=6;break;
 case 6: 
 var $14;
 var $_0_i_i_i_i;
 HEAP32[(($14)>>2)]=0;
 var $_pre1_i_i_i_i=HEAP32[((17412)>>2)];
 var $15=(($_pre1_i_i_i_i+4)|0);
 HEAP32[((17412)>>2)]=$15;
 var $16=((($_0_i_i_i_i)-(1))|0);
 var $17=($16|0)==0;
 if($17){label=7;break;}else{var $_0_i_i_i_i=$16;var $14=$15;label=6;break;}
 case 7: 
 HEAP8[(17544)]=2;
 HEAP8[(17545)]=67;
 HEAP8[(17546)]=0;
 var $18=HEAP32[((17408)>>2)];
 var $19=($15|0)==($18|0);
 if($19){label=9;break;}else{label=8;break;}
 case 8: 
 var $__new_last2_i_i_i_i_i=$18;
 var $scevgep1_i_i_i_i_i=$_pre1_i_i_i_i;
 var $20=(((-$__new_last2_i_i_i_i_i))|0);
 var $uglygep_i_i_i_i_i=(($scevgep1_i_i_i_i_i+$20)|0);
 var $uglygep3_i_i_i_i_i=$uglygep_i_i_i_i_i;
 var $21=$uglygep3_i_i_i_i_i>>>2;
 var $_sum=(((-$21))|0);
 var $scevgep4_i_i_i_i_i=(($_pre1_i_i_i_i+($_sum<<2))|0);
 HEAP32[((17412)>>2)]=$scevgep4_i_i_i_i_i;
 label=9;break;
 case 9: 
 HEAP32[((17356)>>2)]=0;
 HEAP32[((17352)>>2)]=6312;
 var $23=$__p_i_i_i4_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $24=HEAP32[((18352)>>2)];
 var $25=($24|0)==-1;
 if($25){label=11;break;}else{label=10;break;}
 case 10: 
 var $27=(($__p_i_i_i4_i_i)|0);
 HEAP32[(($27)>>2)]=18352;
 var $28=(($__p_i_i_i4_i_i+4)|0);
 HEAP32[(($28)>>2)]=(202);
 var $29=(($__p_i_i_i4_i_i+8)|0);
 HEAP32[(($29)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18352,$23) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=110;break; }
 case 11: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $30=HEAP32[((18356)>>2)];
 var $31=((($30)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17352,$31) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=110;break; }
 case 12: 
 HEAP32[((17348)>>2)]=0;
 HEAP32[((17344)>>2)]=6272;
 var $33=$__p_i_i_i8_i_i;
 var $$etemp$2$0=12;
 var $$etemp$2$1=0;

 var $34=HEAP32[((18344)>>2)];
 var $35=($34|0)==-1;
 if($35){label=14;break;}else{label=13;break;}
 case 13: 
 var $37=(($__p_i_i_i8_i_i)|0);
 HEAP32[(($37)>>2)]=18344;
 var $38=(($__p_i_i_i8_i_i+4)|0);
 HEAP32[(($38)>>2)]=(202);
 var $39=(($__p_i_i_i8_i_i+8)|0);
 HEAP32[(($39)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18344,$33) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=110;break; }
 case 14: 
 var $$etemp$3$0=12;
 var $$etemp$3$1=0;

 var $40=HEAP32[((18348)>>2)];
 var $41=((($40)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17344,$41) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=110;break; }
 case 15: 
 HEAP32[((17572)>>2)]=0;
 HEAP32[((17568)>>2)]=6720;
 HEAP32[((17576)>>2)]=0;
 HEAP8[(17580)]=0;
 var $42=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=16;break; }
 case 16: 
 var $44$0 = ___cxa_find_matching_catch(-1, -1,0); var $44$1 = tempRet0;
 var $45=$44$0;
 ___clang_call_terminate($45);
 throw "Reached an unreachable!";
 case 17: 
 var $47=HEAP32[(($42)>>2)];
 HEAP32[((17576)>>2)]=$47;
 var $48=$__p_i_i_i12_i_i;
 var $$etemp$4$0=12;
 var $$etemp$4$1=0;

 var $49=HEAP32[((18672)>>2)];
 var $50=($49|0)==-1;
 if($50){label=19;break;}else{label=18;break;}
 case 18: 
 var $52=(($__p_i_i_i12_i_i)|0);
 HEAP32[(($52)>>2)]=18672;
 var $53=(($__p_i_i_i12_i_i+4)|0);
 HEAP32[(($53)>>2)]=(202);
 var $54=(($__p_i_i_i12_i_i+8)|0);
 HEAP32[(($54)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18672,$48) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=110;break; }
 case 19: 
 var $$etemp$5$0=12;
 var $$etemp$5$1=0;

 var $55=HEAP32[((18676)>>2)];
 var $56=((($55)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17568,$56) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=110;break; }
 case 20: 
 HEAP32[((17564)>>2)]=0;
 HEAP32[((17560)>>2)]=6640;
 var $58=$__p_i_i_i16_i_i;
 var $$etemp$6$0=12;
 var $$etemp$6$1=0;

 var $59=HEAP32[((18664)>>2)];
 var $60=($59|0)==-1;
 if($60){label=22;break;}else{label=21;break;}
 case 21: 
 var $62=(($__p_i_i_i16_i_i)|0);
 HEAP32[(($62)>>2)]=18664;
 var $63=(($__p_i_i_i16_i_i+4)|0);
 HEAP32[(($63)>>2)]=(202);
 var $64=(($__p_i_i_i16_i_i+8)|0);
 HEAP32[(($64)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18664,$58) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=110;break; }
 case 22: 
 var $$etemp$7$0=12;
 var $$etemp$7$1=0;

 var $65=HEAP32[((18668)>>2)];
 var $66=((($65)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17560,$66) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=110;break; }
 case 23: 
 HEAP32[((17380)>>2)]=0;
 HEAP32[((17376)>>2)]=6408;
 var $68=$__p_i_i_i20_i_i;
 var $$etemp$8$0=12;
 var $$etemp$8$1=0;

 var $69=HEAP32[((18368)>>2)];
 var $70=($69|0)==-1;
 if($70){label=25;break;}else{label=24;break;}
 case 24: 
 var $72=(($__p_i_i_i20_i_i)|0);
 HEAP32[(($72)>>2)]=18368;
 var $73=(($__p_i_i_i20_i_i+4)|0);
 HEAP32[(($73)>>2)]=(202);
 var $74=(($__p_i_i_i20_i_i+8)|0);
 HEAP32[(($74)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18368,$68) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=110;break; }
 case 25: 
 var $$etemp$9$0=12;
 var $$etemp$9$1=0;

 var $75=HEAP32[((18372)>>2)];
 var $76=((($75)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17376,$76) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=110;break; }
 case 26: 
 HEAP32[((17364)>>2)]=0;
 HEAP32[((17360)>>2)]=6352;
 var $77=HEAP8[(19232)];
 var $78=(($77<<24)>>24)==0;
 if($78){label=27;break;}else{label=31;break;}
 case 27: 
 var $80=___cxa_guard_acquire(19232);
 var $81=($80|0)==0;
 if($81){label=31;break;}else{label=28;break;}
 case 28: 
 var $83=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=30;break; }
 case 29: 
 HEAP32[((17128)>>2)]=$83;

 label=31;break;
 case 30: 
 var $85$0 = ___cxa_find_matching_catch(-1, -1,0); var $85$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$85$1;var $eh_lpad_body_i_i$0=$85$0;label=111;break;
 case 31: 
 var $87=HEAP32[((17128)>>2)];
 HEAP32[((17368)>>2)]=$87;
 var $88=$__p_i_i_i24_i_i;
 var $$etemp$10$0=12;
 var $$etemp$10$1=0;

 var $89=HEAP32[((18360)>>2)];
 var $90=($89|0)==-1;
 if($90){label=33;break;}else{label=32;break;}
 case 32: 
 var $92=(($__p_i_i_i24_i_i)|0);
 HEAP32[(($92)>>2)]=18360;
 var $93=(($__p_i_i_i24_i_i+4)|0);
 HEAP32[(($93)>>2)]=(202);
 var $94=(($__p_i_i_i24_i_i+8)|0);
 HEAP32[(($94)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18360,$88) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=33;break; } else { label=110;break; }
 case 33: 
 var $$etemp$11$0=12;
 var $$etemp$11$1=0;

 var $95=HEAP32[((18364)>>2)];
 var $96=((($95)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17360,$96) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=34;break; } else { label=110;break; }
 case 34: 
 HEAP32[((17388)>>2)]=0;
 HEAP32[((17384)>>2)]=6464;
 var $98=$__p_i_i_i28_i_i;
 var $$etemp$12$0=12;
 var $$etemp$12$1=0;

 var $99=HEAP32[((18376)>>2)];
 var $100=($99|0)==-1;
 if($100){label=36;break;}else{label=35;break;}
 case 35: 
 var $102=(($__p_i_i_i28_i_i)|0);
 HEAP32[(($102)>>2)]=18376;
 var $103=(($__p_i_i_i28_i_i+4)|0);
 HEAP32[(($103)>>2)]=(202);
 var $104=(($__p_i_i_i28_i_i+8)|0);
 HEAP32[(($104)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18376,$98) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=36;break; } else { label=110;break; }
 case 36: 
 var $$etemp$13$0=12;
 var $$etemp$13$1=0;

 var $105=HEAP32[((18380)>>2)];
 var $106=((($105)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17384,$106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=37;break; } else { label=110;break; }
 case 37: 
 HEAP32[((17396)>>2)]=0;
 HEAP32[((17392)>>2)]=6520;
 var $108=$__p_i_i_i32_i_i;
 var $$etemp$14$0=12;
 var $$etemp$14$1=0;

 var $109=HEAP32[((18384)>>2)];
 var $110=($109|0)==-1;
 if($110){label=39;break;}else{label=38;break;}
 case 38: 
 var $112=(($__p_i_i_i32_i_i)|0);
 HEAP32[(($112)>>2)]=18384;
 var $113=(($__p_i_i_i32_i_i+4)|0);
 HEAP32[(($113)>>2)]=(202);
 var $114=(($__p_i_i_i32_i_i+8)|0);
 HEAP32[(($114)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18384,$108) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=39;break; } else { label=110;break; }
 case 39: 
 var $$etemp$15$0=12;
 var $$etemp$15$1=0;

 var $115=HEAP32[((18388)>>2)];
 var $116=((($115)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17392,$116) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=40;break; } else { label=110;break; }
 case 40: 
 HEAP32[((17276)>>2)]=0;
 HEAP32[((17272)>>2)]=5816;
 HEAP8[(17280)]=46;
 HEAP8[(17281)]=44;
 HEAP32[((17284)>>2)]=0; HEAP32[((17288)>>2)]=0; HEAP32[((17292)>>2)]=0;
 var $118=$__p_i_i_i36_i_i;
 var $$etemp$16$0=12;
 var $$etemp$16$1=0;

 var $119=HEAP32[((18288)>>2)];
 var $120=($119|0)==-1;
 if($120){label=42;break;}else{label=41;break;}
 case 41: 
 var $122=(($__p_i_i_i36_i_i)|0);
 HEAP32[(($122)>>2)]=18288;
 var $123=(($__p_i_i_i36_i_i+4)|0);
 HEAP32[(($123)>>2)]=(202);
 var $124=(($__p_i_i_i36_i_i+8)|0);
 HEAP32[(($124)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18288,$118) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=42;break; } else { label=110;break; }
 case 42: 
 var $$etemp$17$0=12;
 var $$etemp$17$1=0;

 var $125=HEAP32[((18292)>>2)];
 var $126=((($125)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17272,$126) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=110;break; }
 case 43: 
 HEAP32[((17244)>>2)]=0;
 HEAP32[((17240)>>2)]=5768;
 HEAP32[((17248)>>2)]=46;
 HEAP32[((17252)>>2)]=44;
 HEAP32[((17256)>>2)]=0; HEAP32[((17260)>>2)]=0; HEAP32[((17264)>>2)]=0;
 var $128=$__p_i_i_i40_i_i;
 var $$etemp$18$0=12;
 var $$etemp$18$1=0;

 var $129=HEAP32[((18280)>>2)];
 var $130=($129|0)==-1;
 if($130){label=45;break;}else{label=44;break;}
 case 44: 
 var $132=(($__p_i_i_i40_i_i)|0);
 HEAP32[(($132)>>2)]=18280;
 var $133=(($__p_i_i_i40_i_i+4)|0);
 HEAP32[(($133)>>2)]=(202);
 var $134=(($__p_i_i_i40_i_i+8)|0);
 HEAP32[(($134)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18280,$128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=45;break; } else { label=110;break; }
 case 45: 
 var $$etemp$19$0=12;
 var $$etemp$19$1=0;

 var $135=HEAP32[((18284)>>2)];
 var $136=((($135)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17240,$136) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=110;break; }
 case 46: 
 HEAP32[((17340)>>2)]=0;
 HEAP32[((17336)>>2)]=6200;
 var $138=$__p_i_i_i44_i_i;
 var $$etemp$20$0=12;
 var $$etemp$20$1=0;

 var $139=HEAP32[((18336)>>2)];
 var $140=($139|0)==-1;
 if($140){label=48;break;}else{label=47;break;}
 case 47: 
 var $142=(($__p_i_i_i44_i_i)|0);
 HEAP32[(($142)>>2)]=18336;
 var $143=(($__p_i_i_i44_i_i+4)|0);
 HEAP32[(($143)>>2)]=(202);
 var $144=(($__p_i_i_i44_i_i+8)|0);
 HEAP32[(($144)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18336,$138) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=48;break; } else { label=110;break; }
 case 48: 
 var $$etemp$21$0=12;
 var $$etemp$21$1=0;

 var $145=HEAP32[((18340)>>2)];
 var $146=((($145)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17336,$146) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=49;break; } else { label=110;break; }
 case 49: 
 HEAP32[((17332)>>2)]=0;
 HEAP32[((17328)>>2)]=6128;
 var $148=$__p_i_i_i48_i_i;
 var $$etemp$22$0=12;
 var $$etemp$22$1=0;

 var $149=HEAP32[((18328)>>2)];
 var $150=($149|0)==-1;
 if($150){label=51;break;}else{label=50;break;}
 case 50: 
 var $152=(($__p_i_i_i48_i_i)|0);
 HEAP32[(($152)>>2)]=18328;
 var $153=(($__p_i_i_i48_i_i+4)|0);
 HEAP32[(($153)>>2)]=(202);
 var $154=(($__p_i_i_i48_i_i+8)|0);
 HEAP32[(($154)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18328,$148) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=110;break; }
 case 51: 
 var $$etemp$23$0=12;
 var $$etemp$23$1=0;

 var $155=HEAP32[((18332)>>2)];
 var $156=((($155)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17328,$156) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=52;break; } else { label=110;break; }
 case 52: 
 HEAP32[((17324)>>2)]=0;
 HEAP32[((17320)>>2)]=6064;
 var $158=$__p_i_i_i52_i_i;
 var $$etemp$24$0=12;
 var $$etemp$24$1=0;

 var $159=HEAP32[((18320)>>2)];
 var $160=($159|0)==-1;
 if($160){label=54;break;}else{label=53;break;}
 case 53: 
 var $162=(($__p_i_i_i52_i_i)|0);
 HEAP32[(($162)>>2)]=18320;
 var $163=(($__p_i_i_i52_i_i+4)|0);
 HEAP32[(($163)>>2)]=(202);
 var $164=(($__p_i_i_i52_i_i+8)|0);
 HEAP32[(($164)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18320,$158) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=54;break; } else { label=110;break; }
 case 54: 
 var $$etemp$25$0=12;
 var $$etemp$25$1=0;

 var $165=HEAP32[((18324)>>2)];
 var $166=((($165)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17320,$166) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=55;break; } else { label=110;break; }
 case 55: 
 HEAP32[((17316)>>2)]=0;
 HEAP32[((17312)>>2)]=6000;
 var $168=$__p_i_i_i56_i_i;
 var $$etemp$26$0=12;
 var $$etemp$26$1=0;

 var $169=HEAP32[((18312)>>2)];
 var $170=($169|0)==-1;
 if($170){label=57;break;}else{label=56;break;}
 case 56: 
 var $172=(($__p_i_i_i56_i_i)|0);
 HEAP32[(($172)>>2)]=18312;
 var $173=(($__p_i_i_i56_i_i+4)|0);
 HEAP32[(($173)>>2)]=(202);
 var $174=(($__p_i_i_i56_i_i+8)|0);
 HEAP32[(($174)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18312,$168) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=57;break; } else { label=110;break; }
 case 57: 
 var $$etemp$27$0=12;
 var $$etemp$27$1=0;

 var $175=HEAP32[((18316)>>2)];
 var $176=((($175)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17312,$176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=58;break; } else { label=110;break; }
 case 58: 
 HEAP32[((17612)>>2)]=0;
 HEAP32[((17608)>>2)]=7648;
 var $178=$__p_i_i_i60_i_i;
 var $$etemp$28$0=12;
 var $$etemp$28$1=0;

 var $179=HEAP32[((19152)>>2)];
 var $180=($179|0)==-1;
 if($180){label=60;break;}else{label=59;break;}
 case 59: 
 var $182=(($__p_i_i_i60_i_i)|0);
 HEAP32[(($182)>>2)]=19152;
 var $183=(($__p_i_i_i60_i_i+4)|0);
 HEAP32[(($183)>>2)]=(202);
 var $184=(($__p_i_i_i60_i_i+8)|0);
 HEAP32[(($184)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19152,$178) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=110;break; }
 case 60: 
 var $$etemp$29$0=12;
 var $$etemp$29$1=0;

 var $185=HEAP32[((19156)>>2)];
 var $186=((($185)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17608,$186) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=61;break; } else { label=110;break; }
 case 61: 
 HEAP32[((17604)>>2)]=0;
 HEAP32[((17600)>>2)]=7584;
 var $188=$__p_i_i_i64_i_i;
 var $$etemp$30$0=12;
 var $$etemp$30$1=0;

 var $189=HEAP32[((19144)>>2)];
 var $190=($189|0)==-1;
 if($190){label=63;break;}else{label=62;break;}
 case 62: 
 var $192=(($__p_i_i_i64_i_i)|0);
 HEAP32[(($192)>>2)]=19144;
 var $193=(($__p_i_i_i64_i_i+4)|0);
 HEAP32[(($193)>>2)]=(202);
 var $194=(($__p_i_i_i64_i_i+8)|0);
 HEAP32[(($194)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19144,$188) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=63;break; } else { label=110;break; }
 case 63: 
 var $$etemp$31$0=12;
 var $$etemp$31$1=0;

 var $195=HEAP32[((19148)>>2)];
 var $196=((($195)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17600,$196) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=64;break; } else { label=110;break; }
 case 64: 
 HEAP32[((17596)>>2)]=0;
 HEAP32[((17592)>>2)]=7520;
 var $198=$__p_i_i_i68_i_i;
 var $$etemp$32$0=12;
 var $$etemp$32$1=0;

 var $199=HEAP32[((19136)>>2)];
 var $200=($199|0)==-1;
 if($200){label=66;break;}else{label=65;break;}
 case 65: 
 var $202=(($__p_i_i_i68_i_i)|0);
 HEAP32[(($202)>>2)]=19136;
 var $203=(($__p_i_i_i68_i_i+4)|0);
 HEAP32[(($203)>>2)]=(202);
 var $204=(($__p_i_i_i68_i_i+8)|0);
 HEAP32[(($204)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19136,$198) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=66;break; } else { label=110;break; }
 case 66: 
 var $$etemp$33$0=12;
 var $$etemp$33$1=0;

 var $205=HEAP32[((19140)>>2)];
 var $206=((($205)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17592,$206) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=67;break; } else { label=110;break; }
 case 67: 
 HEAP32[((17588)>>2)]=0;
 HEAP32[((17584)>>2)]=7456;
 var $208=$__p_i_i_i72_i_i;
 var $$etemp$34$0=12;
 var $$etemp$34$1=0;

 var $209=HEAP32[((19128)>>2)];
 var $210=($209|0)==-1;
 if($210){label=69;break;}else{label=68;break;}
 case 68: 
 var $212=(($__p_i_i_i72_i_i)|0);
 HEAP32[(($212)>>2)]=19128;
 var $213=(($__p_i_i_i72_i_i+4)|0);
 HEAP32[(($213)>>2)]=(202);
 var $214=(($__p_i_i_i72_i_i+8)|0);
 HEAP32[(($214)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(19128,$208) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=69;break; } else { label=110;break; }
 case 69: 
 var $$etemp$35$0=12;
 var $$etemp$35$1=0;

 var $215=HEAP32[((19132)>>2)];
 var $216=((($215)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17584,$216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=70;break; } else { label=110;break; }
 case 70: 
 HEAP32[((17172)>>2)]=0;
 HEAP32[((17168)>>2)]=5472;
 var $218=$__p_i_i_i76_i_i;
 var $$etemp$36$0=12;
 var $$etemp$36$1=0;

 var $219=HEAP32[((18240)>>2)];
 var $220=($219|0)==-1;
 if($220){label=72;break;}else{label=71;break;}
 case 71: 
 var $222=(($__p_i_i_i76_i_i)|0);
 HEAP32[(($222)>>2)]=18240;
 var $223=(($__p_i_i_i76_i_i+4)|0);
 HEAP32[(($223)>>2)]=(202);
 var $224=(($__p_i_i_i76_i_i+8)|0);
 HEAP32[(($224)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18240,$218) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=72;break; } else { label=110;break; }
 case 72: 
 var $$etemp$37$0=12;
 var $$etemp$37$1=0;

 var $225=HEAP32[((18244)>>2)];
 var $226=((($225)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17168,$226) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=73;break; } else { label=110;break; }
 case 73: 
 HEAP32[((17164)>>2)]=0;
 HEAP32[((17160)>>2)]=5432;
 var $228=$__p_i_i_i80_i_i;
 var $$etemp$38$0=12;
 var $$etemp$38$1=0;

 var $229=HEAP32[((18232)>>2)];
 var $230=($229|0)==-1;
 if($230){label=75;break;}else{label=74;break;}
 case 74: 
 var $232=(($__p_i_i_i80_i_i)|0);
 HEAP32[(($232)>>2)]=18232;
 var $233=(($__p_i_i_i80_i_i+4)|0);
 HEAP32[(($233)>>2)]=(202);
 var $234=(($__p_i_i_i80_i_i+8)|0);
 HEAP32[(($234)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18232,$228) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=75;break; } else { label=110;break; }
 case 75: 
 var $$etemp$39$0=12;
 var $$etemp$39$1=0;

 var $235=HEAP32[((18236)>>2)];
 var $236=((($235)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17160,$236) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=76;break; } else { label=110;break; }
 case 76: 
 HEAP32[((17156)>>2)]=0;
 HEAP32[((17152)>>2)]=5392;
 var $238=$__p_i_i_i84_i_i;
 var $$etemp$40$0=12;
 var $$etemp$40$1=0;

 var $239=HEAP32[((18224)>>2)];
 var $240=($239|0)==-1;
 if($240){label=78;break;}else{label=77;break;}
 case 77: 
 var $242=(($__p_i_i_i84_i_i)|0);
 HEAP32[(($242)>>2)]=18224;
 var $243=(($__p_i_i_i84_i_i+4)|0);
 HEAP32[(($243)>>2)]=(202);
 var $244=(($__p_i_i_i84_i_i+8)|0);
 HEAP32[(($244)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18224,$238) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=78;break; } else { label=110;break; }
 case 78: 
 var $$etemp$41$0=12;
 var $$etemp$41$1=0;

 var $245=HEAP32[((18228)>>2)];
 var $246=((($245)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17152,$246) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=79;break; } else { label=110;break; }
 case 79: 
 HEAP32[((17148)>>2)]=0;
 HEAP32[((17144)>>2)]=5352;
 var $248=$__p_i_i_i88_i_i;
 var $$etemp$42$0=12;
 var $$etemp$42$1=0;

 var $249=HEAP32[((18216)>>2)];
 var $250=($249|0)==-1;
 if($250){label=81;break;}else{label=80;break;}
 case 80: 
 var $252=(($__p_i_i_i88_i_i)|0);
 HEAP32[(($252)>>2)]=18216;
 var $253=(($__p_i_i_i88_i_i+4)|0);
 HEAP32[(($253)>>2)]=(202);
 var $254=(($__p_i_i_i88_i_i+8)|0);
 HEAP32[(($254)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18216,$248) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=81;break; } else { label=110;break; }
 case 81: 
 var $$etemp$43$0=12;
 var $$etemp$43$1=0;

 var $255=HEAP32[((18220)>>2)];
 var $256=((($255)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17144,$256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=82;break; } else { label=110;break; }
 case 82: 
 HEAP32[((17228)>>2)]=0;
 HEAP32[((17224)>>2)]=5672;
 HEAP32[((17232)>>2)]=5720;
 var $258=$__p_i_i_i92_i_i;
 var $$etemp$44$0=12;
 var $$etemp$44$1=0;

 var $259=HEAP32[((18272)>>2)];
 var $260=($259|0)==-1;
 if($260){label=84;break;}else{label=83;break;}
 case 83: 
 var $262=(($__p_i_i_i92_i_i)|0);
 HEAP32[(($262)>>2)]=18272;
 var $263=(($__p_i_i_i92_i_i+4)|0);
 HEAP32[(($263)>>2)]=(202);
 var $264=(($__p_i_i_i92_i_i+8)|0);
 HEAP32[(($264)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18272,$258) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=84;break; } else { label=110;break; }
 case 84: 
 var $$etemp$45$0=12;
 var $$etemp$45$1=0;

 var $265=HEAP32[((18276)>>2)];
 var $266=((($265)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17224,$266) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=85;break; } else { label=110;break; }
 case 85: 
 HEAP32[((17212)>>2)]=0;
 HEAP32[((17208)>>2)]=5576;
 HEAP32[((17216)>>2)]=5624;
 var $268=$__p_i_i_i96_i_i;
 var $$etemp$46$0=12;
 var $$etemp$46$1=0;

 var $269=HEAP32[((18264)>>2)];
 var $270=($269|0)==-1;
 if($270){label=87;break;}else{label=86;break;}
 case 86: 
 var $272=(($__p_i_i_i96_i_i)|0);
 HEAP32[(($272)>>2)]=18264;
 var $273=(($__p_i_i_i96_i_i+4)|0);
 HEAP32[(($273)>>2)]=(202);
 var $274=(($__p_i_i_i96_i_i+8)|0);
 HEAP32[(($274)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18264,$268) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=87;break; } else { label=110;break; }
 case 87: 
 var $$etemp$47$0=12;
 var $$etemp$47$1=0;

 var $275=HEAP32[((18268)>>2)];
 var $276=((($275)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17208,$276) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=88;break; } else { label=110;break; }
 case 88: 
 HEAP32[((17196)>>2)]=0;
 HEAP32[((17192)>>2)]=6576;
 var $277=HEAP8[(19232)];
 var $278=(($277<<24)>>24)==0;
 if($278){label=89;break;}else{label=93;break;}
 case 89: 
 var $280=___cxa_guard_acquire(19232);
 var $281=($280|0)==0;
 if($281){label=93;break;}else{label=90;break;}
 case 90: 
 var $283=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=91;break; } else { label=92;break; }
 case 91: 
 HEAP32[((17128)>>2)]=$283;

 label=93;break;
 case 92: 
 var $285$0 = ___cxa_find_matching_catch(-1, -1,0); var $285$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$285$1;var $eh_lpad_body_i_i$0=$285$0;label=111;break;
 case 93: 
 var $287=HEAP32[((17128)>>2)];
 HEAP32[((17200)>>2)]=$287;
 HEAP32[((17192)>>2)]=5544;
 var $288=$__p_i_i_i102_i_i;
 var $$etemp$48$0=12;
 var $$etemp$48$1=0;

 var $289=HEAP32[((18256)>>2)];
 var $290=($289|0)==-1;
 if($290){label=95;break;}else{label=94;break;}
 case 94: 
 var $292=(($__p_i_i_i102_i_i)|0);
 HEAP32[(($292)>>2)]=18256;
 var $293=(($__p_i_i_i102_i_i+4)|0);
 HEAP32[(($293)>>2)]=(202);
 var $294=(($__p_i_i_i102_i_i+8)|0);
 HEAP32[(($294)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18256,$288) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=95;break; } else { label=110;break; }
 case 95: 
 var $$etemp$49$0=12;
 var $$etemp$49$1=0;

 var $295=HEAP32[((18260)>>2)];
 var $296=((($295)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17192,$296) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=96;break; } else { label=110;break; }
 case 96: 
 HEAP32[((17180)>>2)]=0;
 HEAP32[((17176)>>2)]=6576;
 var $297=HEAP8[(19232)];
 var $298=(($297<<24)>>24)==0;
 if($298){label=97;break;}else{label=101;break;}
 case 97: 
 var $300=___cxa_guard_acquire(19232);
 var $301=($300|0)==0;
 if($301){label=101;break;}else{label=98;break;}
 case 98: 
 var $303=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=99;break; } else { label=100;break; }
 case 99: 
 HEAP32[((17128)>>2)]=$303;

 label=101;break;
 case 100: 
 var $305$0 = ___cxa_find_matching_catch(-1, -1,0); var $305$1 = tempRet0;

 var $eh_lpad_body_i_i$1=$305$1;var $eh_lpad_body_i_i$0=$305$0;label=111;break;
 case 101: 
 var $307=HEAP32[((17128)>>2)];
 HEAP32[((17184)>>2)]=$307;
 HEAP32[((17176)>>2)]=5512;
 var $308=$__p_i_i_i109_i_i;
 var $$etemp$50$0=12;
 var $$etemp$50$1=0;

 var $309=HEAP32[((18248)>>2)];
 var $310=($309|0)==-1;
 if($310){label=103;break;}else{label=102;break;}
 case 102: 
 var $312=(($__p_i_i_i109_i_i)|0);
 HEAP32[(($312)>>2)]=18248;
 var $313=(($__p_i_i_i109_i_i+4)|0);
 HEAP32[(($313)>>2)]=(202);
 var $314=(($__p_i_i_i109_i_i+8)|0);
 HEAP32[(($314)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18248,$308) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=103;break; } else { label=110;break; }
 case 103: 
 var $$etemp$51$0=12;
 var $$etemp$51$1=0;

 var $315=HEAP32[((18252)>>2)];
 var $316=((($315)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17176,$316) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=104;break; } else { label=110;break; }
 case 104: 
 HEAP32[((17308)>>2)]=0;
 HEAP32[((17304)>>2)]=5904;
 var $318=$__p_i_i_i113_i_i;
 var $$etemp$52$0=12;
 var $$etemp$52$1=0;

 var $319=HEAP32[((18304)>>2)];
 var $320=($319|0)==-1;
 if($320){label=106;break;}else{label=105;break;}
 case 105: 
 var $322=(($__p_i_i_i113_i_i)|0);
 HEAP32[(($322)>>2)]=18304;
 var $323=(($__p_i_i_i113_i_i+4)|0);
 HEAP32[(($323)>>2)]=(202);
 var $324=(($__p_i_i_i113_i_i+8)|0);
 HEAP32[(($324)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18304,$318) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=106;break; } else { label=110;break; }
 case 106: 
 var $$etemp$53$0=12;
 var $$etemp$53$1=0;

 var $325=HEAP32[((18308)>>2)];
 var $326=((($325)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17304,$326) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=107;break; } else { label=110;break; }
 case 107: 
 HEAP32[((17300)>>2)]=0;
 HEAP32[((17296)>>2)]=5864;
 var $328=$__p_i_i_i_i_i;
 var $$etemp$54$0=12;
 var $$etemp$54$1=0;

 var $329=HEAP32[((18296)>>2)];
 var $330=($329|0)==-1;
 if($330){label=109;break;}else{label=108;break;}
 case 108: 
 var $332=(($__p_i_i_i_i_i)|0);
 HEAP32[(($332)>>2)]=18296;
 var $333=(($__p_i_i_i_i_i+4)|0);
 HEAP32[(($333)>>2)]=(202);
 var $334=(($__p_i_i_i_i_i+8)|0);
 HEAP32[(($334)>>2)]=0;
 (function() { try { __THREW__ = 0; return __ZNSt3__111__call_onceERVmPvPFvS2_E(18296,$328) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=109;break; } else { label=110;break; }
 case 109: 
 var $$etemp$55$0=12;
 var $$etemp$55$1=0;

 var $335=HEAP32[((18300)>>2)];
 var $336=((($335)-(1))|0);
 (function() { try { __THREW__ = 0; return __ZNSt3__16locale5__imp7installEPNS0_5facetEl(17400,17296,$336) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=120;break; } else { label=110;break; }
 case 110: 
 var $338$0 = ___cxa_find_matching_catch(-1, -1,0); var $338$1 = tempRet0;
 var $eh_lpad_body_i_i$1=$338$1;var $eh_lpad_body_i_i$0=$338$0;label=111;break;
 case 111: 
 var $eh_lpad_body_i_i$0;
 var $eh_lpad_body_i_i$1;
 var $339=HEAP8[(17544)];
 var $340=$339&1;
 var $341=(($340<<24)>>24)==0;
 if($341){label=114;break;}else{label=112;break;}
 case 112: 
 var $343=HEAP32[((17552)>>2)];
 var $344=($343|0)==0;
 if($344){label=114;break;}else{label=113;break;}
 case 113: 
 _free($343);
 label=114;break;
 case 114: 
 var $346=HEAP32[((17408)>>2)];
 var $347=($346|0)==0;
 if($347){label=123;break;}else{label=115;break;}
 case 115: 
 var $349=HEAP32[((17412)>>2)];
 var $350=($349|0)==($346|0);
 if($350){label=117;break;}else{label=116;break;}
 case 116: 
 var $__new_last2_i_i_i_i_i_i_i=$346;
 var $scevgep_i_i_i_i_i_i_i=((($349)-(4))|0);
 var $scevgep1_i_i_i_i_i_i_i=$scevgep_i_i_i_i_i_i_i;
 var $351=(((-$__new_last2_i_i_i_i_i_i_i))|0);
 var $uglygep_i_i_i_i_i_i_i=(($scevgep1_i_i_i_i_i_i_i+$351)|0);
 var $uglygep3_i_i_i_i_i_i_i=$uglygep_i_i_i_i_i_i_i;
 var $352=$uglygep3_i_i_i_i_i_i_i>>>2;
 var $353=$352^-1;
 var $scevgep4_i_i_i_i_i_i_i=(($349+($353<<2))|0);
 HEAP32[((17412)>>2)]=$scevgep4_i_i_i_i_i_i_i;
 label=117;break;
 case 117: 
 var $354=($346|0)==17424;
 if($354){label=118;break;}else{label=119;break;}
 case 118: 
 HEAP8[(17536)]=0;
 label=123;break;
 case 119: 
 var $357=$346;
 _free($357);
 label=123;break;
 case 120: 
 HEAP32[((17112)>>2)]=17400;

 label=121;break;
 case 121: 
 var $359=HEAP32[((17112)>>2)];
 HEAP32[((17120)>>2)]=$359;
 var $360=(($359+4)|0);
 var $361=(tempValue=HEAP32[(($360)>>2)],HEAP32[(($360)>>2)]=tempValue+1,tempValue);

 label=122;break;
 case 122: 
 var $362=(($this)|0);
 var $363=HEAP32[((17120)>>2)];
 HEAP32[(($362)>>2)]=$363;
 var $364=(($363+4)|0);
 var $365=(tempValue=HEAP32[(($364)>>2)],HEAP32[(($364)>>2)]=tempValue+1,tempValue);
 STACKTOP=sp;return;
 case 123: 


 var $366=$eh_lpad_body_i_i$0;
 ___clang_call_terminate($366);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__16locale9use_facetERNS0_2idE($this_0_0_val,$x){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+16)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p_i_i=sp;
 var $1=$__p_i_i;
 var $$etemp$0$0=12;
 var $$etemp$0$1=0;

 var $2=(($x)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==-1;
 if($4){label=3;break;}else{label=2;break;}
 case 2: 
 var $6=(($__p_i_i)|0);
 HEAP32[(($6)>>2)]=$x;
 var $7=(($__p_i_i+4)|0);
 HEAP32[(($7)>>2)]=(202);
 var $8=(($__p_i_i+8)|0);
 HEAP32[(($8)>>2)]=0;
 __ZNSt3__111__call_onceERVmPvPFvS2_E($2,$1);
 label=3;break;
 case 3: 
 var $$etemp$1$0=12;
 var $$etemp$1$1=0;

 var $9=(($x+4)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=((($10)-(1))|0);
 var $12=(($this_0_0_val+12)|0);
 var $13=HEAP32[(($12)>>2)];
 var $14=(($this_0_0_val+8)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=$13;
 var $17=$15;
 var $18=((($16)-($17))|0);
 var $19=$18>>2;
 var $20=($19>>>0)>($11>>>0);
 if($20){label=4;break;}else{label=5;break;}
 case 4: 
 var $21=(($15+($11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==0;
 if($23){label=5;break;}else{label=6;break;}
 case 5: 
 var $24=___cxa_allocate_exception(4);
 var $25=$24;
 HEAP32[(($25)>>2)]=5224;
 ___cxa_throw($24,11720,(658));
 throw "Reached an unreachable!";
 case 6: 
 STACKTOP=sp;return $22;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5facetD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale5facet16__on_zero_sharedEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 var $4=HEAP32[(($3)>>2)];
 var $5=(($4+4)|0);
 var $6=HEAP32[(($5)>>2)];
 FUNCTION_TABLE[$6]($this);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__16locale2id6__initEv($this){
 var label=0;


 var $1=(tempValue=HEAP32[((18392)>>2)],HEAP32[((18392)>>2)]=tempValue+1,tempValue);
 var $2=((($1)+(1))|0);
 var $3=(($this+4)|0);
 HEAP32[(($3)>>2)]=$2;
 return;
}


function __ZNSt3__15ctypeIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE5do_isEtw($this,$m,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $12=0;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<1))|0);
 var $8=HEAP16[(($7)>>1)];
 var $9=$8&$m;
 var $10=(($9<<16)>>16)!=0;
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE5do_isEPKwS3_Pt($this,$low,$high,$vec){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=7;break;}else{var $_013=$low;var $_04=$vec;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP32[(($_013)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $_off0=0;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $_off0=$10;label=6;break;
 case 6: 
 var $_off0;
 HEAP16[(($_04)>>1)]=$_off0;
 var $12=(($_013+4)|0);
 var $13=(($_04+2)|0);
 var $14=($12|0)==($high|0);
 if($14){var $_01_lcssa=$high;label=7;break;}else{var $_013=$12;var $_04=$13;label=2;break;}
 case 7: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_scan_isEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<1))|0);
 var $10=HEAP16[(($9)>>1)];
 var $11=$10&$m;
 var $12=(($11<<16)>>16)==0;
 if($12){label=6;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 6: 
 var $14=(($_02+4)|0);
 var $15=($14|0)==($high|0);
 if($15){var $_0_lcssa=$high;label=7;break;}else{var $_02=$14;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE11do_scan_notEtPKwS3_($this,$m,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=3;break;}
 case 2: 
 var $3=($15|0)==($high|0);
 if($3){var $_0_lcssa=$high;label=7;break;}else{var $_02=$15;label=3;break;}
 case 3: 
 var $_02;
 var $4=HEAP32[(($_02)>>2)];
 var $isascii=($4>>>0)<128;
 if($isascii){label=4;break;}else{var $_0_lcssa=$_02;label=7;break;}
 case 4: 
 var $6=(function() { try { __THREW__ = 0; return ___ctype_b_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 6: 
 var $10=HEAP32[(($6)>>2)];
 var $11=(($10+($4<<1))|0);
 var $12=HEAP16[(($11)>>1)];
 var $13=$12&$m;
 var $14=(($13<<16)>>16)==0;
 var $15=(($_02+4)|0);
 if($14){var $_0_lcssa=$_02;label=7;break;}else{label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_toupperEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEw($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii=($c>>>0)<128;
 if($isascii){label=2;break;}else{var $10=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=HEAP32[(($2)>>2)];
 var $7=(($6+($c<<2))|0);
 var $8=HEAP32[(($7)>>2)];
 var $10=$8;label=5;break;
 case 5: 
 var $10;
 return $10;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE10do_tolowerEPwPKw($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_02=$low;label=2;break;}
 case 2: 
 var $_02;
 var $2=HEAP32[(($_02)>>2)];
 var $isascii=($2>>>0)<128;
 if($isascii){label=3;break;}else{var $12=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=HEAP32[(($4)>>2)];
 var $9=(($8+($2<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $12=$10;label=6;break;
 case 6: 
 var $12;
 HEAP32[(($_02)>>2)]=$12;
 var $13=(($_02+4)|0);
 var $14=($13|0)==($high|0);
 if($14){var $_0_lcssa=$high;label=7;break;}else{var $_02=$13;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE8do_widenEc($this,$c){
 var label=0;


 var $1=(($c<<24)>>24);
 return $1;
}


function __ZNKSt3__15ctypeIwE8do_widenEPKcS3_Pw($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 var $3=(($2<<24)>>24);
 HEAP32[(($_03)>>2)]=$3;
 var $4=(($_012+1)|0);
 var $5=(($_03+4)|0);
 var $6=($4|0)==($high|0);
 if($6){var $_01_lcssa=$high;label=3;break;}else{var $_012=$4;var $_03=$5;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIwE9do_narrowEwc($this,$c,$dfault){
 var label=0;


 var $isascii=($c>>>0)<128;
 var $1=(($c)&255);
 var $_0=($isascii?$1:$dfault);
 return $_0;
}


function __ZNKSt3__15ctypeIwE9do_narrowEPKwS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=5;break;}else{label=2;break;}
 case 2: 
 var $low5=$low;
 var $scevgep=((($high)-(4))|0);
 var $scevgep4=$scevgep;
 var $2=(((-$low5))|0);
 var $uglygep=(($scevgep4+$2)|0);
 var $uglygep6=$uglygep;
 var $3=$uglygep6>>>2;
 var $4=((($3)+(1))|0);
 var $_012=$low;var $_03=$dest;label=3;break;
 case 3: 
 var $_03;
 var $_012;
 var $6=HEAP32[(($_012)>>2)];
 var $isascii=($6>>>0)<128;
 var $7=(($6)&255);
 var $_dfault=($isascii?$7:$dfault);
 HEAP8[($_03)]=$_dfault;
 var $8=(($_012+4)|0);
 var $9=(($_03+1)|0);
 var $10=($8|0)==($high|0);
 if($10){label=4;break;}else{var $_012=$8;var $_03=$9;label=3;break;}
 case 4: 
 var $scevgep7=(($low+($4<<2))|0);
 var $_01_lcssa=$scevgep7;label=5;break;
 case 5: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6720;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$3;
 _free($9);
 label=4;break;
 case 4: 
 var $10=($this|0)==0;
 if($10){label=6;break;}else{label=5;break;}
 case 5: 
 var $11=$this;
 _free($11);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__15ctypeIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=6720;
 var $2=(($this+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(($this+12)|0);
 var $7=HEAP8[($6)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$3;
 _free($9);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=($c&255);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_toupperEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_toupper_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEc($this,$c){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $isascii1=(($c<<24)>>24)>-1;
 if($isascii1){label=2;break;}else{var $12=$c;label=5;break;}
 case 2: 
 var $2=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $4$0 = ___cxa_find_matching_catch(-1, -1,0); var $4$1 = tempRet0;
 var $5=$4$0;
 ___clang_call_terminate($5);
 throw "Reached an unreachable!";
 case 4: 
 var $6=(($c<<24)>>24);
 var $7=HEAP32[(($2)>>2)];
 var $8=(($7+($6<<2))|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=(($9)&255);
 var $12=$10;label=5;break;
 case 5: 
 var $12;
 return $12;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE10do_tolowerEPcPKc($this,$low,$high){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_0_lcssa=$low;label=7;break;}else{var $_03=$low;label=2;break;}
 case 2: 
 var $_03;
 var $2=HEAP8[($_03)];
 var $isascii1=(($2<<24)>>24)>-1;
 if($isascii1){label=3;break;}else{var $14=$2;label=6;break;}
 case 3: 
 var $4=(function() { try { __THREW__ = 0; return ___ctype_tolower_loc() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $6$0 = ___cxa_find_matching_catch(-1, -1,0); var $6$1 = tempRet0;
 var $7=$6$0;
 ___clang_call_terminate($7);
 throw "Reached an unreachable!";
 case 5: 
 var $8=(($2<<24)>>24);
 var $9=HEAP32[(($4)>>2)];
 var $10=(($9+($8<<2))|0);
 var $11=HEAP32[(($10)>>2)];
 var $12=(($11)&255);
 var $14=$12;label=6;break;
 case 6: 
 var $14;
 HEAP8[($_03)]=$14;
 var $15=(($_03+1)|0);
 var $16=($15|0)==($high|0);
 if($16){var $_0_lcssa=$high;label=7;break;}else{var $_03=$15;label=2;break;}
 case 7: 
 var $_0_lcssa;
 return $_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE8do_widenEc($this,$c){
 var label=0;


 return $c;
}


function __ZNKSt3__15ctypeIcE8do_widenEPKcS3_Pc($this,$low,$high,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_012=$low;var $_03=$dest;label=2;break;}
 case 2: 
 var $_03;
 var $_012;
 var $2=HEAP8[($_012)];
 HEAP8[($_03)]=$2;
 var $3=(($_012+1)|0);
 var $4=(($_03+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_012=$3;var $_03=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__15ctypeIcE9do_narrowEcc($this,$c,$dfault){
 var label=0;


 var $isascii1=(($c<<24)>>24)>-1;
 var $c_dfault=($isascii1?$c:$dfault);
 return $c_dfault;
}


function __ZNKSt3__15ctypeIcE9do_narrowEPKcS3_cPc($this,$low,$high,$dfault,$dest){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($low|0)==($high|0);
 if($1){var $_01_lcssa=$low;label=3;break;}else{var $_013=$low;var $_04=$dest;label=2;break;}
 case 2: 
 var $_04;
 var $_013;
 var $2=HEAP8[($_013)];
 var $isascii2=(($2<<24)>>24)>-1;
 var $_dfault=($isascii2?$2:$dfault);
 HEAP8[($_04)]=$_dfault;
 var $3=(($_013+1)|0);
 var $4=(($_04+1)|0);
 var $5=($3|0)==($high|0);
 if($5){var $_01_lcssa=$high;label=3;break;}else{var $_013=$3;var $_04=$4;label=2;break;}
 case 3: 
 var $_01_lcssa;
 return $_01_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIcc11__mbstate_tED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIcc11__mbstate_tE6do_outERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE5do_inERS1_PKcS5_RS5_PcS7_RS7_($this,$0,$frm,$1,$frm_nxt,$to,$2,$to_nxt){
 var label=0;


 HEAP32[(($frm_nxt)>>2)]=$frm;
 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 1;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$end,$mx){
 var label=0;


 var $2=$end;
 var $3=$frm;
 var $4=((($2)-($3))|0);
 var $5=($4>>>0)<($mx>>>0);
 var $6=($5?$4:$mx);
 return $6;
}


function __ZNKSt3__17codecvtIcc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 1;
}


function __ZNSt3__17codecvtIwc11__mbstate_tED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 __ZNSt3__17codecvtIwc11__mbstate_tED2Ev($this);
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE6do_outERS1_PKwS5_RS5_PcS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+272)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $buf_i_i=sp;
 var $buf_i=(sp)+(8);
 var $tmp=(sp)+(264);
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_052=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $177=$frm;label=69;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_052=$6;label=4;break;}
 case 4: 
 var $fend_052;
 var $4=HEAP32[(($fend_052)>>2)];
 var $5=($4|0)==0;
 var $6=(($fend_052+4)|0);
 if($5){var $fend_0_lcssa=$fend_052;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 if($7){var $177=$frm;label=69;break;}else{label=6;break;}
 case 6: 
 var $8=$to_end;
 var $9=(($this+8)|0);
 var $10=(($tmp)|0);
 var $11=(($buf_i)|0);
 var $12=(($buf_i_i)|0);
 var $_0247=$to;var $_0148=$frm;var $fend_149=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_149;
 var $_0148;
 var $_0247;
 var $14=$fend_149;
 var $15=$_0148;
 var $16=((($14)-($15))|0);
 var $17=$16>>2;
 var $18=$_0247;
 var $19=((($8)-($18))|0);
 var $20=HEAP32[(($9)>>2)];
 var $21=_uselocale($20);
 var $$etemp$0$0=256;
 var $$etemp$0$1=0;

 var $22=HEAP32[(($frm_nxt)>>2)];
 var $23=($_0247|0)!=0;
 var $n__i=($23?$19:256);
 var $dst__i=($23?$_0247:$11);
 var $24=($22|0)==0;
 var $25=($n__i|0)==0;
 var $or_cond22_i=$24|$25;
 if($or_cond22_i){var $_1_i=$17;var $cnt_1_i=0;var $_26_i=$n__i;var $s_018_i=$dst__i;var $ws_i_8=$22;label=36;break;}else{var $_0423_i=$n__i;var $cnt_024_i=0;var $s_025_i=$dst__i;var $_026_i=$17;var $ws_i_0=$22;label=8;break;}
 case 8: 
 var $ws_i_0;
 var $_026_i;
 var $s_025_i;
 var $cnt_024_i;
 var $_0423_i;
 var $26=($_026_i>>>0)>=($_0423_i>>>0);
 var $27=($_026_i>>>0)>32;
 var $or_cond7_i=$26|$27;
 if($or_cond7_i){label=9;break;}else{var $_1_i=$_026_i;var $cnt_1_i=$cnt_024_i;var $_26_i=$_0423_i;var $s_018_i=$s_025_i;var $ws_i_8=$ws_i_0;label=36;break;}
 case 9: 
 var $_04__0_i=($26?$_0423_i:$_026_i);
 var $28=((($_026_i)-($_04__0_i))|0);
 var $$etemp$1$0=4;
 var $$etemp$1$1=0;

 var $29=($s_025_i|0)==0;
 if($29){label=11;break;}else{label=10;break;}
 case 10: 
 var $30=($_04__0_i>>>0)>3;
 if($30){var $_2525_i_i=$_04__0_i;var $_0226_i_i=$s_025_i;var $ws_i_1=$ws_i_0;label=15;break;}else{var $_25_lcssa_i_i=$_04__0_i;var $_02_lcssa_i_i=$s_025_i;var $ws_i_2=$ws_i_0;label=16;break;}
 case 11: 
 var $32=HEAP32[(($ws_i_0)>>2)];
 var $33=($32|0)==0;
 if($33){var $_0_i_i2=0;var $ws_i_7=$ws_i_0;label=33;break;}else{var $_038_i_i=0;var $ws2_09_i_i=$ws_i_0;var $34=$32;label=12;break;}
 case 12: 
 var $34;
 var $ws2_09_i_i;
 var $_038_i_i;
 var $35=($34>>>0)>127;
 if($35){label=13;break;}else{var $_pn_i_i=1;label=14;break;}
 case 13: 
 var $37=_wcrtomb($12,$34);
 var $38=($37|0)==-1;
 if($38){var $_1_i=$28;var $cnt_1_i=-1;var $_26_i=0;var $s_018_i=$s_025_i;var $ws_i_8=$ws_i_0;label=36;break;}else{var $_pn_i_i=$37;label=14;break;}
 case 14: 
 var $_pn_i_i;
 var $_14_i_i=((($_pn_i_i)+($_038_i_i))|0);
 var $40=(($ws2_09_i_i+4)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=($41|0)==0;
 if($42){var $_0_i_i=$_14_i_i;var $ws_i_5=$ws_i_0;label=32;break;}else{var $_038_i_i=$_14_i_i;var $ws2_09_i_i=$40;var $34=$41;label=12;break;}
 case 15: 
 var $ws_i_1;
 var $_0226_i_i;
 var $_2525_i_i;
 var $43=HEAP32[(($ws_i_1)>>2)];
 var $44=($43|0)==0;
 if($44){var $_418_i_i=$_2525_i_i;var $_219_i_i=$_0226_i_i;var $ws_i_3=$ws_i_1;label=22;break;}else{label=17;break;}
 case 16: 
 var $ws_i_2;
 var $_02_lcssa_i_i;
 var $_25_lcssa_i_i;
 var $45=($_25_lcssa_i_i|0)==0;
 if($45){var $_414_i_i=0;label=31;break;}else{var $_418_i_i=$_25_lcssa_i_i;var $_219_i_i=$_02_lcssa_i_i;var $ws_i_3=$ws_i_2;label=22;break;}
 case 17: 
 var $47=($43>>>0)>127;
 if($47){label=18;break;}else{label=20;break;}
 case 18: 
 var $49=_wcrtomb($_0226_i_i,$43);
 var $50=($49|0)==-1;
 if($50){var $_1_i=$28;var $cnt_1_i=-1;var $_26_i=0;var $s_018_i=$s_025_i;var $ws_i_8=$ws_i_1;label=36;break;}else{label=19;break;}
 case 19: 
 var $52=(($_0226_i_i+$49)|0);
 var $53=((($_2525_i_i)-($49))|0);
 var $_1_i_i=$52;var $_36_i_i=$53;var $59=$ws_i_1;label=21;break;
 case 20: 
 var $55=(($43)&255);
 var $56=(($_0226_i_i+1)|0);
 HEAP8[($_0226_i_i)]=$55;
 var $57=((($_2525_i_i)-(1))|0);
 var $_1_i_i=$56;var $_36_i_i=$57;var $59=$ws_i_1;label=21;break;
 case 21: 
 var $59;
 var $_36_i_i;
 var $_1_i_i;
 var $60=(($59+4)|0);
 var $61=($_36_i_i>>>0)>3;
 if($61){var $_2525_i_i=$_36_i_i;var $_0226_i_i=$_1_i_i;var $ws_i_1=$60;label=15;break;}else{var $_25_lcssa_i_i=$_36_i_i;var $_02_lcssa_i_i=$_1_i_i;var $ws_i_2=$60;label=16;break;}
 case 22: 
 var $ws_i_3;
 var $_219_i_i;
 var $_418_i_i;
 var $62=HEAP32[(($ws_i_3)>>2)];
 var $63=($62|0)==0;
 if($63){label=30;break;}else{label=23;break;}
 case 23: 
 var $65=($62>>>0)>127;
 if($65){label=24;break;}else{label=28;break;}
 case 24: 
 var $67=_wcrtomb($12,$62);
 var $68=($67|0)==-1;
 if($68){var $_1_i=$28;var $cnt_1_i=-1;var $_26_i=0;var $s_018_i=$s_025_i;var $ws_i_8=$ws_i_3;label=36;break;}else{label=25;break;}
 case 25: 
 var $70=($67>>>0)>($_418_i_i>>>0);
 if($70){label=26;break;}else{label=27;break;}
 case 26: 
 var $72=((($_04__0_i)-($_418_i_i))|0);
 var $_0_i_i=$72;var $ws_i_5=$ws_i_3;label=32;break;
 case 27: 
 var $74=HEAP32[(($ws_i_3)>>2)];
 var $75=_wcrtomb($_219_i_i,$74);
 var $76=(($_219_i_i+$67)|0);
 var $77=((($_418_i_i)-($67))|0);
 var $_3_i_i=$76;var $_5_i_i=$77;var $82=$ws_i_3;label=29;break;
 case 28: 
 var $79=(($62)&255);
 var $80=(($_219_i_i+1)|0);
 HEAP8[($_219_i_i)]=$79;
 var $81=((($_418_i_i)-(1))|0);
 var $_3_i_i=$80;var $_5_i_i=$81;var $82=$ws_i_3;label=29;break;
 case 29: 
 var $82;
 var $_5_i_i;
 var $_3_i_i;
 var $83=(($82+4)|0);
 var $84=($_5_i_i|0)==0;
 if($84){var $_414_i_i=0;label=31;break;}else{var $_418_i_i=$_5_i_i;var $_219_i_i=$_3_i_i;var $ws_i_3=$83;label=22;break;}
 case 30: 
 HEAP8[($_219_i_i)]=0;
 var $_414_i_i=$_418_i_i;label=31;break;
 case 31: 
 var $_414_i_i;
 var $86=((($_04__0_i)-($_414_i_i))|0);
 var $_0_i_i=$86;var $ws_i_5=0;label=32;break;
 case 32: 
 var $ws_i_5;
 var $_0_i_i;
 var $$etemp$2$0=4;
 var $$etemp$2$1=0;

 var $87=($_0_i_i|0)==-1;
 if($87){var $_1_i=$28;var $cnt_1_i=-1;var $_26_i=0;var $s_018_i=$s_025_i;var $ws_i_8=$ws_i_5;label=36;break;}else{var $_0_i_i2=$_0_i_i;var $ws_i_7=$ws_i_5;label=33;break;}
 case 33: 
 var $ws_i_7;
 var $_0_i_i2;
 var $88=($s_025_i|0)==($11|0);
 if($88){var $s_1_i=$11;var $_15_i=$_0423_i;label=35;break;}else{label=34;break;}
 case 34: 
 var $90=(($s_025_i+$_0_i_i2)|0);
 var $91=((($_0423_i)-($_0_i_i2))|0);
 var $s_1_i=$90;var $_15_i=$91;label=35;break;
 case 35: 
 var $_15_i;
 var $s_1_i;
 var $93=((($_0_i_i2)+($cnt_024_i))|0);
 var $94=($ws_i_7|0)==0;
 var $95=($_15_i|0)==0;
 var $or_cond_i=$94|$95;
 if($or_cond_i){var $_1_i=$28;var $cnt_1_i=$93;var $_26_i=$_15_i;var $s_018_i=$s_1_i;var $ws_i_8=$ws_i_7;label=36;break;}else{var $_0423_i=$_15_i;var $cnt_024_i=$93;var $s_025_i=$s_1_i;var $_026_i=$28;var $ws_i_0=$ws_i_7;label=8;break;}
 case 36: 
 var $ws_i_8;
 var $s_018_i;
 var $_26_i;
 var $cnt_1_i;
 var $_1_i;
 var $96=($ws_i_8|0)==0;
 if($96){var $cnt_3_i=$cnt_1_i;var $ws_i_10=$ws_i_8;label=41;break;}else{label=37;break;}
 case 37: 
 var $97=($_26_i|0)==0;
 var $98=($_1_i|0)==0;
 var $or_cond810_i=$97|$98;
 if($or_cond810_i){var $cnt_3_i=$cnt_1_i;var $ws_i_10=$ws_i_8;label=41;break;}else{var $_311_i=$_26_i;var $cnt_212_i=$cnt_1_i;var $s_213_i=$s_018_i;var $_214_i=$_1_i;var $ws_i_9=$ws_i_8;label=38;break;}
 case 38: 
 var $ws_i_9;
 var $_214_i;
 var $s_213_i;
 var $cnt_212_i;
 var $_311_i;
 var $99=HEAP32[(($ws_i_9)>>2)];
 var $100=_wcrtomb($s_213_i,$99);
 var $101=((($100)+(1))|0);
 var $102=($101>>>0)<2;
 if($102){label=39;break;}else{label=40;break;}
 case 39: 
 var $104=($100|0)==0;
 var $_ws_i_9=($104?0:$ws_i_9);
 var $cnt_212_i_=($104?$cnt_212_i:-1);
 var $cnt_3_i=$cnt_212_i_;var $ws_i_10=$_ws_i_9;label=41;break;
 case 40: 
 var $106=(($ws_i_9+4)|0);
 var $107=((($_214_i)-(1))|0);
 var $108=(($s_213_i+$100)|0);
 var $109=((($_311_i)-($100))|0);
 var $110=((($cnt_212_i)+(1))|0);
 var $111=($_311_i|0)==($100|0);
 var $112=($107|0)==0;
 var $or_cond8_i=$111|$112;
 if($or_cond8_i){var $cnt_3_i=$110;var $ws_i_10=$106;label=41;break;}else{var $_311_i=$109;var $cnt_212_i=$110;var $s_213_i=$108;var $_214_i=$107;var $ws_i_9=$106;label=38;break;}
 case 41: 
 var $ws_i_10;
 var $cnt_3_i;
 if($23){label=42;break;}else{label=43;break;}
 case 42: 
 HEAP32[(($frm_nxt)>>2)]=$ws_i_10;
 label=43;break;
 case 43: 
 var $$etemp$3$0=256;
 var $$etemp$3$1=0;

 var $115=($21|0)==0;
 if($115){label=46;break;}else{label=44;break;}
 case 44: 
 var $117=(function() { try { __THREW__ = 0; return _uselocale($21) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=46;break; } else { label=45;break; }
 case 45: 
 var $119$0 = ___cxa_find_matching_catch(-1, -1,0); var $119$1 = tempRet0;
 var $120=$119$0;
 ___clang_call_terminate($120);
 throw "Reached an unreachable!";
 case 46: 
 if(($cnt_3_i|0)==-1){ label=47;break;}else if(($cnt_3_i|0)==0){ var $_0=1;label=70;break;}else{label=54;break;}
 case 47: 
 HEAP32[(($to_nxt)>>2)]=$_0247;
 var $122=HEAP32[(($frm_nxt)>>2)];
 var $123=($_0148|0)==($122|0);
 if($123){var $_1_lcssa=$_0148;label=53;break;}else{var $_19=$_0148;var $124=$_0247;label=48;break;}
 case 48: 
 var $124;
 var $_19;
 var $125=HEAP32[(($_19)>>2)];
 var $126=HEAP32[(($9)>>2)];
 var $127=_uselocale($126);
 var $128=_wcrtomb($124,$125);
 var $129=($127|0)==0;
 if($129){label=51;break;}else{label=49;break;}
 case 49: 
 var $131=(function() { try { __THREW__ = 0; return _uselocale($127) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=51;break; } else { label=50;break; }
 case 50: 
 var $133$0 = ___cxa_find_matching_catch(-1, -1,0); var $133$1 = tempRet0;
 var $134=$133$0;
 ___clang_call_terminate($134);
 throw "Reached an unreachable!";
 case 51: 
 var $135=($128|0)==-1;
 if($135){var $_1_lcssa=$_19;label=53;break;}else{label=52;break;}
 case 52: 
 var $137=HEAP32[(($to_nxt)>>2)];
 var $138=(($137+$128)|0);
 HEAP32[(($to_nxt)>>2)]=$138;
 var $139=(($_19+4)|0);
 var $140=HEAP32[(($frm_nxt)>>2)];
 var $141=($139|0)==($140|0);
 if($141){var $_1_lcssa=$139;label=53;break;}else{var $_19=$139;var $124=$138;label=48;break;}
 case 53: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $_0=2;label=70;break;
 case 54: 
 var $143=HEAP32[(($to_nxt)>>2)];
 var $144=(($143+$cnt_3_i)|0);
 HEAP32[(($to_nxt)>>2)]=$144;
 var $145=($144|0)==($to_end|0);
 if($145){label=68;break;}else{label=55;break;}
 case 55: 
 var $147=($fend_149|0)==($frm_end|0);
 if($147){label=56;break;}else{label=57;break;}
 case 56: 
 var $_pre98=HEAP32[(($frm_nxt)>>2)];
 var $fend_3=$frm_end;var $174=$144;var $173=$_pre98;label=67;break;
 case 57: 
 var $149=HEAP32[(($9)>>2)];
 var $150=_uselocale($149);
 HEAP8[($10)]=0;
 var $151=($150|0)==0;
 if($151){label=60;break;}else{label=58;break;}
 case 58: 
 var $153=(function() { try { __THREW__ = 0; return _uselocale($150) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=60;break; } else { label=59;break; }
 case 59: 
 var $155$0 = ___cxa_find_matching_catch(-1, -1,0); var $155$1 = tempRet0;
 var $156=$155$0;
 ___clang_call_terminate($156);
 throw "Reached an unreachable!";
 case 60: 
 var $157=HEAP32[(($to_nxt)>>2)];
 var $158=($157|0)==($to_end|0);
 if($158){var $_0=1;label=70;break;}else{var $n_011=0;var $p_012=$10;var $160=$157;var $159=0;label=61;break;}
 case 61: 
 var $159;
 var $160;
 var $p_012;
 var $n_011;
 var $161=(($160+1)|0);
 HEAP32[(($to_nxt)>>2)]=$161;
 HEAP8[($160)]=$159;
 var $162=($n_011|0)==0;
 if($162){label=63;break;}else{label=62;break;}
 case 62: 
 var $163=(($p_012+1)|0);
 var $_pre99=HEAP32[(($to_nxt)>>2)];
 var $phitmp=((($n_011)-(1))|0);
 var $_pre5=HEAP8[($163)];
 var $n_011=$phitmp;var $p_012=$163;var $160=$_pre99;var $159=$_pre5;label=61;break;
 case 63: 
 var $164=HEAP32[(($frm_nxt)>>2)];
 var $165=(($164+4)|0);
 HEAP32[(($frm_nxt)>>2)]=$165;
 var $166=($165|0)==($frm_end|0);
 if($166){var $fend_2_lcssa=$frm_end;label=66;break;}else{var $fend_215=$165;label=65;break;}
 case 64: 
 var $168=($171|0)==($frm_end|0);
 if($168){var $fend_2_lcssa=$frm_end;label=66;break;}else{var $fend_215=$171;label=65;break;}
 case 65: 
 var $fend_215;
 var $169=HEAP32[(($fend_215)>>2)];
 var $170=($169|0)==0;
 var $171=(($fend_215+4)|0);
 if($170){var $fend_2_lcssa=$fend_215;label=66;break;}else{label=64;break;}
 case 66: 
 var $fend_2_lcssa;
 var $_pre95=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $174=$_pre95;var $173=$165;label=67;break;
 case 67: 
 var $173;
 var $174;
 var $fend_3;
 var $175=($173|0)==($frm_end|0);
 var $176=($174|0)==($to_end|0);
 var $or_cond=$175|$176;
 if($or_cond){var $177=$173;label=69;break;}else{var $_0247=$174;var $_0148=$173;var $fend_149=$fend_3;label=7;break;}
 case 68: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $177=$_pre;label=69;break;
 case 69: 
 var $177;
 var $not_=($177|0)!=($frm_end|0);
 var $178=($not_&1);
 var $_0=$178;label=70;break;
 case 70: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE5do_inERS1_PKcS5_RS5_PwS7_RS7_($this,$st,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+1040)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $wbuf_i=sp;
 var $s_i=(sp)+(1024);
 var $save_state=(sp)+(1032);
 var $tmpcast=$save_state;
 var $1=($frm|0)==($frm_end|0);
 if($1){label=2;break;}else{var $fend_059=$frm;label=4;break;}
 case 2: 
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $130=$frm;label=50;break;
 case 3: 
 var $3=($6|0)==($frm_end|0);
 if($3){var $fend_0_lcssa=$frm_end;label=5;break;}else{var $fend_059=$6;label=4;break;}
 case 4: 
 var $fend_059;
 var $4=HEAP8[($fend_059)];
 var $5=(($4<<24)>>24)==0;
 var $6=(($fend_059+1)|0);
 if($5){var $fend_0_lcssa=$fend_059;label=5;break;}else{label=3;break;}
 case 5: 
 var $fend_0_lcssa;
 HEAP32[(($to_nxt)>>2)]=$to;
 HEAP32[(($frm_nxt)>>2)]=$frm;
 var $7=($to|0)==($to_end|0);
 if($7){var $130=$frm;label=50;break;}else{label=6;break;}
 case 6: 
 var $8=$st;
 var $9=$to_end;
 var $10=(($this+8)|0);
 var $11=$s_i;
 var $12=$wbuf_i;
 var $13=(($wbuf_i)|0);
 var $14=(($st)|0);
 var $_0254=$to;var $_0155=$frm;var $fend_156=$fend_0_lcssa;label=7;break;
 case 7: 
 var $fend_156;
 var $_0155;
 var $_0254;
 var $ld$0$0=(($8)|0);
 var $16$0=HEAP32[(($ld$0$0)>>2)];
 var $ld$1$1=(($8+4)|0);
 var $16$1=HEAP32[(($ld$1$1)>>2)];
 var $st$2$0=(($save_state)|0);
 HEAP32[(($st$2$0)>>2)]=$16$0;
 var $st$3$1=(($save_state+4)|0);
 HEAP32[(($st$3$1)>>2)]=$16$1;
 var $17=$fend_156;
 var $18=$_0155;
 var $19=((($17)-($18))|0);
 var $20=$_0254;
 var $21=((($9)-($20))|0);
 var $22=$21>>2;
 var $23=HEAP32[(($10)>>2)];
 var $24=_uselocale($23);
 var $$etemp$4$0=4;
 var $$etemp$4$1=0;

 var $$etemp$5$0=1024;
 var $$etemp$5$1=0;

 var $25=HEAP32[(($frm_nxt)>>2)];
 HEAP32[(($s_i)>>2)]=$25;
 var $26=($_0254|0)!=0;
 var $wn__i=($26?$22:256);
 var $wcs__i=($26?$_0254:$13);
 var $27=($25|0)==0;
 var $28=($wn__i|0)==0;
 var $or_cond22_i=$27|$28;
 if($or_cond22_i){var $_1_i=$19;var $cnt_1_i=0;var $_26_i=$wn__i;var $ws_018_i=$wcs__i;var $45=$25;label=14;break;}else{var $_0423_i=$wn__i;var $cnt_024_i=0;var $ws_025_i=$wcs__i;var $_026_i=$19;var $_pr41_i=$25;label=8;break;}
 case 8: 
 var $_pr41_i;
 var $_026_i;
 var $ws_025_i;
 var $cnt_024_i;
 var $_0423_i;
 var $29=$_026_i>>>2;
 var $30=($29>>>0)>=($_0423_i>>>0);
 var $31=($_026_i>>>0)>131;
 var $or_cond7_i=$30|$31;
 if($or_cond7_i){label=9;break;}else{var $_1_i=$_026_i;var $cnt_1_i=$cnt_024_i;var $_26_i=$_0423_i;var $ws_018_i=$ws_025_i;var $45=$_pr41_i;label=14;break;}
 case 9: 
 var $_04__i=($30?$_0423_i:$29);
 var $32=((($_026_i)-($_04__i))|0);
 var $33=_mbsrtowcs($ws_025_i,$s_i,$_04__i,$st);
 var $34=($33|0)==-1;
 if($34){label=10;break;}else{label=11;break;}
 case 10: 
 var $_pr_pre_i=HEAP32[(($s_i)>>2)];
 var $_1_i=$32;var $cnt_1_i=-1;var $_26_i=0;var $ws_018_i=$ws_025_i;var $45=$_pr_pre_i;label=14;break;
 case 11: 
 var $36=($ws_025_i|0)==($13|0);
 if($36){var $ws_1_i=$13;var $_15_i=$_0423_i;label=13;break;}else{label=12;break;}
 case 12: 
 var $38=(($ws_025_i+($33<<2))|0);
 var $39=((($_0423_i)-($33))|0);
 var $ws_1_i=$38;var $_15_i=$39;label=13;break;
 case 13: 
 var $_15_i;
 var $ws_1_i;
 var $41=((($33)+($cnt_024_i))|0);
 var $42=HEAP32[(($s_i)>>2)];
 var $43=($42|0)==0;
 var $44=($_15_i|0)==0;
 var $or_cond_i=$43|$44;
 if($or_cond_i){var $_1_i=$32;var $cnt_1_i=$41;var $_26_i=$_15_i;var $ws_018_i=$ws_1_i;var $45=$42;label=14;break;}else{var $_0423_i=$_15_i;var $cnt_024_i=$41;var $ws_025_i=$ws_1_i;var $_026_i=$32;var $_pr41_i=$42;label=8;break;}
 case 14: 
 var $45;
 var $ws_018_i;
 var $_26_i;
 var $cnt_1_i;
 var $_1_i;
 var $46=($45|0)==0;
 if($46){var $cnt_3_i=$cnt_1_i;var $64=0;label=21;break;}else{label=15;break;}
 case 15: 
 var $47=($_26_i|0)==0;
 var $48=($_1_i|0)==0;
 var $or_cond810_i=$47|$48;
 if($or_cond810_i){var $cnt_3_i=$cnt_1_i;var $64=$45;label=21;break;}else{var $_311_i=$_26_i;var $cnt_212_i=$cnt_1_i;var $ws_213_i=$ws_018_i;var $_214_i=$_1_i;var $49=$45;label=16;break;}
 case 16: 
 var $49;
 var $_214_i;
 var $ws_213_i;
 var $cnt_212_i;
 var $_311_i;
 var $50=_mbrtowc($ws_213_i,$49,$_214_i,$st);
 var $51=((($50)+(2))|0);
 var $52=($51>>>0)<3;
 if($52){label=17;break;}else{label=20;break;}
 case 17: 
 if(($50|0)==0){ label=18;break;}else if(($50|0)==-1){ var $cnt_3_i=-1;var $64=$49;label=21;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($s_i)>>2)]=0;
 var $cnt_3_i=$cnt_212_i;var $64=0;label=21;break;
 case 19: 
 HEAP32[(($14)>>2)]=0;
 var $cnt_3_i=$cnt_212_i;var $64=$49;label=21;break;
 case 20: 
 var $57=(($49+$50)|0);
 HEAP32[(($s_i)>>2)]=$57;
 var $58=((($_214_i)-($50))|0);
 var $59=(($ws_213_i+4)|0);
 var $60=((($_311_i)-(1))|0);
 var $61=((($cnt_212_i)+(1))|0);
 var $62=($60|0)==0;
 var $63=($_214_i|0)==($50|0);
 var $or_cond8_i=$62|$63;
 if($or_cond8_i){var $cnt_3_i=$61;var $64=$57;label=21;break;}else{var $_311_i=$60;var $cnt_212_i=$61;var $ws_213_i=$59;var $_214_i=$58;var $49=$57;label=16;break;}
 case 21: 
 var $64;
 var $cnt_3_i;
 if($26){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($frm_nxt)>>2)]=$64;
 label=23;break;
 case 23: 
 var $$etemp$6$0=1024;
 var $$etemp$6$1=0;

 var $$etemp$7$0=4;
 var $$etemp$7$1=0;

 var $67=($24|0)==0;
 if($67){label=26;break;}else{label=24;break;}
 case 24: 
 var $69=(function() { try { __THREW__ = 0; return _uselocale($24) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=25;break; }
 case 25: 
 var $71$0 = ___cxa_find_matching_catch(-1, -1,0); var $71$1 = tempRet0;
 var $72=$71$0;
 ___clang_call_terminate($72);
 throw "Reached an unreachable!";
 case 26: 
 if(($cnt_3_i|0)==-1){ label=27;break;}else if(($cnt_3_i|0)==0){ var $_0=2;label=51;break;}else{label=38;break;}
 case 27: 
 HEAP32[(($to_nxt)>>2)]=$_0254;
 var $73=HEAP32[(($frm_nxt)>>2)];
 var $74=($_0155|0)==($73|0);
 if($74){var $_1_lcssa=$_0155;label=37;break;}else{var $storemerge14=$_0254;var $_115=$_0155;label=28;break;}
 case 28: 
 var $_115;
 var $storemerge14;
 var $75=$_115;
 var $76=((($17)-($75))|0);
 var $77=HEAP32[(($10)>>2)];
 var $78=_uselocale($77);
 var $79=_mbrtowc($storemerge14,$_115,$76,$tmpcast);
 var $80=($78|0)==0;
 if($80){label=31;break;}else{label=29;break;}
 case 29: 
 var $82=(function() { try { __THREW__ = 0; return _uselocale($78) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=31;break; } else { label=30;break; }
 case 30: 
 var $84$0 = ___cxa_find_matching_catch(-1, -1,0); var $84$1 = tempRet0;
 var $85=$84$0;
 ___clang_call_terminate($85);
 throw "Reached an unreachable!";
 case 31: 
 if(($79|0)==0){ label=32;break;}else if(($79|0)==-1){ label=33;break;}else if(($79|0)==-2){ label=34;break;}else{label=35;break;}
 case 32: 
 var $87=(($_115+1)|0);
 var $_2=$87;label=36;break;
 case 33: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=2;label=51;break;
 case 34: 
 HEAP32[(($frm_nxt)>>2)]=$_115;
 var $_0=1;label=51;break;
 case 35: 
 var $91=(($_115+$79)|0);
 var $_2=$91;label=36;break;
 case 36: 
 var $_2;
 var $93=HEAP32[(($to_nxt)>>2)];
 var $94=(($93+4)|0);
 HEAP32[(($to_nxt)>>2)]=$94;
 var $95=HEAP32[(($frm_nxt)>>2)];
 var $96=($_2|0)==($95|0);
 if($96){var $_1_lcssa=$_2;label=37;break;}else{var $storemerge14=$94;var $_115=$_2;label=28;break;}
 case 37: 
 var $_1_lcssa;
 HEAP32[(($frm_nxt)>>2)]=$_1_lcssa;
 var $not_3=($_1_lcssa|0)!=($frm_end|0);
 var $97=($not_3&1);
 var $_0=$97;label=51;break;
 case 38: 
 var $99=HEAP32[(($to_nxt)>>2)];
 var $100=(($99+($cnt_3_i<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$100;
 var $101=($100|0)==($to_end|0);
 if($101){label=49;break;}else{label=39;break;}
 case 39: 
 var $103=($fend_156|0)==($frm_end|0);
 var $_pre113=HEAP32[(($frm_nxt)>>2)];
 if($103){var $fend_3=$frm_end;var $127=$100;var $126=$_pre113;label=48;break;}else{label=40;break;}
 case 40: 
 var $105=HEAP32[(($10)>>2)];
 var $106=_uselocale($105);
 var $107=_mbrtowc($100,$_pre113,1,$st);
 var $108=($106|0)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=(function() { try { __THREW__ = 0; return _uselocale($106) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=43;break; } else { label=42;break; }
 case 42: 
 var $112$0 = ___cxa_find_matching_catch(-1, -1,0); var $112$1 = tempRet0;
 var $113=$112$0;
 ___clang_call_terminate($113);
 throw "Reached an unreachable!";
 case 43: 
 var $114=($107|0)==0;
 if($114){label=44;break;}else{var $_0=2;label=51;break;}
 case 44: 
 var $116=HEAP32[(($to_nxt)>>2)];
 var $117=(($116+4)|0);
 HEAP32[(($to_nxt)>>2)]=$117;
 var $118=HEAP32[(($frm_nxt)>>2)];
 var $119=(($118+1)|0);
 HEAP32[(($frm_nxt)>>2)]=$119;
 var $120=($119|0)==($frm_end|0);
 if($120){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_216=$119;label=46;break;}
 case 45: 
 var $122=($125|0)==($frm_end|0);
 if($122){var $fend_2_lcssa=$frm_end;label=47;break;}else{var $fend_216=$125;label=46;break;}
 case 46: 
 var $fend_216;
 var $123=HEAP8[($fend_216)];
 var $124=(($123<<24)>>24)==0;
 var $125=(($fend_216+1)|0);
 if($124){var $fend_2_lcssa=$fend_216;label=47;break;}else{label=45;break;}
 case 47: 
 var $fend_2_lcssa;
 var $_pre111=HEAP32[(($to_nxt)>>2)];
 var $fend_3=$fend_2_lcssa;var $127=$_pre111;var $126=$119;label=48;break;
 case 48: 
 var $126;
 var $127;
 var $fend_3;
 var $128=($126|0)==($frm_end|0);
 var $129=($127|0)==($to_end|0);
 var $or_cond=$128|$129;
 if($or_cond){var $130=$126;label=50;break;}else{var $_0254=$127;var $_0155=$126;var $fend_156=$fend_3;label=7;break;}
 case 49: 
 var $_pre=HEAP32[(($frm_nxt)>>2)];
 var $130=$_pre;label=50;break;
 case 50: 
 var $130;
 var $not_=($130|0)!=($frm_end|0);
 var $131=($not_&1);
 var $_0=$131;label=51;break;
 case 51: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$st,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 HEAP32[(($to_nxt)>>2)]=$to;
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=_uselocale($2);
 var $4=($3|0)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=3;break; }
 case 3: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 4: 
 return 0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE11do_encodingEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=2;break; } else { label=11;break; }
 case 2: 
 var $4=($3|0)==0;
 if($4){label=5;break;}else{label=3;break;}
 case 3: 
 var $6=(function() { try { __THREW__ = 0; return _uselocale($3) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=4;break; }
 case 4: 
 var $8$0 = ___cxa_find_matching_catch(-1, -1,0); var $8$1 = tempRet0;
 var $9=$8$0;
 ___clang_call_terminate($9);
 throw "Reached an unreachable!";
 case 5: 
 var $10=HEAP32[(($1)>>2)];
 var $11=($10|0)==0;
 if($11){var $_0=1;label=10;break;}else{label=6;break;}
 case 6: 
 var $13=(function() { try { __THREW__ = 0; return _uselocale($10) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=11;break; }
 case 7: 
 var $14=($13|0)==0;
 if($14){var $_0=0;label=10;break;}else{label=8;break;}
 case 8: 
 var $16=(function() { try { __THREW__ = 0; return _uselocale($13) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $_0=0;label=10;break; } else { label=9;break; }
 case 9: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1,0); var $18$1 = tempRet0;
 var $19=$18$0;
 ___clang_call_terminate($19);
 throw "Reached an unreachable!";
 case 10: 
 var $_0;
 return $_0;
 case 11: 
 var $20$0 = ___cxa_find_matching_catch(-1, -1,0); var $20$1 = tempRet0;
 var $21=$20$0;
 ___clang_call_terminate($21);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIwc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$st,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mx|0)==0;
 var $2=($frm|0)==($frm_end|0);
 var $or_cond5=$1|$2;
 if($or_cond5){var $nbytes_0_lcssa=0;label=10;break;}else{label=2;break;}
 case 2: 
 var $3=$frm_end;
 var $4=(($this+8)|0);
 var $5=($st|0)!=0;
 var $6=($5?$st:14800);
 var $_016=$frm;var $nbytes_07=0;var $nwchar_t_08=0;label=3;break;
 case 3: 
 var $nwchar_t_08;
 var $nbytes_07;
 var $_016;
 var $8=$_016;
 var $9=((($3)-($8))|0);
 var $10=HEAP32[(($4)>>2)];
 var $11=_uselocale($10);
 var $12=_mbrtowc(0,$_016,$9,$6);
 var $13=($11|0)==0;
 if($13){label=6;break;}else{label=4;break;}
 case 4: 
 var $15=(function() { try { __THREW__ = 0; return _uselocale($11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=5;break; }
 case 5: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1,0); var $17$1 = tempRet0;
 var $18=$17$0;
 ___clang_call_terminate($18);
 throw "Reached an unreachable!";
 case 6: 
 if(($12|0)==-1|($12|0)==-2){ var $nbytes_0_lcssa=$nbytes_07;label=10;break;}else if(($12|0)==0){ label=7;break;}else{label=8;break;}
 case 7: 
 var $20=(($_016+1)|0);
 var $_pn=1;var $_1=$20;label=9;break;
 case 8: 
 var $22=(($_016+$12)|0);
 var $_pn=$12;var $_1=$22;label=9;break;
 case 9: 
 var $_1;
 var $_pn;
 var $nbytes_1=((($_pn)+($nbytes_07))|0);
 var $24=((($nwchar_t_08)+(1))|0);
 var $25=($24>>>0)>=($mx>>>0);
 var $26=($_1|0)==($frm_end|0);
 var $or_cond=$25|$26;
 if($or_cond){var $nbytes_0_lcssa=$nbytes_1;label=10;break;}else{var $_016=$_1;var $nbytes_07=$nbytes_1;var $nwchar_t_08=$24;label=3;break;}
 case 10: 
 var $nbytes_0_lcssa;
 return $nbytes_0_lcssa;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIwc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){var $12=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=(function() { try { __THREW__ = 0; return _uselocale($2) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=3;break; } else { label=7;break; }
 case 3: 
 var $6=($5|0)==0;
 if($6){var $12=4;label=6;break;}else{label=4;break;}
 case 4: 
 var $8=(function() { try { __THREW__ = 0; return _uselocale($5) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { var $12=4;label=6;break; } else { label=5;break; }
 case 5: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1,0); var $10$1 = tempRet0;
 var $11=$10$0;
 ___clang_call_terminate($11);
 throw "Reached an unreachable!";
 case 6: 
 var $12;
 return $12;
 case 7: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1,0); var $14$1 = tempRet0;
 var $15=$14$0;
 ___clang_call_terminate($15);
 throw "Reached an unreachable!";
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__17codecvtIDsc11__mbstate_tED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE6do_outERS1_PKDsS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=$frm_end;
 var $3=($frm>>>0)<($frm_end>>>0);
 if($3){label=2;break;}else{var $_0_i=0;var $_to_nxt_2=$to;var $_frm_nxt_2=$frm;label=22;break;}
 case 2: 
 var $4=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $6=HEAP16[(($_frm_nxt_0)>>1)];
 var $7=($6&65535);
 var $8=($6&65535)<128;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=$_to_nxt_0;
 var $11=((($4)-($10))|0);
 var $12=($11|0)<1;
 if($12){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=5;break;}
 case 5: 
 var $14=(($6)&255);
 var $15=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$14;
 var $_to_nxt_1=$15;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 6: 
 var $17=($6&65535)<2048;
 if($17){label=7;break;}else{label=9;break;}
 case 7: 
 var $19=$_to_nxt_0;
 var $20=((($4)-($19))|0);
 var $21=($20|0)<2;
 if($21){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=8;break;}
 case 8: 
 var $23=$7>>>6;
 var $24=$23|192;
 var $25=(($24)&255);
 var $26=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$25;
 var $27=$7&63;
 var $28=$27|128;
 var $29=(($28)&255);
 var $30=(($_to_nxt_0+2)|0);
 HEAP8[($26)]=$29;
 var $_to_nxt_1=$30;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 9: 
 var $32=($6&65535)<55296;
 if($32){label=10;break;}else{label=12;break;}
 case 10: 
 var $34=$_to_nxt_0;
 var $35=((($4)-($34))|0);
 var $36=($35|0)<3;
 if($36){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=11;break;}
 case 11: 
 var $38=$7>>>12;
 var $39=$38|224;
 var $40=(($39)&255);
 var $41=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$40;
 var $42=$7>>>6;
 var $43=$42&63;
 var $44=$43|128;
 var $45=(($44)&255);
 var $46=(($_to_nxt_0+2)|0);
 HEAP8[($41)]=$45;
 var $47=$7&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($_to_nxt_0+3)|0);
 HEAP8[($46)]=$49;
 var $_to_nxt_1=$50;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 12: 
 var $52=($6&65535)<56320;
 if($52){label=13;break;}else{label=18;break;}
 case 13: 
 var $54=$_frm_nxt_0;
 var $55=((($2)-($54))|0);
 var $56=($55|0)<4;
 if($56){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=14;break;}
 case 14: 
 var $58=(($_frm_nxt_0+2)|0);
 var $59=HEAP16[(($58)>>1)];
 var $60=($59&65535);
 var $61=$60&64512;
 var $62=($61|0)==56320;
 if($62){label=15;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}
 case 15: 
 var $64=$_to_nxt_0;
 var $65=((($4)-($64))|0);
 var $66=($65|0)<4;
 if($66){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=16;break;}
 case 16: 
 var $68=$7&960;
 var $69=$68<<10;
 var $70=((($69)+(65536))|0);
 var $71=($70>>>0)>1114111;
 if($71){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=17;break;}
 case 17: 
 var $73=$68>>>6;
 var $74=((($73)+(1))|0);
 var $75=$74>>>2;
 var $76=$75|240;
 var $77=(($76)&255);
 var $78=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$77;
 var $79=$74<<4;
 var $80=$79&48;
 var $81=$7>>>2;
 var $82=$81&15;
 var $83=$82|$80;
 var $84=$83|128;
 var $85=(($84)&255);
 var $86=(($_to_nxt_0+2)|0);
 HEAP8[($78)]=$85;
 var $87=$7<<4;
 var $88=$87&48;
 var $89=$60>>>6;
 var $90=$89&15;
 var $91=$88|$90;
 var $92=$91|128;
 var $93=(($92)&255);
 var $94=(($_to_nxt_0+3)|0);
 HEAP8[($86)]=$93;
 var $95=$60&63;
 var $96=$95|128;
 var $97=(($96)&255);
 var $98=(($_to_nxt_0+4)|0);
 HEAP8[($94)]=$97;
 var $_to_nxt_1=$98;var $_frm_nxt_1=$58;label=21;break;
 case 18: 
 var $100=($6&65535)<57344;
 if($100){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=19;break;}
 case 19: 
 var $102=$_to_nxt_0;
 var $103=((($4)-($102))|0);
 var $104=($103|0)<3;
 if($104){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=22;break;}else{label=20;break;}
 case 20: 
 var $106=$7>>>12;
 var $107=$106|224;
 var $108=(($107)&255);
 var $109=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$108;
 var $110=$7>>>6;
 var $111=$110&63;
 var $112=$111|128;
 var $113=(($112)&255);
 var $114=(($_to_nxt_0+2)|0);
 HEAP8[($109)]=$113;
 var $115=$7&63;
 var $116=$115|128;
 var $117=(($116)&255);
 var $118=(($_to_nxt_0+3)|0);
 HEAP8[($114)]=$117;
 var $_to_nxt_1=$118;var $_frm_nxt_1=$_frm_nxt_0;label=21;break;
 case 21: 
 var $_frm_nxt_1;
 var $_to_nxt_1;
 var $120=(($_frm_nxt_1+2)|0);
 var $121=($120>>>0)<($frm_end>>>0);
 if($121){var $_to_nxt_0=$_to_nxt_1;var $_frm_nxt_0=$120;label=3;break;}else{var $_0_i=0;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_2=$120;label=22;break;}
 case 22: 
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $_0_i;
 var $122=$_frm_nxt_2;
 var $123=$frm;
 var $124=((($122)-($123))|0);
 var $125=$124>>1;
 var $126=(($frm+($125<<1))|0);
 HEAP32[(($frm_nxt)>>2)]=$126;
 var $127=$_to_nxt_2;
 var $128=$to;
 var $129=((($127)-($128))|0);
 var $130=(($to+$129)|0);
 HEAP32[(($to_nxt)>>2)]=$130;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE5do_inERS1_PKcS5_RS5_PDsS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_to_nxt_2=$to;var $_frm_nxt_2=$frm;label=31;break;}
 case 2: 
 var $3=$frm_end;
 var $4=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $6=($_to_nxt_0>>>0)<($to_end>>>0);
 if($6){label=4;break;}else{var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=31;break;}
 case 4: 
 var $8=HEAP8[($_frm_nxt_0)];
 var $9=($8&255);
 var $10=(($8<<24)>>24)>-1;
 if($10){label=5;break;}else{label=6;break;}
 case 5: 
 var $12=($8&255);
 HEAP16[(($_to_nxt_0)>>1)]=$12;
 var $13=(($_frm_nxt_0+1)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$13;label=30;break;
 case 6: 
 var $15=($8&255)<194;
 if($15){var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=7;break;}
 case 7: 
 var $17=($8&255)<224;
 if($17){label=8;break;}else{label=11;break;}
 case 8: 
 var $19=$_frm_nxt_0;
 var $20=((($3)-($19))|0);
 var $21=($20|0)<2;
 if($21){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=9;break;}
 case 9: 
 var $23=(($_frm_nxt_0+1)|0);
 var $24=HEAP8[($23)];
 var $25=($24&255);
 var $26=$25&192;
 var $27=($26|0)==128;
 if($27){label=10;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 10: 
 var $29=$9<<6;
 var $30=$25&63;
 var $31=$29&1984;
 var $32=$30|$31;
 var $33=(($32)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$33;
 var $34=(($_frm_nxt_0+2)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$34;label=30;break;
 case 11: 
 var $36=($8&255)<240;
 if($36){label=12;break;}else{label=19;break;}
 case 12: 
 var $38=$_frm_nxt_0;
 var $39=((($3)-($38))|0);
 var $40=($39|0)<3;
 if($40){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=13;break;}
 case 13: 
 var $42=(($_frm_nxt_0+1)|0);
 var $43=HEAP8[($42)];
 var $44=(($_frm_nxt_0+2)|0);
 var $45=HEAP8[($44)];
 if(($9|0)==224){ label=14;break;}else if(($9|0)==237){ label=15;break;}else{label=16;break;}
 case 14: 
 var $47=$43&-32;
 var $48=(($47<<24)>>24)==-96;
 if($48){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 15: 
 var $50=$43&-32;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 16: 
 var $53=$43&-64;
 var $54=(($53<<24)>>24)==-128;
 if($54){label=17;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 17: 
 var $56=($45&255);
 var $57=$56&192;
 var $58=($57|0)==128;
 if($58){label=18;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 18: 
 var $60=$9<<12;
 var $61=($43&255);
 var $62=$61<<6;
 var $63=$62&4032;
 var $64=$63|$60;
 var $65=$56&63;
 var $66=$64|$65;
 var $67=(($66)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$67;
 var $68=(($_frm_nxt_0+3)|0);
 var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_1=$68;label=30;break;
 case 19: 
 var $70=($8&255)<245;
 if($70){label=20;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 20: 
 var $72=$_frm_nxt_0;
 var $73=((($3)-($72))|0);
 var $74=($73|0)<4;
 if($74){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=21;break;}
 case 21: 
 var $76=(($_frm_nxt_0+1)|0);
 var $77=HEAP8[($76)];
 var $78=(($_frm_nxt_0+2)|0);
 var $79=HEAP8[($78)];
 var $80=(($_frm_nxt_0+3)|0);
 var $81=HEAP8[($80)];
 if(($9|0)==240){ label=22;break;}else if(($9|0)==244){ label=23;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($77)+(112))&255);
 var $83=($_off_i&255)<48;
 if($83){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 23: 
 var $85=$77&-16;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 24: 
 var $88=$77&-64;
 var $89=(($88<<24)>>24)==-128;
 if($89){label=25;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 25: 
 var $91=($79&255);
 var $92=$91&192;
 var $93=($92|0)==128;
 if($93){label=26;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 26: 
 var $95=($81&255);
 var $96=$95&192;
 var $97=($96|0)==128;
 if($97){label=27;break;}else{var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}
 case 27: 
 var $99=$_to_nxt_0;
 var $100=((($4)-($99))|0);
 var $101=($100|0)<4;
 if($101){var $_0_i=1;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=28;break;}
 case 28: 
 var $103=$9&7;
 var $104=$103<<18;
 var $105=($77&255);
 var $106=$105<<12;
 var $107=$106&196608;
 var $108=$107|$104;
 var $109=($108>>>0)>1114111;
 if($109){var $_0_i=2;var $_to_nxt_3=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=32;break;}else{label=29;break;}
 case 29: 
 var $111=$95&63;
 var $112=$91<<6;
 var $113=$103<<2;
 var $114=$105>>>4;
 var $115=$114&3;
 var $116=$115|$113;
 var $117=$116<<6;
 var $118=((($117)+(16320))|0);
 var $119=$105<<2;
 var $120=$119&60;
 var $121=$91>>>4;
 var $122=$121&3;
 var $123=$120|$122;
 var $124=$123|$118;
 var $125=$124|55296;
 var $126=(($125)&65535);
 HEAP16[(($_to_nxt_0)>>1)]=$126;
 var $127=$112&960;
 var $128=$111|$127;
 var $129=$128|56320;
 var $130=(($129)&65535);
 var $131=(($_to_nxt_0+2)|0);
 HEAP16[(($131)>>1)]=$130;
 var $132=(($_frm_nxt_0+4)|0);
 var $_to_nxt_1=$131;var $_frm_nxt_1=$132;label=30;break;
 case 30: 
 var $_frm_nxt_1;
 var $_to_nxt_1;
 var $134=(($_to_nxt_1+2)|0);
 var $135=($_frm_nxt_1>>>0)<($frm_end>>>0);
 if($135){var $_to_nxt_0=$134;var $_frm_nxt_0=$_frm_nxt_1;label=3;break;}else{var $_to_nxt_2=$134;var $_frm_nxt_2=$_frm_nxt_1;label=31;break;}
 case 31: 
 var $_frm_nxt_2;
 var $_to_nxt_2;
 var $136=($_frm_nxt_2>>>0)<($frm_end>>>0);
 var $137=($136&1);
 var $_0_i=$137;var $_to_nxt_3=$_to_nxt_2;var $_frm_nxt_3=$_frm_nxt_2;label=32;break;
 case 32: 
 var $_frm_nxt_3;
 var $_to_nxt_3;
 var $_0_i;
 var $138=$_frm_nxt_3;
 var $139=$frm;
 var $140=((($138)-($139))|0);
 var $141=(($frm+$140)|0);
 HEAP32[(($frm_nxt)>>2)]=$141;
 var $142=$_to_nxt_3;
 var $143=$to;
 var $144=((($142)-($143))|0);
 var $145=$144>>1;
 var $146=(($to+($145<<1))|0);
 HEAP32[(($to_nxt)>>2)]=$146;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 var $3=($mx|0)!=0;
 var $or_cond13_i=$2&$3;
 if($or_cond13_i){label=2;break;}else{var $frm_nxt_1_lcssa_i=$frm;label=36;break;}
 case 2: 
 var $4=$frm_end;
 var $nchar16_t_014_i=0;var $frm_nxt_115_i=$frm;label=3;break;
 case 3: 
 var $frm_nxt_115_i;
 var $nchar16_t_014_i;
 var $5=HEAP8[($frm_nxt_115_i)];
 var $6=($5&255);
 var $7=(($5<<24)>>24)>-1;
 if($7){label=4;break;}else{label=5;break;}
 case 4: 
 var $9=(($frm_nxt_115_i+1)|0);
 var $frm_nxt_2_i=$9;var $nchar16_t_1_i=$nchar16_t_014_i;label=35;break;
 case 5: 
 var $11=($5&255)<194;
 if($11){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=6;break;}
 case 6: 
 var $13=($5&255)<224;
 if($13){label=7;break;}else{label=10;break;}
 case 7: 
 var $15=$frm_nxt_115_i;
 var $16=((($4)-($15))|0);
 var $17=($16|0)<2;
 if($17){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=8;break;}
 case 8: 
 var $19=(($frm_nxt_115_i+1)|0);
 var $20=HEAP8[($19)];
 var $21=$20&-64;
 var $22=(($21<<24)>>24)==-128;
 if($22){label=9;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 9: 
 var $24=(($frm_nxt_115_i+2)|0);
 var $frm_nxt_2_i=$24;var $nchar16_t_1_i=$nchar16_t_014_i;label=35;break;
 case 10: 
 var $26=($5&255)<240;
 if($26){label=11;break;}else{label=21;break;}
 case 11: 
 var $28=$frm_nxt_115_i;
 var $29=((($4)-($28))|0);
 var $30=($29|0)<3;
 if($30){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=12;break;}
 case 12: 
 var $32=(($frm_nxt_115_i+1)|0);
 var $33=HEAP8[($32)];
 var $34=(($frm_nxt_115_i+2)|0);
 var $35=HEAP8[($34)];
 if(($6|0)==224){ label=13;break;}else if(($6|0)==237){ label=15;break;}else{label=17;break;}
 case 13: 
 var $37=$33&-32;
 var $38=(($37<<24)>>24)==-96;
 if($38){label=19;break;}else{label=14;break;}
 case 14: 
 var $40=$frm;
 var $41=((($28)-($40))|0);
 var $_0_i=$41;label=37;break;
 case 15: 
 var $43=$33&-32;
 var $44=(($43<<24)>>24)==-128;
 if($44){label=19;break;}else{label=16;break;}
 case 16: 
 var $46=$frm;
 var $47=((($28)-($46))|0);
 var $_0_i=$47;label=37;break;
 case 17: 
 var $49=$33&-64;
 var $50=(($49<<24)>>24)==-128;
 if($50){label=19;break;}else{label=18;break;}
 case 18: 
 var $52=$frm;
 var $53=((($28)-($52))|0);
 var $_0_i=$53;label=37;break;
 case 19: 
 var $55=$35&-64;
 var $56=(($55<<24)>>24)==-128;
 if($56){label=20;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 20: 
 var $58=(($frm_nxt_115_i+3)|0);
 var $frm_nxt_2_i=$58;var $nchar16_t_1_i=$nchar16_t_014_i;label=35;break;
 case 21: 
 var $60=($5&255)<245;
 if($60){label=22;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 22: 
 var $62=$frm_nxt_115_i;
 var $63=((($4)-($62))|0);
 var $64=($63|0)<4;
 if($64){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=23;break;}
 case 23: 
 var $66=((($mx)-($nchar16_t_014_i))|0);
 var $67=($66>>>0)<2;
 if($67){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=24;break;}
 case 24: 
 var $69=(($frm_nxt_115_i+1)|0);
 var $70=HEAP8[($69)];
 var $71=(($frm_nxt_115_i+2)|0);
 var $72=HEAP8[($71)];
 var $73=(($frm_nxt_115_i+3)|0);
 var $74=HEAP8[($73)];
 if(($6|0)==240){ label=25;break;}else if(($6|0)==244){ label=27;break;}else{label=29;break;}
 case 25: 
 var $_off_i=((($70)+(112))&255);
 var $76=($_off_i&255)<48;
 if($76){label=31;break;}else{label=26;break;}
 case 26: 
 var $78=$frm;
 var $79=((($62)-($78))|0);
 var $_0_i=$79;label=37;break;
 case 27: 
 var $81=$70&-16;
 var $82=(($81<<24)>>24)==-128;
 if($82){label=31;break;}else{label=28;break;}
 case 28: 
 var $84=$frm;
 var $85=((($62)-($84))|0);
 var $_0_i=$85;label=37;break;
 case 29: 
 var $87=$70&-64;
 var $88=(($87<<24)>>24)==-128;
 if($88){label=31;break;}else{label=30;break;}
 case 30: 
 var $90=$frm;
 var $91=((($62)-($90))|0);
 var $_0_i=$91;label=37;break;
 case 31: 
 var $93=$72&-64;
 var $94=(($93<<24)>>24)==-128;
 if($94){label=32;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 32: 
 var $96=$74&-64;
 var $97=(($96<<24)>>24)==-128;
 if($97){label=33;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 33: 
 var $99=$6<<18;
 var $100=$99&1835008;
 var $101=($70&255);
 var $102=$101<<12;
 var $103=$102&196608;
 var $104=$103|$100;
 var $105=($104>>>0)>1114111;
 if($105){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=34;break;}
 case 34: 
 var $107=((($nchar16_t_014_i)+(1))|0);
 var $108=(($frm_nxt_115_i+4)|0);
 var $frm_nxt_2_i=$108;var $nchar16_t_1_i=$107;label=35;break;
 case 35: 
 var $nchar16_t_1_i;
 var $frm_nxt_2_i;
 var $110=((($nchar16_t_1_i)+(1))|0);
 var $111=($frm_nxt_2_i>>>0)<($frm_end>>>0);
 var $112=($110>>>0)<($mx>>>0);
 var $or_cond_i=$111&$112;
 if($or_cond_i){var $nchar16_t_014_i=$110;var $frm_nxt_115_i=$frm_nxt_2_i;label=3;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_2_i;label=36;break;}
 case 36: 
 var $frm_nxt_1_lcssa_i;
 var $113=$frm_nxt_1_lcssa_i;
 var $114=$frm;
 var $115=((($113)-($114))|0);
 var $_0_i=$115;label=37;break;
 case 37: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDsc11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__17codecvtIDic11__mbstate_tED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE6do_outERS1_PKDiS5_RS5_PcS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_0_i=0;var $_to_nxt_2=$to;var $_frm_nxt_1=$frm;label=16;break;}
 case 2: 
 var $3=$to_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $5=HEAP32[(($_frm_nxt_0)>>2)];
 var $6=$5&-2048;
 var $7=($6|0)==55296;
 var $8=($5>>>0)>1114111;
 var $or_cond_i=$7|$8;
 if($or_cond_i){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=4;break;}
 case 4: 
 var $10=($5>>>0)<128;
 if($10){label=5;break;}else{label=7;break;}
 case 5: 
 var $12=$_to_nxt_0;
 var $13=((($3)-($12))|0);
 var $14=($13|0)<1;
 if($14){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=6;break;}
 case 6: 
 var $16=(($5)&255);
 var $17=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$16;
 var $_to_nxt_1=$17;label=15;break;
 case 7: 
 var $19=($5>>>0)<2048;
 if($19){label=8;break;}else{label=10;break;}
 case 8: 
 var $21=$_to_nxt_0;
 var $22=((($3)-($21))|0);
 var $23=($22|0)<2;
 if($23){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=9;break;}
 case 9: 
 var $25=$5>>>6;
 var $26=$25|192;
 var $27=(($26)&255);
 var $28=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$27;
 var $29=$5&63;
 var $30=$29|128;
 var $31=(($30)&255);
 var $32=(($_to_nxt_0+2)|0);
 HEAP8[($28)]=$31;
 var $_to_nxt_1=$32;label=15;break;
 case 10: 
 var $34=($5>>>0)<65536;
 var $35=$_to_nxt_0;
 var $36=((($3)-($35))|0);
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=($36|0)<3;
 if($38){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=12;break;}
 case 12: 
 var $40=$5>>>12;
 var $41=$40|224;
 var $42=(($41)&255);
 var $43=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$42;
 var $44=$5>>>6;
 var $45=$44&63;
 var $46=$45|128;
 var $47=(($46)&255);
 var $48=(($_to_nxt_0+2)|0);
 HEAP8[($43)]=$47;
 var $49=$5&63;
 var $50=$49|128;
 var $51=(($50)&255);
 var $52=(($_to_nxt_0+3)|0);
 HEAP8[($48)]=$51;
 var $_to_nxt_1=$52;label=15;break;
 case 13: 
 var $54=($36|0)<4;
 if($54){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_1=$_frm_nxt_0;label=16;break;}else{label=14;break;}
 case 14: 
 var $56=$5>>>18;
 var $57=$56|240;
 var $58=(($57)&255);
 var $59=(($_to_nxt_0+1)|0);
 HEAP8[($_to_nxt_0)]=$58;
 var $60=$5>>>12;
 var $61=$60&63;
 var $62=$61|128;
 var $63=(($62)&255);
 var $64=(($_to_nxt_0+2)|0);
 HEAP8[($59)]=$63;
 var $65=$5>>>6;
 var $66=$65&63;
 var $67=$66|128;
 var $68=(($67)&255);
 var $69=(($_to_nxt_0+3)|0);
 HEAP8[($64)]=$68;
 var $70=$5&63;
 var $71=$70|128;
 var $72=(($71)&255);
 var $73=(($_to_nxt_0+4)|0);
 HEAP8[($69)]=$72;
 var $_to_nxt_1=$73;label=15;break;
 case 15: 
 var $_to_nxt_1;
 var $75=(($_frm_nxt_0+4)|0);
 var $76=($75>>>0)<($frm_end>>>0);
 if($76){var $_to_nxt_0=$_to_nxt_1;var $_frm_nxt_0=$75;label=3;break;}else{var $_0_i=0;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_1=$75;label=16;break;}
 case 16: 
 var $_frm_nxt_1;
 var $_to_nxt_2;
 var $_0_i;
 var $77=$_frm_nxt_1;
 var $78=$frm;
 var $79=((($77)-($78))|0);
 var $80=$79>>2;
 var $81=(($frm+($80<<2))|0);
 HEAP32[(($frm_nxt)>>2)]=$81;
 var $82=$_to_nxt_2;
 var $83=$to;
 var $84=((($82)-($83))|0);
 var $85=(($to+$84)|0);
 HEAP32[(($to_nxt)>>2)]=$85;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE5do_inERS1_PKcS5_RS5_PDiS7_RS7_($this,$0,$frm,$frm_end,$frm_nxt,$to,$to_end,$to_nxt){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 if($2){label=2;break;}else{var $_to_nxt_1=$to;var $_frm_nxt_2=$frm;label=30;break;}
 case 2: 
 var $3=$frm_end;
 var $_to_nxt_0=$to;var $_frm_nxt_0=$frm;label=3;break;
 case 3: 
 var $_frm_nxt_0;
 var $_to_nxt_0;
 var $5=($_to_nxt_0>>>0)<($to_end>>>0);
 if($5){label=4;break;}else{var $_to_nxt_1=$_to_nxt_0;var $_frm_nxt_2=$_frm_nxt_0;label=30;break;}
 case 4: 
 var $7=HEAP8[($_frm_nxt_0)];
 var $8=($7&255);
 var $9=(($7<<24)>>24)>-1;
 if($9){label=5;break;}else{label=6;break;}
 case 5: 
 HEAP32[(($_to_nxt_0)>>2)]=$8;
 var $11=(($_frm_nxt_0+1)|0);
 var $_frm_nxt_1=$11;label=29;break;
 case 6: 
 var $13=($7&255)<194;
 if($13){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=7;break;}
 case 7: 
 var $15=($7&255)<224;
 if($15){label=8;break;}else{label=11;break;}
 case 8: 
 var $17=$_frm_nxt_0;
 var $18=((($3)-($17))|0);
 var $19=($18|0)<2;
 if($19){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=9;break;}
 case 9: 
 var $21=(($_frm_nxt_0+1)|0);
 var $22=HEAP8[($21)];
 var $23=($22&255);
 var $24=$23&192;
 var $25=($24|0)==128;
 if($25){label=10;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 10: 
 var $27=$8<<6;
 var $28=$23&63;
 var $29=$27&1984;
 var $30=$28|$29;
 HEAP32[(($_to_nxt_0)>>2)]=$30;
 var $31=(($_frm_nxt_0+2)|0);
 var $_frm_nxt_1=$31;label=29;break;
 case 11: 
 var $33=($7&255)<240;
 if($33){label=12;break;}else{label=19;break;}
 case 12: 
 var $35=$_frm_nxt_0;
 var $36=((($3)-($35))|0);
 var $37=($36|0)<3;
 if($37){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=13;break;}
 case 13: 
 var $39=(($_frm_nxt_0+1)|0);
 var $40=HEAP8[($39)];
 var $41=(($_frm_nxt_0+2)|0);
 var $42=HEAP8[($41)];
 if(($8|0)==224){ label=14;break;}else if(($8|0)==237){ label=15;break;}else{label=16;break;}
 case 14: 
 var $44=$40&-32;
 var $45=(($44<<24)>>24)==-96;
 if($45){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 15: 
 var $47=$40&-32;
 var $48=(($47<<24)>>24)==-128;
 if($48){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 16: 
 var $50=$40&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=17;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 17: 
 var $53=($42&255);
 var $54=$53&192;
 var $55=($54|0)==128;
 if($55){label=18;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 18: 
 var $57=($40&255);
 var $58=$57<<6;
 var $59=$8<<12;
 var $60=$58&4032;
 var $61=$59&61440;
 var $62=$53&63;
 var $63=$60|$61;
 var $64=$63|$62;
 HEAP32[(($_to_nxt_0)>>2)]=$64;
 var $65=(($_frm_nxt_0+3)|0);
 var $_frm_nxt_1=$65;label=29;break;
 case 19: 
 var $67=($7&255)<245;
 if($67){label=20;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 20: 
 var $69=$_frm_nxt_0;
 var $70=((($3)-($69))|0);
 var $71=($70|0)<4;
 if($71){var $_0_i=1;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=21;break;}
 case 21: 
 var $73=(($_frm_nxt_0+1)|0);
 var $74=HEAP8[($73)];
 var $75=(($_frm_nxt_0+2)|0);
 var $76=HEAP8[($75)];
 var $77=(($_frm_nxt_0+3)|0);
 var $78=HEAP8[($77)];
 if(($8|0)==240){ label=22;break;}else if(($8|0)==244){ label=23;break;}else{label=24;break;}
 case 22: 
 var $_off_i=((($74)+(112))&255);
 var $80=($_off_i&255)<48;
 if($80){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 23: 
 var $82=$74&-16;
 var $83=(($82<<24)>>24)==-128;
 if($83){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 24: 
 var $85=$74&-64;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=25;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 25: 
 var $88=($76&255);
 var $89=$88&192;
 var $90=($89|0)==128;
 if($90){label=26;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 26: 
 var $92=($78&255);
 var $93=$92&192;
 var $94=($93|0)==128;
 if($94){label=27;break;}else{var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}
 case 27: 
 var $96=$8<<18;
 var $97=$96&1835008;
 var $98=($74&255);
 var $99=$98<<12;
 var $100=$99&258048;
 var $101=$100|$97;
 var $102=$88<<6;
 var $103=$102&4032;
 var $104=$101|$103;
 var $105=$92&63;
 var $106=$104|$105;
 var $107=($106>>>0)>1114111;
 if($107){var $_0_i=2;var $_to_nxt_2=$_to_nxt_0;var $_frm_nxt_3=$_frm_nxt_0;label=31;break;}else{label=28;break;}
 case 28: 
 HEAP32[(($_to_nxt_0)>>2)]=$106;
 var $109=(($_frm_nxt_0+4)|0);
 var $_frm_nxt_1=$109;label=29;break;
 case 29: 
 var $_frm_nxt_1;
 var $111=(($_to_nxt_0+4)|0);
 var $112=($_frm_nxt_1>>>0)<($frm_end>>>0);
 if($112){var $_to_nxt_0=$111;var $_frm_nxt_0=$_frm_nxt_1;label=3;break;}else{var $_to_nxt_1=$111;var $_frm_nxt_2=$_frm_nxt_1;label=30;break;}
 case 30: 
 var $_frm_nxt_2;
 var $_to_nxt_1;
 var $113=($_frm_nxt_2>>>0)<($frm_end>>>0);
 var $114=($113&1);
 var $_0_i=$114;var $_to_nxt_2=$_to_nxt_1;var $_frm_nxt_3=$_frm_nxt_2;label=31;break;
 case 31: 
 var $_frm_nxt_3;
 var $_to_nxt_2;
 var $_0_i;
 var $115=$_frm_nxt_3;
 var $116=$frm;
 var $117=((($115)-($116))|0);
 var $118=(($frm+$117)|0);
 HEAP32[(($frm_nxt)>>2)]=$118;
 var $119=$_to_nxt_2;
 var $120=$to;
 var $121=((($119)-($120))|0);
 var $122=$121>>2;
 var $123=(($to+($122<<2))|0);
 HEAP32[(($to_nxt)>>2)]=$123;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE10do_unshiftERS1_PcS4_RS4_($this,$0,$to,$1,$to_nxt){
 var label=0;


 HEAP32[(($to_nxt)>>2)]=$to;
 return 3;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE11do_encodingEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE16do_always_noconvEv($this){
 var label=0;


 return 0;
}


function __ZNKSt3__17codecvtIDic11__mbstate_tE9do_lengthERS1_PKcS5_j($this,$0,$frm,$frm_end,$mx){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=($frm>>>0)<($frm_end>>>0);
 var $3=($mx|0)!=0;
 var $or_cond13_i=$2&$3;
 if($or_cond13_i){label=2;break;}else{var $frm_nxt_1_lcssa_i=$frm;label=36;break;}
 case 2: 
 var $4=$frm_end;
 var $nchar32_t_014_i=1;var $frm_nxt_115_i=$frm;label=3;break;
 case 3: 
 var $frm_nxt_115_i;
 var $nchar32_t_014_i;
 var $6=HEAP8[($frm_nxt_115_i)];
 var $7=($6&255);
 var $8=(($6<<24)>>24)>-1;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 var $10=(($frm_nxt_115_i+1)|0);
 var $frm_nxt_2_i=$10;label=34;break;
 case 5: 
 var $12=($6&255)<194;
 if($12){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=6;break;}
 case 6: 
 var $14=($6&255)<224;
 if($14){label=7;break;}else{label=10;break;}
 case 7: 
 var $16=$frm_nxt_115_i;
 var $17=((($4)-($16))|0);
 var $18=($17|0)<2;
 if($18){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=8;break;}
 case 8: 
 var $20=(($frm_nxt_115_i+1)|0);
 var $21=HEAP8[($20)];
 var $22=$21&-64;
 var $23=(($22<<24)>>24)==-128;
 if($23){label=9;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 9: 
 var $25=(($frm_nxt_115_i+2)|0);
 var $frm_nxt_2_i=$25;label=34;break;
 case 10: 
 var $27=($6&255)<240;
 if($27){label=11;break;}else{label=21;break;}
 case 11: 
 var $29=$frm_nxt_115_i;
 var $30=((($4)-($29))|0);
 var $31=($30|0)<3;
 if($31){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=12;break;}
 case 12: 
 var $33=(($frm_nxt_115_i+1)|0);
 var $34=HEAP8[($33)];
 var $35=(($frm_nxt_115_i+2)|0);
 var $36=HEAP8[($35)];
 if(($7|0)==224){ label=13;break;}else if(($7|0)==237){ label=15;break;}else{label=17;break;}
 case 13: 
 var $38=$34&-32;
 var $39=(($38<<24)>>24)==-96;
 if($39){label=19;break;}else{label=14;break;}
 case 14: 
 var $41=$frm;
 var $42=((($29)-($41))|0);
 var $_0_i=$42;label=37;break;
 case 15: 
 var $44=$34&-32;
 var $45=(($44<<24)>>24)==-128;
 if($45){label=19;break;}else{label=16;break;}
 case 16: 
 var $47=$frm;
 var $48=((($29)-($47))|0);
 var $_0_i=$48;label=37;break;
 case 17: 
 var $50=$34&-64;
 var $51=(($50<<24)>>24)==-128;
 if($51){label=19;break;}else{label=18;break;}
 case 18: 
 var $53=$frm;
 var $54=((($29)-($53))|0);
 var $_0_i=$54;label=37;break;
 case 19: 
 var $56=$36&-64;
 var $57=(($56<<24)>>24)==-128;
 if($57){label=20;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 20: 
 var $59=(($frm_nxt_115_i+3)|0);
 var $frm_nxt_2_i=$59;label=34;break;
 case 21: 
 var $61=($6&255)<245;
 if($61){label=22;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 22: 
 var $63=$frm_nxt_115_i;
 var $64=((($4)-($63))|0);
 var $65=($64|0)<4;
 if($65){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=23;break;}
 case 23: 
 var $67=(($frm_nxt_115_i+1)|0);
 var $68=HEAP8[($67)];
 var $69=(($frm_nxt_115_i+2)|0);
 var $70=HEAP8[($69)];
 var $71=(($frm_nxt_115_i+3)|0);
 var $72=HEAP8[($71)];
 if(($7|0)==240){ label=24;break;}else if(($7|0)==244){ label=26;break;}else{label=28;break;}
 case 24: 
 var $_off_i=((($68)+(112))&255);
 var $74=($_off_i&255)<48;
 if($74){label=30;break;}else{label=25;break;}
 case 25: 
 var $76=$frm;
 var $77=((($63)-($76))|0);
 var $_0_i=$77;label=37;break;
 case 26: 
 var $79=$68&-16;
 var $80=(($79<<24)>>24)==-128;
 if($80){label=30;break;}else{label=27;break;}
 case 27: 
 var $82=$frm;
 var $83=((($63)-($82))|0);
 var $_0_i=$83;label=37;break;
 case 28: 
 var $85=$68&-64;
 var $86=(($85<<24)>>24)==-128;
 if($86){label=30;break;}else{label=29;break;}
 case 29: 
 var $88=$frm;
 var $89=((($63)-($88))|0);
 var $_0_i=$89;label=37;break;
 case 30: 
 var $91=$70&-64;
 var $92=(($91<<24)>>24)==-128;
 if($92){label=31;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 31: 
 var $94=$72&-64;
 var $95=(($94<<24)>>24)==-128;
 if($95){label=32;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}
 case 32: 
 var $97=$7<<18;
 var $98=$97&1835008;
 var $99=($68&255);
 var $100=$99<<12;
 var $101=$100&196608;
 var $102=$101|$98;
 var $103=($102>>>0)>1114111;
 if($103){var $frm_nxt_1_lcssa_i=$frm_nxt_115_i;label=36;break;}else{label=33;break;}
 case 33: 
 var $105=(($frm_nxt_115_i+4)|0);
 var $frm_nxt_2_i=$105;label=34;break;
 case 34: 
 var $frm_nxt_2_i;
 var $107=($frm_nxt_2_i>>>0)<($frm_end>>>0);
 var $108=($nchar32_t_014_i>>>0)<($mx>>>0);
 var $or_cond_i=$107&$108;
 if($or_cond_i){label=35;break;}else{var $frm_nxt_1_lcssa_i=$frm_nxt_2_i;label=36;break;}
 case 35: 
 var $phitmp_i=((($nchar32_t_014_i)+(1))|0);
 var $nchar32_t_014_i=$phitmp_i;var $frm_nxt_115_i=$frm_nxt_2_i;label=3;break;
 case 36: 
 var $frm_nxt_1_lcssa_i;
 var $109=$frm_nxt_1_lcssa_i;
 var $110=$frm;
 var $111=((($109)-($110))|0);
 var $_0_i=$111;label=37;break;
 case 37: 
 var $_0_i;
 return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__17codecvtIDic11__mbstate_tE13do_max_lengthEv($this){
 var label=0;


 return 4;
}


function __ZNSt3__116__narrow_to_utf8ILj32EED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__117__widen_from_utf8ILj32EED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIcED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5816;
 var $2=(($this+12)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=5;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIcED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5816;
 var $2=(($this+12)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+20)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIwED0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5768;
 var $2=(($this+16)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=5;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 var $12=($this|0)==0;
 if($12){label=6;break;}else{label=5;break;}
 case 5: 
 var $13=$this;
 _free($13);
 label=6;break;
 case 6: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__18numpunctIwED2Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 HEAP32[(($1)>>2)]=5768;
 var $2=(($this+16)|0);
 var $3=$2;
 var $4=HEAP8[($3)];
 var $5=$4&1;
 var $6=(($5<<24)>>24)==0;
 if($6){label=4;break;}else{label=2;break;}
 case 2: 
 var $8=(($this+24)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==0;
 if($10){label=4;break;}else{label=3;break;}
 case 3: 
 _free($9);
 label=4;break;
 case 4: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18numpunctIcE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_decimal_pointEv($this){
 var label=0;


 var $1=(($this+8)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+9)|0);
 var $2=HEAP8[($1)];
 return $2;
}


function __ZNKSt3__18numpunctIwE16do_thousands_sepEv($this){
 var label=0;


 var $1=(($this+12)|0);
 var $2=HEAP32[(($1)>>2)];
 return $2;
}


function __ZNKSt3__18numpunctIcE11do_groupingEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+12)|0);
 var $2=$1;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=20;break;
 case 3: 
 var $9=(($this+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$agg_result;
 HEAP8[($20)]=$19;
 var $21=$agg_result;
 var $22=(($21+1)|0);
 var $__p_0_i_i_i=$22;label=19;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 label=8;break;
 case 8: 
 var $27=_malloc($_size_i);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=18;break;}
 case 9: 
 var $30=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=10;break;}
 case 10: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $35=$lpad_phi_i$1;
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=16;break;}
 case 14: 
 var $38=$lpad_phi_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $44=(($agg_result+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($agg_result+4)|0);
 HEAP32[(($47)>>2)]=$12;
 var $__p_0_i_i_i=$27;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i_i_i, $10, $12)|0);
 var $48=(($__p_0_i_i_i+$12)|0);
 HEAP8[($48)]=0;
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18numpunctIwE11do_groupingEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this+16)|0);
 var $2=$1;
 var $3=HEAP8[($2)];
 var $4=$3&1;
 var $5=(($4<<24)>>24)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=$agg_result;
 assert(12 % 1 === 0);HEAP32[(($7)>>2)]=HEAP32[(($2)>>2)];HEAP32[((($7)+(4))>>2)]=HEAP32[((($2)+(4))>>2)];HEAP32[((($7)+(8))>>2)]=HEAP32[((($2)+(8))>>2)];
 label=20;break;
 case 3: 
 var $9=(($this+24)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($this+20)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12>>>0)>4294967279;
 if($13){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $16=($12>>>0)<11;
 if($16){label=6;break;}else{label=7;break;}
 case 6: 
 var $18=$12<<1;
 var $19=(($18)&255);
 var $20=$agg_result;
 HEAP8[($20)]=$19;
 var $21=$agg_result;
 var $22=(($21+1)|0);
 var $__p_0_i_i_i=$22;label=19;break;
 case 7: 
 var $23=((($12)+(16))|0);
 var $24=$23&-16;
 var $25=($24|0)==0;
 var $_size_i=($25?1:$24);
 label=8;break;
 case 8: 
 var $27=_malloc($_size_i);
 var $28=($27|0)==0;
 if($28){label=9;break;}else{label=18;break;}
 case 9: 
 var $30=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $31=($30|0)==0;
 if($31){label=15;break;}else{label=10;break;}
 case 10: 
 var $33=$30;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$33]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $35=$lpad_phi_i$1;
 var $36=($35|0)<0;
 if($36){label=14;break;}else{label=16;break;}
 case 14: 
 var $38=$lpad_phi_i$0;
 ___cxa_call_unexpected($38);
 throw "Reached an unreachable!";
 case 15: 
 var $40=___cxa_allocate_exception(4);
 var $41=$40;
 HEAP32[(($41)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($40,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $44=(($agg_result+8)|0);
 HEAP32[(($44)>>2)]=$27;
 var $45=$24|1;
 var $46=(($agg_result)|0);
 HEAP32[(($46)>>2)]=$45;
 var $47=(($agg_result+4)|0);
 HEAP32[(($47)>>2)]=$12;
 var $__p_0_i_i_i=$27;label=19;break;
 case 19: 
 var $__p_0_i_i_i;
 assert($12 % 1 === 0);(_memcpy($__p_0_i_i_i, $10, $12)|0);
 var $48=(($__p_0_i_i_i+$12)|0);
 HEAP8[($48)]=0;
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18numpunctIcE11do_truenameEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[($1)]=8;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 var $4=$3;
 tempBigInt=1702195828;HEAP8[($4)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($4)+(3))|0)]=tempBigInt&0xff;
 var $5=(($2+5)|0);
 HEAP8[($5)]=0;
 return;
}


function __ZNKSt3__18numpunctIwE11do_truenameEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=2728;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=((($5)-(2728))|0);
 var $7=$6>>2;
 var $8=($7>>>0)>1073741807;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $11=($7>>>0)<2;
 if($11){label=6;break;}else{label=7;break;}
 case 6: 
 var $13=$6>>>1;
 var $14=(($13)&255);
 var $15=$agg_result;
 HEAP8[($15)]=$14;
 var $16=(($agg_result+4)|0);
 var $__p_0_i=$16;label=19;break;
 case 7: 
 var $17=((($7)+(4))|0);
 var $18=$17&-4;
 var $19=$18<<2;
 var $20=($19|0)==0;
 var $_size_i=($20?1:$19);
 label=8;break;
 case 8: 
 var $22=_malloc($_size_i);
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=18;break;}
 case 9: 
 var $25=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=15;break;}else{label=10;break;}
 case 10: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $30=$lpad_phi_i$1;
 var $31=($30|0)<0;
 if($31){label=14;break;}else{label=16;break;}
 case 14: 
 var $33=$lpad_phi_i$0;
 ___cxa_call_unexpected($33);
 throw "Reached an unreachable!";
 case 15: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $39=$22;
 var $40=(($agg_result+8)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=$18|1;
 var $42=(($agg_result)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=(($agg_result+4)|0);
 HEAP32[(($43)>>2)]=$7;
 var $__p_0_i=$39;label=19;break;
 case 19: 
 var $__p_0_i;
 var $45=($7|0)==0;
 if($45){label=21;break;}else{var $_023_i_i=2728;var $_014_i_i=$7;var $_05_i_i=$__p_0_i;label=20;break;}
 case 20: 
 var $_05_i_i;
 var $_014_i_i;
 var $_023_i_i;
 var $46=((($_014_i_i)-(1))|0);
 var $47=(($_023_i_i+4)|0);
 var $48=HEAP32[(($_023_i_i)>>2)];
 var $49=(($_05_i_i+4)|0);
 HEAP32[(($_05_i_i)>>2)]=$48;
 var $50=($46|0)==0;
 if($50){label=21;break;}else{var $_023_i_i=$47;var $_014_i_i=$46;var $_05_i_i=$49;label=20;break;}
 case 21: 
 var $51=(($__p_0_i+($7<<2))|0);
 HEAP32[(($51)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__18numpunctIcE12do_falsenameEv($agg_result,$this){
 var label=0;


 var $1=$agg_result;
 HEAP8[($1)]=10;
 var $2=$agg_result;
 var $3=(($2+1)|0);
 assert(5 % 1 === 0);HEAP8[($3)]=HEAP8[(2696)];HEAP8[((($3)+(1))|0)]=HEAP8[(2697)];HEAP8[((($3)+(2))|0)]=HEAP8[(2698)];HEAP8[((($3)+(3))|0)]=HEAP8[(2699)];HEAP8[((($3)+(4))|0)]=HEAP8[(2700)];
 var $4=(($2+6)|0);
 HEAP8[($4)]=0;
 return;
}


function __ZNKSt3__18numpunctIwE12do_falsenameEv($agg_result,$this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $_0_i=2656;label=2;break;
 case 2: 
 var $_0_i;
 var $2=HEAP32[(($_0_i)>>2)];
 var $3=($2|0)==0;
 var $4=(($_0_i+4)|0);
 if($3){label=3;break;}else{var $_0_i=$4;label=2;break;}
 case 3: 
 var $5=$_0_i;
 var $6=((($5)-(2656))|0);
 var $7=$6>>2;
 var $8=($7>>>0)>1073741807;
 if($8){label=4;break;}else{label=5;break;}
 case 4: 
 __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv();
 throw "Reached an unreachable!";
 case 5: 
 var $11=($7>>>0)<2;
 if($11){label=6;break;}else{label=7;break;}
 case 6: 
 var $13=$6>>>1;
 var $14=(($13)&255);
 var $15=$agg_result;
 HEAP8[($15)]=$14;
 var $16=(($agg_result+4)|0);
 var $__p_0_i=$16;label=19;break;
 case 7: 
 var $17=((($7)+(4))|0);
 var $18=$17&-4;
 var $19=$18<<2;
 var $20=($19|0)==0;
 var $_size_i=($20?1:$19);
 label=8;break;
 case 8: 
 var $22=_malloc($_size_i);
 var $23=($22|0)==0;
 if($23){label=9;break;}else{label=18;break;}
 case 9: 
 var $25=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $26=($25|0)==0;
 if($26){label=15;break;}else{label=10;break;}
 case 10: 
 var $28=$25;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$28]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=11;break; }
 case 11: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=13;break;
 case 12: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=13;break;
 case 13: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $30=$lpad_phi_i$1;
 var $31=($30|0)<0;
 if($31){label=14;break;}else{label=16;break;}
 case 14: 
 var $33=$lpad_phi_i$0;
 ___cxa_call_unexpected($33);
 throw "Reached an unreachable!";
 case 15: 
 var $35=___cxa_allocate_exception(4);
 var $36=$35;
 HEAP32[(($36)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($35,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=12;break; }
 case 16: 
 ___resumeException($lpad_phi_i$0)
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $39=$22;
 var $40=(($agg_result+8)|0);
 HEAP32[(($40)>>2)]=$39;
 var $41=$18|1;
 var $42=(($agg_result)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=(($agg_result+4)|0);
 HEAP32[(($43)>>2)]=$7;
 var $__p_0_i=$39;label=19;break;
 case 19: 
 var $__p_0_i;
 var $45=($7|0)==0;
 if($45){label=21;break;}else{var $_023_i_i=2656;var $_014_i_i=$7;var $_05_i_i=$__p_0_i;label=20;break;}
 case 20: 
 var $_05_i_i;
 var $_014_i_i;
 var $_023_i_i;
 var $46=((($_014_i_i)-(1))|0);
 var $47=(($_023_i_i+4)|0);
 var $48=HEAP32[(($_023_i_i)>>2)];
 var $49=(($_05_i_i+4)|0);
 HEAP32[(($_05_i_i)>>2)]=$48;
 var $50=($46|0)==0;
 if($50){label=21;break;}else{var $_023_i_i=$47;var $_014_i_i=$46;var $_05_i_i=$49;label=20;break;}
 case 21: 
 var $51=(($__p_0_i+($7<<2))|0);
 HEAP32[(($51)>>2)]=0;
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19312)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19312);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19200)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19200);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16656, 0, 168)|0;
 var $12=_atexit(912,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16656,3928) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16668,3920) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16680,3912) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16692,3896) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16704,3880) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16716,3872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16728,3848) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16740,3840) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16752,3832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16764,3808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16776,3800) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16788,3792) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16800,3776) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16812,3768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((17712)>>2)]=16656;

 label=21;break;
 case 21: 
 var $15=HEAP32[((17712)>>2)];
 return $15;
 case 22: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__weeksEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19256)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=21;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19256);
 var $5=($4|0)==0;
 if($5){label=21;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19176)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19176);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15912, 0, 168)|0;
 var $12=_atexit(492,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15912,4464) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=22;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15924,4416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=22;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15936,4384) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=22;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15948,4344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=22;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15960,4272) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=22;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15972,4240) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=22;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15984,4200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=22;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15996,4184) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=22;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16008,4128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=22;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16020,4112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=22;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16032,4096) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=22;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16044,4032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=22;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16056,4016) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=22;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16068,4000) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=22;break; }
 case 20: 
 HEAP32[((17624)>>2)]=15912;

 label=21;break;
 case 21: 
 var $15=HEAP32[((17624)>>2)];
 return $15;
 case 22: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19304)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19304);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19192)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19192);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16368, 0, 288)|0;
 var $12=_atexit(542,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16368,864) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16380,832) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16392,824) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16404,816) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16416,808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16428,752) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16440,744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16452,736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16464,688) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16476,680) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16488,664) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16500,648) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16512,640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16524,632) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16536,608) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16548,496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16560,808) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16572,488) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16584,480) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16596,4528) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16608,4520) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16620,4512) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16632,4504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16644,4496) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((17704)>>2)]=16368;

 label=31;break;
 case 31: 
 var $15=HEAP32[((17704)>>2)];
 return $15;
 case 32: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE8__monthsEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19248)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=31;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19248);
 var $5=($4|0)==0;
 if($5){label=31;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19168)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19168);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(15624, 0, 288)|0;
 var $12=_atexit(424,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15624,1680) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=32;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15636,1640) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=32;break; }
 case 8: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15648,1616) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=9;break; } else { label=32;break; }
 case 9: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15660,1544) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=32;break; }
 case 10: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15672,1128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=11;break; } else { label=32;break; }
 case 11: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15684,1504) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=12;break; } else { label=32;break; }
 case 12: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15696,1456) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=13;break; } else { label=32;break; }
 case 13: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15708,1416) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=14;break; } else { label=32;break; }
 case 14: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15720,1376) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=15;break; } else { label=32;break; }
 case 15: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15732,1344) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=16;break; } else { label=32;break; }
 case 16: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15744,1256) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=32;break; }
 case 17: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15756,1216) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=18;break; } else { label=32;break; }
 case 18: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15768,1200) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=32;break; }
 case 19: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15780,1176) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=20;break; } else { label=32;break; }
 case 20: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15792,1160) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=21;break; } else { label=32;break; }
 case 21: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15804,1144) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=22;break; } else { label=32;break; }
 case 22: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15816,1128) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=23;break; } else { label=32;break; }
 case 23: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15828,1112) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=24;break; } else { label=32;break; }
 case 24: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15840,1048) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=25;break; } else { label=32;break; }
 case 25: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15852,1032) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=26;break; } else { label=32;break; }
 case 26: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15864,968) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=27;break; } else { label=32;break; }
 case 27: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15876,952) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=28;break; } else { label=32;break; }
 case 28: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15888,936) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=29;break; } else { label=32;break; }
 case 29: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(15900,872) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=30;break; } else { label=32;break; }
 case 30: 
 HEAP32[((17616)>>2)]=15624;

 label=31;break;
 case 31: 
 var $15=HEAP32[((17616)>>2)];
 return $15;
 case 32: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19320)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19320);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19208)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19208);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16824, 0, 288)|0;
 var $12=_atexit(420,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16824,1736) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6assignEPKc(16836,1728) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((17720)>>2)]=16824;

 label=9;break;
 case 9: 
 var $15=HEAP32[((17720)>>2)];
 return $15;
 case 10: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE7__am_pmEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19264)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=9;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19264);
 var $5=($4|0)==0;
 if($5){label=9;break;}else{label=3;break;}
 case 3: 
 var $7=HEAP8[(19184)];
 var $8=(($7<<24)>>24)==0;
 if($8){label=4;break;}else{label=6;break;}
 case 4: 
 var $10=___cxa_guard_acquire(19184);
 var $11=($10|0)==0;
 if($11){label=6;break;}else{label=5;break;}
 case 5: 
 _memset(16080, 0, 288)|0;
 var $12=_atexit(868,0,___dso_handle);

 label=6;break;
 case 6: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16080,1768) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=10;break; }
 case 7: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIwNS_11char_traitsIwEENS_9allocatorIwEEE6assignEPKw(16092,1744) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=8;break; } else { label=10;break; }
 case 8: 
 HEAP32[((17632)>>2)]=16080;

 label=9;break;
 case 9: 
 var $15=HEAP32[((17632)>>2)];
 return $15;
 case 10: 
 var $17$0 = ___cxa_find_matching_catch(-1, -1); var $17$1 = tempRet0;

 ___resumeException($17$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19328)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19328);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[(17728)]=16;
 var $$etemp$1=17729;
 var $$etemp$0$0=623865125;
 var $$etemp$0$1=2032480100;
 var $st$2$0=(($$etemp$1)|0);
 tempBigInt=$$etemp$0$0;HEAP8[($st$2$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))|0)]=tempBigInt&0xff;
 var $st$3$1=(($$etemp$1+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[($st$3$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))|0)]=tempBigInt&0xff;
 HEAP8[(17737)]=0;
 var $6=_atexit((904),17728,___dso_handle);

 label=4;break;
 case 4: 
 return 17728;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__xEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19272)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19272);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=2560;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(2560))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(17640)]=$18;
 var $__p_0_i=17644;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((17648)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((17640)>>2)]=$41;
 HEAP32[((17644)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_023_i_i=2560;var $_014_i_i=$11;var $_05_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_05_i_i;
 var $_014_i_i;
 var $_023_i_i;
 var $44=((($_014_i_i)-(1))|0);
 var $45=(($_023_i_i+4)|0);
 var $46=HEAP32[(($_023_i_i)>>2)];
 var $47=(($_05_i_i+4)|0);
 HEAP32[(($_05_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_023_i_i=$45;var $_014_i_i=$44;var $_05_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((628),17640,___dso_handle);

 label=24;break;
 case 24: 
 return 17640;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;

 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19352)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=4;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19352);
 var $5=($4|0)==0;
 if($5){label=4;break;}else{label=3;break;}
 case 3: 
 HEAP8[(17776)]=16;
 var $$etemp$1=17777;
 var $$etemp$0$0=624576549;
 var $$etemp$0$1=1394948685;
 var $st$2$0=(($$etemp$1)|0);
 tempBigInt=$$etemp$0$0;HEAP8[($st$2$0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$2$0)+(3))|0)]=tempBigInt&0xff;
 var $st$3$1=(($$etemp$1+4)|0);
 tempBigInt=$$etemp$0$1;HEAP8[($st$3$1)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(1))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(2))|0)]=tempBigInt&0xff;tempBigInt = tempBigInt>>8;HEAP8[((($st$3$1)+(3))|0)]=tempBigInt&0xff;
 HEAP8[(17785)]=0;
 var $6=_atexit((904),17776,___dso_handle);

 label=4;break;
 case 4: 
 return 17776;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__XEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19296)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19296);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=2496;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(2496))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(17688)]=$18;
 var $__p_0_i=17692;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((17696)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((17688)>>2)]=$41;
 HEAP32[((17692)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_023_i_i=2496;var $_014_i_i=$11;var $_05_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_05_i_i;
 var $_014_i_i;
 var $_023_i_i;
 var $44=((($_014_i_i)-(1))|0);
 var $45=(($_023_i_i+4)|0);
 var $46=HEAP32[(($_023_i_i)>>2)];
 var $47=(($_05_i_i+4)|0);
 HEAP32[(($_05_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_023_i_i=$45;var $_014_i_i=$44;var $_05_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((628),17688,___dso_handle);

 label=24;break;
 case 24: 
 return 17688;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;

 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19344)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19344);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(17760,2424,20) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((904),17760,___dso_handle);

 label=5;break;
 case 5: 
 return 17760;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__cEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19288)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19288);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=2304;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(2304))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(17672)]=$18;
 var $__p_0_i=17676;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((17680)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((17672)>>2)]=$41;
 HEAP32[((17676)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_023_i_i=2304;var $_014_i_i=$11;var $_05_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_05_i_i;
 var $_014_i_i;
 var $_023_i_i;
 var $44=((($_014_i_i)-(1))|0);
 var $45=(($_023_i_i+4)|0);
 var $46=HEAP32[(($_023_i_i)>>2)];
 var $47=(($_05_i_i+4)|0);
 HEAP32[(($_05_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_023_i_i=$45;var $_014_i_i=$44;var $_05_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((628),17672,___dso_handle);

 label=24;break;
 case 24: 
 return 17672;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;

 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIcE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19336)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=5;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19336);
 var $5=($4|0)==0;
 if($5){label=5;break;}else{label=3;break;}
 case 3: 
 (function() { try { __THREW__ = 0; return __ZNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEE6__initEPKcj(17744,2248,11) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=4;break; } else { label=6;break; }
 case 4: 
 var $7=_atexit((904),17744,___dso_handle);

 label=5;break;
 case 5: 
 return 17744;
 case 6: 
 var $10$0 = ___cxa_find_matching_catch(-1, -1); var $10$1 = tempRet0;

 ___resumeException($10$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNKSt3__120__time_get_c_storageIwE3__rEv($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP8[(19280)];
 var $2=(($1<<24)>>24)==0;
 if($2){label=2;break;}else{label=24;break;}
 case 2: 
 var $4=___cxa_guard_acquire(19280);
 var $5=($4|0)==0;
 if($5){label=24;break;}else{var $_0_i=2192;label=3;break;}
 case 3: 
 var $_0_i;
 var $6=HEAP32[(($_0_i)>>2)];
 var $7=($6|0)==0;
 var $8=(($_0_i+4)|0);
 if($7){label=4;break;}else{var $_0_i=$8;label=3;break;}
 case 4: 
 var $9=$_0_i;
 var $10=((($9)-(2192))|0);
 var $11=$10>>2;
 var $12=($11>>>0)>1073741807;
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 (function() { try { __THREW__ = 0; return __ZNKSt3__121__basic_string_commonILb1EE20__throw_length_errorEv() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=6;break; } else { label=25;break; }
 case 6: 
 throw "Reached an unreachable!";
 case 7: 
 var $15=($11>>>0)<2;
 if($15){label=8;break;}else{label=9;break;}
 case 8: 
 var $17=$10>>>1;
 var $18=(($17)&255);
 HEAP8[(17656)]=$18;
 var $__p_0_i=17660;label=21;break;
 case 9: 
 var $19=((($11)+(4))|0);
 var $20=$19&-4;
 var $21=$20<<2;
 var $22=($21|0)==0;
 var $_size_i=($22?1:$21);
 label=10;break;
 case 10: 
 var $24=_malloc($_size_i);
 var $25=($24|0)==0;
 if($25){label=11;break;}else{label=20;break;}
 case 11: 
 var $27=(tempValue=HEAP32[((19160)>>2)],HEAP32[((19160)>>2)]=tempValue+0,tempValue);
 var $28=($27|0)==0;
 if($28){label=18;break;}else{label=12;break;}
 case 12: 
 var $30=$27;
 (function() { try { __THREW__ = 0; return FUNCTION_TABLE[$30]() } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=10;break; } else { label=13;break; }
 case 13: 
 var $lpad_loopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_loopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_loopexit_i$1;var $lpad_phi_i$0=$lpad_loopexit_i$0;label=15;break;
 case 14: 
 var $lpad_nonloopexit_i$0 = ___cxa_find_matching_catch(-1, -1); var $lpad_nonloopexit_i$1 = tempRet0;
 var $lpad_phi_i$1=$lpad_nonloopexit_i$1;var $lpad_phi_i$0=$lpad_nonloopexit_i$0;label=15;break;
 case 15: 
 var $lpad_phi_i$0;
 var $lpad_phi_i$1;
 var $32=$lpad_phi_i$1;
 var $33=($32|0)<0;
 if($33){label=16;break;}else{var $eh_lpad_body$1=$lpad_phi_i$1;var $eh_lpad_body$0=$lpad_phi_i$0;label=26;break;}
 case 16: 
 var $35=$lpad_phi_i$0;
 (function() { try { __THREW__ = 0; return ___cxa_call_unexpected($35) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=17;break; } else { label=25;break; }
 case 17: 
 throw "Reached an unreachable!";
 case 18: 
 var $37=___cxa_allocate_exception(4);
 var $38=$37;
 HEAP32[(($38)>>2)]=5192;
 (function() { try { __THREW__ = 0; return ___cxa_throw($37,11704,(78)) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=19;break; } else { label=14;break; }
 case 19: 
 throw "Reached an unreachable!";
 case 20: 
 var $40=$24;
 HEAP32[((17664)>>2)]=$40;
 var $41=$20|1;
 HEAP32[((17656)>>2)]=$41;
 HEAP32[((17660)>>2)]=$11;
 var $__p_0_i=$40;label=21;break;
 case 21: 
 var $__p_0_i;
 var $43=($11|0)==0;
 if($43){label=23;break;}else{var $_023_i_i=2192;var $_014_i_i=$11;var $_05_i_i=$__p_0_i;label=22;break;}
 case 22: 
 var $_05_i_i;
 var $_014_i_i;
 var $_023_i_i;
 var $44=((($_014_i_i)-(1))|0);
 var $45=(($_023_i_i+4)|0);
 var $46=HEAP32[(($_023_i_i)>>2)];
 var $47=(($_05_i_i+4)|0);
 HEAP32[(($_05_i_i)>>2)]=$46;
 var $48=($44|0)==0;
 if($48){label=23;break;}else{var $_023_i_i=$45;var $_014_i_i=$44;var $_05_i_i=$47;label=22;break;}
 case 23: 
 var $49=(($__p_0_i+($11<<2))|0);
 HEAP32[(($49)>>2)]=0;
 var $50=_atexit((628),17656,___dso_handle);

 label=24;break;
 case 24: 
 return 17656;
 case 25: 
 var $53$0 = ___cxa_find_matching_catch(-1, -1); var $53$1 = tempRet0;
 var $eh_lpad_body$1=$53$1;var $eh_lpad_body$0=$53$0;label=26;break;
 case 26: 
 var $eh_lpad_body$0;
 var $eh_lpad_body$1;

 ___resumeException($eh_lpad_body$0)
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIeEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19232)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19232);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=_strtold_l($__a,$__p2);
 var $16=HEAP32[(($3)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $20=HEAP32[(($__p2)>>2)];
 var $21=($20|0)==($__a_end|0);
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $24=($16|0)==34;
 if($24){label=12;break;}else{var $_0=$15;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$15;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIdEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19232)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19232);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=_strtold_l($__a,$__p2);
 var $16=HEAP32[(($3)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $20=HEAP32[(($__p2)>>2)];
 var $21=($20|0)==($__a_end|0);
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 11: 
 var $24=($16|0)==34;
 if($24){label=12;break;}else{var $_0=$15;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=$15;label=14;break;
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=14;break;
 case 14: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__115__num_get_floatIfEET_PKcS3_Rj($__a,$__a_end,$__err){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=14;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19232)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19232);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=_strtold_l($__a,$__p2);
 var $16=HEAP32[(($3)>>2)];
 var $17=($16|0)==0;
 if($17){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $20=HEAP32[(($__p2)>>2)];
 var $21=($20|0)==($__a_end|0);
 if($21){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 11: 
 var $24=($16|0)==34;
 if($24){label=12;break;}else{label=13;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 label=13;break;
 case 13: 
 var $27=$15;
 var $_0=$27;label=15;break;
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=15;break;
 case 15: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIyEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=15;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19232)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19232);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17128)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17128)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 13: 
 var $29=($21|0)==34;
 if($29){label=14;break;}else{var $_0$1=$20$1;var $_0$0=$20$0;label=16;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=-1;var $_0$0=-1;label=16;break;
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=16;break;
 case 16: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralImEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19232)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19232);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17128)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17128)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralIjEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19232)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19232);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17128)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17128)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=-1;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__127__num_get_unsigned_integralItEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=16;break;}else{label=2;break;}
 case 2: 
 var $3=HEAP8[($__a)];
 var $4=(($3<<24)>>24)==45;
 if($4){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 4: 
 var $7=___errno_location();
 var $8=HEAP32[(($7)>>2)];
 HEAP32[(($7)>>2)]=0;
 var $9=HEAP8[(19232)];
 var $10=(($9<<24)>>24)==0;
 if($10){label=5;break;}else{label=9;break;}
 case 5: 
 var $12=___cxa_guard_acquire(19232);
 var $13=($12|0)==0;
 if($13){label=9;break;}else{label=6;break;}
 case 6: 
 var $15=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=7;break; } else { label=8;break; }
 case 7: 
 HEAP32[((17128)>>2)]=$15;

 label=9;break;
 case 8: 
 var $18$0 = ___cxa_find_matching_catch(-1, -1); var $18$1 = tempRet0;

 ___resumeException($18$0)
 case 9: 
 var $19=HEAP32[((17128)>>2)];
 var $20$0=_strtoull_l($__a,$__p2,$__base,$19);
 var $20$1=tempRet0;
 var $21=HEAP32[(($7)>>2)];
 var $22=($21|0)==0;
 if($22){label=10;break;}else{label=11;break;}
 case 10: 
 HEAP32[(($7)>>2)]=$8;
 label=11;break;
 case 11: 
 var $25=HEAP32[(($__p2)>>2)];
 var $26=($25|0)==($__a_end|0);
 if($26){label=13;break;}else{label=12;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 13: 
 var $29=($21|0)==34;
 var $$etemp$0$0=65535;
 var $$etemp$0$1=0;
 var $30=(($20$1>>>0) > ($$etemp$0$1>>>0)) | (((($20$1>>>0) == ($$etemp$0$1>>>0) & ($20$0>>>0) >  ($$etemp$0$0>>>0))));
 var $or_cond=$29|$30;
 if($or_cond){label=14;break;}else{label=15;break;}
 case 14: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=-1;label=17;break;
 case 15: 
 var $33$0=$20$0;
 var $33=$33$0&65535;
 var $_0=$33;label=17;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=17;break;
 case 17: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIxEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=13;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19232)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19232);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((17128)>>2)];
 var $16$0=_strtoll_l($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=12;break;}else{var $_0$1=$16$1;var $_0$0=$16$0;label=14;break;}
 case 12: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$0$0=0;
 var $$etemp$0$1=0;
 var $27=(($16$1|0) > ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) >  ($$etemp$0$0>>>0))));
 var $$etemp$2$0=0;
 var $$etemp$2$1=-2147483648;
 var $$etemp$1$0=-1;
 var $$etemp$1$1=2147483647;
 var $_$0=($27?$$etemp$1$0:$$etemp$2$0);
 var $_$1=($27?$$etemp$1$1:$$etemp$2$1);
 STACKTOP=sp;return (tempRet0=$_$1,$_$0);
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 var $_0$1=0;var $_0$0=0;label=14;break;
 case 14: 
 var $_0$0;
 var $_0$1;
 STACKTOP=sp;return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt3__125__num_get_signed_integralIlEET_PKcS3_Rji($__a,$__a_end,$__err,$__base){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $__p2=sp;
 var $1=($__a|0)==($__a_end|0);
 if($1){label=19;break;}else{label=2;break;}
 case 2: 
 var $3=___errno_location();
 var $4=HEAP32[(($3)>>2)];
 HEAP32[(($3)>>2)]=0;
 var $5=HEAP8[(19232)];
 var $6=(($5<<24)>>24)==0;
 if($6){label=3;break;}else{label=7;break;}
 case 3: 
 var $8=___cxa_guard_acquire(19232);
 var $9=($8|0)==0;
 if($9){label=7;break;}else{label=4;break;}
 case 4: 
 var $11=(function() { try { __THREW__ = 0; return _newlocale(2147483647,3368,0) } catch(e) { if (typeof e != "number") throw e; if (ABORT) throw e; __THREW__ = 1; return null } })();if (!__THREW__) { label=5;break; } else { label=6;break; }
 case 5: 
 HEAP32[((17128)>>2)]=$11;

 label=7;break;
 case 6: 
 var $14$0 = ___cxa_find_matching_catch(-1, -1); var $14$1 = tempRet0;

 ___resumeException($14$0)
 case 7: 
 var $15=HEAP32[((17128)>>2)];
 var $16$0=_strtoll_l($__a,$__p2,$__base,$15);
 var $16$1=tempRet0;
 var $17=HEAP32[(($3)>>2)];
 var $18=($17|0)==0;
 if($18){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($3)>>2)]=$4;
 label=9;break;
 case 9: 
 var $21=HEAP32[(($__p2)>>2)];
 var $22=($21|0)==($__a_end|0);
 if($22){label=11;break;}else{label=10;break;}
 case 10: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=20;break;
 case 11: 
 var $25=($17|0)==34;
 if($25){label=16;break;}else{label=12;break;}
 case 12: 
 var $$etemp$0$0=-2147483648;
 var $$etemp$0$1=-1;
 var $27=(($16$1|0) < ($$etemp$0$1|0)) | (((($16$1|0) == ($$etemp$0$1|0) & ($16$0>>>0) <  ($$etemp$0$0>>>0))));
 if($27){label=13;break;}else{label=14;break;}
 case 13: 
 HEAP32[(($__err)>>2)]=4;
 label=17;break;
 case 14: 
 var $$etemp$1$0=2147483647;
 var $$etemp$1$1=0;
 var $29=(($16$1|0) > ($$etemp$1$1|0)) | (((($16$1|0) == ($$etemp$1$1|0) & ($16$0>>>0) >  ($$etemp$1$0>>>0))));
 if($29){label=15;break;}else{label=18;break;}
 case 15: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=2147483647;label=20;break;
 case 16: 
 HEAP32[(($__err)>>2)]=4;
 var $$etemp$2$0=0;
 var $$etemp$2$1=0;
 var $31=(($16$1|0) > ($$etemp$2$1|0)) | (((($16$1|0) == ($$etemp$2$1|0) & ($16$0>>>0) >  ($$etemp$2$0>>>0))));
 if($31){var $_0=2147483647;label=20;break;}else{label=17;break;}
 case 17: 
 var $_0=-2147483648;label=20;break;
 case 18: 
 var $34$0=$16$0;
 var $34=$34$0;
 var $_0=$34;label=20;break;
 case 19: 
 HEAP32[(($__err)>>2)]=4;
 var $_0=0;label=20;break;
 case 20: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(16356)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16364)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 _free($9);
 label=4;break;
 case 4: 
 var $10=HEAP8[(16344)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=7;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[((16352)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 _free($17);
 label=7;break;
 case 7: 
 var $18=HEAP8[(16332)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=HEAP32[((16340)>>2)];
 var $23=($22|0)==0;
 if($23){label=10;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 _free($25);
 label=10;break;
 case 10: 
 var $26=HEAP8[(16320)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[((16328)>>2)];
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 _free($33);
 label=13;break;
 case 13: 
 var $34=HEAP8[(16308)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=16;break;}else{label=14;break;}
 case 14: 
 var $38=HEAP32[((16316)>>2)];
 var $39=($38|0)==0;
 if($39){label=16;break;}else{label=15;break;}
 case 15: 
 var $41=$38;
 _free($41);
 label=16;break;
 case 16: 
 var $42=HEAP8[(16296)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=17;break;}
 case 17: 
 var $46=HEAP32[((16304)>>2)];
 var $47=($46|0)==0;
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $49=$46;
 _free($49);
 label=19;break;
 case 19: 
 var $50=HEAP8[(16284)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=22;break;}else{label=20;break;}
 case 20: 
 var $54=HEAP32[((16292)>>2)];
 var $55=($54|0)==0;
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $57=$54;
 _free($57);
 label=22;break;
 case 22: 
 var $58=HEAP8[(16272)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=25;break;}else{label=23;break;}
 case 23: 
 var $62=HEAP32[((16280)>>2)];
 var $63=($62|0)==0;
 if($63){label=25;break;}else{label=24;break;}
 case 24: 
 var $65=$62;
 _free($65);
 label=25;break;
 case 25: 
 var $66=HEAP8[(16260)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=28;break;}else{label=26;break;}
 case 26: 
 var $70=HEAP32[((16268)>>2)];
 var $71=($70|0)==0;
 if($71){label=28;break;}else{label=27;break;}
 case 27: 
 var $73=$70;
 _free($73);
 label=28;break;
 case 28: 
 var $74=HEAP8[(16248)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=31;break;}else{label=29;break;}
 case 29: 
 var $78=HEAP32[((16256)>>2)];
 var $79=($78|0)==0;
 if($79){label=31;break;}else{label=30;break;}
 case 30: 
 var $81=$78;
 _free($81);
 label=31;break;
 case 31: 
 var $82=HEAP8[(16236)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=34;break;}else{label=32;break;}
 case 32: 
 var $86=HEAP32[((16244)>>2)];
 var $87=($86|0)==0;
 if($87){label=34;break;}else{label=33;break;}
 case 33: 
 var $89=$86;
 _free($89);
 label=34;break;
 case 34: 
 var $90=HEAP8[(16224)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=37;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[((16232)>>2)];
 var $95=($94|0)==0;
 if($95){label=37;break;}else{label=36;break;}
 case 36: 
 var $97=$94;
 _free($97);
 label=37;break;
 case 37: 
 var $98=HEAP8[(16212)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=HEAP32[((16220)>>2)];
 var $103=($102|0)==0;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $105=$102;
 _free($105);
 label=40;break;
 case 40: 
 var $106=HEAP8[(16200)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=HEAP32[((16208)>>2)];
 var $111=($110|0)==0;
 if($111){label=43;break;}else{label=42;break;}
 case 42: 
 var $113=$110;
 _free($113);
 label=43;break;
 case 43: 
 var $114=HEAP8[(16188)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=46;break;}else{label=44;break;}
 case 44: 
 var $118=HEAP32[((16196)>>2)];
 var $119=($118|0)==0;
 if($119){label=46;break;}else{label=45;break;}
 case 45: 
 var $121=$118;
 _free($121);
 label=46;break;
 case 46: 
 var $122=HEAP8[(16176)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=49;break;}else{label=47;break;}
 case 47: 
 var $126=HEAP32[((16184)>>2)];
 var $127=($126|0)==0;
 if($127){label=49;break;}else{label=48;break;}
 case 48: 
 var $129=$126;
 _free($129);
 label=49;break;
 case 49: 
 var $130=HEAP8[(16164)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=52;break;}else{label=50;break;}
 case 50: 
 var $134=HEAP32[((16172)>>2)];
 var $135=($134|0)==0;
 if($135){label=52;break;}else{label=51;break;}
 case 51: 
 var $137=$134;
 _free($137);
 label=52;break;
 case 52: 
 var $138=HEAP8[(16152)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=55;break;}else{label=53;break;}
 case 53: 
 var $142=HEAP32[((16160)>>2)];
 var $143=($142|0)==0;
 if($143){label=55;break;}else{label=54;break;}
 case 54: 
 var $145=$142;
 _free($145);
 label=55;break;
 case 55: 
 var $146=HEAP8[(16140)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=58;break;}else{label=56;break;}
 case 56: 
 var $150=HEAP32[((16148)>>2)];
 var $151=($150|0)==0;
 if($151){label=58;break;}else{label=57;break;}
 case 57: 
 var $153=$150;
 _free($153);
 label=58;break;
 case 58: 
 var $154=HEAP8[(16128)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=61;break;}else{label=59;break;}
 case 59: 
 var $158=HEAP32[((16136)>>2)];
 var $159=($158|0)==0;
 if($159){label=61;break;}else{label=60;break;}
 case 60: 
 var $161=$158;
 _free($161);
 label=61;break;
 case 61: 
 var $162=HEAP8[(16116)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=64;break;}else{label=62;break;}
 case 62: 
 var $166=HEAP32[((16124)>>2)];
 var $167=($166|0)==0;
 if($167){label=64;break;}else{label=63;break;}
 case 63: 
 var $169=$166;
 _free($169);
 label=64;break;
 case 64: 
 var $170=HEAP8[(16104)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=67;break;}else{label=65;break;}
 case 65: 
 var $174=HEAP32[((16112)>>2)];
 var $175=($174|0)==0;
 if($175){label=67;break;}else{label=66;break;}
 case 66: 
 var $177=$174;
 _free($177);
 label=67;break;
 case 67: 
 var $178=HEAP8[(16092)];
 var $179=$178&1;
 var $180=(($179<<24)>>24)==0;
 if($180){label=70;break;}else{label=68;break;}
 case 68: 
 var $182=HEAP32[((16100)>>2)];
 var $183=($182|0)==0;
 if($183){label=70;break;}else{label=69;break;}
 case 69: 
 var $185=$182;
 _free($185);
 label=70;break;
 case 70: 
 var $186=HEAP8[(16080)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=73;break;}else{label=71;break;}
 case 71: 
 var $190=HEAP32[((16088)>>2)];
 var $191=($190|0)==0;
 if($191){label=73;break;}else{label=72;break;}
 case 72: 
 var $193=$190;
 _free($193);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor53($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(17100)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((17108)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _free($6);
 label=4;break;
 case 4: 
 var $9=HEAP8[(17088)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP32[((17096)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 _free($13);
 label=7;break;
 case 7: 
 var $16=HEAP8[(17076)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=10;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[((17084)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 _free($20);
 label=10;break;
 case 10: 
 var $23=HEAP8[(17064)];
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=13;break;}else{label=11;break;}
 case 11: 
 var $27=HEAP32[((17072)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 _free($27);
 label=13;break;
 case 13: 
 var $30=HEAP8[(17052)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=16;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[((17060)>>2)];
 var $35=($34|0)==0;
 if($35){label=16;break;}else{label=15;break;}
 case 15: 
 _free($34);
 label=16;break;
 case 16: 
 var $37=HEAP8[(17040)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=19;break;}else{label=17;break;}
 case 17: 
 var $41=HEAP32[((17048)>>2)];
 var $42=($41|0)==0;
 if($42){label=19;break;}else{label=18;break;}
 case 18: 
 _free($41);
 label=19;break;
 case 19: 
 var $44=HEAP8[(17028)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=22;break;}else{label=20;break;}
 case 20: 
 var $48=HEAP32[((17036)>>2)];
 var $49=($48|0)==0;
 if($49){label=22;break;}else{label=21;break;}
 case 21: 
 _free($48);
 label=22;break;
 case 22: 
 var $51=HEAP8[(17016)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=25;break;}else{label=23;break;}
 case 23: 
 var $55=HEAP32[((17024)>>2)];
 var $56=($55|0)==0;
 if($56){label=25;break;}else{label=24;break;}
 case 24: 
 _free($55);
 label=25;break;
 case 25: 
 var $58=HEAP8[(17004)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=28;break;}else{label=26;break;}
 case 26: 
 var $62=HEAP32[((17012)>>2)];
 var $63=($62|0)==0;
 if($63){label=28;break;}else{label=27;break;}
 case 27: 
 _free($62);
 label=28;break;
 case 28: 
 var $65=HEAP8[(16992)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=31;break;}else{label=29;break;}
 case 29: 
 var $69=HEAP32[((17000)>>2)];
 var $70=($69|0)==0;
 if($70){label=31;break;}else{label=30;break;}
 case 30: 
 _free($69);
 label=31;break;
 case 31: 
 var $72=HEAP8[(16980)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=34;break;}else{label=32;break;}
 case 32: 
 var $76=HEAP32[((16988)>>2)];
 var $77=($76|0)==0;
 if($77){label=34;break;}else{label=33;break;}
 case 33: 
 _free($76);
 label=34;break;
 case 34: 
 var $79=HEAP8[(16968)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=37;break;}else{label=35;break;}
 case 35: 
 var $83=HEAP32[((16976)>>2)];
 var $84=($83|0)==0;
 if($84){label=37;break;}else{label=36;break;}
 case 36: 
 _free($83);
 label=37;break;
 case 37: 
 var $86=HEAP8[(16956)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=40;break;}else{label=38;break;}
 case 38: 
 var $90=HEAP32[((16964)>>2)];
 var $91=($90|0)==0;
 if($91){label=40;break;}else{label=39;break;}
 case 39: 
 _free($90);
 label=40;break;
 case 40: 
 var $93=HEAP8[(16944)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=43;break;}else{label=41;break;}
 case 41: 
 var $97=HEAP32[((16952)>>2)];
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=42;break;}
 case 42: 
 _free($97);
 label=43;break;
 case 43: 
 var $100=HEAP8[(16932)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=46;break;}else{label=44;break;}
 case 44: 
 var $104=HEAP32[((16940)>>2)];
 var $105=($104|0)==0;
 if($105){label=46;break;}else{label=45;break;}
 case 45: 
 _free($104);
 label=46;break;
 case 46: 
 var $107=HEAP8[(16920)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=49;break;}else{label=47;break;}
 case 47: 
 var $111=HEAP32[((16928)>>2)];
 var $112=($111|0)==0;
 if($112){label=49;break;}else{label=48;break;}
 case 48: 
 _free($111);
 label=49;break;
 case 49: 
 var $114=HEAP8[(16908)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=52;break;}else{label=50;break;}
 case 50: 
 var $118=HEAP32[((16916)>>2)];
 var $119=($118|0)==0;
 if($119){label=52;break;}else{label=51;break;}
 case 51: 
 _free($118);
 label=52;break;
 case 52: 
 var $121=HEAP8[(16896)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=55;break;}else{label=53;break;}
 case 53: 
 var $125=HEAP32[((16904)>>2)];
 var $126=($125|0)==0;
 if($126){label=55;break;}else{label=54;break;}
 case 54: 
 _free($125);
 label=55;break;
 case 55: 
 var $128=HEAP8[(16884)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=58;break;}else{label=56;break;}
 case 56: 
 var $132=HEAP32[((16892)>>2)];
 var $133=($132|0)==0;
 if($133){label=58;break;}else{label=57;break;}
 case 57: 
 _free($132);
 label=58;break;
 case 58: 
 var $135=HEAP8[(16872)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=61;break;}else{label=59;break;}
 case 59: 
 var $139=HEAP32[((16880)>>2)];
 var $140=($139|0)==0;
 if($140){label=61;break;}else{label=60;break;}
 case 60: 
 _free($139);
 label=61;break;
 case 61: 
 var $142=HEAP8[(16860)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=64;break;}else{label=62;break;}
 case 62: 
 var $146=HEAP32[((16868)>>2)];
 var $147=($146|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 _free($146);
 label=64;break;
 case 64: 
 var $149=HEAP8[(16848)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){label=67;break;}else{label=65;break;}
 case 65: 
 var $153=HEAP32[((16856)>>2)];
 var $154=($153|0)==0;
 if($154){label=67;break;}else{label=66;break;}
 case 66: 
 _free($153);
 label=67;break;
 case 67: 
 var $156=HEAP8[(16836)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=70;break;}else{label=68;break;}
 case 68: 
 var $160=HEAP32[((16844)>>2)];
 var $161=($160|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 _free($160);
 label=70;break;
 case 70: 
 var $163=HEAP8[(16824)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=73;break;}else{label=71;break;}
 case 71: 
 var $167=HEAP32[((16832)>>2)];
 var $168=($167|0)==0;
 if($168){label=73;break;}else{label=72;break;}
 case 72: 
 _free($167);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor56($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(15900)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((15908)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 _free($9);
 label=4;break;
 case 4: 
 var $10=HEAP8[(15888)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=7;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[((15896)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 _free($17);
 label=7;break;
 case 7: 
 var $18=HEAP8[(15876)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=HEAP32[((15884)>>2)];
 var $23=($22|0)==0;
 if($23){label=10;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 _free($25);
 label=10;break;
 case 10: 
 var $26=HEAP8[(15864)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[((15872)>>2)];
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 _free($33);
 label=13;break;
 case 13: 
 var $34=HEAP8[(15852)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=16;break;}else{label=14;break;}
 case 14: 
 var $38=HEAP32[((15860)>>2)];
 var $39=($38|0)==0;
 if($39){label=16;break;}else{label=15;break;}
 case 15: 
 var $41=$38;
 _free($41);
 label=16;break;
 case 16: 
 var $42=HEAP8[(15840)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=17;break;}
 case 17: 
 var $46=HEAP32[((15848)>>2)];
 var $47=($46|0)==0;
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $49=$46;
 _free($49);
 label=19;break;
 case 19: 
 var $50=HEAP8[(15828)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=22;break;}else{label=20;break;}
 case 20: 
 var $54=HEAP32[((15836)>>2)];
 var $55=($54|0)==0;
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $57=$54;
 _free($57);
 label=22;break;
 case 22: 
 var $58=HEAP8[(15816)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=25;break;}else{label=23;break;}
 case 23: 
 var $62=HEAP32[((15824)>>2)];
 var $63=($62|0)==0;
 if($63){label=25;break;}else{label=24;break;}
 case 24: 
 var $65=$62;
 _free($65);
 label=25;break;
 case 25: 
 var $66=HEAP8[(15804)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=28;break;}else{label=26;break;}
 case 26: 
 var $70=HEAP32[((15812)>>2)];
 var $71=($70|0)==0;
 if($71){label=28;break;}else{label=27;break;}
 case 27: 
 var $73=$70;
 _free($73);
 label=28;break;
 case 28: 
 var $74=HEAP8[(15792)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=31;break;}else{label=29;break;}
 case 29: 
 var $78=HEAP32[((15800)>>2)];
 var $79=($78|0)==0;
 if($79){label=31;break;}else{label=30;break;}
 case 30: 
 var $81=$78;
 _free($81);
 label=31;break;
 case 31: 
 var $82=HEAP8[(15780)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=34;break;}else{label=32;break;}
 case 32: 
 var $86=HEAP32[((15788)>>2)];
 var $87=($86|0)==0;
 if($87){label=34;break;}else{label=33;break;}
 case 33: 
 var $89=$86;
 _free($89);
 label=34;break;
 case 34: 
 var $90=HEAP8[(15768)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=37;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[((15776)>>2)];
 var $95=($94|0)==0;
 if($95){label=37;break;}else{label=36;break;}
 case 36: 
 var $97=$94;
 _free($97);
 label=37;break;
 case 37: 
 var $98=HEAP8[(15756)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=HEAP32[((15764)>>2)];
 var $103=($102|0)==0;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $105=$102;
 _free($105);
 label=40;break;
 case 40: 
 var $106=HEAP8[(15744)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=HEAP32[((15752)>>2)];
 var $111=($110|0)==0;
 if($111){label=43;break;}else{label=42;break;}
 case 42: 
 var $113=$110;
 _free($113);
 label=43;break;
 case 43: 
 var $114=HEAP8[(15732)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=46;break;}else{label=44;break;}
 case 44: 
 var $118=HEAP32[((15740)>>2)];
 var $119=($118|0)==0;
 if($119){label=46;break;}else{label=45;break;}
 case 45: 
 var $121=$118;
 _free($121);
 label=46;break;
 case 46: 
 var $122=HEAP8[(15720)];
 var $123=$122&1;
 var $124=(($123<<24)>>24)==0;
 if($124){label=49;break;}else{label=47;break;}
 case 47: 
 var $126=HEAP32[((15728)>>2)];
 var $127=($126|0)==0;
 if($127){label=49;break;}else{label=48;break;}
 case 48: 
 var $129=$126;
 _free($129);
 label=49;break;
 case 49: 
 var $130=HEAP8[(15708)];
 var $131=$130&1;
 var $132=(($131<<24)>>24)==0;
 if($132){label=52;break;}else{label=50;break;}
 case 50: 
 var $134=HEAP32[((15716)>>2)];
 var $135=($134|0)==0;
 if($135){label=52;break;}else{label=51;break;}
 case 51: 
 var $137=$134;
 _free($137);
 label=52;break;
 case 52: 
 var $138=HEAP8[(15696)];
 var $139=$138&1;
 var $140=(($139<<24)>>24)==0;
 if($140){label=55;break;}else{label=53;break;}
 case 53: 
 var $142=HEAP32[((15704)>>2)];
 var $143=($142|0)==0;
 if($143){label=55;break;}else{label=54;break;}
 case 54: 
 var $145=$142;
 _free($145);
 label=55;break;
 case 55: 
 var $146=HEAP8[(15684)];
 var $147=$146&1;
 var $148=(($147<<24)>>24)==0;
 if($148){label=58;break;}else{label=56;break;}
 case 56: 
 var $150=HEAP32[((15692)>>2)];
 var $151=($150|0)==0;
 if($151){label=58;break;}else{label=57;break;}
 case 57: 
 var $153=$150;
 _free($153);
 label=58;break;
 case 58: 
 var $154=HEAP8[(15672)];
 var $155=$154&1;
 var $156=(($155<<24)>>24)==0;
 if($156){label=61;break;}else{label=59;break;}
 case 59: 
 var $158=HEAP32[((15680)>>2)];
 var $159=($158|0)==0;
 if($159){label=61;break;}else{label=60;break;}
 case 60: 
 var $161=$158;
 _free($161);
 label=61;break;
 case 61: 
 var $162=HEAP8[(15660)];
 var $163=$162&1;
 var $164=(($163<<24)>>24)==0;
 if($164){label=64;break;}else{label=62;break;}
 case 62: 
 var $166=HEAP32[((15668)>>2)];
 var $167=($166|0)==0;
 if($167){label=64;break;}else{label=63;break;}
 case 63: 
 var $169=$166;
 _free($169);
 label=64;break;
 case 64: 
 var $170=HEAP8[(15648)];
 var $171=$170&1;
 var $172=(($171<<24)>>24)==0;
 if($172){label=67;break;}else{label=65;break;}
 case 65: 
 var $174=HEAP32[((15656)>>2)];
 var $175=($174|0)==0;
 if($175){label=67;break;}else{label=66;break;}
 case 66: 
 var $177=$174;
 _free($177);
 label=67;break;
 case 67: 
 var $178=HEAP8[(15636)];
 var $179=$178&1;
 var $180=(($179<<24)>>24)==0;
 if($180){label=70;break;}else{label=68;break;}
 case 68: 
 var $182=HEAP32[((15644)>>2)];
 var $183=($182|0)==0;
 if($183){label=70;break;}else{label=69;break;}
 case 69: 
 var $185=$182;
 _free($185);
 label=70;break;
 case 70: 
 var $186=HEAP8[(15624)];
 var $187=$186&1;
 var $188=(($187<<24)>>24)==0;
 if($188){label=73;break;}else{label=71;break;}
 case 71: 
 var $190=HEAP32[((15632)>>2)];
 var $191=($190|0)==0;
 if($191){label=73;break;}else{label=72;break;}
 case 72: 
 var $193=$190;
 _free($193);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor81($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(16644)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16652)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _free($6);
 label=4;break;
 case 4: 
 var $9=HEAP8[(16632)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP32[((16640)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 _free($13);
 label=7;break;
 case 7: 
 var $16=HEAP8[(16620)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=10;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[((16628)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 _free($20);
 label=10;break;
 case 10: 
 var $23=HEAP8[(16608)];
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=13;break;}else{label=11;break;}
 case 11: 
 var $27=HEAP32[((16616)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 _free($27);
 label=13;break;
 case 13: 
 var $30=HEAP8[(16596)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=16;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[((16604)>>2)];
 var $35=($34|0)==0;
 if($35){label=16;break;}else{label=15;break;}
 case 15: 
 _free($34);
 label=16;break;
 case 16: 
 var $37=HEAP8[(16584)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=19;break;}else{label=17;break;}
 case 17: 
 var $41=HEAP32[((16592)>>2)];
 var $42=($41|0)==0;
 if($42){label=19;break;}else{label=18;break;}
 case 18: 
 _free($41);
 label=19;break;
 case 19: 
 var $44=HEAP8[(16572)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=22;break;}else{label=20;break;}
 case 20: 
 var $48=HEAP32[((16580)>>2)];
 var $49=($48|0)==0;
 if($49){label=22;break;}else{label=21;break;}
 case 21: 
 _free($48);
 label=22;break;
 case 22: 
 var $51=HEAP8[(16560)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=25;break;}else{label=23;break;}
 case 23: 
 var $55=HEAP32[((16568)>>2)];
 var $56=($55|0)==0;
 if($56){label=25;break;}else{label=24;break;}
 case 24: 
 _free($55);
 label=25;break;
 case 25: 
 var $58=HEAP8[(16548)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=28;break;}else{label=26;break;}
 case 26: 
 var $62=HEAP32[((16556)>>2)];
 var $63=($62|0)==0;
 if($63){label=28;break;}else{label=27;break;}
 case 27: 
 _free($62);
 label=28;break;
 case 28: 
 var $65=HEAP8[(16536)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=31;break;}else{label=29;break;}
 case 29: 
 var $69=HEAP32[((16544)>>2)];
 var $70=($69|0)==0;
 if($70){label=31;break;}else{label=30;break;}
 case 30: 
 _free($69);
 label=31;break;
 case 31: 
 var $72=HEAP8[(16524)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=34;break;}else{label=32;break;}
 case 32: 
 var $76=HEAP32[((16532)>>2)];
 var $77=($76|0)==0;
 if($77){label=34;break;}else{label=33;break;}
 case 33: 
 _free($76);
 label=34;break;
 case 34: 
 var $79=HEAP8[(16512)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=37;break;}else{label=35;break;}
 case 35: 
 var $83=HEAP32[((16520)>>2)];
 var $84=($83|0)==0;
 if($84){label=37;break;}else{label=36;break;}
 case 36: 
 _free($83);
 label=37;break;
 case 37: 
 var $86=HEAP8[(16500)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=40;break;}else{label=38;break;}
 case 38: 
 var $90=HEAP32[((16508)>>2)];
 var $91=($90|0)==0;
 if($91){label=40;break;}else{label=39;break;}
 case 39: 
 _free($90);
 label=40;break;
 case 40: 
 var $93=HEAP8[(16488)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=43;break;}else{label=41;break;}
 case 41: 
 var $97=HEAP32[((16496)>>2)];
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=42;break;}
 case 42: 
 _free($97);
 label=43;break;
 case 43: 
 var $100=HEAP8[(16476)];
 var $101=$100&1;
 var $102=(($101<<24)>>24)==0;
 if($102){label=46;break;}else{label=44;break;}
 case 44: 
 var $104=HEAP32[((16484)>>2)];
 var $105=($104|0)==0;
 if($105){label=46;break;}else{label=45;break;}
 case 45: 
 _free($104);
 label=46;break;
 case 46: 
 var $107=HEAP8[(16464)];
 var $108=$107&1;
 var $109=(($108<<24)>>24)==0;
 if($109){label=49;break;}else{label=47;break;}
 case 47: 
 var $111=HEAP32[((16472)>>2)];
 var $112=($111|0)==0;
 if($112){label=49;break;}else{label=48;break;}
 case 48: 
 _free($111);
 label=49;break;
 case 49: 
 var $114=HEAP8[(16452)];
 var $115=$114&1;
 var $116=(($115<<24)>>24)==0;
 if($116){label=52;break;}else{label=50;break;}
 case 50: 
 var $118=HEAP32[((16460)>>2)];
 var $119=($118|0)==0;
 if($119){label=52;break;}else{label=51;break;}
 case 51: 
 _free($118);
 label=52;break;
 case 52: 
 var $121=HEAP8[(16440)];
 var $122=$121&1;
 var $123=(($122<<24)>>24)==0;
 if($123){label=55;break;}else{label=53;break;}
 case 53: 
 var $125=HEAP32[((16448)>>2)];
 var $126=($125|0)==0;
 if($126){label=55;break;}else{label=54;break;}
 case 54: 
 _free($125);
 label=55;break;
 case 55: 
 var $128=HEAP8[(16428)];
 var $129=$128&1;
 var $130=(($129<<24)>>24)==0;
 if($130){label=58;break;}else{label=56;break;}
 case 56: 
 var $132=HEAP32[((16436)>>2)];
 var $133=($132|0)==0;
 if($133){label=58;break;}else{label=57;break;}
 case 57: 
 _free($132);
 label=58;break;
 case 58: 
 var $135=HEAP8[(16416)];
 var $136=$135&1;
 var $137=(($136<<24)>>24)==0;
 if($137){label=61;break;}else{label=59;break;}
 case 59: 
 var $139=HEAP32[((16424)>>2)];
 var $140=($139|0)==0;
 if($140){label=61;break;}else{label=60;break;}
 case 60: 
 _free($139);
 label=61;break;
 case 61: 
 var $142=HEAP8[(16404)];
 var $143=$142&1;
 var $144=(($143<<24)>>24)==0;
 if($144){label=64;break;}else{label=62;break;}
 case 62: 
 var $146=HEAP32[((16412)>>2)];
 var $147=($146|0)==0;
 if($147){label=64;break;}else{label=63;break;}
 case 63: 
 _free($146);
 label=64;break;
 case 64: 
 var $149=HEAP8[(16392)];
 var $150=$149&1;
 var $151=(($150<<24)>>24)==0;
 if($151){label=67;break;}else{label=65;break;}
 case 65: 
 var $153=HEAP32[((16400)>>2)];
 var $154=($153|0)==0;
 if($154){label=67;break;}else{label=66;break;}
 case 66: 
 _free($153);
 label=67;break;
 case 67: 
 var $156=HEAP8[(16380)];
 var $157=$156&1;
 var $158=(($157<<24)>>24)==0;
 if($158){label=70;break;}else{label=68;break;}
 case 68: 
 var $160=HEAP32[((16388)>>2)];
 var $161=($160|0)==0;
 if($161){label=70;break;}else{label=69;break;}
 case 69: 
 _free($160);
 label=70;break;
 case 70: 
 var $163=HEAP8[(16368)];
 var $164=$163&1;
 var $165=(($164<<24)>>24)==0;
 if($165){label=73;break;}else{label=71;break;}
 case 71: 
 var $167=HEAP32[((16376)>>2)];
 var $168=($167|0)==0;
 if($168){label=73;break;}else{label=72;break;}
 case 72: 
 _free($167);
 label=73;break;
 case 73: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor105($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(16068)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16076)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 var $9=$6;
 _free($9);
 label=4;break;
 case 4: 
 var $10=HEAP8[(16056)];
 var $11=$10&1;
 var $12=(($11<<24)>>24)==0;
 if($12){label=7;break;}else{label=5;break;}
 case 5: 
 var $14=HEAP32[((16064)>>2)];
 var $15=($14|0)==0;
 if($15){label=7;break;}else{label=6;break;}
 case 6: 
 var $17=$14;
 _free($17);
 label=7;break;
 case 7: 
 var $18=HEAP8[(16044)];
 var $19=$18&1;
 var $20=(($19<<24)>>24)==0;
 if($20){label=10;break;}else{label=8;break;}
 case 8: 
 var $22=HEAP32[((16052)>>2)];
 var $23=($22|0)==0;
 if($23){label=10;break;}else{label=9;break;}
 case 9: 
 var $25=$22;
 _free($25);
 label=10;break;
 case 10: 
 var $26=HEAP8[(16032)];
 var $27=$26&1;
 var $28=(($27<<24)>>24)==0;
 if($28){label=13;break;}else{label=11;break;}
 case 11: 
 var $30=HEAP32[((16040)>>2)];
 var $31=($30|0)==0;
 if($31){label=13;break;}else{label=12;break;}
 case 12: 
 var $33=$30;
 _free($33);
 label=13;break;
 case 13: 
 var $34=HEAP8[(16020)];
 var $35=$34&1;
 var $36=(($35<<24)>>24)==0;
 if($36){label=16;break;}else{label=14;break;}
 case 14: 
 var $38=HEAP32[((16028)>>2)];
 var $39=($38|0)==0;
 if($39){label=16;break;}else{label=15;break;}
 case 15: 
 var $41=$38;
 _free($41);
 label=16;break;
 case 16: 
 var $42=HEAP8[(16008)];
 var $43=$42&1;
 var $44=(($43<<24)>>24)==0;
 if($44){label=19;break;}else{label=17;break;}
 case 17: 
 var $46=HEAP32[((16016)>>2)];
 var $47=($46|0)==0;
 if($47){label=19;break;}else{label=18;break;}
 case 18: 
 var $49=$46;
 _free($49);
 label=19;break;
 case 19: 
 var $50=HEAP8[(15996)];
 var $51=$50&1;
 var $52=(($51<<24)>>24)==0;
 if($52){label=22;break;}else{label=20;break;}
 case 20: 
 var $54=HEAP32[((16004)>>2)];
 var $55=($54|0)==0;
 if($55){label=22;break;}else{label=21;break;}
 case 21: 
 var $57=$54;
 _free($57);
 label=22;break;
 case 22: 
 var $58=HEAP8[(15984)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=25;break;}else{label=23;break;}
 case 23: 
 var $62=HEAP32[((15992)>>2)];
 var $63=($62|0)==0;
 if($63){label=25;break;}else{label=24;break;}
 case 24: 
 var $65=$62;
 _free($65);
 label=25;break;
 case 25: 
 var $66=HEAP8[(15972)];
 var $67=$66&1;
 var $68=(($67<<24)>>24)==0;
 if($68){label=28;break;}else{label=26;break;}
 case 26: 
 var $70=HEAP32[((15980)>>2)];
 var $71=($70|0)==0;
 if($71){label=28;break;}else{label=27;break;}
 case 27: 
 var $73=$70;
 _free($73);
 label=28;break;
 case 28: 
 var $74=HEAP8[(15960)];
 var $75=$74&1;
 var $76=(($75<<24)>>24)==0;
 if($76){label=31;break;}else{label=29;break;}
 case 29: 
 var $78=HEAP32[((15968)>>2)];
 var $79=($78|0)==0;
 if($79){label=31;break;}else{label=30;break;}
 case 30: 
 var $81=$78;
 _free($81);
 label=31;break;
 case 31: 
 var $82=HEAP8[(15948)];
 var $83=$82&1;
 var $84=(($83<<24)>>24)==0;
 if($84){label=34;break;}else{label=32;break;}
 case 32: 
 var $86=HEAP32[((15956)>>2)];
 var $87=($86|0)==0;
 if($87){label=34;break;}else{label=33;break;}
 case 33: 
 var $89=$86;
 _free($89);
 label=34;break;
 case 34: 
 var $90=HEAP8[(15936)];
 var $91=$90&1;
 var $92=(($91<<24)>>24)==0;
 if($92){label=37;break;}else{label=35;break;}
 case 35: 
 var $94=HEAP32[((15944)>>2)];
 var $95=($94|0)==0;
 if($95){label=37;break;}else{label=36;break;}
 case 36: 
 var $97=$94;
 _free($97);
 label=37;break;
 case 37: 
 var $98=HEAP8[(15924)];
 var $99=$98&1;
 var $100=(($99<<24)>>24)==0;
 if($100){label=40;break;}else{label=38;break;}
 case 38: 
 var $102=HEAP32[((15932)>>2)];
 var $103=($102|0)==0;
 if($103){label=40;break;}else{label=39;break;}
 case 39: 
 var $105=$102;
 _free($105);
 label=40;break;
 case 40: 
 var $106=HEAP8[(15912)];
 var $107=$106&1;
 var $108=(($107<<24)>>24)==0;
 if($108){label=43;break;}else{label=41;break;}
 case 41: 
 var $110=HEAP32[((15920)>>2)];
 var $111=($110|0)==0;
 if($111){label=43;break;}else{label=42;break;}
 case 42: 
 var $113=$110;
 _free($113);
 label=43;break;
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function ___cxx_global_array_dtor120($0){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $2=HEAP8[(16812)];
 var $3=$2&1;
 var $4=(($3<<24)>>24)==0;
 if($4){label=4;break;}else{label=2;break;}
 case 2: 
 var $6=HEAP32[((16820)>>2)];
 var $7=($6|0)==0;
 if($7){label=4;break;}else{label=3;break;}
 case 3: 
 _free($6);
 label=4;break;
 case 4: 
 var $9=HEAP8[(16800)];
 var $10=$9&1;
 var $11=(($10<<24)>>24)==0;
 if($11){label=7;break;}else{label=5;break;}
 case 5: 
 var $13=HEAP32[((16808)>>2)];
 var $14=($13|0)==0;
 if($14){label=7;break;}else{label=6;break;}
 case 6: 
 _free($13);
 label=7;break;
 case 7: 
 var $16=HEAP8[(16788)];
 var $17=$16&1;
 var $18=(($17<<24)>>24)==0;
 if($18){label=10;break;}else{label=8;break;}
 case 8: 
 var $20=HEAP32[((16796)>>2)];
 var $21=($20|0)==0;
 if($21){label=10;break;}else{label=9;break;}
 case 9: 
 _free($20);
 label=10;break;
 case 10: 
 var $23=HEAP8[(16776)];
 var $24=$23&1;
 var $25=(($24<<24)>>24)==0;
 if($25){label=13;break;}else{label=11;break;}
 case 11: 
 var $27=HEAP32[((16784)>>2)];
 var $28=($27|0)==0;
 if($28){label=13;break;}else{label=12;break;}
 case 12: 
 _free($27);
 label=13;break;
 case 13: 
 var $30=HEAP8[(16764)];
 var $31=$30&1;
 var $32=(($31<<24)>>24)==0;
 if($32){label=16;break;}else{label=14;break;}
 case 14: 
 var $34=HEAP32[((16772)>>2)];
 var $35=($34|0)==0;
 if($35){label=16;break;}else{label=15;break;}
 case 15: 
 _free($34);
 label=16;break;
 case 16: 
 var $37=HEAP8[(16752)];
 var $38=$37&1;
 var $39=(($38<<24)>>24)==0;
 if($39){label=19;break;}else{label=17;break;}
 case 17: 
 var $41=HEAP32[((16760)>>2)];
 var $42=($41|0)==0;
 if($42){label=19;break;}else{label=18;break;}
 case 18: 
 _free($41);
 label=19;break;
 case 19: 
 var $44=HEAP8[(16740)];
 var $45=$44&1;
 var $46=(($45<<24)>>24)==0;
 if($46){label=22;break;}else{label=20;break;}
 case 20: 
 var $48=HEAP32[((16748)>>2)];
 var $49=($48|0)==0;
 if($49){label=22;break;}else{label=21;break;}
 case 21: 
 _free($48);
 label=22;break;
 case 22: 
 var $51=HEAP8[(16728)];
 var $52=$51&1;
 var $53=(($52<<24)>>24)==0;
 if($53){label=25;break;}else{label=23;break;}
 case 23: 
 var $55=HEAP32[((16736)>>2)];
 var $56=($55|0)==0;
 if($56){label=25;break;}else{label=24;break;}
 case 24: 
 _free($55);
 label=25;break;
 case 25: 
 var $58=HEAP8[(16716)];
 var $59=$58&1;
 var $60=(($59<<24)>>24)==0;
 if($60){label=28;break;}else{label=26;break;}
 case 26: 
 var $62=HEAP32[((16724)>>2)];
 var $63=($62|0)==0;
 if($63){label=28;break;}else{label=27;break;}
 case 27: 
 _free($62);
 label=28;break;
 case 28: 
 var $65=HEAP8[(16704)];
 var $66=$65&1;
 var $67=(($66<<24)>>24)==0;
 if($67){label=31;break;}else{label=29;break;}
 case 29: 
 var $69=HEAP32[((16712)>>2)];
 var $70=($69|0)==0;
 if($70){label=31;break;}else{label=30;break;}
 case 30: 
 _free($69);
 label=31;break;
 case 31: 
 var $72=HEAP8[(16692)];
 var $73=$72&1;
 var $74=(($73<<24)>>24)==0;
 if($74){label=34;break;}else{label=32;break;}
 case 32: 
 var $76=HEAP32[((16700)>>2)];
 var $77=($76|0)==0;
 if($77){label=34;break;}else{label=33;break;}
 case 33: 
 _free($76);
 label=34;break;
 case 34: 
 var $79=HEAP8[(16680)];
 var $80=$79&1;
 var $81=(($80<<24)>>24)==0;
 if($81){label=37;break;}else{label=35;break;}
 case 35: 
 var $83=HEAP32[((16688)>>2)];
 var $84=($83|0)==0;
 if($84){label=37;break;}else{label=36;break;}
 case 36: 
 _free($83);
 label=37;break;
 case 37: 
 var $86=HEAP8[(16668)];
 var $87=$86&1;
 var $88=(($87<<24)>>24)==0;
 if($88){label=40;break;}else{label=38;break;}
 case 38: 
 var $90=HEAP32[((16676)>>2)];
 var $91=($90|0)==0;
 if($91){label=40;break;}else{label=39;break;}
 case 39: 
 _free($90);
 label=40;break;
 case 40: 
 var $93=HEAP8[(16656)];
 var $94=$93&1;
 var $95=(($94<<24)>>24)==0;
 if($95){label=43;break;}else{label=41;break;}
 case 41: 
 var $97=HEAP32[((16664)>>2)];
 var $98=($97|0)==0;
 if($98){label=43;break;}else{label=42;break;}
 case 42: 
 _free($97);
 label=43;break;
 case 43: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _mbrtowc($wc,$src,$n,$st){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=sp;
 HEAP32[(($1)>>2)]=$wc;
 var $2=($st|0)==0;
 var $_01=($2?14792:$st);
 var $3=(($_01)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($src|0)==0;
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=($4|0)==0;
 if($7){var $_0=0;label=19;break;}else{label=18;break;}
 case 3: 
 var $9=($wc|0)==0;
 if($9){label=4;break;}else{var $13=$wc;label=5;break;}
 case 4: 
 var $11=$1;
 HEAP32[(($1)>>2)]=$11;
 var $13=$11;label=5;break;
 case 5: 
 var $13;
 var $14=($n|0)==0;
 if($14){var $_0=-2;label=19;break;}else{label=6;break;}
 case 6: 
 var $16=($4|0)==0;
 if($16){label=7;break;}else{var $s_0=$src;var $c_0=$4;var $_02=$n;label=11;break;}
 case 7: 
 var $18=HEAP8[($src)];
 var $19=($18&255);
 var $20=(($18<<24)>>24)>-1;
 if($20){label=8;break;}else{label=9;break;}
 case 8: 
 HEAP32[(($13)>>2)]=$19;
 var $22=(($18<<24)>>24)!=0;
 var $23=($22&1);
 var $_0=$23;label=19;break;
 case 9: 
 var $25=((($19)-(194))|0);
 var $26=($25>>>0)>50;
 if($26){label=18;break;}else{label=10;break;}
 case 10: 
 var $28=(($src+1)|0);
 var $29=((4672+($25<<2))|0);
 var $30=HEAP32[(($29)>>2)];
 var $31=((($n)-(1))|0);
 var $s_0=$28;var $c_0=$30;var $_02=$31;label=11;break;
 case 11: 
 var $_02;
 var $c_0;
 var $s_0;
 var $33=($_02|0)==0;
 if($33){var $c_2=$c_0;label=17;break;}else{label=12;break;}
 case 12: 
 var $35=HEAP8[($s_0)];
 var $36=($35&255);
 var $37=$36>>>3;
 var $38=((($37)-(16))|0);
 var $39=$c_0>>26;
 var $40=((($37)+($39))|0);
 var $41=$38|$40;
 var $42=($41>>>0)>7;
 if($42){label=18;break;}else{var $s_1=$s_0;var $c_1=$c_0;var $_1=$_02;var $43=$35;label=13;break;}
 case 13: 
 var $43;
 var $_1;
 var $c_1;
 var $s_1;
 var $44=$c_1<<6;
 var $45=(($s_1+1)|0);
 var $46=($43&255);
 var $47=((($46)-(128))|0);
 var $48=$47|$44;
 var $49=((($_1)-(1))|0);
 var $50=($48|0)<0;
 if($50){label=15;break;}else{label=14;break;}
 case 14: 
 HEAP32[(($3)>>2)]=0;
 HEAP32[(($13)>>2)]=$48;
 var $52=((($n)-($49))|0);
 var $_0=$52;label=19;break;
 case 15: 
 var $54=($49|0)==0;
 if($54){var $c_2=$48;label=17;break;}else{label=16;break;}
 case 16: 
 var $56=HEAP8[($45)];
 var $57=($56&255);
 var $58=((($57)-(128))|0);
 var $59=($58>>>0)>63;
 if($59){label=18;break;}else{var $s_1=$45;var $c_1=$48;var $_1=$49;var $43=$56;label=13;break;}
 case 17: 
 var $c_2;
 HEAP32[(($3)>>2)]=$c_2;
 var $_0=-2;label=19;break;
 case 18: 
 HEAP32[(($3)>>2)]=0;
 var $60=___errno_location();
 HEAP32[(($60)>>2)]=84;
 var $_0=-1;label=19;break;
 case 19: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _mbsrtowcs($ws,$src,$wn,$st){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=HEAP32[(($src)>>2)];
 var $2=($st|0)==0;
 if($2){label=5;break;}else{label=2;break;}
 case 2: 
 var $4=(($st)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=($5|0)==0;
 if($6){label=5;break;}else{label=3;break;}
 case 3: 
 var $8=($ws|0)==0;
 if($8){var $c_2=$5;var $s_3=$1;var $_35=$wn;label=15;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($4)>>2)]=0;
 var $c_4=$5;var $s_8=$1;var $_3=$ws;var $_7=$wn;label=34;break;
 case 5: 
 var $11=($ws|0)==0;
 if($11){var $s_0=$1;var $_02=$wn;label=7;break;}else{var $s_5_ph=$1;var $_01_ph=$ws;var $_46_ph=$wn;label=6;break;}
 case 6: 
 var $_46_ph;
 var $_01_ph;
 var $s_5_ph;
 var $12=($_46_ph|0)==0;
 if($12){var $_0=$wn;label=52;break;}else{var $_4622=$_46_ph;var $_0123=$_01_ph;var $s_524=$s_5_ph;label=25;break;}
 case 7: 
 var $_02;
 var $s_0;
 var $13=HEAP8[($s_0)];
 var $14=($13&255);
 var $15=((($14)-(1))|0);
 var $16=($15>>>0)<127;
 if($16){label=8;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=11;break;}
 case 8: 
 var $18=$s_0;
 var $19=$18&3;
 var $20=($19|0)==0;
 if($20){label=9;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$13;label=11;break;}
 case 9: 
 var $21=$s_0;
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)-(16843009))|0);
 var $24=$23|$22;
 var $25=$24&-2139062144;
 var $26=($25|0)==0;
 var $27=(($22)&255);
 if($26){var $_137=$_02;var $s_18=$s_0;label=10;break;}else{var $s_2=$s_0;var $_24=$_02;var $37=$27;label=11;break;}
 case 10: 
 var $s_18;
 var $_137;
 var $28=(($s_18+4)|0);
 var $29=((($_137)-(4))|0);
 var $30=$28;
 var $31=HEAP32[(($30)>>2)];
 var $32=((($31)-(16843009))|0);
 var $33=$32|$31;
 var $34=$33&-2139062144;
 var $35=($34|0)==0;
 var $36=(($31)&255);
 if($35){var $_137=$29;var $s_18=$28;label=10;break;}else{var $s_2=$28;var $_24=$29;var $37=$36;label=11;break;}
 case 11: 
 var $37;
 var $_24;
 var $s_2;
 var $38=($37&255);
 var $39=((($38)-(1))|0);
 var $40=($39>>>0)<127;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($s_2+1)|0);
 var $43=((($_24)-(1))|0);
 var $s_0=$42;var $_02=$43;label=7;break;
 case 13: 
 var $45=((($38)-(194))|0);
 var $46=($45>>>0)>50;
 if($46){var $_840=$_24;var $_442=$ws;var $s_1044=$s_2;var $183=$37;label=46;break;}else{label=14;break;}
 case 14: 
 var $48=(($s_2+1)|0);
 var $49=((4672+($45<<2))|0);
 var $50=HEAP32[(($49)>>2)];
 var $c_2=$50;var $s_3=$48;var $_35=$_24;label=15;break;
 case 15: 
 var $_35;
 var $s_3;
 var $c_2;
 var $52=HEAP8[($s_3)];
 var $53=($52&255);
 var $54=$53>>>3;
 var $55=((($54)-(16))|0);
 var $56=$c_2>>26;
 var $57=((($54)+($56))|0);
 var $58=$55|$57;
 var $59=($58>>>0)>7;
 if($59){label=16;break;}else{label=17;break;}
 case 16: 
 var $61=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$61;var $_4=$ws;var $_8=$_35;label=44;break;
 case 17: 
 var $63=(($s_3+1)|0);
 var $64=$c_2&33554432;
 var $65=($64|0)==0;
 if($65){var $s_4=$63;label=24;break;}else{label=18;break;}
 case 18: 
 var $67=HEAP8[($63)];
 var $68=($67&255);
 var $69=((($68)-(128))|0);
 var $70=($69>>>0)>63;
 if($70){label=19;break;}else{label=20;break;}
 case 19: 
 var $72=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$72;var $_4=$ws;var $_8=$_35;label=44;break;
 case 20: 
 var $74=(($s_3+2)|0);
 var $75=$c_2&524288;
 var $76=($75|0)==0;
 if($76){var $s_4=$74;label=24;break;}else{label=21;break;}
 case 21: 
 var $78=HEAP8[($74)];
 var $79=($78&255);
 var $80=((($79)-(128))|0);
 var $81=($80>>>0)>63;
 if($81){label=22;break;}else{label=23;break;}
 case 22: 
 var $83=((($s_3)-(1))|0);
 var $c_6=$c_2;var $s_10=$83;var $_4=$ws;var $_8=$_35;label=44;break;
 case 23: 
 var $85=(($s_3+3)|0);
 var $s_4=$85;label=24;break;
 case 24: 
 var $s_4;
 var $87=((($_35)-(1))|0);
 var $s_0=$s_4;var $_02=$87;label=7;break;
 case 25: 
 var $s_524;
 var $_0123;
 var $_4622;
 var $88=HEAP8[($s_524)];
 var $89=($88&255);
 var $90=((($89)-(1))|0);
 var $91=($90>>>0)<127;
 if($91){label=26;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=30;break;}
 case 26: 
 var $93=$s_524;
 var $94=$93&3;
 var $95=($94|0)==0;
 var $96=($_4622>>>0)>3;
 var $or_cond=$95&$96;
 if($or_cond){var $_512=$_4622;var $_113=$_0123;var $s_614=$s_524;label=27;break;}else{var $s_7=$s_524;var $_2=$_0123;var $_6=$_4622;var $122=$88;label=30;break;}
 case 27: 
 var $s_614;
 var $_113;
 var $_512;
 var $97=$s_614;
 var $98=HEAP32[(($97)>>2)];
 var $99=((($98)-(16843009))|0);
 var $100=$99|$98;
 var $101=$100&-2139062144;
 var $102=($101|0)==0;
 var $103=(($98)&255);
 if($102){label=28;break;}else{var $s_7=$s_614;var $_2=$_113;var $_6=$_512;var $122=$103;label=30;break;}
 case 28: 
 var $105=(($s_614+1)|0);
 var $106=$98&255;
 var $107=(($_113+4)|0);
 HEAP32[(($_113)>>2)]=$106;
 var $108=(($s_614+2)|0);
 var $109=HEAP8[($105)];
 var $110=($109&255);
 var $111=(($_113+8)|0);
 HEAP32[(($107)>>2)]=$110;
 var $112=(($s_614+3)|0);
 var $113=HEAP8[($108)];
 var $114=($113&255);
 var $115=(($_113+12)|0);
 HEAP32[(($111)>>2)]=$114;
 var $116=(($s_614+4)|0);
 var $117=HEAP8[($112)];
 var $118=($117&255);
 var $119=(($_113+16)|0);
 HEAP32[(($115)>>2)]=$118;
 var $120=((($_512)-(4))|0);
 var $121=($120>>>0)>3;
 if($121){var $_512=$120;var $_113=$119;var $s_614=$116;label=27;break;}else{label=29;break;}
 case 29: 
 var $_pre_pre=HEAP8[($116)];
 var $s_7=$116;var $_2=$119;var $_6=$120;var $122=$_pre_pre;label=30;break;
 case 30: 
 var $122;
 var $_6;
 var $_2;
 var $s_7;
 var $123=($122&255);
 var $124=((($123)-(1))|0);
 var $125=($124>>>0)<127;
 if($125){label=31;break;}else{label=32;break;}
 case 31: 
 var $127=(($s_7+1)|0);
 var $128=(($_2+4)|0);
 HEAP32[(($_2)>>2)]=$123;
 var $129=((($_6)-(1))|0);
 var $130=($129|0)==0;
 if($130){var $_0=$wn;label=52;break;}else{var $_4622=$129;var $_0123=$128;var $s_524=$127;label=25;break;}
 case 32: 
 var $132=((($123)-(194))|0);
 var $133=($132>>>0)>50;
 if($133){var $_840=$_6;var $_442=$_2;var $s_1044=$s_7;var $183=$122;label=46;break;}else{label=33;break;}
 case 33: 
 var $135=(($s_7+1)|0);
 var $136=((4672+($132<<2))|0);
 var $137=HEAP32[(($136)>>2)];
 var $c_4=$137;var $s_8=$135;var $_3=$_2;var $_7=$_6;label=34;break;
 case 34: 
 var $_7;
 var $_3;
 var $s_8;
 var $c_4;
 var $139=HEAP8[($s_8)];
 var $140=($139&255);
 var $141=$140>>>3;
 var $142=((($141)-(16))|0);
 var $143=$c_4>>26;
 var $144=((($141)+($143))|0);
 var $145=$142|$144;
 var $146=($145>>>0)>7;
 if($146){label=35;break;}else{label=36;break;}
 case 35: 
 var $148=((($s_8)-(1))|0);
 var $c_6=$c_4;var $s_10=$148;var $_4=$_3;var $_8=$_7;label=44;break;
 case 36: 
 var $150=$c_4<<6;
 var $151=(($s_8+1)|0);
 var $152=((($140)-(128))|0);
 var $153=$152|$150;
 var $154=($153|0)<0;
 if($154){label=37;break;}else{var $c_5=$153;var $s_9=$151;label=43;break;}
 case 37: 
 var $156=HEAP8[($151)];
 var $157=($156&255);
 var $158=((($157)-(128))|0);
 var $159=($158>>>0)>63;
 if($159){label=38;break;}else{label=39;break;}
 case 38: 
 var $161=((($s_8)-(1))|0);
 var $c_6=$153;var $s_10=$161;var $_4=$_3;var $_8=$_7;label=44;break;
 case 39: 
 var $163=$153<<6;
 var $164=(($s_8+2)|0);
 var $165=$158|$163;
 var $166=($165|0)<0;
 if($166){label=40;break;}else{var $c_5=$165;var $s_9=$164;label=43;break;}
 case 40: 
 var $168=HEAP8[($164)];
 var $169=($168&255);
 var $170=((($169)-(128))|0);
 var $171=($170>>>0)>63;
 if($171){label=41;break;}else{label=42;break;}
 case 41: 
 var $173=((($s_8)-(1))|0);
 var $c_6=$165;var $s_10=$173;var $_4=$_3;var $_8=$_7;label=44;break;
 case 42: 
 var $175=$165<<6;
 var $176=(($s_8+3)|0);
 var $177=$170|$175;
 var $c_5=$177;var $s_9=$176;label=43;break;
 case 43: 
 var $s_9;
 var $c_5;
 var $179=(($_3+4)|0);
 HEAP32[(($_3)>>2)]=$c_5;
 var $180=((($_7)-(1))|0);
 var $s_5_ph=$s_9;var $_01_ph=$179;var $_46_ph=$180;label=6;break;
 case 44: 
 var $_8;
 var $_4;
 var $s_10;
 var $c_6;
 var $182=($c_6|0)==0;
 if($182){label=45;break;}else{var $_441=$_4;var $s_1043=$s_10;label=50;break;}
 case 45: 
 var $_pre=HEAP8[($s_10)];
 var $_840=$_8;var $_442=$_4;var $s_1044=$s_10;var $183=$_pre;label=46;break;
 case 46: 
 var $183;
 var $s_1044;
 var $_442;
 var $_840;
 var $184=(($183<<24)>>24)==0;
 if($184){label=47;break;}else{var $_441=$_442;var $s_1043=$s_1044;label=50;break;}
 case 47: 
 var $186=($_442|0)==0;
 if($186){label=49;break;}else{label=48;break;}
 case 48: 
 HEAP32[(($_442)>>2)]=0;
 HEAP32[(($src)>>2)]=0;
 label=49;break;
 case 49: 
 var $189=((($wn)-($_840))|0);
 var $_0=$189;label=52;break;
 case 50: 
 var $s_1043;
 var $_441;
 var $191=___errno_location();
 HEAP32[(($191)>>2)]=84;
 var $192=($_441|0)==0;
 if($192){var $_0=-1;label=52;break;}else{label=51;break;}
 case 51: 
 HEAP32[(($src)>>2)]=$s_1043;
 var $_0=-1;label=52;break;
 case 52: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _wcrtomb($s,$wc){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($s|0)==0;
 if($1){var $_0=1;label=11;break;}else{label=2;break;}
 case 2: 
 var $3=($wc>>>0)<128;
 if($3){label=3;break;}else{label=4;break;}
 case 3: 
 var $5=(($wc)&255);
 HEAP8[($s)]=$5;
 var $_0=1;label=11;break;
 case 4: 
 var $7=($wc>>>0)<2048;
 if($7){label=5;break;}else{label=6;break;}
 case 5: 
 var $9=$wc>>>6;
 var $10=$9|192;
 var $11=(($10)&255);
 var $12=(($s+1)|0);
 HEAP8[($s)]=$11;
 var $13=$wc&63;
 var $14=$13|128;
 var $15=(($14)&255);
 HEAP8[($12)]=$15;
 var $_0=2;label=11;break;
 case 6: 
 var $17=($wc>>>0)<55296;
 var $18=((($wc)-(57344))|0);
 var $19=($18>>>0)<8192;
 var $or_cond=$17|$19;
 if($or_cond){label=7;break;}else{label=8;break;}
 case 7: 
 var $21=$wc>>>12;
 var $22=$21|224;
 var $23=(($22)&255);
 var $24=(($s+1)|0);
 HEAP8[($s)]=$23;
 var $25=$wc>>>6;
 var $26=$25&63;
 var $27=$26|128;
 var $28=(($27)&255);
 var $29=(($s+2)|0);
 HEAP8[($24)]=$28;
 var $30=$wc&63;
 var $31=$30|128;
 var $32=(($31)&255);
 HEAP8[($29)]=$32;
 var $_0=3;label=11;break;
 case 8: 
 var $34=((($wc)-(65536))|0);
 var $35=($34>>>0)<1048576;
 if($35){label=9;break;}else{label=10;break;}
 case 9: 
 var $37=$wc>>>18;
 var $38=$37|240;
 var $39=(($38)&255);
 var $40=(($s+1)|0);
 HEAP8[($s)]=$39;
 var $41=$wc>>>12;
 var $42=$41&63;
 var $43=$42|128;
 var $44=(($43)&255);
 var $45=(($s+2)|0);
 HEAP8[($40)]=$44;
 var $46=$wc>>>6;
 var $47=$46&63;
 var $48=$47|128;
 var $49=(($48)&255);
 var $50=(($s+3)|0);
 HEAP8[($45)]=$49;
 var $51=$wc&63;
 var $52=$51|128;
 var $53=(($52)&255);
 HEAP8[($50)]=$53;
 var $_0=4;label=11;break;
 case 10: 
 var $55=___errno_location();
 HEAP32[(($55)>>2)]=84;
 var $_0=-1;label=11;break;
 case 11: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _qsort($base,$nel,$width,$cmp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+936)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp_i26=sp;
 var $tmp_i=(sp)+(256);
 var $ar_i=(sp)+(512);
 var $lp=(sp)+(744);
 var $1=$lp;
 var $$etemp$0$0=192;
 var $$etemp$0$1=0;

 var $2=(Math_imul($width,$nel)|0);
 var $3=($2|0)==0;
 if($3){label=65;break;}else{label=2;break;}
 case 2: 
 var $_sum=((($2)-($width))|0);
 var $5=(($lp+4)|0);
 HEAP32[(($5)>>2)]=$width;
 var $6=(($lp)|0);
 HEAP32[(($6)>>2)]=$width;
 var $i_0=2;var $9=$width;var $8=$width;label=3;break;
 case 3: 
 var $8;
 var $9;
 var $i_0;
 var $10=((($9)+($width))|0);
 var $11=((($10)+($8))|0);
 var $12=(($lp+($i_0<<2))|0);
 HEAP32[(($12)>>2)]=$11;
 var $13=($11>>>0)<($2>>>0);
 var $14=((($i_0)+(1))|0);
 if($13){var $i_0=$14;var $9=$8;var $8=$11;label=3;break;}else{label=4;break;}
 case 4: 
 var $15=(((-$width))|0);
 var $16=(($base+$_sum)|0);
 var $17=($_sum|0)>0;
 if($17){label=5;break;}else{var $_lcssa74=0;var $_lcssa75=1;var $head_0_lcssa=$base;var $pshift_0_lcssa=1;label=48;break;}
 case 5: 
 var $18=$ar_i;
 var $19=(($ar_i)|0);
 var $20=(($tmp_i)|0);
 var $21=($width|0)==0;
 var $22=($width>>>0)>256;
 var $23=($22?256:$width);
 var $24=($23|0)==($width|0);
 var $25=$16;
 var $26=(($tmp_i26)|0);
 var $29=0;var $28=1;var $head_076=$base;var $pshift_077=1;label=6;break;
 case 6: 
 var $pshift_077;
 var $head_076;
 var $28;
 var $29;
 var $30=$28&3;
 var $31=($30|0)==3;
 if($31){label=7;break;}else{label=25;break;}
 case 7: 
 var $$etemp$1$0=228;
 var $$etemp$1$1=0;

 HEAP32[(($19)>>2)]=$head_076;
 var $33=($pshift_077|0)>1;
 if($33){var $_012_i=$pshift_077;var $_03_i=$head_076;var $i_04_i=1;var $34=$head_076;label=8;break;}else{label=24;break;}
 case 8: 
 var $34;
 var $i_04_i;
 var $_03_i;
 var $_012_i;
 var $35=(($_03_i+$15)|0);
 var $36=((($_012_i)-(2))|0);
 var $37=(($lp+($36<<2))|0);
 var $38=HEAP32[(($37)>>2)];
 var $sum_i=((($38)+($width))|0);
 var $_sum_i=(((-$sum_i))|0);
 var $39=(($_03_i+$_sum_i)|0);
 var $40=FUNCTION_TABLE[$cmp]($34,$39);
 var $41=($40|0)>-1;
 if($41){label=9;break;}else{label=10;break;}
 case 9: 
 var $43=FUNCTION_TABLE[$cmp]($34,$35);
 var $44=($43|0)>-1;
 if($44){var $i_0_lcssa_i=$i_04_i;label=15;break;}else{label=10;break;}
 case 10: 
 var $46=FUNCTION_TABLE[$cmp]($39,$35);
 var $47=($46|0)>-1;
 var $48=((($i_04_i)+(1))|0);
 var $49=(($ar_i+($i_04_i<<2))|0);
 if($47){label=11;break;}else{label=12;break;}
 case 11: 
 HEAP32[(($49)>>2)]=$39;
 var $51=((($_012_i)-(1))|0);
 var $_0_be_i=$39;var $_01_be_i=$51;label=13;break;
 case 12: 
 HEAP32[(($49)>>2)]=$35;
 var $_0_be_i=$35;var $_01_be_i=$36;label=13;break;
 case 13: 
 var $_01_be_i;
 var $_0_be_i;
 var $53=($_01_be_i|0)>1;
 if($53){label=14;break;}else{var $i_0_lcssa_i=$48;label=15;break;}
 case 14: 
 var $_pre_i=HEAP32[(($19)>>2)];
 var $_012_i=$_01_be_i;var $_03_i=$_0_be_i;var $i_04_i=$48;var $34=$_pre_i;label=8;break;
 case 15: 
 var $i_0_lcssa_i;
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $54=($i_0_lcssa_i|0)<2;
 if($54){label=24;break;}else{label=16;break;}
 case 16: 
 var $56=(($ar_i+($i_0_lcssa_i<<2))|0);
 HEAP32[(($56)>>2)]=$20;
 if($21){label=24;break;}else{label=17;break;}
 case 17: 
 var $57=($i_0_lcssa_i|0)>0;
 if($57){var $_02_us_i=$width;var $70=$20;label=22;break;}else{label=18;break;}
 case 18: 
 var $58=HEAP32[(($19)>>2)];
 assert($23 % 1 === 0);(_memcpy($20, $58, $23)|0);
 if($24){label=24;break;}else{var $_02_i71=$width;var $74=$23;label=23;break;}
 case 19: 
 var $60=($_02_us_i|0)==($72|0);
 if($60){label=24;break;}else{label=20;break;}
 case 20: 
 var $61=((($_02_us_i)-($72))|0);
 var $_pre_i9=HEAP32[(($56)>>2)];
 var $_02_us_i=$61;var $70=$_pre_i9;label=22;break;
 case 21: 
 var $63;
 var $i_01_us_i;
 var $64=(($ar_i+($i_01_us_i<<2))|0);
 var $65=((($i_01_us_i)+(1))|0);
 var $66=(($ar_i+($65<<2))|0);
 var $67=HEAP32[(($66)>>2)];
 assert($72 % 1 === 0);(_memcpy($63, $67, $72)|0);
 var $68=(($63+$72)|0);
 HEAP32[(($64)>>2)]=$68;
 var $69=($65|0)<($i_0_lcssa_i|0);
 if($69){var $i_01_us_i=$65;var $63=$67;label=21;break;}else{label=19;break;}
 case 22: 
 var $70;
 var $_02_us_i;
 var $71=($_02_us_i>>>0)>256;
 var $72=($71?256:$_02_us_i);
 var $73=HEAP32[(($19)>>2)];
 assert($72 % 1 === 0);(_memcpy($70, $73, $72)|0);
 var $i_01_us_i=0;var $63=$73;label=21;break;
 case 23: 
 var $74;
 var $_02_i71;
 var $75=((($_02_i71)-($74))|0);
 var $76=($75>>>0)>256;
 var $77=($76?256:$75);
 assert($77 % 1 === 0);(_memcpy($20, $58, $77)|0);
 var $78=($75|0)==($77|0);
 if($78){label=24;break;}else{var $_02_i71=$75;var $74=$77;label=23;break;}
 case 24: 
 var $$etemp$3$0=256;
 var $$etemp$3$1=0;

 var $$etemp$4$0=228;
 var $$etemp$4$1=0;

 var $79=$28>>>2;
 var $80=$29<<30;
 var $81=$79|$80;
 var $82=$29>>>2;
 var $83=((($pshift_077)+(2))|0);
 var $pshift_1=$83;var $154=$81;var $153=$82;label=47;break;
 case 25: 
 var $85=((($pshift_077)-(1))|0);
 var $86=(($lp+($85<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=$head_076;
 var $89=((($25)-($88))|0);
 var $90=($87>>>0)<($89>>>0);
 if($90){label=27;break;}else{label=26;break;}
 case 26: 
 _trinkle($head_076,$width,$cmp,$28,$29,$pshift_077,0,$6);
 label=44;break;
 case 27: 
 var $$etemp$5$0=228;
 var $$etemp$5$1=0;

 HEAP32[(($19)>>2)]=$head_076;
 var $93=($pshift_077|0)>1;
 if($93){var $_012_i16=$pshift_077;var $_03_i15=$head_076;var $i_04_i14=1;var $94=$head_076;label=28;break;}else{label=44;break;}
 case 28: 
 var $94;
 var $i_04_i14;
 var $_03_i15;
 var $_012_i16;
 var $95=(($_03_i15+$15)|0);
 var $96=((($_012_i16)-(2))|0);
 var $97=(($lp+($96<<2))|0);
 var $98=HEAP32[(($97)>>2)];
 var $sum_i17=((($98)+($width))|0);
 var $_sum_i18=(((-$sum_i17))|0);
 var $99=(($_03_i15+$_sum_i18)|0);
 var $100=FUNCTION_TABLE[$cmp]($94,$99);
 var $101=($100|0)>-1;
 if($101){label=29;break;}else{label=30;break;}
 case 29: 
 var $103=FUNCTION_TABLE[$cmp]($94,$95);
 var $104=($103|0)>-1;
 if($104){var $i_0_lcssa_i24=$i_04_i14;label=35;break;}else{label=30;break;}
 case 30: 
 var $106=FUNCTION_TABLE[$cmp]($99,$95);
 var $107=($106|0)>-1;
 var $108=((($i_04_i14)+(1))|0);
 var $109=(($ar_i+($i_04_i14<<2))|0);
 if($107){label=31;break;}else{label=32;break;}
 case 31: 
 HEAP32[(($109)>>2)]=$99;
 var $111=((($_012_i16)-(1))|0);
 var $_0_be_i20=$99;var $_01_be_i19=$111;label=33;break;
 case 32: 
 HEAP32[(($109)>>2)]=$95;
 var $_0_be_i20=$95;var $_01_be_i19=$96;label=33;break;
 case 33: 
 var $_01_be_i19;
 var $_0_be_i20;
 var $113=($_01_be_i19|0)>1;
 if($113){label=34;break;}else{var $i_0_lcssa_i24=$108;label=35;break;}
 case 34: 
 var $_pre_i22=HEAP32[(($19)>>2)];
 var $_012_i16=$_01_be_i19;var $_03_i15=$_0_be_i20;var $i_04_i14=$108;var $94=$_pre_i22;label=28;break;
 case 35: 
 var $i_0_lcssa_i24;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $114=($i_0_lcssa_i24|0)<2;
 if($114){label=44;break;}else{label=36;break;}
 case 36: 
 var $116=(($ar_i+($i_0_lcssa_i24<<2))|0);
 HEAP32[(($116)>>2)]=$26;
 if($21){label=44;break;}else{label=37;break;}
 case 37: 
 var $117=($i_0_lcssa_i24|0)>0;
 if($117){var $_02_us_i31=$width;var $130=$26;label=42;break;}else{label=38;break;}
 case 38: 
 var $118=HEAP32[(($19)>>2)];
 assert($23 % 1 === 0);(_memcpy($26, $118, $23)|0);
 if($24){label=44;break;}else{var $_02_i3368=$width;var $134=$23;label=43;break;}
 case 39: 
 var $120=($_02_us_i31|0)==($132|0);
 if($120){label=44;break;}else{label=40;break;}
 case 40: 
 var $121=((($_02_us_i31)-($132))|0);
 var $_pre_i28=HEAP32[(($116)>>2)];
 var $_02_us_i31=$121;var $130=$_pre_i28;label=42;break;
 case 41: 
 var $123;
 var $i_01_us_i30;
 var $124=(($ar_i+($i_01_us_i30<<2))|0);
 var $125=((($i_01_us_i30)+(1))|0);
 var $126=(($ar_i+($125<<2))|0);
 var $127=HEAP32[(($126)>>2)];
 assert($132 % 1 === 0);(_memcpy($123, $127, $132)|0);
 var $128=(($123+$132)|0);
 HEAP32[(($124)>>2)]=$128;
 var $129=($125|0)<($i_0_lcssa_i24|0);
 if($129){var $i_01_us_i30=$125;var $123=$127;label=41;break;}else{label=39;break;}
 case 42: 
 var $130;
 var $_02_us_i31;
 var $131=($_02_us_i31>>>0)>256;
 var $132=($131?256:$_02_us_i31);
 var $133=HEAP32[(($19)>>2)];
 assert($132 % 1 === 0);(_memcpy($130, $133, $132)|0);
 var $i_01_us_i30=0;var $123=$133;label=41;break;
 case 43: 
 var $134;
 var $_02_i3368;
 var $135=((($_02_i3368)-($134))|0);
 var $136=($135>>>0)>256;
 var $137=($136?256:$135);
 assert($137 % 1 === 0);(_memcpy($26, $118, $137)|0);
 var $138=($135|0)==($137|0);
 if($138){label=44;break;}else{var $_02_i3368=$135;var $134=$137;label=43;break;}
 case 44: 
 var $139=($pshift_077|0)==1;
 if($139){label=45;break;}else{label=46;break;}
 case 45: 
 var $141=$29<<1;
 var $142=$28>>>31;
 var $143=$142|$141;
 var $144=$28<<1;
 var $pshift_1=0;var $154=$144;var $153=$143;label=47;break;
 case 46: 
 var $145=($85>>>0)>31;
 var $146=((($pshift_077)-(33))|0);
 var $_=($145?0:$28);
 var $_65=($145?$28:$29);
 var $_66=($145?$146:$85);
 var $147=$_65<<$_66;
 var $148=(((32)-($_66))|0);
 var $149=$_>>>($148>>>0);
 var $150=$149|$147;
 var $151=$_<<$_66;
 var $pshift_1=1;var $154=$151;var $153=$150;label=47;break;
 case 47: 
 var $153;
 var $154;
 var $pshift_1;
 var $155=$154|1;
 var $156=(($head_076+$width)|0);
 var $157=($156>>>0)<($16>>>0);
 if($157){var $29=$153;var $28=$155;var $head_076=$156;var $pshift_077=$pshift_1;label=6;break;}else{var $_lcssa74=$153;var $_lcssa75=$155;var $head_0_lcssa=$156;var $pshift_0_lcssa=$pshift_1;label=48;break;}
 case 48: 
 var $pshift_0_lcssa;
 var $head_0_lcssa;
 var $_lcssa75;
 var $_lcssa74;
 _trinkle($head_0_lcssa,$width,$cmp,$_lcssa75,$_lcssa74,$pshift_0_lcssa,0,$6);
 var $pshift_2=$pshift_0_lcssa;var $head_1=$head_0_lcssa;var $159=$_lcssa75;var $158=$_lcssa74;label=49;break;
 case 49: 
 var $158;
 var $159;
 var $head_1;
 var $pshift_2;
 var $160=($pshift_2|0)==1;
 if($160){label=50;break;}else{label=52;break;}
 case 50: 
 var $162=($159|0)==1;
 if($162){label=51;break;}else{label=53;break;}
 case 51: 
 var $164=($158|0)==0;
 if($164){label=65;break;}else{label=52;break;}
 case 52: 
 var $165=($pshift_2|0)<2;
 if($165){label=53;break;}else{label=64;break;}
 case 53: 
 var $166=((($159)-(1))|0);
 var $167=($166|0)==0;
 if($167){var $186=32;label=62;break;}else{label=54;break;}
 case 54: 
 var $168=$166&1;
 var $169=($168|0)==0;
 if($169){var $_02_i_i=$166;var $nTrailingZeros_03_i_i=0;label=55;break;}else{label=57;break;}
 case 55: 
 var $nTrailingZeros_03_i_i;
 var $_02_i_i;
 var $170=((($nTrailingZeros_03_i_i)+(1))|0);
 var $171=$_02_i_i>>>1;
 var $172=$171&1;
 var $173=($172|0)==0;
 if($173){var $_02_i_i=$171;var $nTrailingZeros_03_i_i=$170;label=55;break;}else{label=56;break;}
 case 56: 
 var $174=($170|0)==0;
 if($174){label=57;break;}else{var $184=$170;label=61;break;}
 case 57: 
 var $175=($158|0)==0;
 if($175){var $_01_i5_i=32;label=60;break;}else{label=58;break;}
 case 58: 
 var $176=$158&1;
 var $177=($176|0)==0;
 if($177){var $_02_i3_i=$158;var $nTrailingZeros_03_i2_i=0;label=59;break;}else{var $_01_i5_i=0;label=60;break;}
 case 59: 
 var $nTrailingZeros_03_i2_i;
 var $_02_i3_i;
 var $178=((($nTrailingZeros_03_i2_i)+(1))|0);
 var $179=$_02_i3_i>>>1;
 var $180=$179&1;
 var $181=($180|0)==0;
 if($181){var $_02_i3_i=$179;var $nTrailingZeros_03_i2_i=$178;label=59;break;}else{var $_01_i5_i=$178;label=60;break;}
 case 60: 
 var $_01_i5_i;
 var $182=((($_01_i5_i)+(32))|0);
 var $183=($_01_i5_i|0)==0;
 var $__i=($183?0:$182);
 var $184=$__i;label=61;break;
 case 61: 
 var $184;
 var $185=($184>>>0)>31;
 if($185){var $186=$184;label=62;break;}else{var $_0_i49=$184;var $190=$159;var $189=$158;var $188=$184;label=63;break;}
 case 62: 
 var $186;
 var $187=((($186)-(32))|0);
 var $_0_i49=$187;var $190=$158;var $189=0;var $188=$186;label=63;break;
 case 63: 
 var $188;
 var $189;
 var $190;
 var $_0_i49;
 var $191=$190>>>($_0_i49>>>0);
 var $192=(((32)-($_0_i49))|0);
 var $193=$189<<$192;
 var $194=$193|$191;
 var $195=$189>>>($_0_i49>>>0);
 var $196=((($188)+($pshift_2))|0);
 var $_pre=(($head_1+$15)|0);
 var $pshift_2=$196;var $head_1=$_pre;var $159=$194;var $158=$195;label=49;break;
 case 64: 
 var $198=$158<<2;
 var $199=$159>>>30;
 var $200=$199|$198;
 var $201=((($pshift_2)-(2))|0);
 var $202=$159<<1;
 var $203=$202&2147483646;
 var $204=$199<<31;
 var $205=$203|$204;
 var $206=$205^3;
 var $207=$200>>>1;
 var $208=(($lp+($201<<2))|0);
 var $209=HEAP32[(($208)>>2)];
 var $sum=((($209)+($width))|0);
 var $_sum2=(((-$sum))|0);
 var $210=(($head_1+$_sum2)|0);
 var $211=((($pshift_2)-(1))|0);
 _trinkle($210,$width,$cmp,$206,$207,$211,1,$6);
 var $212=$207<<1;
 var $213=$199&1;
 var $214=$212|$213;
 var $215=$206<<1;
 var $216=$215|1;
 var $217=(($head_1+$15)|0);
 _trinkle($217,$width,$cmp,$216,$214,$201,1,$6);
 var $pshift_2=$201;var $head_1=$217;var $159=$216;var $158=$214;label=49;break;
 case 65: 
 var $$etemp$7$0=192;
 var $$etemp$7$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function _trinkle($head,$width,$cmp,$pp_val,$pp_1_val,$pshift,$trusty,$lp){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+976)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $tmp_i6=sp;
 var $tmp_i=(sp)+(256);
 var $ar_i=(sp)+(512);
 var $ar=(sp)+(744);
 var $1=$ar;
 var $$etemp$0$0=228;
 var $$etemp$0$1=0;

 var $2=(($ar)|0);
 HEAP32[(($2)>>2)]=$head;
 var $3=(((-$width))|0);
 var $4=($pp_val|0)==1;
 var $5=($pp_1_val|0)==0;
 var $or_cond18=$4&$5;
 if($or_cond18){var $_02_lcssa=$trusty;var $_01_lcssa=$pshift;var $i_0_lcssa=1;var $_0_lcssa=$head;label=18;break;}else{var $8=$pp_1_val;var $7=$pp_val;var $_029=$trusty;var $_0110=$pshift;var $i_011=1;var $_012=$head;var $6=$head;label=2;break;}
 case 2: 
 var $6;
 var $_012;
 var $i_011;
 var $_0110;
 var $_029;
 var $7;
 var $8;
 var $9=(($lp+($_0110<<2))|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(((-$10))|0);
 var $12=(($_012+$11)|0);
 var $13=FUNCTION_TABLE[$cmp]($12,$6);
 var $14=($13|0)<1;
 if($14){var $_02_lcssa=$_029;var $_01_lcssa=$_0110;var $i_0_lcssa=$i_011;var $_0_lcssa=$_012;label=18;break;}else{label=3;break;}
 case 3: 
 var $16=($_029|0)==0;
 var $17=($_0110|0)>1;
 var $or_cond=$16&$17;
 if($or_cond){label=4;break;}else{label=6;break;}
 case 4: 
 var $19=(($_012+$3)|0);
 var $20=((($_0110)-(2))|0);
 var $21=(($lp+($20<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=FUNCTION_TABLE[$cmp]($19,$12);
 var $24=($23|0)>-1;
 if($24){var $_0_lcssa26=$_012;var $i_0_lcssa27=$i_011;var $_01_lcssa28=$_0110;label=19;break;}else{label=5;break;}
 case 5: 
 var $sum=((($22)+($width))|0);
 var $_sum=(((-$sum))|0);
 var $26=(($_012+$_sum)|0);
 var $27=FUNCTION_TABLE[$cmp]($26,$12);
 var $28=($27|0)>-1;
 if($28){var $_0_lcssa26=$_012;var $i_0_lcssa27=$i_011;var $_01_lcssa28=$_0110;label=19;break;}else{label=6;break;}
 case 6: 
 var $30=((($i_011)+(1))|0);
 var $31=(($ar+($i_011<<2))|0);
 HEAP32[(($31)>>2)]=$12;
 var $32=((($7)-(1))|0);
 var $33=($32|0)==0;
 if($33){var $52=32;label=15;break;}else{label=7;break;}
 case 7: 
 var $34=$32&1;
 var $35=($34|0)==0;
 if($35){var $_02_i_i=$32;var $nTrailingZeros_03_i_i=0;label=8;break;}else{label=10;break;}
 case 8: 
 var $nTrailingZeros_03_i_i;
 var $_02_i_i;
 var $36=((($nTrailingZeros_03_i_i)+(1))|0);
 var $37=$_02_i_i>>>1;
 var $38=$37&1;
 var $39=($38|0)==0;
 if($39){var $_02_i_i=$37;var $nTrailingZeros_03_i_i=$36;label=8;break;}else{label=9;break;}
 case 9: 
 var $40=($36|0)==0;
 if($40){label=10;break;}else{var $50=$36;label=14;break;}
 case 10: 
 var $41=($8|0)==0;
 if($41){var $_01_i5_i=32;label=13;break;}else{label=11;break;}
 case 11: 
 var $42=$8&1;
 var $43=($42|0)==0;
 if($43){var $_02_i3_i=$8;var $nTrailingZeros_03_i2_i=0;label=12;break;}else{var $_01_i5_i=0;label=13;break;}
 case 12: 
 var $nTrailingZeros_03_i2_i;
 var $_02_i3_i;
 var $44=((($nTrailingZeros_03_i2_i)+(1))|0);
 var $45=$_02_i3_i>>>1;
 var $46=$45&1;
 var $47=($46|0)==0;
 if($47){var $_02_i3_i=$45;var $nTrailingZeros_03_i2_i=$44;label=12;break;}else{var $_01_i5_i=$44;label=13;break;}
 case 13: 
 var $_01_i5_i;
 var $48=((($_01_i5_i)+(32))|0);
 var $49=($_01_i5_i|0)==0;
 var $__i=($49?0:$48);
 var $50=$__i;label=14;break;
 case 14: 
 var $50;
 var $51=($50>>>0)>31;
 if($51){var $52=$50;label=15;break;}else{var $_0_i=$50;var $56=$7;var $55=$8;var $54=$50;label=16;break;}
 case 15: 
 var $52;
 var $53=((($52)-(32))|0);
 var $_0_i=$53;var $56=$8;var $55=0;var $54=$52;label=16;break;
 case 16: 
 var $54;
 var $55;
 var $56;
 var $_0_i;
 var $57=$56>>>($_0_i>>>0);
 var $58=(((32)-($_0_i))|0);
 var $59=$55<<$58;
 var $60=$59|$57;
 var $61=$55>>>($_0_i>>>0);
 var $62=((($54)+($_0110))|0);
 var $63=($60|0)==1;
 var $64=($61|0)==0;
 var $or_cond1=$63&$64;
 if($or_cond1){var $_0_lcssa26=$12;var $i_0_lcssa27=$30;var $_01_lcssa28=$62;label=19;break;}else{label=17;break;}
 case 17: 
 var $_pre=HEAP32[(($2)>>2)];
 var $8=$61;var $7=$60;var $_029=0;var $_0110=$62;var $i_011=$30;var $_012=$12;var $6=$_pre;label=2;break;
 case 18: 
 var $_0_lcssa;
 var $i_0_lcssa;
 var $_01_lcssa;
 var $_02_lcssa;
 var $65=($_02_lcssa|0)==0;
 if($65){var $_0_lcssa26=$_0_lcssa;var $i_0_lcssa27=$i_0_lcssa;var $_01_lcssa28=$_01_lcssa;label=19;break;}else{label=47;break;}
 case 19: 
 var $_01_lcssa28;
 var $i_0_lcssa27;
 var $_0_lcssa26;
 var $66=(($tmp_i6)|0);
 var $$etemp$1$0=256;
 var $$etemp$1$1=0;

 var $67=($i_0_lcssa27|0)<2;
 if($67){label=28;break;}else{label=20;break;}
 case 20: 
 var $69=(($ar+($i_0_lcssa27<<2))|0);
 HEAP32[(($69)>>2)]=$66;
 var $70=($width|0)==0;
 if($70){label=28;break;}else{label=21;break;}
 case 21: 
 var $71=($i_0_lcssa27|0)>0;
 if($71){var $_02_us_i11=$width;var $87=$66;label=26;break;}else{label=22;break;}
 case 22: 
 var $72=($width>>>0)>256;
 var $73=($72?256:$width);
 var $74=HEAP32[(($2)>>2)];
 assert($73 % 1 === 0);(_memcpy($66, $74, $73)|0);
 var $75=($73|0)==($width|0);
 if($75){label=28;break;}else{var $_02_i136=$width;var $91=$73;label=27;break;}
 case 23: 
 var $77=($_02_us_i11|0)==($89|0);
 if($77){label=28;break;}else{label=24;break;}
 case 24: 
 var $78=((($_02_us_i11)-($89))|0);
 var $_pre_i8=HEAP32[(($69)>>2)];
 var $_02_us_i11=$78;var $87=$_pre_i8;label=26;break;
 case 25: 
 var $80;
 var $i_01_us_i10;
 var $81=(($ar+($i_01_us_i10<<2))|0);
 var $82=((($i_01_us_i10)+(1))|0);
 var $83=(($ar+($82<<2))|0);
 var $84=HEAP32[(($83)>>2)];
 assert($89 % 1 === 0);(_memcpy($80, $84, $89)|0);
 var $85=(($80+$89)|0);
 HEAP32[(($81)>>2)]=$85;
 var $86=($82|0)<($i_0_lcssa27|0);
 if($86){var $i_01_us_i10=$82;var $80=$84;label=25;break;}else{label=23;break;}
 case 26: 
 var $87;
 var $_02_us_i11;
 var $88=($_02_us_i11>>>0)>256;
 var $89=($88?256:$_02_us_i11);
 var $90=HEAP32[(($2)>>2)];
 assert($89 % 1 === 0);(_memcpy($87, $90, $89)|0);
 var $i_01_us_i10=0;var $80=$90;label=25;break;
 case 27: 
 var $91;
 var $_02_i136;
 var $92=((($_02_i136)-($91))|0);
 var $93=($92>>>0)>256;
 var $94=($93?256:$92);
 assert($94 % 1 === 0);(_memcpy($66, $74, $94)|0);
 var $95=($92|0)==($94|0);
 if($95){label=28;break;}else{var $_02_i136=$92;var $91=$94;label=27;break;}
 case 28: 
 var $$etemp$2$0=256;
 var $$etemp$2$1=0;

 var $96=$ar_i;
 var $$etemp$3$0=228;
 var $$etemp$3$1=0;

 var $97=(($ar_i)|0);
 HEAP32[(($97)>>2)]=$_0_lcssa26;
 var $98=($_01_lcssa28|0)>1;
 if($98){var $_012_i=$_01_lcssa28;var $_03_i=$_0_lcssa26;var $i_04_i=1;var $100=$_0_lcssa26;label=30;break;}else{label=29;break;}
 case 29: 
 var $99=(($tmp_i)|0);
 var $$etemp$4$0=256;
 var $$etemp$4$1=0;

 var $150=$99;label=46;break;
 case 30: 
 var $100;
 var $i_04_i;
 var $_03_i;
 var $_012_i;
 var $101=(($_03_i+$3)|0);
 var $102=((($_012_i)-(2))|0);
 var $103=(($lp+($102<<2))|0);
 var $104=HEAP32[(($103)>>2)];
 var $sum_i=((($104)+($width))|0);
 var $_sum_i=(((-$sum_i))|0);
 var $105=(($_03_i+$_sum_i)|0);
 var $106=FUNCTION_TABLE[$cmp]($100,$105);
 var $107=($106|0)>-1;
 if($107){label=31;break;}else{label=32;break;}
 case 31: 
 var $109=FUNCTION_TABLE[$cmp]($100,$101);
 var $110=($109|0)>-1;
 if($110){var $i_0_lcssa_i=$i_04_i;label=37;break;}else{label=32;break;}
 case 32: 
 var $112=FUNCTION_TABLE[$cmp]($105,$101);
 var $113=($112|0)>-1;
 var $114=((($i_04_i)+(1))|0);
 var $115=(($ar_i+($i_04_i<<2))|0);
 if($113){label=33;break;}else{label=34;break;}
 case 33: 
 HEAP32[(($115)>>2)]=$105;
 var $117=((($_012_i)-(1))|0);
 var $_0_be_i=$105;var $_01_be_i=$117;label=35;break;
 case 34: 
 HEAP32[(($115)>>2)]=$101;
 var $_0_be_i=$101;var $_01_be_i=$102;label=35;break;
 case 35: 
 var $_01_be_i;
 var $_0_be_i;
 var $119=($_01_be_i|0)>1;
 if($119){label=36;break;}else{var $i_0_lcssa_i=$114;label=37;break;}
 case 36: 
 var $_pre_i=HEAP32[(($97)>>2)];
 var $_012_i=$_01_be_i;var $_03_i=$_0_be_i;var $i_04_i=$114;var $100=$_pre_i;label=30;break;
 case 37: 
 var $i_0_lcssa_i;
 var $120=(($tmp_i)|0);
 var $$etemp$5$0=256;
 var $$etemp$5$1=0;

 var $121=($i_0_lcssa_i|0)<2;
 if($121){var $150=$120;label=46;break;}else{label=38;break;}
 case 38: 
 var $123=(($ar_i+($i_0_lcssa_i<<2))|0);
 HEAP32[(($123)>>2)]=$120;
 var $124=($width|0)==0;
 if($124){var $150=$120;label=46;break;}else{label=39;break;}
 case 39: 
 var $125=($i_0_lcssa_i|0)>0;
 if($125){var $_02_us_i=$width;var $141=$120;label=44;break;}else{label=40;break;}
 case 40: 
 var $126=($width>>>0)>256;
 var $127=($126?256:$width);
 var $128=HEAP32[(($97)>>2)];
 assert($127 % 1 === 0);(_memcpy($120, $128, $127)|0);
 var $129=($127|0)==($width|0);
 if($129){var $150=$120;label=46;break;}else{var $_02_i3=$width;var $145=$127;label=45;break;}
 case 41: 
 var $131=($_02_us_i|0)==($143|0);
 if($131){var $150=$120;label=46;break;}else{label=42;break;}
 case 42: 
 var $132=((($_02_us_i)-($143))|0);
 var $_pre_i3=HEAP32[(($123)>>2)];
 var $_02_us_i=$132;var $141=$_pre_i3;label=44;break;
 case 43: 
 var $134;
 var $i_01_us_i;
 var $135=(($ar_i+($i_01_us_i<<2))|0);
 var $136=((($i_01_us_i)+(1))|0);
 var $137=(($ar_i+($136<<2))|0);
 var $138=HEAP32[(($137)>>2)];
 assert($143 % 1 === 0);(_memcpy($134, $138, $143)|0);
 var $139=(($134+$143)|0);
 HEAP32[(($135)>>2)]=$139;
 var $140=($136|0)<($i_0_lcssa_i|0);
 if($140){var $i_01_us_i=$136;var $134=$138;label=43;break;}else{label=41;break;}
 case 44: 
 var $141;
 var $_02_us_i;
 var $142=($_02_us_i>>>0)>256;
 var $143=($142?256:$_02_us_i);
 var $144=HEAP32[(($97)>>2)];
 assert($143 % 1 === 0);(_memcpy($141, $144, $143)|0);
 var $i_01_us_i=0;var $134=$144;label=43;break;
 case 45: 
 var $145;
 var $_02_i3;
 var $146=((($_02_i3)-($145))|0);
 var $147=($146>>>0)>256;
 var $148=($147?256:$146);
 assert($148 % 1 === 0);(_memcpy($120, $128, $148)|0);
 var $149=($146|0)==($148|0);
 if($149){var $150=$120;label=46;break;}else{var $_02_i3=$146;var $145=$148;label=45;break;}
 case 46: 
 var $150;
 var $$etemp$6$0=256;
 var $$etemp$6$1=0;

 var $$etemp$7$0=228;
 var $$etemp$7$1=0;

 label=47;break;
 case 47: 
 var $$etemp$8$0=228;
 var $$etemp$8$1=0;

 STACKTOP=sp;return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt8bad_castD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);

 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt8bad_castD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt8bad_cast4whatEv($this){
 var label=0;


 return 616;
}


function __ZN10__cxxabiv116__shim_type_infoD2Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop1Ev($this){
 var label=0;


 return;
}


function __ZNK10__cxxabiv116__shim_type_info5noop2Ev($this){
 var label=0;


 return;
}


function __ZN10__cxxabiv123__fundamental_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv117__class_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv120__si_class_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv121__vmi_class_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZN10__cxxabiv119__pointer_type_infoD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($this|0)==0;
 if($1){label=3;break;}else{label=2;break;}
 case 2: 
 var $3=$this;
 _free($3);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv123__fundamental_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$0){
 var label=0;


 var $2=(($this)|0);
 var $3=(($thrown_type)|0);
 var $4=($2|0)==($3|0);
 return $4;
}


function __ZNK10__cxxabiv117__class_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=(($this)|0);
 var $2=(($thrown_type)|0);
 var $3=($1|0)==($2|0);
 if($3){var $_1=1;label=6;break;}else{label=2;break;}
 case 2: 
 var $5=($thrown_type|0)==0;
 if($5){var $_1=0;label=6;break;}else{label=3;break;}
 case 3: 
 var $7=$thrown_type;
 var $8=___dynamic_cast($7,13464);
 var $9=$8;
 var $10=($8|0)==0;
 if($10){var $_1=0;label=6;break;}else{label=4;break;}
 case 4: 
 var $12=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 _memset($12, 0, 56)|0;
 var $13=(($info)|0);
 HEAP32[(($13)>>2)]=$9;
 var $14=(($info+8)|0);
 HEAP32[(($14)>>2)]=$this;
 var $15=(($info+12)|0);
 HEAP32[(($15)>>2)]=-1;
 var $16=(($info+48)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=$8;
 var $18=HEAP32[(($17)>>2)];
 var $19=(($18+28)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$20]($9,$info,$21,1);
 var $22=(($info+24)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==1;
 if($24){label=5;break;}else{var $_1=0;label=6;break;}
 case 5: 
 var $26=(($info+16)|0);
 var $27=HEAP32[(($26)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$27;
 var $_1=1;label=6;break;
 case 6: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($info+16)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==0;
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($5)>>2)]=$adjustedPtr;
 var $9=(($info+24)|0);
 HEAP32[(($9)>>2)]=$path_below;
 var $10=(($info+36)|0);
 HEAP32[(($10)>>2)]=1;
 label=8;break;
 case 4: 
 var $12=($6|0)==($adjustedPtr|0);
 if($12){label=5;break;}else{label=7;break;}
 case 5: 
 var $14=(($info+24)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==2;
 if($16){label=6;break;}else{label=8;break;}
 case 6: 
 HEAP32[(($14)>>2)]=$path_below;
 label=8;break;
 case 7: 
 var $19=(($info+36)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=((($20)+(1))|0);
 HEAP32[(($19)>>2)]=$21;
 var $22=(($info+24)|0);
 HEAP32[(($22)>>2)]=2;
 var $23=(($info+54)|0);
 HEAP8[($23)]=1;
 label=8;break;
 case 8: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=9;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=9;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=9;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=9;break;
 case 8: 
 var $27=(($this+8)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=$28;
 var $30=HEAP32[(($29)>>2)];
 var $31=(($30+28)|0);
 var $32=HEAP32[(($31)>>2)];
 FUNCTION_TABLE[$32]($28,$info,$adjustedPtr,$path_below);
 label=9;break;
 case 9: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info27has_unambiguous_public_baseEPNS_19__dynamic_cast_infoEPvi($this,$info,$adjustedPtr,$path_below){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=8;break;}
 case 2: 
 var $7=(($info+16)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==0;
 if($9){label=3;break;}else{label=4;break;}
 case 3: 
 HEAP32[(($7)>>2)]=$adjustedPtr;
 var $11=(($info+24)|0);
 HEAP32[(($11)>>2)]=$path_below;
 var $12=(($info+36)|0);
 HEAP32[(($12)>>2)]=1;
 label=16;break;
 case 4: 
 var $14=($8|0)==($adjustedPtr|0);
 if($14){label=5;break;}else{label=7;break;}
 case 5: 
 var $16=(($info+24)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=($17|0)==2;
 if($18){label=6;break;}else{label=16;break;}
 case 6: 
 HEAP32[(($16)>>2)]=$path_below;
 label=16;break;
 case 7: 
 var $21=(($info+36)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($22)+(1))|0);
 HEAP32[(($21)>>2)]=$23;
 var $24=(($info+24)|0);
 HEAP32[(($24)>>2)]=2;
 var $25=(($info+54)|0);
 HEAP8[($25)]=1;
 label=16;break;
 case 8: 
 var $27=(($this+12)|0);
 var $28=HEAP32[(($27)>>2)];
 var $29=(($this+16+($28<<3))|0);
 var $30=(($this+20)|0);
 var $31=HEAP32[(($30)>>2)];
 var $32=$31>>8;
 var $33=$31&1;
 var $34=($33|0)==0;
 if($34){var $offset_to_base_0_i1=$32;label=10;break;}else{label=9;break;}
 case 9: 
 var $36=$adjustedPtr;
 var $37=HEAP32[(($36)>>2)];
 var $38=(($37+$32)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $offset_to_base_0_i1=$40;label=10;break;
 case 10: 
 var $offset_to_base_0_i1;
 var $41=(($this+16)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=$42;
 var $44=HEAP32[(($43)>>2)];
 var $45=(($44+28)|0);
 var $46=HEAP32[(($45)>>2)];
 var $47=(($adjustedPtr+$offset_to_base_0_i1)|0);
 var $48=$31&2;
 var $49=($48|0)!=0;
 var $50=($49?$path_below:2);
 FUNCTION_TABLE[$46]($42,$info,$47,$50);
 var $51=($28|0)>1;
 if($51){label=11;break;}else{label=16;break;}
 case 11: 
 var $52=(($this+24)|0);
 var $53=(($info+54)|0);
 var $54=$adjustedPtr;
 var $p_0=$52;label=12;break;
 case 12: 
 var $p_0;
 var $56=(($p_0+4)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=$57>>8;
 var $59=$57&1;
 var $60=($59|0)==0;
 if($60){var $offset_to_base_0_i=$58;label=14;break;}else{label=13;break;}
 case 13: 
 var $62=HEAP32[(($54)>>2)];
 var $63=(($62+$58)|0);
 var $64=$63;
 var $65=HEAP32[(($64)>>2)];
 var $offset_to_base_0_i=$65;label=14;break;
 case 14: 
 var $offset_to_base_0_i;
 var $66=(($p_0)|0);
 var $67=HEAP32[(($66)>>2)];
 var $68=$67;
 var $69=HEAP32[(($68)>>2)];
 var $70=(($69+28)|0);
 var $71=HEAP32[(($70)>>2)];
 var $72=(($adjustedPtr+$offset_to_base_0_i)|0);
 var $73=$57&2;
 var $74=($73|0)!=0;
 var $75=($74?$path_below:2);
 FUNCTION_TABLE[$71]($67,$info,$72,$75);
 var $76=HEAP8[($53)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=15;break;}else{label=16;break;}
 case 15: 
 var $79=(($p_0+8)|0);
 var $80=($79>>>0)<($29>>>0);
 if($80){var $p_0=$79;label=12;break;}else{label=16;break;}
 case 16: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv119__pointer_type_info9can_catchEPKNS_16__shim_type_infoERPv($this,$thrown_type,$adjustedPtr){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=HEAP32[(($adjustedPtr)>>2)];
 var $2=$1;
 var $3=HEAP32[(($2)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$3;
 var $4=(($this)|0);
 var $5=(($thrown_type)|0);
 var $6=($4|0)==($5|0);
 var $7=($5|0)==13496;
 var $__i=$6|$7;
 if($__i){var $_1=1;label=12;break;}else{label=2;break;}
 case 2: 
 var $9=($thrown_type|0)==0;
 if($9){var $_1=0;label=12;break;}else{label=3;break;}
 case 3: 
 var $11=$thrown_type;
 var $12=___dynamic_cast($11,13432);
 var $13=($12|0)==0;
 if($13){var $_1=0;label=12;break;}else{label=4;break;}
 case 4: 
 var $15=(($12+8)|0);
 var $16=$15;
 var $17=HEAP32[(($16)>>2)];
 var $18=(($this+8)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=$19^-1;
 var $21=$17&$20;
 var $22=($21|0)==0;
 if($22){label=5;break;}else{var $_1=0;label=12;break;}
 case 5: 
 var $24=(($this+12)|0);
 var $25=HEAP32[(($24)>>2)];
 var $26=(($25)|0);
 var $27=(($12+12)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $30=($25|0)==($29|0);
 var $31=($26|0)==11680;
 var $or_cond=$30|$31;
 if($or_cond){var $_1=1;label=12;break;}else{label=6;break;}
 case 6: 
 var $33=($25|0)==0;
 if($33){var $_1=0;label=12;break;}else{label=7;break;}
 case 7: 
 var $35=$25;
 var $36=___dynamic_cast($35,13464);
 var $37=$36;
 var $38=($36|0)==0;
 if($38){var $_1=0;label=12;break;}else{label=8;break;}
 case 8: 
 var $40=HEAP32[(($28)>>2)];
 var $41=($40|0)==0;
 if($41){var $_1=0;label=12;break;}else{label=9;break;}
 case 9: 
 var $43=$40;
 var $44=___dynamic_cast($43,13464);
 var $45=$44;
 var $46=($44|0)==0;
 if($46){var $_1=0;label=12;break;}else{label=10;break;}
 case 10: 
 var $48=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 _memset($48, 0, 56)|0;
 var $49=(($info)|0);
 HEAP32[(($49)>>2)]=$45;
 var $50=(($info+8)|0);
 HEAP32[(($50)>>2)]=$37;
 var $51=(($info+12)|0);
 HEAP32[(($51)>>2)]=-1;
 var $52=(($info+48)|0);
 HEAP32[(($52)>>2)]=1;
 var $53=$44;
 var $54=HEAP32[(($53)>>2)];
 var $55=(($54+28)|0);
 var $56=HEAP32[(($55)>>2)];
 var $57=HEAP32[(($adjustedPtr)>>2)];
 FUNCTION_TABLE[$56]($45,$info,$57,1);
 var $58=(($info+24)|0);
 var $59=HEAP32[(($58)>>2)];
 var $60=($59|0)==1;
 if($60){label=11;break;}else{var $_1=0;label=12;break;}
 case 11: 
 var $62=(($info+16)|0);
 var $63=HEAP32[(($62)>>2)];
 HEAP32[(($adjustedPtr)>>2)]=$63;
 var $_1=1;label=12;break;
 case 12: 
 var $_1;
 STACKTOP=sp;return $_1;
  default: assert(0, "bad label: " + label);
 }

}


function ___dynamic_cast($static_ptr,$dst_type){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+56)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $info=sp;
 var $1=$static_ptr;
 var $2=HEAP32[(($1)>>2)];
 var $3=((($2)-(8))|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=$4;
 var $6=(($static_ptr+$5)|0);
 var $7=((($2)-(4))|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=$8;
 var $10=$info;
 var $$etemp$0$0=56;
 var $$etemp$0$1=0;

 var $11=(($info)|0);
 HEAP32[(($11)>>2)]=$dst_type;
 var $12=(($info+4)|0);
 HEAP32[(($12)>>2)]=$static_ptr;
 var $13=(($info+8)|0);
 HEAP32[(($13)>>2)]=13480;
 var $14=(($info+12)|0);
 var $15=(($info+16)|0);
 var $16=(($info+20)|0);
 var $17=(($info+24)|0);
 var $18=(($info+28)|0);
 var $19=(($info+32)|0);
 var $20=(($info+40)|0);
 var $21=$8;
 var $22=(($dst_type)|0);
 var $23=($21|0)==($22|0);
 var $24=$14;
 _memset($24, 0, 43)|0;
 if($23){label=2;break;}else{label=3;break;}
 case 2: 
 var $26=(($info+48)|0);
 HEAP32[(($26)>>2)]=1;
 var $27=$8;
 var $28=HEAP32[(($27)>>2)];
 var $29=(($28+20)|0);
 var $30=HEAP32[(($29)>>2)];
 FUNCTION_TABLE[$30]($9,$info,$6,$6,1,0);
 var $31=HEAP32[(($17)>>2)];
 var $32=($31|0)==1;
 var $_=($32?$6:0);
 var $dst_ptr_0=$_;label=12;break;
 case 3: 
 var $34=(($info+36)|0);
 var $35=$8;
 var $36=HEAP32[(($35)>>2)];
 var $37=(($36+24)|0);
 var $38=HEAP32[(($37)>>2)];
 FUNCTION_TABLE[$38]($9,$info,$6,1,0);
 var $39=HEAP32[(($34)>>2)];
 if(($39|0)==0){ label=4;break;}else if(($39|0)==1){ label=7;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 4: 
 var $41=HEAP32[(($20)>>2)];
 var $42=($41|0)==1;
 if($42){label=5;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 5: 
 var $44=HEAP32[(($18)>>2)];
 var $45=($44|0)==1;
 if($45){label=6;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 6: 
 var $47=HEAP32[(($19)>>2)];
 var $48=($47|0)==1;
 var $49=HEAP32[(($16)>>2)];
 var $_1=($48?$49:0);
 var $dst_ptr_0=$_1;label=12;break;
 case 7: 
 var $51=HEAP32[(($17)>>2)];
 var $52=($51|0)==1;
 if($52){label=11;break;}else{label=8;break;}
 case 8: 
 var $54=HEAP32[(($20)>>2)];
 var $55=($54|0)==0;
 if($55){label=9;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 9: 
 var $57=HEAP32[(($18)>>2)];
 var $58=($57|0)==1;
 if($58){label=10;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 10: 
 var $60=HEAP32[(($19)>>2)];
 var $61=($60|0)==1;
 if($61){label=11;break;}else{var $dst_ptr_0=0;label=12;break;}
 case 11: 
 var $63=HEAP32[(($15)>>2)];
 var $dst_ptr_0=$63;label=12;break;
 case 12: 
 var $dst_ptr_0;
 var $$etemp$1$0=56;
 var $$etemp$1$1=0;

 STACKTOP=sp;return $dst_ptr_0;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=53;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=53;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=53;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=29;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=53;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=53;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=53;break;}else{label=11;break;}
 case 11: 
 var $38=(($this+12)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=(($this+16+($39<<3))|0);
 var $41=($39|0)>0;
 if($41){label=12;break;}else{var $is_dst_type_derived_from_static_type_2_off030=0;label=23;break;}
 case 12: 
 var $42=(($this+16)|0);
 var $43=(($info+52)|0);
 var $44=(($info+53)|0);
 var $45=(($info+54)|0);
 var $46=(($this+8)|0);
 var $47=(($info+24)|0);
 var $48=$current_ptr;
 var $does_dst_type_point_to_our_static_type_0_off019=0;var $p_020=$42;var $is_dst_type_derived_from_static_type_0_off021=0;label=13;break;
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off021;
 var $p_020;
 var $does_dst_type_point_to_our_static_type_0_off019;
 HEAP8[($43)]=0;
 HEAP8[($44)]=0;
 var $50=(($p_020+4)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=$51>>8;
 var $53=$51&1;
 var $54=($53|0)==0;
 if($54){var $offset_to_base_0_i13=$52;label=15;break;}else{label=14;break;}
 case 14: 
 var $56=HEAP32[(($48)>>2)];
 var $57=(($56+$52)|0);
 var $58=$57;
 var $59=HEAP32[(($58)>>2)];
 var $offset_to_base_0_i13=$59;label=15;break;
 case 15: 
 var $offset_to_base_0_i13;
 var $60=(($p_020)|0);
 var $61=HEAP32[(($60)>>2)];
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $64=(($63+20)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=(($current_ptr+$offset_to_base_0_i13)|0);
 var $67=$51>>>1;
 var $68=$67&1;
 var $69=(((2)-($68))|0);
 FUNCTION_TABLE[$65]($61,$info,$current_ptr,$66,$69,$use_strcmp);
 var $70=HEAP8[($45)];
 var $71=(($70<<24)>>24)==0;
 if($71){label=16;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}
 case 16: 
 var $73=HEAP8[($44)];
 var $74=(($73<<24)>>24)==0;
 if($74){var $is_dst_type_derived_from_static_type_1_off0=$is_dst_type_derived_from_static_type_0_off021;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}else{label=17;break;}
 case 17: 
 var $76=HEAP8[($43)];
 var $77=(($76<<24)>>24)==0;
 if($77){label=20;break;}else{label=18;break;}
 case 18: 
 var $79=HEAP32[(($47)>>2)];
 var $80=($79|0)==1;
 if($80){label=27;break;}else{label=19;break;}
 case 19: 
 var $82=HEAP32[(($46)>>2)];
 var $83=$82&2;
 var $84=($83|0)==0;
 if($84){label=27;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=1;label=21;break;}
 case 20: 
 var $86=HEAP32[(($46)>>2)];
 var $87=$86&1;
 var $88=($87|0)==0;
 if($88){var $is_dst_type_derived_from_static_type_2_off0=1;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_0_off019;label=22;break;}else{var $is_dst_type_derived_from_static_type_1_off0=1;var $does_dst_type_point_to_our_static_type_1_off0=$does_dst_type_point_to_our_static_type_0_off019;label=21;break;}
 case 21: 
 var $does_dst_type_point_to_our_static_type_1_off0;
 var $is_dst_type_derived_from_static_type_1_off0;
 var $90=(($p_020+8)|0);
 var $91=($90>>>0)<($40>>>0);
 if($91){var $does_dst_type_point_to_our_static_type_0_off019=$does_dst_type_point_to_our_static_type_1_off0;var $p_020=$90;var $is_dst_type_derived_from_static_type_0_off021=$is_dst_type_derived_from_static_type_1_off0;label=13;break;}else{var $is_dst_type_derived_from_static_type_2_off0=$is_dst_type_derived_from_static_type_1_off0;var $does_dst_type_point_to_our_static_type_0_off0_lcssa=$does_dst_type_point_to_our_static_type_1_off0;label=22;break;}
 case 22: 
 var $does_dst_type_point_to_our_static_type_0_off0_lcssa;
 var $is_dst_type_derived_from_static_type_2_off0;
 if($does_dst_type_point_to_our_static_type_0_off0_lcssa){var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off0;label=26;break;}else{var $is_dst_type_derived_from_static_type_2_off030=$is_dst_type_derived_from_static_type_2_off0;label=23;break;}
 case 23: 
 var $is_dst_type_derived_from_static_type_2_off030;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $92=(($info+40)|0);
 var $93=HEAP32[(($92)>>2)];
 var $94=((($93)+(1))|0);
 HEAP32[(($92)>>2)]=$94;
 var $95=(($info+36)|0);
 var $96=HEAP32[(($95)>>2)];
 var $97=($96|0)==1;
 if($97){label=24;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 24: 
 var $99=(($info+24)|0);
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==2;
 if($101){label=25;break;}else{var $is_dst_type_derived_from_static_type_2_off031=$is_dst_type_derived_from_static_type_2_off030;label=26;break;}
 case 25: 
 var $103=(($info+54)|0);
 HEAP8[($103)]=1;
 if($is_dst_type_derived_from_static_type_2_off030){label=27;break;}else{label=28;break;}
 case 26: 
 var $is_dst_type_derived_from_static_type_2_off031;
 if($is_dst_type_derived_from_static_type_2_off031){label=27;break;}else{label=28;break;}
 case 27: 
 HEAP32[(($34)>>2)]=3;
 label=53;break;
 case 28: 
 HEAP32[(($34)>>2)]=4;
 label=53;break;
 case 29: 
 var $107=(($this+12)|0);
 var $108=HEAP32[(($107)>>2)];
 var $109=(($this+16+($108<<3))|0);
 var $110=(($this+20)|0);
 var $111=HEAP32[(($110)>>2)];
 var $112=$111>>8;
 var $113=$111&1;
 var $114=($113|0)==0;
 if($114){var $offset_to_base_0_i14=$112;label=31;break;}else{label=30;break;}
 case 30: 
 var $116=$current_ptr;
 var $117=HEAP32[(($116)>>2)];
 var $118=(($117+$112)|0);
 var $119=$118;
 var $120=HEAP32[(($119)>>2)];
 var $offset_to_base_0_i14=$120;label=31;break;
 case 31: 
 var $offset_to_base_0_i14;
 var $121=(($this+16)|0);
 var $122=HEAP32[(($121)>>2)];
 var $123=$122;
 var $124=HEAP32[(($123)>>2)];
 var $125=(($124+24)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=(($current_ptr+$offset_to_base_0_i14)|0);
 var $128=$111&2;
 var $129=($128|0)!=0;
 var $130=($129?$path_below:2);
 FUNCTION_TABLE[$126]($122,$info,$127,$130,$use_strcmp);
 var $131=(($this+24)|0);
 var $132=($108|0)>1;
 if($132){label=32;break;}else{label=53;break;}
 case 32: 
 var $134=(($this+8)|0);
 var $135=HEAP32[(($134)>>2)];
 var $136=$135&2;
 var $137=($136|0)==0;
 if($137){label=33;break;}else{label=34;break;}
 case 33: 
 var $139=(($info+36)|0);
 var $140=HEAP32[(($139)>>2)];
 var $141=($140|0)==1;
 if($141){label=34;break;}else{label=39;break;}
 case 34: 
 var $142=(($info+54)|0);
 var $143=$current_ptr;
 var $p2_0=$131;label=35;break;
 case 35: 
 var $p2_0;
 var $145=HEAP8[($142)];
 var $146=(($145<<24)>>24)==0;
 if($146){label=36;break;}else{label=53;break;}
 case 36: 
 var $148=(($p2_0+4)|0);
 var $149=HEAP32[(($148)>>2)];
 var $150=$149>>8;
 var $151=$149&1;
 var $152=($151|0)==0;
 if($152){var $offset_to_base_0_i11=$150;label=38;break;}else{label=37;break;}
 case 37: 
 var $154=HEAP32[(($143)>>2)];
 var $155=(($154+$150)|0);
 var $156=$155;
 var $157=HEAP32[(($156)>>2)];
 var $offset_to_base_0_i11=$157;label=38;break;
 case 38: 
 var $offset_to_base_0_i11;
 var $158=(($p2_0)|0);
 var $159=HEAP32[(($158)>>2)];
 var $160=$159;
 var $161=HEAP32[(($160)>>2)];
 var $162=(($161+24)|0);
 var $163=HEAP32[(($162)>>2)];
 var $164=(($current_ptr+$offset_to_base_0_i11)|0);
 var $165=$149&2;
 var $166=($165|0)!=0;
 var $167=($166?$path_below:2);
 FUNCTION_TABLE[$163]($159,$info,$164,$167,$use_strcmp);
 var $168=(($p2_0+8)|0);
 var $169=($168>>>0)<($109>>>0);
 if($169){var $p2_0=$168;label=35;break;}else{label=53;break;}
 case 39: 
 var $171=$135&1;
 var $172=($171|0)==0;
 if($172){label=41;break;}else{label=40;break;}
 case 40: 
 var $173=(($info+24)|0);
 var $174=(($info+54)|0);
 var $175=$current_ptr;
 var $p2_1=$131;label=42;break;
 case 41: 
 var $176=(($info+54)|0);
 var $177=$current_ptr;
 var $p2_2=$131;label=48;break;
 case 42: 
 var $p2_1;
 var $179=HEAP8[($174)];
 var $180=(($179<<24)>>24)==0;
 if($180){label=43;break;}else{label=53;break;}
 case 43: 
 var $182=HEAP32[(($139)>>2)];
 var $183=($182|0)==1;
 if($183){label=44;break;}else{label=45;break;}
 case 44: 
 var $185=HEAP32[(($173)>>2)];
 var $186=($185|0)==1;
 if($186){label=53;break;}else{label=45;break;}
 case 45: 
 var $188=(($p2_1+4)|0);
 var $189=HEAP32[(($188)>>2)];
 var $190=$189>>8;
 var $191=$189&1;
 var $192=($191|0)==0;
 if($192){var $offset_to_base_0_i9=$190;label=47;break;}else{label=46;break;}
 case 46: 
 var $194=HEAP32[(($175)>>2)];
 var $195=(($194+$190)|0);
 var $196=$195;
 var $197=HEAP32[(($196)>>2)];
 var $offset_to_base_0_i9=$197;label=47;break;
 case 47: 
 var $offset_to_base_0_i9;
 var $198=(($p2_1)|0);
 var $199=HEAP32[(($198)>>2)];
 var $200=$199;
 var $201=HEAP32[(($200)>>2)];
 var $202=(($201+24)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=(($current_ptr+$offset_to_base_0_i9)|0);
 var $205=$189&2;
 var $206=($205|0)!=0;
 var $207=($206?$path_below:2);
 FUNCTION_TABLE[$203]($199,$info,$204,$207,$use_strcmp);
 var $208=(($p2_1+8)|0);
 var $209=($208>>>0)<($109>>>0);
 if($209){var $p2_1=$208;label=42;break;}else{label=53;break;}
 case 48: 
 var $p2_2;
 var $211=HEAP8[($176)];
 var $212=(($211<<24)>>24)==0;
 if($212){label=49;break;}else{label=53;break;}
 case 49: 
 var $214=HEAP32[(($139)>>2)];
 var $215=($214|0)==1;
 if($215){label=53;break;}else{label=50;break;}
 case 50: 
 var $217=(($p2_2+4)|0);
 var $218=HEAP32[(($217)>>2)];
 var $219=$218>>8;
 var $220=$218&1;
 var $221=($220|0)==0;
 if($221){var $offset_to_base_0_i=$219;label=52;break;}else{label=51;break;}
 case 51: 
 var $223=HEAP32[(($177)>>2)];
 var $224=(($223+$219)|0);
 var $225=$224;
 var $226=HEAP32[(($225)>>2)];
 var $offset_to_base_0_i=$226;label=52;break;
 case 52: 
 var $offset_to_base_0_i;
 var $227=(($p2_2)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=(($230+24)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=(($current_ptr+$offset_to_base_0_i)|0);
 var $234=$218&2;
 var $235=($234|0)!=0;
 var $236=($235?$path_below:2);
 FUNCTION_TABLE[$232]($228,$info,$233,$236,$use_strcmp);
 var $237=(($p2_2+8)|0);
 var $238=($237>>>0)<($109>>>0);
 if($238){var $p2_2=$237;label=48;break;}else{label=53;break;}
 case 53: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=5;break;}
 case 2: 
 var $7=(($info+4)|0);
 var $8=HEAP32[(($7)>>2)];
 var $9=($8|0)==($current_ptr|0);
 if($9){label=3;break;}else{label=20;break;}
 case 3: 
 var $11=(($info+28)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==1;
 if($13){label=20;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$path_below;
 label=20;break;
 case 5: 
 var $16=(($info)|0);
 var $17=HEAP32[(($16)>>2)];
 var $18=(($17)|0);
 var $19=($1|0)==($18|0);
 if($19){label=6;break;}else{label=19;break;}
 case 6: 
 var $21=(($info+16)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=($22|0)==($current_ptr|0);
 if($23){label=8;break;}else{label=7;break;}
 case 7: 
 var $25=(($info+20)|0);
 var $26=HEAP32[(($25)>>2)];
 var $27=($26|0)==($current_ptr|0);
 if($27){label=8;break;}else{label=10;break;}
 case 8: 
 var $29=($path_below|0)==1;
 if($29){label=9;break;}else{label=20;break;}
 case 9: 
 var $31=(($info+32)|0);
 HEAP32[(($31)>>2)]=1;
 label=20;break;
 case 10: 
 var $33=(($info+32)|0);
 HEAP32[(($33)>>2)]=$path_below;
 var $34=(($info+44)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==4;
 if($36){label=20;break;}else{label=11;break;}
 case 11: 
 var $38=(($info+52)|0);
 HEAP8[($38)]=0;
 var $39=(($info+53)|0);
 HEAP8[($39)]=0;
 var $40=(($this+8)|0);
 var $41=HEAP32[(($40)>>2)];
 var $42=$41;
 var $43=HEAP32[(($42)>>2)];
 var $44=(($43+20)|0);
 var $45=HEAP32[(($44)>>2)];
 FUNCTION_TABLE[$45]($41,$info,$current_ptr,$current_ptr,1,$use_strcmp);
 var $46=HEAP8[($39)];
 var $47=(($46<<24)>>24)==0;
 if($47){var $is_dst_type_derived_from_static_type_0_off01=0;label=13;break;}else{label=12;break;}
 case 12: 
 var $49=HEAP8[($38)];
 var $not_=(($49<<24)>>24)==0;
 if($not_){var $is_dst_type_derived_from_static_type_0_off01=1;label=13;break;}else{label=17;break;}
 case 13: 
 var $is_dst_type_derived_from_static_type_0_off01;
 HEAP32[(($25)>>2)]=$current_ptr;
 var $50=(($info+40)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=((($51)+(1))|0);
 HEAP32[(($50)>>2)]=$52;
 var $53=(($info+36)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=($54|0)==1;
 if($55){label=14;break;}else{label=16;break;}
 case 14: 
 var $57=(($info+24)|0);
 var $58=HEAP32[(($57)>>2)];
 var $59=($58|0)==2;
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $61=(($info+54)|0);
 HEAP8[($61)]=1;
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 16: 
 if($is_dst_type_derived_from_static_type_0_off01){label=17;break;}else{label=18;break;}
 case 17: 
 HEAP32[(($34)>>2)]=3;
 label=20;break;
 case 18: 
 HEAP32[(($34)>>2)]=4;
 label=20;break;
 case 19: 
 var $65=(($this+8)|0);
 var $66=HEAP32[(($65)>>2)];
 var $67=$66;
 var $68=HEAP32[(($67)>>2)];
 var $69=(($68+24)|0);
 var $70=HEAP32[(($69)>>2)];
 FUNCTION_TABLE[$70]($66,$info,$current_ptr,$path_below,$use_strcmp);
 label=20;break;
 case 20: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_below_dstEPNS_19__dynamic_cast_infoEPKvib($this,$info,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=5;break;}
 case 2: 
 var $5=(($info+4)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)==($current_ptr|0);
 if($7){label=3;break;}else{label=14;break;}
 case 3: 
 var $9=(($info+28)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=($10|0)==1;
 if($11){label=14;break;}else{label=4;break;}
 case 4: 
 HEAP32[(($9)>>2)]=$path_below;
 label=14;break;
 case 5: 
 var $14=(($info)|0);
 var $15=HEAP32[(($14)>>2)];
 var $16=($15|0)==($this|0);
 if($16){label=6;break;}else{label=14;break;}
 case 6: 
 var $18=(($info+16)|0);
 var $19=HEAP32[(($18)>>2)];
 var $20=($19|0)==($current_ptr|0);
 if($20){label=8;break;}else{label=7;break;}
 case 7: 
 var $22=(($info+20)|0);
 var $23=HEAP32[(($22)>>2)];
 var $24=($23|0)==($current_ptr|0);
 if($24){label=8;break;}else{label=10;break;}
 case 8: 
 var $26=($path_below|0)==1;
 if($26){label=9;break;}else{label=14;break;}
 case 9: 
 var $28=(($info+32)|0);
 HEAP32[(($28)>>2)]=1;
 label=14;break;
 case 10: 
 var $30=(($info+32)|0);
 HEAP32[(($30)>>2)]=$path_below;
 HEAP32[(($22)>>2)]=$current_ptr;
 var $31=(($info+40)|0);
 var $32=HEAP32[(($31)>>2)];
 var $33=((($32)+(1))|0);
 HEAP32[(($31)>>2)]=$33;
 var $34=(($info+36)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 if($36){label=11;break;}else{label=13;break;}
 case 11: 
 var $38=(($info+24)|0);
 var $39=HEAP32[(($38)>>2)];
 var $40=($39|0)==2;
 if($40){label=12;break;}else{label=13;break;}
 case 12: 
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=13;break;
 case 13: 
 var $44=(($info+44)|0);
 HEAP32[(($44)>>2)]=4;
 label=14;break;
 case 14: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv121__vmi_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=26;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=26;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=26;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=26;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=26;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=26;break;
 case 12: 
 var $46=(($info+52)|0);
 var $47=HEAP8[($46)];
 var $48=(($info+53)|0);
 var $49=HEAP8[($48)];
 var $50=(($this+12)|0);
 var $51=HEAP32[(($50)>>2)];
 var $52=(($this+16+($51<<3))|0);
 HEAP8[($46)]=0;
 HEAP8[($48)]=0;
 var $53=(($this+20)|0);
 var $54=HEAP32[(($53)>>2)];
 var $55=$54>>8;
 var $56=$54&1;
 var $57=($56|0)==0;
 if($57){var $offset_to_base_0_i1=$55;label=14;break;}else{label=13;break;}
 case 13: 
 var $59=$current_ptr;
 var $60=HEAP32[(($59)>>2)];
 var $61=(($60+$55)|0);
 var $62=$61;
 var $63=HEAP32[(($62)>>2)];
 var $offset_to_base_0_i1=$63;label=14;break;
 case 14: 
 var $offset_to_base_0_i1;
 var $64=(($this+16)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=(($67+20)|0);
 var $69=HEAP32[(($68)>>2)];
 var $70=(($current_ptr+$offset_to_base_0_i1)|0);
 var $71=$54&2;
 var $72=($71|0)!=0;
 var $73=($72?$path_below:2);
 FUNCTION_TABLE[$69]($65,$info,$dst_ptr,$70,$73,$use_strcmp);
 var $74=($51|0)>1;
 if($74){label=15;break;}else{label=25;break;}
 case 15: 
 var $75=(($this+24)|0);
 var $76=(($info+24)|0);
 var $77=(($this+8)|0);
 var $78=(($info+54)|0);
 var $79=$current_ptr;
 var $p_0=$75;label=16;break;
 case 16: 
 var $p_0;
 var $81=HEAP8[($78)];
 var $82=(($81<<24)>>24)==0;
 if($82){label=17;break;}else{label=25;break;}
 case 17: 
 var $84=HEAP8[($46)];
 var $85=(($84<<24)>>24)==0;
 if($85){label=20;break;}else{label=18;break;}
 case 18: 
 var $87=HEAP32[(($76)>>2)];
 var $88=($87|0)==1;
 if($88){label=25;break;}else{label=19;break;}
 case 19: 
 var $90=HEAP32[(($77)>>2)];
 var $91=$90&2;
 var $92=($91|0)==0;
 if($92){label=25;break;}else{label=22;break;}
 case 20: 
 var $94=HEAP8[($48)];
 var $95=(($94<<24)>>24)==0;
 if($95){label=22;break;}else{label=21;break;}
 case 21: 
 var $97=HEAP32[(($77)>>2)];
 var $98=$97&1;
 var $99=($98|0)==0;
 if($99){label=25;break;}else{label=22;break;}
 case 22: 
 HEAP8[($46)]=0;
 HEAP8[($48)]=0;
 var $101=(($p_0+4)|0);
 var $102=HEAP32[(($101)>>2)];
 var $103=$102>>8;
 var $104=$102&1;
 var $105=($104|0)==0;
 if($105){var $offset_to_base_0_i=$103;label=24;break;}else{label=23;break;}
 case 23: 
 var $107=HEAP32[(($79)>>2)];
 var $108=(($107+$103)|0);
 var $109=$108;
 var $110=HEAP32[(($109)>>2)];
 var $offset_to_base_0_i=$110;label=24;break;
 case 24: 
 var $offset_to_base_0_i;
 var $111=(($p_0)|0);
 var $112=HEAP32[(($111)>>2)];
 var $113=$112;
 var $114=HEAP32[(($113)>>2)];
 var $115=(($114+20)|0);
 var $116=HEAP32[(($115)>>2)];
 var $117=(($current_ptr+$offset_to_base_0_i)|0);
 var $118=$102&2;
 var $119=($118|0)!=0;
 var $120=($119?$path_below:2);
 FUNCTION_TABLE[$116]($112,$info,$dst_ptr,$117,$120,$use_strcmp);
 var $121=(($p_0+8)|0);
 var $122=($121>>>0)<($52>>>0);
 if($122){var $p_0=$121;label=16;break;}else{label=25;break;}
 case 25: 
 HEAP8[($46)]=$47;
 HEAP8[($48)]=$49;
 label=26;break;
 case 26: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv120__si_class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);
 var $2=(($info+8)|0);
 var $3=HEAP32[(($2)>>2)];
 var $4=(($3)|0);
 var $5=($1|0)==($4|0);
 if($5){label=2;break;}else{label=12;break;}
 case 2: 
 var $7=(($info+53)|0);
 HEAP8[($7)]=1;
 var $8=(($info+4)|0);
 var $9=HEAP32[(($8)>>2)];
 var $10=($9|0)==($current_ptr|0);
 if($10){label=3;break;}else{label=13;break;}
 case 3: 
 var $12=(($info+52)|0);
 HEAP8[($12)]=1;
 var $13=(($info+16)|0);
 var $14=HEAP32[(($13)>>2)];
 var $15=($14|0)==0;
 if($15){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($13)>>2)]=$dst_ptr;
 var $17=(($info+24)|0);
 HEAP32[(($17)>>2)]=$path_below;
 var $18=(($info+36)|0);
 HEAP32[(($18)>>2)]=1;
 var $19=(($info+48)|0);
 var $20=HEAP32[(($19)>>2)];
 var $21=($20|0)==1;
 var $22=($path_below|0)==1;
 var $or_cond_i=$21&$22;
 if($or_cond_i){label=5;break;}else{label=13;break;}
 case 5: 
 var $24=(($info+54)|0);
 HEAP8[($24)]=1;
 label=13;break;
 case 6: 
 var $26=($14|0)==($dst_ptr|0);
 if($26){label=7;break;}else{label=11;break;}
 case 7: 
 var $28=(($info+24)|0);
 var $29=HEAP32[(($28)>>2)];
 var $30=($29|0)==2;
 if($30){label=8;break;}else{var $33=$29;label=9;break;}
 case 8: 
 HEAP32[(($28)>>2)]=$path_below;
 var $33=$path_below;label=9;break;
 case 9: 
 var $33;
 var $34=(($info+48)|0);
 var $35=HEAP32[(($34)>>2)];
 var $36=($35|0)==1;
 var $37=($33|0)==1;
 var $or_cond1_i=$36&$37;
 if($or_cond1_i){label=10;break;}else{label=13;break;}
 case 10: 
 var $39=(($info+54)|0);
 HEAP8[($39)]=1;
 label=13;break;
 case 11: 
 var $41=(($info+36)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=((($42)+(1))|0);
 HEAP32[(($41)>>2)]=$43;
 var $44=(($info+54)|0);
 HEAP8[($44)]=1;
 label=13;break;
 case 12: 
 var $46=(($this+8)|0);
 var $47=HEAP32[(($46)>>2)];
 var $48=$47;
 var $49=HEAP32[(($48)>>2)];
 var $50=(($49+20)|0);
 var $51=HEAP32[(($50)>>2)];
 FUNCTION_TABLE[$51]($47,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp);
 label=13;break;
 case 13: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNK10__cxxabiv117__class_type_info16search_above_dstEPNS_19__dynamic_cast_infoEPKvS4_ib($this,$info,$dst_ptr,$current_ptr,$path_below,$use_strcmp){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($info+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==($this|0);
 if($3){label=2;break;}else{label=12;break;}
 case 2: 
 var $5=(($info+53)|0);
 HEAP8[($5)]=1;
 var $6=(($info+4)|0);
 var $7=HEAP32[(($6)>>2)];
 var $8=($7|0)==($current_ptr|0);
 if($8){label=3;break;}else{label=12;break;}
 case 3: 
 var $10=(($info+52)|0);
 HEAP8[($10)]=1;
 var $11=(($info+16)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($12|0)==0;
 if($13){label=4;break;}else{label=6;break;}
 case 4: 
 HEAP32[(($11)>>2)]=$dst_ptr;
 var $15=(($info+24)|0);
 HEAP32[(($15)>>2)]=$path_below;
 var $16=(($info+36)|0);
 HEAP32[(($16)>>2)]=1;
 var $17=(($info+48)|0);
 var $18=HEAP32[(($17)>>2)];
 var $19=($18|0)==1;
 var $20=($path_below|0)==1;
 var $or_cond_i=$19&$20;
 if($or_cond_i){label=5;break;}else{label=12;break;}
 case 5: 
 var $22=(($info+54)|0);
 HEAP8[($22)]=1;
 label=12;break;
 case 6: 
 var $24=($12|0)==($dst_ptr|0);
 if($24){label=7;break;}else{label=11;break;}
 case 7: 
 var $26=(($info+24)|0);
 var $27=HEAP32[(($26)>>2)];
 var $28=($27|0)==2;
 if($28){label=8;break;}else{var $31=$27;label=9;break;}
 case 8: 
 HEAP32[(($26)>>2)]=$path_below;
 var $31=$path_below;label=9;break;
 case 9: 
 var $31;
 var $32=(($info+48)|0);
 var $33=HEAP32[(($32)>>2)];
 var $34=($33|0)==1;
 var $35=($31|0)==1;
 var $or_cond1_i=$34&$35;
 if($or_cond1_i){label=10;break;}else{label=12;break;}
 case 10: 
 var $37=(($info+54)|0);
 HEAP8[($37)]=1;
 label=12;break;
 case 11: 
 var $39=(($info+36)|0);
 var $40=HEAP32[(($39)>>2)];
 var $41=((($40)+(1))|0);
 HEAP32[(($39)>>2)]=$41;
 var $42=(($info+54)|0);
 HEAP8[($42)]=1;
 label=12;break;
 case 12: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function _malloc($bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($bytes>>>0)<245;
 if($1){label=2;break;}else{label=78;break;}
 case 2: 
 var $3=($bytes>>>0)<11;
 if($3){var $8=16;label=4;break;}else{label=3;break;}
 case 3: 
 var $5=((($bytes)+(11))|0);
 var $6=$5&-8;
 var $8=$6;label=4;break;
 case 4: 
 var $8;
 var $9=$8>>>3;
 var $10=HEAP32[((15152)>>2)];
 var $11=$10>>>($9>>>0);
 var $12=$11&3;
 var $13=($12|0)==0;
 if($13){label=12;break;}else{label=5;break;}
 case 5: 
 var $15=$11&1;
 var $16=$15^1;
 var $17=((($16)+($9))|0);
 var $18=$17<<1;
 var $19=((15192+($18<<2))|0);
 var $20=$19;
 var $_sum11=((($18)+(2))|0);
 var $21=((15192+($_sum11<<2))|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=(($22+8)|0);
 var $24=HEAP32[(($23)>>2)];
 var $25=($20|0)==($24|0);
 if($25){label=6;break;}else{label=7;break;}
 case 6: 
 var $27=1<<$17;
 var $28=$27^-1;
 var $29=$10&$28;
 HEAP32[((15152)>>2)]=$29;
 label=11;break;
 case 7: 
 var $31=$24;
 var $32=HEAP32[((15168)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=10;break;}else{label=8;break;}
 case 8: 
 var $35=(($24+12)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=($36|0)==($22|0);
 if($37){label=9;break;}else{label=10;break;}
 case 9: 
 HEAP32[(($35)>>2)]=$20;
 HEAP32[(($21)>>2)]=$24;
 label=11;break;
 case 10: 
 _abort();
 throw "Reached an unreachable!";
 case 11: 
 var $40=$17<<3;
 var $41=$40|3;
 var $42=(($22+4)|0);
 HEAP32[(($42)>>2)]=$41;
 var $43=$22;
 var $_sum1314=$40|4;
 var $44=(($43+$_sum1314)|0);
 var $45=$44;
 var $46=HEAP32[(($45)>>2)];
 var $47=$46|1;
 HEAP32[(($45)>>2)]=$47;
 var $48=$23;
 var $mem_0=$48;label=344;break;
 case 12: 
 var $50=HEAP32[((15160)>>2)];
 var $51=($8>>>0)>($50>>>0);
 if($51){label=13;break;}else{var $nb_0=$8;label=161;break;}
 case 13: 
 var $53=($11|0)==0;
 if($53){label=27;break;}else{label=14;break;}
 case 14: 
 var $55=$11<<$9;
 var $56=2<<$9;
 var $57=(((-$56))|0);
 var $58=$56|$57;
 var $59=$55&$58;
 var $60=(((-$59))|0);
 var $61=$59&$60;
 var $62=((($61)-(1))|0);
 var $63=$62>>>12;
 var $64=$63&16;
 var $65=$62>>>($64>>>0);
 var $66=$65>>>5;
 var $67=$66&8;
 var $68=$67|$64;
 var $69=$65>>>($67>>>0);
 var $70=$69>>>2;
 var $71=$70&4;
 var $72=$68|$71;
 var $73=$69>>>($71>>>0);
 var $74=$73>>>1;
 var $75=$74&2;
 var $76=$72|$75;
 var $77=$73>>>($75>>>0);
 var $78=$77>>>1;
 var $79=$78&1;
 var $80=$76|$79;
 var $81=$77>>>($79>>>0);
 var $82=((($80)+($81))|0);
 var $83=$82<<1;
 var $84=((15192+($83<<2))|0);
 var $85=$84;
 var $_sum4=((($83)+(2))|0);
 var $86=((15192+($_sum4<<2))|0);
 var $87=HEAP32[(($86)>>2)];
 var $88=(($87+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($85|0)==($89|0);
 if($90){label=15;break;}else{label=16;break;}
 case 15: 
 var $92=1<<$82;
 var $93=$92^-1;
 var $94=$10&$93;
 HEAP32[((15152)>>2)]=$94;
 label=20;break;
 case 16: 
 var $96=$89;
 var $97=HEAP32[((15168)>>2)];
 var $98=($96>>>0)<($97>>>0);
 if($98){label=19;break;}else{label=17;break;}
 case 17: 
 var $100=(($89+12)|0);
 var $101=HEAP32[(($100)>>2)];
 var $102=($101|0)==($87|0);
 if($102){label=18;break;}else{label=19;break;}
 case 18: 
 HEAP32[(($100)>>2)]=$85;
 HEAP32[(($86)>>2)]=$89;
 label=20;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 var $105=$82<<3;
 var $106=((($105)-($8))|0);
 var $107=$8|3;
 var $108=(($87+4)|0);
 HEAP32[(($108)>>2)]=$107;
 var $109=$87;
 var $110=(($109+$8)|0);
 var $111=$110;
 var $112=$106|1;
 var $_sum67=$8|4;
 var $113=(($109+$_sum67)|0);
 var $114=$113;
 HEAP32[(($114)>>2)]=$112;
 var $115=(($109+$105)|0);
 var $116=$115;
 HEAP32[(($116)>>2)]=$106;
 var $117=HEAP32[((15160)>>2)];
 var $118=($117|0)==0;
 if($118){label=26;break;}else{label=21;break;}
 case 21: 
 var $120=HEAP32[((15172)>>2)];
 var $121=$117>>>3;
 var $122=$121<<1;
 var $123=((15192+($122<<2))|0);
 var $124=$123;
 var $125=HEAP32[((15152)>>2)];
 var $126=1<<$121;
 var $127=$125&$126;
 var $128=($127|0)==0;
 if($128){label=22;break;}else{label=23;break;}
 case 22: 
 var $130=$125|$126;
 HEAP32[((15152)>>2)]=$130;
 var $_sum9_pre=((($122)+(2))|0);
 var $_pre=((15192+($_sum9_pre<<2))|0);
 var $F4_0=$124;var $_pre_phi=$_pre;label=25;break;
 case 23: 
 var $_sum10=((($122)+(2))|0);
 var $132=((15192+($_sum10<<2))|0);
 var $133=HEAP32[(($132)>>2)];
 var $134=$133;
 var $135=HEAP32[((15168)>>2)];
 var $136=($134>>>0)<($135>>>0);
 if($136){label=24;break;}else{var $F4_0=$133;var $_pre_phi=$132;label=25;break;}
 case 24: 
 _abort();
 throw "Reached an unreachable!";
 case 25: 
 var $_pre_phi;
 var $F4_0;
 HEAP32[(($_pre_phi)>>2)]=$120;
 var $139=(($F4_0+12)|0);
 HEAP32[(($139)>>2)]=$120;
 var $140=(($120+8)|0);
 HEAP32[(($140)>>2)]=$F4_0;
 var $141=(($120+12)|0);
 HEAP32[(($141)>>2)]=$124;
 label=26;break;
 case 26: 
 HEAP32[((15160)>>2)]=$106;
 HEAP32[((15172)>>2)]=$111;
 var $143=$88;
 var $mem_0=$143;label=344;break;
 case 27: 
 var $145=HEAP32[((15156)>>2)];
 var $146=($145|0)==0;
 if($146){var $nb_0=$8;label=161;break;}else{label=28;break;}
 case 28: 
 var $148=(((-$145))|0);
 var $149=$145&$148;
 var $150=((($149)-(1))|0);
 var $151=$150>>>12;
 var $152=$151&16;
 var $153=$150>>>($152>>>0);
 var $154=$153>>>5;
 var $155=$154&8;
 var $156=$155|$152;
 var $157=$153>>>($155>>>0);
 var $158=$157>>>2;
 var $159=$158&4;
 var $160=$156|$159;
 var $161=$157>>>($159>>>0);
 var $162=$161>>>1;
 var $163=$162&2;
 var $164=$160|$163;
 var $165=$161>>>($163>>>0);
 var $166=$165>>>1;
 var $167=$166&1;
 var $168=$164|$167;
 var $169=$165>>>($167>>>0);
 var $170=((($168)+($169))|0);
 var $171=((15456+($170<<2))|0);
 var $172=HEAP32[(($171)>>2)];
 var $173=(($172+4)|0);
 var $174=HEAP32[(($173)>>2)];
 var $175=$174&-8;
 var $176=((($175)-($8))|0);
 var $t_0_i=$172;var $v_0_i=$172;var $rsize_0_i=$176;label=29;break;
 case 29: 
 var $rsize_0_i;
 var $v_0_i;
 var $t_0_i;
 var $178=(($t_0_i+16)|0);
 var $179=HEAP32[(($178)>>2)];
 var $180=($179|0)==0;
 if($180){label=30;break;}else{var $185=$179;label=31;break;}
 case 30: 
 var $182=(($t_0_i+20)|0);
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=32;break;}else{var $185=$183;label=31;break;}
 case 31: 
 var $185;
 var $186=(($185+4)|0);
 var $187=HEAP32[(($186)>>2)];
 var $188=$187&-8;
 var $189=((($188)-($8))|0);
 var $190=($189>>>0)<($rsize_0_i>>>0);
 var $_rsize_0_i=($190?$189:$rsize_0_i);
 var $_v_0_i=($190?$185:$v_0_i);
 var $t_0_i=$185;var $v_0_i=$_v_0_i;var $rsize_0_i=$_rsize_0_i;label=29;break;
 case 32: 
 var $192=$v_0_i;
 var $193=HEAP32[((15168)>>2)];
 var $194=($192>>>0)<($193>>>0);
 if($194){label=76;break;}else{label=33;break;}
 case 33: 
 var $196=(($192+$8)|0);
 var $197=$196;
 var $198=($192>>>0)<($196>>>0);
 if($198){label=34;break;}else{label=76;break;}
 case 34: 
 var $200=(($v_0_i+24)|0);
 var $201=HEAP32[(($200)>>2)];
 var $202=(($v_0_i+12)|0);
 var $203=HEAP32[(($202)>>2)];
 var $204=($203|0)==($v_0_i|0);
 if($204){label=40;break;}else{label=35;break;}
 case 35: 
 var $206=(($v_0_i+8)|0);
 var $207=HEAP32[(($206)>>2)];
 var $208=$207;
 var $209=($208>>>0)<($193>>>0);
 if($209){label=39;break;}else{label=36;break;}
 case 36: 
 var $211=(($207+12)|0);
 var $212=HEAP32[(($211)>>2)];
 var $213=($212|0)==($v_0_i|0);
 if($213){label=37;break;}else{label=39;break;}
 case 37: 
 var $215=(($203+8)|0);
 var $216=HEAP32[(($215)>>2)];
 var $217=($216|0)==($v_0_i|0);
 if($217){label=38;break;}else{label=39;break;}
 case 38: 
 HEAP32[(($211)>>2)]=$203;
 HEAP32[(($215)>>2)]=$207;
 var $R_1_i=$203;label=47;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $220=(($v_0_i+20)|0);
 var $221=HEAP32[(($220)>>2)];
 var $222=($221|0)==0;
 if($222){label=41;break;}else{var $R_0_i=$221;var $RP_0_i=$220;label=42;break;}
 case 41: 
 var $224=(($v_0_i+16)|0);
 var $225=HEAP32[(($224)>>2)];
 var $226=($225|0)==0;
 if($226){var $R_1_i=0;label=47;break;}else{var $R_0_i=$225;var $RP_0_i=$224;label=42;break;}
 case 42: 
 var $RP_0_i;
 var $R_0_i;
 var $227=(($R_0_i+20)|0);
 var $228=HEAP32[(($227)>>2)];
 var $229=($228|0)==0;
 if($229){label=43;break;}else{var $R_0_i=$228;var $RP_0_i=$227;label=42;break;}
 case 43: 
 var $231=(($R_0_i+16)|0);
 var $232=HEAP32[(($231)>>2)];
 var $233=($232|0)==0;
 if($233){label=44;break;}else{var $R_0_i=$232;var $RP_0_i=$231;label=42;break;}
 case 44: 
 var $235=$RP_0_i;
 var $236=($235>>>0)<($193>>>0);
 if($236){label=46;break;}else{label=45;break;}
 case 45: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=47;break;
 case 46: 
 _abort();
 throw "Reached an unreachable!";
 case 47: 
 var $R_1_i;
 var $240=($201|0)==0;
 if($240){label=67;break;}else{label=48;break;}
 case 48: 
 var $242=(($v_0_i+28)|0);
 var $243=HEAP32[(($242)>>2)];
 var $244=((15456+($243<<2))|0);
 var $245=HEAP32[(($244)>>2)];
 var $246=($v_0_i|0)==($245|0);
 if($246){label=49;break;}else{label=51;break;}
 case 49: 
 HEAP32[(($244)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=50;break;}else{label=57;break;}
 case 50: 
 var $248=1<<$243;
 var $249=$248^-1;
 var $250=HEAP32[((15156)>>2)];
 var $251=$250&$249;
 HEAP32[((15156)>>2)]=$251;
 label=67;break;
 case 51: 
 var $253=$201;
 var $254=HEAP32[((15168)>>2)];
 var $255=($253>>>0)<($254>>>0);
 if($255){label=55;break;}else{label=52;break;}
 case 52: 
 var $257=(($201+16)|0);
 var $258=HEAP32[(($257)>>2)];
 var $259=($258|0)==($v_0_i|0);
 if($259){label=53;break;}else{label=54;break;}
 case 53: 
 HEAP32[(($257)>>2)]=$R_1_i;
 label=56;break;
 case 54: 
 var $262=(($201+20)|0);
 HEAP32[(($262)>>2)]=$R_1_i;
 label=56;break;
 case 55: 
 _abort();
 throw "Reached an unreachable!";
 case 56: 
 var $265=($R_1_i|0)==0;
 if($265){label=67;break;}else{label=57;break;}
 case 57: 
 var $267=$R_1_i;
 var $268=HEAP32[((15168)>>2)];
 var $269=($267>>>0)<($268>>>0);
 if($269){label=66;break;}else{label=58;break;}
 case 58: 
 var $271=(($R_1_i+24)|0);
 HEAP32[(($271)>>2)]=$201;
 var $272=(($v_0_i+16)|0);
 var $273=HEAP32[(($272)>>2)];
 var $274=($273|0)==0;
 if($274){label=62;break;}else{label=59;break;}
 case 59: 
 var $276=$273;
 var $277=HEAP32[((15168)>>2)];
 var $278=($276>>>0)<($277>>>0);
 if($278){label=61;break;}else{label=60;break;}
 case 60: 
 var $280=(($R_1_i+16)|0);
 HEAP32[(($280)>>2)]=$273;
 var $281=(($273+24)|0);
 HEAP32[(($281)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $284=(($v_0_i+20)|0);
 var $285=HEAP32[(($284)>>2)];
 var $286=($285|0)==0;
 if($286){label=67;break;}else{label=63;break;}
 case 63: 
 var $288=$285;
 var $289=HEAP32[((15168)>>2)];
 var $290=($288>>>0)<($289>>>0);
 if($290){label=65;break;}else{label=64;break;}
 case 64: 
 var $292=(($R_1_i+20)|0);
 HEAP32[(($292)>>2)]=$285;
 var $293=(($285+24)|0);
 HEAP32[(($293)>>2)]=$R_1_i;
 label=67;break;
 case 65: 
 _abort();
 throw "Reached an unreachable!";
 case 66: 
 _abort();
 throw "Reached an unreachable!";
 case 67: 
 var $297=($rsize_0_i>>>0)<16;
 if($297){label=68;break;}else{label=69;break;}
 case 68: 
 var $299=((($rsize_0_i)+($8))|0);
 var $300=$299|3;
 var $301=(($v_0_i+4)|0);
 HEAP32[(($301)>>2)]=$300;
 var $_sum4_i=((($299)+(4))|0);
 var $302=(($192+$_sum4_i)|0);
 var $303=$302;
 var $304=HEAP32[(($303)>>2)];
 var $305=$304|1;
 HEAP32[(($303)>>2)]=$305;
 label=77;break;
 case 69: 
 var $307=$8|3;
 var $308=(($v_0_i+4)|0);
 HEAP32[(($308)>>2)]=$307;
 var $309=$rsize_0_i|1;
 var $_sum_i37=$8|4;
 var $310=(($192+$_sum_i37)|0);
 var $311=$310;
 HEAP32[(($311)>>2)]=$309;
 var $_sum1_i=((($rsize_0_i)+($8))|0);
 var $312=(($192+$_sum1_i)|0);
 var $313=$312;
 HEAP32[(($313)>>2)]=$rsize_0_i;
 var $314=HEAP32[((15160)>>2)];
 var $315=($314|0)==0;
 if($315){label=75;break;}else{label=70;break;}
 case 70: 
 var $317=HEAP32[((15172)>>2)];
 var $318=$314>>>3;
 var $319=$318<<1;
 var $320=((15192+($319<<2))|0);
 var $321=$320;
 var $322=HEAP32[((15152)>>2)];
 var $323=1<<$318;
 var $324=$322&$323;
 var $325=($324|0)==0;
 if($325){label=71;break;}else{label=72;break;}
 case 71: 
 var $327=$322|$323;
 HEAP32[((15152)>>2)]=$327;
 var $_sum2_pre_i=((($319)+(2))|0);
 var $_pre_i=((15192+($_sum2_pre_i<<2))|0);
 var $F1_0_i=$321;var $_pre_phi_i=$_pre_i;label=74;break;
 case 72: 
 var $_sum3_i=((($319)+(2))|0);
 var $329=((15192+($_sum3_i<<2))|0);
 var $330=HEAP32[(($329)>>2)];
 var $331=$330;
 var $332=HEAP32[((15168)>>2)];
 var $333=($331>>>0)<($332>>>0);
 if($333){label=73;break;}else{var $F1_0_i=$330;var $_pre_phi_i=$329;label=74;break;}
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $_pre_phi_i;
 var $F1_0_i;
 HEAP32[(($_pre_phi_i)>>2)]=$317;
 var $336=(($F1_0_i+12)|0);
 HEAP32[(($336)>>2)]=$317;
 var $337=(($317+8)|0);
 HEAP32[(($337)>>2)]=$F1_0_i;
 var $338=(($317+12)|0);
 HEAP32[(($338)>>2)]=$321;
 label=75;break;
 case 75: 
 HEAP32[((15160)>>2)]=$rsize_0_i;
 HEAP32[((15172)>>2)]=$197;
 label=77;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $341=(($v_0_i+8)|0);
 var $342=$341;
 var $mem_0=$342;label=344;break;
 case 78: 
 var $344=($bytes>>>0)>4294967231;
 if($344){var $nb_0=-1;label=161;break;}else{label=79;break;}
 case 79: 
 var $346=((($bytes)+(11))|0);
 var $347=$346&-8;
 var $348=HEAP32[((15156)>>2)];
 var $349=($348|0)==0;
 if($349){var $nb_0=$347;label=161;break;}else{label=80;break;}
 case 80: 
 var $351=(((-$347))|0);
 var $352=$346>>>8;
 var $353=($352|0)==0;
 if($353){var $idx_0_i=0;label=83;break;}else{label=81;break;}
 case 81: 
 var $355=($347>>>0)>16777215;
 if($355){var $idx_0_i=31;label=83;break;}else{label=82;break;}
 case 82: 
 var $357=((($352)+(1048320))|0);
 var $358=$357>>>16;
 var $359=$358&8;
 var $360=$352<<$359;
 var $361=((($360)+(520192))|0);
 var $362=$361>>>16;
 var $363=$362&4;
 var $364=$363|$359;
 var $365=$360<<$363;
 var $366=((($365)+(245760))|0);
 var $367=$366>>>16;
 var $368=$367&2;
 var $369=$364|$368;
 var $370=(((14)-($369))|0);
 var $371=$365<<$368;
 var $372=$371>>>15;
 var $373=((($370)+($372))|0);
 var $374=$373<<1;
 var $375=((($373)+(7))|0);
 var $376=$347>>>($375>>>0);
 var $377=$376&1;
 var $378=$377|$374;
 var $idx_0_i=$378;label=83;break;
 case 83: 
 var $idx_0_i;
 var $380=((15456+($idx_0_i<<2))|0);
 var $381=HEAP32[(($380)>>2)];
 var $382=($381|0)==0;
 if($382){var $v_2_i=0;var $rsize_2_i=$351;var $t_1_i=0;label=90;break;}else{label=84;break;}
 case 84: 
 var $384=($idx_0_i|0)==31;
 if($384){var $389=0;label=86;break;}else{label=85;break;}
 case 85: 
 var $386=$idx_0_i>>>1;
 var $387=(((25)-($386))|0);
 var $389=$387;label=86;break;
 case 86: 
 var $389;
 var $390=$347<<$389;
 var $v_0_i18=0;var $rsize_0_i17=$351;var $t_0_i16=$381;var $sizebits_0_i=$390;var $rst_0_i=0;label=87;break;
 case 87: 
 var $rst_0_i;
 var $sizebits_0_i;
 var $t_0_i16;
 var $rsize_0_i17;
 var $v_0_i18;
 var $392=(($t_0_i16+4)|0);
 var $393=HEAP32[(($392)>>2)];
 var $394=$393&-8;
 var $395=((($394)-($347))|0);
 var $396=($395>>>0)<($rsize_0_i17>>>0);
 if($396){label=88;break;}else{var $v_1_i=$v_0_i18;var $rsize_1_i=$rsize_0_i17;label=89;break;}
 case 88: 
 var $398=($394|0)==($347|0);
 if($398){var $v_2_i=$t_0_i16;var $rsize_2_i=$395;var $t_1_i=$t_0_i16;label=90;break;}else{var $v_1_i=$t_0_i16;var $rsize_1_i=$395;label=89;break;}
 case 89: 
 var $rsize_1_i;
 var $v_1_i;
 var $400=(($t_0_i16+20)|0);
 var $401=HEAP32[(($400)>>2)];
 var $402=$sizebits_0_i>>>31;
 var $403=(($t_0_i16+16+($402<<2))|0);
 var $404=HEAP32[(($403)>>2)];
 var $405=($401|0)==0;
 var $406=($401|0)==($404|0);
 var $or_cond_i=$405|$406;
 var $rst_1_i=($or_cond_i?$rst_0_i:$401);
 var $407=($404|0)==0;
 var $408=$sizebits_0_i<<1;
 if($407){var $v_2_i=$v_1_i;var $rsize_2_i=$rsize_1_i;var $t_1_i=$rst_1_i;label=90;break;}else{var $v_0_i18=$v_1_i;var $rsize_0_i17=$rsize_1_i;var $t_0_i16=$404;var $sizebits_0_i=$408;var $rst_0_i=$rst_1_i;label=87;break;}
 case 90: 
 var $t_1_i;
 var $rsize_2_i;
 var $v_2_i;
 var $409=($t_1_i|0)==0;
 var $410=($v_2_i|0)==0;
 var $or_cond21_i=$409&$410;
 if($or_cond21_i){label=91;break;}else{var $t_2_ph_i=$t_1_i;label=93;break;}
 case 91: 
 var $412=2<<$idx_0_i;
 var $413=(((-$412))|0);
 var $414=$412|$413;
 var $415=$348&$414;
 var $416=($415|0)==0;
 if($416){var $nb_0=$347;label=161;break;}else{label=92;break;}
 case 92: 
 var $418=(((-$415))|0);
 var $419=$415&$418;
 var $420=((($419)-(1))|0);
 var $421=$420>>>12;
 var $422=$421&16;
 var $423=$420>>>($422>>>0);
 var $424=$423>>>5;
 var $425=$424&8;
 var $426=$425|$422;
 var $427=$423>>>($425>>>0);
 var $428=$427>>>2;
 var $429=$428&4;
 var $430=$426|$429;
 var $431=$427>>>($429>>>0);
 var $432=$431>>>1;
 var $433=$432&2;
 var $434=$430|$433;
 var $435=$431>>>($433>>>0);
 var $436=$435>>>1;
 var $437=$436&1;
 var $438=$434|$437;
 var $439=$435>>>($437>>>0);
 var $440=((($438)+($439))|0);
 var $441=((15456+($440<<2))|0);
 var $442=HEAP32[(($441)>>2)];
 var $t_2_ph_i=$442;label=93;break;
 case 93: 
 var $t_2_ph_i;
 var $443=($t_2_ph_i|0)==0;
 if($443){var $rsize_3_lcssa_i=$rsize_2_i;var $v_3_lcssa_i=$v_2_i;label=96;break;}else{var $t_230_i=$t_2_ph_i;var $rsize_331_i=$rsize_2_i;var $v_332_i=$v_2_i;label=94;break;}
 case 94: 
 var $v_332_i;
 var $rsize_331_i;
 var $t_230_i;
 var $444=(($t_230_i+4)|0);
 var $445=HEAP32[(($444)>>2)];
 var $446=$445&-8;
 var $447=((($446)-($347))|0);
 var $448=($447>>>0)<($rsize_331_i>>>0);
 var $_rsize_3_i=($448?$447:$rsize_331_i);
 var $t_2_v_3_i=($448?$t_230_i:$v_332_i);
 var $449=(($t_230_i+16)|0);
 var $450=HEAP32[(($449)>>2)];
 var $451=($450|0)==0;
 if($451){label=95;break;}else{var $t_230_i=$450;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 95: 
 var $452=(($t_230_i+20)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=($453|0)==0;
 if($454){var $rsize_3_lcssa_i=$_rsize_3_i;var $v_3_lcssa_i=$t_2_v_3_i;label=96;break;}else{var $t_230_i=$453;var $rsize_331_i=$_rsize_3_i;var $v_332_i=$t_2_v_3_i;label=94;break;}
 case 96: 
 var $v_3_lcssa_i;
 var $rsize_3_lcssa_i;
 var $455=($v_3_lcssa_i|0)==0;
 if($455){var $nb_0=$347;label=161;break;}else{label=97;break;}
 case 97: 
 var $457=HEAP32[((15160)>>2)];
 var $458=((($457)-($347))|0);
 var $459=($rsize_3_lcssa_i>>>0)<($458>>>0);
 if($459){label=98;break;}else{var $nb_0=$347;label=161;break;}
 case 98: 
 var $461=$v_3_lcssa_i;
 var $462=HEAP32[((15168)>>2)];
 var $463=($461>>>0)<($462>>>0);
 if($463){label=159;break;}else{label=99;break;}
 case 99: 
 var $465=(($461+$347)|0);
 var $466=$465;
 var $467=($461>>>0)<($465>>>0);
 if($467){label=100;break;}else{label=159;break;}
 case 100: 
 var $469=(($v_3_lcssa_i+24)|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=(($v_3_lcssa_i+12)|0);
 var $472=HEAP32[(($471)>>2)];
 var $473=($472|0)==($v_3_lcssa_i|0);
 if($473){label=106;break;}else{label=101;break;}
 case 101: 
 var $475=(($v_3_lcssa_i+8)|0);
 var $476=HEAP32[(($475)>>2)];
 var $477=$476;
 var $478=($477>>>0)<($462>>>0);
 if($478){label=105;break;}else{label=102;break;}
 case 102: 
 var $480=(($476+12)|0);
 var $481=HEAP32[(($480)>>2)];
 var $482=($481|0)==($v_3_lcssa_i|0);
 if($482){label=103;break;}else{label=105;break;}
 case 103: 
 var $484=(($472+8)|0);
 var $485=HEAP32[(($484)>>2)];
 var $486=($485|0)==($v_3_lcssa_i|0);
 if($486){label=104;break;}else{label=105;break;}
 case 104: 
 HEAP32[(($480)>>2)]=$472;
 HEAP32[(($484)>>2)]=$476;
 var $R_1_i22=$472;label=113;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 var $489=(($v_3_lcssa_i+20)|0);
 var $490=HEAP32[(($489)>>2)];
 var $491=($490|0)==0;
 if($491){label=107;break;}else{var $R_0_i20=$490;var $RP_0_i19=$489;label=108;break;}
 case 107: 
 var $493=(($v_3_lcssa_i+16)|0);
 var $494=HEAP32[(($493)>>2)];
 var $495=($494|0)==0;
 if($495){var $R_1_i22=0;label=113;break;}else{var $R_0_i20=$494;var $RP_0_i19=$493;label=108;break;}
 case 108: 
 var $RP_0_i19;
 var $R_0_i20;
 var $496=(($R_0_i20+20)|0);
 var $497=HEAP32[(($496)>>2)];
 var $498=($497|0)==0;
 if($498){label=109;break;}else{var $R_0_i20=$497;var $RP_0_i19=$496;label=108;break;}
 case 109: 
 var $500=(($R_0_i20+16)|0);
 var $501=HEAP32[(($500)>>2)];
 var $502=($501|0)==0;
 if($502){label=110;break;}else{var $R_0_i20=$501;var $RP_0_i19=$500;label=108;break;}
 case 110: 
 var $504=$RP_0_i19;
 var $505=($504>>>0)<($462>>>0);
 if($505){label=112;break;}else{label=111;break;}
 case 111: 
 HEAP32[(($RP_0_i19)>>2)]=0;
 var $R_1_i22=$R_0_i20;label=113;break;
 case 112: 
 _abort();
 throw "Reached an unreachable!";
 case 113: 
 var $R_1_i22;
 var $509=($470|0)==0;
 if($509){label=133;break;}else{label=114;break;}
 case 114: 
 var $511=(($v_3_lcssa_i+28)|0);
 var $512=HEAP32[(($511)>>2)];
 var $513=((15456+($512<<2))|0);
 var $514=HEAP32[(($513)>>2)];
 var $515=($v_3_lcssa_i|0)==($514|0);
 if($515){label=115;break;}else{label=117;break;}
 case 115: 
 HEAP32[(($513)>>2)]=$R_1_i22;
 var $cond_i23=($R_1_i22|0)==0;
 if($cond_i23){label=116;break;}else{label=123;break;}
 case 116: 
 var $517=1<<$512;
 var $518=$517^-1;
 var $519=HEAP32[((15156)>>2)];
 var $520=$519&$518;
 HEAP32[((15156)>>2)]=$520;
 label=133;break;
 case 117: 
 var $522=$470;
 var $523=HEAP32[((15168)>>2)];
 var $524=($522>>>0)<($523>>>0);
 if($524){label=121;break;}else{label=118;break;}
 case 118: 
 var $526=(($470+16)|0);
 var $527=HEAP32[(($526)>>2)];
 var $528=($527|0)==($v_3_lcssa_i|0);
 if($528){label=119;break;}else{label=120;break;}
 case 119: 
 HEAP32[(($526)>>2)]=$R_1_i22;
 label=122;break;
 case 120: 
 var $531=(($470+20)|0);
 HEAP32[(($531)>>2)]=$R_1_i22;
 label=122;break;
 case 121: 
 _abort();
 throw "Reached an unreachable!";
 case 122: 
 var $534=($R_1_i22|0)==0;
 if($534){label=133;break;}else{label=123;break;}
 case 123: 
 var $536=$R_1_i22;
 var $537=HEAP32[((15168)>>2)];
 var $538=($536>>>0)<($537>>>0);
 if($538){label=132;break;}else{label=124;break;}
 case 124: 
 var $540=(($R_1_i22+24)|0);
 HEAP32[(($540)>>2)]=$470;
 var $541=(($v_3_lcssa_i+16)|0);
 var $542=HEAP32[(($541)>>2)];
 var $543=($542|0)==0;
 if($543){label=128;break;}else{label=125;break;}
 case 125: 
 var $545=$542;
 var $546=HEAP32[((15168)>>2)];
 var $547=($545>>>0)<($546>>>0);
 if($547){label=127;break;}else{label=126;break;}
 case 126: 
 var $549=(($R_1_i22+16)|0);
 HEAP32[(($549)>>2)]=$542;
 var $550=(($542+24)|0);
 HEAP32[(($550)>>2)]=$R_1_i22;
 label=128;break;
 case 127: 
 _abort();
 throw "Reached an unreachable!";
 case 128: 
 var $553=(($v_3_lcssa_i+20)|0);
 var $554=HEAP32[(($553)>>2)];
 var $555=($554|0)==0;
 if($555){label=133;break;}else{label=129;break;}
 case 129: 
 var $557=$554;
 var $558=HEAP32[((15168)>>2)];
 var $559=($557>>>0)<($558>>>0);
 if($559){label=131;break;}else{label=130;break;}
 case 130: 
 var $561=(($R_1_i22+20)|0);
 HEAP32[(($561)>>2)]=$554;
 var $562=(($554+24)|0);
 HEAP32[(($562)>>2)]=$R_1_i22;
 label=133;break;
 case 131: 
 _abort();
 throw "Reached an unreachable!";
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $566=($rsize_3_lcssa_i>>>0)<16;
 if($566){label=134;break;}else{label=135;break;}
 case 134: 
 var $568=((($rsize_3_lcssa_i)+($347))|0);
 var $569=$568|3;
 var $570=(($v_3_lcssa_i+4)|0);
 HEAP32[(($570)>>2)]=$569;
 var $_sum19_i=((($568)+(4))|0);
 var $571=(($461+$_sum19_i)|0);
 var $572=$571;
 var $573=HEAP32[(($572)>>2)];
 var $574=$573|1;
 HEAP32[(($572)>>2)]=$574;
 label=160;break;
 case 135: 
 var $576=$347|3;
 var $577=(($v_3_lcssa_i+4)|0);
 HEAP32[(($577)>>2)]=$576;
 var $578=$rsize_3_lcssa_i|1;
 var $_sum_i2536=$347|4;
 var $579=(($461+$_sum_i2536)|0);
 var $580=$579;
 HEAP32[(($580)>>2)]=$578;
 var $_sum1_i26=((($rsize_3_lcssa_i)+($347))|0);
 var $581=(($461+$_sum1_i26)|0);
 var $582=$581;
 HEAP32[(($582)>>2)]=$rsize_3_lcssa_i;
 var $583=$rsize_3_lcssa_i>>>3;
 var $584=($rsize_3_lcssa_i>>>0)<256;
 if($584){label=136;break;}else{label=141;break;}
 case 136: 
 var $586=$583<<1;
 var $587=((15192+($586<<2))|0);
 var $588=$587;
 var $589=HEAP32[((15152)>>2)];
 var $590=1<<$583;
 var $591=$589&$590;
 var $592=($591|0)==0;
 if($592){label=137;break;}else{label=138;break;}
 case 137: 
 var $594=$589|$590;
 HEAP32[((15152)>>2)]=$594;
 var $_sum15_pre_i=((($586)+(2))|0);
 var $_pre_i27=((15192+($_sum15_pre_i<<2))|0);
 var $F5_0_i=$588;var $_pre_phi_i28=$_pre_i27;label=140;break;
 case 138: 
 var $_sum18_i=((($586)+(2))|0);
 var $596=((15192+($_sum18_i<<2))|0);
 var $597=HEAP32[(($596)>>2)];
 var $598=$597;
 var $599=HEAP32[((15168)>>2)];
 var $600=($598>>>0)<($599>>>0);
 if($600){label=139;break;}else{var $F5_0_i=$597;var $_pre_phi_i28=$596;label=140;break;}
 case 139: 
 _abort();
 throw "Reached an unreachable!";
 case 140: 
 var $_pre_phi_i28;
 var $F5_0_i;
 HEAP32[(($_pre_phi_i28)>>2)]=$466;
 var $603=(($F5_0_i+12)|0);
 HEAP32[(($603)>>2)]=$466;
 var $_sum16_i=((($347)+(8))|0);
 var $604=(($461+$_sum16_i)|0);
 var $605=$604;
 HEAP32[(($605)>>2)]=$F5_0_i;
 var $_sum17_i=((($347)+(12))|0);
 var $606=(($461+$_sum17_i)|0);
 var $607=$606;
 HEAP32[(($607)>>2)]=$588;
 label=160;break;
 case 141: 
 var $609=$465;
 var $610=$rsize_3_lcssa_i>>>8;
 var $611=($610|0)==0;
 if($611){var $I7_0_i=0;label=144;break;}else{label=142;break;}
 case 142: 
 var $613=($rsize_3_lcssa_i>>>0)>16777215;
 if($613){var $I7_0_i=31;label=144;break;}else{label=143;break;}
 case 143: 
 var $615=((($610)+(1048320))|0);
 var $616=$615>>>16;
 var $617=$616&8;
 var $618=$610<<$617;
 var $619=((($618)+(520192))|0);
 var $620=$619>>>16;
 var $621=$620&4;
 var $622=$621|$617;
 var $623=$618<<$621;
 var $624=((($623)+(245760))|0);
 var $625=$624>>>16;
 var $626=$625&2;
 var $627=$622|$626;
 var $628=(((14)-($627))|0);
 var $629=$623<<$626;
 var $630=$629>>>15;
 var $631=((($628)+($630))|0);
 var $632=$631<<1;
 var $633=((($631)+(7))|0);
 var $634=$rsize_3_lcssa_i>>>($633>>>0);
 var $635=$634&1;
 var $636=$635|$632;
 var $I7_0_i=$636;label=144;break;
 case 144: 
 var $I7_0_i;
 var $638=((15456+($I7_0_i<<2))|0);
 var $_sum2_i=((($347)+(28))|0);
 var $639=(($461+$_sum2_i)|0);
 var $640=$639;
 HEAP32[(($640)>>2)]=$I7_0_i;
 var $_sum3_i29=((($347)+(16))|0);
 var $641=(($461+$_sum3_i29)|0);
 var $_sum4_i30=((($347)+(20))|0);
 var $642=(($461+$_sum4_i30)|0);
 var $643=$642;
 HEAP32[(($643)>>2)]=0;
 var $644=$641;
 HEAP32[(($644)>>2)]=0;
 var $645=HEAP32[((15156)>>2)];
 var $646=1<<$I7_0_i;
 var $647=$645&$646;
 var $648=($647|0)==0;
 if($648){label=145;break;}else{label=146;break;}
 case 145: 
 var $650=$645|$646;
 HEAP32[((15156)>>2)]=$650;
 HEAP32[(($638)>>2)]=$609;
 var $651=$638;
 var $_sum5_i=((($347)+(24))|0);
 var $652=(($461+$_sum5_i)|0);
 var $653=$652;
 HEAP32[(($653)>>2)]=$651;
 var $_sum6_i=((($347)+(12))|0);
 var $654=(($461+$_sum6_i)|0);
 var $655=$654;
 HEAP32[(($655)>>2)]=$609;
 var $_sum7_i=((($347)+(8))|0);
 var $656=(($461+$_sum7_i)|0);
 var $657=$656;
 HEAP32[(($657)>>2)]=$609;
 label=160;break;
 case 146: 
 var $659=HEAP32[(($638)>>2)];
 var $660=($I7_0_i|0)==31;
 if($660){var $665=0;label=148;break;}else{label=147;break;}
 case 147: 
 var $662=$I7_0_i>>>1;
 var $663=(((25)-($662))|0);
 var $665=$663;label=148;break;
 case 148: 
 var $665;
 var $666=(($659+4)|0);
 var $667=HEAP32[(($666)>>2)];
 var $668=$667&-8;
 var $669=($668|0)==($rsize_3_lcssa_i|0);
 if($669){var $T_0_lcssa_i=$659;label=155;break;}else{label=149;break;}
 case 149: 
 var $670=$rsize_3_lcssa_i<<$665;
 var $T_026_i=$659;var $K12_027_i=$670;label=151;break;
 case 150: 
 var $672=$K12_027_i<<1;
 var $673=(($680+4)|0);
 var $674=HEAP32[(($673)>>2)];
 var $675=$674&-8;
 var $676=($675|0)==($rsize_3_lcssa_i|0);
 if($676){var $T_0_lcssa_i=$680;label=155;break;}else{var $T_026_i=$680;var $K12_027_i=$672;label=151;break;}
 case 151: 
 var $K12_027_i;
 var $T_026_i;
 var $678=$K12_027_i>>>31;
 var $679=(($T_026_i+16+($678<<2))|0);
 var $680=HEAP32[(($679)>>2)];
 var $681=($680|0)==0;
 if($681){label=152;break;}else{label=150;break;}
 case 152: 
 var $683=$679;
 var $684=HEAP32[((15168)>>2)];
 var $685=($683>>>0)<($684>>>0);
 if($685){label=154;break;}else{label=153;break;}
 case 153: 
 HEAP32[(($679)>>2)]=$609;
 var $_sum12_i=((($347)+(24))|0);
 var $687=(($461+$_sum12_i)|0);
 var $688=$687;
 HEAP32[(($688)>>2)]=$T_026_i;
 var $_sum13_i=((($347)+(12))|0);
 var $689=(($461+$_sum13_i)|0);
 var $690=$689;
 HEAP32[(($690)>>2)]=$609;
 var $_sum14_i=((($347)+(8))|0);
 var $691=(($461+$_sum14_i)|0);
 var $692=$691;
 HEAP32[(($692)>>2)]=$609;
 label=160;break;
 case 154: 
 _abort();
 throw "Reached an unreachable!";
 case 155: 
 var $T_0_lcssa_i;
 var $694=(($T_0_lcssa_i+8)|0);
 var $695=HEAP32[(($694)>>2)];
 var $696=$T_0_lcssa_i;
 var $697=HEAP32[((15168)>>2)];
 var $698=($696>>>0)<($697>>>0);
 if($698){label=158;break;}else{label=156;break;}
 case 156: 
 var $700=$695;
 var $701=($700>>>0)<($697>>>0);
 if($701){label=158;break;}else{label=157;break;}
 case 157: 
 var $703=(($695+12)|0);
 HEAP32[(($703)>>2)]=$609;
 HEAP32[(($694)>>2)]=$609;
 var $_sum9_i=((($347)+(8))|0);
 var $704=(($461+$_sum9_i)|0);
 var $705=$704;
 HEAP32[(($705)>>2)]=$695;
 var $_sum10_i=((($347)+(12))|0);
 var $706=(($461+$_sum10_i)|0);
 var $707=$706;
 HEAP32[(($707)>>2)]=$T_0_lcssa_i;
 var $_sum11_i=((($347)+(24))|0);
 var $708=(($461+$_sum11_i)|0);
 var $709=$708;
 HEAP32[(($709)>>2)]=0;
 label=160;break;
 case 158: 
 _abort();
 throw "Reached an unreachable!";
 case 159: 
 _abort();
 throw "Reached an unreachable!";
 case 160: 
 var $711=(($v_3_lcssa_i+8)|0);
 var $712=$711;
 var $mem_0=$712;label=344;break;
 case 161: 
 var $nb_0;
 var $713=HEAP32[((15160)>>2)];
 var $714=($nb_0>>>0)>($713>>>0);
 if($714){label=166;break;}else{label=162;break;}
 case 162: 
 var $716=((($713)-($nb_0))|0);
 var $717=HEAP32[((15172)>>2)];
 var $718=($716>>>0)>15;
 if($718){label=163;break;}else{label=164;break;}
 case 163: 
 var $720=$717;
 var $721=(($720+$nb_0)|0);
 var $722=$721;
 HEAP32[((15172)>>2)]=$722;
 HEAP32[((15160)>>2)]=$716;
 var $723=$716|1;
 var $_sum2=((($nb_0)+(4))|0);
 var $724=(($720+$_sum2)|0);
 var $725=$724;
 HEAP32[(($725)>>2)]=$723;
 var $726=(($720+$713)|0);
 var $727=$726;
 HEAP32[(($727)>>2)]=$716;
 var $728=$nb_0|3;
 var $729=(($717+4)|0);
 HEAP32[(($729)>>2)]=$728;
 label=165;break;
 case 164: 
 HEAP32[((15160)>>2)]=0;
 HEAP32[((15172)>>2)]=0;
 var $731=$713|3;
 var $732=(($717+4)|0);
 HEAP32[(($732)>>2)]=$731;
 var $733=$717;
 var $_sum1=((($713)+(4))|0);
 var $734=(($733+$_sum1)|0);
 var $735=$734;
 var $736=HEAP32[(($735)>>2)];
 var $737=$736|1;
 HEAP32[(($735)>>2)]=$737;
 label=165;break;
 case 165: 
 var $739=(($717+8)|0);
 var $740=$739;
 var $mem_0=$740;label=344;break;
 case 166: 
 var $742=HEAP32[((15164)>>2)];
 var $743=($nb_0>>>0)<($742>>>0);
 if($743){label=167;break;}else{label=168;break;}
 case 167: 
 var $745=((($742)-($nb_0))|0);
 HEAP32[((15164)>>2)]=$745;
 var $746=HEAP32[((15176)>>2)];
 var $747=$746;
 var $748=(($747+$nb_0)|0);
 var $749=$748;
 HEAP32[((15176)>>2)]=$749;
 var $750=$745|1;
 var $_sum=((($nb_0)+(4))|0);
 var $751=(($747+$_sum)|0);
 var $752=$751;
 HEAP32[(($752)>>2)]=$750;
 var $753=$nb_0|3;
 var $754=(($746+4)|0);
 HEAP32[(($754)>>2)]=$753;
 var $755=(($746+8)|0);
 var $756=$755;
 var $mem_0=$756;label=344;break;
 case 168: 
 var $758=HEAP32[((14768)>>2)];
 var $759=($758|0)==0;
 if($759){label=169;break;}else{label=172;break;}
 case 169: 
 var $761=_sysconf(30);
 var $762=((($761)-(1))|0);
 var $763=$762&$761;
 var $764=($763|0)==0;
 if($764){label=171;break;}else{label=170;break;}
 case 170: 
 _abort();
 throw "Reached an unreachable!";
 case 171: 
 HEAP32[((14776)>>2)]=$761;
 HEAP32[((14772)>>2)]=$761;
 HEAP32[((14780)>>2)]=-1;
 HEAP32[((14784)>>2)]=-1;
 HEAP32[((14788)>>2)]=0;
 HEAP32[((15596)>>2)]=0;
 var $766=_time(0);
 var $767=$766&-16;
 var $768=$767^1431655768;
 HEAP32[((14768)>>2)]=$768;
 label=172;break;
 case 172: 
 var $770=((($nb_0)+(48))|0);
 var $771=HEAP32[((14776)>>2)];
 var $772=((($nb_0)+(47))|0);
 var $773=((($771)+($772))|0);
 var $774=(((-$771))|0);
 var $775=$773&$774;
 var $776=($775>>>0)>($nb_0>>>0);
 if($776){label=173;break;}else{var $mem_0=0;label=344;break;}
 case 173: 
 var $778=HEAP32[((15592)>>2)];
 var $779=($778|0)==0;
 if($779){label=175;break;}else{label=174;break;}
 case 174: 
 var $781=HEAP32[((15584)>>2)];
 var $782=((($781)+($775))|0);
 var $783=($782>>>0)<=($781>>>0);
 var $784=($782>>>0)>($778>>>0);
 var $or_cond1_i=$783|$784;
 if($or_cond1_i){var $mem_0=0;label=344;break;}else{label=175;break;}
 case 175: 
 var $786=HEAP32[((15596)>>2)];
 var $787=$786&4;
 var $788=($787|0)==0;
 if($788){label=176;break;}else{var $tsize_1_i=0;label=199;break;}
 case 176: 
 var $790=HEAP32[((15176)>>2)];
 var $791=($790|0)==0;
 if($791){label=182;break;}else{label=177;break;}
 case 177: 
 var $793=$790;
 var $sp_0_i_i=15600;label=178;break;
 case 178: 
 var $sp_0_i_i;
 var $795=(($sp_0_i_i)|0);
 var $796=HEAP32[(($795)>>2)];
 var $797=($796>>>0)>($793>>>0);
 if($797){label=180;break;}else{label=179;break;}
 case 179: 
 var $799=(($sp_0_i_i+4)|0);
 var $800=HEAP32[(($799)>>2)];
 var $801=(($796+$800)|0);
 var $802=($801>>>0)>($793>>>0);
 if($802){label=181;break;}else{label=180;break;}
 case 180: 
 var $804=(($sp_0_i_i+8)|0);
 var $805=HEAP32[(($804)>>2)];
 var $806=($805|0)==0;
 if($806){label=182;break;}else{var $sp_0_i_i=$805;label=178;break;}
 case 181: 
 var $807=($sp_0_i_i|0)==0;
 if($807){label=182;break;}else{label=189;break;}
 case 182: 
 var $808=_sbrk(0);
 var $809=($808|0)==-1;
 if($809){var $tsize_0323841_i=0;label=198;break;}else{label=183;break;}
 case 183: 
 var $811=$808;
 var $812=HEAP32[((14772)>>2)];
 var $813=((($812)-(1))|0);
 var $814=$813&$811;
 var $815=($814|0)==0;
 if($815){var $ssize_0_i=$775;label=185;break;}else{label=184;break;}
 case 184: 
 var $817=((($813)+($811))|0);
 var $818=(((-$812))|0);
 var $819=$817&$818;
 var $820=((($775)-($811))|0);
 var $821=((($820)+($819))|0);
 var $ssize_0_i=$821;label=185;break;
 case 185: 
 var $ssize_0_i;
 var $823=HEAP32[((15584)>>2)];
 var $824=((($823)+($ssize_0_i))|0);
 var $825=($ssize_0_i>>>0)>($nb_0>>>0);
 var $826=($ssize_0_i>>>0)<2147483647;
 var $or_cond_i31=$825&$826;
 if($or_cond_i31){label=186;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 186: 
 var $828=HEAP32[((15592)>>2)];
 var $829=($828|0)==0;
 if($829){label=188;break;}else{label=187;break;}
 case 187: 
 var $831=($824>>>0)<=($823>>>0);
 var $832=($824>>>0)>($828>>>0);
 var $or_cond2_i=$831|$832;
 if($or_cond2_i){var $tsize_0323841_i=0;label=198;break;}else{label=188;break;}
 case 188: 
 var $834=_sbrk($ssize_0_i);
 var $835=($834|0)==($808|0);
 var $ssize_0__i=($835?$ssize_0_i:0);
 var $__i=($835?$808:-1);
 var $tbase_0_i=$__i;var $tsize_0_i=$ssize_0__i;var $br_0_i=$834;var $ssize_1_i=$ssize_0_i;label=191;break;
 case 189: 
 var $837=HEAP32[((15164)>>2)];
 var $838=((($773)-($837))|0);
 var $839=$838&$774;
 var $840=($839>>>0)<2147483647;
 if($840){label=190;break;}else{var $tsize_0323841_i=0;label=198;break;}
 case 190: 
 var $842=_sbrk($839);
 var $843=HEAP32[(($795)>>2)];
 var $844=HEAP32[(($799)>>2)];
 var $845=(($843+$844)|0);
 var $846=($842|0)==($845|0);
 var $_3_i=($846?$839:0);
 var $_4_i=($846?$842:-1);
 var $tbase_0_i=$_4_i;var $tsize_0_i=$_3_i;var $br_0_i=$842;var $ssize_1_i=$839;label=191;break;
 case 191: 
 var $ssize_1_i;
 var $br_0_i;
 var $tsize_0_i;
 var $tbase_0_i;
 var $848=(((-$ssize_1_i))|0);
 var $849=($tbase_0_i|0)==-1;
 if($849){label=192;break;}else{var $tsize_246_i=$tsize_0_i;var $tbase_247_i=$tbase_0_i;label=202;break;}
 case 192: 
 var $851=($br_0_i|0)!=-1;
 var $852=($ssize_1_i>>>0)<2147483647;
 var $or_cond5_i=$851&$852;
 var $853=($ssize_1_i>>>0)<($770>>>0);
 var $or_cond6_i=$or_cond5_i&$853;
 if($or_cond6_i){label=193;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 193: 
 var $855=HEAP32[((14776)>>2)];
 var $856=((($772)-($ssize_1_i))|0);
 var $857=((($856)+($855))|0);
 var $858=(((-$855))|0);
 var $859=$857&$858;
 var $860=($859>>>0)<2147483647;
 if($860){label=194;break;}else{var $ssize_2_i=$ssize_1_i;label=197;break;}
 case 194: 
 var $862=_sbrk($859);
 var $863=($862|0)==-1;
 if($863){label=196;break;}else{label=195;break;}
 case 195: 
 var $865=((($859)+($ssize_1_i))|0);
 var $ssize_2_i=$865;label=197;break;
 case 196: 
 var $867=_sbrk($848);
 var $tsize_0323841_i=$tsize_0_i;label=198;break;
 case 197: 
 var $ssize_2_i;
 var $869=($br_0_i|0)==-1;
 if($869){var $tsize_0323841_i=$tsize_0_i;label=198;break;}else{var $tsize_246_i=$ssize_2_i;var $tbase_247_i=$br_0_i;label=202;break;}
 case 198: 
 var $tsize_0323841_i;
 var $870=HEAP32[((15596)>>2)];
 var $871=$870|4;
 HEAP32[((15596)>>2)]=$871;
 var $tsize_1_i=$tsize_0323841_i;label=199;break;
 case 199: 
 var $tsize_1_i;
 var $873=($775>>>0)<2147483647;
 if($873){label=200;break;}else{label=343;break;}
 case 200: 
 var $875=_sbrk($775);
 var $876=_sbrk(0);
 var $notlhs_i=($875|0)!=-1;
 var $notrhs_i=($876|0)!=-1;
 var $or_cond8_not_i=$notrhs_i&$notlhs_i;
 var $877=($875>>>0)<($876>>>0);
 var $or_cond9_i=$or_cond8_not_i&$877;
 if($or_cond9_i){label=201;break;}else{label=343;break;}
 case 201: 
 var $878=$876;
 var $879=$875;
 var $880=((($878)-($879))|0);
 var $881=((($nb_0)+(40))|0);
 var $882=($880>>>0)>($881>>>0);
 var $_tsize_1_i=($882?$880:$tsize_1_i);
 if($882){var $tsize_246_i=$_tsize_1_i;var $tbase_247_i=$875;label=202;break;}else{label=343;break;}
 case 202: 
 var $tbase_247_i;
 var $tsize_246_i;
 var $883=HEAP32[((15584)>>2)];
 var $884=((($883)+($tsize_246_i))|0);
 HEAP32[((15584)>>2)]=$884;
 var $885=HEAP32[((15588)>>2)];
 var $886=($884>>>0)>($885>>>0);
 if($886){label=203;break;}else{label=204;break;}
 case 203: 
 HEAP32[((15588)>>2)]=$884;
 label=204;break;
 case 204: 
 var $888=HEAP32[((15176)>>2)];
 var $889=($888|0)==0;
 if($889){label=205;break;}else{var $sp_075_i=15600;label=212;break;}
 case 205: 
 var $891=HEAP32[((15168)>>2)];
 var $892=($891|0)==0;
 var $893=($tbase_247_i>>>0)<($891>>>0);
 var $or_cond10_i=$892|$893;
 if($or_cond10_i){label=206;break;}else{label=207;break;}
 case 206: 
 HEAP32[((15168)>>2)]=$tbase_247_i;
 label=207;break;
 case 207: 
 HEAP32[((15600)>>2)]=$tbase_247_i;
 HEAP32[((15604)>>2)]=$tsize_246_i;
 HEAP32[((15612)>>2)]=0;
 var $895=HEAP32[((14768)>>2)];
 HEAP32[((15188)>>2)]=$895;
 HEAP32[((15184)>>2)]=-1;
 var $i_02_i_i=0;label=208;break;
 case 208: 
 var $i_02_i_i;
 var $897=$i_02_i_i<<1;
 var $898=((15192+($897<<2))|0);
 var $899=$898;
 var $_sum_i_i=((($897)+(3))|0);
 var $900=((15192+($_sum_i_i<<2))|0);
 HEAP32[(($900)>>2)]=$899;
 var $_sum1_i_i=((($897)+(2))|0);
 var $901=((15192+($_sum1_i_i<<2))|0);
 HEAP32[(($901)>>2)]=$899;
 var $902=((($i_02_i_i)+(1))|0);
 var $903=($902>>>0)<32;
 if($903){var $i_02_i_i=$902;label=208;break;}else{label=209;break;}
 case 209: 
 var $904=((($tsize_246_i)-(40))|0);
 var $905=(($tbase_247_i+8)|0);
 var $906=$905;
 var $907=$906&7;
 var $908=($907|0)==0;
 if($908){var $912=0;label=211;break;}else{label=210;break;}
 case 210: 
 var $910=(((-$906))|0);
 var $911=$910&7;
 var $912=$911;label=211;break;
 case 211: 
 var $912;
 var $913=(($tbase_247_i+$912)|0);
 var $914=$913;
 var $915=((($904)-($912))|0);
 HEAP32[((15176)>>2)]=$914;
 HEAP32[((15164)>>2)]=$915;
 var $916=$915|1;
 var $_sum_i14_i=((($912)+(4))|0);
 var $917=(($tbase_247_i+$_sum_i14_i)|0);
 var $918=$917;
 HEAP32[(($918)>>2)]=$916;
 var $_sum2_i_i=((($tsize_246_i)-(36))|0);
 var $919=(($tbase_247_i+$_sum2_i_i)|0);
 var $920=$919;
 HEAP32[(($920)>>2)]=40;
 var $921=HEAP32[((14784)>>2)];
 HEAP32[((15180)>>2)]=$921;
 label=341;break;
 case 212: 
 var $sp_075_i;
 var $922=(($sp_075_i)|0);
 var $923=HEAP32[(($922)>>2)];
 var $924=(($sp_075_i+4)|0);
 var $925=HEAP32[(($924)>>2)];
 var $926=(($923+$925)|0);
 var $927=($tbase_247_i|0)==($926|0);
 if($927){label=214;break;}else{label=213;break;}
 case 213: 
 var $929=(($sp_075_i+8)|0);
 var $930=HEAP32[(($929)>>2)];
 var $931=($930|0)==0;
 if($931){label=219;break;}else{var $sp_075_i=$930;label=212;break;}
 case 214: 
 var $932=(($sp_075_i+12)|0);
 var $933=HEAP32[(($932)>>2)];
 var $934=$933&8;
 var $935=($934|0)==0;
 if($935){label=215;break;}else{label=219;break;}
 case 215: 
 var $937=$888;
 var $938=($937>>>0)>=($923>>>0);
 var $939=($937>>>0)<($tbase_247_i>>>0);
 var $or_cond49_i=$938&$939;
 if($or_cond49_i){label=216;break;}else{label=219;break;}
 case 216: 
 var $941=((($925)+($tsize_246_i))|0);
 HEAP32[(($924)>>2)]=$941;
 var $942=HEAP32[((15164)>>2)];
 var $943=((($942)+($tsize_246_i))|0);
 var $944=(($888+8)|0);
 var $945=$944;
 var $946=$945&7;
 var $947=($946|0)==0;
 if($947){var $951=0;label=218;break;}else{label=217;break;}
 case 217: 
 var $949=(((-$945))|0);
 var $950=$949&7;
 var $951=$950;label=218;break;
 case 218: 
 var $951;
 var $952=(($937+$951)|0);
 var $953=$952;
 var $954=((($943)-($951))|0);
 HEAP32[((15176)>>2)]=$953;
 HEAP32[((15164)>>2)]=$954;
 var $955=$954|1;
 var $_sum_i18_i=((($951)+(4))|0);
 var $956=(($937+$_sum_i18_i)|0);
 var $957=$956;
 HEAP32[(($957)>>2)]=$955;
 var $_sum2_i19_i=((($943)+(4))|0);
 var $958=(($937+$_sum2_i19_i)|0);
 var $959=$958;
 HEAP32[(($959)>>2)]=40;
 var $960=HEAP32[((14784)>>2)];
 HEAP32[((15180)>>2)]=$960;
 label=341;break;
 case 219: 
 var $961=HEAP32[((15168)>>2)];
 var $962=($tbase_247_i>>>0)<($961>>>0);
 if($962){label=220;break;}else{label=221;break;}
 case 220: 
 HEAP32[((15168)>>2)]=$tbase_247_i;
 label=221;break;
 case 221: 
 var $964=(($tbase_247_i+$tsize_246_i)|0);
 var $sp_168_i=15600;label=222;break;
 case 222: 
 var $sp_168_i;
 var $966=(($sp_168_i)|0);
 var $967=HEAP32[(($966)>>2)];
 var $968=($967|0)==($964|0);
 if($968){label=224;break;}else{label=223;break;}
 case 223: 
 var $970=(($sp_168_i+8)|0);
 var $971=HEAP32[(($970)>>2)];
 var $972=($971|0)==0;
 if($972){label=306;break;}else{var $sp_168_i=$971;label=222;break;}
 case 224: 
 var $973=(($sp_168_i+12)|0);
 var $974=HEAP32[(($973)>>2)];
 var $975=$974&8;
 var $976=($975|0)==0;
 if($976){label=225;break;}else{label=306;break;}
 case 225: 
 HEAP32[(($966)>>2)]=$tbase_247_i;
 var $978=(($sp_168_i+4)|0);
 var $979=HEAP32[(($978)>>2)];
 var $980=((($979)+($tsize_246_i))|0);
 HEAP32[(($978)>>2)]=$980;
 var $981=(($tbase_247_i+8)|0);
 var $982=$981;
 var $983=$982&7;
 var $984=($983|0)==0;
 if($984){var $989=0;label=227;break;}else{label=226;break;}
 case 226: 
 var $986=(((-$982))|0);
 var $987=$986&7;
 var $989=$987;label=227;break;
 case 227: 
 var $989;
 var $990=(($tbase_247_i+$989)|0);
 var $_sum107_i=((($tsize_246_i)+(8))|0);
 var $991=(($tbase_247_i+$_sum107_i)|0);
 var $992=$991;
 var $993=$992&7;
 var $994=($993|0)==0;
 if($994){var $999=0;label=229;break;}else{label=228;break;}
 case 228: 
 var $996=(((-$992))|0);
 var $997=$996&7;
 var $999=$997;label=229;break;
 case 229: 
 var $999;
 var $_sum108_i=((($999)+($tsize_246_i))|0);
 var $1000=(($tbase_247_i+$_sum108_i)|0);
 var $1001=$1000;
 var $1002=$1000;
 var $1003=$990;
 var $1004=((($1002)-($1003))|0);
 var $_sum_i21_i=((($989)+($nb_0))|0);
 var $1005=(($tbase_247_i+$_sum_i21_i)|0);
 var $1006=$1005;
 var $1007=((($1004)-($nb_0))|0);
 var $1008=$nb_0|3;
 var $_sum1_i22_i=((($989)+(4))|0);
 var $1009=(($tbase_247_i+$_sum1_i22_i)|0);
 var $1010=$1009;
 HEAP32[(($1010)>>2)]=$1008;
 var $1011=HEAP32[((15176)>>2)];
 var $1012=($1001|0)==($1011|0);
 if($1012){label=230;break;}else{label=231;break;}
 case 230: 
 var $1014=HEAP32[((15164)>>2)];
 var $1015=((($1014)+($1007))|0);
 HEAP32[((15164)>>2)]=$1015;
 HEAP32[((15176)>>2)]=$1006;
 var $1016=$1015|1;
 var $_sum46_i_i=((($_sum_i21_i)+(4))|0);
 var $1017=(($tbase_247_i+$_sum46_i_i)|0);
 var $1018=$1017;
 HEAP32[(($1018)>>2)]=$1016;
 label=305;break;
 case 231: 
 var $1020=HEAP32[((15172)>>2)];
 var $1021=($1001|0)==($1020|0);
 if($1021){label=232;break;}else{label=233;break;}
 case 232: 
 var $1023=HEAP32[((15160)>>2)];
 var $1024=((($1023)+($1007))|0);
 HEAP32[((15160)>>2)]=$1024;
 HEAP32[((15172)>>2)]=$1006;
 var $1025=$1024|1;
 var $_sum44_i_i=((($_sum_i21_i)+(4))|0);
 var $1026=(($tbase_247_i+$_sum44_i_i)|0);
 var $1027=$1026;
 HEAP32[(($1027)>>2)]=$1025;
 var $_sum45_i_i=((($1024)+($_sum_i21_i))|0);
 var $1028=(($tbase_247_i+$_sum45_i_i)|0);
 var $1029=$1028;
 HEAP32[(($1029)>>2)]=$1024;
 label=305;break;
 case 233: 
 var $_sum2_i23_i=((($tsize_246_i)+(4))|0);
 var $_sum109_i=((($_sum2_i23_i)+($999))|0);
 var $1031=(($tbase_247_i+$_sum109_i)|0);
 var $1032=$1031;
 var $1033=HEAP32[(($1032)>>2)];
 var $1034=$1033&3;
 var $1035=($1034|0)==1;
 if($1035){label=234;break;}else{var $oldfirst_0_i_i=$1001;var $qsize_0_i_i=$1007;label=281;break;}
 case 234: 
 var $1037=$1033&-8;
 var $1038=$1033>>>3;
 var $1039=($1033>>>0)<256;
 if($1039){label=235;break;}else{label=247;break;}
 case 235: 
 var $_sum3940_i_i=$999|8;
 var $_sum119_i=((($_sum3940_i_i)+($tsize_246_i))|0);
 var $1041=(($tbase_247_i+$_sum119_i)|0);
 var $1042=$1041;
 var $1043=HEAP32[(($1042)>>2)];
 var $_sum41_i_i=((($tsize_246_i)+(12))|0);
 var $_sum120_i=((($_sum41_i_i)+($999))|0);
 var $1044=(($tbase_247_i+$_sum120_i)|0);
 var $1045=$1044;
 var $1046=HEAP32[(($1045)>>2)];
 var $1047=$1038<<1;
 var $1048=((15192+($1047<<2))|0);
 var $1049=$1048;
 var $1050=($1043|0)==($1049|0);
 if($1050){label=238;break;}else{label=236;break;}
 case 236: 
 var $1052=$1043;
 var $1053=HEAP32[((15168)>>2)];
 var $1054=($1052>>>0)<($1053>>>0);
 if($1054){label=246;break;}else{label=237;break;}
 case 237: 
 var $1056=(($1043+12)|0);
 var $1057=HEAP32[(($1056)>>2)];
 var $1058=($1057|0)==($1001|0);
 if($1058){label=238;break;}else{label=246;break;}
 case 238: 
 var $1059=($1046|0)==($1043|0);
 if($1059){label=239;break;}else{label=240;break;}
 case 239: 
 var $1061=1<<$1038;
 var $1062=$1061^-1;
 var $1063=HEAP32[((15152)>>2)];
 var $1064=$1063&$1062;
 HEAP32[((15152)>>2)]=$1064;
 label=280;break;
 case 240: 
 var $1066=($1046|0)==($1049|0);
 if($1066){label=241;break;}else{label=242;break;}
 case 241: 
 var $_pre61_i_i=(($1046+8)|0);
 var $_pre_phi62_i_i=$_pre61_i_i;label=244;break;
 case 242: 
 var $1068=$1046;
 var $1069=HEAP32[((15168)>>2)];
 var $1070=($1068>>>0)<($1069>>>0);
 if($1070){label=245;break;}else{label=243;break;}
 case 243: 
 var $1072=(($1046+8)|0);
 var $1073=HEAP32[(($1072)>>2)];
 var $1074=($1073|0)==($1001|0);
 if($1074){var $_pre_phi62_i_i=$1072;label=244;break;}else{label=245;break;}
 case 244: 
 var $_pre_phi62_i_i;
 var $1075=(($1043+12)|0);
 HEAP32[(($1075)>>2)]=$1046;
 HEAP32[(($_pre_phi62_i_i)>>2)]=$1043;
 label=280;break;
 case 245: 
 _abort();
 throw "Reached an unreachable!";
 case 246: 
 _abort();
 throw "Reached an unreachable!";
 case 247: 
 var $1077=$1000;
 var $_sum34_i_i=$999|24;
 var $_sum110_i=((($_sum34_i_i)+($tsize_246_i))|0);
 var $1078=(($tbase_247_i+$_sum110_i)|0);
 var $1079=$1078;
 var $1080=HEAP32[(($1079)>>2)];
 var $_sum5_i_i=((($tsize_246_i)+(12))|0);
 var $_sum111_i=((($_sum5_i_i)+($999))|0);
 var $1081=(($tbase_247_i+$_sum111_i)|0);
 var $1082=$1081;
 var $1083=HEAP32[(($1082)>>2)];
 var $1084=($1083|0)==($1077|0);
 if($1084){label=253;break;}else{label=248;break;}
 case 248: 
 var $_sum3637_i_i=$999|8;
 var $_sum112_i=((($_sum3637_i_i)+($tsize_246_i))|0);
 var $1086=(($tbase_247_i+$_sum112_i)|0);
 var $1087=$1086;
 var $1088=HEAP32[(($1087)>>2)];
 var $1089=$1088;
 var $1090=HEAP32[((15168)>>2)];
 var $1091=($1089>>>0)<($1090>>>0);
 if($1091){label=252;break;}else{label=249;break;}
 case 249: 
 var $1093=(($1088+12)|0);
 var $1094=HEAP32[(($1093)>>2)];
 var $1095=($1094|0)==($1077|0);
 if($1095){label=250;break;}else{label=252;break;}
 case 250: 
 var $1097=(($1083+8)|0);
 var $1098=HEAP32[(($1097)>>2)];
 var $1099=($1098|0)==($1077|0);
 if($1099){label=251;break;}else{label=252;break;}
 case 251: 
 HEAP32[(($1093)>>2)]=$1083;
 HEAP32[(($1097)>>2)]=$1088;
 var $R_1_i_i=$1083;label=260;break;
 case 252: 
 _abort();
 throw "Reached an unreachable!";
 case 253: 
 var $_sum67_i_i=$999|16;
 var $_sum117_i=((($_sum2_i23_i)+($_sum67_i_i))|0);
 var $1102=(($tbase_247_i+$_sum117_i)|0);
 var $1103=$1102;
 var $1104=HEAP32[(($1103)>>2)];
 var $1105=($1104|0)==0;
 if($1105){label=254;break;}else{var $R_0_i_i=$1104;var $RP_0_i_i=$1103;label=255;break;}
 case 254: 
 var $_sum118_i=((($_sum67_i_i)+($tsize_246_i))|0);
 var $1107=(($tbase_247_i+$_sum118_i)|0);
 var $1108=$1107;
 var $1109=HEAP32[(($1108)>>2)];
 var $1110=($1109|0)==0;
 if($1110){var $R_1_i_i=0;label=260;break;}else{var $R_0_i_i=$1109;var $RP_0_i_i=$1108;label=255;break;}
 case 255: 
 var $RP_0_i_i;
 var $R_0_i_i;
 var $1111=(($R_0_i_i+20)|0);
 var $1112=HEAP32[(($1111)>>2)];
 var $1113=($1112|0)==0;
 if($1113){label=256;break;}else{var $R_0_i_i=$1112;var $RP_0_i_i=$1111;label=255;break;}
 case 256: 
 var $1115=(($R_0_i_i+16)|0);
 var $1116=HEAP32[(($1115)>>2)];
 var $1117=($1116|0)==0;
 if($1117){label=257;break;}else{var $R_0_i_i=$1116;var $RP_0_i_i=$1115;label=255;break;}
 case 257: 
 var $1119=$RP_0_i_i;
 var $1120=HEAP32[((15168)>>2)];
 var $1121=($1119>>>0)<($1120>>>0);
 if($1121){label=259;break;}else{label=258;break;}
 case 258: 
 HEAP32[(($RP_0_i_i)>>2)]=0;
 var $R_1_i_i=$R_0_i_i;label=260;break;
 case 259: 
 _abort();
 throw "Reached an unreachable!";
 case 260: 
 var $R_1_i_i;
 var $1125=($1080|0)==0;
 if($1125){label=280;break;}else{label=261;break;}
 case 261: 
 var $_sum31_i_i=((($tsize_246_i)+(28))|0);
 var $_sum113_i=((($_sum31_i_i)+($999))|0);
 var $1127=(($tbase_247_i+$_sum113_i)|0);
 var $1128=$1127;
 var $1129=HEAP32[(($1128)>>2)];
 var $1130=((15456+($1129<<2))|0);
 var $1131=HEAP32[(($1130)>>2)];
 var $1132=($1077|0)==($1131|0);
 if($1132){label=262;break;}else{label=264;break;}
 case 262: 
 HEAP32[(($1130)>>2)]=$R_1_i_i;
 var $cond_i_i=($R_1_i_i|0)==0;
 if($cond_i_i){label=263;break;}else{label=270;break;}
 case 263: 
 var $1134=1<<$1129;
 var $1135=$1134^-1;
 var $1136=HEAP32[((15156)>>2)];
 var $1137=$1136&$1135;
 HEAP32[((15156)>>2)]=$1137;
 label=280;break;
 case 264: 
 var $1139=$1080;
 var $1140=HEAP32[((15168)>>2)];
 var $1141=($1139>>>0)<($1140>>>0);
 if($1141){label=268;break;}else{label=265;break;}
 case 265: 
 var $1143=(($1080+16)|0);
 var $1144=HEAP32[(($1143)>>2)];
 var $1145=($1144|0)==($1077|0);
 if($1145){label=266;break;}else{label=267;break;}
 case 266: 
 HEAP32[(($1143)>>2)]=$R_1_i_i;
 label=269;break;
 case 267: 
 var $1148=(($1080+20)|0);
 HEAP32[(($1148)>>2)]=$R_1_i_i;
 label=269;break;
 case 268: 
 _abort();
 throw "Reached an unreachable!";
 case 269: 
 var $1151=($R_1_i_i|0)==0;
 if($1151){label=280;break;}else{label=270;break;}
 case 270: 
 var $1153=$R_1_i_i;
 var $1154=HEAP32[((15168)>>2)];
 var $1155=($1153>>>0)<($1154>>>0);
 if($1155){label=279;break;}else{label=271;break;}
 case 271: 
 var $1157=(($R_1_i_i+24)|0);
 HEAP32[(($1157)>>2)]=$1080;
 var $_sum3233_i_i=$999|16;
 var $_sum114_i=((($_sum3233_i_i)+($tsize_246_i))|0);
 var $1158=(($tbase_247_i+$_sum114_i)|0);
 var $1159=$1158;
 var $1160=HEAP32[(($1159)>>2)];
 var $1161=($1160|0)==0;
 if($1161){label=275;break;}else{label=272;break;}
 case 272: 
 var $1163=$1160;
 var $1164=HEAP32[((15168)>>2)];
 var $1165=($1163>>>0)<($1164>>>0);
 if($1165){label=274;break;}else{label=273;break;}
 case 273: 
 var $1167=(($R_1_i_i+16)|0);
 HEAP32[(($1167)>>2)]=$1160;
 var $1168=(($1160+24)|0);
 HEAP32[(($1168)>>2)]=$R_1_i_i;
 label=275;break;
 case 274: 
 _abort();
 throw "Reached an unreachable!";
 case 275: 
 var $_sum115_i=((($_sum2_i23_i)+($_sum3233_i_i))|0);
 var $1171=(($tbase_247_i+$_sum115_i)|0);
 var $1172=$1171;
 var $1173=HEAP32[(($1172)>>2)];
 var $1174=($1173|0)==0;
 if($1174){label=280;break;}else{label=276;break;}
 case 276: 
 var $1176=$1173;
 var $1177=HEAP32[((15168)>>2)];
 var $1178=($1176>>>0)<($1177>>>0);
 if($1178){label=278;break;}else{label=277;break;}
 case 277: 
 var $1180=(($R_1_i_i+20)|0);
 HEAP32[(($1180)>>2)]=$1173;
 var $1181=(($1173+24)|0);
 HEAP32[(($1181)>>2)]=$R_1_i_i;
 label=280;break;
 case 278: 
 _abort();
 throw "Reached an unreachable!";
 case 279: 
 _abort();
 throw "Reached an unreachable!";
 case 280: 
 var $_sum9_i_i=$1037|$999;
 var $_sum116_i=((($_sum9_i_i)+($tsize_246_i))|0);
 var $1185=(($tbase_247_i+$_sum116_i)|0);
 var $1186=$1185;
 var $1187=((($1037)+($1007))|0);
 var $oldfirst_0_i_i=$1186;var $qsize_0_i_i=$1187;label=281;break;
 case 281: 
 var $qsize_0_i_i;
 var $oldfirst_0_i_i;
 var $1189=(($oldfirst_0_i_i+4)|0);
 var $1190=HEAP32[(($1189)>>2)];
 var $1191=$1190&-2;
 HEAP32[(($1189)>>2)]=$1191;
 var $1192=$qsize_0_i_i|1;
 var $_sum10_i_i=((($_sum_i21_i)+(4))|0);
 var $1193=(($tbase_247_i+$_sum10_i_i)|0);
 var $1194=$1193;
 HEAP32[(($1194)>>2)]=$1192;
 var $_sum11_i_i=((($qsize_0_i_i)+($_sum_i21_i))|0);
 var $1195=(($tbase_247_i+$_sum11_i_i)|0);
 var $1196=$1195;
 HEAP32[(($1196)>>2)]=$qsize_0_i_i;
 var $1197=$qsize_0_i_i>>>3;
 var $1198=($qsize_0_i_i>>>0)<256;
 if($1198){label=282;break;}else{label=287;break;}
 case 282: 
 var $1200=$1197<<1;
 var $1201=((15192+($1200<<2))|0);
 var $1202=$1201;
 var $1203=HEAP32[((15152)>>2)];
 var $1204=1<<$1197;
 var $1205=$1203&$1204;
 var $1206=($1205|0)==0;
 if($1206){label=283;break;}else{label=284;break;}
 case 283: 
 var $1208=$1203|$1204;
 HEAP32[((15152)>>2)]=$1208;
 var $_sum27_pre_i_i=((($1200)+(2))|0);
 var $_pre_i24_i=((15192+($_sum27_pre_i_i<<2))|0);
 var $F4_0_i_i=$1202;var $_pre_phi_i25_i=$_pre_i24_i;label=286;break;
 case 284: 
 var $_sum30_i_i=((($1200)+(2))|0);
 var $1210=((15192+($_sum30_i_i<<2))|0);
 var $1211=HEAP32[(($1210)>>2)];
 var $1212=$1211;
 var $1213=HEAP32[((15168)>>2)];
 var $1214=($1212>>>0)<($1213>>>0);
 if($1214){label=285;break;}else{var $F4_0_i_i=$1211;var $_pre_phi_i25_i=$1210;label=286;break;}
 case 285: 
 _abort();
 throw "Reached an unreachable!";
 case 286: 
 var $_pre_phi_i25_i;
 var $F4_0_i_i;
 HEAP32[(($_pre_phi_i25_i)>>2)]=$1006;
 var $1217=(($F4_0_i_i+12)|0);
 HEAP32[(($1217)>>2)]=$1006;
 var $_sum28_i_i=((($_sum_i21_i)+(8))|0);
 var $1218=(($tbase_247_i+$_sum28_i_i)|0);
 var $1219=$1218;
 HEAP32[(($1219)>>2)]=$F4_0_i_i;
 var $_sum29_i_i=((($_sum_i21_i)+(12))|0);
 var $1220=(($tbase_247_i+$_sum29_i_i)|0);
 var $1221=$1220;
 HEAP32[(($1221)>>2)]=$1202;
 label=305;break;
 case 287: 
 var $1223=$1005;
 var $1224=$qsize_0_i_i>>>8;
 var $1225=($1224|0)==0;
 if($1225){var $I7_0_i_i=0;label=290;break;}else{label=288;break;}
 case 288: 
 var $1227=($qsize_0_i_i>>>0)>16777215;
 if($1227){var $I7_0_i_i=31;label=290;break;}else{label=289;break;}
 case 289: 
 var $1229=((($1224)+(1048320))|0);
 var $1230=$1229>>>16;
 var $1231=$1230&8;
 var $1232=$1224<<$1231;
 var $1233=((($1232)+(520192))|0);
 var $1234=$1233>>>16;
 var $1235=$1234&4;
 var $1236=$1235|$1231;
 var $1237=$1232<<$1235;
 var $1238=((($1237)+(245760))|0);
 var $1239=$1238>>>16;
 var $1240=$1239&2;
 var $1241=$1236|$1240;
 var $1242=(((14)-($1241))|0);
 var $1243=$1237<<$1240;
 var $1244=$1243>>>15;
 var $1245=((($1242)+($1244))|0);
 var $1246=$1245<<1;
 var $1247=((($1245)+(7))|0);
 var $1248=$qsize_0_i_i>>>($1247>>>0);
 var $1249=$1248&1;
 var $1250=$1249|$1246;
 var $I7_0_i_i=$1250;label=290;break;
 case 290: 
 var $I7_0_i_i;
 var $1252=((15456+($I7_0_i_i<<2))|0);
 var $_sum12_i26_i=((($_sum_i21_i)+(28))|0);
 var $1253=(($tbase_247_i+$_sum12_i26_i)|0);
 var $1254=$1253;
 HEAP32[(($1254)>>2)]=$I7_0_i_i;
 var $_sum13_i_i=((($_sum_i21_i)+(16))|0);
 var $1255=(($tbase_247_i+$_sum13_i_i)|0);
 var $_sum14_i_i=((($_sum_i21_i)+(20))|0);
 var $1256=(($tbase_247_i+$_sum14_i_i)|0);
 var $1257=$1256;
 HEAP32[(($1257)>>2)]=0;
 var $1258=$1255;
 HEAP32[(($1258)>>2)]=0;
 var $1259=HEAP32[((15156)>>2)];
 var $1260=1<<$I7_0_i_i;
 var $1261=$1259&$1260;
 var $1262=($1261|0)==0;
 if($1262){label=291;break;}else{label=292;break;}
 case 291: 
 var $1264=$1259|$1260;
 HEAP32[((15156)>>2)]=$1264;
 HEAP32[(($1252)>>2)]=$1223;
 var $1265=$1252;
 var $_sum15_i_i=((($_sum_i21_i)+(24))|0);
 var $1266=(($tbase_247_i+$_sum15_i_i)|0);
 var $1267=$1266;
 HEAP32[(($1267)>>2)]=$1265;
 var $_sum16_i_i=((($_sum_i21_i)+(12))|0);
 var $1268=(($tbase_247_i+$_sum16_i_i)|0);
 var $1269=$1268;
 HEAP32[(($1269)>>2)]=$1223;
 var $_sum17_i_i=((($_sum_i21_i)+(8))|0);
 var $1270=(($tbase_247_i+$_sum17_i_i)|0);
 var $1271=$1270;
 HEAP32[(($1271)>>2)]=$1223;
 label=305;break;
 case 292: 
 var $1273=HEAP32[(($1252)>>2)];
 var $1274=($I7_0_i_i|0)==31;
 if($1274){var $1279=0;label=294;break;}else{label=293;break;}
 case 293: 
 var $1276=$I7_0_i_i>>>1;
 var $1277=(((25)-($1276))|0);
 var $1279=$1277;label=294;break;
 case 294: 
 var $1279;
 var $1280=(($1273+4)|0);
 var $1281=HEAP32[(($1280)>>2)];
 var $1282=$1281&-8;
 var $1283=($1282|0)==($qsize_0_i_i|0);
 if($1283){var $T_0_lcssa_i28_i=$1273;label=301;break;}else{label=295;break;}
 case 295: 
 var $1284=$qsize_0_i_i<<$1279;
 var $T_055_i_i=$1273;var $K8_056_i_i=$1284;label=297;break;
 case 296: 
 var $1286=$K8_056_i_i<<1;
 var $1287=(($1294+4)|0);
 var $1288=HEAP32[(($1287)>>2)];
 var $1289=$1288&-8;
 var $1290=($1289|0)==($qsize_0_i_i|0);
 if($1290){var $T_0_lcssa_i28_i=$1294;label=301;break;}else{var $T_055_i_i=$1294;var $K8_056_i_i=$1286;label=297;break;}
 case 297: 
 var $K8_056_i_i;
 var $T_055_i_i;
 var $1292=$K8_056_i_i>>>31;
 var $1293=(($T_055_i_i+16+($1292<<2))|0);
 var $1294=HEAP32[(($1293)>>2)];
 var $1295=($1294|0)==0;
 if($1295){label=298;break;}else{label=296;break;}
 case 298: 
 var $1297=$1293;
 var $1298=HEAP32[((15168)>>2)];
 var $1299=($1297>>>0)<($1298>>>0);
 if($1299){label=300;break;}else{label=299;break;}
 case 299: 
 HEAP32[(($1293)>>2)]=$1223;
 var $_sum24_i_i=((($_sum_i21_i)+(24))|0);
 var $1301=(($tbase_247_i+$_sum24_i_i)|0);
 var $1302=$1301;
 HEAP32[(($1302)>>2)]=$T_055_i_i;
 var $_sum25_i_i=((($_sum_i21_i)+(12))|0);
 var $1303=(($tbase_247_i+$_sum25_i_i)|0);
 var $1304=$1303;
 HEAP32[(($1304)>>2)]=$1223;
 var $_sum26_i_i=((($_sum_i21_i)+(8))|0);
 var $1305=(($tbase_247_i+$_sum26_i_i)|0);
 var $1306=$1305;
 HEAP32[(($1306)>>2)]=$1223;
 label=305;break;
 case 300: 
 _abort();
 throw "Reached an unreachable!";
 case 301: 
 var $T_0_lcssa_i28_i;
 var $1308=(($T_0_lcssa_i28_i+8)|0);
 var $1309=HEAP32[(($1308)>>2)];
 var $1310=$T_0_lcssa_i28_i;
 var $1311=HEAP32[((15168)>>2)];
 var $1312=($1310>>>0)<($1311>>>0);
 if($1312){label=304;break;}else{label=302;break;}
 case 302: 
 var $1314=$1309;
 var $1315=($1314>>>0)<($1311>>>0);
 if($1315){label=304;break;}else{label=303;break;}
 case 303: 
 var $1317=(($1309+12)|0);
 HEAP32[(($1317)>>2)]=$1223;
 HEAP32[(($1308)>>2)]=$1223;
 var $_sum21_i_i=((($_sum_i21_i)+(8))|0);
 var $1318=(($tbase_247_i+$_sum21_i_i)|0);
 var $1319=$1318;
 HEAP32[(($1319)>>2)]=$1309;
 var $_sum22_i_i=((($_sum_i21_i)+(12))|0);
 var $1320=(($tbase_247_i+$_sum22_i_i)|0);
 var $1321=$1320;
 HEAP32[(($1321)>>2)]=$T_0_lcssa_i28_i;
 var $_sum23_i_i=((($_sum_i21_i)+(24))|0);
 var $1322=(($tbase_247_i+$_sum23_i_i)|0);
 var $1323=$1322;
 HEAP32[(($1323)>>2)]=0;
 label=305;break;
 case 304: 
 _abort();
 throw "Reached an unreachable!";
 case 305: 
 var $_sum1819_i_i=$989|8;
 var $1324=(($tbase_247_i+$_sum1819_i_i)|0);
 var $mem_0=$1324;label=344;break;
 case 306: 
 var $1325=$888;
 var $sp_0_i_i_i=15600;label=307;break;
 case 307: 
 var $sp_0_i_i_i;
 var $1327=(($sp_0_i_i_i)|0);
 var $1328=HEAP32[(($1327)>>2)];
 var $1329=($1328>>>0)>($1325>>>0);
 if($1329){label=309;break;}else{label=308;break;}
 case 308: 
 var $1331=(($sp_0_i_i_i+4)|0);
 var $1332=HEAP32[(($1331)>>2)];
 var $1333=(($1328+$1332)|0);
 var $1334=($1333>>>0)>($1325>>>0);
 if($1334){label=310;break;}else{label=309;break;}
 case 309: 
 var $1336=(($sp_0_i_i_i+8)|0);
 var $1337=HEAP32[(($1336)>>2)];
 var $sp_0_i_i_i=$1337;label=307;break;
 case 310: 
 var $_sum_i15_i=((($1332)-(47))|0);
 var $_sum1_i16_i=((($1332)-(39))|0);
 var $1338=(($1328+$_sum1_i16_i)|0);
 var $1339=$1338;
 var $1340=$1339&7;
 var $1341=($1340|0)==0;
 if($1341){var $1346=0;label=312;break;}else{label=311;break;}
 case 311: 
 var $1343=(((-$1339))|0);
 var $1344=$1343&7;
 var $1346=$1344;label=312;break;
 case 312: 
 var $1346;
 var $_sum2_i17_i=((($_sum_i15_i)+($1346))|0);
 var $1347=(($1328+$_sum2_i17_i)|0);
 var $1348=(($888+16)|0);
 var $1349=$1348;
 var $1350=($1347>>>0)<($1349>>>0);
 var $1351=($1350?$1325:$1347);
 var $1352=(($1351+8)|0);
 var $1353=$1352;
 var $1354=((($tsize_246_i)-(40))|0);
 var $1355=(($tbase_247_i+8)|0);
 var $1356=$1355;
 var $1357=$1356&7;
 var $1358=($1357|0)==0;
 if($1358){var $1362=0;label=314;break;}else{label=313;break;}
 case 313: 
 var $1360=(((-$1356))|0);
 var $1361=$1360&7;
 var $1362=$1361;label=314;break;
 case 314: 
 var $1362;
 var $1363=(($tbase_247_i+$1362)|0);
 var $1364=$1363;
 var $1365=((($1354)-($1362))|0);
 HEAP32[((15176)>>2)]=$1364;
 HEAP32[((15164)>>2)]=$1365;
 var $1366=$1365|1;
 var $_sum_i_i_i=((($1362)+(4))|0);
 var $1367=(($tbase_247_i+$_sum_i_i_i)|0);
 var $1368=$1367;
 HEAP32[(($1368)>>2)]=$1366;
 var $_sum2_i_i_i=((($tsize_246_i)-(36))|0);
 var $1369=(($tbase_247_i+$_sum2_i_i_i)|0);
 var $1370=$1369;
 HEAP32[(($1370)>>2)]=40;
 var $1371=HEAP32[((14784)>>2)];
 HEAP32[((15180)>>2)]=$1371;
 var $1372=(($1351+4)|0);
 var $1373=$1372;
 HEAP32[(($1373)>>2)]=27;
 assert(16 % 1 === 0);HEAP32[(($1352)>>2)]=HEAP32[((15600)>>2)];HEAP32[((($1352)+(4))>>2)]=HEAP32[((15604)>>2)];HEAP32[((($1352)+(8))>>2)]=HEAP32[((15608)>>2)];HEAP32[((($1352)+(12))>>2)]=HEAP32[((15612)>>2)];
 HEAP32[((15600)>>2)]=$tbase_247_i;
 HEAP32[((15604)>>2)]=$tsize_246_i;
 HEAP32[((15612)>>2)]=0;
 HEAP32[((15608)>>2)]=$1353;
 var $1374=(($1351+28)|0);
 var $1375=$1374;
 HEAP32[(($1375)>>2)]=7;
 var $1376=(($1351+32)|0);
 var $1377=($1376>>>0)<($1333>>>0);
 if($1377){var $1378=$1375;label=315;break;}else{label=316;break;}
 case 315: 
 var $1378;
 var $1379=(($1378+4)|0);
 HEAP32[(($1379)>>2)]=7;
 var $1380=(($1378+8)|0);
 var $1381=$1380;
 var $1382=($1381>>>0)<($1333>>>0);
 if($1382){var $1378=$1379;label=315;break;}else{label=316;break;}
 case 316: 
 var $1383=($1351|0)==($1325|0);
 if($1383){label=341;break;}else{label=317;break;}
 case 317: 
 var $1385=$1351;
 var $1386=$888;
 var $1387=((($1385)-($1386))|0);
 var $1388=(($1325+$1387)|0);
 var $_sum3_i_i=((($1387)+(4))|0);
 var $1389=(($1325+$_sum3_i_i)|0);
 var $1390=$1389;
 var $1391=HEAP32[(($1390)>>2)];
 var $1392=$1391&-2;
 HEAP32[(($1390)>>2)]=$1392;
 var $1393=$1387|1;
 var $1394=(($888+4)|0);
 HEAP32[(($1394)>>2)]=$1393;
 var $1395=$1388;
 HEAP32[(($1395)>>2)]=$1387;
 var $1396=$1387>>>3;
 var $1397=($1387>>>0)<256;
 if($1397){label=318;break;}else{label=323;break;}
 case 318: 
 var $1399=$1396<<1;
 var $1400=((15192+($1399<<2))|0);
 var $1401=$1400;
 var $1402=HEAP32[((15152)>>2)];
 var $1403=1<<$1396;
 var $1404=$1402&$1403;
 var $1405=($1404|0)==0;
 if($1405){label=319;break;}else{label=320;break;}
 case 319: 
 var $1407=$1402|$1403;
 HEAP32[((15152)>>2)]=$1407;
 var $_sum11_pre_i_i=((($1399)+(2))|0);
 var $_pre_i_i=((15192+($_sum11_pre_i_i<<2))|0);
 var $F_0_i_i=$1401;var $_pre_phi_i_i=$_pre_i_i;label=322;break;
 case 320: 
 var $_sum12_i_i=((($1399)+(2))|0);
 var $1409=((15192+($_sum12_i_i<<2))|0);
 var $1410=HEAP32[(($1409)>>2)];
 var $1411=$1410;
 var $1412=HEAP32[((15168)>>2)];
 var $1413=($1411>>>0)<($1412>>>0);
 if($1413){label=321;break;}else{var $F_0_i_i=$1410;var $_pre_phi_i_i=$1409;label=322;break;}
 case 321: 
 _abort();
 throw "Reached an unreachable!";
 case 322: 
 var $_pre_phi_i_i;
 var $F_0_i_i;
 HEAP32[(($_pre_phi_i_i)>>2)]=$888;
 var $1416=(($F_0_i_i+12)|0);
 HEAP32[(($1416)>>2)]=$888;
 var $1417=(($888+8)|0);
 HEAP32[(($1417)>>2)]=$F_0_i_i;
 var $1418=(($888+12)|0);
 HEAP32[(($1418)>>2)]=$1401;
 label=341;break;
 case 323: 
 var $1420=$888;
 var $1421=$1387>>>8;
 var $1422=($1421|0)==0;
 if($1422){var $I1_0_i_i=0;label=326;break;}else{label=324;break;}
 case 324: 
 var $1424=($1387>>>0)>16777215;
 if($1424){var $I1_0_i_i=31;label=326;break;}else{label=325;break;}
 case 325: 
 var $1426=((($1421)+(1048320))|0);
 var $1427=$1426>>>16;
 var $1428=$1427&8;
 var $1429=$1421<<$1428;
 var $1430=((($1429)+(520192))|0);
 var $1431=$1430>>>16;
 var $1432=$1431&4;
 var $1433=$1432|$1428;
 var $1434=$1429<<$1432;
 var $1435=((($1434)+(245760))|0);
 var $1436=$1435>>>16;
 var $1437=$1436&2;
 var $1438=$1433|$1437;
 var $1439=(((14)-($1438))|0);
 var $1440=$1434<<$1437;
 var $1441=$1440>>>15;
 var $1442=((($1439)+($1441))|0);
 var $1443=$1442<<1;
 var $1444=((($1442)+(7))|0);
 var $1445=$1387>>>($1444>>>0);
 var $1446=$1445&1;
 var $1447=$1446|$1443;
 var $I1_0_i_i=$1447;label=326;break;
 case 326: 
 var $I1_0_i_i;
 var $1449=((15456+($I1_0_i_i<<2))|0);
 var $1450=(($888+28)|0);
 var $I1_0_c_i_i=$I1_0_i_i;
 HEAP32[(($1450)>>2)]=$I1_0_c_i_i;
 var $1451=(($888+20)|0);
 HEAP32[(($1451)>>2)]=0;
 var $1452=(($888+16)|0);
 HEAP32[(($1452)>>2)]=0;
 var $1453=HEAP32[((15156)>>2)];
 var $1454=1<<$I1_0_i_i;
 var $1455=$1453&$1454;
 var $1456=($1455|0)==0;
 if($1456){label=327;break;}else{label=328;break;}
 case 327: 
 var $1458=$1453|$1454;
 HEAP32[((15156)>>2)]=$1458;
 HEAP32[(($1449)>>2)]=$1420;
 var $1459=(($888+24)|0);
 var $_c_i_i=$1449;
 HEAP32[(($1459)>>2)]=$_c_i_i;
 var $1460=(($888+12)|0);
 HEAP32[(($1460)>>2)]=$888;
 var $1461=(($888+8)|0);
 HEAP32[(($1461)>>2)]=$888;
 label=341;break;
 case 328: 
 var $1463=HEAP32[(($1449)>>2)];
 var $1464=($I1_0_i_i|0)==31;
 if($1464){var $1469=0;label=330;break;}else{label=329;break;}
 case 329: 
 var $1466=$I1_0_i_i>>>1;
 var $1467=(((25)-($1466))|0);
 var $1469=$1467;label=330;break;
 case 330: 
 var $1469;
 var $1470=(($1463+4)|0);
 var $1471=HEAP32[(($1470)>>2)];
 var $1472=$1471&-8;
 var $1473=($1472|0)==($1387|0);
 if($1473){var $T_0_lcssa_i_i=$1463;label=337;break;}else{label=331;break;}
 case 331: 
 var $1474=$1387<<$1469;
 var $T_014_i_i=$1463;var $K2_015_i_i=$1474;label=333;break;
 case 332: 
 var $1476=$K2_015_i_i<<1;
 var $1477=(($1484+4)|0);
 var $1478=HEAP32[(($1477)>>2)];
 var $1479=$1478&-8;
 var $1480=($1479|0)==($1387|0);
 if($1480){var $T_0_lcssa_i_i=$1484;label=337;break;}else{var $T_014_i_i=$1484;var $K2_015_i_i=$1476;label=333;break;}
 case 333: 
 var $K2_015_i_i;
 var $T_014_i_i;
 var $1482=$K2_015_i_i>>>31;
 var $1483=(($T_014_i_i+16+($1482<<2))|0);
 var $1484=HEAP32[(($1483)>>2)];
 var $1485=($1484|0)==0;
 if($1485){label=334;break;}else{label=332;break;}
 case 334: 
 var $1487=$1483;
 var $1488=HEAP32[((15168)>>2)];
 var $1489=($1487>>>0)<($1488>>>0);
 if($1489){label=336;break;}else{label=335;break;}
 case 335: 
 HEAP32[(($1483)>>2)]=$1420;
 var $1491=(($888+24)|0);
 var $T_0_c8_i_i=$T_014_i_i;
 HEAP32[(($1491)>>2)]=$T_0_c8_i_i;
 var $1492=(($888+12)|0);
 HEAP32[(($1492)>>2)]=$888;
 var $1493=(($888+8)|0);
 HEAP32[(($1493)>>2)]=$888;
 label=341;break;
 case 336: 
 _abort();
 throw "Reached an unreachable!";
 case 337: 
 var $T_0_lcssa_i_i;
 var $1495=(($T_0_lcssa_i_i+8)|0);
 var $1496=HEAP32[(($1495)>>2)];
 var $1497=$T_0_lcssa_i_i;
 var $1498=HEAP32[((15168)>>2)];
 var $1499=($1497>>>0)<($1498>>>0);
 if($1499){label=340;break;}else{label=338;break;}
 case 338: 
 var $1501=$1496;
 var $1502=($1501>>>0)<($1498>>>0);
 if($1502){label=340;break;}else{label=339;break;}
 case 339: 
 var $1504=(($1496+12)|0);
 HEAP32[(($1504)>>2)]=$1420;
 HEAP32[(($1495)>>2)]=$1420;
 var $1505=(($888+8)|0);
 var $_c7_i_i=$1496;
 HEAP32[(($1505)>>2)]=$_c7_i_i;
 var $1506=(($888+12)|0);
 var $T_0_c_i_i=$T_0_lcssa_i_i;
 HEAP32[(($1506)>>2)]=$T_0_c_i_i;
 var $1507=(($888+24)|0);
 HEAP32[(($1507)>>2)]=0;
 label=341;break;
 case 340: 
 _abort();
 throw "Reached an unreachable!";
 case 341: 
 var $1508=HEAP32[((15164)>>2)];
 var $1509=($1508>>>0)>($nb_0>>>0);
 if($1509){label=342;break;}else{label=343;break;}
 case 342: 
 var $1511=((($1508)-($nb_0))|0);
 HEAP32[((15164)>>2)]=$1511;
 var $1512=HEAP32[((15176)>>2)];
 var $1513=$1512;
 var $1514=(($1513+$nb_0)|0);
 var $1515=$1514;
 HEAP32[((15176)>>2)]=$1515;
 var $1516=$1511|1;
 var $_sum_i34=((($nb_0)+(4))|0);
 var $1517=(($1513+$_sum_i34)|0);
 var $1518=$1517;
 HEAP32[(($1518)>>2)]=$1516;
 var $1519=$nb_0|3;
 var $1520=(($1512+4)|0);
 HEAP32[(($1520)>>2)]=$1519;
 var $1521=(($1512+8)|0);
 var $1522=$1521;
 var $mem_0=$1522;label=344;break;
 case 343: 
 var $1523=___errno_location();
 HEAP32[(($1523)>>2)]=12;
 var $mem_0=0;label=344;break;
 case 344: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_malloc"] = _malloc;

function _free($mem){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($mem|0)==0;
 if($1){label=141;break;}else{label=2;break;}
 case 2: 
 var $3=((($mem)-(8))|0);
 var $4=$3;
 var $5=HEAP32[((15168)>>2)];
 var $6=($3>>>0)<($5>>>0);
 if($6){label=140;break;}else{label=3;break;}
 case 3: 
 var $8=((($mem)-(4))|0);
 var $9=$8;
 var $10=HEAP32[(($9)>>2)];
 var $11=$10&3;
 var $12=($11|0)==1;
 if($12){label=140;break;}else{label=4;break;}
 case 4: 
 var $14=$10&-8;
 var $_sum=((($14)-(8))|0);
 var $15=(($mem+$_sum)|0);
 var $16=$15;
 var $17=$10&1;
 var $18=($17|0)==0;
 if($18){label=5;break;}else{var $p_0=$4;var $psize_0=$14;label=56;break;}
 case 5: 
 var $20=$3;
 var $21=HEAP32[(($20)>>2)];
 var $22=($11|0)==0;
 if($22){label=141;break;}else{label=6;break;}
 case 6: 
 var $_sum3=(((-8)-($21))|0);
 var $24=(($mem+$_sum3)|0);
 var $25=$24;
 var $26=((($21)+($14))|0);
 var $27=($24>>>0)<($5>>>0);
 if($27){label=140;break;}else{label=7;break;}
 case 7: 
 var $29=HEAP32[((15172)>>2)];
 var $30=($25|0)==($29|0);
 if($30){label=54;break;}else{label=8;break;}
 case 8: 
 var $32=$21>>>3;
 var $33=($21>>>0)<256;
 if($33){label=9;break;}else{label=21;break;}
 case 9: 
 var $_sum47=((($_sum3)+(8))|0);
 var $35=(($mem+$_sum47)|0);
 var $36=$35;
 var $37=HEAP32[(($36)>>2)];
 var $_sum48=((($_sum3)+(12))|0);
 var $38=(($mem+$_sum48)|0);
 var $39=$38;
 var $40=HEAP32[(($39)>>2)];
 var $41=$32<<1;
 var $42=((15192+($41<<2))|0);
 var $43=$42;
 var $44=($37|0)==($43|0);
 if($44){label=12;break;}else{label=10;break;}
 case 10: 
 var $46=$37;
 var $47=($46>>>0)<($5>>>0);
 if($47){label=20;break;}else{label=11;break;}
 case 11: 
 var $49=(($37+12)|0);
 var $50=HEAP32[(($49)>>2)];
 var $51=($50|0)==($25|0);
 if($51){label=12;break;}else{label=20;break;}
 case 12: 
 var $52=($40|0)==($37|0);
 if($52){label=13;break;}else{label=14;break;}
 case 13: 
 var $54=1<<$32;
 var $55=$54^-1;
 var $56=HEAP32[((15152)>>2)];
 var $57=$56&$55;
 HEAP32[((15152)>>2)]=$57;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 14: 
 var $59=($40|0)==($43|0);
 if($59){label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre84=(($40+8)|0);
 var $_pre_phi85=$_pre84;label=18;break;
 case 16: 
 var $61=$40;
 var $62=($61>>>0)<($5>>>0);
 if($62){label=19;break;}else{label=17;break;}
 case 17: 
 var $64=(($40+8)|0);
 var $65=HEAP32[(($64)>>2)];
 var $66=($65|0)==($25|0);
 if($66){var $_pre_phi85=$64;label=18;break;}else{label=19;break;}
 case 18: 
 var $_pre_phi85;
 var $67=(($37+12)|0);
 HEAP32[(($67)>>2)]=$40;
 HEAP32[(($_pre_phi85)>>2)]=$37;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 19: 
 _abort();
 throw "Reached an unreachable!";
 case 20: 
 _abort();
 throw "Reached an unreachable!";
 case 21: 
 var $69=$24;
 var $_sum37=((($_sum3)+(24))|0);
 var $70=(($mem+$_sum37)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $_sum38=((($_sum3)+(12))|0);
 var $73=(($mem+$_sum38)|0);
 var $74=$73;
 var $75=HEAP32[(($74)>>2)];
 var $76=($75|0)==($69|0);
 if($76){label=27;break;}else{label=22;break;}
 case 22: 
 var $_sum44=((($_sum3)+(8))|0);
 var $78=(($mem+$_sum44)|0);
 var $79=$78;
 var $80=HEAP32[(($79)>>2)];
 var $81=$80;
 var $82=($81>>>0)<($5>>>0);
 if($82){label=26;break;}else{label=23;break;}
 case 23: 
 var $84=(($80+12)|0);
 var $85=HEAP32[(($84)>>2)];
 var $86=($85|0)==($69|0);
 if($86){label=24;break;}else{label=26;break;}
 case 24: 
 var $88=(($75+8)|0);
 var $89=HEAP32[(($88)>>2)];
 var $90=($89|0)==($69|0);
 if($90){label=25;break;}else{label=26;break;}
 case 25: 
 HEAP32[(($84)>>2)]=$75;
 HEAP32[(($88)>>2)]=$80;
 var $R_1=$75;label=34;break;
 case 26: 
 _abort();
 throw "Reached an unreachable!";
 case 27: 
 var $_sum40=((($_sum3)+(20))|0);
 var $93=(($mem+$_sum40)|0);
 var $94=$93;
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=28;break;}else{var $R_0=$95;var $RP_0=$94;label=29;break;}
 case 28: 
 var $_sum39=((($_sum3)+(16))|0);
 var $98=(($mem+$_sum39)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=($100|0)==0;
 if($101){var $R_1=0;label=34;break;}else{var $R_0=$100;var $RP_0=$99;label=29;break;}
 case 29: 
 var $RP_0;
 var $R_0;
 var $102=(($R_0+20)|0);
 var $103=HEAP32[(($102)>>2)];
 var $104=($103|0)==0;
 if($104){label=30;break;}else{var $R_0=$103;var $RP_0=$102;label=29;break;}
 case 30: 
 var $106=(($R_0+16)|0);
 var $107=HEAP32[(($106)>>2)];
 var $108=($107|0)==0;
 if($108){label=31;break;}else{var $R_0=$107;var $RP_0=$106;label=29;break;}
 case 31: 
 var $110=$RP_0;
 var $111=($110>>>0)<($5>>>0);
 if($111){label=33;break;}else{label=32;break;}
 case 32: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=34;break;
 case 33: 
 _abort();
 throw "Reached an unreachable!";
 case 34: 
 var $R_1;
 var $115=($72|0)==0;
 if($115){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=35;break;}
 case 35: 
 var $_sum41=((($_sum3)+(28))|0);
 var $117=(($mem+$_sum41)|0);
 var $118=$117;
 var $119=HEAP32[(($118)>>2)];
 var $120=((15456+($119<<2))|0);
 var $121=HEAP32[(($120)>>2)];
 var $122=($69|0)==($121|0);
 if($122){label=36;break;}else{label=38;break;}
 case 36: 
 HEAP32[(($120)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=37;break;}else{label=44;break;}
 case 37: 
 var $124=1<<$119;
 var $125=$124^-1;
 var $126=HEAP32[((15156)>>2)];
 var $127=$126&$125;
 HEAP32[((15156)>>2)]=$127;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 38: 
 var $129=$72;
 var $130=HEAP32[((15168)>>2)];
 var $131=($129>>>0)<($130>>>0);
 if($131){label=42;break;}else{label=39;break;}
 case 39: 
 var $133=(($72+16)|0);
 var $134=HEAP32[(($133)>>2)];
 var $135=($134|0)==($69|0);
 if($135){label=40;break;}else{label=41;break;}
 case 40: 
 HEAP32[(($133)>>2)]=$R_1;
 label=43;break;
 case 41: 
 var $138=(($72+20)|0);
 HEAP32[(($138)>>2)]=$R_1;
 label=43;break;
 case 42: 
 _abort();
 throw "Reached an unreachable!";
 case 43: 
 var $141=($R_1|0)==0;
 if($141){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=44;break;}
 case 44: 
 var $143=$R_1;
 var $144=HEAP32[((15168)>>2)];
 var $145=($143>>>0)<($144>>>0);
 if($145){label=53;break;}else{label=45;break;}
 case 45: 
 var $147=(($R_1+24)|0);
 HEAP32[(($147)>>2)]=$72;
 var $_sum42=((($_sum3)+(16))|0);
 var $148=(($mem+$_sum42)|0);
 var $149=$148;
 var $150=HEAP32[(($149)>>2)];
 var $151=($150|0)==0;
 if($151){label=49;break;}else{label=46;break;}
 case 46: 
 var $153=$150;
 var $154=HEAP32[((15168)>>2)];
 var $155=($153>>>0)<($154>>>0);
 if($155){label=48;break;}else{label=47;break;}
 case 47: 
 var $157=(($R_1+16)|0);
 HEAP32[(($157)>>2)]=$150;
 var $158=(($150+24)|0);
 HEAP32[(($158)>>2)]=$R_1;
 label=49;break;
 case 48: 
 _abort();
 throw "Reached an unreachable!";
 case 49: 
 var $_sum43=((($_sum3)+(20))|0);
 var $161=(($mem+$_sum43)|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==0;
 if($164){var $p_0=$25;var $psize_0=$26;label=56;break;}else{label=50;break;}
 case 50: 
 var $166=$163;
 var $167=HEAP32[((15168)>>2)];
 var $168=($166>>>0)<($167>>>0);
 if($168){label=52;break;}else{label=51;break;}
 case 51: 
 var $170=(($R_1+20)|0);
 HEAP32[(($170)>>2)]=$163;
 var $171=(($163+24)|0);
 HEAP32[(($171)>>2)]=$R_1;
 var $p_0=$25;var $psize_0=$26;label=56;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_sum4=((($14)-(4))|0);
 var $175=(($mem+$_sum4)|0);
 var $176=$175;
 var $177=HEAP32[(($176)>>2)];
 var $178=$177&3;
 var $179=($178|0)==3;
 if($179){label=55;break;}else{var $p_0=$25;var $psize_0=$26;label=56;break;}
 case 55: 
 HEAP32[((15160)>>2)]=$26;
 var $181=HEAP32[(($176)>>2)];
 var $182=$181&-2;
 HEAP32[(($176)>>2)]=$182;
 var $183=$26|1;
 var $_sum35=((($_sum3)+(4))|0);
 var $184=(($mem+$_sum35)|0);
 var $185=$184;
 HEAP32[(($185)>>2)]=$183;
 var $186=$15;
 HEAP32[(($186)>>2)]=$26;
 label=141;break;
 case 56: 
 var $psize_0;
 var $p_0;
 var $188=$p_0;
 var $189=($188>>>0)<($15>>>0);
 if($189){label=57;break;}else{label=140;break;}
 case 57: 
 var $_sum34=((($14)-(4))|0);
 var $191=(($mem+$_sum34)|0);
 var $192=$191;
 var $193=HEAP32[(($192)>>2)];
 var $194=$193&1;
 var $phitmp=($194|0)==0;
 if($phitmp){label=140;break;}else{label=58;break;}
 case 58: 
 var $196=$193&2;
 var $197=($196|0)==0;
 if($197){label=59;break;}else{label=112;break;}
 case 59: 
 var $199=HEAP32[((15176)>>2)];
 var $200=($16|0)==($199|0);
 if($200){label=60;break;}else{label=62;break;}
 case 60: 
 var $202=HEAP32[((15164)>>2)];
 var $203=((($202)+($psize_0))|0);
 HEAP32[((15164)>>2)]=$203;
 HEAP32[((15176)>>2)]=$p_0;
 var $204=$203|1;
 var $205=(($p_0+4)|0);
 HEAP32[(($205)>>2)]=$204;
 var $206=HEAP32[((15172)>>2)];
 var $207=($p_0|0)==($206|0);
 if($207){label=61;break;}else{label=141;break;}
 case 61: 
 HEAP32[((15172)>>2)]=0;
 HEAP32[((15160)>>2)]=0;
 label=141;break;
 case 62: 
 var $210=HEAP32[((15172)>>2)];
 var $211=($16|0)==($210|0);
 if($211){label=63;break;}else{label=64;break;}
 case 63: 
 var $213=HEAP32[((15160)>>2)];
 var $214=((($213)+($psize_0))|0);
 HEAP32[((15160)>>2)]=$214;
 HEAP32[((15172)>>2)]=$p_0;
 var $215=$214|1;
 var $216=(($p_0+4)|0);
 HEAP32[(($216)>>2)]=$215;
 var $217=(($188+$214)|0);
 var $218=$217;
 HEAP32[(($218)>>2)]=$214;
 label=141;break;
 case 64: 
 var $220=$193&-8;
 var $221=((($220)+($psize_0))|0);
 var $222=$193>>>3;
 var $223=($193>>>0)<256;
 if($223){label=65;break;}else{label=77;break;}
 case 65: 
 var $225=(($mem+$14)|0);
 var $226=$225;
 var $227=HEAP32[(($226)>>2)];
 var $_sum2829=$14|4;
 var $228=(($mem+$_sum2829)|0);
 var $229=$228;
 var $230=HEAP32[(($229)>>2)];
 var $231=$222<<1;
 var $232=((15192+($231<<2))|0);
 var $233=$232;
 var $234=($227|0)==($233|0);
 if($234){label=68;break;}else{label=66;break;}
 case 66: 
 var $236=$227;
 var $237=HEAP32[((15168)>>2)];
 var $238=($236>>>0)<($237>>>0);
 if($238){label=76;break;}else{label=67;break;}
 case 67: 
 var $240=(($227+12)|0);
 var $241=HEAP32[(($240)>>2)];
 var $242=($241|0)==($16|0);
 if($242){label=68;break;}else{label=76;break;}
 case 68: 
 var $243=($230|0)==($227|0);
 if($243){label=69;break;}else{label=70;break;}
 case 69: 
 var $245=1<<$222;
 var $246=$245^-1;
 var $247=HEAP32[((15152)>>2)];
 var $248=$247&$246;
 HEAP32[((15152)>>2)]=$248;
 label=110;break;
 case 70: 
 var $250=($230|0)==($233|0);
 if($250){label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre82=(($230+8)|0);
 var $_pre_phi83=$_pre82;label=74;break;
 case 72: 
 var $252=$230;
 var $253=HEAP32[((15168)>>2)];
 var $254=($252>>>0)<($253>>>0);
 if($254){label=75;break;}else{label=73;break;}
 case 73: 
 var $256=(($230+8)|0);
 var $257=HEAP32[(($256)>>2)];
 var $258=($257|0)==($16|0);
 if($258){var $_pre_phi83=$256;label=74;break;}else{label=75;break;}
 case 74: 
 var $_pre_phi83;
 var $259=(($227+12)|0);
 HEAP32[(($259)>>2)]=$230;
 HEAP32[(($_pre_phi83)>>2)]=$227;
 label=110;break;
 case 75: 
 _abort();
 throw "Reached an unreachable!";
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $261=$15;
 var $_sum6=((($14)+(16))|0);
 var $262=(($mem+$_sum6)|0);
 var $263=$262;
 var $264=HEAP32[(($263)>>2)];
 var $_sum78=$14|4;
 var $265=(($mem+$_sum78)|0);
 var $266=$265;
 var $267=HEAP32[(($266)>>2)];
 var $268=($267|0)==($261|0);
 if($268){label=83;break;}else{label=78;break;}
 case 78: 
 var $270=(($mem+$14)|0);
 var $271=$270;
 var $272=HEAP32[(($271)>>2)];
 var $273=$272;
 var $274=HEAP32[((15168)>>2)];
 var $275=($273>>>0)<($274>>>0);
 if($275){label=82;break;}else{label=79;break;}
 case 79: 
 var $277=(($272+12)|0);
 var $278=HEAP32[(($277)>>2)];
 var $279=($278|0)==($261|0);
 if($279){label=80;break;}else{label=82;break;}
 case 80: 
 var $281=(($267+8)|0);
 var $282=HEAP32[(($281)>>2)];
 var $283=($282|0)==($261|0);
 if($283){label=81;break;}else{label=82;break;}
 case 81: 
 HEAP32[(($277)>>2)]=$267;
 HEAP32[(($281)>>2)]=$272;
 var $R7_1=$267;label=90;break;
 case 82: 
 _abort();
 throw "Reached an unreachable!";
 case 83: 
 var $_sum10=((($14)+(12))|0);
 var $286=(($mem+$_sum10)|0);
 var $287=$286;
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=85;break;}
 case 84: 
 var $_sum9=((($14)+(8))|0);
 var $291=(($mem+$_sum9)|0);
 var $292=$291;
 var $293=HEAP32[(($292)>>2)];
 var $294=($293|0)==0;
 if($294){var $R7_1=0;label=90;break;}else{var $R7_0=$293;var $RP9_0=$292;label=85;break;}
 case 85: 
 var $RP9_0;
 var $R7_0;
 var $295=(($R7_0+20)|0);
 var $296=HEAP32[(($295)>>2)];
 var $297=($296|0)==0;
 if($297){label=86;break;}else{var $R7_0=$296;var $RP9_0=$295;label=85;break;}
 case 86: 
 var $299=(($R7_0+16)|0);
 var $300=HEAP32[(($299)>>2)];
 var $301=($300|0)==0;
 if($301){label=87;break;}else{var $R7_0=$300;var $RP9_0=$299;label=85;break;}
 case 87: 
 var $303=$RP9_0;
 var $304=HEAP32[((15168)>>2)];
 var $305=($303>>>0)<($304>>>0);
 if($305){label=89;break;}else{label=88;break;}
 case 88: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=90;break;
 case 89: 
 _abort();
 throw "Reached an unreachable!";
 case 90: 
 var $R7_1;
 var $309=($264|0)==0;
 if($309){label=110;break;}else{label=91;break;}
 case 91: 
 var $_sum21=((($14)+(20))|0);
 var $311=(($mem+$_sum21)|0);
 var $312=$311;
 var $313=HEAP32[(($312)>>2)];
 var $314=((15456+($313<<2))|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($261|0)==($315|0);
 if($316){label=92;break;}else{label=94;break;}
 case 92: 
 HEAP32[(($314)>>2)]=$R7_1;
 var $cond69=($R7_1|0)==0;
 if($cond69){label=93;break;}else{label=100;break;}
 case 93: 
 var $318=1<<$313;
 var $319=$318^-1;
 var $320=HEAP32[((15156)>>2)];
 var $321=$320&$319;
 HEAP32[((15156)>>2)]=$321;
 label=110;break;
 case 94: 
 var $323=$264;
 var $324=HEAP32[((15168)>>2)];
 var $325=($323>>>0)<($324>>>0);
 if($325){label=98;break;}else{label=95;break;}
 case 95: 
 var $327=(($264+16)|0);
 var $328=HEAP32[(($327)>>2)];
 var $329=($328|0)==($261|0);
 if($329){label=96;break;}else{label=97;break;}
 case 96: 
 HEAP32[(($327)>>2)]=$R7_1;
 label=99;break;
 case 97: 
 var $332=(($264+20)|0);
 HEAP32[(($332)>>2)]=$R7_1;
 label=99;break;
 case 98: 
 _abort();
 throw "Reached an unreachable!";
 case 99: 
 var $335=($R7_1|0)==0;
 if($335){label=110;break;}else{label=100;break;}
 case 100: 
 var $337=$R7_1;
 var $338=HEAP32[((15168)>>2)];
 var $339=($337>>>0)<($338>>>0);
 if($339){label=109;break;}else{label=101;break;}
 case 101: 
 var $341=(($R7_1+24)|0);
 HEAP32[(($341)>>2)]=$264;
 var $_sum22=((($14)+(8))|0);
 var $342=(($mem+$_sum22)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=105;break;}else{label=102;break;}
 case 102: 
 var $347=$344;
 var $348=HEAP32[((15168)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=104;break;}else{label=103;break;}
 case 103: 
 var $351=(($R7_1+16)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=105;break;
 case 104: 
 _abort();
 throw "Reached an unreachable!";
 case 105: 
 var $_sum23=((($14)+(12))|0);
 var $355=(($mem+$_sum23)|0);
 var $356=$355;
 var $357=HEAP32[(($356)>>2)];
 var $358=($357|0)==0;
 if($358){label=110;break;}else{label=106;break;}
 case 106: 
 var $360=$357;
 var $361=HEAP32[((15168)>>2)];
 var $362=($360>>>0)<($361>>>0);
 if($362){label=108;break;}else{label=107;break;}
 case 107: 
 var $364=(($R7_1+20)|0);
 HEAP32[(($364)>>2)]=$357;
 var $365=(($357+24)|0);
 HEAP32[(($365)>>2)]=$R7_1;
 label=110;break;
 case 108: 
 _abort();
 throw "Reached an unreachable!";
 case 109: 
 _abort();
 throw "Reached an unreachable!";
 case 110: 
 var $368=$221|1;
 var $369=(($p_0+4)|0);
 HEAP32[(($369)>>2)]=$368;
 var $370=(($188+$221)|0);
 var $371=$370;
 HEAP32[(($371)>>2)]=$221;
 var $372=HEAP32[((15172)>>2)];
 var $373=($p_0|0)==($372|0);
 if($373){label=111;break;}else{var $psize_1=$221;label=113;break;}
 case 111: 
 HEAP32[((15160)>>2)]=$221;
 label=141;break;
 case 112: 
 var $376=$193&-2;
 HEAP32[(($192)>>2)]=$376;
 var $377=$psize_0|1;
 var $378=(($p_0+4)|0);
 HEAP32[(($378)>>2)]=$377;
 var $379=(($188+$psize_0)|0);
 var $380=$379;
 HEAP32[(($380)>>2)]=$psize_0;
 var $psize_1=$psize_0;label=113;break;
 case 113: 
 var $psize_1;
 var $382=$psize_1>>>3;
 var $383=($psize_1>>>0)<256;
 if($383){label=114;break;}else{label=119;break;}
 case 114: 
 var $385=$382<<1;
 var $386=((15192+($385<<2))|0);
 var $387=$386;
 var $388=HEAP32[((15152)>>2)];
 var $389=1<<$382;
 var $390=$388&$389;
 var $391=($390|0)==0;
 if($391){label=115;break;}else{label=116;break;}
 case 115: 
 var $393=$388|$389;
 HEAP32[((15152)>>2)]=$393;
 var $_sum19_pre=((($385)+(2))|0);
 var $_pre=((15192+($_sum19_pre<<2))|0);
 var $F16_0=$387;var $_pre_phi=$_pre;label=118;break;
 case 116: 
 var $_sum20=((($385)+(2))|0);
 var $395=((15192+($_sum20<<2))|0);
 var $396=HEAP32[(($395)>>2)];
 var $397=$396;
 var $398=HEAP32[((15168)>>2)];
 var $399=($397>>>0)<($398>>>0);
 if($399){label=117;break;}else{var $F16_0=$396;var $_pre_phi=$395;label=118;break;}
 case 117: 
 _abort();
 throw "Reached an unreachable!";
 case 118: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$p_0;
 var $402=(($F16_0+12)|0);
 HEAP32[(($402)>>2)]=$p_0;
 var $403=(($p_0+8)|0);
 HEAP32[(($403)>>2)]=$F16_0;
 var $404=(($p_0+12)|0);
 HEAP32[(($404)>>2)]=$387;
 label=141;break;
 case 119: 
 var $406=$p_0;
 var $407=$psize_1>>>8;
 var $408=($407|0)==0;
 if($408){var $I18_0=0;label=122;break;}else{label=120;break;}
 case 120: 
 var $410=($psize_1>>>0)>16777215;
 if($410){var $I18_0=31;label=122;break;}else{label=121;break;}
 case 121: 
 var $412=((($407)+(1048320))|0);
 var $413=$412>>>16;
 var $414=$413&8;
 var $415=$407<<$414;
 var $416=((($415)+(520192))|0);
 var $417=$416>>>16;
 var $418=$417&4;
 var $419=$418|$414;
 var $420=$415<<$418;
 var $421=((($420)+(245760))|0);
 var $422=$421>>>16;
 var $423=$422&2;
 var $424=$419|$423;
 var $425=(((14)-($424))|0);
 var $426=$420<<$423;
 var $427=$426>>>15;
 var $428=((($425)+($427))|0);
 var $429=$428<<1;
 var $430=((($428)+(7))|0);
 var $431=$psize_1>>>($430>>>0);
 var $432=$431&1;
 var $433=$432|$429;
 var $I18_0=$433;label=122;break;
 case 122: 
 var $I18_0;
 var $435=((15456+($I18_0<<2))|0);
 var $436=(($p_0+28)|0);
 var $I18_0_c=$I18_0;
 HEAP32[(($436)>>2)]=$I18_0_c;
 var $437=(($p_0+20)|0);
 HEAP32[(($437)>>2)]=0;
 var $438=(($p_0+16)|0);
 HEAP32[(($438)>>2)]=0;
 var $439=HEAP32[((15156)>>2)];
 var $440=1<<$I18_0;
 var $441=$439&$440;
 var $442=($441|0)==0;
 if($442){label=123;break;}else{label=124;break;}
 case 123: 
 var $444=$439|$440;
 HEAP32[((15156)>>2)]=$444;
 HEAP32[(($435)>>2)]=$406;
 var $445=(($p_0+24)|0);
 var $_c=$435;
 HEAP32[(($445)>>2)]=$_c;
 var $446=(($p_0+12)|0);
 HEAP32[(($446)>>2)]=$p_0;
 var $447=(($p_0+8)|0);
 HEAP32[(($447)>>2)]=$p_0;
 label=137;break;
 case 124: 
 var $449=HEAP32[(($435)>>2)];
 var $450=($I18_0|0)==31;
 if($450){var $455=0;label=126;break;}else{label=125;break;}
 case 125: 
 var $452=$I18_0>>>1;
 var $453=(((25)-($452))|0);
 var $455=$453;label=126;break;
 case 126: 
 var $455;
 var $456=(($449+4)|0);
 var $457=HEAP32[(($456)>>2)];
 var $458=$457&-8;
 var $459=($458|0)==($psize_1|0);
 if($459){var $T_0_lcssa=$449;label=133;break;}else{label=127;break;}
 case 127: 
 var $460=$psize_1<<$455;
 var $T_071=$449;var $K19_072=$460;label=129;break;
 case 128: 
 var $462=$K19_072<<1;
 var $463=(($470+4)|0);
 var $464=HEAP32[(($463)>>2)];
 var $465=$464&-8;
 var $466=($465|0)==($psize_1|0);
 if($466){var $T_0_lcssa=$470;label=133;break;}else{var $T_071=$470;var $K19_072=$462;label=129;break;}
 case 129: 
 var $K19_072;
 var $T_071;
 var $468=$K19_072>>>31;
 var $469=(($T_071+16+($468<<2))|0);
 var $470=HEAP32[(($469)>>2)];
 var $471=($470|0)==0;
 if($471){label=130;break;}else{label=128;break;}
 case 130: 
 var $473=$469;
 var $474=HEAP32[((15168)>>2)];
 var $475=($473>>>0)<($474>>>0);
 if($475){label=132;break;}else{label=131;break;}
 case 131: 
 HEAP32[(($469)>>2)]=$406;
 var $477=(($p_0+24)|0);
 var $T_0_c16=$T_071;
 HEAP32[(($477)>>2)]=$T_0_c16;
 var $478=(($p_0+12)|0);
 HEAP32[(($478)>>2)]=$p_0;
 var $479=(($p_0+8)|0);
 HEAP32[(($479)>>2)]=$p_0;
 label=137;break;
 case 132: 
 _abort();
 throw "Reached an unreachable!";
 case 133: 
 var $T_0_lcssa;
 var $481=(($T_0_lcssa+8)|0);
 var $482=HEAP32[(($481)>>2)];
 var $483=$T_0_lcssa;
 var $484=HEAP32[((15168)>>2)];
 var $485=($483>>>0)<($484>>>0);
 if($485){label=136;break;}else{label=134;break;}
 case 134: 
 var $487=$482;
 var $488=($487>>>0)<($484>>>0);
 if($488){label=136;break;}else{label=135;break;}
 case 135: 
 var $490=(($482+12)|0);
 HEAP32[(($490)>>2)]=$406;
 HEAP32[(($481)>>2)]=$406;
 var $491=(($p_0+8)|0);
 var $_c15=$482;
 HEAP32[(($491)>>2)]=$_c15;
 var $492=(($p_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($492)>>2)]=$T_0_c;
 var $493=(($p_0+24)|0);
 HEAP32[(($493)>>2)]=0;
 label=137;break;
 case 136: 
 _abort();
 throw "Reached an unreachable!";
 case 137: 
 var $495=HEAP32[((15184)>>2)];
 var $496=((($495)-(1))|0);
 HEAP32[((15184)>>2)]=$496;
 var $497=($496|0)==0;
 if($497){var $sp_0_in_i=15608;label=138;break;}else{label=141;break;}
 case 138: 
 var $sp_0_in_i;
 var $sp_0_i=HEAP32[(($sp_0_in_i)>>2)];
 var $498=($sp_0_i|0)==0;
 var $499=(($sp_0_i+8)|0);
 if($498){label=139;break;}else{var $sp_0_in_i=$499;label=138;break;}
 case 139: 
 HEAP32[((15184)>>2)]=-1;
 label=141;break;
 case 140: 
 _abort();
 throw "Reached an unreachable!";
 case 141: 
 return;
  default: assert(0, "bad label: " + label);
 }

}
Module["_free"] = _free;

function _realloc($oldmem,$bytes){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=($oldmem|0)==0;
 if($1){label=2;break;}else{label=3;break;}
 case 2: 
 var $3=_malloc($bytes);
 var $mem_0=$3;label=79;break;
 case 3: 
 var $5=($bytes>>>0)>4294967231;
 if($5){label=4;break;}else{label=5;break;}
 case 4: 
 var $7=___errno_location();
 HEAP32[(($7)>>2)]=12;
 var $mem_0=0;label=79;break;
 case 5: 
 var $9=($bytes>>>0)<11;
 if($9){var $14=16;label=7;break;}else{label=6;break;}
 case 6: 
 var $11=((($bytes)+(11))|0);
 var $12=$11&-8;
 var $14=$12;label=7;break;
 case 7: 
 var $14;
 var $15=((($oldmem)-(8))|0);
 var $16=((($oldmem)-(4))|0);
 var $17=$16;
 var $18=HEAP32[(($17)>>2)];
 var $19=$18&-8;
 var $_sum=((($19)-(8))|0);
 var $20=(($oldmem+$_sum)|0);
 var $21=$20;
 var $22=HEAP32[((15168)>>2)];
 var $23=($15>>>0)<($22>>>0);
 if($23){label=76;break;}else{label=8;break;}
 case 8: 
 var $25=$18&3;
 var $26=($25|0)!=1;
 var $27=($_sum|0)>-8;
 var $or_cond_i=$26&$27;
 if($or_cond_i){label=9;break;}else{label=76;break;}
 case 9: 
 var $_sum3334_i=$19|4;
 var $_sum1=((($_sum3334_i)-(8))|0);
 var $29=(($oldmem+$_sum1)|0);
 var $30=$29;
 var $31=HEAP32[(($30)>>2)];
 var $32=$31&1;
 var $phitmp_i=($32|0)==0;
 if($phitmp_i){label=76;break;}else{label=10;break;}
 case 10: 
 var $34=($25|0)==0;
 if($34){label=11;break;}else{label=13;break;}
 case 11: 
 var $36=($14>>>0)<256;
 var $37=$14|4;
 var $38=($19>>>0)<($37>>>0);
 var $or_cond=$36|$38;
 if($or_cond){label=77;break;}else{label=12;break;}
 case 12: 
 var $40=((($19)-($14))|0);
 var $41=HEAP32[((14776)>>2)];
 var $42=$41<<1;
 var $43=($40>>>0)>($42>>>0);
 if($43){label=77;break;}else{var $mem_0=$oldmem;label=79;break;}
 case 13: 
 var $45=($19>>>0)<($14>>>0);
 if($45){label=16;break;}else{label=14;break;}
 case 14: 
 var $47=((($19)-($14))|0);
 var $48=($47>>>0)>15;
 if($48){label=15;break;}else{var $mem_0=$oldmem;label=79;break;}
 case 15: 
 var $_sum2=((($14)-(8))|0);
 var $50=(($oldmem+$_sum2)|0);
 var $51=$50;
 var $52=$18&1;
 var $53=$52|$14;
 var $54=$53|2;
 HEAP32[(($17)>>2)]=$54;
 var $_sum29_i3=$14|4;
 var $_sum4=((($_sum29_i3)-(8))|0);
 var $55=(($oldmem+$_sum4)|0);
 var $56=$55;
 var $57=$47|3;
 HEAP32[(($56)>>2)]=$57;
 var $58=HEAP32[(($30)>>2)];
 var $59=$58|1;
 HEAP32[(($30)>>2)]=$59;
 _dispose_chunk($51,$47);
 var $mem_0=$oldmem;label=79;break;
 case 16: 
 var $61=HEAP32[((15176)>>2)];
 var $62=($21|0)==($61|0);
 if($62){label=17;break;}else{label=19;break;}
 case 17: 
 var $64=HEAP32[((15164)>>2)];
 var $65=((($64)+($19))|0);
 var $66=($65>>>0)>($14>>>0);
 if($66){label=18;break;}else{label=77;break;}
 case 18: 
 var $68=((($65)-($14))|0);
 var $_sum28=((($14)-(8))|0);
 var $69=(($oldmem+$_sum28)|0);
 var $70=$69;
 var $71=$18&1;
 var $72=$71|$14;
 var $73=$72|2;
 HEAP32[(($17)>>2)]=$73;
 var $_sum28_i29=$14|4;
 var $_sum30=((($_sum28_i29)-(8))|0);
 var $74=(($oldmem+$_sum30)|0);
 var $75=$74;
 var $76=$68|1;
 HEAP32[(($75)>>2)]=$76;
 HEAP32[((15176)>>2)]=$70;
 HEAP32[((15164)>>2)]=$68;
 var $mem_0=$oldmem;label=79;break;
 case 19: 
 var $78=HEAP32[((15172)>>2)];
 var $79=($21|0)==($78|0);
 if($79){label=20;break;}else{label=25;break;}
 case 20: 
 var $81=HEAP32[((15160)>>2)];
 var $82=((($81)+($19))|0);
 var $83=($82>>>0)<($14>>>0);
 if($83){label=77;break;}else{label=21;break;}
 case 21: 
 var $85=((($82)-($14))|0);
 var $86=($85>>>0)>15;
 if($86){label=22;break;}else{label=23;break;}
 case 22: 
 var $_sum23=((($14)-(8))|0);
 var $88=(($oldmem+$_sum23)|0);
 var $89=$88;
 var $_sum24=((($82)-(8))|0);
 var $90=(($oldmem+$_sum24)|0);
 var $91=$18&1;
 var $92=$91|$14;
 var $93=$92|2;
 HEAP32[(($17)>>2)]=$93;
 var $_sum25_i25=$14|4;
 var $_sum26=((($_sum25_i25)-(8))|0);
 var $94=(($oldmem+$_sum26)|0);
 var $95=$94;
 var $96=$85|1;
 HEAP32[(($95)>>2)]=$96;
 var $97=$90;
 HEAP32[(($97)>>2)]=$85;
 var $_sum27=((($82)-(4))|0);
 var $98=(($oldmem+$_sum27)|0);
 var $99=$98;
 var $100=HEAP32[(($99)>>2)];
 var $101=$100&-2;
 HEAP32[(($99)>>2)]=$101;
 var $storemerge_i=$89;var $storemerge27_i=$85;label=24;break;
 case 23: 
 var $103=$18&1;
 var $104=$103|$82;
 var $105=$104|2;
 HEAP32[(($17)>>2)]=$105;
 var $_sum22=((($82)-(4))|0);
 var $106=(($oldmem+$_sum22)|0);
 var $107=$106;
 var $108=HEAP32[(($107)>>2)];
 var $109=$108|1;
 HEAP32[(($107)>>2)]=$109;
 var $storemerge_i=0;var $storemerge27_i=0;label=24;break;
 case 24: 
 var $storemerge27_i;
 var $storemerge_i;
 HEAP32[((15160)>>2)]=$storemerge27_i;
 HEAP32[((15172)>>2)]=$storemerge_i;
 var $mem_0=$oldmem;label=79;break;
 case 25: 
 var $112=$31&2;
 var $113=($112|0)==0;
 if($113){label=26;break;}else{label=77;break;}
 case 26: 
 var $115=$31&-8;
 var $116=((($115)+($19))|0);
 var $117=($116>>>0)<($14>>>0);
 if($117){label=77;break;}else{label=27;break;}
 case 27: 
 var $119=((($116)-($14))|0);
 var $120=$31>>>3;
 var $121=($31>>>0)<256;
 if($121){label=28;break;}else{label=40;break;}
 case 28: 
 var $123=(($oldmem+$19)|0);
 var $124=$123;
 var $125=HEAP32[(($124)>>2)];
 var $126=(($oldmem+$_sum3334_i)|0);
 var $127=$126;
 var $128=HEAP32[(($127)>>2)];
 var $129=$120<<1;
 var $130=((15192+($129<<2))|0);
 var $131=$130;
 var $132=($125|0)==($131|0);
 if($132){label=31;break;}else{label=29;break;}
 case 29: 
 var $134=$125;
 var $135=($134>>>0)<($22>>>0);
 if($135){label=39;break;}else{label=30;break;}
 case 30: 
 var $137=(($125+12)|0);
 var $138=HEAP32[(($137)>>2)];
 var $139=($138|0)==($21|0);
 if($139){label=31;break;}else{label=39;break;}
 case 31: 
 var $140=($128|0)==($125|0);
 if($140){label=32;break;}else{label=33;break;}
 case 32: 
 var $142=1<<$120;
 var $143=$142^-1;
 var $144=HEAP32[((15152)>>2)];
 var $145=$144&$143;
 HEAP32[((15152)>>2)]=$145;
 label=73;break;
 case 33: 
 var $147=($128|0)==($131|0);
 if($147){label=34;break;}else{label=35;break;}
 case 34: 
 var $_pre_i=(($128+8)|0);
 var $_pre_phi_i=$_pre_i;label=37;break;
 case 35: 
 var $149=$128;
 var $150=($149>>>0)<($22>>>0);
 if($150){label=38;break;}else{label=36;break;}
 case 36: 
 var $152=(($128+8)|0);
 var $153=HEAP32[(($152)>>2)];
 var $154=($153|0)==($21|0);
 if($154){var $_pre_phi_i=$152;label=37;break;}else{label=38;break;}
 case 37: 
 var $_pre_phi_i;
 var $155=(($125+12)|0);
 HEAP32[(($155)>>2)]=$128;
 HEAP32[(($_pre_phi_i)>>2)]=$125;
 label=73;break;
 case 38: 
 _abort();
 throw "Reached an unreachable!";
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $157=$20;
 var $_sum5=((($19)+(16))|0);
 var $158=(($oldmem+$_sum5)|0);
 var $159=$158;
 var $160=HEAP32[(($159)>>2)];
 var $161=(($oldmem+$_sum3334_i)|0);
 var $162=$161;
 var $163=HEAP32[(($162)>>2)];
 var $164=($163|0)==($157|0);
 if($164){label=46;break;}else{label=41;break;}
 case 41: 
 var $166=(($oldmem+$19)|0);
 var $167=$166;
 var $168=HEAP32[(($167)>>2)];
 var $169=$168;
 var $170=($169>>>0)<($22>>>0);
 if($170){label=45;break;}else{label=42;break;}
 case 42: 
 var $172=(($168+12)|0);
 var $173=HEAP32[(($172)>>2)];
 var $174=($173|0)==($157|0);
 if($174){label=43;break;}else{label=45;break;}
 case 43: 
 var $176=(($163+8)|0);
 var $177=HEAP32[(($176)>>2)];
 var $178=($177|0)==($157|0);
 if($178){label=44;break;}else{label=45;break;}
 case 44: 
 HEAP32[(($172)>>2)]=$163;
 HEAP32[(($176)>>2)]=$168;
 var $R_1_i=$163;label=53;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum17=((($19)+(12))|0);
 var $181=(($oldmem+$_sum17)|0);
 var $182=$181;
 var $183=HEAP32[(($182)>>2)];
 var $184=($183|0)==0;
 if($184){label=47;break;}else{var $R_0_i=$183;var $RP_0_i=$182;label=48;break;}
 case 47: 
 var $_sum18=((($19)+(8))|0);
 var $186=(($oldmem+$_sum18)|0);
 var $187=$186;
 var $188=HEAP32[(($187)>>2)];
 var $189=($188|0)==0;
 if($189){var $R_1_i=0;label=53;break;}else{var $R_0_i=$188;var $RP_0_i=$187;label=48;break;}
 case 48: 
 var $RP_0_i;
 var $R_0_i;
 var $190=(($R_0_i+20)|0);
 var $191=HEAP32[(($190)>>2)];
 var $192=($191|0)==0;
 if($192){label=49;break;}else{var $R_0_i=$191;var $RP_0_i=$190;label=48;break;}
 case 49: 
 var $194=(($R_0_i+16)|0);
 var $195=HEAP32[(($194)>>2)];
 var $196=($195|0)==0;
 if($196){label=50;break;}else{var $R_0_i=$195;var $RP_0_i=$194;label=48;break;}
 case 50: 
 var $198=$RP_0_i;
 var $199=($198>>>0)<($22>>>0);
 if($199){label=52;break;}else{label=51;break;}
 case 51: 
 HEAP32[(($RP_0_i)>>2)]=0;
 var $R_1_i=$R_0_i;label=53;break;
 case 52: 
 _abort();
 throw "Reached an unreachable!";
 case 53: 
 var $R_1_i;
 var $203=($160|0)==0;
 if($203){label=73;break;}else{label=54;break;}
 case 54: 
 var $_sum9=((($19)+(20))|0);
 var $205=(($oldmem+$_sum9)|0);
 var $206=$205;
 var $207=HEAP32[(($206)>>2)];
 var $208=((15456+($207<<2))|0);
 var $209=HEAP32[(($208)>>2)];
 var $210=($157|0)==($209|0);
 if($210){label=55;break;}else{label=57;break;}
 case 55: 
 HEAP32[(($208)>>2)]=$R_1_i;
 var $cond_i=($R_1_i|0)==0;
 if($cond_i){label=56;break;}else{label=63;break;}
 case 56: 
 var $212=1<<$207;
 var $213=$212^-1;
 var $214=HEAP32[((15156)>>2)];
 var $215=$214&$213;
 HEAP32[((15156)>>2)]=$215;
 label=73;break;
 case 57: 
 var $217=$160;
 var $218=HEAP32[((15168)>>2)];
 var $219=($217>>>0)<($218>>>0);
 if($219){label=61;break;}else{label=58;break;}
 case 58: 
 var $221=(($160+16)|0);
 var $222=HEAP32[(($221)>>2)];
 var $223=($222|0)==($157|0);
 if($223){label=59;break;}else{label=60;break;}
 case 59: 
 HEAP32[(($221)>>2)]=$R_1_i;
 label=62;break;
 case 60: 
 var $226=(($160+20)|0);
 HEAP32[(($226)>>2)]=$R_1_i;
 label=62;break;
 case 61: 
 _abort();
 throw "Reached an unreachable!";
 case 62: 
 var $229=($R_1_i|0)==0;
 if($229){label=73;break;}else{label=63;break;}
 case 63: 
 var $231=$R_1_i;
 var $232=HEAP32[((15168)>>2)];
 var $233=($231>>>0)<($232>>>0);
 if($233){label=72;break;}else{label=64;break;}
 case 64: 
 var $235=(($R_1_i+24)|0);
 HEAP32[(($235)>>2)]=$160;
 var $_sum10=((($19)+(8))|0);
 var $236=(($oldmem+$_sum10)|0);
 var $237=$236;
 var $238=HEAP32[(($237)>>2)];
 var $239=($238|0)==0;
 if($239){label=68;break;}else{label=65;break;}
 case 65: 
 var $241=$238;
 var $242=HEAP32[((15168)>>2)];
 var $243=($241>>>0)<($242>>>0);
 if($243){label=67;break;}else{label=66;break;}
 case 66: 
 var $245=(($R_1_i+16)|0);
 HEAP32[(($245)>>2)]=$238;
 var $246=(($238+24)|0);
 HEAP32[(($246)>>2)]=$R_1_i;
 label=68;break;
 case 67: 
 _abort();
 throw "Reached an unreachable!";
 case 68: 
 var $_sum11=((($19)+(12))|0);
 var $249=(($oldmem+$_sum11)|0);
 var $250=$249;
 var $251=HEAP32[(($250)>>2)];
 var $252=($251|0)==0;
 if($252){label=73;break;}else{label=69;break;}
 case 69: 
 var $254=$251;
 var $255=HEAP32[((15168)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=71;break;}else{label=70;break;}
 case 70: 
 var $258=(($R_1_i+20)|0);
 HEAP32[(($258)>>2)]=$251;
 var $259=(($251+24)|0);
 HEAP32[(($259)>>2)]=$R_1_i;
 label=73;break;
 case 71: 
 _abort();
 throw "Reached an unreachable!";
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 var $263=($119>>>0)<16;
 if($263){label=74;break;}else{label=75;break;}
 case 74: 
 var $264=HEAP32[(($17)>>2)];
 var $265=$264&1;
 var $266=$116|$265;
 var $267=$266|2;
 HEAP32[(($17)>>2)]=$267;
 var $_sum910_i=$116|4;
 var $_sum16=((($_sum910_i)-(8))|0);
 var $268=(($oldmem+$_sum16)|0);
 var $269=$268;
 var $270=HEAP32[(($269)>>2)];
 var $271=$270|1;
 HEAP32[(($269)>>2)]=$271;
 var $mem_0=$oldmem;label=79;break;
 case 75: 
 var $_sum12=((($14)-(8))|0);
 var $273=(($oldmem+$_sum12)|0);
 var $274=$273;
 var $275=HEAP32[(($17)>>2)];
 var $276=$275&1;
 var $277=$276|$14;
 var $278=$277|2;
 HEAP32[(($17)>>2)]=$278;
 var $_sum5_i13=$14|4;
 var $_sum14=((($_sum5_i13)-(8))|0);
 var $279=(($oldmem+$_sum14)|0);
 var $280=$279;
 var $281=$119|3;
 HEAP32[(($280)>>2)]=$281;
 var $_sum78_i=$116|4;
 var $_sum15=((($_sum78_i)-(8))|0);
 var $282=(($oldmem+$_sum15)|0);
 var $283=$282;
 var $284=HEAP32[(($283)>>2)];
 var $285=$284|1;
 HEAP32[(($283)>>2)]=$285;
 _dispose_chunk($274,$119);
 var $mem_0=$oldmem;label=79;break;
 case 76: 
 _abort();
 throw "Reached an unreachable!";
 case 77: 
 var $286=_malloc($bytes);
 var $287=($286|0)==0;
 if($287){var $mem_0=0;label=79;break;}else{label=78;break;}
 case 78: 
 var $289=HEAP32[(($17)>>2)];
 var $290=$289&-8;
 var $291=$289&3;
 var $292=($291|0)==0;
 var $293=($292?8:4);
 var $294=((($290)-($293))|0);
 var $295=($294>>>0)<($bytes>>>0);
 var $296=($295?$294:$bytes);
 assert($296 % 1 === 0);(_memcpy($286, $oldmem, $296)|0);
 _free($oldmem);
 var $mem_0=$286;label=79;break;
 case 79: 
 var $mem_0;
 return $mem_0;
  default: assert(0, "bad label: " + label);
 }

}
Module["_realloc"] = _realloc;

function _dispose_chunk($p,$psize){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=$p;
 var $2=(($1+$psize)|0);
 var $3=$2;
 var $4=(($p+4)|0);
 var $5=HEAP32[(($4)>>2)];
 var $6=$5&1;
 var $7=($6|0)==0;
 if($7){label=2;break;}else{var $_0=$p;var $_02=$psize;label=54;break;}
 case 2: 
 var $9=(($p)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=$5&3;
 var $12=($11|0)==0;
 if($12){label=135;break;}else{label=3;break;}
 case 3: 
 var $14=(((-$10))|0);
 var $15=(($1+$14)|0);
 var $16=$15;
 var $17=((($10)+($psize))|0);
 var $18=HEAP32[((15168)>>2)];
 var $19=($15>>>0)<($18>>>0);
 if($19){label=53;break;}else{label=4;break;}
 case 4: 
 var $21=HEAP32[((15172)>>2)];
 var $22=($16|0)==($21|0);
 if($22){label=51;break;}else{label=5;break;}
 case 5: 
 var $24=$10>>>3;
 var $25=($10>>>0)<256;
 if($25){label=6;break;}else{label=18;break;}
 case 6: 
 var $_sum35=(((8)-($10))|0);
 var $27=(($1+$_sum35)|0);
 var $28=$27;
 var $29=HEAP32[(($28)>>2)];
 var $_sum36=(((12)-($10))|0);
 var $30=(($1+$_sum36)|0);
 var $31=$30;
 var $32=HEAP32[(($31)>>2)];
 var $33=$24<<1;
 var $34=((15192+($33<<2))|0);
 var $35=$34;
 var $36=($29|0)==($35|0);
 if($36){label=9;break;}else{label=7;break;}
 case 7: 
 var $38=$29;
 var $39=($38>>>0)<($18>>>0);
 if($39){label=17;break;}else{label=8;break;}
 case 8: 
 var $41=(($29+12)|0);
 var $42=HEAP32[(($41)>>2)];
 var $43=($42|0)==($16|0);
 if($43){label=9;break;}else{label=17;break;}
 case 9: 
 var $44=($32|0)==($29|0);
 if($44){label=10;break;}else{label=11;break;}
 case 10: 
 var $46=1<<$24;
 var $47=$46^-1;
 var $48=HEAP32[((15152)>>2)];
 var $49=$48&$47;
 HEAP32[((15152)>>2)]=$49;
 var $_0=$16;var $_02=$17;label=54;break;
 case 11: 
 var $51=($32|0)==($35|0);
 if($51){label=12;break;}else{label=13;break;}
 case 12: 
 var $_pre71=(($32+8)|0);
 var $_pre_phi72=$_pre71;label=15;break;
 case 13: 
 var $53=$32;
 var $54=($53>>>0)<($18>>>0);
 if($54){label=16;break;}else{label=14;break;}
 case 14: 
 var $56=(($32+8)|0);
 var $57=HEAP32[(($56)>>2)];
 var $58=($57|0)==($16|0);
 if($58){var $_pre_phi72=$56;label=15;break;}else{label=16;break;}
 case 15: 
 var $_pre_phi72;
 var $59=(($29+12)|0);
 HEAP32[(($59)>>2)]=$32;
 HEAP32[(($_pre_phi72)>>2)]=$29;
 var $_0=$16;var $_02=$17;label=54;break;
 case 16: 
 _abort();
 throw "Reached an unreachable!";
 case 17: 
 _abort();
 throw "Reached an unreachable!";
 case 18: 
 var $61=$15;
 var $_sum26=(((24)-($10))|0);
 var $62=(($1+$_sum26)|0);
 var $63=$62;
 var $64=HEAP32[(($63)>>2)];
 var $_sum27=(((12)-($10))|0);
 var $65=(($1+$_sum27)|0);
 var $66=$65;
 var $67=HEAP32[(($66)>>2)];
 var $68=($67|0)==($61|0);
 if($68){label=24;break;}else{label=19;break;}
 case 19: 
 var $_sum33=(((8)-($10))|0);
 var $70=(($1+$_sum33)|0);
 var $71=$70;
 var $72=HEAP32[(($71)>>2)];
 var $73=$72;
 var $74=($73>>>0)<($18>>>0);
 if($74){label=23;break;}else{label=20;break;}
 case 20: 
 var $76=(($72+12)|0);
 var $77=HEAP32[(($76)>>2)];
 var $78=($77|0)==($61|0);
 if($78){label=21;break;}else{label=23;break;}
 case 21: 
 var $80=(($67+8)|0);
 var $81=HEAP32[(($80)>>2)];
 var $82=($81|0)==($61|0);
 if($82){label=22;break;}else{label=23;break;}
 case 22: 
 HEAP32[(($76)>>2)]=$67;
 HEAP32[(($80)>>2)]=$72;
 var $R_1=$67;label=31;break;
 case 23: 
 _abort();
 throw "Reached an unreachable!";
 case 24: 
 var $_sum28=(((16)-($10))|0);
 var $_sum29=((($_sum28)+(4))|0);
 var $85=(($1+$_sum29)|0);
 var $86=$85;
 var $87=HEAP32[(($86)>>2)];
 var $88=($87|0)==0;
 if($88){label=25;break;}else{var $R_0=$87;var $RP_0=$86;label=26;break;}
 case 25: 
 var $90=(($1+$_sum28)|0);
 var $91=$90;
 var $92=HEAP32[(($91)>>2)];
 var $93=($92|0)==0;
 if($93){var $R_1=0;label=31;break;}else{var $R_0=$92;var $RP_0=$91;label=26;break;}
 case 26: 
 var $RP_0;
 var $R_0;
 var $94=(($R_0+20)|0);
 var $95=HEAP32[(($94)>>2)];
 var $96=($95|0)==0;
 if($96){label=27;break;}else{var $R_0=$95;var $RP_0=$94;label=26;break;}
 case 27: 
 var $98=(($R_0+16)|0);
 var $99=HEAP32[(($98)>>2)];
 var $100=($99|0)==0;
 if($100){label=28;break;}else{var $R_0=$99;var $RP_0=$98;label=26;break;}
 case 28: 
 var $102=$RP_0;
 var $103=($102>>>0)<($18>>>0);
 if($103){label=30;break;}else{label=29;break;}
 case 29: 
 HEAP32[(($RP_0)>>2)]=0;
 var $R_1=$R_0;label=31;break;
 case 30: 
 _abort();
 throw "Reached an unreachable!";
 case 31: 
 var $R_1;
 var $107=($64|0)==0;
 if($107){var $_0=$16;var $_02=$17;label=54;break;}else{label=32;break;}
 case 32: 
 var $_sum30=(((28)-($10))|0);
 var $109=(($1+$_sum30)|0);
 var $110=$109;
 var $111=HEAP32[(($110)>>2)];
 var $112=((15456+($111<<2))|0);
 var $113=HEAP32[(($112)>>2)];
 var $114=($61|0)==($113|0);
 if($114){label=33;break;}else{label=35;break;}
 case 33: 
 HEAP32[(($112)>>2)]=$R_1;
 var $cond=($R_1|0)==0;
 if($cond){label=34;break;}else{label=41;break;}
 case 34: 
 var $116=1<<$111;
 var $117=$116^-1;
 var $118=HEAP32[((15156)>>2)];
 var $119=$118&$117;
 HEAP32[((15156)>>2)]=$119;
 var $_0=$16;var $_02=$17;label=54;break;
 case 35: 
 var $121=$64;
 var $122=HEAP32[((15168)>>2)];
 var $123=($121>>>0)<($122>>>0);
 if($123){label=39;break;}else{label=36;break;}
 case 36: 
 var $125=(($64+16)|0);
 var $126=HEAP32[(($125)>>2)];
 var $127=($126|0)==($61|0);
 if($127){label=37;break;}else{label=38;break;}
 case 37: 
 HEAP32[(($125)>>2)]=$R_1;
 label=40;break;
 case 38: 
 var $130=(($64+20)|0);
 HEAP32[(($130)>>2)]=$R_1;
 label=40;break;
 case 39: 
 _abort();
 throw "Reached an unreachable!";
 case 40: 
 var $133=($R_1|0)==0;
 if($133){var $_0=$16;var $_02=$17;label=54;break;}else{label=41;break;}
 case 41: 
 var $135=$R_1;
 var $136=HEAP32[((15168)>>2)];
 var $137=($135>>>0)<($136>>>0);
 if($137){label=50;break;}else{label=42;break;}
 case 42: 
 var $139=(($R_1+24)|0);
 HEAP32[(($139)>>2)]=$64;
 var $_sum31=(((16)-($10))|0);
 var $140=(($1+$_sum31)|0);
 var $141=$140;
 var $142=HEAP32[(($141)>>2)];
 var $143=($142|0)==0;
 if($143){label=46;break;}else{label=43;break;}
 case 43: 
 var $145=$142;
 var $146=HEAP32[((15168)>>2)];
 var $147=($145>>>0)<($146>>>0);
 if($147){label=45;break;}else{label=44;break;}
 case 44: 
 var $149=(($R_1+16)|0);
 HEAP32[(($149)>>2)]=$142;
 var $150=(($142+24)|0);
 HEAP32[(($150)>>2)]=$R_1;
 label=46;break;
 case 45: 
 _abort();
 throw "Reached an unreachable!";
 case 46: 
 var $_sum32=((($_sum31)+(4))|0);
 var $153=(($1+$_sum32)|0);
 var $154=$153;
 var $155=HEAP32[(($154)>>2)];
 var $156=($155|0)==0;
 if($156){var $_0=$16;var $_02=$17;label=54;break;}else{label=47;break;}
 case 47: 
 var $158=$155;
 var $159=HEAP32[((15168)>>2)];
 var $160=($158>>>0)<($159>>>0);
 if($160){label=49;break;}else{label=48;break;}
 case 48: 
 var $162=(($R_1+20)|0);
 HEAP32[(($162)>>2)]=$155;
 var $163=(($155+24)|0);
 HEAP32[(($163)>>2)]=$R_1;
 var $_0=$16;var $_02=$17;label=54;break;
 case 49: 
 _abort();
 throw "Reached an unreachable!";
 case 50: 
 _abort();
 throw "Reached an unreachable!";
 case 51: 
 var $_sum=((($psize)+(4))|0);
 var $167=(($1+$_sum)|0);
 var $168=$167;
 var $169=HEAP32[(($168)>>2)];
 var $170=$169&3;
 var $171=($170|0)==3;
 if($171){label=52;break;}else{var $_0=$16;var $_02=$17;label=54;break;}
 case 52: 
 HEAP32[((15160)>>2)]=$17;
 var $173=HEAP32[(($168)>>2)];
 var $174=$173&-2;
 HEAP32[(($168)>>2)]=$174;
 var $175=$17|1;
 var $_sum24=(((4)-($10))|0);
 var $176=(($1+$_sum24)|0);
 var $177=$176;
 HEAP32[(($177)>>2)]=$175;
 var $178=$2;
 HEAP32[(($178)>>2)]=$17;
 label=135;break;
 case 53: 
 _abort();
 throw "Reached an unreachable!";
 case 54: 
 var $_02;
 var $_0;
 var $180=HEAP32[((15168)>>2)];
 var $181=($2>>>0)<($180>>>0);
 if($181){label=134;break;}else{label=55;break;}
 case 55: 
 var $_sum1=((($psize)+(4))|0);
 var $183=(($1+$_sum1)|0);
 var $184=$183;
 var $185=HEAP32[(($184)>>2)];
 var $186=$185&2;
 var $187=($186|0)==0;
 if($187){label=56;break;}else{label=109;break;}
 case 56: 
 var $189=HEAP32[((15176)>>2)];
 var $190=($3|0)==($189|0);
 if($190){label=57;break;}else{label=59;break;}
 case 57: 
 var $192=HEAP32[((15164)>>2)];
 var $193=((($192)+($_02))|0);
 HEAP32[((15164)>>2)]=$193;
 HEAP32[((15176)>>2)]=$_0;
 var $194=$193|1;
 var $195=(($_0+4)|0);
 HEAP32[(($195)>>2)]=$194;
 var $196=HEAP32[((15172)>>2)];
 var $197=($_0|0)==($196|0);
 if($197){label=58;break;}else{label=135;break;}
 case 58: 
 HEAP32[((15172)>>2)]=0;
 HEAP32[((15160)>>2)]=0;
 label=135;break;
 case 59: 
 var $200=HEAP32[((15172)>>2)];
 var $201=($3|0)==($200|0);
 if($201){label=60;break;}else{label=61;break;}
 case 60: 
 var $203=HEAP32[((15160)>>2)];
 var $204=((($203)+($_02))|0);
 HEAP32[((15160)>>2)]=$204;
 HEAP32[((15172)>>2)]=$_0;
 var $205=$204|1;
 var $206=(($_0+4)|0);
 HEAP32[(($206)>>2)]=$205;
 var $207=$_0;
 var $208=(($207+$204)|0);
 var $209=$208;
 HEAP32[(($209)>>2)]=$204;
 label=135;break;
 case 61: 
 var $211=$185&-8;
 var $212=((($211)+($_02))|0);
 var $213=$185>>>3;
 var $214=($185>>>0)<256;
 if($214){label=62;break;}else{label=74;break;}
 case 62: 
 var $_sum20=((($psize)+(8))|0);
 var $216=(($1+$_sum20)|0);
 var $217=$216;
 var $218=HEAP32[(($217)>>2)];
 var $_sum21=((($psize)+(12))|0);
 var $219=(($1+$_sum21)|0);
 var $220=$219;
 var $221=HEAP32[(($220)>>2)];
 var $222=$213<<1;
 var $223=((15192+($222<<2))|0);
 var $224=$223;
 var $225=($218|0)==($224|0);
 if($225){label=65;break;}else{label=63;break;}
 case 63: 
 var $227=$218;
 var $228=($227>>>0)<($180>>>0);
 if($228){label=73;break;}else{label=64;break;}
 case 64: 
 var $230=(($218+12)|0);
 var $231=HEAP32[(($230)>>2)];
 var $232=($231|0)==($3|0);
 if($232){label=65;break;}else{label=73;break;}
 case 65: 
 var $233=($221|0)==($218|0);
 if($233){label=66;break;}else{label=67;break;}
 case 66: 
 var $235=1<<$213;
 var $236=$235^-1;
 var $237=HEAP32[((15152)>>2)];
 var $238=$237&$236;
 HEAP32[((15152)>>2)]=$238;
 label=107;break;
 case 67: 
 var $240=($221|0)==($224|0);
 if($240){label=68;break;}else{label=69;break;}
 case 68: 
 var $_pre69=(($221+8)|0);
 var $_pre_phi70=$_pre69;label=71;break;
 case 69: 
 var $242=$221;
 var $243=($242>>>0)<($180>>>0);
 if($243){label=72;break;}else{label=70;break;}
 case 70: 
 var $245=(($221+8)|0);
 var $246=HEAP32[(($245)>>2)];
 var $247=($246|0)==($3|0);
 if($247){var $_pre_phi70=$245;label=71;break;}else{label=72;break;}
 case 71: 
 var $_pre_phi70;
 var $248=(($218+12)|0);
 HEAP32[(($248)>>2)]=$221;
 HEAP32[(($_pre_phi70)>>2)]=$218;
 label=107;break;
 case 72: 
 _abort();
 throw "Reached an unreachable!";
 case 73: 
 _abort();
 throw "Reached an unreachable!";
 case 74: 
 var $250=$2;
 var $_sum2=((($psize)+(24))|0);
 var $251=(($1+$_sum2)|0);
 var $252=$251;
 var $253=HEAP32[(($252)>>2)];
 var $_sum3=((($psize)+(12))|0);
 var $254=(($1+$_sum3)|0);
 var $255=$254;
 var $256=HEAP32[(($255)>>2)];
 var $257=($256|0)==($250|0);
 if($257){label=80;break;}else{label=75;break;}
 case 75: 
 var $_sum18=((($psize)+(8))|0);
 var $259=(($1+$_sum18)|0);
 var $260=$259;
 var $261=HEAP32[(($260)>>2)];
 var $262=$261;
 var $263=($262>>>0)<($180>>>0);
 if($263){label=79;break;}else{label=76;break;}
 case 76: 
 var $265=(($261+12)|0);
 var $266=HEAP32[(($265)>>2)];
 var $267=($266|0)==($250|0);
 if($267){label=77;break;}else{label=79;break;}
 case 77: 
 var $269=(($256+8)|0);
 var $270=HEAP32[(($269)>>2)];
 var $271=($270|0)==($250|0);
 if($271){label=78;break;}else{label=79;break;}
 case 78: 
 HEAP32[(($265)>>2)]=$256;
 HEAP32[(($269)>>2)]=$261;
 var $R7_1=$256;label=87;break;
 case 79: 
 _abort();
 throw "Reached an unreachable!";
 case 80: 
 var $_sum5=((($psize)+(20))|0);
 var $274=(($1+$_sum5)|0);
 var $275=$274;
 var $276=HEAP32[(($275)>>2)];
 var $277=($276|0)==0;
 if($277){label=81;break;}else{var $R7_0=$276;var $RP9_0=$275;label=82;break;}
 case 81: 
 var $_sum4=((($psize)+(16))|0);
 var $279=(($1+$_sum4)|0);
 var $280=$279;
 var $281=HEAP32[(($280)>>2)];
 var $282=($281|0)==0;
 if($282){var $R7_1=0;label=87;break;}else{var $R7_0=$281;var $RP9_0=$280;label=82;break;}
 case 82: 
 var $RP9_0;
 var $R7_0;
 var $283=(($R7_0+20)|0);
 var $284=HEAP32[(($283)>>2)];
 var $285=($284|0)==0;
 if($285){label=83;break;}else{var $R7_0=$284;var $RP9_0=$283;label=82;break;}
 case 83: 
 var $287=(($R7_0+16)|0);
 var $288=HEAP32[(($287)>>2)];
 var $289=($288|0)==0;
 if($289){label=84;break;}else{var $R7_0=$288;var $RP9_0=$287;label=82;break;}
 case 84: 
 var $291=$RP9_0;
 var $292=($291>>>0)<($180>>>0);
 if($292){label=86;break;}else{label=85;break;}
 case 85: 
 HEAP32[(($RP9_0)>>2)]=0;
 var $R7_1=$R7_0;label=87;break;
 case 86: 
 _abort();
 throw "Reached an unreachable!";
 case 87: 
 var $R7_1;
 var $296=($253|0)==0;
 if($296){label=107;break;}else{label=88;break;}
 case 88: 
 var $_sum15=((($psize)+(28))|0);
 var $298=(($1+$_sum15)|0);
 var $299=$298;
 var $300=HEAP32[(($299)>>2)];
 var $301=((15456+($300<<2))|0);
 var $302=HEAP32[(($301)>>2)];
 var $303=($250|0)==($302|0);
 if($303){label=89;break;}else{label=91;break;}
 case 89: 
 HEAP32[(($301)>>2)]=$R7_1;
 var $cond53=($R7_1|0)==0;
 if($cond53){label=90;break;}else{label=97;break;}
 case 90: 
 var $305=1<<$300;
 var $306=$305^-1;
 var $307=HEAP32[((15156)>>2)];
 var $308=$307&$306;
 HEAP32[((15156)>>2)]=$308;
 label=107;break;
 case 91: 
 var $310=$253;
 var $311=HEAP32[((15168)>>2)];
 var $312=($310>>>0)<($311>>>0);
 if($312){label=95;break;}else{label=92;break;}
 case 92: 
 var $314=(($253+16)|0);
 var $315=HEAP32[(($314)>>2)];
 var $316=($315|0)==($250|0);
 if($316){label=93;break;}else{label=94;break;}
 case 93: 
 HEAP32[(($314)>>2)]=$R7_1;
 label=96;break;
 case 94: 
 var $319=(($253+20)|0);
 HEAP32[(($319)>>2)]=$R7_1;
 label=96;break;
 case 95: 
 _abort();
 throw "Reached an unreachable!";
 case 96: 
 var $322=($R7_1|0)==0;
 if($322){label=107;break;}else{label=97;break;}
 case 97: 
 var $324=$R7_1;
 var $325=HEAP32[((15168)>>2)];
 var $326=($324>>>0)<($325>>>0);
 if($326){label=106;break;}else{label=98;break;}
 case 98: 
 var $328=(($R7_1+24)|0);
 HEAP32[(($328)>>2)]=$253;
 var $_sum16=((($psize)+(16))|0);
 var $329=(($1+$_sum16)|0);
 var $330=$329;
 var $331=HEAP32[(($330)>>2)];
 var $332=($331|0)==0;
 if($332){label=102;break;}else{label=99;break;}
 case 99: 
 var $334=$331;
 var $335=HEAP32[((15168)>>2)];
 var $336=($334>>>0)<($335>>>0);
 if($336){label=101;break;}else{label=100;break;}
 case 100: 
 var $338=(($R7_1+16)|0);
 HEAP32[(($338)>>2)]=$331;
 var $339=(($331+24)|0);
 HEAP32[(($339)>>2)]=$R7_1;
 label=102;break;
 case 101: 
 _abort();
 throw "Reached an unreachable!";
 case 102: 
 var $_sum17=((($psize)+(20))|0);
 var $342=(($1+$_sum17)|0);
 var $343=$342;
 var $344=HEAP32[(($343)>>2)];
 var $345=($344|0)==0;
 if($345){label=107;break;}else{label=103;break;}
 case 103: 
 var $347=$344;
 var $348=HEAP32[((15168)>>2)];
 var $349=($347>>>0)<($348>>>0);
 if($349){label=105;break;}else{label=104;break;}
 case 104: 
 var $351=(($R7_1+20)|0);
 HEAP32[(($351)>>2)]=$344;
 var $352=(($344+24)|0);
 HEAP32[(($352)>>2)]=$R7_1;
 label=107;break;
 case 105: 
 _abort();
 throw "Reached an unreachable!";
 case 106: 
 _abort();
 throw "Reached an unreachable!";
 case 107: 
 var $355=$212|1;
 var $356=(($_0+4)|0);
 HEAP32[(($356)>>2)]=$355;
 var $357=$_0;
 var $358=(($357+$212)|0);
 var $359=$358;
 HEAP32[(($359)>>2)]=$212;
 var $360=HEAP32[((15172)>>2)];
 var $361=($_0|0)==($360|0);
 if($361){label=108;break;}else{var $_1=$212;label=110;break;}
 case 108: 
 HEAP32[((15160)>>2)]=$212;
 label=135;break;
 case 109: 
 var $364=$185&-2;
 HEAP32[(($184)>>2)]=$364;
 var $365=$_02|1;
 var $366=(($_0+4)|0);
 HEAP32[(($366)>>2)]=$365;
 var $367=$_0;
 var $368=(($367+$_02)|0);
 var $369=$368;
 HEAP32[(($369)>>2)]=$_02;
 var $_1=$_02;label=110;break;
 case 110: 
 var $_1;
 var $371=$_1>>>3;
 var $372=($_1>>>0)<256;
 if($372){label=111;break;}else{label=116;break;}
 case 111: 
 var $374=$371<<1;
 var $375=((15192+($374<<2))|0);
 var $376=$375;
 var $377=HEAP32[((15152)>>2)];
 var $378=1<<$371;
 var $379=$377&$378;
 var $380=($379|0)==0;
 if($380){label=112;break;}else{label=113;break;}
 case 112: 
 var $382=$377|$378;
 HEAP32[((15152)>>2)]=$382;
 var $_sum13_pre=((($374)+(2))|0);
 var $_pre=((15192+($_sum13_pre<<2))|0);
 var $F16_0=$376;var $_pre_phi=$_pre;label=115;break;
 case 113: 
 var $_sum14=((($374)+(2))|0);
 var $384=((15192+($_sum14<<2))|0);
 var $385=HEAP32[(($384)>>2)];
 var $386=$385;
 var $387=HEAP32[((15168)>>2)];
 var $388=($386>>>0)<($387>>>0);
 if($388){label=114;break;}else{var $F16_0=$385;var $_pre_phi=$384;label=115;break;}
 case 114: 
 _abort();
 throw "Reached an unreachable!";
 case 115: 
 var $_pre_phi;
 var $F16_0;
 HEAP32[(($_pre_phi)>>2)]=$_0;
 var $391=(($F16_0+12)|0);
 HEAP32[(($391)>>2)]=$_0;
 var $392=(($_0+8)|0);
 HEAP32[(($392)>>2)]=$F16_0;
 var $393=(($_0+12)|0);
 HEAP32[(($393)>>2)]=$376;
 label=135;break;
 case 116: 
 var $395=$_0;
 var $396=$_1>>>8;
 var $397=($396|0)==0;
 if($397){var $I19_0=0;label=119;break;}else{label=117;break;}
 case 117: 
 var $399=($_1>>>0)>16777215;
 if($399){var $I19_0=31;label=119;break;}else{label=118;break;}
 case 118: 
 var $401=((($396)+(1048320))|0);
 var $402=$401>>>16;
 var $403=$402&8;
 var $404=$396<<$403;
 var $405=((($404)+(520192))|0);
 var $406=$405>>>16;
 var $407=$406&4;
 var $408=$407|$403;
 var $409=$404<<$407;
 var $410=((($409)+(245760))|0);
 var $411=$410>>>16;
 var $412=$411&2;
 var $413=$408|$412;
 var $414=(((14)-($413))|0);
 var $415=$409<<$412;
 var $416=$415>>>15;
 var $417=((($414)+($416))|0);
 var $418=$417<<1;
 var $419=((($417)+(7))|0);
 var $420=$_1>>>($419>>>0);
 var $421=$420&1;
 var $422=$421|$418;
 var $I19_0=$422;label=119;break;
 case 119: 
 var $I19_0;
 var $424=((15456+($I19_0<<2))|0);
 var $425=(($_0+28)|0);
 var $I19_0_c=$I19_0;
 HEAP32[(($425)>>2)]=$I19_0_c;
 var $426=(($_0+20)|0);
 HEAP32[(($426)>>2)]=0;
 var $427=(($_0+16)|0);
 HEAP32[(($427)>>2)]=0;
 var $428=HEAP32[((15156)>>2)];
 var $429=1<<$I19_0;
 var $430=$428&$429;
 var $431=($430|0)==0;
 if($431){label=120;break;}else{label=121;break;}
 case 120: 
 var $433=$428|$429;
 HEAP32[((15156)>>2)]=$433;
 HEAP32[(($424)>>2)]=$395;
 var $434=(($_0+24)|0);
 var $_c=$424;
 HEAP32[(($434)>>2)]=$_c;
 var $435=(($_0+12)|0);
 HEAP32[(($435)>>2)]=$_0;
 var $436=(($_0+8)|0);
 HEAP32[(($436)>>2)]=$_0;
 label=135;break;
 case 121: 
 var $438=HEAP32[(($424)>>2)];
 var $439=($I19_0|0)==31;
 if($439){var $444=0;label=123;break;}else{label=122;break;}
 case 122: 
 var $441=$I19_0>>>1;
 var $442=(((25)-($441))|0);
 var $444=$442;label=123;break;
 case 123: 
 var $444;
 var $445=(($438+4)|0);
 var $446=HEAP32[(($445)>>2)];
 var $447=$446&-8;
 var $448=($447|0)==($_1|0);
 if($448){var $T_0_lcssa=$438;label=130;break;}else{label=124;break;}
 case 124: 
 var $449=$_1<<$444;
 var $T_055=$438;var $K20_056=$449;label=126;break;
 case 125: 
 var $451=$K20_056<<1;
 var $452=(($459+4)|0);
 var $453=HEAP32[(($452)>>2)];
 var $454=$453&-8;
 var $455=($454|0)==($_1|0);
 if($455){var $T_0_lcssa=$459;label=130;break;}else{var $T_055=$459;var $K20_056=$451;label=126;break;}
 case 126: 
 var $K20_056;
 var $T_055;
 var $457=$K20_056>>>31;
 var $458=(($T_055+16+($457<<2))|0);
 var $459=HEAP32[(($458)>>2)];
 var $460=($459|0)==0;
 if($460){label=127;break;}else{label=125;break;}
 case 127: 
 var $462=$458;
 var $463=HEAP32[((15168)>>2)];
 var $464=($462>>>0)<($463>>>0);
 if($464){label=129;break;}else{label=128;break;}
 case 128: 
 HEAP32[(($458)>>2)]=$395;
 var $466=(($_0+24)|0);
 var $T_0_c10=$T_055;
 HEAP32[(($466)>>2)]=$T_0_c10;
 var $467=(($_0+12)|0);
 HEAP32[(($467)>>2)]=$_0;
 var $468=(($_0+8)|0);
 HEAP32[(($468)>>2)]=$_0;
 label=135;break;
 case 129: 
 _abort();
 throw "Reached an unreachable!";
 case 130: 
 var $T_0_lcssa;
 var $470=(($T_0_lcssa+8)|0);
 var $471=HEAP32[(($470)>>2)];
 var $472=$T_0_lcssa;
 var $473=HEAP32[((15168)>>2)];
 var $474=($472>>>0)<($473>>>0);
 if($474){label=133;break;}else{label=131;break;}
 case 131: 
 var $476=$471;
 var $477=($476>>>0)<($473>>>0);
 if($477){label=133;break;}else{label=132;break;}
 case 132: 
 var $479=(($471+12)|0);
 HEAP32[(($479)>>2)]=$395;
 HEAP32[(($470)>>2)]=$395;
 var $480=(($_0+8)|0);
 var $_c9=$471;
 HEAP32[(($480)>>2)]=$_c9;
 var $481=(($_0+12)|0);
 var $T_0_c=$T_0_lcssa;
 HEAP32[(($481)>>2)]=$T_0_c;
 var $482=(($_0+24)|0);
 HEAP32[(($482)>>2)]=0;
 label=135;break;
 case 133: 
 _abort();
 throw "Reached an unreachable!";
 case 134: 
 _abort();
 throw "Reached an unreachable!";
 case 135: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9bad_allocD0Ev($this){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($this)|0);

 var $2=($this|0)==0;
 if($2){label=3;break;}else{label=2;break;}
 case 2: 
 var $4=$this;
 _free($4);
 label=3;break;
 case 3: 
 return;
  default: assert(0, "bad label: " + label);
 }

}


function __ZNSt9bad_allocD2Ev($this){
 var label=0;


 var $1=(($this)|0);

 return;
}


function __ZNKSt9bad_alloc4whatEv($this){
 var label=0;


 return 2136;
}


function _scanexp($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+4)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=(($f+100)|0);
 var $4=HEAP32[(($3)>>2)];
 var $5=($2>>>0)<($4>>>0);
 if($5){label=2;break;}else{label=3;break;}
 case 2: 
 var $7=(($2+1)|0);
 HEAP32[(($1)>>2)]=$7;
 var $8=HEAP8[($2)];
 var $9=($8&255);
 var $13=$9;label=4;break;
 case 3: 
 var $11=___shgetc($f);
 var $13=$11;label=4;break;
 case 4: 
 var $13;
 var $14=($13|0)==45;
 if(($13|0)==45|($13|0)==43){ label=5;break;}else{var $neg_0=0;var $c_0=$13;label=11;break;}
 case 5: 
 var $15=($14&1);
 var $16=HEAP32[(($1)>>2)];
 var $17=HEAP32[(($3)>>2)];
 var $18=($16>>>0)<($17>>>0);
 if($18){label=6;break;}else{label=7;break;}
 case 6: 
 var $20=(($16+1)|0);
 HEAP32[(($1)>>2)]=$20;
 var $21=HEAP8[($16)];
 var $22=($21&255);
 var $26=$22;label=8;break;
 case 7: 
 var $24=___shgetc($f);
 var $26=$24;label=8;break;
 case 8: 
 var $26;
 var $27=((($26)-(48))|0);
 var $28=($27>>>0)<10;
 if($28){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=9;break;}
 case 9: 
 var $30=HEAP32[(($3)>>2)];
 var $31=($30|0)==0;
 if($31){var $neg_0=$15;var $c_0=$26;label=11;break;}else{label=10;break;}
 case 10: 
 var $33=HEAP32[(($1)>>2)];
 var $34=((($33)-(1))|0);
 HEAP32[(($1)>>2)]=$34;
 var $neg_0=$15;var $c_0=$26;label=11;break;
 case 11: 
 var $c_0;
 var $neg_0;
 var $36=((($c_0)-(48))|0);
 var $37=($36>>>0)>9;
 if($37){label=12;break;}else{var $c_18=$c_0;var $x_09=0;label=14;break;}
 case 12: 
 var $39=HEAP32[(($3)>>2)];
 var $40=($39|0)==0;
 if($40){var $_0$1=-2147483648;var $_0$0=0;label=32;break;}else{label=13;break;}
 case 13: 
 var $42=HEAP32[(($1)>>2)];
 var $43=((($42)-(1))|0);
 HEAP32[(($1)>>2)]=$43;
 var $_0$1=-2147483648;var $_0$0=0;label=32;break;
 case 14: 
 var $x_09;
 var $c_18;
 var $44=((($c_18)-(48))|0);
 var $45=((($44)+($x_09))|0);
 var $46=HEAP32[(($1)>>2)];
 var $47=HEAP32[(($3)>>2)];
 var $48=($46>>>0)<($47>>>0);
 if($48){label=15;break;}else{label=16;break;}
 case 15: 
 var $50=(($46+1)|0);
 HEAP32[(($1)>>2)]=$50;
 var $51=HEAP8[($46)];
 var $52=($51&255);
 var $c_1_be=$52;label=17;break;
 case 16: 
 var $54=___shgetc($f);
 var $c_1_be=$54;label=17;break;
 case 17: 
 var $c_1_be;
 var $55=((($c_1_be)-(48))|0);
 var $56=($55>>>0)<10;
 var $57=($45|0)<214748364;
 var $_=$56&$57;
 if($_){label=18;break;}else{label=19;break;}
 case 18: 
 var $phitmp16=((($45)*(10))&-1);
 var $c_18=$c_1_be;var $x_09=$phitmp16;label=14;break;
 case 19: 
 var $phitmp$0=$45;
 var $phitmp$1=((((($45|0)<0))|0)?-1:0);
 if($56){var $c_23=$c_1_be;var $y_04$1=$phitmp$1;var $y_04$0=$phitmp$0;label=21;break;}else{var $c_2_lcssa=$c_1_be;var $y_0_lcssa$1=$phitmp$1;var $y_0_lcssa$0=$phitmp$0;label=20;break;}
 case 20: 
 var $y_0_lcssa$0;
 var $y_0_lcssa$1;
 var $c_2_lcssa;
 var $59=((($c_2_lcssa)-(48))|0);
 var $60=($59>>>0)<10;
 if($60){label=25;break;}else{label=29;break;}
 case 21: 
 var $y_04$0;
 var $y_04$1;
 var $c_23;
 var $$etemp$0$0=10;
 var $$etemp$0$1=0;
 var $61$0=___muldi3($y_04$0,$y_04$1,$$etemp$0$0,$$etemp$0$1);var $61$1=tempRet0;
 var $62$0=$c_23;
 var $62$1=((((($c_23|0)<0))|0)?-1:0);
 var $$etemp$1$0=-48;
 var $$etemp$1$1=-1;
 var $63$0=_i64Add($62$0,$62$1,$$etemp$1$0,$$etemp$1$1);var $63$1=tempRet0;
 var $64$0=_i64Add($63$0,$63$1,$61$0,$61$1);var $64$1=tempRet0;
 var $65=HEAP32[(($1)>>2)];
 var $66=HEAP32[(($3)>>2)];
 var $67=($65>>>0)<($66>>>0);
 if($67){label=22;break;}else{label=23;break;}
 case 22: 
 var $69=(($65+1)|0);
 HEAP32[(($1)>>2)]=$69;
 var $70=HEAP8[($65)];
 var $71=($70&255);
 var $c_2_be=$71;label=24;break;
 case 23: 
 var $73=___shgetc($f);
 var $c_2_be=$73;label=24;break;
 case 24: 
 var $c_2_be;
 var $74=((($c_2_be)-(48))|0);
 var $75=($74>>>0)<10;
 var $$etemp$2$0=2061584302;
 var $$etemp$2$1=21474836;
 var $76=(($64$1|0) < ($$etemp$2$1|0)) | (((($64$1|0) == ($$etemp$2$1|0) & ($64$0>>>0) <  ($$etemp$2$0>>>0))));
 var $or_cond2=$75&$76;
 if($or_cond2){var $c_23=$c_2_be;var $y_04$1=$64$1;var $y_04$0=$64$0;label=21;break;}else{var $c_2_lcssa=$c_2_be;var $y_0_lcssa$1=$64$1;var $y_0_lcssa$0=$64$0;label=20;break;}
 case 25: 
 var $77=HEAP32[(($1)>>2)];
 var $78=HEAP32[(($3)>>2)];
 var $79=($77>>>0)<($78>>>0);
 if($79){label=26;break;}else{label=27;break;}
 case 26: 
 var $81=(($77+1)|0);
 HEAP32[(($1)>>2)]=$81;
 var $82=HEAP8[($77)];
 var $83=($82&255);
 var $c_3_be=$83;label=28;break;
 case 27: 
 var $85=___shgetc($f);
 var $c_3_be=$85;label=28;break;
 case 28: 
 var $c_3_be;
 var $86=((($c_3_be)-(48))|0);
 var $87=($86>>>0)<10;
 if($87){label=25;break;}else{label=29;break;}
 case 29: 
 var $88=HEAP32[(($3)>>2)];
 var $89=($88|0)==0;
 if($89){label=31;break;}else{label=30;break;}
 case 30: 
 var $91=HEAP32[(($1)>>2)];
 var $92=((($91)-(1))|0);
 HEAP32[(($1)>>2)]=$92;
 label=31;break;
 case 31: 
 var $94=($neg_0|0)!=0;
 var $$etemp$3$0=0;
 var $$etemp$3$1=0;
 var $95$0=_i64Subtract($$etemp$3$0,$$etemp$3$1,$y_0_lcssa$0,$y_0_lcssa$1);var $95$1=tempRet0;
 var $96$0=($94?$95$0:$y_0_lcssa$0);
 var $96$1=($94?$95$1:$y_0_lcssa$1);
 var $_0$1=$96$1;var $_0$0=$96$0;label=32;break;
 case 32: 
 var $_0$0;
 var $_0$1;
 return (tempRet0=$_0$1,$_0$0);
  default: assert(0, "bad label: " + label);
 }

}


function ___shgetc($f){
 var label=0;

 label = 1; 
 while(1)switch(label){
 case 1: 
 var $1=(($f+104)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=3;break;}else{label=2;break;}
 case 2: 
 var $5=(($f+108)|0);
 var $6=HEAP32[(($5)>>2)];
 var $7=($6|0)<($2|0);
 if($7){label=3;break;}else{label=4;break;}
 case 3: 
 var $9=$f;
 var $10=___uflow($9);
 var $11=($10|0)<0;
 if($11){label=4;break;}else{label=5;break;}
 case 4: 
 var $13=(($f+100)|0);
 HEAP32[(($13)>>2)]=0;
 var $_0=-1;label=13;break;
 case 5: 
 var $15=HEAP32[(($1)>>2)];
 var $16=($15|0)==0;
 var $_phi_trans_insert=(($f+8)|0);
 var $_pre=HEAP32[(($_phi_trans_insert)>>2)];
 var $_phi_trans_insert2_phi_trans_insert_phi_trans_insert=(($f+4)|0);
 var $_pre3_pre_pre=HEAP32[(($_phi_trans_insert2_phi_trans_insert_phi_trans_insert)>>2)];
 if($16){var $_pre3_pre=$_pre3_pre_pre;label=8;break;}else{label=6;break;}
 case 6: 
 var $18=$_pre;
 var $19=$_pre3_pre_pre;
 var $20=((($18)-($19))|0);
 var $21=(($f+108)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=((($15)-($22))|0);
 var $24=((($23)-(1))|0);
 var $25=($20|0)>($24|0);
 if($25){label=7;break;}else{var $_pre3_pre=$_pre3_pre_pre;label=8;break;}
 case 7: 
 var $27=(($_pre3_pre_pre+$24)|0);
 var $28=(($f+100)|0);
 HEAP32[(($28)>>2)]=$27;
 var $_pre3=$_pre3_pre_pre;label=9;break;
 case 8: 
 var $_pre3_pre;
 var $29=(($f+100)|0);
 HEAP32[(($29)>>2)]=$_pre;
 var $_pre3=$_pre3_pre;label=9;break;
 case 9: 
 var $_pre3;
 var $31=($_pre|0)==0;
 if($31){label=11;break;}else{label=10;break;}
 case 10: 
 var $33=$_pre;
 var $34=$_pre3;
 var $35=(($f+108)|0);
 var $36=HEAP32[(($35)>>2)];
 var $37=((($33)+(1))|0);
 var $38=((($37)-($34))|0);
 var $39=((($38)+($36))|0);
 HEAP32[(($35)>>2)]=$39;
 label=11;break;
 case 11: 
 var $40=((($_pre3)-(1))|0);
 var $41=HEAP8[($40)];
 var $42=($41&255);
 var $43=($42|0)==($10|0);
 if($43){var $_0=$10;label=13;break;}else{label=12;break;}
 case 12: 
 var $45=(($10)&255);
 HEAP8[($40)]=$45;
 var $_0=$10;label=13;break;
 case 13: 
 var $_0;
 return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function ___uflow($f){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+8)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $c=sp;
 var $1=(($f+8)|0);
 var $2=HEAP32[(($1)>>2)];
 var $3=($2|0)==0;
 if($3){label=2;break;}else{label=8;break;}
 case 2: 
 var $5=(($f+74)|0);
 var $6=HEAP8[($5)];
 var $7=((($6)-(1))&255);
 var $8=$7|$6;
 HEAP8[($5)]=$8;
 var $9=(($f+20)|0);
 var $10=HEAP32[(($9)>>2)];
 var $11=(($f+44)|0);
 var $12=HEAP32[(($11)>>2)];
 var $13=($10>>>0)>($12>>>0);
 if($13){label=3;break;}else{label=4;break;}
 case 3: 
 var $15=(($f+36)|0);
 var $16=HEAP32[(($15)>>2)];
 var $17=FUNCTION_TABLE[$16]($f,0,0);
 label=4;break;
 case 4: 
 var $19=(($f+16)|0);
 HEAP32[(($19)>>2)]=0;
 var $20=(($f+28)|0);
 HEAP32[(($20)>>2)]=0;
 HEAP32[(($9)>>2)]=0;
 var $21=(($f)|0);
 var $22=HEAP32[(($21)>>2)];
 var $23=$22&20;
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=5;break;}
 case 5: 
 var $26=$22&4;
 var $27=($26|0)==0;
 if($27){var $_0=-1;label=10;break;}else{label=6;break;}
 case 6: 
 var $29=$22|32;
 HEAP32[(($21)>>2)]=$29;
 var $_0=-1;label=10;break;
 case 7: 
 var $30=HEAP32[(($11)>>2)];
 HEAP32[(($1)>>2)]=$30;
 var $31=(($f+4)|0);
 HEAP32[(($31)>>2)]=$30;
 label=8;break;
 case 8: 
 var $33=(($f+32)|0);
 var $34=HEAP32[(($33)>>2)];
 var $35=FUNCTION_TABLE[$34]($f,$c,1);
 var $36=($35|0)==1;
 if($36){label=9;break;}else{var $_0=-1;label=10;break;}
 case 9: 
 var $38=HEAP8[($c)];
 var $39=($38&255);
 var $_0=$39;label=10;break;
 case 10: 
 var $_0;
 STACKTOP=sp;return $_0;
  default: assert(0, "bad label: " + label);
 }

}


function _strtold_l($s,$p){
 var label=0;
 var sp=STACKTOP;STACKTOP=(STACKTOP+624)|0; (assert((STACKTOP|0) < (STACK_MAX|0))|0);
 label = 1; 
 while(1)switch(label){
 case 1: 
 var $x_i_i=sp;
 var $f_i_i=(sp)+(512);
 var $1=$f_i_i;
 var $$etemp$0$0=112;
 var $$etemp$0$1=0;

 _memset($1, 0, 108)|0;
 var $2=(($f_i_i+4)|0);
 HEAP32[(($2)>>2)]=$s;
 var $3=(($f_i_i+8)|0);
 HEAP32[(($3)>>2)]=-1;
 var $4=(($f_i_i+44)|0);
 HEAP32[(($4)>>2)]=$s;
 var $5=(($f_i_i+76)|0);
 HEAP32[(($5)>>2)]=-1;
 var $6=(($f_i_i+104)|0);
 HEAP32[(($6)>>2)]=0;
 var $7=$s;
 var $8=$7^-1;
 var $9=(($f_i_i+108)|0);
 HEAP32[(($9)>>2)]=$8;
 var $10=(($f_i_i+100)|0);
 HEAP32[(($10)>>2)]=-1;
 var $13=$s;var $12=-1;label=2;break;
 case 2: 
 var $12;
 var $13;
 var $14=($13>>>0)<($12>>>0);
 if($14){label=3;break;}else{label=4;break;}
 case 3: 
 var $16=(($13+1)|0);
 HEAP32[(($2)>>2)]=$16;
 var $17=HEAP8[($13)];
 var $18=($17&255);
 var $22=$18;label=5;break;
 case 4: 
 var $20=___shgetc($f_i_i);
 var $22=$20;label=5;break;
 case 5: 
 var $22;
 var $23=_isspace($22);
 var $24=($23|0)==0;
 if($24){label=7;break;}else{label=6;break;}
 case 6: 
 var $_pre=HEAP32[(($2)>>2)];
 var $_pre21=HEAP32[(($10)>>2)];
 var $13=$_pre;var $12=$_pre21;label=2;break;
 case 7: 
 var $26=($22|0)==45;
 if(($22|0)==45|($22|0)==43){ label=8;break;}else{var $c_0_i=$22;var $sign_0_i=1;label=11;break;}
 case 8: 
 var $28=($26&1);
 var $29=$28<<1;
 var $30=(((1)-($29))|0);
 var $31=HEAP32[(($2)>>2)];
 var $32=HEAP32[(($10)>>2)];
 var $33=($31>>>0)<($32>>>0);
 if($33){label=9;break;}else{label=10;break;}
 case 9: 
 var $35=(($31+1)|0);
 HEAP32[(($2)>>2)]=$35;
 var $36=HEAP8[($31)];
 var $37=($36&255);
 var $c_0_i=$37;var $sign_0_i=$30;label=11;break;
 case 10: 
 var $39=___shgetc($f_i_i);
 var $c_0_i=$39;var $sign_0_i=$30;label=11;break;
 case 11: 
 var $sign_0_i;
 var $c_0_i;
 var $i_068_i=0;var $c_169_i=$c_0_i;label=12;break;
 case 12: 
 var $c_169_i;
 var $i_068_i;
 var $42=$c_169_i|32;
 var $43=((1528+$i_068_i)|0);
 var $44=HEAP8[($43)];
 var $45=(($44<<24)>>24);
 var $46=($42|0)==($45|0);
 if($46){label=13;break;}else{var $i_0_lcssa_i=$i_068_i;var $c_1_lcssa_i=$c_169_i;label=18;break;}
 case 13: 
 var $48=($i_068_i>>>0)<7;
 if($48){label=14;break;}else{var $c_2_i=$c_169_i;label=17;break;}
 case 14: 
 var $50=HEAP32[(($2)>>2)];
 var $51=HEAP32[(($10)>>2)];
 var $52=($50>>>0)<($51>>>0);
 if($52){label=15;break;}else{label=16;break;}
 case 15: 
 var $54=(($50+1)|0);
 HEAP32[(($2)>>2)]=$54;
 var $55=HEAP8[($50)];
 var $56=($55&255);
 var $c_2_i=$56;label=17;break;
 case 16: 
 var $58=___shgetc($f_i_i);
 var $c_2_i=$58;label=17;break;
 case 17: 
 var $c_2_i;
 var $60=((($i_068_i)+(1))|0);
 var $61=($60>>>0)<8;
 if($61){var $i_068_i=$60;var $c_169_i=$c_2_i;label=12;break;}else{var $i_0_lcssa_i=$60;var $c_1_lcssa_i=$c_2_i;label=18;break;}
 case 18: 
 var $c_1_lcssa_i;
 var $i_0_lcssa_i;
 if(($i_0_lcssa_i|0)==3){ label=21;break;}else if(($i_0_lcssa_i|0)==8){ label=25;break;}else{label=19;break;}
 case 19: 
 var $63=($i_0_lcssa_i>>>0)<4;
 if($63){label=26;break;}else{label=20;break;}
 case 20: 
 var $65=($i_0_lcssa_i|0)==8;
 if($65){label=25;break;}else{label=21;break;}
 case 21: 
 var $66=HEAP32[(($10)>>2)];
 var $67=($66|0)==0;
 if($67){label=25;break;}else{label=22;break;}
 case 22: 
 var $69=HEAP32[(($2)>>2)];
 var $70=((($69)-(1))|0);
 HEAP32[(($2)>>2)]=$70;
 var $notrhs_i=($i_0_lcssa_i>>>0)<4;
 if($notrhs_i){label=25;break;}else{var $i_166_i=$i_0_lcssa_i;var $71=$70;label=23;break;}
 case 23: 
 var $71;
 var $i_166_i;
 var $72=((($71)-(1))|0);
 var $73=((($i_166_i)-(1))|0);
 var $74=($73>>>0)>3;
 if($74){var $i_166_i=$73;var $71=$72;label=23;break;}else{label=24;break;}
 case 24: 
 HEAP32[(($2)>>2)]=$72;
 label=25;break;
 case 25: 
 var $75=($sign_0_i|0);
 var $76=($75)*(Infinity);
 var $77=$76;
 var $_0_i=$77;label=287;break;
 case 26: 
 var $79=($i_0_lcssa_i|0)==0;
 if($79){var $i_263_i=0;var $c_364_i=$c_1_lcssa_i;label=27;break;}else{var $c_5_i=$c_1_lcssa_i;var $i_3_i=$i_0_lcssa_i;label=33;break;}
 case 27: 
 var $c_364_i;
 var $i_263_i;
 var $80=$c_364_i|32;
 var $81=((3376+$i_263_i)|0);
 var $82=HEAP8[($81)];
 var $83=(($82<<24)>>24);
 var $84=($80|0)==($83|0);
 if($84){label=28;break;}else{var $c_5_i=$c_364_i;var $i_3_i=$i_263_i;label=33;break;}
 case 28: 
 var $86=($i_263_i>>>0)<2;
 if($86){label=29;break;}else{var $c_4_i=$c_364_i;label=32;break;}
 case 29: 
 var $88=HEAP32[(($2)>>2)];
 var $89=HEAP32[(($10)>>2)];
 var $90=($88>>>0)<($89>>>0);
 if($90){label=30;break;}else{label=31;break;}
 case 30: 
 var $92=(($88+1)|0);
 HEAP32[(($2)>>2)]=$92;
 var $93=HEAP8[($88)];
 var $94=($93&255);
 var $c_4_i=$94;label=32;break;
 case 31: 
 var $96=___shgetc($f_i_i);
 var $c_4_i=$96;label=32;break;
 case 32: 
 var $c_4_i;
 var $98=((($i_263_i)+(1))|0);
 var $99=($98>>>0)<3;
 if($99){var $i_263_i=$98;var $c_364_i=$c_4_i;label=27;break;}else{var $c_5_i=$c_4_i;var $i_3_i=$98;label=33;break;}
 case 33: 
 var $i_3_i;
 var $c_5_i;
 if(($i_3_i|0)==3){ label=34;break;}else if(($i_3_i|0)==0){ label=53;break;}else{label=50;break;}
 case 34: 
 var $101=HEAP32[(($2)>>2)];
 var $102=HEAP32[(($10)>>2)];
 var $103=($101>>>0)<($102>>>0);
 if($103){label=35;break;}else{label=36;break;}
 case 35: 
 var $105=(($101+1)|0);
 HEAP32[(($2)>>2)]=$105;
 var $106=HEAP8[($101)];
 var $107=($106&255);
 var $111=$107;label=37;break;
 case 36: 
 var $109=___shgetc($f_i_i);
 var $111=$109;label=37;break;
 case 37: 
 var $111;
 var $112=($111|0)==40;
 if($112){var $i_4_i=1;label=40;break;}else{label=38;break;}
 case 38: 
 var $114=HEAP32[(($10)>>2)];
 var $115=($114|0)==0;
 if($115){var $_0_i=NaN;label=287;break;}else{label=39;break;}
 case 39: 
 var $117=HEAP32[(($2)>>2)];
 var $118=((($117)-(1))|0);
 HEAP32[(($2)>>2)]=$118;
 var $_0_i=NaN;label=287;break;
 case 40: 
 var $i_4_i;
 var $119=HEAP32[(($2)>>2)];
 var $120=HEAP32[(($10)>>2)];
 var $121=($119>>>0)<($120>>>0);
 if($121){label=41;break;}else{label=42;break;}
 case 41: 
 var $123=(($119+1)|0);
 HEAP32[(($2)>>2)]=$123;
 var $124=HEAP8[($119)];
 var $125=($124&255);
 var $129=$125;label=43;break;
 case 42: 
 var $127=___shgetc($f_i_i);
 var $129=$127;label=43;break;
 case 43: 
 var $129;
 var $130=((($129)-(48))|0);
 var $131=($130>>>0)<10;
 var $132=((($129)-(65))|0);
 var $133=($132>>>0)<26;
 var $or_cond8_i=$131|$133;
 if($or_cond8_i){label=49;break;}else{label=44;break;}
 case 44: 
 var $135=((($129)-(97))|0);
 var $136=($135>>>0)<26;
 var $137=($129|0)==95;
 var $or_cond5_i=$136|$137;
 if($or_cond5_i){label=49;break;}else{label=45;break;}
 case 45: 
 var $139=($129|0)==41;
 if($139){var $_0_i=NaN;label=287;break;}else{label=46;break;}
 case 46: 
 var $141=HEAP32[(($10)>>2)];
 var $142=($141|0)==0;
 if($142){var $_0_i=NaN;label=287;break;}else{label=47;break;}
 case 47: 
 var $144=HEAP32[(($2)>>2)];
 var $145=((($144)-(1))|0);
 HEAP32[(($2)>>2)]=$145;
 var $146=($i_4_i|0)==0;
 if($146){var $_0_i=NaN;label=287;break;}else{var $_in_i=$i_4_i;var $147=$145;label=48;break;}
 case 48: 
 var $147;
 var $_in_i;
 var $148=((($_in_i)-(1))|0);
 var $149=((($147)-(1))|0);
 var $150=($148|0)==0;
 if($150){label=286;break;}else{var $_in_i=$148;var $147=$149;label=48;break;}
 case 49: 
 var $152=((($i_4_i)+(1))|0);
 var $i_4_i=$152;label=40;break;
 case 50: 
 var $154=HEAP32[(($10)>>2)];
 var $155=($154|0)==0;
 var $_pre22=HEAP32[(($2)>>2)];
 if($155){var $158=$_pre22;label=52;break;}else{label=51;break;}
 case 51: 
 var $157=((($_pre22)-(1))|0);
 HEAP32[(($2)>>2)]=$157;
 var $158=$157;label=52;break;
 case 52: 
 var $158;
 var $159=___errno_location();
 HEAP32[(($159)>>2)]=22;
 HEAP32[(($6)>>2)]=0;
 var $160=HEAP32[(($3)>>2)];
 var $161=$160;
 var $162=$158;
 var $163=((($161)-($162))|0);
 HEAP32[(($9)>>2)]=$163;
 HEAP32[(($10)>>2)]=$160;
 var $_0_i=0;label=287;break;
 case 53: 
 var $165=($c_5_i|0)==48;
 if($165){label=54;break;}else{var $c_6_i=$c_5_i;label=134;break;}
 case 54: 
 var $167=HEAP32[(($2)>>2)];
 var $168=HEAP32[(($10)>>2)];
 var $169=($167>>>0)<($168>>>0);
 if($169){label=55;break;}else{label=56;break;}
 case 55: 
 var $171=(($167+1)|0);
 HEAP32[(($2)>>2)]=$171;
 var $172=HEAP8[($167)];
 var $173=($172&255);
 var $177=$173;label=57;break;
 case 56: 
 var $175=___shgetc($f_i_i);
 var $177=$175;label=57;break;
 case 57: 
 var $177;
 var $178=$177|32;
 var $179=($178|0)==120;
 if($179){label=58;break;}else{label=132;break;}
 case 58: 
 var $181=HEAP32[(($2)>>2)];
 var $182=HEAP32[(($10)>>2)];
 var $183=($181>>>0)<($182>>>0);
 if($183){label=59;break;}else{label=60;break;}
 case 59: 
 var $185=(($181+1)|0);
 HEAP32[(($2)>>2)]=$185;
 var $186=HEAP8[($181)];
 var $187=($186&255);
 var $c_0_i_i=$187;var $gotdig_0_i_i=0;label=61;break;
 case 60: 
 var $189=___shgetc($f_i_i);
 var $c_0_i_i=$189;var $gotdig_0_i_i=0;label=61;break;
 case 61: 
 var $gotdig_0_i_i;
 var $c_0_i_i;
 if(($c_0_i_i|0)==48){ label=62;break;}else if(($c_0_i_i|0)==46){ label=65;break;}else{var $c_2_i_i=$c_0_i_i;var $dc_0_i_i$1=0;var $dc_0_i_i$0=0;var $rp_1_i_i$1=0;var $rp_1_i_i$0=0;var $gotdig_2_i_i=$gotdig_0_i_i;var $gotrad_0_i_i=0;var $gottail_0_i_i=0;var $scale_0_i_i=1;var $y_0_i_i=0;var $x_0_i_i=0;label=74;break;}
 case 62: 
 var $191=HEAP32[(($2)>>2)];
 var $192=HEAP32[(($10)>>2)];
 var $193=($191>>>0)<($192>>>0);
 if($193){label=63;break;}else{label=64;break;}
 case 63: 
 var $195=(($191+1)|0);
 HEAP32[(($2)>>2)]=$195;
 var $196=HEAP8[($191)];
 var $197=($196&255);
 var $c_0_i_i=$197;var $gotdig_0_i_i=1;label=61;break;
 case 64: 
 var $199=___shgetc($f_i_i);
 var $c_0_i_i=$199;var $gotdig_0_i_i=1;label=61;break;
 case 65: 
 var $201=HEAP32[(($2)>>2)];
 var $202=HEAP32[(($10)>>2)];
 var $203=($201>>>0)<($202>>>0);
 if($203){label=66;break;}else{label=67;break;}
 case 66: 
 var $205=(($201+1)|0);
 HEAP32[(($2)>>2)]=$205;
 var $206=HEAP8[($201)];
 var $207=($206&255);
 var $c_1_ph_i_i=$207;label=68;break;
 case 67: 
 var $209=___shgetc($f_i_i);
 var $c_1_ph_i_i=$209;label=68;break;
 case 68: 
 var $c_1_ph_i_i;
 var $210=($c_1_ph_i_i|0)==48;
 if($210){var $rp_021_i_i$1=-1;var $rp_021_i_i$0=-1;label=69;break;}else{var $c_2_i_i=$c_1_ph_i_i;var $dc_0_i_i$1=0;var $dc_0_i_i$0=0;var $rp_1_i_i$1=0;var $rp_1_i_i$0=0;var $gotdig_2_i_i=$gotdig_0_i_i;var $gotrad_0_i_i=1;var $gottail_0_i_i=0;var $scale_0_i_i=1;var $y_0_i_i=0;var $x_0_i_i=0;label=74;break;}
 case 69: 
 var $rp_021_i_i$0;
 var $rp_021_i_i$1;
 var $211=HEAP32[(($2)>>2)];
 var $212=HEAP32[(($10)>>2)];
 var $213=($211>>>0)<($212>>>0);
 if($213){label=70;break;}else{label=71;break;}
 case 70: 
 var $215=(($211+1)|0);
 HEAP32[(($2)>>2)]=$215;
 var $216=HEAP8[($211)];
 var $217=($216&255);
 var $221=$217;label=72;break;
 case 71: 
 var $219=___shgetc($f_i_i);
 var $221=$219;label=72;break;
 case 72: 
 var $221;
 var $222=($221|0)==48;
 if($222){label=73;break;}else{var $c_2_i_i=$221;var $dc_0_i_i$1=0;var $dc_0_i_i$0=0;var $rp_1_i_i$1=$rp_021_i_i$1;var $rp_1_i_i$0=$rp_021_i_i$0;var $gotdig_2_i_i=1;var $gotrad_0_i_i=1;var $gottail_0_i_i=0;var $scale_0_i_i=1;var $y_0_i_i=0;var $x_0_i_i=0;label=74;break;}
 case 73: 
 var $$etemp$1$0=-1;
 var $$etemp$1$1=-1;
 var $phitmp_i_i$0=_i64Add($rp_021_i_i$0,$rp_021_i_i$1,$$etemp$1$0,$$etemp$1$1);var $phitmp_i_i$1=tempRet0;
 var $rp_021_i_i$1=$phitmp_i_i$1;var $rp_021_i_i$0=$phitmp_i_i$0;label=69;break;
 case 74: 
 var $x_0_i_i;
 var $y_0_i_i;
 var $scale_0_i_i;
 var $gottail_0_i_i;
 var $gotrad_0_i_i;
 var $gotdig_2_i_i;
 var $rp_1_i_i$0;
 var $rp_1_i_i$1;
 var $dc_0_i_i$0;
 var $dc_0_i_i$1;
 var $c_2_i_i;
 var $223=((($c_2_i_i)-(48))|0);
 var $224=($223>>>0)<10;
 if($224){var $d_0_i_i=$223;label=79;break;}else{label=75;break;}
 case 75: 
 var $226=$c_2_i_i|32;
 var $227=((($226)-(97))|0);
 var $228=($227>>>0)<6;
 var $229=($c_2_i_i|0)==46;
 var $or_cond_i_i=$228|$229;
 if($or_cond_i_i){label=76;break;}else{var $c_2_lcssa_i_i=$c_2_i_i;label=89;break;}
 case 76: 
 if($229){label=77;break;}else{label=78;break;}
 case 77: 
 var $231=($gotrad_0_i_i|0)==0;
 if($231){var $dc_1_i_i$1=$dc_0_i_i$1;var $dc_1_i_i$0=$dc_0_i_i$0;var $rp_2_i_i$1=$dc_0_i_i$1;var $rp_2_i_i$0=$dc_0_i_i$0;var $gotdig_3_i_i=$gotdig_2_i_i;var $gotrad_1_i_i=1;var $gottail_2_i_i=$gottail_0_i_i;var $scale_2_i_i=$scale_0_i_i;var $y_2_i_i=$y_0_i_i;var $x_2_i_i=$x_0_i_i;label=86;break;}else{var $c_2_lcssa_i_i=46;label=89;break;}
 case 78: 
 var $233=($c_2_i_i|0)>57;
 var $234=((($226)-(87))|0);
 var $_38_i_i=($233?$234:$223);
 var $d_0_i_i=$_38_i_i;label=79;break;
 case 79: 
 var $d_0_i_i;
 var $$etemp$2$0=8;
 var $$etemp$2$1=0;
 var $235=(($dc_0_i_i$1|0) < ($$etemp$2$1|0)) | (((($dc_0_i_i$1|0) == ($$etemp$2$1|0) & ($dc_0_i_i$0>>>0) <  ($$etemp$2$0>>>0))));
 if($235){label=80;break;}else{label=81;break;}
 case 80: 
 var $237=$x_0_i_i<<4;
 var $238=((($d_0_i_i)+($237))|0);
 var $gottail_1_i_i=$gottail_0_i_i;var $scale_1_i_i=$scale_0_i_i;var $y_1_i_i=$y_0_i_i;var $x_1_i_i=$238;label=85;break;
 case 81: 
 var $$etemp$3$0=14;
 var $$etemp$3$1=0;
 var $240=(($dc_0_i_i$1|0) < ($$etemp$3$1|0)) | (((($dc_0_i_i$1|0) == ($$etemp$3$1|0) & ($dc_0_i_i$0>>>0) <  ($$etemp$3$0>>>0))));
 if($240){label=82;break;}else{label=83;break;}
 case 82: 
 var $242=($d_0_i_i|0);
 var $243=($scale_0_i_i)*((0.0625));
 var $244=($243)*($242);
 var $245=($y_0_i_i)+($244);
 var $gottail_1_i_i=$gottail_0_i_i;var $scale_1_i_i=$243;var $y_1_i_i=$245;var $x_1_i_i=$x_0_i_i;label=85;break;
 case 83: 
 var $247=($d_0_i_i|0)!=0;
 var $248=($gottail_0_i_i|0)==0;
 var $or_cond3_i_i=$247&$248;
 if($or_cond3_i_i){label=84;break;}else{var $gottail_1_i_i=$gottail_0_i_i;var $scale_1_i_i=$scale_0_i_i;var $y_1_i_i=$y_0_i_i;var $x_1_i_i=$x_0_i_i;label=85;break;}
 case 84: 
 var $250=($scale_0_i_i)*((0.5));
 var $251=($y_0_i_i)+($250);
 var $gottail_1_i_i=1;var $scale_1_i_i=$scale_0_i_i;var $y_1_i_i=$251;var $x_1_i_i=$x_0_i_i;label=85;break;
 case 85: 
 var $x_1_i_i;
 var $y_1_i_i;
 var $scale_1_i_i;
 var $gottail_1_i_i;
 var $$etemp$4$0=1;
 var $$etemp$4$1=0;
 var $253$0=_i64Add($dc_0_i_i$0,$dc_0_i_i$1,$$etemp$4$0,$$etemp$4$1);var $253$1=tempRet0;
 var $dc_1_i_i$1=$253$1;var $dc_1_i_i$0=$253$0;var $rp_2_i_i$1=$rp_1_i_i$1;var $rp_2_i_i$0=$rp_1_i_i$0;var $gotdig_3_i_i=1;var $gotrad_1_i_i=$gotrad_0_i_i;var $gottail_2_i_i=$gottail_1_i_i;var $scale_2_i_i=$scale_1_i_i;var $y_2_i_i=$y_1_i_i;var $x_2_i_i=$x_1_i_i;label=86;break;
 case 86: 
 var $x_2_i_i;
 var $y_2_i_i;
 var $scale_2_i_i;
 var $gottail_2_i_i;
 var $gotrad_1_i_i;
 var $gotdig_3_i_i;
 var $rp_2_i_i$0;
 var $rp_2_i_i$1;
 var $dc_1_i_i$0;
 var $dc_1_i_i$1;
 var $254=HEAP32[(($2)>>2)];
 var $255=HEAP32[(($10)>>2)];
 var $256=($254>>>0)<($255>>>0);
 if($256){label=87;break;}else{label=88;break;}
 case 87: 
 var $258=(($254+1)|0);
 HEAP32[(($2)>>2)]=$258;
 var $259=HEAP8[($254)];
 var $260=($259&255);
 var $c_2_i_i=$260;var $dc_0_i_i$1=$dc_1_i_i$1;var $dc_0_i_i$0=$dc_1_i_i$0;var $rp_1_i_i$1=$rp_2_i_i$1;var $rp_1_i_i$0=$rp_2_i_i$0;var $gotdig_2_i_i=$gotdig_3_i_i;var $gotrad_0_i_i=$gotrad_1_i_i;var $gottail_0_i_i=$gottail_2_i_i;var $scale_0_i_i=$scale_2_i_i;var $y_0_i_i=$y_2_i_i;var $x_0_i_i=$x_2_i_i;label=74;break;
 case 88: 
 var $262=___shgetc($f_i_i);
 var $c_2_i_i=$262;var $dc_0_i_i$1=$dc_1_i_i$1;var $dc_0_i_i$0=$dc_1_i_i$0;var $rp_1_i_i$1=$rp_2_i_i$1;var $rp_1_i_i$0=$rp_2_i_i$0;var $gotdig_2_i_i=$gotdig_3_i_i;var $gotrad_0_i_i=$gotrad_1_i_i;var $gottail_0_i_i=$gottail_2_i_i;var $scale_0_i_i=$scale_2_i_i;var $y_0_i_i=$y_2_i_i;var $x_0_i_i=$x_2_i_i;label=74;break;
 case 89: 
 var $c_2_lcssa_i_i;
 var $264=($gotdig_2_i_i|0)==0;
 if($264){label=90;break;}else{label=94;break;}
 case 90: 
 var $266=HEAP32[(($10)>>2)];
 var $267=($266|0)==0;
 if($267){label=93;break;}else{label=91;break;}
 case 91: 
 var $269=HEAP32[(($2)>>2)];
 var $270=((($269)-(2))|0);
 HEAP32[(($2)>>2)]=$270;
 var $271=($gotrad_0_i_i|0)==0;
 if($271){label=93;break;}else{label=92;break;}
 case 92: 
 var $273=((($269)-(3))|0);
 HEAP32[(($2)>>2)]=$273;
 label=93;break;
 case 93: 
 var $274=($sign_0_i|0);
 var $275=($274)*(0);
 var $_0_i=$275;label=287;break;
 case 94: 
 var $277=($gotrad_0_i_i|0)==0;
 var $dc_0_rp_1_i_i$0=($277?$dc_0_i_i$0:$rp_1_i_i$0);
 var $dc_0_rp_1_i_i$1=($277?$dc_0_i_i$1:$rp_1_i_i$1);
 var $$etemp$5$0=8;
 var $$etemp$5$1=0;
 var $278=(($dc_0_i_i$1|0) < ($$etemp$5$1|0)) | (((($dc_0_i_i$1|0) == ($$etemp$5$1|0) & ($dc_0_i_i$0>>>0) <  ($$etemp$5$0>>>0))));
 if($278){var $x_313_i_i=$x_0_i_i;var $dc_214_i_i$1=$dc_0_i_i$1;var $dc_214_i_i$0=$dc_0_i_i$0;label=95;break;}else{var $x_3_lcssa_i_i=$x_0_i_i;label=96;break;}
 case 95: 
 var $dc_214_i_i$0;
 var $dc_214_i_i$1;
 var $x_313_i_i;
 var $279=$x_313_i_i<<4;
 var $$etemp$6$0=1;
 var $$etemp$6$1=0;
 var $280$0=_i64Add($dc_214_i_i$0,$dc_214_i_i$1,$$etemp$6$0,$$etemp$6$1);var $280$1=tempRet0;
 var $$etemp$7$0=8;
 var $$etemp$7$1=0;
 var $281=(($280$1|0) < ($$etemp$7$1|0)) | (((($280$1|0) == ($$etemp$7$1|0) & ($280$0>>>0) <  ($$etemp$7$0>>>0))));
 if($281){var $x_313_i_i=$279;var $dc_214_i_i$1=$280$1;var $dc_214_i_i$0=$280$0;label=95;break;}else{var $x_3_lcssa_i_i=$279;label=96;break;}
 case 96: 
 var $x_3_lcssa_i_i;
 var $282=$c_2_lcssa_i_i|32;
 var $283=($282|0)==112;
 if($283){label=97;break;}else{label=100;break;}
 case 97: 
 var $285$0=_scanexp($f_i_i);
 var $285$1=tempRet0;
 var $$etemp$8$0=0;
 var $$etemp$8$1=-2147483648;
 var $286=(($285$0|0) == ($$etemp$8$0|0)) & (($285$1|0) == ($$etemp$8$1|0));
 if($286){label=98;break;}else{var $e2_0_i_i$1=$285$1;var $e2_0_i_i$0=$285$0;label=102;break;}
 case 98: 
 var $288=HEAP32[(($10)>>2)];
 var $289=($288|0)==0;
 if($289){var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=102;break;}else{label=99;break;}
 case 99: 
 var $291=HEAP32[(($2)>>2)];
 var $292=((($291)-(1))|0);
 HEAP32[(($2)>>2)]=$292;
 var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=102;break;
 case 100: 
 var $294=HEAP32[(($10)>>2)];
 var $295=($294|0)==0;
 if($295){var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=102;break;}else{label=101;break;}
 case 101: 
 var $297=HEAP32[(($2)>>2)];
 var $298=((($297)-(1))|0);
 HEAP32[(($2)>>2)]=$298;
 var $e2_0_i_i$1=0;var $e2_0_i_i$0=0;label=102;break;
 case 102: 
 var $e2_0_i_i$0;
 var $e2_0_i_i$1;
 var $300$0=($dc_0_rp_1_i_i$0<<2)|(0>>>30);
 var $300$1=($dc_0_rp_1_i_i$1<<2)|($dc_0_rp_1_i_i$0>>>30);
 var $$etemp$9$0=-32;
 var $$etemp$9$1=-1;
 var $301$0=_i64Add($300$0,$300$1,$$etemp$9$0,$$etemp$9$1);var $301$1=tempRet0;
 var $302$0=_i64Add($301$0,$301$1,$e2_0_i_i$0,$e2_0_i_i$1);var $302$1=tempRet0;
 var $303=($x_3_lcssa_i_i|0)==0;
 if($303){label=103;break;}else{label=104;break;}
 case 103: 
 var $305=($sign_0_i|0);
 var $306=($305)*(0);
 var $_0_i=$306;label=287;break;
 case 104: 
 var $$etemp$10$0=1074;
 var $$etemp$10$1=0;
 var $308=(($302$1|0) > ($$etemp$10$1|0)) | (((($302$1|0) == ($$etemp$10$1|0) & ($302$0>>>0) >  ($$etemp$10$0>>>0))));
 if($308){label=105;break;}else{label=106;break;}
 case 105: 
 var $310=___errno_location();
 HEAP32[(($310)>>2)]=34;
 var $311=($sign_0_i|0);
 var $312=($311)*((1.7976931348623157e+308));
 var $313=($312)*((1.7976931348623157e+308));
 var $_0_i=$313;label=287;break;
 case 106: 
 var $$etemp$11$0=-1180;
 var $$etemp$11$1=-1;
 var $315=(($302$1|0) < ($$etemp$11$1|0)) | (((($302$1|0) == ($$etemp$11$1|0) & ($302$0>>>0) <  ($$etemp$11$0>>>0))));
 if($315){label=108;break;}else{label=107;break;}
 case 107: 
 var $316=($x_3_lcssa_i_i|0)>-1;
 if($316){var $x_48_i_i=$x_3_lcssa_i_i;var $y_39_i_i=$y_0_i_i;var $e2_110_i_i$1=$302$1;var $e2_110_i_i$0=$302$0;label=109;break;}else{var $x_4_lcssa_i_i=$x_3_lcssa_i_i;var $y_3_lcssa_i_i=$y_0_i_i;var $e2_1_lcssa_i_i$1=$302$1;var $e2_1_lcssa_i_i$0=$302$0;label=112;break;}
 case 108: 
 var $318=___errno_location();
 HEAP32[(($318)>>2)]=34;
 var $319=($sign_0_i|0);
 var $320=($319)*((2.2250738585072014e-308));
 var $321=($320)*((2.2250738585072014e-308));
 var $_0_i=$321;label=287;break;
 case 109: 
 var $e2_110_i_i$0;
 var $e2_110_i_i$1;
 var $y_39_i_i;
 var $x_48_i_i;
 var $322=$y_39_i_i<(0.5);
 var $323=$x_48_i_i<<1;
 if($322){var $_pn_i_i=$y_39_i_i;var $x_5_i_i=$323;label=111;break;}else{label=110;break;}
 case 110: 
 var $325=$323|1;
 var $326=($y_39_i_i)-(1);
 var $_pn_i_i=$326;var $x_5_i_i=$325;label=111;break;
 case 111: 
 var $x_5_i_i;
 var $_pn_i_i;
 var $y_4_i_i=($y_39_i_i)+($_pn_i_i);
 var $$etemp$12$0=-1;
 var $$etemp$12$1=-1;
 var $328$0=_i64Add($e2_110_i_i$0,$e2_110_i_i$1,$$etemp$12$0,$$etemp$12$1);var $328$1=tempRet0;
 var $329=($x_5_i_i|0)>-1;
 if($329){var $x_48_i_i=$x_5_i_i;var $y_39_i_i=$y_4_i_i;var $e2_110_i_i$1=$328$1;var $e2_110_i_i$0=$328$0;label=109;break;}else{var $x_4_lcssa_i_i=$x_5_i_i;var $y_3_lcssa_i_i=$y_4_i_i;var $e2_1_lcssa_i_i$1=$328$1;var $e2_1_lcssa_i_i$0=$328$0;label=112;break;}
 case 112: 
 var $e2_1_lcssa_i_i$0;
 var $e2_1_lcssa_i_i$1;
 var $y_3_lcssa_i_i;
 var $x_4_lcssa_i_i;
 var $$etemp$13$0=1106;
 var $$etemp$13$1=0;
 var $330$0=_i64Add($e2_1_lcssa_i_i$0,$e2_1_lcssa_i_i$1,$$etemp$13$0,$$etemp$13$1);var $330$1=tempRet0;
 var $$etemp$14$0=53;
 var $$etemp$14$1=0;
 var $331=(($330$1|0) < ($$etemp$14$1|0)) | (((($330$1|0) == ($$etemp$14$1|0) & ($330$0>>>0) <  ($$etemp$14$0>>>0))));
 if($331){label=113;break;}else{label=114;break;}
 case 113: 
 var $333$0=$330$0;
 var $333=$333$0;
 var $334=($333|0)<0;
 var $__i_i=($334?0:$333);
 var $335=($__i_i|0)<53;
 if($335){label=115;break;}else{label=114;break;}
 case 114: 
 var $_pre_i_i=($sign_0_i|0);
 var $y_5_i_i=$y_3_lcssa_i_i;var $x_6_i_i=$x_4_lcssa_i_i;var $bias_07_i_i=0;var $_pre_phi_i_i=$_pre_i_i;label=123;break;
 case 115: 
 var $337=(((84)-($__i_i))|0);
 var $338=($337|0)>1023;
 if($338){label=116;break;}else{label=118;break;}
 case 116: 
 var $340=((($337)-(1023))|0);
 var $341=($340|0)>1023;
 if($341){label=117;break;}else{var $y_0_i11_i=8.98846567431158e+307;var $_0_i10_i=$340;label=121;break;}
 case 117: 
 var $343=((($337)-(2046))|0);
 var $344=($343|0)>1023;
 var $__i8_i=($344?1023:$343);
 var $y_0_i11_i=Infinity;var $_0_i10_i=$__i8_i;label=121;break;
 case 118: 
 var $346=($337|0)<-1022;
 if($346){label=119;break;}else{var $y_0_i11_i=1;var $_0_i10_i=$337;label=121;break;}
 case 119: 
 var $348=((($337)+(1022))|0);
 var $349=($348|0)<-1022;
 if($349){label=120;break;}else{var $y_0_i11_i=2.2250738585072014e-308;var $_0_i10_i=$348;label=121;break;}
 case 120: 
 var $351=((($337)+(2044))|0);
 var $352=($351|0)<-1022;
 var $_1_i9_i=($352?-1022:$351);
 var $y_0_i11_i=0;var $_0_i10_i=$_1_i9_i;label=121;break;
 case 121: 
 var $_0_i10_i;
 var $y_0_i11_i;
 var $353=((($_0_i10_i)+(1023))|0);
 var $354$0=$353;
 var $354$1=0;
 var $355$0=(0<<20)|(0>>>12);
 var $355$1=($354$0<<20)|(0>>>12);
 var $356=(HEAP32[((tempDoublePtr)>>2)]=$355$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$355$1, HEAPF64[(tempDoublePtr)>>3]);
 var $357=($y_0_i11_i)*($356);
 var $358=($sign_0_i|0);
 var $359=_copysign($357,$358);
 var $360=($__i_i|0)<32;
 var $361=$y_3_lcssa_i_i!=0;
 var $or_cond4_i_i=$360&$361;
 if($or_cond4_i_i){label=122;break;}else{var $y_5_i_i=$y_3_lcssa_i_i;var $x_6_i_i=$x_4_lcssa_i_i;var $bias_07_i_i=$359;var $_pre_phi_i_i=$358;label=123;break;}
 case 122: 
 var $363=$x_4_lcssa_i_i&1;
 var $364=($363|0)==0;
 var $365=$363^1;
 var $_x_4_i_i=((($365)+($x_4_lcssa_i_i))|0);
 var $_y_3_i_i=($364?0:$y_3_lcssa_i_i);
 var $y_5_i_i=$_y_3_i_i;var $x_6_i_i=$_x_4_i_i;var $bias_07_i_i=$359;var $_pre_phi_i_i=$358;label=123;break;
 case 123: 
 var $_pre_phi_i_i;
 var $bias_07_i_i;
 var $x_6_i_i;
 var $y_5_i_i;
 var $366=($x_6_i_i>>>0);
 var $367=($_pre_phi_i_i)*($366);
 var $368=($bias_07_i_i)+($367);
 var $369=($_pre_phi_i_i)*($y_5_i_i);
 var $370=($369)+($368);
 var $371=($370)-($bias_07_i_i);
 var $372=$371!=0;
 if($372){label=125;break;}else{label=124;break;}
 case 124: 
 var $374=___errno_location();
 HEAP32[(($374)>>2)]=34;
 label=125;break;
 case 125: 
 var $376$0=$e2_1_lcssa_i_i$0;
 var $376=$376$0;
 var $377=($376|0)>1023;
 if($377){label=126;break;}else{label=128;break;}
 case 126: 
 var $379=($371)*((8.98846567431158e+307));
 var $380=((($376)-(1023))|0);
 var $381=($380|0)>1023;
 if($381){label=127;break;}else{var $y_0_i_i16_i=$379;var $_0_i_i15_i=$380;label=131;break;}
 case 127: 
 var $383=($379)*((8.98846567431158e+307));
 var $384=((($376)-(2046))|0);
 var $385=($384|0)>1023;
 var $__i_i13_i=($385?1023:$384);
 var $y_0_i_i16_i=$383;var $_0_i_i15_i=$__i_i13_i;label=131;break;
 case 128: 
 var $387=($376|0)<-1022;
 if($387){label=129;break;}else{var $y_0_i_i16_i=$371;var $_0_i_i15_i=$376;label=131;break;}
 case 129: 
 var $389=($371)*((2.2250738585072014e-308));
 var $390=((($376)+(1022))|0);
 var $391=($390|0)<-1022;
 if($391){label=130;break;}else{var $y_0_i_i16_i=$389;var $_0_i_i15_i=$390;label=131;break;}
 case 130: 
 var $393=($389)*((2.2250738585072014e-308));
 var $394=((($376)+(2044))|0);
 var $395=($394|0)<-1022;
 var $_1_i_i14_i=($395?-1022:$394);
 var $y_0_i_i16_i=$393;var $_0_i_i15_i=$_1_i_i14_i;label=131;break;
 case 131: 
 var $_0_i_i15_i;
 var $y_0_i_i16_i;
 var $396=((($_0_i_i15_i)+(1023))|0);
 var $397$0=$396;
 var $397$1=0;
 var $398$0=(0<<20)|(0>>>12);
 var $398$1=($397$0<<20)|(0>>>12);
 var $399=(HEAP32[((tempDoublePtr)>>2)]=$398$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$398$1, HEAPF64[(tempDoublePtr)>>3]);
 var $400=($y_0_i_i16_i)*($399);
 var $_0_i=$400;label=287;break;
 case 132: 
 var $402=HEAP32[(($10)>>2)];
 var $403=($402|0)==0;
 if($403){var $c_6_i=48;label=134;break;}else{label=133;break;}
 case 133: 
 var $405=HEAP32[(($2)>>2)];
 var $406=((($405)-(1))|0);
 HEAP32[(($2)>>2)]=$406;
 var $c_6_i=48;label=134;break;
 case 134: 
 var $c_6_i;
 var $408=$x_i_i;
 var $$etemp$15$0=512;
 var $$etemp$15$1=0;

 var $_08_i_i=$c_6_i;var $gotdig_0_i9_i=0;label=135;break;
 case 135: 
 var $gotdig_0_i9_i;
 var $_08_i_i;
 if(($_08_i_i|0)==48){ label=136;break;}else if(($_08_i_i|0)==46){ label=139;break;}else{var $_2_i_i=$_08_i_i;var $gotrad_0_i12_i=0;var $gotdig_2_i11_i=$gotdig_0_i9_i;var $lrp_1_i_i$1=0;var $lrp_1_i_i$0=0;label=148;break;}
 case 136: 
 var $410=HEAP32[(($2)>>2)];
 var $411=HEAP32[(($10)>>2)];
 var $412=($410>>>0)<($411>>>0);
 if($412){label=137;break;}else{label=138;break;}
 case 137: 
 var $414=(($410+1)|0);
 HEAP32[(($2)>>2)]=$414;
 var $415=HEAP8[($410)];
 var $416=($415&255);
 var $_08_i_i=$416;var $gotdig_0_i9_i=1;label=135;break;
 case 138: 
 var $418=___shgetc($f_i_i);
 var $_08_i_i=$418;var $gotdig_0_i9_i=1;label=135;break;
 case 139: 
 var $420=HEAP32[(($2)>>2)];
 var $421=HEAP32[(($10)>>2)];
 var $422=($420>>>0)<($421>>>0);
 if($422){label=140;break;}else{label=141;break;}
 case 140: 
 var $424=(($420+1)|0);
 HEAP32[(($2)>>2)]=$424;
 var $425=HEAP8[($420)];
 var $426=($425&255);
 var $_1_ph_i_i=$426;label=142;break;
 case 141: 
 var $428=___shgetc($f_i_i);
 var $_1_ph_i_i=$428;label=142;break;
 case 142: 
 var $_1_ph_i_i;
 var $429=($_1_ph_i_i|0)==48;
 if($429){var $lrp_0110_i_i$1=-1;var $lrp_0110_i_i$0=-1;label=143;break;}else{var $_2_i_i=$_1_ph_i_i;var $gotrad_0_i12_i=1;var $gotdig_2_i11_i=$gotdig_0_i9_i;var $lrp_1_i_i$1=0;var $lrp_1_i_i$0=0;label=148;break;}
 case 143: 
 var $lrp_0110_i_i$0;
 var $lrp_0110_i_i$1;
 var $430=HEAP32[(($2)>>2)];
 var $431=HEAP32[(($10)>>2)];
 var $432=($430>>>0)<($431>>>0);
 if($432){label=144;break;}else{label=145;break;}
 case 144: 
 var $434=(($430+1)|0);
 HEAP32[(($2)>>2)]=$434;
 var $435=HEAP8[($430)];
 var $436=($435&255);
 var $_1_be_i_i=$436;label=146;break;
 case 145: 
 var $438=___shgetc($f_i_i);
 var $_1_be_i_i=$438;label=146;break;
 case 146: 
 var $_1_be_i_i;
 var $439=($_1_be_i_i|0)==48;
 if($439){label=147;break;}else{var $_2_i_i=$_1_be_i_i;var $gotrad_0_i12_i=1;var $gotdig_2_i11_i=1;var $lrp_1_i_i$1=$lrp_0110_i_i$1;var $lrp_1_i_i$0=$lrp_0110_i_i$0;label=148;break;}
 case 147: 
 var $$etemp$16$0=-1;
 var $$etemp$16$1=-1;
 var $phitmp_i10_i$0=_i64Add($lrp_0110_i_i$0,$lrp_0110_i_i$1,$$etemp$16$0,$$etemp$16$1);var $phitmp_i10_i$1=tempRet0;
 var $lrp_0110_i_i$1=$phitmp_i10_i$1;var $lrp_0110_i_i$0=$phitmp_i10_i$0;label=143;break;
 case 148: 
 var $lrp_1_i_i$0;
 var $lrp_1_i_i$1;
 var $gotdig_2_i11_i;
 var $gotrad_0_i12_i;
 var $_2_i_i;
 var $440=(($x_i_i)|0);
 HEAP32[(($440)>>2)]=0;
 var $441=((($_2_i_i)-(48))|0);
 var $442=($441>>>0)<10;
 var $443=($_2_i_i|0)==46;
 var $or_cond789_i_i=$442|$443;
 if($or_cond789_i_i){label=149;break;}else{var $lrp_2_lcssa_i_i$1=$lrp_1_i_i$1;var $lrp_2_lcssa_i_i$0=$lrp_1_i_i$0;var $dc_0_lcssa_i_i$1=0;var $dc_0_lcssa_i_i$0=0;var $lnz_0_lcssa_i_i=0;var $gotdig_3_lcssa_i_i=$gotdig_2_i11_i;var $gotrad_1_lcssa_i_i=$gotrad_0_i12_i;var $k_0_lcssa_i_i=0;var $j_0_lcssa_i_i=0;var $_3_lcssa_i_i=$_2_i_i;label=162;break;}
 case 149: 
 var $444=(($x_i_i+496)|0);
 var $lrp_290_i_i$1=$lrp_1_i_i$1;var $lrp_290_i_i$0=$lrp_1_i_i$0;var $dc_091_i_i$1=0;var $dc_091_i_i$0=0;var $lnz_092_i_i=0;var $gotdig_393_i_i=$gotdig_2_i11_i;var $gotrad_194_i_i=$gotrad_0_i12_i;var $k_095_i_i=0;var $j_096_i_i=0;var $_397_i_i=$_2_i_i;var $446=$441;var $445=$443;label=150;break;
 case 150: 
 var $445;
 var $446;
 var $_397_i_i;
 var $j_096_i_i;
 var $k_095_i_i;
 var $gotrad_194_i_i;
 var $gotdig_393_i_i;
 var $lnz_092_i_i;
 var $dc_091_i_i$0;
 var $dc_091_i_i$1;
 var $lrp_290_i_i$0;
 var $lrp_290_i_i$1;
 if($445){label=151;break;}else{label=152;break;}
 case 151: 
 var $cond_i_i=($gotrad_194_i_i|0)==0;
 if($cond_i_i){var $j_2_i_i=$j_096_i_i;var $k_2_i_i=$k_095_i_i;var $gotrad_2_i_i=1;var $gotdig_4_i_i=$gotdig_393_i_i;var $lnz_2_i_i=$lnz_092_i_i;var $dc_1_i14_i$1=$dc_091_i_i$1;var $dc_1_i14_i$0=$dc_091_i_i$0;var $lrp_3_i_i$1=$dc_091_i_i$1;var $lrp_3_i_i$0=$dc_091_i_i$0;label=158;break;}else{var $lrp_4_i_i$1=$lrp_290_i_i$1;var $lrp_4_i_i$0=$lrp_290_i_i$0;var $dc_077_i_i$1=$dc_091_i_i$1;var $dc_077_i_i$0=$dc_091_i_i$0;var $lnz_079_i_i=$lnz_092_i_i;var $gotdig_381_i_i=$gotdig_393_i_i;var $k_084_i_i=$k_095_i_i;var $j_086_i_i=$j_096_i_i;var $_388_i_i=$_397_i_i;label=163;break;}
 case 152: 
 var $449=($k_095_i_i|0)<125;
 var $$etemp$17$0=1;
 var $$etemp$17$1=0;
 var $450$0=_i64Add($dc_091_i_i$0,$dc_091_i_i$1,$$etemp$17$0,$$etemp$17$1);var $450$1=tempRet0;
 var $451=($_397_i_i|0)!=48;
 if($449){label=153;break;}else{label=156;break;}
 case 153: 
 var $453$0=$450$0;
 var $453=$453$0;
 var $_lnz_0_i_i=($451?$453:$lnz_092_i_i);
 var $454=($j_096_i_i|0)==0;
 var $455=(($x_i_i+($k_095_i_i<<2))|0);
 if($454){var $storemerge_i_i=$446;label=155;break;}else{label=154;break;}
 case 154: 
 var $457=HEAP32[(($455)>>2)];
 var $458=((($457)*(10))&-1);
 var $459=((($_397_i_i)-(48))|0);
 var $460=((($459)+($458))|0);
 var $storemerge_i_i=$460;label=155;break;
 case 155: 
 var $storemerge_i_i;
 HEAP32[(($455)>>2)]=$storemerge_i_i;
 var $462=((($j_096_i_i)+(1))|0);
 var $463=($462|0)==9;
 var $464=($463&1);
 var $_k_0_i_i=((($464)+($k_095_i_i))|0);
 var $_10_i_i=($463?0:$462);
 var $j_2_i_i=$_10_i_i;var $k_2_i_i=$_k_0_i_i;var $gotrad_2_i_i=$gotrad_194_i_i;var $gotdig_4_i_i=1;var $lnz_2_i_i=$_lnz_0_i_i;var $dc_1_i14_i$1=$450$1;var $dc_1_i14_i$0=$450$0;var $lrp_3_i_i$1=$lrp_290_i_i$1;var $lrp_3_i_i$0=$lrp_290_i_i$0;label=158;break;
 case 156: 
 if($451){label=157;break;}else{var $j_2_i_i=$j_096_i_i;var $k_2_i_i=$k_095_i_i;var $gotrad_2_i_i=$gotrad_194_i_i;var $gotdig_4_i_i=$gotdig_393_i_i;var $lnz_2_i_i=$lnz_092_i_i;var $dc_1_i14_i$1=$450$1;var $dc_1_i14_i$0=$450$0;var $lrp_3_i_i$1=$lrp_290_i_i$1;var $lrp_3_i_i$0=$lrp_290_i_i$0;label=158;break;}
 case 157: 
 var $467=HEAP32[(($444)>>2)];
 var $468=$467|1;
 HEAP32[(($444)>>2)]=$468;
 var $j_2_i_i=$j_096_i_i;var $k_2_i_i=$k_095_i_i;var $gotrad_2_i_i=$gotrad_194_i_i;var $gotdig_4_i_i=$gotdig_393_i_i;var $lnz_2_i_i=$lnz_092_i_i;var $dc_1_i14_i$1=$450$1;var $dc_1_i14_i$0=$450$0;var $lrp_3_i_i$1=$lrp_290_i_i$1;var $lrp_3_i_i$0=$lrp_290_i_i$0;label=158;break;
 case 158: 
 var $lrp_3_i_i$0;
 var $lrp_3_i_i$1;
 var $dc_1_i14_i$0;
 var $dc_1_i14_i$1;
 var $lnz_2_i_i;
 var $gotdig_4_i_i;
 var $gotrad_2_i_i;
 var $k_2_i_i;
 var $j_2_i_i;
 var $469=HEAP32[(($2)>>2)];
 var $470=HEAP32[(($10)>>2)];
 var $471=($469>>>0)<($470>>>0);
 if($471){label=159;break;}else{label=160;break;}
 case 159: 
 var $473=(($469+1)|0);
 HEAP32[(($2)>>2)]=$473;
 var $474=HEAP8[($469)];
 var $475=($474&255);
 var $_3_be_i_i=$475;label=161;break;
 case 160: 
 var $477=___shgetc($f_i_i);
 var $_3_be_i_i=$477;label=161;break;
 case 161: 
 var $_3_be_i_i;
 var $478=((($_3_be_i_i)-(48))|0);
 var $479=($478>>>0)<10;
 var $480=($_3_be_i_i|0)==46;
 var $or_cond7_i_i=$479|$480;
 if($or_cond7_i_i){var $lrp_290_i_i$1=$lrp_3_i_i$1;var $lrp_290_i_i$0=$lrp_3_i_i$0;var $dc_091_i_i$1=$dc_1_i14_i$1;var $dc_091_i_i$0=$dc_1_i14_i$0;var $lnz_092_i_i=$lnz_2_i_i;var $gotdig_393_i_i=$gotdig_4_i_i;var $gotrad_194_i_i=$gotrad_2_i_i;var $k_095_i_i=$k_2_i_i;var $j_096_i_i=$j_2_i_i;var $_397_i_i=$_3_be_i_i;var $446=$478;var $445=$480;label=150;break;}else{var $lrp_2_lcssa_i_i$1=$lrp_3_i_i$1;var $lrp_2_lcssa_i_i$0=$lrp_3_i_i$0;var $dc_0_lcssa_i_i$1=$dc_1_i14_i$1;var $dc_0_lcssa_i_i$0=$dc_1_i14_i$0;var $lnz_0_lcssa_i_i=$lnz_2_i_i;var $gotdig_3_lcssa_i_i=$gotdig_4_i_i;var $gotrad_1_lcssa_i_i=$gotrad_2_i_i;var $k_0_lcssa_i_i=$k_2_i_i;var $j_0_lcssa_i_i=$j_2_i_i;var $_3_lcssa_i_i=$_3_be_i_i;label=162;break;}
 case 162: 
 var $_3_lcssa_i_i;
 var $j_0_lcssa_i_i;
 var $k_0_lcssa_i_i;
 var $gotrad_1_lcssa_i_i;
 var $gotdig_3_lcssa_i_i;
 var $lnz_0_lcssa_i_i;
 var $dc_0_lcssa_i_i$0;
 var $dc_0_lcssa_i_i$1;
 var $lrp_2_lcssa_i_i$0;
 var $lrp_2_lcssa_i_i$1;
 var $481=($gotrad_1_lcssa_i_i|0)==0;
 var $dc_0_lrp_2_i_i$0=($481?$dc_0_lcssa_i_i$0:$lrp_2_lcssa_i_i$0);
 var $dc_0_lrp_2_i_i$1=($481?$dc_0_lcssa_i_i$1:$lrp_2_lcssa_i_i$1);
 var $lrp_4_i_i$1=$dc_0_lrp_2_i_i$1;var $lrp_4_i_i$0=$dc_0_lrp_2_i_i$0;var $dc_077_i_i$1=$dc_0_lcssa_i_i$1;var $dc_077_i_i$0=$dc_0_lcssa_i_i$0;var $lnz_079_i_i=$lnz_0_lcssa_i_i;var $gotdig_381_i_i=$gotdig_3_lcssa_i_i;var $k_084_i_i=$k_0_lcssa_i_i;var $j_086_i_i=$j_0_lcssa_i_i;var $_388_i_i=$_3_lcssa_i_i;label=163;break;
 case 163: 
 var $_388_i_i;
 var $j_086_i_i;
 var $k_084_i_i;
 var $gotdig_381_i_i;
 var $lnz_079_i_i;
 var $dc_077_i_i$0;
 var $dc_077_i_i$1;
 var $lrp_4_i_i$0;
 var $lrp_4_i_i$1;
 var $482=($gotdig_381_i_i|0)!=0;
 if($482){label=164;break;}else{label=169;break;}
 case 164: 
 var $484=$_388_i_i|32;
 var $485=($484|0)==101;
 if($485){label=165;break;}else{label=169;break;}
 case 165: 
 var $487$0=_scanexp($f_i_i);
 var $487$1=tempRet0;
 var $$etemp$18$0=0;
 var $$etemp$18$1=-2147483648;
 var $488=(($487$0|0) == ($$etemp$18$0|0)) & (($487$1|0) == ($$etemp$18$1|0));
 if($488){label=166;break;}else{var $e10_0_i_i$1=$487$1;var $e10_0_i_i$0=$487$0;label=168;break;}
 case 166: 
 var $490=HEAP32[(($10)>>2)];
 var $491=($490|0)==0;
 if($491){var $e10_0_i_i$1=0;var $e10_0_i_i$0=0;label=168;break;}else{label=167;break;}
 case 167: 
 var $493=HEAP32[(($2)>>2)];
 var $494=((($493)-(1))|0);
 HEAP32[(($2)>>2)]=$494;
 var $e10_0_i_i$1=0;var $e10_0_i_i$0=0;label=168;break;
 case 168: 
 var $e10_0_i_i$0;
 var $e10_0_i_i$1;
 var $496$0=_i64Add($e10_0_i_i$0,$e10_0_i_i$1,$lrp_4_i_i$0,$lrp_4_i_i$1);var $496$1=tempRet0;
 var $lrp_5_i_i$1=$496$1;var $lrp_5_i_i$0=$496$0;label=172;break;
 case 169: 
 var $498=($_388_i_i|0)>-1;
 if($498){label=170;break;}else{var $lrp_5_i_i$1=$lrp_4_i_i$1;var $lrp_5_i_i$0=$lrp_4_i_i$0;label=172;break;}
 case 170: 
 var $500=HEAP32[(($10)>>2)];
 var $501=($500|0)==0;
 if($501){var $lrp_5_i_i$1=$lrp_4_i_i$1;var $lrp_5_i_i$0=$lrp_4_i_i$0;label=172;break;}else{label=171;break;}
 case 171: 
 var $503=HEAP32[(($2)>>2)];
 var $504=((($503)-(1))|0);
 HEAP32[(($2)>>2)]=$504;
 var $lrp_5_i_i$1=$lrp_4_i_i$1;var $lrp_5_i_i$0=$lrp_4_i_i$0;label=172;break;
 case 172: 
 var $lrp_5_i_i$0;
 var $lrp_5_i_i$1;
 if($482){label=174;break;}else{label=173;break;}
 case 173: 
 var $507=___errno_location();
 HEAP32[(($507)>>2)]=22;
 HEAP32[(($6)>>2)]=0;
 var $508=HEAP32[(($3)>>2)];
 var $509=HEAP32[(($2)>>2)];
 var $510=$508;
 var $511=$509;
 var $512=((($510)-($511))|0);
 HEAP32[(($9)>>2)]=$512;
 HEAP32[(($10)>>2)]=$508;
 var $_0_i=0;label=287;break;
 case 174: 
 var $514=HEAP32[(($440)>>2)];
 var $515=($514|0)==0;
 if($515){label=175;break;}else{label=176;break;}
 case 175: 
 var $517=($sign_0_i|0);
 var $518=($517)*(0);
 var $_0_i=$518;label=287;break;
 case 176: 
 var $520=(($lrp_5_i_i$0|0) == ($dc_077_i_i$0|0)) & (($lrp_5_i_i$1|0) == ($dc_077_i_i$1|0));
 var $$etemp$19$0=10;
 var $$etemp$19$1=0;
 var $521=(($dc_077_i_i$1|0) < ($$etemp$19$1|0)) | (((($dc_077_i_i$1|0) == ($$etemp$19$1|0) & ($dc_077_i_i$0>>>0) <  ($$etemp$19$0>>>0))));
 var $or_cond_i15_i=$520&$521;
 if($or_cond_i15_i){label=177;break;}else{label=178;break;}
 case 177: 
 var $523=($sign_0_i|0);
 var $524=($514>>>0);
 var $525=($523)*($524);
 var $_0_i=$525;label=287;break;
 case 178: 
 var $$etemp$20$0=537;
 var $$etemp$20$1=0;
 var $527=(($lrp_5_i_i$1|0) > ($$etemp$20$1|0)) | (((($lrp_5_i_i$1|0) == ($$etemp$20$1|0) & ($lrp_5_i_i$0>>>0) >  ($$etemp$20$0>>>0))));
 if($527){label=179;break;}else{label=180;break;}
 case 179: 
 var $529=___errno_location();
 HEAP32[(($529)>>2)]=34;
 var $530=($sign_0_i|0);
 var $531=($530)*((1.7976931348623157e+308));
 var $532=($531)*((1.7976931348623157e+308));
 var $_0_i=$532;label=287;break;
 case 180: 
 var $$etemp$21$0=-1180;
 var $$etemp$21$1=-1;
 var $534=(($lrp_5_i_i$1|0) < ($$etemp$21$1|0)) | (((($lrp_5_i_i$1|0) == ($$etemp$21$1|0) & ($lrp_5_i_i$0>>>0) <  ($$etemp$21$0>>>0))));
 if($534){label=181;break;}else{label=182;break;}
 case 181: 
 var $536=___errno_location();
 HEAP32[(($536)>>2)]=34;
 var $537=($sign_0_i|0);
 var $538=($537)*((2.2250738585072014e-308));
 var $539=($538)*((2.2250738585072014e-308));
 var $_0_i=$539;label=287;break;
 case 182: 
 var $541=($j_086_i_i|0)==0;
 if($541){var $k_3_i_i=$k_084_i_i;label=188;break;}else{label=183;break;}
 case 183: 
 var $542=($j_086_i_i|0)<9;
 if($542){label=184;break;}else{label=187;break;}
 case 184: 
 var $543=(($x_i_i+($k_084_i_i<<2))|0);
 var $_promoted_i_i=HEAP32[(($543)>>2)];
 var $j_371_i_i=$j_086_i_i;var $545=$_promoted_i_i;label=185;break;
 case 185: 
 var $545;
 var $j_371_i_i;
 var $546=((($545)*(10))&-1);
 var $547=((($j_371_i_i)+(1))|0);
 var $548=($547|0)<9;
 if($548){var $j_371_i_i=$547;var $545=$546;label=185;break;}else{label=186;break;}
 case 186: 
 HEAP32[(($543)>>2)]=$546;
 label=187;break;
 case 187: 
 var $550=((($k_084_i_i)+(1))|0);
 var $k_3_i_i=$550;label=188;break;
 case 188: 
 var $k_3_i_i;
 var $552$0=$lrp_5_i_i$0;
 var $552=$552$0;
 var $553=($lnz_079_i_i|0)<9;
 if($553){label=189;break;}else{label=197;break;}
 case 189: 
 var $555=($lnz_079_i_i|0)<=($552|0);
 var $556=($552|0)<18;
 var $or_cond3_i16_i=$555&$556;
 if($or_cond3_i16_i){label=190;break;}else{label=197;break;}
 case 190: 
 var $558=($552|0)==9;
 if($558){label=191;break;}else{label=192;break;}
 case 191: 
 var $560=($sign_0_i|0);
 var $561=HEAP32[(($440)>>2)];
 var $562=($561>>>0);
 var $563=($560)*($562);
 var $_0_i=$563;label=287;break;
 case 192: 
 var $565=($552|0)<9;
 if($565){label=193;break;}else{label=194;break;}
 case 193: 
 var $567=($sign_0_i|0);
 var $568=HEAP32[(($440)>>2)];
 var $569=($568>>>0);
 var $570=($567)*($569);
 var $571=(((8)-($552))|0);
 var $572=((392+($571<<2))|0);
 var $573=HEAP32[(($572)>>2)];
 var $574=($573|0);
 var $575=($570)/($574);
 var $_0_i=$575;label=287;break;
 case 194: 
 var $577=((($552)*(-3))&-1);
 var $578=((($577)+(80))|0);
 var $579=($578|0)>30;
 var $_pre_i17_i=HEAP32[(($440)>>2)];
 if($579){label=196;break;}else{label=195;break;}
 case 195: 
 var $581=$_pre_i17_i>>>($578>>>0);
 var $582=($581|0)==0;
 if($582){label=196;break;}else{label=197;break;}
 case 196: 
 var $583=($sign_0_i|0);
 var $584=($_pre_i17_i>>>0);
 var $585=($583)*($584);
 var $586=((($552)-(10))|0);
 var $587=((392+($586<<2))|0);
 var $588=HEAP32[(($587)>>2)];
 var $589=($588|0);
 var $590=($585)*($589);
 var $_0_i=$590;label=287;break;
 case 197: 
 var $592=(((($552|0))%(9))&-1);
 var $593=($592|0)==0;
 if($593){var $a_2_ph40_i_i=0;var $z_1_ph39_i_i=$k_3_i_i;var $e2_0_ph_i_i=0;var $rp_2_ph38_i_i=$552;label=206;break;}else{label=198;break;}
 case 198: 
 var $595=($552|0)>-1;
 var $596=((($592)+(9))|0);
 var $597=($595?$592:$596);
 var $598=(((8)-($597))|0);
 var $599=((392+($598<<2))|0);
 var $600=HEAP32[(($599)>>2)];
 var $601=($k_3_i_i|0)==0;
 if($601){var $z_0_i_i=0;var $a_0_lcssa161_i_i=0;var $rp_0_lcssa162_i_i=$552;label=205;break;}else{label=199;break;}
 case 199: 
 var $602=(((1000000000)/(($600|0)))&-1);
 var $rp_060_i_i=$552;var $a_061_i_i=0;var $k_462_i_i=0;var $carry_063_i_i=0;label=200;break;
 case 200: 
 var $carry_063_i_i;
 var $k_462_i_i;
 var $a_061_i_i;
 var $rp_060_i_i;
 var $603=(($x_i_i+($k_462_i_i<<2))|0);
 var $604=HEAP32[(($603)>>2)];
 var $605=(((($604>>>0))%(($600>>>0)))&-1);
 var $606=(((($604>>>0))/(($600>>>0)))&-1);
 var $607=((($606)+($carry_063_i_i))|0);
 HEAP32[(($603)>>2)]=$607;
 var $608=(Math_imul($605,$602)|0);
 var $609=($k_462_i_i|0)==($a_061_i_i|0);
 var $610=($607|0)==0;
 var $or_cond11_i_i=$609&$610;
 var $611=((($k_462_i_i)+(1))|0);
 if($or_cond11_i_i){label=201;break;}else{var $a_1_i_i=$a_061_i_i;var $rp_1_i18_i=$rp_060_i_i;label=202;break;}
 case 201: 
 var $613=$611&127;
 var $614=((($rp_060_i_i)-(9))|0);
 var $a_1_i_i=$613;var $rp_1_i18_i=$614;label=202;break;
 case 202: 
 var $rp_1_i18_i;
 var $a_1_i_i;
 var $615=($611|0)==($k_3_i_i|0);
 if($615){label=203;break;}else{var $rp_060_i_i=$rp_1_i18_i;var $a_061_i_i=$a_1_i_i;var $k_462_i_i=$611;var $carry_063_i_i=$608;label=200;break;}
 case 203: 
 var $616=($608|0)==0;
 if($616){var $z_0_i_i=$k_3_i_i;var $a_0_lcssa161_i_i=$a_1_i_i;var $rp_0_lcssa162_i_i=$rp_1_i18_i;label=205;break;}else{label=204;break;}
 case 204: 
 var $618=((($k_3_i_i)+(1))|0);
 var $619=(($x_i_i+($k_3_i_i<<2))|0);
 HEAP32[(($619)>>2)]=$608;
 var $z_0_i_i=$618;var $a_0_lcssa161_i_i=$a_1_i_i;var $rp_0_lcssa162_i_i=$rp_1_i18_i;label=205;break;
 case 205: 
 var $rp_0_lcssa162_i_i;
 var $a_0_lcssa161_i_i;
 var $z_0_i_i;
 var $620=(((9)-($597))|0);
 var $621=((($620)+($rp_0_lcssa162_i_i))|0);
 var $a_2_ph40_i_i=$a_0_lcssa161_i_i;var $z_1_ph39_i_i=$z_0_i_i;var $e2_0_ph_i_i=0;var $rp_2_ph38_i_i=$621;label=206;break;
 case 206: 
 var $rp_2_ph38_i_i;
 var $e2_0_ph_i_i;
 var $z_1_ph39_i_i;
 var $a_2_ph40_i_i;
 var $622=($rp_2_ph38_i_i|0)<18;
 var $623=(($x_i_i+($a_2_ph40_i_i<<2))|0);
 if($622){var $z_1_us_i_i=$z_1_ph39_i_i;var $e2_0_us_i_i=$e2_0_ph_i_i;label=208;break;}else{label=207;break;}
 case 207: 
 var $624=($rp_2_ph38_i_i|0)==18;
 if($624){var $z_1_us45_i_i=$z_1_ph39_i_i;var $e2_0_us44_i_i=$e2_0_ph_i_i;label=215;break;}else{var $a_3_ph_i_i=$a_2_ph40_i_i;var $z_5_ph_i_i=$z_1_ph39_i_i;var $e2_1_ph_i_i=$e2_0_ph_i_i;var $rp_3_ph33_i_i=$rp_2_ph38_i_i;label=239;break;}
 case 208: 
 var $e2_0_us_i_i;
 var $z_1_us_i_i;
 var $625=((($z_1_us_i_i)+(127))|0);
 var $carry1_0_us_i_i=0;var $k_5_in_us_i_i=$625;var $z_2_us_i_i=$z_1_us_i_i;label=209;break;
 case 209: 
 var $z_2_us_i_i;
 var $k_5_in_us_i_i;
 var $carry1_0_us_i_i;
 var $k_5_us_i_i=$k_5_in_us_i_i&127;
 var $627=(($x_i_i+($k_5_us_i_i<<2))|0);
 var $628=HEAP32[(($627)>>2)];
 var $629$0=$628;
 var $629$1=0;
 var $630$0=($629$0<<29)|(0>>>3);
 var $630$1=($629$1<<29)|($629$0>>>3);
 var $631$0=$carry1_0_us_i_i;
 var $631$1=0;
 var $632$0=_i64Add($630$0,$630$1,$631$0,$631$1);var $632$1=tempRet0;
 var $$etemp$22$0=1000000000;
 var $$etemp$22$1=0;
 var $633=(($632$1>>>0) > ($$etemp$22$1>>>0)) | (((($632$1>>>0) == ($$etemp$22$1>>>0) & ($632$0>>>0) >  ($$etemp$22$0>>>0))));
 var $extract_t19_us_i_i$0=$632$0;
 var $extract_t19_us_i_i=$extract_t19_us_i_i$0;
 if($633){label=210;break;}else{var $carry1_1_us_i_i=0;var $_sink_off0_us_i_i=$extract_t19_us_i_i;label=211;break;}
 case 210: 
 var $$etemp$23$0=1000000000;
 var $$etemp$23$1=0;
 var $635$0=___udivdi3($632$0,$632$1,$$etemp$23$0,$$etemp$23$1);var $635$1=tempRet0;
 var $636$0=$635$0;
 var $636=$636$0;
 var $$etemp$24$0=1000000000;
 var $$etemp$24$1=0;
 var $637$0=___uremdi3($632$0,$632$1,$$etemp$24$0,$$etemp$24$1);var $637$1=tempRet0;
 var $extract_t_us_i_i$0=$637$0;
 var $extract_t_us_i_i=$extract_t_us_i_i$0;
 var $carry1_1_us_i_i=$636;var $_sink_off0_us_i_i=$extract_t_us_i_i;label=211;break;
 case 211: 
 var $_sink_off0_us_i_i;
 var $carry1_1_us_i_i;
 HEAP32[(($627)>>2)]=$_sink_off0_us_i_i;
 var $639=((($z_2_us_i_i)+(127))|0);
 var $640=$639&127;
 var $641=($k_5_us_i_i|0)!=($640|0);
 var $642=($k_5_us_i_i|0)==($a_2_ph40_i_i|0);
 var $or_cond12_us_i_i=$641|$642;
 if($or_cond12_us_i_i){var $z_3_us_i_i=$z_2_us_i_i;label=213;break;}else{label=212;break;}
 case 212: 
 var $644=($_sink_off0_us_i_i|0)==0;
 var $k_5_z_2_us_i_i=($644?$k_5_us_i_i:$z_2_us_i_i);
 var $z_3_us_i_i=$k_5_z_2_us_i_i;label=213;break;
 case 213: 
 var $z_3_us_i_i;
 var $646=((($k_5_us_i_i)-(1))|0);
 if($642){label=214;break;}else{var $carry1_0_us_i_i=$carry1_1_us_i_i;var $k_5_in_us_i_i=$646;var $z_2_us_i_i=$z_3_us_i_i;label=209;break;}
 case 214: 
 var $648=((($e2_0_us_i_i)-(29))|0);
 var $649=($carry1_1_us_i_i|0)==0;
 if($649){var $z_1_us_i_i=$z_3_us_i_i;var $e2_0_us_i_i=$648;label=208;break;}else{var $_lcssa43_i_i=$648;var $z_3_lcssa_lcssa_i_i=$z_3_us_i_i;var $carry1_1_lcssa_lcssa_i_i=$carry1_1_us_i_i;label=223;break;}
 case 215: 
 var $e2_0_us44_i_i;
 var $z_1_us45_i_i;
 var $650=HEAP32[(($623)>>2)];
 var $651=($650>>>0)<9007199;
 if($651){label=216;break;}else{var $a_3_ph_i_i=$a_2_ph40_i_i;var $z_5_ph_i_i=$z_1_us45_i_i;var $e2_1_ph_i_i=$e2_0_us44_i_i;var $rp_3_ph33_i_i=18;label=239;break;}
 case 216: 
 var $652=((($z_1_us45_i_i)+(127))|0);
 var $carry1_0_us49_i_i=0;var $k_5_in_us48_i_i=$652;var $z_2_us47_i_i=$z_1_us45_i_i;label=217;break;
 case 217: 
 var $z_2_us47_i_i;
 var $k_5_in_us48_i_i;
 var $carry1_0_us49_i_i;
 var $k_5_us50_i_i=$k_5_in_us48_i_i&127;
 var $654=(($x_i_i+($k_5_us50_i_i<<2))|0);
 var $655=HEAP32[(($654)>>2)];
 var $656$0=$655;
 var $656$1=0;
 var $657$0=($656$0<<29)|(0>>>3);
 var $657$1=($656$1<<29)|($656$0>>>3);
 var $658$0=$carry1_0_us49_i_i;
 var $658$1=0;
 var $659$0=_i64Add($657$0,$657$1,$658$0,$658$1);var $659$1=tempRet0;
 var $$etemp$25$0=1000000000;
 var $$etemp$25$1=0;
 var $660=(($659$1>>>0) > ($$etemp$25$1>>>0)) | (((($659$1>>>0) == ($$etemp$25$1>>>0) & ($659$0>>>0) >  ($$etemp$25$0>>>0))));
 var $extract_t19_us51_i_i$0=$659$0;
 var $extract_t19_us51_i_i=$extract_t19_us51_i_i$0;
 if($660){label=218;break;}else{var $carry1_1_us54_i_i=0;var $_sink_off0_us53_i_i=$extract_t19_us51_i_i;label=219;break;}
 case 218: 
 var $$etemp$26$0=1000000000;
 var $$etemp$26$1=0;
 var $662$0=___udivdi3($659$0,$659$1,$$etemp$26$0,$$etemp$26$1);var $662$1=tempRet0;
 var $663$0=$662$0;
 var $663=$663$0;
 var $$etemp$27$0=1000000000;
 var $$etemp$27$1=0;
 var $664$0=___uremdi3($659$0,$659$1,$$etemp$27$0,$$etemp$27$1);var $664$1=tempRet0;
 var $extract_t_us52_i_i$0=$664$0;
 var $extract_t_us52_i_i=$extract_t_us52_i_i$0;
 var $carry1_1_us54_i_i=$663;var $_sink_off0_us53_i_i=$extract_t_us52_i_i;label=219;break;
 case 219: 
 var $_sink_off0_us53_i_i;
 var $carry1_1_us54_i_i;
 HEAP32[(($654)>>2)]=$_sink_off0_us53_i_i;
 var $666=((($z_2_us47_i_i)+(127))|0);
 var $667=$666&127;
 var $668=($k_5_us50_i_i|0)!=($667|0);
 var $669=($k_5_us50_i_i|0)==($a_2_ph40_i_i|0);
 var $or_cond12_us55_i_i=$668|$669;
 if($or_cond12_us55_i_i){var $z_3_us57_i_i=$z_2_us47_i_i;label=221;break;}else{label=220;break;}
 case 220: 
 var $671=($_sink_off0_us53_i_i|0)==0;
 var $k_5_z_2_us56_i_i=($671?$k_5_us50_i_i:$z_2_us47_i_i);
 var $z_3_us57_i_i=$k_5_z_2_us56_i_i;label=221;break;
 case 221: 
 var $z_3_us57_i_i;
 var $673=((($k_5_us50_i_i)-(1))|0);
 if($669){label=222;break;}else{var $carry1_0_us49_i_i=$carry1_1_us54_i_i;var $k_5_in_us48_i_i=$673;var $z_2_us47_i_i=$z_3_us57_i_i;label=217;break;}
 case 222: 
 var $675=((($e2_0_us44_i_i)-(29))|0);
 var $676=($carry1_1_us54_i_i|0)==0;
 if($676){var $z_1_us45_i_i=$z_3_us57_i_i;var $e2_0_us44_i_i=$675;label=215;break;}else{var $_lcssa43_i_i=$675;var $z_3_lcssa_lcssa_i_i=$z_3_us57_i_i;var $carry1_1_lcssa_lcssa_i_i=$carry1_1_us54_i_i;label=223;break;}
 case 223: 
 var $carry1_1_lcssa_lcssa_i_i;
 var $z_3_lcssa_lcssa_i_i;
 var $_lcssa43_i_i;
 var $677=((($rp_2_ph38_i_i)+(9))|0);
 var $678=((($a_2_ph40_i_i)+(127))|0);
 var $679=$678&127;
 var $680=($679|0)==($z_3_lcssa_lcssa_i_i|0);
 if($680){label=224;break;}else{var $z_4_i_i=$z_3_lcssa_lcssa_i_i;label=225;break;}
 case 224: 
 var $682=((($z_3_lcssa_lcssa_i_i)+(127))|0);
 var $683=$682&127;
 var $684=(($x_i_i+($683<<2))|0);
 var $685=HEAP32[(($684)>>2)];
 var $686=((($z_3_lcssa_lcssa_i_i)+(126))|0);
 var $687=$686&127;
 var $688=(($x_i_i+($687<<2))|0);
 var $689=HEAP32[(($688)>>2)];
 var $690=$689|$685;
 HEAP32[(($688)>>2)]=$690;
 var $z_4_i_i=$683;label=225;break;
 case 225: 
 var $z_4_i_i;
 var $692=(($x_i_i+($679<<2))|0);
 HEAP32[(($692)>>2)]=$carry1_1_lcssa_lcssa_i_i;
 var $a_2_ph40_i_i=$679;var $z_1_ph39_i_i=$z_4_i_i;var $e2_0_ph_i_i=$_lcssa43_i_i;var $rp_2_ph38_i_i=$677;label=206;break;
 case 226: 
 var $e2_1_i_i;
 var $a_3_i_i;
 var $i_025_i_i=0;label=228;break;
 case 227: 
 var $694=($707|0)<2;
 if($694){var $i_025_i_i=$707;label=228;break;}else{var $i_1_i_i=$707;label=231;break;}
 case 228: 
 var $i_025_i_i;
 var $696=((($i_025_i_i)+($a_3_i_i))|0);
 var $697=$696&127;
 var $698=($697|0)==($z_5_ph_i_i|0);
 if($698){var $i_1_i_i=2;label=231;break;}else{label=229;break;}
 case 229: 
 var $700=(($x_i_i+($697<<2))|0);
 var $701=HEAP32[(($700)>>2)];
 var $702=((384+($i_025_i_i<<2))|0);
 var $703=HEAP32[(($702)>>2)];
 var $704=($701>>>0)<($703>>>0);
 if($704){var $i_1_i_i=2;label=231;break;}else{label=230;break;}
 case 230: 
 var $706=($701>>>0)>($703>>>0);
 var $707=((($i_025_i_i)+(1))|0);
 if($706){var $i_1_i_i=$i_025_i_i;label=231;break;}else{label=227;break;}
 case 231: 
 var $i_1_i_i;
 var $709=($i_1_i_i|0)==2;
 var $or_cond13_i_i=$709&$740;
 if($or_cond13_i_i){label=232;break;}else{label=233;break;}
 case 232: 
 var $710=$a_3_i_i&127;
 var $711=($710|0)==($z_5_ph_i_i|0);
 if($711){label=242;break;}else{var $z_7_i_i=$z_5_ph_i_i;label=243;break;}
 case 233: 
 var $713=((($_14_i_i)+($e2_1_i_i))|0);
 var $714=($a_3_i_i|0)==($z_5_ph_i_i|0);
 if($714){var $a_3_i_i=$z_5_ph_i_i;var $e2_1_i_i=$713;label=226;break;}else{label=234;break;}
 case 234: 
 var $715=1<<$_14_i_i;
 var $716=((($715)-(1))|0);
 var $717=1000000000>>>($_14_i_i>>>0);
 var $rp_426_i_i=$rp_3_i_ph_i;var $a_427_i_i=$a_3_i_i;var $k_628_i_i=$a_3_i_i;var $carry3_030_i_i=0;label=235;break;
 case 235: 
 var $carry3_030_i_i;
 var $k_628_i_i;
 var $a_427_i_i;
 var $rp_426_i_i;
 var $718=(($x_i_i+($k_628_i_i<<2))|0);
 var $719=HEAP32[(($718)>>2)];
 var $720=$719&$716;
 var $721=$719>>>($_14_i_i>>>0);
 var $722=((($721)+($carry3_030_i_i))|0);
 HEAP32[(($718)>>2)]=$722;
 var $723=(Math_imul($720,$717)|0);
 var $724=($k_628_i_i|0)==($a_427_i_i|0);
 var $725=($722|0)==0;
 var $or_cond15_i_i=$724&$725;
 var $726=((($k_628_i_i)+(1))|0);
 var $727=$726&127;
 var $728=((($rp_426_i_i)-(9))|0);
 var $rp_5_i_i=($or_cond15_i_i?$728:$rp_426_i_i);
 var $a_5_i_i=($or_cond15_i_i?$727:$a_427_i_i);
 var $729=($727|0)==($z_5_ph_i_i|0);
 if($729){label=236;break;}else{var $rp_426_i_i=$rp_5_i_i;var $a_427_i_i=$a_5_i_i;var $k_628_i_i=$727;var $carry3_030_i_i=$723;label=235;break;}
 case 236: 
 var $730=($723|0)==0;
 if($730){var $a_3_i_ph_i=$a_5_i_i;var $e2_1_i_ph_i=$713;var $rp_3_i_ph_i=$rp_5_i_i;label=240;break;}else{label=237;break;}
 case 237: 
 var $732=($736|0)==($a_5_i_i|0);
 if($732){label=241;break;}else{label=238;break;}
 case 238: 
 var $734=(($x_i_i+($z_5_ph_i_i<<2))|0);
 HEAP32[(($734)>>2)]=$723;
 var $a_3_ph_i_i=$a_5_i_i;var $z_5_ph_i_i=$736;var $e2_1_ph_i_i=$713;var $rp_3_ph33_i_i=$rp_5_i_i;label=239;break;
 case 239: 
 var $rp_3_ph33_i_i;
 var $e2_1_ph_i_i;
 var $z_5_ph_i_i;
 var $a_3_ph_i_i;
 var $735=((($z_5_ph_i_i)+(1))|0);
 var $736=$735&127;
 var $737=((($z_5_ph_i_i)+(127))|0);
 var $738=$737&127;
 var $739=(($x_i_i+($738<<2))|0);
 var $a_3_i_ph_i=$a_3_ph_i_i;var $e2_1_i_ph_i=$e2_1_ph_i_i;var $rp_3_i_ph_i=$rp_3_ph33_i_i;label=240;break;
 case 240: 
 var $rp_3_i_ph_i;
 var $e2_1_i_ph_i;
 var $a_3_i_ph_i;
 var $740=($rp_3_i_ph_i|0)==18;
 var $741=($rp_3_i_ph_i|0)>27;
 var $_14_i_i=($741?9:1);
 var $a_3_i_i=$a_3_i_ph_i;var $e2_1_i_i=$e2_1_i_ph_i;label=226;break;
 case 241: 
 var $743=HEAP32[(($739)>>2)];
 var $744=$743|1;
 HEAP32[(($739)>>2)]=$744;
 var $a_3_i_ph_i=$a_5_i_i;var $e2_1_i_ph_i=$713;var $rp_3_i_ph_i=$rp_5_i_i;label=240;break;
 case 242: 
 var $746=((($736)-(1))|0);
 var $747=(($x_i_i+($746<<2))|0);
 HEAP32[(($747)>>2)]=0;
 var $z_7_i_i=$736;label=243;break;
 case 243: 
 var $z_7_i_i;
 var $749=(($x_i_i+($710<<2))|0);
 var $750=HEAP32[(($749)>>2)];
 var $751=($750>>>0);
 var $752=((($a_3_i_i)+(1))|0);
 var $753=$752&127;
 var $754=($753|0)==($z_7_i_i|0);
 if($754){label=284;break;}else{var $z_7_1_i_i=$z_7_i_i;label=285;break;}
 case 244: 
 var $756=($904|0)<0;
 var $__i22_i=($756?0:$904);
 var $757=($__i22_i|0)<53;
 if($757){label=245;break;}else{var $bias_0_i_i=0;var $frac_0_i_i=0;var $y_1_i23_i=$902;var $denormal_0_i_i8=1;var $_09_i_i9=$__i22_i;label=258;break;}
 case 245: 
 var $759=(((105)-($__i22_i))|0);
 var $760=($759|0)>1023;
 if($760){label=246;break;}else{label=248;break;}
 case 246: 
 var $762=((($759)-(1023))|0);
 var $763=($762|0)>1023;
 if($763){label=247;break;}else{var $y_0_i6_i=8.98846567431158e+307;var $_0_i5_i=$762;label=251;break;}
 case 247: 
 var $765=((($759)-(2046))|0);
 var $766=($765|0)>1023;
 var $__i3_i=($766?1023:$765);
 var $y_0_i6_i=Infinity;var $_0_i5_i=$__i3_i;label=251;break;
 case 248: 
 var $768=($759|0)<-1022;
 if($768){label=249;break;}else{var $y_0_i6_i=1;var $_0_i5_i=$759;label=251;break;}
 case 249: 
 var $770=((($759)+(1022))|0);
 var $771=($770|0)<-1022;
 if($771){label=250;break;}else{var $y_0_i6_i=2.2250738585072014e-308;var $_0_i5_i=$770;label=251;break;}
 case 250: 
 var $773=((($759)+(2044))|0);
 var $774=($773|0)<-1022;
 var $_1_i4_i=($774?-1022:$773);
 var $y_0_i6_i=0;var $_0_i5_i=$_1_i4_i;label=251;break;
 case 251: 
 var $_0_i5_i;
 var $y_0_i6_i;
 var $775=((($_0_i5_i)+(1023))|0);
 var $776$0=$775;
 var $776$1=0;
 var $777$0=(0<<20)|(0>>>12);
 var $777$1=($776$0<<20)|(0>>>12);
 var $778=(HEAP32[((tempDoublePtr)>>2)]=$777$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$777$1, HEAPF64[(tempDoublePtr)>>3]);
 var $779=($y_0_i6_i)*($778);
 var $780=_copysign($779,$902);
 var $781=(((53)-($__i22_i))|0);
 var $782=($781|0)>1023;
 if($782){label=252;break;}else{label=254;break;}
 case 252: 
 var $784=((($781)-(1023))|0);
 var $785=($784|0)>1023;
 if($785){label=253;break;}else{var $y_0_i2_i=8.98846567431158e+307;var $_0_i_i=$784;label=257;break;}
 case 253: 
 var $787=((($781)-(2046))|0);
 var $788=($787|0)>1023;
 var $__i1_i=($788?1023:$787);
 var $y_0_i2_i=Infinity;var $_0_i_i=$__i1_i;label=257;break;
 case 254: 
 var $790=($781|0)<-1022;
 if($790){label=255;break;}else{var $y_0_i2_i=1;var $_0_i_i=$781;label=257;break;}
 case 255: 
 var $792=((($781)+(1022))|0);
 var $793=($792|0)<-1022;
 if($793){label=256;break;}else{var $y_0_i2_i=2.2250738585072014e-308;var $_0_i_i=$792;label=257;break;}
 case 256: 
 var $795=((($781)+(2044))|0);
 var $796=($795|0)<-1022;
 var $_1_i_i=($796?-1022:$795);
 var $y_0_i2_i=0;var $_0_i_i=$_1_i_i;label=257;break;
 case 257: 
 var $_0_i_i;
 var $y_0_i2_i;
 var $797=((($_0_i_i)+(1023))|0);
 var $798$0=$797;
 var $798$1=0;
 var $799$0=(0<<20)|(0>>>12);
 var $799$1=($798$0<<20)|(0>>>12);
 var $800=(HEAP32[((tempDoublePtr)>>2)]=$799$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$799$1, HEAPF64[(tempDoublePtr)>>3]);
 var $801=($y_0_i2_i)*($800);
 var $802=_fmod($902,$801);
 var $803=($902)-($802);
 var $804=($780)+($803);
 var $bias_0_i_i=$780;var $frac_0_i_i=$802;var $y_1_i23_i=$804;var $denormal_0_i_i8=1;var $_09_i_i9=$__i22_i;label=258;break;
 case 258: 
 var $_09_i_i9;
 var $denormal_0_i_i8;
 var $y_1_i23_i;
 var $frac_0_i_i;
 var $bias_0_i_i;
 var $805=((($a_3_i_i)+(2))|0);
 var $806=$805&127;
 var $807=($806|0)==($z_7_1_i_i|0);
 if($807){var $frac_2_i_i=$frac_0_i_i;label=271;break;}else{label=259;break;}
 case 259: 
 var $809=(($x_i_i+($806<<2))|0);
 var $810=HEAP32[(($809)>>2)];
 var $811=($810>>>0)<500000000;
 if($811){label=260;break;}else{label=263;break;}
 case 260: 
 var $813=($810|0)==0;
 if($813){label=261;break;}else{label=262;break;}
 case 261: 
 var $815=((($a_3_i_i)+(3))|0);
 var $816=$815&127;
 var $817=($816|0)==($z_7_1_i_i|0);
 if($817){var $frac_1_i_i=$frac_0_i_i;label=268;break;}else{label=262;break;}
 case 262: 
 var $819=($901)*((0.25));
 var $820=($819)+($frac_0_i_i);
 var $frac_1_i_i=$820;label=268;break;
 case 263: 
 var $822=($810>>>0)>500000000;
 if($822){label=264;break;}else{label=265;break;}
 case 264: 
 var $824=($901)*((0.75));
 var $825=($824)+($frac_0_i_i);
 var $frac_1_i_i=$825;label=268;break;
 case 265: 
 var $827=((($a_3_i_i)+(3))|0);
 var $828=$827&127;
 var $829=($828|0)==($z_7_1_i_i|0);
 if($829){label=266;break;}else{label=267;break;}
 case 266: 
 var $831=($901)*((0.5));
 var $832=($831)+($frac_0_i_i);
 var $frac_1_i_i=$832;label=268;break;
 case 267: 
 var $834=($901)*((0.75));
 var $835=($834)+($frac_0_i_i);
 var $frac_1_i_i=$835;label=268;break;
 case 268: 
 var $frac_1_i_i;
 var $837=(((53)-($_09_i_i9))|0);
 var $838=($837|0)>1;
 if($838){label=269;break;}else{var $frac_2_i_i=$frac_1_i_i;label=271;break;}
 case 269: 
 var $840=_fmod($frac_1_i_i,1);
 var $841=$840!=0;
 if($841){var $frac_2_i_i=$frac_1_i_i;label=271;break;}else{label=270;break;}
 case 270: 
 var $843=($frac_1_i_i)+(1);
 var $frac_2_i_i=$843;label=271;break;
 case 271: 
 var $frac_2_i_i;
 var $845=($y_1_i23_i)+($frac_2_i_i);
 var $846=($845)-($bias_0_i_i);
 var $847=$903&2147483644;
 var $848=($847>>>0)>1019;
 if($848){label=272;break;}else{var $y_3_i_i=$846;var $e2_3_i_i=$e2_1_i_i;label=277;break;}
 case 272: 
 var $850=Math_abs($846);
 var $851=$850<9007199254740992;
 if($851){var $y_2_i24_i=$846;var $denormal_2_i_i=$denormal_0_i_i8;var $e2_2_i_i=$e2_1_i_i;label=274;break;}else{label=273;break;}
 case 273: 
 var $853=($denormal_0_i_i8|0)!=0;
 var $854=($_09_i_i9|0)==($904|0);
 var $or_cond16_i_i=$853&$854;
 var $denormal_1_i_i=($or_cond16_i_i?0:$denormal_0_i_i8);
 var $855=($846)*((0.5));
 var $856=((($e2_1_i_i)+(1))|0);
 var $y_2_i24_i=$855;var $denormal_2_i_i=$denormal_1_i_i;var $e2_2_i_i=$856;label=274;break;
 case 274: 
 var $e2_2_i_i;
 var $denormal_2_i_i;
 var $y_2_i24_i;
 var $858=((($e2_2_i_i)+(50))|0);
 var $859=($858|0)>1021;
 if($859){label=276;break;}else{label=275;break;}
 case 275: 
 var $861=($denormal_2_i_i|0)!=0;
 var $862=$frac_2_i_i!=0;
 var $or_cond17_i_i=$861&$862;
 if($or_cond17_i_i){label=276;break;}else{var $y_3_i_i=$y_2_i24_i;var $e2_3_i_i=$e2_2_i_i;label=277;break;}
 case 276: 
 var $864=___errno_location();
 HEAP32[(($864)>>2)]=34;
 var $y_3_i_i=$y_2_i24_i;var $e2_3_i_i=$e2_2_i_i;label=277;break;
 case 277: 
 var $e2_3_i_i;
 var $y_3_i_i;
 var $866=($e2_3_i_i|0)>1023;
 if($866){label=278;break;}else{label=280;break;}
 case 278: 
 var $868=($y_3_i_i)*((8.98846567431158e+307));
 var $869=((($e2_3_i_i)-(1023))|0);
 var $870=($869|0)>1023;
 if($870){label=279;break;}else{var $y_0_i_i_i=$868;var $_0_i_i_i=$869;label=283;break;}
 case 279: 
 var $872=($868)*((8.98846567431158e+307));
 var $873=((($e2_3_i_i)-(2046))|0);
 var $874=($873|0)>1023;
 var $__i_i_i=($874?1023:$873);
 var $y_0_i_i_i=$872;var $_0_i_i_i=$__i_i_i;label=283;break;
 case 280: 
 var $876=($e2_3_i_i|0)<-1022;
 if($876){label=281;break;}else{var $y_0_i_i_i=$y_3_i_i;var $_0_i_i_i=$e2_3_i_i;label=283;break;}
 case 281: 
 var $878=($y_3_i_i)*((2.2250738585072014e-308));
 var $879=((($e2_3_i_i)+(1022))|0);
 var $880=($879|0)<-1022;
 if($880){label=282;break;}else{var $y_0_i_i_i=$878;var $_0_i_i_i=$879;label=283;break;}
 case 282: 
 var $882=($878)*((2.2250738585072014e-308));
 var $883=((($e2_3_i_i)+(2044))|0);
 var $884=($883|0)<-1022;
 var $_1_i_i_i=($884?-1022:$883);
 var $y_0_i_i_i=$882;var $_0_i_i_i=$_1_i_i_i;label=283;break;
 case 283: 
 var $_0_i_i_i;
 var $y_0_i_i_i;
 var $885=((($_0_i_i_i)+(1023))|0);
 var $886$0=$885;
 var $886$1=0;
 var $887$0=(0<<20)|(0>>>12);
 var $887$1=($886$0<<20)|(0>>>12);
 var $888=(HEAP32[((tempDoublePtr)>>2)]=$887$0, HEAP32[(((tempDoublePtr)+(4))>>2)]=$887$1, HEAPF64[(tempDoublePtr)>>3]);
 var $889=($y_0_i_i_i)*($888);
 var $_0_i=$889;label=287;break;
 case 284: 
 var $891=((($z_7_i_i)+(1))|0);
 var $892=$891&127;
 var $893=((($892)-(1))|0);
 var $894=(($x_i_i+($893<<2))|0);
 HEAP32[(($894)>>2)]=0;
 var $z_7_1_i_i=$892;label=285;break;
 case 285: 
 var $z_7_1_i_i;
 var $896=($751)*(1000000000);
 var $897=(($x_i_i+($753<<2))|0);
 var $898=HEAP32[(($897)>>2)];
 var $899=($898>>>0);
 var $900=($896)+($899);
 var $901=($sign_0_i|0);
 var $902=($901)*($900);
 var $903=((($e2_1_i_i)+(53))|0);
 var $904=((($e2_1_i_i)+(1127))|0);
 var $905=($904|0)<53;
 if($905){label=244;break;}else{var $bias_0_i_i=0;var $frac_0_i_i=0;var $y_1_i23_i=$902;var $denormal_0_i_i8=0;var $_09_i_i9=53;label=258;break;}
 case 286: 
 HEAP32[(($2)>>2)]=$149;
 var $_0_i=NaN;label=287;break;
 case 287: 
 var $_0_i;
 var $906=HEAP32[(($9)>>2)];
 var $907=HEAP32[(($2)>>2)];
 var $908=HEAP32[(($3)>>2)];
 var $909=$907;
 var $910=$908;
 var $911=((($909)-($910))|0);
 var $912=((($911)+($906))|0);
 var $913=($p|0)==0;
 if($913){label=291;break;}else{label=288;break;}
 case 288: 
 var $915=($912|0)==0;
 if($915){var $919=$s;label=290;break;}else{label=289;break;}
 case 289: 
 var $917=(($s+$912)|0);
 var $919=$917;label=290;break;
 case 290: 
 var $919;
 HEAP32[(($p)>>2)]=$919;
 label=291;break;
 case 291: 
 var $$etemp$28$0=112;
 var $$etemp$28$1=0;

 STACKTOP=sp;return $_0_i;
  default: assert(0, "bad label: " + label);
 }

}



// EMSCRIPTEN_END_FUNCS
function _i64Add(a, b, c, d) {
    /*
      x = a + b*2^32
      y = c + d*2^32
      result = l + h*2^32
    */
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a + c)>>>0;
    h = (b + d + (((l>>>0) < (a>>>0))|0))>>>0; // Add carry from low word to high word on overflow.
    return tempRet0 = h,l|0;
  }
function _i64Subtract(a, b, c, d) {
    a = a|0; b = b|0; c = c|0; d = d|0;
    var l = 0, h = 0;
    l = (a - c)>>>0;
    h = (b - d)>>>0;
    h = (b - d - (((c>>>0) > (a>>>0))|0))>>>0; // Borrow one from high word to low word on underflow.
    return tempRet0 = h,l|0;
  }
function _bitshift64Shl(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits));
      return low << bits;
    }
    tempRet0 = low << (bits - 32);
    return 0;
  }
function _bitshift64Lshr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >>> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = 0;
    return (high >>> (bits - 32))|0;
  }
function _bitshift64Ashr(low, high, bits) {
    low = low|0; high = high|0; bits = bits|0;
    var ander = 0;
    if ((bits|0) < 32) {
      ander = ((1 << bits) - 1)|0;
      tempRet0 = high >> bits;
      return (low >>> bits) | ((high&ander) << (32 - bits));
    }
    tempRet0 = (high|0) < 0 ? -1 : 0;
    return (high >> (bits - 32))|0;
  }
function _llvm_ctlz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((ctlz_i8)+(x >>> 24))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((ctlz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((ctlz_i8)+(x&0xff))|0)] + 24)|0;
  }
/* PRE_ASM */ var ctlz_i8 = allocate([8,7,6,6,5,5,5,5,4,4,4,4,4,4,4,4,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0], "i8", ALLOC_DYNAMIC);

function _llvm_cttz_i32(x) {
    x = x|0;
    var ret = 0;
    ret = HEAP8[(((cttz_i8)+(x & 0xff))|0)];
    if ((ret|0) < 8) return ret|0;
    ret = HEAP8[(((cttz_i8)+((x >> 8)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 8)|0;
    ret = HEAP8[(((cttz_i8)+((x >> 16)&0xff))|0)];
    if ((ret|0) < 8) return (ret + 16)|0;
    return (HEAP8[(((cttz_i8)+(x >>> 24))|0)] + 24)|0;
  }
/* PRE_ASM */ var cttz_i8 = allocate([8,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,7,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,6,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,5,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0,4,0,1,0,2,0,1,0,3,0,1,0,2,0,1,0], "i8", ALLOC_DYNAMIC);

// ======== compiled code from system/lib/compiler-rt , see readme therein
function ___muldsi3($a, $b) {
  $a = $a | 0;
  $b = $b | 0;
  var $1 = 0, $2 = 0, $3 = 0, $6 = 0, $8 = 0, $11 = 0, $12 = 0;
  $1 = $a & 65535;
  $2 = $b & 65535;
  $3 = Math_imul($2, $1) | 0;
  $6 = $a >>> 16;
  $8 = ($3 >>> 16) + (Math_imul($2, $6) | 0) | 0;
  $11 = $b >>> 16;
  $12 = Math_imul($11, $1) | 0;
  return (tempRet0 = (($8 >>> 16) + (Math_imul($11, $6) | 0) | 0) + ((($8 & 65535) + $12 | 0) >>> 16) | 0, 0 | ($8 + $12 << 16 | $3 & 65535)) | 0;
}
function ___divdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $7$0 = 0, $7$1 = 0, $8$0 = 0, $10$0 = 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  $7$0 = $2$0 ^ $1$0;
  $7$1 = $2$1 ^ $1$1;
  $8$0 = ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, 0) | 0;
  $10$0 = _i64Subtract($8$0 ^ $7$0, tempRet0 ^ $7$1, $7$0, $7$1) | 0;
  return (tempRet0 = tempRet0, $10$0) | 0;
}
function ___remdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, $1$0 = 0, $1$1 = 0, $2$0 = 0, $2$1 = 0, $4$0 = 0, $4$1 = 0, $6$0 = 0, $10$0 = 0, $10$1 = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  $1$0 = $a$1 >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $1$1 = (($a$1 | 0) < 0 ? -1 : 0) >> 31 | (($a$1 | 0) < 0 ? -1 : 0) << 1;
  $2$0 = $b$1 >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $2$1 = (($b$1 | 0) < 0 ? -1 : 0) >> 31 | (($b$1 | 0) < 0 ? -1 : 0) << 1;
  $4$0 = _i64Subtract($1$0 ^ $a$0, $1$1 ^ $a$1, $1$0, $1$1) | 0;
  $4$1 = tempRet0;
  $6$0 = _i64Subtract($2$0 ^ $b$0, $2$1 ^ $b$1, $2$0, $2$1) | 0;
  ___udivmoddi4($4$0, $4$1, $6$0, tempRet0, $rem) | 0;
  $10$0 = _i64Subtract(HEAP32[$rem >> 2] ^ $1$0, HEAP32[$rem + 4 >> 2] ^ $1$1, $1$0, $1$1) | 0;
  $10$1 = tempRet0;
  STACKTOP = __stackBase__;
  return (tempRet0 = $10$1, $10$0) | 0;
}
function ___muldi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $x_sroa_0_0_extract_trunc = 0, $y_sroa_0_0_extract_trunc = 0, $1$0 = 0, $1$1 = 0, $2 = 0;
  $x_sroa_0_0_extract_trunc = $a$0;
  $y_sroa_0_0_extract_trunc = $b$0;
  $1$0 = ___muldsi3($x_sroa_0_0_extract_trunc, $y_sroa_0_0_extract_trunc) | 0;
  $1$1 = tempRet0;
  $2 = Math_imul($a$1, $y_sroa_0_0_extract_trunc) | 0;
  return (tempRet0 = ((Math_imul($b$1, $x_sroa_0_0_extract_trunc) | 0) + $2 | 0) + $1$1 | $1$1 & 0, 0 | $1$0 & -1) | 0;
}
function ___udivdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $1$0 = 0;
  $1$0 = ___udivmoddi4($a$0, $a$1, $b$0, $b$1, 0) | 0;
  return (tempRet0 = tempRet0, $1$0) | 0;
}
function ___uremdi3($a$0, $a$1, $b$0, $b$1) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  var $rem = 0, __stackBase__ = 0;
  __stackBase__ = STACKTOP;
  STACKTOP = STACKTOP + 8 | 0;
  $rem = __stackBase__ | 0;
  ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) | 0;
  STACKTOP = __stackBase__;
  return (tempRet0 = HEAP32[$rem + 4 >> 2] | 0, HEAP32[$rem >> 2] | 0) | 0;
}
function ___udivmoddi4($a$0, $a$1, $b$0, $b$1, $rem) {
  $a$0 = $a$0 | 0;
  $a$1 = $a$1 | 0;
  $b$0 = $b$0 | 0;
  $b$1 = $b$1 | 0;
  $rem = $rem | 0;
  var $n_sroa_0_0_extract_trunc = 0, $n_sroa_1_4_extract_shift$0 = 0, $n_sroa_1_4_extract_trunc = 0, $d_sroa_0_0_extract_trunc = 0, $d_sroa_1_4_extract_shift$0 = 0, $d_sroa_1_4_extract_trunc = 0, $4 = 0, $17 = 0, $37 = 0, $49 = 0, $51 = 0, $57 = 0, $58 = 0, $66 = 0, $78 = 0, $86 = 0, $88 = 0, $89 = 0, $91 = 0, $92 = 0, $95 = 0, $105 = 0, $117 = 0, $119 = 0, $125 = 0, $126 = 0, $130 = 0, $q_sroa_1_1_ph = 0, $q_sroa_0_1_ph = 0, $r_sroa_1_1_ph = 0, $r_sroa_0_1_ph = 0, $sr_1_ph = 0, $d_sroa_0_0_insert_insert99$0 = 0, $d_sroa_0_0_insert_insert99$1 = 0, $137$0 = 0, $137$1 = 0, $carry_0203 = 0, $sr_1202 = 0, $r_sroa_0_1201 = 0, $r_sroa_1_1200 = 0, $q_sroa_0_1199 = 0, $q_sroa_1_1198 = 0, $147 = 0, $149 = 0, $r_sroa_0_0_insert_insert42$0 = 0, $r_sroa_0_0_insert_insert42$1 = 0, $150$1 = 0, $151$0 = 0, $152 = 0, $154$0 = 0, $r_sroa_0_0_extract_trunc = 0, $r_sroa_1_4_extract_trunc = 0, $155 = 0, $carry_0_lcssa$0 = 0, $carry_0_lcssa$1 = 0, $r_sroa_0_1_lcssa = 0, $r_sroa_1_1_lcssa = 0, $q_sroa_0_1_lcssa = 0, $q_sroa_1_1_lcssa = 0, $q_sroa_0_0_insert_ext75$0 = 0, $q_sroa_0_0_insert_ext75$1 = 0, $q_sroa_0_0_insert_insert77$1 = 0, $_0$0 = 0, $_0$1 = 0;
  $n_sroa_0_0_extract_trunc = $a$0;
  $n_sroa_1_4_extract_shift$0 = $a$1;
  $n_sroa_1_4_extract_trunc = $n_sroa_1_4_extract_shift$0;
  $d_sroa_0_0_extract_trunc = $b$0;
  $d_sroa_1_4_extract_shift$0 = $b$1;
  $d_sroa_1_4_extract_trunc = $d_sroa_1_4_extract_shift$0;
  if (($n_sroa_1_4_extract_trunc | 0) == 0) {
    $4 = ($rem | 0) != 0;
    if (($d_sroa_1_4_extract_trunc | 0) == 0) {
      if ($4) {
        HEAP32[$rem >> 2] = ($n_sroa_0_0_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
        HEAP32[$rem + 4 >> 2] = 0;
      }
      $_0$1 = 0;
      $_0$0 = ($n_sroa_0_0_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$4) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    }
  }
  $17 = ($d_sroa_1_4_extract_trunc | 0) == 0;
  do {
    if (($d_sroa_0_0_extract_trunc | 0) == 0) {
      if ($17) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_0_0_extract_trunc >>> 0);
          HEAP32[$rem + 4 >> 2] = 0;
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_0_0_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      if (($n_sroa_0_0_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0;
          HEAP32[$rem + 4 >> 2] = ($n_sroa_1_4_extract_trunc >>> 0) % ($d_sroa_1_4_extract_trunc >>> 0);
        }
        $_0$1 = 0;
        $_0$0 = ($n_sroa_1_4_extract_trunc >>> 0) / ($d_sroa_1_4_extract_trunc >>> 0) >>> 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $37 = $d_sroa_1_4_extract_trunc - 1 | 0;
      if (($37 & $d_sroa_1_4_extract_trunc | 0) == 0) {
        if (($rem | 0) != 0) {
          HEAP32[$rem >> 2] = 0 | $a$0 & -1;
          HEAP32[$rem + 4 >> 2] = $37 & $n_sroa_1_4_extract_trunc | $a$1 & 0;
        }
        $_0$1 = 0;
        $_0$0 = $n_sroa_1_4_extract_trunc >>> ((_llvm_cttz_i32($d_sroa_1_4_extract_trunc | 0) | 0) >>> 0);
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $49 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
      $51 = $49 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
      if ($51 >>> 0 <= 30) {
        $57 = $51 + 1 | 0;
        $58 = 31 - $51 | 0;
        $sr_1_ph = $57;
        $r_sroa_0_1_ph = $n_sroa_1_4_extract_trunc << $58 | $n_sroa_0_0_extract_trunc >>> ($57 >>> 0);
        $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($57 >>> 0);
        $q_sroa_0_1_ph = 0;
        $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $58;
        break;
      }
      if (($rem | 0) == 0) {
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      HEAP32[$rem >> 2] = 0 | $a$0 & -1;
      HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
      $_0$1 = 0;
      $_0$0 = 0;
      return (tempRet0 = $_0$1, $_0$0) | 0;
    } else {
      if (!$17) {
        $117 = _llvm_ctlz_i32($d_sroa_1_4_extract_trunc | 0) | 0;
        $119 = $117 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        if ($119 >>> 0 <= 31) {
          $125 = $119 + 1 | 0;
          $126 = 31 - $119 | 0;
          $130 = $119 - 31 >> 31;
          $sr_1_ph = $125;
          $r_sroa_0_1_ph = $n_sroa_0_0_extract_trunc >>> ($125 >>> 0) & $130 | $n_sroa_1_4_extract_trunc << $126;
          $r_sroa_1_1_ph = $n_sroa_1_4_extract_trunc >>> ($125 >>> 0) & $130;
          $q_sroa_0_1_ph = 0;
          $q_sroa_1_1_ph = $n_sroa_0_0_extract_trunc << $126;
          break;
        }
        if (($rem | 0) == 0) {
          $_0$1 = 0;
          $_0$0 = 0;
          return (tempRet0 = $_0$1, $_0$0) | 0;
        }
        HEAP32[$rem >> 2] = 0 | $a$0 & -1;
        HEAP32[$rem + 4 >> 2] = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$1 = 0;
        $_0$0 = 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
      $66 = $d_sroa_0_0_extract_trunc - 1 | 0;
      if (($66 & $d_sroa_0_0_extract_trunc | 0) != 0) {
        $86 = (_llvm_ctlz_i32($d_sroa_0_0_extract_trunc | 0) | 0) + 33 | 0;
        $88 = $86 - (_llvm_ctlz_i32($n_sroa_1_4_extract_trunc | 0) | 0) | 0;
        $89 = 64 - $88 | 0;
        $91 = 32 - $88 | 0;
        $92 = $91 >> 31;
        $95 = $88 - 32 | 0;
        $105 = $95 >> 31;
        $sr_1_ph = $88;
        $r_sroa_0_1_ph = $91 - 1 >> 31 & $n_sroa_1_4_extract_trunc >>> ($95 >>> 0) | ($n_sroa_1_4_extract_trunc << $91 | $n_sroa_0_0_extract_trunc >>> ($88 >>> 0)) & $105;
        $r_sroa_1_1_ph = $105 & $n_sroa_1_4_extract_trunc >>> ($88 >>> 0);
        $q_sroa_0_1_ph = $n_sroa_0_0_extract_trunc << $89 & $92;
        $q_sroa_1_1_ph = ($n_sroa_1_4_extract_trunc << $89 | $n_sroa_0_0_extract_trunc >>> ($95 >>> 0)) & $92 | $n_sroa_0_0_extract_trunc << $91 & $88 - 33 >> 31;
        break;
      }
      if (($rem | 0) != 0) {
        HEAP32[$rem >> 2] = $66 & $n_sroa_0_0_extract_trunc;
        HEAP32[$rem + 4 >> 2] = 0;
      }
      if (($d_sroa_0_0_extract_trunc | 0) == 1) {
        $_0$1 = $n_sroa_1_4_extract_shift$0 | $a$1 & 0;
        $_0$0 = 0 | $a$0 & -1;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      } else {
        $78 = _llvm_cttz_i32($d_sroa_0_0_extract_trunc | 0) | 0;
        $_0$1 = 0 | $n_sroa_1_4_extract_trunc >>> ($78 >>> 0);
        $_0$0 = $n_sroa_1_4_extract_trunc << 32 - $78 | $n_sroa_0_0_extract_trunc >>> ($78 >>> 0) | 0;
        return (tempRet0 = $_0$1, $_0$0) | 0;
      }
    }
  } while (0);
  if (($sr_1_ph | 0) == 0) {
    $q_sroa_1_1_lcssa = $q_sroa_1_1_ph;
    $q_sroa_0_1_lcssa = $q_sroa_0_1_ph;
    $r_sroa_1_1_lcssa = $r_sroa_1_1_ph;
    $r_sroa_0_1_lcssa = $r_sroa_0_1_ph;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = 0;
  } else {
    $d_sroa_0_0_insert_insert99$0 = 0 | $b$0 & -1;
    $d_sroa_0_0_insert_insert99$1 = $d_sroa_1_4_extract_shift$0 | $b$1 & 0;
    $137$0 = _i64Add($d_sroa_0_0_insert_insert99$0, $d_sroa_0_0_insert_insert99$1, -1, -1) | 0;
    $137$1 = tempRet0;
    $q_sroa_1_1198 = $q_sroa_1_1_ph;
    $q_sroa_0_1199 = $q_sroa_0_1_ph;
    $r_sroa_1_1200 = $r_sroa_1_1_ph;
    $r_sroa_0_1201 = $r_sroa_0_1_ph;
    $sr_1202 = $sr_1_ph;
    $carry_0203 = 0;
    while (1) {
      $147 = $q_sroa_0_1199 >>> 31 | $q_sroa_1_1198 << 1;
      $149 = $carry_0203 | $q_sroa_0_1199 << 1;
      $r_sroa_0_0_insert_insert42$0 = 0 | ($r_sroa_0_1201 << 1 | $q_sroa_1_1198 >>> 31);
      $r_sroa_0_0_insert_insert42$1 = $r_sroa_0_1201 >>> 31 | $r_sroa_1_1200 << 1 | 0;
      _i64Subtract($137$0, $137$1, $r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1) | 0;
      $150$1 = tempRet0;
      $151$0 = $150$1 >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1;
      $152 = $151$0 & 1;
      $154$0 = _i64Subtract($r_sroa_0_0_insert_insert42$0, $r_sroa_0_0_insert_insert42$1, $151$0 & $d_sroa_0_0_insert_insert99$0, ((($150$1 | 0) < 0 ? -1 : 0) >> 31 | (($150$1 | 0) < 0 ? -1 : 0) << 1) & $d_sroa_0_0_insert_insert99$1) | 0;
      $r_sroa_0_0_extract_trunc = $154$0;
      $r_sroa_1_4_extract_trunc = tempRet0;
      $155 = $sr_1202 - 1 | 0;
      if (($155 | 0) == 0) {
        break;
      } else {
        $q_sroa_1_1198 = $147;
        $q_sroa_0_1199 = $149;
        $r_sroa_1_1200 = $r_sroa_1_4_extract_trunc;
        $r_sroa_0_1201 = $r_sroa_0_0_extract_trunc;
        $sr_1202 = $155;
        $carry_0203 = $152;
      }
    }
    $q_sroa_1_1_lcssa = $147;
    $q_sroa_0_1_lcssa = $149;
    $r_sroa_1_1_lcssa = $r_sroa_1_4_extract_trunc;
    $r_sroa_0_1_lcssa = $r_sroa_0_0_extract_trunc;
    $carry_0_lcssa$1 = 0;
    $carry_0_lcssa$0 = $152;
  }
  $q_sroa_0_0_insert_ext75$0 = $q_sroa_0_1_lcssa;
  $q_sroa_0_0_insert_ext75$1 = 0;
  $q_sroa_0_0_insert_insert77$1 = $q_sroa_1_1_lcssa | $q_sroa_0_0_insert_ext75$1;
  if (($rem | 0) != 0) {
    HEAP32[$rem >> 2] = 0 | $r_sroa_0_1_lcssa;
    HEAP32[$rem + 4 >> 2] = $r_sroa_1_1_lcssa | 0;
  }
  $_0$1 = (0 | $q_sroa_0_0_insert_ext75$0) >>> 31 | $q_sroa_0_0_insert_insert77$1 << 1 | ($q_sroa_0_0_insert_ext75$1 << 1 | $q_sroa_0_0_insert_ext75$0 >>> 31) & 0 | $carry_0_lcssa$1;
  $_0$0 = ($q_sroa_0_0_insert_ext75$0 << 1 | 0 >>> 31) & -2 | $carry_0_lcssa$0;
  return (tempRet0 = $_0$1, $_0$0) | 0;
}
// =======================================================================


// EMSCRIPTEN_END_FUNCS

// TODO: strip out parts of this we do not need

//======= begin closure i64 code =======

// Copyright 2009 The Closure Library Authors. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS-IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/**
 * @fileoverview Defines a Long class for representing a 64-bit two's-complement
 * integer value, which faithfully simulates the behavior of a Java "long". This
 * implementation is derived from LongLib in GWT.
 *
 */

var i64Math = (function() { // Emscripten wrapper
  var goog = { math: {} };


  /**
   * Constructs a 64-bit two's-complement integer, given its low and high 32-bit
   * values as *signed* integers.  See the from* functions below for more
   * convenient ways of constructing Longs.
   *
   * The internal representation of a long is the two given signed, 32-bit values.
   * We use 32-bit pieces because these are the size of integers on which
   * Javascript performs bit-operations.  For operations like addition and
   * multiplication, we split each number into 16-bit pieces, which can easily be
   * multiplied within Javascript's floating-point representation without overflow
   * or change in sign.
   *
   * In the algorithms below, we frequently reduce the negative case to the
   * positive case by negating the input(s) and then post-processing the result.
   * Note that we must ALWAYS check specially whether those values are MIN_VALUE
   * (-2^63) because -MIN_VALUE == MIN_VALUE (since 2^63 cannot be represented as
   * a positive number, it overflows back into a negative).  Not handling this
   * case would often result in infinite recursion.
   *
   * @param {number} low  The low (signed) 32 bits of the long.
   * @param {number} high  The high (signed) 32 bits of the long.
   * @constructor
   */
  goog.math.Long = function(low, high) {
    /**
     * @type {number}
     * @private
     */
    this.low_ = low | 0;  // force into 32 signed bits.

    /**
     * @type {number}
     * @private
     */
    this.high_ = high | 0;  // force into 32 signed bits.
  };


  // NOTE: Common constant values ZERO, ONE, NEG_ONE, etc. are defined below the
  // from* methods on which they depend.


  /**
   * A cache of the Long representations of small integer values.
   * @type {!Object}
   * @private
   */
  goog.math.Long.IntCache_ = {};


  /**
   * Returns a Long representing the given (32-bit) integer value.
   * @param {number} value The 32-bit integer in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromInt = function(value) {
    if (-128 <= value && value < 128) {
      var cachedObj = goog.math.Long.IntCache_[value];
      if (cachedObj) {
        return cachedObj;
      }
    }

    var obj = new goog.math.Long(value | 0, value < 0 ? -1 : 0);
    if (-128 <= value && value < 128) {
      goog.math.Long.IntCache_[value] = obj;
    }
    return obj;
  };


  /**
   * Returns a Long representing the given value, provided that it is a finite
   * number.  Otherwise, zero is returned.
   * @param {number} value The number in question.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromNumber = function(value) {
    if (isNaN(value) || !isFinite(value)) {
      return goog.math.Long.ZERO;
    } else if (value <= -goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MIN_VALUE;
    } else if (value + 1 >= goog.math.Long.TWO_PWR_63_DBL_) {
      return goog.math.Long.MAX_VALUE;
    } else if (value < 0) {
      return goog.math.Long.fromNumber(-value).negate();
    } else {
      return new goog.math.Long(
          (value % goog.math.Long.TWO_PWR_32_DBL_) | 0,
          (value / goog.math.Long.TWO_PWR_32_DBL_) | 0);
    }
  };


  /**
   * Returns a Long representing the 64-bit integer that comes by concatenating
   * the given high and low bits.  Each is assumed to use 32 bits.
   * @param {number} lowBits The low 32-bits.
   * @param {number} highBits The high 32-bits.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromBits = function(lowBits, highBits) {
    return new goog.math.Long(lowBits, highBits);
  };


  /**
   * Returns a Long representation of the given string, written using the given
   * radix.
   * @param {string} str The textual representation of the Long.
   * @param {number=} opt_radix The radix in which the text is written.
   * @return {!goog.math.Long} The corresponding Long value.
   */
  goog.math.Long.fromString = function(str, opt_radix) {
    if (str.length == 0) {
      throw Error('number format error: empty string');
    }

    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (str.charAt(0) == '-') {
      return goog.math.Long.fromString(str.substring(1), radix).negate();
    } else if (str.indexOf('-') >= 0) {
      throw Error('number format error: interior "-" character: ' + str);
    }

    // Do several (8) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 8));

    var result = goog.math.Long.ZERO;
    for (var i = 0; i < str.length; i += 8) {
      var size = Math.min(8, str.length - i);
      var value = parseInt(str.substring(i, i + size), radix);
      if (size < 8) {
        var power = goog.math.Long.fromNumber(Math.pow(radix, size));
        result = result.multiply(power).add(goog.math.Long.fromNumber(value));
      } else {
        result = result.multiply(radixToPower);
        result = result.add(goog.math.Long.fromNumber(value));
      }
    }
    return result;
  };


  // NOTE: the compiler should inline these constant values below and then remove
  // these variables, so there should be no runtime penalty for these.


  /**
   * Number used repeated below in calculations.  This must appear before the
   * first call to any from* function below.
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_16_DBL_ = 1 << 16;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_24_DBL_ = 1 << 24;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_32_DBL_ =
      goog.math.Long.TWO_PWR_16_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_31_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ / 2;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_48_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_16_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_64_DBL_ =
      goog.math.Long.TWO_PWR_32_DBL_ * goog.math.Long.TWO_PWR_32_DBL_;


  /**
   * @type {number}
   * @private
   */
  goog.math.Long.TWO_PWR_63_DBL_ =
      goog.math.Long.TWO_PWR_64_DBL_ / 2;


  /** @type {!goog.math.Long} */
  goog.math.Long.ZERO = goog.math.Long.fromInt(0);


  /** @type {!goog.math.Long} */
  goog.math.Long.ONE = goog.math.Long.fromInt(1);


  /** @type {!goog.math.Long} */
  goog.math.Long.NEG_ONE = goog.math.Long.fromInt(-1);


  /** @type {!goog.math.Long} */
  goog.math.Long.MAX_VALUE =
      goog.math.Long.fromBits(0xFFFFFFFF | 0, 0x7FFFFFFF | 0);


  /** @type {!goog.math.Long} */
  goog.math.Long.MIN_VALUE = goog.math.Long.fromBits(0, 0x80000000 | 0);


  /**
   * @type {!goog.math.Long}
   * @private
   */
  goog.math.Long.TWO_PWR_24_ = goog.math.Long.fromInt(1 << 24);


  /** @return {number} The value, assuming it is a 32-bit integer. */
  goog.math.Long.prototype.toInt = function() {
    return this.low_;
  };


  /** @return {number} The closest floating-point representation to this value. */
  goog.math.Long.prototype.toNumber = function() {
    return this.high_ * goog.math.Long.TWO_PWR_32_DBL_ +
           this.getLowBitsUnsigned();
  };


  /**
   * @param {number=} opt_radix The radix in which the text should be written.
   * @return {string} The textual representation of this value.
   */
  goog.math.Long.prototype.toString = function(opt_radix) {
    var radix = opt_radix || 10;
    if (radix < 2 || 36 < radix) {
      throw Error('radix out of range: ' + radix);
    }

    if (this.isZero()) {
      return '0';
    }

    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        // We need to change the Long value before it can be negated, so we remove
        // the bottom-most digit in this base and then recurse to do the rest.
        var radixLong = goog.math.Long.fromNumber(radix);
        var div = this.div(radixLong);
        var rem = div.multiply(radixLong).subtract(this);
        return div.toString(radix) + rem.toInt().toString(radix);
      } else {
        return '-' + this.negate().toString(radix);
      }
    }

    // Do several (6) digits each time through the loop, so as to
    // minimize the calls to the very expensive emulated div.
    var radixToPower = goog.math.Long.fromNumber(Math.pow(radix, 6));

    var rem = this;
    var result = '';
    while (true) {
      var remDiv = rem.div(radixToPower);
      var intval = rem.subtract(remDiv.multiply(radixToPower)).toInt();
      var digits = intval.toString(radix);

      rem = remDiv;
      if (rem.isZero()) {
        return digits + result;
      } else {
        while (digits.length < 6) {
          digits = '0' + digits;
        }
        result = '' + digits + result;
      }
    }
  };


  /** @return {number} The high 32-bits as a signed value. */
  goog.math.Long.prototype.getHighBits = function() {
    return this.high_;
  };


  /** @return {number} The low 32-bits as a signed value. */
  goog.math.Long.prototype.getLowBits = function() {
    return this.low_;
  };


  /** @return {number} The low 32-bits as an unsigned value. */
  goog.math.Long.prototype.getLowBitsUnsigned = function() {
    return (this.low_ >= 0) ?
        this.low_ : goog.math.Long.TWO_PWR_32_DBL_ + this.low_;
  };


  /**
   * @return {number} Returns the number of bits needed to represent the absolute
   *     value of this Long.
   */
  goog.math.Long.prototype.getNumBitsAbs = function() {
    if (this.isNegative()) {
      if (this.equals(goog.math.Long.MIN_VALUE)) {
        return 64;
      } else {
        return this.negate().getNumBitsAbs();
      }
    } else {
      var val = this.high_ != 0 ? this.high_ : this.low_;
      for (var bit = 31; bit > 0; bit--) {
        if ((val & (1 << bit)) != 0) {
          break;
        }
      }
      return this.high_ != 0 ? bit + 33 : bit + 1;
    }
  };


  /** @return {boolean} Whether this value is zero. */
  goog.math.Long.prototype.isZero = function() {
    return this.high_ == 0 && this.low_ == 0;
  };


  /** @return {boolean} Whether this value is negative. */
  goog.math.Long.prototype.isNegative = function() {
    return this.high_ < 0;
  };


  /** @return {boolean} Whether this value is odd. */
  goog.math.Long.prototype.isOdd = function() {
    return (this.low_ & 1) == 1;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long equals the other.
   */
  goog.math.Long.prototype.equals = function(other) {
    return (this.high_ == other.high_) && (this.low_ == other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long does not equal the other.
   */
  goog.math.Long.prototype.notEquals = function(other) {
    return (this.high_ != other.high_) || (this.low_ != other.low_);
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than the other.
   */
  goog.math.Long.prototype.lessThan = function(other) {
    return this.compare(other) < 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is less than or equal to the other.
   */
  goog.math.Long.prototype.lessThanOrEqual = function(other) {
    return this.compare(other) <= 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than the other.
   */
  goog.math.Long.prototype.greaterThan = function(other) {
    return this.compare(other) > 0;
  };


  /**
   * @param {goog.math.Long} other Long to compare against.
   * @return {boolean} Whether this Long is greater than or equal to the other.
   */
  goog.math.Long.prototype.greaterThanOrEqual = function(other) {
    return this.compare(other) >= 0;
  };


  /**
   * Compares this Long with the given one.
   * @param {goog.math.Long} other Long to compare against.
   * @return {number} 0 if they are the same, 1 if the this is greater, and -1
   *     if the given one is greater.
   */
  goog.math.Long.prototype.compare = function(other) {
    if (this.equals(other)) {
      return 0;
    }

    var thisNeg = this.isNegative();
    var otherNeg = other.isNegative();
    if (thisNeg && !otherNeg) {
      return -1;
    }
    if (!thisNeg && otherNeg) {
      return 1;
    }

    // at this point, the signs are the same, so subtraction will not overflow
    if (this.subtract(other).isNegative()) {
      return -1;
    } else {
      return 1;
    }
  };


  /** @return {!goog.math.Long} The negation of this value. */
  goog.math.Long.prototype.negate = function() {
    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.MIN_VALUE;
    } else {
      return this.not().add(goog.math.Long.ONE);
    }
  };


  /**
   * Returns the sum of this and the given Long.
   * @param {goog.math.Long} other Long to add to this one.
   * @return {!goog.math.Long} The sum of this and the given Long.
   */
  goog.math.Long.prototype.add = function(other) {
    // Divide each number into 4 chunks of 16 bits, and then sum the chunks.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 + b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 + b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 + b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 + b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns the difference of this and the given Long.
   * @param {goog.math.Long} other Long to subtract from this.
   * @return {!goog.math.Long} The difference of this and the given Long.
   */
  goog.math.Long.prototype.subtract = function(other) {
    return this.add(other.negate());
  };


  /**
   * Returns the product of this and the given long.
   * @param {goog.math.Long} other Long to multiply with this.
   * @return {!goog.math.Long} The product of this and the other.
   */
  goog.math.Long.prototype.multiply = function(other) {
    if (this.isZero()) {
      return goog.math.Long.ZERO;
    } else if (other.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      return other.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return this.isOdd() ? goog.math.Long.MIN_VALUE : goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().multiply(other.negate());
      } else {
        return this.negate().multiply(other).negate();
      }
    } else if (other.isNegative()) {
      return this.multiply(other.negate()).negate();
    }

    // If both longs are small, use float multiplication
    if (this.lessThan(goog.math.Long.TWO_PWR_24_) &&
        other.lessThan(goog.math.Long.TWO_PWR_24_)) {
      return goog.math.Long.fromNumber(this.toNumber() * other.toNumber());
    }

    // Divide each long into 4 chunks of 16 bits, and then add up 4x4 products.
    // We can skip products that would overflow.

    var a48 = this.high_ >>> 16;
    var a32 = this.high_ & 0xFFFF;
    var a16 = this.low_ >>> 16;
    var a00 = this.low_ & 0xFFFF;

    var b48 = other.high_ >>> 16;
    var b32 = other.high_ & 0xFFFF;
    var b16 = other.low_ >>> 16;
    var b00 = other.low_ & 0xFFFF;

    var c48 = 0, c32 = 0, c16 = 0, c00 = 0;
    c00 += a00 * b00;
    c16 += c00 >>> 16;
    c00 &= 0xFFFF;
    c16 += a16 * b00;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c16 += a00 * b16;
    c32 += c16 >>> 16;
    c16 &= 0xFFFF;
    c32 += a32 * b00;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a16 * b16;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c32 += a00 * b32;
    c48 += c32 >>> 16;
    c32 &= 0xFFFF;
    c48 += a48 * b00 + a32 * b16 + a16 * b32 + a00 * b48;
    c48 &= 0xFFFF;
    return goog.math.Long.fromBits((c16 << 16) | c00, (c48 << 16) | c32);
  };


  /**
   * Returns this Long divided by the given one.
   * @param {goog.math.Long} other Long by which to divide.
   * @return {!goog.math.Long} This Long divided by the given one.
   */
  goog.math.Long.prototype.div = function(other) {
    if (other.isZero()) {
      throw Error('division by zero');
    } else if (this.isZero()) {
      return goog.math.Long.ZERO;
    }

    if (this.equals(goog.math.Long.MIN_VALUE)) {
      if (other.equals(goog.math.Long.ONE) ||
          other.equals(goog.math.Long.NEG_ONE)) {
        return goog.math.Long.MIN_VALUE;  // recall that -MIN_VALUE == MIN_VALUE
      } else if (other.equals(goog.math.Long.MIN_VALUE)) {
        return goog.math.Long.ONE;
      } else {
        // At this point, we have |other| >= 2, so |this/other| < |MIN_VALUE|.
        var halfThis = this.shiftRight(1);
        var approx = halfThis.div(other).shiftLeft(1);
        if (approx.equals(goog.math.Long.ZERO)) {
          return other.isNegative() ? goog.math.Long.ONE : goog.math.Long.NEG_ONE;
        } else {
          var rem = this.subtract(other.multiply(approx));
          var result = approx.add(rem.div(other));
          return result;
        }
      }
    } else if (other.equals(goog.math.Long.MIN_VALUE)) {
      return goog.math.Long.ZERO;
    }

    if (this.isNegative()) {
      if (other.isNegative()) {
        return this.negate().div(other.negate());
      } else {
        return this.negate().div(other).negate();
      }
    } else if (other.isNegative()) {
      return this.div(other.negate()).negate();
    }

    // Repeat the following until the remainder is less than other:  find a
    // floating-point that approximates remainder / other *from below*, add this
    // into the result, and subtract it from the remainder.  It is critical that
    // the approximate value is less than or equal to the real value so that the
    // remainder never becomes negative.
    var res = goog.math.Long.ZERO;
    var rem = this;
    while (rem.greaterThanOrEqual(other)) {
      // Approximate the result of division. This may be a little greater or
      // smaller than the actual value.
      var approx = Math.max(1, Math.floor(rem.toNumber() / other.toNumber()));

      // We will tweak the approximate result by changing it in the 48-th digit or
      // the smallest non-fractional digit, whichever is larger.
      var log2 = Math.ceil(Math.log(approx) / Math.LN2);
      var delta = (log2 <= 48) ? 1 : Math.pow(2, log2 - 48);

      // Decrease the approximation until it is smaller than the remainder.  Note
      // that if it is too large, the product overflows and is negative.
      var approxRes = goog.math.Long.fromNumber(approx);
      var approxRem = approxRes.multiply(other);
      while (approxRem.isNegative() || approxRem.greaterThan(rem)) {
        approx -= delta;
        approxRes = goog.math.Long.fromNumber(approx);
        approxRem = approxRes.multiply(other);
      }

      // We know the answer can't be zero... and actually, zero would cause
      // infinite recursion since we would make no progress.
      if (approxRes.isZero()) {
        approxRes = goog.math.Long.ONE;
      }

      res = res.add(approxRes);
      rem = rem.subtract(approxRem);
    }
    return res;
  };


  /**
   * Returns this Long modulo the given one.
   * @param {goog.math.Long} other Long by which to mod.
   * @return {!goog.math.Long} This Long modulo the given one.
   */
  goog.math.Long.prototype.modulo = function(other) {
    return this.subtract(this.div(other).multiply(other));
  };


  /** @return {!goog.math.Long} The bitwise-NOT of this value. */
  goog.math.Long.prototype.not = function() {
    return goog.math.Long.fromBits(~this.low_, ~this.high_);
  };


  /**
   * Returns the bitwise-AND of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to AND.
   * @return {!goog.math.Long} The bitwise-AND of this and the other.
   */
  goog.math.Long.prototype.and = function(other) {
    return goog.math.Long.fromBits(this.low_ & other.low_,
                                   this.high_ & other.high_);
  };


  /**
   * Returns the bitwise-OR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to OR.
   * @return {!goog.math.Long} The bitwise-OR of this and the other.
   */
  goog.math.Long.prototype.or = function(other) {
    return goog.math.Long.fromBits(this.low_ | other.low_,
                                   this.high_ | other.high_);
  };


  /**
   * Returns the bitwise-XOR of this Long and the given one.
   * @param {goog.math.Long} other The Long with which to XOR.
   * @return {!goog.math.Long} The bitwise-XOR of this and the other.
   */
  goog.math.Long.prototype.xor = function(other) {
    return goog.math.Long.fromBits(this.low_ ^ other.low_,
                                   this.high_ ^ other.high_);
  };


  /**
   * Returns this Long with bits shifted to the left by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the left by the given amount.
   */
  goog.math.Long.prototype.shiftLeft = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var low = this.low_;
      if (numBits < 32) {
        var high = this.high_;
        return goog.math.Long.fromBits(
            low << numBits,
            (high << numBits) | (low >>> (32 - numBits)));
      } else {
        return goog.math.Long.fromBits(0, low << (numBits - 32));
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount.
   */
  goog.math.Long.prototype.shiftRight = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >> numBits);
      } else {
        return goog.math.Long.fromBits(
            high >> (numBits - 32),
            high >= 0 ? 0 : -1);
      }
    }
  };


  /**
   * Returns this Long with bits shifted to the right by the given amount, with
   * the new top bits matching the current sign bit.
   * @param {number} numBits The number of bits by which to shift.
   * @return {!goog.math.Long} This shifted to the right by the given amount, with
   *     zeros placed into the new leading bits.
   */
  goog.math.Long.prototype.shiftRightUnsigned = function(numBits) {
    numBits &= 63;
    if (numBits == 0) {
      return this;
    } else {
      var high = this.high_;
      if (numBits < 32) {
        var low = this.low_;
        return goog.math.Long.fromBits(
            (low >>> numBits) | (high << (32 - numBits)),
            high >>> numBits);
      } else if (numBits == 32) {
        return goog.math.Long.fromBits(high, 0);
      } else {
        return goog.math.Long.fromBits(high >>> (numBits - 32), 0);
      }
    }
  };

  //======= begin jsbn =======

  var navigator = { appName: 'Modern Browser' }; // polyfill a little

  // Copyright (c) 2005  Tom Wu
  // All Rights Reserved.
  // http://www-cs-students.stanford.edu/~tjw/jsbn/

  /*
   * Copyright (c) 2003-2005  Tom Wu
   * All Rights Reserved.
   *
   * Permission is hereby granted, free of charge, to any person obtaining
   * a copy of this software and associated documentation files (the
   * "Software"), to deal in the Software without restriction, including
   * without limitation the rights to use, copy, modify, merge, publish,
   * distribute, sublicense, and/or sell copies of the Software, and to
   * permit persons to whom the Software is furnished to do so, subject to
   * the following conditions:
   *
   * The above copyright notice and this permission notice shall be
   * included in all copies or substantial portions of the Software.
   *
   * THE SOFTWARE IS PROVIDED "AS-IS" AND WITHOUT WARRANTY OF ANY KIND, 
   * EXPRESS, IMPLIED OR OTHERWISE, INCLUDING WITHOUT LIMITATION, ANY 
   * WARRANTY OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.  
   *
   * IN NO EVENT SHALL TOM WU BE LIABLE FOR ANY SPECIAL, INCIDENTAL,
   * INDIRECT OR CONSEQUENTIAL DAMAGES OF ANY KIND, OR ANY DAMAGES WHATSOEVER
   * RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER OR NOT ADVISED OF
   * THE POSSIBILITY OF DAMAGE, AND ON ANY THEORY OF LIABILITY, ARISING OUT
   * OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.
   *
   * In addition, the following condition applies:
   *
   * All redistributions must retain an intact copy of this copyright notice
   * and disclaimer.
   */

  // Basic JavaScript BN library - subset useful for RSA encryption.

  // Bits per digit
  var dbits;

  // JavaScript engine analysis
  var canary = 0xdeadbeefcafe;
  var j_lm = ((canary&0xffffff)==0xefcafe);

  // (public) Constructor
  function BigInteger(a,b,c) {
    if(a != null)
      if("number" == typeof a) this.fromNumber(a,b,c);
      else if(b == null && "string" != typeof a) this.fromString(a,256);
      else this.fromString(a,b);
  }

  // return new, unset BigInteger
  function nbi() { return new BigInteger(null); }

  // am: Compute w_j += (x*this_i), propagate carries,
  // c is initial carry, returns final carry.
  // c < 3*dvalue, x < 2*dvalue, this_i < dvalue
  // We need to select the fastest one that works in this environment.

  // am1: use a single mult and divide to get the high bits,
  // max digit bits should be 26 because
  // max internal value = 2*dvalue^2-2*dvalue (< 2^53)
  function am1(i,x,w,j,c,n) {
    while(--n >= 0) {
      var v = x*this[i++]+w[j]+c;
      c = Math.floor(v/0x4000000);
      w[j++] = v&0x3ffffff;
    }
    return c;
  }
  // am2 avoids a big mult-and-extract completely.
  // Max digit bits should be <= 30 because we do bitwise ops
  // on values up to 2*hdvalue^2-hdvalue-1 (< 2^31)
  function am2(i,x,w,j,c,n) {
    var xl = x&0x7fff, xh = x>>15;
    while(--n >= 0) {
      var l = this[i]&0x7fff;
      var h = this[i++]>>15;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x7fff)<<15)+w[j]+(c&0x3fffffff);
      c = (l>>>30)+(m>>>15)+xh*h+(c>>>30);
      w[j++] = l&0x3fffffff;
    }
    return c;
  }
  // Alternately, set max digit bits to 28 since some
  // browsers slow down when dealing with 32-bit numbers.
  function am3(i,x,w,j,c,n) {
    var xl = x&0x3fff, xh = x>>14;
    while(--n >= 0) {
      var l = this[i]&0x3fff;
      var h = this[i++]>>14;
      var m = xh*l+h*xl;
      l = xl*l+((m&0x3fff)<<14)+w[j]+c;
      c = (l>>28)+(m>>14)+xh*h;
      w[j++] = l&0xfffffff;
    }
    return c;
  }
  if(j_lm && (navigator.appName == "Microsoft Internet Explorer")) {
    BigInteger.prototype.am = am2;
    dbits = 30;
  }
  else if(j_lm && (navigator.appName != "Netscape")) {
    BigInteger.prototype.am = am1;
    dbits = 26;
  }
  else { // Mozilla/Netscape seems to prefer am3
    BigInteger.prototype.am = am3;
    dbits = 28;
  }

  BigInteger.prototype.DB = dbits;
  BigInteger.prototype.DM = ((1<<dbits)-1);
  BigInteger.prototype.DV = (1<<dbits);

  var BI_FP = 52;
  BigInteger.prototype.FV = Math.pow(2,BI_FP);
  BigInteger.prototype.F1 = BI_FP-dbits;
  BigInteger.prototype.F2 = 2*dbits-BI_FP;

  // Digit conversions
  var BI_RM = "0123456789abcdefghijklmnopqrstuvwxyz";
  var BI_RC = new Array();
  var rr,vv;
  rr = "0".charCodeAt(0);
  for(vv = 0; vv <= 9; ++vv) BI_RC[rr++] = vv;
  rr = "a".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;
  rr = "A".charCodeAt(0);
  for(vv = 10; vv < 36; ++vv) BI_RC[rr++] = vv;

  function int2char(n) { return BI_RM.charAt(n); }
  function intAt(s,i) {
    var c = BI_RC[s.charCodeAt(i)];
    return (c==null)?-1:c;
  }

  // (protected) copy this to r
  function bnpCopyTo(r) {
    for(var i = this.t-1; i >= 0; --i) r[i] = this[i];
    r.t = this.t;
    r.s = this.s;
  }

  // (protected) set from integer value x, -DV <= x < DV
  function bnpFromInt(x) {
    this.t = 1;
    this.s = (x<0)?-1:0;
    if(x > 0) this[0] = x;
    else if(x < -1) this[0] = x+DV;
    else this.t = 0;
  }

  // return bigint initialized to value
  function nbv(i) { var r = nbi(); r.fromInt(i); return r; }

  // (protected) set from string and radix
  function bnpFromString(s,b) {
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 256) k = 8; // byte array
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else { this.fromRadix(s,b); return; }
    this.t = 0;
    this.s = 0;
    var i = s.length, mi = false, sh = 0;
    while(--i >= 0) {
      var x = (k==8)?s[i]&0xff:intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-") mi = true;
        continue;
      }
      mi = false;
      if(sh == 0)
        this[this.t++] = x;
      else if(sh+k > this.DB) {
        this[this.t-1] |= (x&((1<<(this.DB-sh))-1))<<sh;
        this[this.t++] = (x>>(this.DB-sh));
      }
      else
        this[this.t-1] |= x<<sh;
      sh += k;
      if(sh >= this.DB) sh -= this.DB;
    }
    if(k == 8 && (s[0]&0x80) != 0) {
      this.s = -1;
      if(sh > 0) this[this.t-1] |= ((1<<(this.DB-sh))-1)<<sh;
    }
    this.clamp();
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) clamp off excess high words
  function bnpClamp() {
    var c = this.s&this.DM;
    while(this.t > 0 && this[this.t-1] == c) --this.t;
  }

  // (public) return string representation in given radix
  function bnToString(b) {
    if(this.s < 0) return "-"+this.negate().toString(b);
    var k;
    if(b == 16) k = 4;
    else if(b == 8) k = 3;
    else if(b == 2) k = 1;
    else if(b == 32) k = 5;
    else if(b == 4) k = 2;
    else return this.toRadix(b);
    var km = (1<<k)-1, d, m = false, r = "", i = this.t;
    var p = this.DB-(i*this.DB)%k;
    if(i-- > 0) {
      if(p < this.DB && (d = this[i]>>p) > 0) { m = true; r = int2char(d); }
      while(i >= 0) {
        if(p < k) {
          d = (this[i]&((1<<p)-1))<<(k-p);
          d |= this[--i]>>(p+=this.DB-k);
        }
        else {
          d = (this[i]>>(p-=k))&km;
          if(p <= 0) { p += this.DB; --i; }
        }
        if(d > 0) m = true;
        if(m) r += int2char(d);
      }
    }
    return m?r:"0";
  }

  // (public) -this
  function bnNegate() { var r = nbi(); BigInteger.ZERO.subTo(this,r); return r; }

  // (public) |this|
  function bnAbs() { return (this.s<0)?this.negate():this; }

  // (public) return + if this > a, - if this < a, 0 if equal
  function bnCompareTo(a) {
    var r = this.s-a.s;
    if(r != 0) return r;
    var i = this.t;
    r = i-a.t;
    if(r != 0) return (this.s<0)?-r:r;
    while(--i >= 0) if((r=this[i]-a[i]) != 0) return r;
    return 0;
  }

  // returns bit length of the integer x
  function nbits(x) {
    var r = 1, t;
    if((t=x>>>16) != 0) { x = t; r += 16; }
    if((t=x>>8) != 0) { x = t; r += 8; }
    if((t=x>>4) != 0) { x = t; r += 4; }
    if((t=x>>2) != 0) { x = t; r += 2; }
    if((t=x>>1) != 0) { x = t; r += 1; }
    return r;
  }

  // (public) return the number of bits in "this"
  function bnBitLength() {
    if(this.t <= 0) return 0;
    return this.DB*(this.t-1)+nbits(this[this.t-1]^(this.s&this.DM));
  }

  // (protected) r = this << n*DB
  function bnpDLShiftTo(n,r) {
    var i;
    for(i = this.t-1; i >= 0; --i) r[i+n] = this[i];
    for(i = n-1; i >= 0; --i) r[i] = 0;
    r.t = this.t+n;
    r.s = this.s;
  }

  // (protected) r = this >> n*DB
  function bnpDRShiftTo(n,r) {
    for(var i = n; i < this.t; ++i) r[i-n] = this[i];
    r.t = Math.max(this.t-n,0);
    r.s = this.s;
  }

  // (protected) r = this << n
  function bnpLShiftTo(n,r) {
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<cbs)-1;
    var ds = Math.floor(n/this.DB), c = (this.s<<bs)&this.DM, i;
    for(i = this.t-1; i >= 0; --i) {
      r[i+ds+1] = (this[i]>>cbs)|c;
      c = (this[i]&bm)<<bs;
    }
    for(i = ds-1; i >= 0; --i) r[i] = 0;
    r[ds] = c;
    r.t = this.t+ds+1;
    r.s = this.s;
    r.clamp();
  }

  // (protected) r = this >> n
  function bnpRShiftTo(n,r) {
    r.s = this.s;
    var ds = Math.floor(n/this.DB);
    if(ds >= this.t) { r.t = 0; return; }
    var bs = n%this.DB;
    var cbs = this.DB-bs;
    var bm = (1<<bs)-1;
    r[0] = this[ds]>>bs;
    for(var i = ds+1; i < this.t; ++i) {
      r[i-ds-1] |= (this[i]&bm)<<cbs;
      r[i-ds] = this[i]>>bs;
    }
    if(bs > 0) r[this.t-ds-1] |= (this.s&bm)<<cbs;
    r.t = this.t-ds;
    r.clamp();
  }

  // (protected) r = this - a
  function bnpSubTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]-a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c -= a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c -= a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c -= a.s;
    }
    r.s = (c<0)?-1:0;
    if(c < -1) r[i++] = this.DV+c;
    else if(c > 0) r[i++] = c;
    r.t = i;
    r.clamp();
  }

  // (protected) r = this * a, r != this,a (HAC 14.12)
  // "this" should be the larger one if appropriate.
  function bnpMultiplyTo(a,r) {
    var x = this.abs(), y = a.abs();
    var i = x.t;
    r.t = i+y.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < y.t; ++i) r[i+x.t] = x.am(0,y[i],r,i,0,x.t);
    r.s = 0;
    r.clamp();
    if(this.s != a.s) BigInteger.ZERO.subTo(r,r);
  }

  // (protected) r = this^2, r != this (HAC 14.16)
  function bnpSquareTo(r) {
    var x = this.abs();
    var i = r.t = 2*x.t;
    while(--i >= 0) r[i] = 0;
    for(i = 0; i < x.t-1; ++i) {
      var c = x.am(i,x[i],r,2*i,0,1);
      if((r[i+x.t]+=x.am(i+1,2*x[i],r,2*i+1,c,x.t-i-1)) >= x.DV) {
        r[i+x.t] -= x.DV;
        r[i+x.t+1] = 1;
      }
    }
    if(r.t > 0) r[r.t-1] += x.am(i,x[i],r,2*i,0,1);
    r.s = 0;
    r.clamp();
  }

  // (protected) divide this by m, quotient and remainder to q, r (HAC 14.20)
  // r != q, this != m.  q or r may be null.
  function bnpDivRemTo(m,q,r) {
    var pm = m.abs();
    if(pm.t <= 0) return;
    var pt = this.abs();
    if(pt.t < pm.t) {
      if(q != null) q.fromInt(0);
      if(r != null) this.copyTo(r);
      return;
    }
    if(r == null) r = nbi();
    var y = nbi(), ts = this.s, ms = m.s;
    var nsh = this.DB-nbits(pm[pm.t-1]);	// normalize modulus
    if(nsh > 0) { pm.lShiftTo(nsh,y); pt.lShiftTo(nsh,r); }
    else { pm.copyTo(y); pt.copyTo(r); }
    var ys = y.t;
    var y0 = y[ys-1];
    if(y0 == 0) return;
    var yt = y0*(1<<this.F1)+((ys>1)?y[ys-2]>>this.F2:0);
    var d1 = this.FV/yt, d2 = (1<<this.F1)/yt, e = 1<<this.F2;
    var i = r.t, j = i-ys, t = (q==null)?nbi():q;
    y.dlShiftTo(j,t);
    if(r.compareTo(t) >= 0) {
      r[r.t++] = 1;
      r.subTo(t,r);
    }
    BigInteger.ONE.dlShiftTo(ys,t);
    t.subTo(y,y);	// "negative" y so we can replace sub with am later
    while(y.t < ys) y[y.t++] = 0;
    while(--j >= 0) {
      // Estimate quotient digit
      var qd = (r[--i]==y0)?this.DM:Math.floor(r[i]*d1+(r[i-1]+e)*d2);
      if((r[i]+=y.am(0,qd,r,j,0,ys)) < qd) {	// Try it out
        y.dlShiftTo(j,t);
        r.subTo(t,r);
        while(r[i] < --qd) r.subTo(t,r);
      }
    }
    if(q != null) {
      r.drShiftTo(ys,q);
      if(ts != ms) BigInteger.ZERO.subTo(q,q);
    }
    r.t = ys;
    r.clamp();
    if(nsh > 0) r.rShiftTo(nsh,r);	// Denormalize remainder
    if(ts < 0) BigInteger.ZERO.subTo(r,r);
  }

  // (public) this mod a
  function bnMod(a) {
    var r = nbi();
    this.abs().divRemTo(a,null,r);
    if(this.s < 0 && r.compareTo(BigInteger.ZERO) > 0) a.subTo(r,r);
    return r;
  }

  // Modular reduction using "classic" algorithm
  function Classic(m) { this.m = m; }
  function cConvert(x) {
    if(x.s < 0 || x.compareTo(this.m) >= 0) return x.mod(this.m);
    else return x;
  }
  function cRevert(x) { return x; }
  function cReduce(x) { x.divRemTo(this.m,null,x); }
  function cMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }
  function cSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  Classic.prototype.convert = cConvert;
  Classic.prototype.revert = cRevert;
  Classic.prototype.reduce = cReduce;
  Classic.prototype.mulTo = cMulTo;
  Classic.prototype.sqrTo = cSqrTo;

  // (protected) return "-1/this % 2^DB"; useful for Mont. reduction
  // justification:
  //         xy == 1 (mod m)
  //         xy =  1+km
  //   xy(2-xy) = (1+km)(1-km)
  // x[y(2-xy)] = 1-k^2m^2
  // x[y(2-xy)] == 1 (mod m^2)
  // if y is 1/x mod m, then y(2-xy) is 1/x mod m^2
  // should reduce x and y(2-xy) by m^2 at each step to keep size bounded.
  // JS multiply "overflows" differently from C/C++, so care is needed here.
  function bnpInvDigit() {
    if(this.t < 1) return 0;
    var x = this[0];
    if((x&1) == 0) return 0;
    var y = x&3;		// y == 1/x mod 2^2
    y = (y*(2-(x&0xf)*y))&0xf;	// y == 1/x mod 2^4
    y = (y*(2-(x&0xff)*y))&0xff;	// y == 1/x mod 2^8
    y = (y*(2-(((x&0xffff)*y)&0xffff)))&0xffff;	// y == 1/x mod 2^16
    // last step - calculate inverse mod DV directly;
    // assumes 16 < DB <= 32 and assumes ability to handle 48-bit ints
    y = (y*(2-x*y%this.DV))%this.DV;		// y == 1/x mod 2^dbits
    // we really want the negative inverse, and -DV < y < DV
    return (y>0)?this.DV-y:-y;
  }

  // Montgomery reduction
  function Montgomery(m) {
    this.m = m;
    this.mp = m.invDigit();
    this.mpl = this.mp&0x7fff;
    this.mph = this.mp>>15;
    this.um = (1<<(m.DB-15))-1;
    this.mt2 = 2*m.t;
  }

  // xR mod m
  function montConvert(x) {
    var r = nbi();
    x.abs().dlShiftTo(this.m.t,r);
    r.divRemTo(this.m,null,r);
    if(x.s < 0 && r.compareTo(BigInteger.ZERO) > 0) this.m.subTo(r,r);
    return r;
  }

  // x/R mod m
  function montRevert(x) {
    var r = nbi();
    x.copyTo(r);
    this.reduce(r);
    return r;
  }

  // x = x/R mod m (HAC 14.32)
  function montReduce(x) {
    while(x.t <= this.mt2)	// pad x so am has enough room later
      x[x.t++] = 0;
    for(var i = 0; i < this.m.t; ++i) {
      // faster way of calculating u0 = x[i]*mp mod DV
      var j = x[i]&0x7fff;
      var u0 = (j*this.mpl+(((j*this.mph+(x[i]>>15)*this.mpl)&this.um)<<15))&x.DM;
      // use am to combine the multiply-shift-add into one call
      j = i+this.m.t;
      x[j] += this.m.am(0,u0,x,i,0,this.m.t);
      // propagate carry
      while(x[j] >= x.DV) { x[j] -= x.DV; x[++j]++; }
    }
    x.clamp();
    x.drShiftTo(this.m.t,x);
    if(x.compareTo(this.m) >= 0) x.subTo(this.m,x);
  }

  // r = "x^2/R mod m"; x != r
  function montSqrTo(x,r) { x.squareTo(r); this.reduce(r); }

  // r = "xy/R mod m"; x,y != r
  function montMulTo(x,y,r) { x.multiplyTo(y,r); this.reduce(r); }

  Montgomery.prototype.convert = montConvert;
  Montgomery.prototype.revert = montRevert;
  Montgomery.prototype.reduce = montReduce;
  Montgomery.prototype.mulTo = montMulTo;
  Montgomery.prototype.sqrTo = montSqrTo;

  // (protected) true iff this is even
  function bnpIsEven() { return ((this.t>0)?(this[0]&1):this.s) == 0; }

  // (protected) this^e, e < 2^32, doing sqr and mul with "r" (HAC 14.79)
  function bnpExp(e,z) {
    if(e > 0xffffffff || e < 1) return BigInteger.ONE;
    var r = nbi(), r2 = nbi(), g = z.convert(this), i = nbits(e)-1;
    g.copyTo(r);
    while(--i >= 0) {
      z.sqrTo(r,r2);
      if((e&(1<<i)) > 0) z.mulTo(r2,g,r);
      else { var t = r; r = r2; r2 = t; }
    }
    return z.revert(r);
  }

  // (public) this^e % m, 0 <= e < 2^32
  function bnModPowInt(e,m) {
    var z;
    if(e < 256 || m.isEven()) z = new Classic(m); else z = new Montgomery(m);
    return this.exp(e,z);
  }

  // protected
  BigInteger.prototype.copyTo = bnpCopyTo;
  BigInteger.prototype.fromInt = bnpFromInt;
  BigInteger.prototype.fromString = bnpFromString;
  BigInteger.prototype.clamp = bnpClamp;
  BigInteger.prototype.dlShiftTo = bnpDLShiftTo;
  BigInteger.prototype.drShiftTo = bnpDRShiftTo;
  BigInteger.prototype.lShiftTo = bnpLShiftTo;
  BigInteger.prototype.rShiftTo = bnpRShiftTo;
  BigInteger.prototype.subTo = bnpSubTo;
  BigInteger.prototype.multiplyTo = bnpMultiplyTo;
  BigInteger.prototype.squareTo = bnpSquareTo;
  BigInteger.prototype.divRemTo = bnpDivRemTo;
  BigInteger.prototype.invDigit = bnpInvDigit;
  BigInteger.prototype.isEven = bnpIsEven;
  BigInteger.prototype.exp = bnpExp;

  // public
  BigInteger.prototype.toString = bnToString;
  BigInteger.prototype.negate = bnNegate;
  BigInteger.prototype.abs = bnAbs;
  BigInteger.prototype.compareTo = bnCompareTo;
  BigInteger.prototype.bitLength = bnBitLength;
  BigInteger.prototype.mod = bnMod;
  BigInteger.prototype.modPowInt = bnModPowInt;

  // "constants"
  BigInteger.ZERO = nbv(0);
  BigInteger.ONE = nbv(1);

  // jsbn2 stuff

  // (protected) convert from radix string
  function bnpFromRadix(s,b) {
    this.fromInt(0);
    if(b == null) b = 10;
    var cs = this.chunkSize(b);
    var d = Math.pow(b,cs), mi = false, j = 0, w = 0;
    for(var i = 0; i < s.length; ++i) {
      var x = intAt(s,i);
      if(x < 0) {
        if(s.charAt(i) == "-" && this.signum() == 0) mi = true;
        continue;
      }
      w = b*w+x;
      if(++j >= cs) {
        this.dMultiply(d);
        this.dAddOffset(w,0);
        j = 0;
        w = 0;
      }
    }
    if(j > 0) {
      this.dMultiply(Math.pow(b,j));
      this.dAddOffset(w,0);
    }
    if(mi) BigInteger.ZERO.subTo(this,this);
  }

  // (protected) return x s.t. r^x < DV
  function bnpChunkSize(r) { return Math.floor(Math.LN2*this.DB/Math.log(r)); }

  // (public) 0 if this == 0, 1 if this > 0
  function bnSigNum() {
    if(this.s < 0) return -1;
    else if(this.t <= 0 || (this.t == 1 && this[0] <= 0)) return 0;
    else return 1;
  }

  // (protected) this *= n, this >= 0, 1 < n < DV
  function bnpDMultiply(n) {
    this[this.t] = this.am(0,n-1,this,0,0,this.t);
    ++this.t;
    this.clamp();
  }

  // (protected) this += n << w words, this >= 0
  function bnpDAddOffset(n,w) {
    if(n == 0) return;
    while(this.t <= w) this[this.t++] = 0;
    this[w] += n;
    while(this[w] >= this.DV) {
      this[w] -= this.DV;
      if(++w >= this.t) this[this.t++] = 0;
      ++this[w];
    }
  }

  // (protected) convert to radix string
  function bnpToRadix(b) {
    if(b == null) b = 10;
    if(this.signum() == 0 || b < 2 || b > 36) return "0";
    var cs = this.chunkSize(b);
    var a = Math.pow(b,cs);
    var d = nbv(a), y = nbi(), z = nbi(), r = "";
    this.divRemTo(d,y,z);
    while(y.signum() > 0) {
      r = (a+z.intValue()).toString(b).substr(1) + r;
      y.divRemTo(d,y,z);
    }
    return z.intValue().toString(b) + r;
  }

  // (public) return value as integer
  function bnIntValue() {
    if(this.s < 0) {
      if(this.t == 1) return this[0]-this.DV;
      else if(this.t == 0) return -1;
    }
    else if(this.t == 1) return this[0];
    else if(this.t == 0) return 0;
    // assumes 16 < DB < 32
    return ((this[1]&((1<<(32-this.DB))-1))<<this.DB)|this[0];
  }

  // (protected) r = this + a
  function bnpAddTo(a,r) {
    var i = 0, c = 0, m = Math.min(a.t,this.t);
    while(i < m) {
      c += this[i]+a[i];
      r[i++] = c&this.DM;
      c >>= this.DB;
    }
    if(a.t < this.t) {
      c += a.s;
      while(i < this.t) {
        c += this[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += this.s;
    }
    else {
      c += this.s;
      while(i < a.t) {
        c += a[i];
        r[i++] = c&this.DM;
        c >>= this.DB;
      }
      c += a.s;
    }
    r.s = (c<0)?-1:0;
    if(c > 0) r[i++] = c;
    else if(c < -1) r[i++] = this.DV+c;
    r.t = i;
    r.clamp();
  }

  BigInteger.prototype.fromRadix = bnpFromRadix;
  BigInteger.prototype.chunkSize = bnpChunkSize;
  BigInteger.prototype.signum = bnSigNum;
  BigInteger.prototype.dMultiply = bnpDMultiply;
  BigInteger.prototype.dAddOffset = bnpDAddOffset;
  BigInteger.prototype.toRadix = bnpToRadix;
  BigInteger.prototype.intValue = bnIntValue;
  BigInteger.prototype.addTo = bnpAddTo;

  //======= end jsbn =======

  // Emscripten wrapper
  var Wrapper = {
    abs: function(l, h) {
      var x = new goog.math.Long(l, h);
      var ret;
      if (x.isNegative()) {
        ret = x.negate();
      } else {
        ret = x;
      }
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
    },
    ensureTemps: function() {
      if (Wrapper.ensuredTemps) return;
      Wrapper.ensuredTemps = true;
      Wrapper.two32 = new BigInteger();
      Wrapper.two32.fromString('4294967296', 10);
      Wrapper.two64 = new BigInteger();
      Wrapper.two64.fromString('18446744073709551616', 10);
      Wrapper.temp1 = new BigInteger();
      Wrapper.temp2 = new BigInteger();
    },
    lh2bignum: function(l, h) {
      var a = new BigInteger();
      a.fromString(h.toString(), 10);
      var b = new BigInteger();
      a.multiplyTo(Wrapper.two32, b);
      var c = new BigInteger();
      c.fromString(l.toString(), 10);
      var d = new BigInteger();
      c.addTo(b, d);
      return d;
    },
    stringify: function(l, h, unsigned) {
      var ret = new goog.math.Long(l, h).toString();
      if (unsigned && ret[0] == '-') {
        // unsign slowly using jsbn bignums
        Wrapper.ensureTemps();
        var bignum = new BigInteger();
        bignum.fromString(ret, 10);
        ret = new BigInteger();
        Wrapper.two64.addTo(bignum, ret);
        ret = ret.toString(10);
      }
      return ret;
    },
    fromString: function(str, base, min, max, unsigned) {
      Wrapper.ensureTemps();
      var bignum = new BigInteger();
      bignum.fromString(str, base);
      var bigmin = new BigInteger();
      bigmin.fromString(min, 10);
      var bigmax = new BigInteger();
      bigmax.fromString(max, 10);
      if (unsigned && bignum.compareTo(BigInteger.ZERO) < 0) {
        var temp = new BigInteger();
        bignum.addTo(Wrapper.two64, temp);
        bignum = temp;
      }
      var error = false;
      if (bignum.compareTo(bigmin) < 0) {
        bignum = bigmin;
        error = true;
      } else if (bignum.compareTo(bigmax) > 0) {
        bignum = bigmax;
        error = true;
      }
      var ret = goog.math.Long.fromString(bignum.toString()); // min-max checks should have clamped this to a range goog.math.Long can handle well
      HEAP32[tempDoublePtr>>2] = ret.low_;
      HEAP32[tempDoublePtr+4>>2] = ret.high_;
      if (error) throw 'range error';
    }
  };
  return Wrapper;
})();

//======= end closure i64 code =======



// === Auto-generated postamble setup entry stuff ===

if (memoryInitializer) {
  if (ENVIRONMENT_IS_NODE || ENVIRONMENT_IS_SHELL) {
    var data = Module['readBinary'](memoryInitializer);
    HEAPU8.set(data, STATIC_BASE);
  } else {
    addRunDependency('memory initializer');
    Browser.asyncLoad(memoryInitializer, function(data) {
      HEAPU8.set(data, STATIC_BASE);
      removeRunDependency('memory initializer');
    }, function(data) {
      throw 'could not load memory initializer ' + memoryInitializer;
    });
  }
}

function ExitStatus(status) {
  this.name = "ExitStatus";
  this.message = "Program terminated with exit(" + status + ")";
  this.status = status;
};
ExitStatus.prototype = new Error();
ExitStatus.prototype.constructor = ExitStatus;

var initialStackTop;
var preloadStartTime = null;
var calledMain = false;

dependenciesFulfilled = function runCaller() {
  // If run has never been called, and we should call run (INVOKE_RUN is true, and Module.noInitialRun is not false)
  if (!Module['calledRun'] && shouldRunNow) run();
  if (!Module['calledRun']) dependenciesFulfilled = runCaller; // try this again later, after new deps are fulfilled
}

Module['callMain'] = Module.callMain = function callMain(args) {
  assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on __ATMAIN__)');
  assert(__ATPRERUN__.length == 0, 'cannot call main when preRun functions remain to be called');

  args = args || [];

  ensureInitRuntime();

  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_NORMAL) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_NORMAL));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_NORMAL);

  initialStackTop = STACKTOP;

  try {

    var ret = Module['_main'](argc, argv, 0);


    // if we're not running an evented main loop, it's time to exit
    if (!Module['noExitRuntime']) {
      exit(ret);
    }
  }
  catch(e) {
    if (e instanceof ExitStatus) {
      // exit() throws this once it's done to make sure execution
      // has been stopped completely
      return;
    } else if (e == 'SimulateInfiniteLoop') {
      // running an evented main loop, don't immediately exit
      Module['noExitRuntime'] = true;
      return;
    } else {
      if (e && typeof e === 'object' && e.stack) Module.printErr('exception thrown: ' + [e, e.stack]);
      throw e;
    }
  } finally {
    calledMain = true;
  }
}




function run(args) {
  args = args || Module['arguments'];

  if (preloadStartTime === null) preloadStartTime = Date.now();

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return;
  }

  preRun();

  if (runDependencies > 0) return; // a preRun added a dependency, run will be called later
  if (Module['calledRun']) return; // run may have just been called through dependencies being fulfilled just in this very frame

  function doRun() {
    if (Module['calledRun']) return; // run may have just been called while the async setStatus time below was happening
    Module['calledRun'] = true;

    ensureInitRuntime();

    preMain();

    if (ENVIRONMENT_IS_WEB && preloadStartTime !== null) {
      Module.printErr('pre-main prep time: ' + (Date.now() - preloadStartTime) + ' ms');
    }

    if (Module['_main'] && shouldRunNow) {
      Module['callMain'](args);
    }

    postRun();
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      if (!ABORT) doRun();
    }, 1);
  } else {
    doRun();
  }
}
Module['run'] = Module.run = run;

function exit(status) {
  ABORT = true;
  EXITSTATUS = status;
  STACKTOP = initialStackTop;

  // exit the runtime
  exitRuntime();

  // TODO We should handle this differently based on environment.
  // In the browser, the best we can do is throw an exception
  // to halt execution, but in node we could process.exit and
  // I'd imagine SM shell would have something equivalent.
  // This would let us set a proper exit status (which
  // would be great for checking test exit statuses).
  // https://github.com/kripken/emscripten/issues/1371

  // throw an exception to halt the current execution
  throw new ExitStatus(status);
}
Module['exit'] = Module.exit = exit;

function abort(text) {
  if (text) {
    Module.print(text);
    Module.printErr(text);
  }

  ABORT = true;
  EXITSTATUS = 1;

  var extra = '';

  throw 'abort() at ' + stackTrace() + extra;
}
Module['abort'] = Module.abort = abort;

// {{PRE_RUN_ADDITIONS}}
/*global Module*/
/*global _malloc, _free, _memcpy*/
/*global FUNCTION_TABLE, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64*/
/*global readLatin1String*/
/*global __emval_register, _emval_handle_array, __emval_decref*/
/*global ___getTypeName*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */
var InternalError = Module['InternalError'] = extendError(Error, 'InternalError');
var BindingError = Module['BindingError'] = extendError(Error, 'BindingError');
var UnboundTypeError = Module['UnboundTypeError'] = extendError(BindingError, 'UnboundTypeError');

function throwInternalError(message) {
    throw new InternalError(message);
}

function throwBindingError(message) {
    throw new BindingError(message);
}

function throwUnboundTypeError(message, types) {
    var unboundTypes = [];
    var seen = {};
    function visit(type) {
        if (seen[type]) {
            return;
        }
        if (registeredTypes[type]) {
            return;
        }
        if (typeDependencies[type]) {
            typeDependencies[type].forEach(visit);
            return;
        }
        unboundTypes.push(type);
        seen[type] = true;
    }
    types.forEach(visit);

    throw new UnboundTypeError(message + ': ' + unboundTypes.map(getTypeName).join([', ']));
}

// Creates a function overload resolution table to the given method 'methodName' in the given prototype,
// if the overload table doesn't yet exist.
function ensureOverloadTable(proto, methodName, humanName) {
    if (undefined === proto[methodName].overloadTable) {
        var prevFunc = proto[methodName];
        // Inject an overload resolver function that routes to the appropriate overload based on the number of arguments.
        proto[methodName] = function() {
            // TODO This check can be removed in -O3 level "unsafe" optimizations.
            if (!proto[methodName].overloadTable.hasOwnProperty(arguments.length)) {
                throwBindingError("Function '" + humanName + "' called with an invalid number of arguments (" + arguments.length + ") - expects one of (" + proto[methodName].overloadTable + ")!");
            }
            return proto[methodName].overloadTable[arguments.length].apply(this, arguments);
        };
        // Move the previous function into the overload table.
        proto[methodName].overloadTable = [];
        proto[methodName].overloadTable[prevFunc.argCount] = prevFunc;
    }
}

/* Registers a symbol (function, class, enum, ...) as part of the Module JS object so that
   hand-written code is able to access that symbol via 'Module.name'.
   name: The name of the symbol that's being exposed.
   value: The object itself to expose (function, class, ...)
   numArguments: For functions, specifies the number of arguments the function takes in. For other types, unused and undefined.

   To implement support for multiple overloads of a function, an 'overload selector' function is used. That selector function chooses
   the appropriate overload to call from an function overload table. This selector function is only used if multiple overloads are
   actually registered, since it carries a slight performance penalty. */
function exposePublicSymbol(name, value, numArguments) {
    if (Module.hasOwnProperty(name)) {
        if (undefined === numArguments || (undefined !== Module[name].overloadTable && undefined !== Module[name].overloadTable[numArguments])) {
            throwBindingError("Cannot register public name '" + name + "' twice");
        }

        // We are exposing a function with the same name as an existing function. Create an overload table and a function selector
        // that routes between the two.
        ensureOverloadTable(Module, name, name);
        if (Module.hasOwnProperty(numArguments)) {
            throwBindingError("Cannot register multiple overloads of a function with the same number of arguments (" + numArguments + ")!");
        }
        // Add the new function into the overload table.
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
        if (undefined !== numArguments) {
            Module[name].numArguments = numArguments;
        }
    }
}

function replacePublicSymbol(name, value, numArguments) {
    if (!Module.hasOwnProperty(name)) {
        throwInternalError('Replacing nonexistant public symbol');
    }
    // If there's an overload table for this symbol, replace the symbol in the overload table instead.
    if (undefined !== Module[name].overloadTable && undefined !== numArguments) {
        Module[name].overloadTable[numArguments] = value;
    }
    else {
        Module[name] = value;
    }
}

// from https://github.com/imvu/imvujs/blob/master/src/error.js
function extendError(baseErrorType, errorName) {
    var errorClass = createNamedFunction(errorName, function(message) {
        this.name = errorName;
        this.message = message;

        var stack = (new Error(message)).stack;
        if (stack !== undefined) {
            this.stack = this.toString() + '\n' +
                stack.replace(/^Error(:[^\n]*)?\n/, '');
        }
    });
    errorClass.prototype = Object.create(baseErrorType.prototype);
    errorClass.prototype.constructor = errorClass;
    errorClass.prototype.toString = function() {
        if (this.message === undefined) {
            return this.name;
        } else {
            return this.name + ': ' + this.message;
        }
    };

    return errorClass;
}


// from https://github.com/imvu/imvujs/blob/master/src/function.js
function createNamedFunction(name, body) {
    name = makeLegalFunctionName(name);
    /*jshint evil:true*/
    return new Function(
        "body",
        "return function " + name + "() {\n" +
        "    \"use strict\";" +
        "    return body.apply(this, arguments);\n" +
        "};\n"
    )(body);
}

function _embind_repr(v) {
    var t = typeof v;
    if (t === 'object' || t === 'array' || t === 'function') {
        return v.toString();
    } else {
        return '' + v;
    }
}

// typeID -> { toWireType: ..., fromWireType: ... }
var registeredTypes = {};

// typeID -> [callback]
var awaitingDependencies = {};

// typeID -> [dependentTypes]
var typeDependencies = {};

// class typeID -> {pointerType: ..., constPointerType: ...}
var registeredPointers = {};

function registerType(rawType, registeredInstance) {
    if (!('argPackAdvance' in registeredInstance)) {
        throw new TypeError('registerType registeredInstance requires argPackAdvance');
    }

    var name = registeredInstance.name;
    if (!rawType) {
        throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
    }
    if (registeredTypes.hasOwnProperty(rawType)) {
        throwBindingError("Cannot register type '" + name + "' twice");
    }

    registeredTypes[rawType] = registeredInstance;
    delete typeDependencies[rawType];

    if (awaitingDependencies.hasOwnProperty(rawType)) {
        var callbacks = awaitingDependencies[rawType];
        delete awaitingDependencies[rawType];
        callbacks.forEach(function(cb) {
            cb();
        });
    }
}

function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
    myTypes.forEach(function(type) {
        typeDependencies[type] = dependentTypes;
    });

    function onComplete(typeConverters) {
        var myTypeConverters = getTypeConverters(typeConverters);
        if (myTypeConverters.length !== myTypes.length) {
            throwInternalError('Mismatched type converter count');
        }
        for (var i = 0; i < myTypes.length; ++i) {
            registerType(myTypes[i], myTypeConverters[i]);
        }
    }

    var typeConverters = new Array(dependentTypes.length);
    var unregisteredTypes = [];
    var registered = 0;
    dependentTypes.forEach(function(dt, i) {
        if (registeredTypes.hasOwnProperty(dt)) {
            typeConverters[i] = registeredTypes[dt];
        } else {
            unregisteredTypes.push(dt);
            if (!awaitingDependencies.hasOwnProperty(dt)) {
                awaitingDependencies[dt] = [];
            }
            awaitingDependencies[dt].push(function() {
                typeConverters[i] = registeredTypes[dt];
                ++registered;
                if (registered === unregisteredTypes.length) {
                    onComplete(typeConverters);
                }
            });
        }
    });
    if (0 === unregisteredTypes.length) {
        onComplete(typeConverters);
    }
}

var __charCodes = (function() {
    var codes = new Array(256);
    for (var i = 0; i < 256; ++i) {
        codes[i] = String.fromCharCode(i);
    }
    return codes;
})();

function readLatin1String(ptr) {
    var ret = "";
    var c = ptr;
    while (HEAPU8[c]) {
        ret += __charCodes[HEAPU8[c++]];
    }
    return ret;
}

function getTypeName(type) {
    var ptr = ___getTypeName(type);
    var rv = readLatin1String(ptr);
    _free(ptr);
    return rv;
}

function heap32VectorToArray(count, firstElement) {
    var array = [];
    for (var i = 0; i < count; i++) {
        array.push(HEAP32[(firstElement >> 2) + i]);
    }
    return array;
}

function requireRegisteredType(rawType, humanName) {
    var impl = registeredTypes[rawType];
    if (undefined === impl) {
        throwBindingError(humanName + " has unknown type " + getTypeName(rawType));
    }
    return impl;
}

function __embind_register_void(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'argPackAdvance': 0,
        'fromWireType': function() {
            return undefined;
        },
        'toWireType': function(destructors, o) {
            // TODO: assert if anything else is given?
            return undefined;
        },
    });
}

function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
    var shift = getShiftFromSize(size);

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(wt) {
            // ambiguous emscripten ABI: sometimes return values are
            // true or false, and sometimes integers (0 or 1)
            return !!wt;
        },
        'toWireType': function(destructors, o) {
            return o ? trueValue : falseValue;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': function(pointer) {
            // TODO: if heap is fixed (like in asm.js) this could be executed outside
            var heap;
            if (size === 1) {
                heap = HEAP8;
            } else if (size === 2) {
                heap = HEAP16;
            } else if (size === 4) {
                heap = HEAP32;
            } else {
                throw new TypeError("Unknown boolean type size: " + name);
            }
            return this['fromWireType'](heap[pointer >> shift]);
        },
        destructorFunction: null, // This type does not need a destructor
    });
}

function getShiftFromSize(size) {
    switch (size) {
        case 1: return 0;
        case 2: return 1;
        case 4: return 2;
        case 8: return 3;
        default:
            throw new TypeError('Unknown type size: ' + size);
    }
}

function integerReadValueFromPointer(name, shift, signed) {
    switch (shift) {
        case 0: return function(pointer) {
            var heap = signed ? HEAP8 : HEAPU8;
            return this['fromWireType'](heap[pointer]);
        };
        case 1: return function(pointer) {
            var heap = signed ? HEAP16 : HEAPU16;
            return this['fromWireType'](heap[pointer >> 1]);
        };
        case 2: return function(pointer) {
            var heap = signed ? HEAP32 : HEAPU32;
            return this['fromWireType'](heap[pointer >> 2]);
        };
        default:
            throw new TypeError("Unknown integer type: " + name);
    }
}

function floatReadValueFromPointer(name, shift) {
    switch (shift) {
        case 2: return function(pointer) {
            return this['fromWireType'](HEAPF32[pointer >> 2]);
        };
        case 3: return function(pointer) {
            return this['fromWireType'](HEAPF64[pointer >> 3]);
        };
        default:
            throw new TypeError("Unknown float type: " + name);
    }
}

// When converting a number from JS to C++ side, the valid range of the number is
// [minRange, maxRange], inclusive.
function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
    name = readLatin1String(name);
    if (maxRange === -1) { // LLVM doesn't have signed and unsigned 32-bit types, so u32 literals come out as 'i32 -1'. Always treat those as max u32.
        maxRange = 4294967295;
    }

    var shift = getShiftFromSize(size);

    registerType(primitiveType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following two if()s and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            if (value < minRange || value > maxRange) {
                throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ', ' + maxRange + ']!');
            }
            return value | 0;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, minRange !== 0),
        destructorFunction: null, // This type does not need a destructor
    });
}



function __embind_register_float(rawType, name, size) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            return value;
        },
        'toWireType': function(destructors, value) {
            // todo: Here we have an opportunity for -O3 level "unsafe" optimizations: we could
            // avoid the following if() and assume value is of proper type.
            if (typeof value !== "number" && typeof value !== "boolean") {
                throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
            }
            return value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': floatReadValueFromPointer(name, shift),
        destructorFunction: null, // This type does not need a destructor
    });
}

// For types whose wire types are 32-bit pointers.
function simpleReadValueFromPointer(pointer) {
    return this['fromWireType'](HEAPU32[pointer >> 2]);
}

function __embind_register_std_string(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAPU8[value + 4 + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            if (value instanceof ArrayBuffer) {
                value = new Uint8Array(value);
            }

            function getTAElement(ta, index) {
                return ta[index];
            }
            function getStringElement(string, index) {
                return string.charCodeAt(index);
            }
            var getElement;
            if (value instanceof Uint8Array) {
                getElement = getTAElement;
            } else if (value instanceof Int8Array) {
                getElement = getTAElement;
            } else if (typeof value === 'string') {
                getElement = getStringElement;
            } else {
                throwBindingError('Cannot pass non-string to std::string');
            }

            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length);
            HEAPU32[ptr >> 2] = length;
            for (var i = 0; i < length; ++i) {
                var charCode = getElement(value, i);
                if (charCode > 255) {
                    _free(ptr);
                    throwBindingError('String has UTF-16 code units that do not fit in 8 bits');
                }
                HEAPU8[ptr + 4 + i] = charCode;
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_std_wstring(rawType, charSize, name) {
    name = readLatin1String(name);
    var HEAP, shift;
    if (charSize === 2) {
        HEAP = HEAPU16;
        shift = 1;
    } else if (charSize === 4) {
        HEAP = HEAPU32;
        shift = 2;
    }
    registerType(rawType, {
        name: name,
        'fromWireType': function(value) {
            var length = HEAPU32[value >> 2];
            var a = new Array(length);
            var start = (value + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                a[i] = String.fromCharCode(HEAP[start + i]);
            }
            _free(value);
            return a.join('');
        },
        'toWireType': function(destructors, value) {
            // assumes 4-byte alignment
            var length = value.length;
            var ptr = _malloc(4 + length * charSize);
            HEAPU32[ptr >> 2] = length;
            var start = (ptr + 4) >> shift;
            for (var i = 0; i < length; ++i) {
                HEAP[start + i] = value.charCodeAt(i);
            }
            if (destructors !== null) {
                destructors.push(_free, ptr);
            }
            return ptr;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: function(ptr) { _free(ptr); },
    });
}

function __embind_register_emval(rawType, name) {
    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var rv = _emval_handle_array[handle].value;
            __emval_decref(handle);
            return rv;
        },
        'toWireType': function(destructors, value) {
            return __emval_register(value);
        },
        'argPackAdvance': 8,
        'readValueFromPointer': simpleReadValueFromPointer,
        destructorFunction: null, // This type does not need a destructor
    });
}

function __embind_register_memory_view(rawType, name) {
    var typeMapping = [
        Int8Array,
        Uint8Array,
        Int16Array,
        Uint16Array,
        Int32Array,
        Uint32Array,
        Float32Array,
        Float64Array,
    ];

    name = readLatin1String(name);
    registerType(rawType, {
        name: name,
        'fromWireType': function(handle) {
            var type = HEAPU32[handle >> 2];
            var size = HEAPU32[(handle >> 2) + 1]; // in elements
            var data = HEAPU32[(handle >> 2) + 2]; // byte offset into emscripten heap
            var TA = typeMapping[type];
            return new TA(HEAP8.buffer, data, size);
        },
        'argPackAdvance': 16,
        'readValueFromPointer': function(ptr) {
            return this['fromWireType'](ptr);
        },
    });
}

function runDestructors(destructors) {
    while (destructors.length) {
        var ptr = destructors.pop();
        var del = destructors.pop();
        del(ptr);
    }
}

// Function implementation of operator new, per
// http://www.ecma-international.org/publications/files/ECMA-ST/Ecma-262.pdf
// 13.2.2
// ES3
function new_(constructor, argumentList) {
    if (!(constructor instanceof Function)) {
        throw new TypeError('new_ called with constructor type ' + typeof(constructor) + " which is not a function");
    }

    /*
     * Previously, the following line was just:

     function dummy() {};

     * Unfortunately, Chrome was preserving 'dummy' as the object's name, even though at creation, the 'dummy' has the
     * correct constructor name.  Thus, objects created with IMVU.new would show up in the debugger as 'dummy', which
     * isn't very helpful.  Using IMVU.createNamedFunction addresses the issue.  Doublely-unfortunately, there's no way
     * to write a test for this behavior.  -NRD 2013.02.22
     */
    var dummy = createNamedFunction(constructor.name, function(){});
    dummy.prototype = constructor.prototype;
    var obj = new dummy;

    var r = constructor.apply(obj, argumentList);
    return (r instanceof Object) ? r : obj;
}

// The path to interop from JS code to C++ code:
// (hand-written JS code) -> (autogenerated JS invoker) -> (template-generated C++ invoker) -> (target C++ function)
// craftInvokerFunction generates the JS invoker function for each function exposed to JS through embind.
function craftInvokerFunction(humanName, argTypes, classType, cppInvokerFunc, cppTargetFunc) {
    // humanName: a human-readable string name for the function to be generated.
    // argTypes: An array that contains the embind type objects for all types in the function signature.
    //    argTypes[0] is the type object for the function return value.
    //    argTypes[1] is the type object for function this object/class type, or null if not crafting an invoker for a class method.
    //    argTypes[2...] are the actual function parameters.
    // classType: The embind type object for the class to be bound, or null if this is not a method of a class.
    // cppInvokerFunc: JS Function object to the C++-side function that interops into C++ code.
    // cppTargetFunc: Function pointer (an integer to FUNCTION_TABLE) to the target C++ function the cppInvokerFunc will end up calling.
    var argCount = argTypes.length;

    if (argCount < 2) {
        throwBindingError("argTypes array size mismatch! Must at least get return value and 'this' types!");
    }

    var isClassMethodFunc = (argTypes[1] !== null && classType !== null);

    if (!isClassMethodFunc && !FUNCTION_TABLE[cppTargetFunc]) {
        throwBindingError('Global function '+humanName+' is not defined!');
    }

    // Free functions with signature "void function()" do not need an invoker that marshalls between wire types.
// TODO: This omits argument count check - enable only at -O3 or similar.
//    if (ENABLE_UNSAFE_OPTS && argCount == 2 && argTypes[0].name == "void" && !isClassMethodFunc) {
//       return FUNCTION_TABLE[fn];
//    }

    var argsList = "";
    var argsListWired = "";
    for(var i = 0; i < argCount-2; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i;
        argsListWired += (i!==0?", ":"")+"arg"+i+"Wired";
    }

    var invokerFnBody =
        "return function "+makeLegalFunctionName(humanName)+"("+argsList+") {\n" +
        "if (arguments.length !== "+(argCount - 2)+") {\n" +
            "throwBindingError('function "+humanName+" called with ' + arguments.length + ' arguments, expected "+(argCount - 2)+" args!');\n" +
        "}\n";

    // Determine if we need to use a dynamic stack to store the destructors for the function parameters.
    // TODO: Remove this completely once all function invokers are being dynamically generated.
    var needsDestructorStack = false;

    for(var i = 1; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here.
        if (argTypes[i] !== null && argTypes[i].destructorFunction === undefined) { // The type does not define a destructor function - must use dynamic stack
            needsDestructorStack = true;
            break;
        }
    }

    if (needsDestructorStack) {
        invokerFnBody +=
            "var destructors = [];\n";
    }

    var dtorStack = needsDestructorStack ? "destructors" : "null";
    var args1 = ["throwBindingError", "classType", "invoker", "fn", "runDestructors", "retType", "classParam"];
    var args2 = [throwBindingError, classType, cppInvokerFunc, cppTargetFunc, runDestructors, argTypes[0], argTypes[1]];

    if (isClassMethodFunc) {
        invokerFnBody += "var thisWired = classParam.toWireType("+dtorStack+", this);\n";
    }

    for(var i = 0; i < argCount-2; ++i) {
        invokerFnBody += "var arg"+i+"Wired = argType"+i+".toWireType("+dtorStack+", arg"+i+"); // "+argTypes[i+2].name+"\n";
        args1.push("argType"+i);
        args2.push(argTypes[i+2]);
    }

    if (isClassMethodFunc) {
        argsListWired = "thisWired" + (argsListWired.length > 0 ? ", " : "") + argsListWired;
    }

    var returns = (argTypes[0].name !== "void");

    invokerFnBody +=
        (returns?"var rv = ":"") + "invoker(fn"+(argsListWired.length>0?", ":"")+argsListWired+");\n";

    if (needsDestructorStack) {
        invokerFnBody += "runDestructors(destructors);\n";
    } else {
        for(var i = isClassMethodFunc?1:2; i < argTypes.length; ++i) { // Skip return value at index 0 - it's not deleted here. Also skip class type if not a method.
            var paramName = (i === 1 ? "thisWired" : ("arg"+(i-2)+"Wired"));
            if (argTypes[i].destructorFunction !== null) {
                invokerFnBody += paramName+"_dtor("+paramName+"); // "+argTypes[i].name+"\n";
                args1.push(paramName+"_dtor");
                args2.push(argTypes[i].destructorFunction);
            }
        }
    }

    if (returns) {
        invokerFnBody += "return retType.fromWireType(rv);\n";
    }
    invokerFnBody += "}\n";

    args1.push(invokerFnBody);

    var invokerFunction = new_(Function, args1).apply(null, args2);
    return invokerFunction;
}

function __embind_register_function(name, argCount, rawArgTypesAddr, rawInvoker, fn) {
    var argTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    name = readLatin1String(name);
    rawInvoker = FUNCTION_TABLE[rawInvoker];

    exposePublicSymbol(name, function() {
        throwUnboundTypeError('Cannot call ' + name + ' due to unbound types', argTypes);
    }, argCount - 1);

    whenDependentTypesAreResolved([], argTypes, function(argTypes) {
        var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
        replacePublicSymbol(name, craftInvokerFunction(name, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn), argCount - 1);
        return [];
    });
}

var tupleRegistrations = {};

function __embind_register_value_array(rawType, name, rawConstructor, rawDestructor) {
    tupleRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        elements: [],
    };
}

function __embind_register_value_array_element(
    rawTupleType,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    tupleRegistrations[rawTupleType].elements.push({
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}

function __embind_finalize_value_array(rawTupleType) {
    var reg = tupleRegistrations[rawTupleType];
    delete tupleRegistrations[rawTupleType];
    var elements = reg.elements;
    var elementsLength = elements.length;
    var elementTypes = elements.map(function(elt) { return elt.getterReturnType; }).
                concat(elements.map(function(elt) { return elt.setterArgumentType; }));

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;

    whenDependentTypesAreResolved([rawTupleType], elementTypes, function(elementTypes) {
        elements.forEach(function(elt, i) {
            var getterReturnType = elementTypes[i];
            var getter = elt.getter;
            var getterContext = elt.getterContext;
            var setterArgumentType = elementTypes[i + elementsLength];
            var setter = elt.setter;
            var setterContext = elt.setterContext;
            elt.read = function(ptr) {
                return getterReturnType['fromWireType'](getter(getterContext, ptr));
            };
            elt.write = function(ptr, o) {
                var destructors = [];
                setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                runDestructors(destructors);
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = new Array(elementsLength);
                for (var i = 0; i < elementsLength; ++i) {
                    rv[i] = elements[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                if (elementsLength !== o.length) {
                    throw new TypeError("Incorrect number of tuple elements for " + reg.name + ": expected=" + elementsLength + ", actual=" + o.length);
                }
                var ptr = rawConstructor();
                for (var i = 0; i < elementsLength; ++i) {
                    elements[i].write(ptr, o[i]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            'argPackAdvance': 8,
            'readValueFromPointer': simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
        }];
    });
}

var structRegistrations = {};

function __embind_register_value_object(
    rawType,
    name,
    rawConstructor,
    rawDestructor
) {
    structRegistrations[rawType] = {
        name: readLatin1String(name),
        rawConstructor: FUNCTION_TABLE[rawConstructor],
        rawDestructor: FUNCTION_TABLE[rawDestructor],
        fields: [],
    };
}

function __embind_register_value_object_field(
    structType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    structRegistrations[structType].fields.push({
        fieldName: readLatin1String(fieldName),
        getterReturnType: getterReturnType,
        getter: FUNCTION_TABLE[getter],
        getterContext: getterContext,
        setterArgumentType: setterArgumentType,
        setter: FUNCTION_TABLE[setter],
        setterContext: setterContext,
    });
}

function __embind_finalize_value_object(structType) {
    var reg = structRegistrations[structType];
    delete structRegistrations[structType];

    var rawConstructor = reg.rawConstructor;
    var rawDestructor = reg.rawDestructor;
    var fieldRecords = reg.fields;
    var fieldTypes = fieldRecords.map(function(field) { return field.getterReturnType; }).
              concat(fieldRecords.map(function(field) { return field.setterArgumentType; }));
    whenDependentTypesAreResolved([structType], fieldTypes, function(fieldTypes) {
        var fields = {};
        fieldRecords.forEach(function(field, i) {
            var fieldName = field.fieldName;
            var getterReturnType = fieldTypes[i];
            var getter = field.getter;
            var getterContext = field.getterContext;
            var setterArgumentType = fieldTypes[i + fieldRecords.length];
            var setter = field.setter;
            var setterContext = field.setterContext;
            fields[fieldName] = {
                read: function(ptr) {
                    return getterReturnType['fromWireType'](
                        getter(getterContext, ptr));
                },
                write: function(ptr, o) {
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, o));
                    runDestructors(destructors);
                }
            };
        });

        return [{
            name: reg.name,
            'fromWireType': function(ptr) {
                var rv = {};
                for (var i in fields) {
                    rv[i] = fields[i].read(ptr);
                }
                rawDestructor(ptr);
                return rv;
            },
            'toWireType': function(destructors, o) {
                // todo: Here we have an opportunity for -O3 level "unsafe" optimizations:
                // assume all fields are present without checking.
                for (var fieldName in fields) {
                    if (!(fieldName in o)) {
                        throw new TypeError('Missing field');
                    }
                }
                var ptr = rawConstructor();
                for (fieldName in fields) {
                    fields[fieldName].write(ptr, o[fieldName]);
                }
                if (destructors !== null) {
                    destructors.push(rawDestructor, ptr);
                }
                return ptr;
            },
            'argPackAdvance': 8,
            'readValueFromPointer': simpleReadValueFromPointer,
            destructorFunction: rawDestructor,
        }];
    });
}

var genericPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }

        if (this.isSmartPointer) {
            var ptr = this.rawConstructor();
            if (destructors !== null) {
                destructors.push(this.rawDestructor, ptr);
            }
            return ptr;
        } else {
            return 0;
        }
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (!this.isConst && handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);

    if (this.isSmartPointer) {
        // TODO: this is not strictly true
        // We could support BY_EMVAL conversions from raw pointers to smart pointers
        // because the smart pointer can hold a reference to the handle
        if (undefined === handle.$$.smartPtr) {
            throwBindingError('Passing raw pointer to smart pointer is illegal');
        }

        switch (this.sharingPolicy) {
            case 0: // NONE
                // no upcasting
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    throwBindingError('Cannot convert argument of type ' + (handle.$$.smartPtrType ? handle.$$.smartPtrType.name : handle.$$.ptrType.name) + ' to parameter type ' + this.name);
                }
                break;

            case 1: // INTRUSIVE
                ptr = handle.$$.smartPtr;
                break;

            case 2: // BY_EMVAL
                if (handle.$$.smartPtrType === this) {
                    ptr = handle.$$.smartPtr;
                } else {
                    var clonedHandle = handle['clone']();
                    ptr = this.rawShare(
                        ptr,
                        __emval_register(function() {
                            clonedHandle['delete']();
                        })
                    );
                    if (destructors !== null) {
                        destructors.push(this.rawDestructor, ptr);
                    }
                }
                break;

            default:
                throwBindingError('Unsupporting sharing policy');
        }
    }
    return ptr;
};

// If we know a pointer type is not going to have SmartPtr logic in it, we can
// special-case optimize it a bit (compare to genericPointerToWireType)
var constNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

// An optimized version for non-const method accesses - there we must additionally restrict that
// the pointer is not a const-pointer.
var nonConstNoSmartPtrRawPointerToWireType = function(destructors, handle) {
    if (handle === null) {
        if (this.isReference) {
            throwBindingError('null is not a valid ' + this.name);
        }
        return 0;
    }

    if (!handle.$$) {
        throwBindingError('Cannot pass "' + _embind_repr(handle) + '" as a ' + this.name);
    }
    if (!handle.$$.ptr) {
        throwBindingError('Cannot pass deleted object as a pointer of type ' + this.name);
    }
    if (handle.$$.ptrType.isConst) {
        throwBindingError('Cannot convert argument of type ' + handle.$$.ptrType.name + ' to parameter type ' + this.name);
    }
    var handleClass = handle.$$.ptrType.registeredClass;
    var ptr = upcastPointer(handle.$$.ptr, handleClass, this.registeredClass);
    return ptr;
};

function RegisteredPointer(
    name,
    registeredClass,
    isReference,
    isConst,

    // smart pointer properties
    isSmartPointer,
    pointeeType,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    this.name = name;
    this.registeredClass = registeredClass;
    this.isReference = isReference;
    this.isConst = isConst;

    // smart pointer properties
    this.isSmartPointer = isSmartPointer;
    this.pointeeType = pointeeType;
    this.sharingPolicy = sharingPolicy;
    this.rawGetPointee = rawGetPointee;
    this.rawConstructor = rawConstructor;
    this.rawShare = rawShare;
    this.rawDestructor = rawDestructor;

    if (!isSmartPointer && registeredClass.baseClass === undefined) {
        if (isConst) {
            this['toWireType'] = constNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        } else {
            this['toWireType'] = nonConstNoSmartPtrRawPointerToWireType;
            this.destructorFunction = null;
        }
    } else {
        this['toWireType'] = genericPointerToWireType;
        // Here we must leave this.destructorFunction undefined, since whether genericPointerToWireType returns
        // a pointer that needs to be freed up is runtime-dependent, and cannot be evaluated at registration time.
        // TODO: Create an alternative mechanism that allows removing the use of var destructors = []; array in
        //       craftInvokerFunction altogether.
    }
}

RegisteredPointer.prototype.getPointee = function(ptr) {
    if (this.rawGetPointee) {
        ptr = this.rawGetPointee(ptr);
    }
    return ptr;
};

RegisteredPointer.prototype.destructor = function(ptr) {
    if (this.rawDestructor) {
        this.rawDestructor(ptr);
    }
};

RegisteredPointer.prototype['argPackAdvance'] = 8;
RegisteredPointer.prototype['readValueFromPointer'] = simpleReadValueFromPointer;

RegisteredPointer.prototype['fromWireType'] = function(ptr) {
    // ptr is a raw pointer (or a raw smartpointer)

    // rawPointer is a maybe-null raw pointer
    var rawPointer = this.getPointee(ptr);
    if (!rawPointer) {
        this.destructor(ptr);
        return null;
    }

    function makeDefaultHandle() {
        if (this.isSmartPointer) {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this.pointeeType,
                ptr: rawPointer,
                smartPtrType: this,
                smartPtr: ptr,
            });
        } else {
            return makeClassHandle(this.registeredClass.instancePrototype, {
                ptrType: this,
                ptr: ptr,
            });
        }
    }

    var actualType = this.registeredClass.getActualType(rawPointer);
    var registeredPointerRecord = registeredPointers[actualType];
    if (!registeredPointerRecord) {
        return makeDefaultHandle.call(this);
    }

    var toType;
    if (this.isConst) {
        toType = registeredPointerRecord.constPointerType;
    } else {
        toType = registeredPointerRecord.pointerType;
    }
    var dp = downcastPointer(
        rawPointer,
        this.registeredClass,
        toType.registeredClass);
    if (dp === null) {
        return makeDefaultHandle.call(this);
    }
    if (this.isSmartPointer) {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
            smartPtrType: this,
            smartPtr: ptr,
        });
    } else {
        return makeClassHandle(toType.registeredClass.instancePrototype, {
            ptrType: toType,
            ptr: dp,
        });
    }
};

function makeClassHandle(prototype, record) {
    if (!record.ptrType || !record.ptr) {
        throwInternalError('makeClassHandle requires ptr and ptrType');
    }
    var hasSmartPtrType = !!record.smartPtrType;
    var hasSmartPtr = !!record.smartPtr;
    if (hasSmartPtrType !== hasSmartPtr) {
        throwInternalError('Both smartPtrType and smartPtr must be specified');
    }
    record.count = { value: 1 };
    return Object.create(prototype, {
        $$: {
            value: record,
        },
    });
}

// root of all pointer and smart pointer handles in embind
function ClassHandle() {
}

function getInstanceTypeName(handle) {
    return handle.$$.ptrType.registeredClass.name;
}

ClassHandle.prototype['isAliasOf'] = function(other) {
    if (!(this instanceof ClassHandle)) {
        return false;
    }
    if (!(other instanceof ClassHandle)) {
        return false;
    }

    var leftClass = this.$$.ptrType.registeredClass;
    var left = this.$$.ptr;
    var rightClass = other.$$.ptrType.registeredClass;
    var right = other.$$.ptr;

    while (leftClass.baseClass) {
        left = leftClass.upcast(left);
        leftClass = leftClass.baseClass;
    }

    while (rightClass.baseClass) {
        right = rightClass.upcast(right);
        rightClass = rightClass.baseClass;
    }

    return leftClass === rightClass && left === right;
};

function throwInstanceAlreadyDeleted(obj) {
    throwBindingError(getInstanceTypeName(obj) + ' instance already deleted');
}

ClassHandle.prototype['clone'] = function() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }

    var clone = Object.create(Object.getPrototypeOf(this), {
        $$: {
            value: shallowCopy(this.$$),
        }
    });

    clone.$$.count.value += 1;
    return clone;
};

function runDestructor(handle) {
    var $$ = handle.$$;
    if ($$.smartPtr) {
        $$.smartPtrType.rawDestructor($$.smartPtr);
    } else {
        $$.ptrType.registeredClass.rawDestructor($$.ptr);
    }
}

ClassHandle.prototype['delete'] = function ClassHandle_delete() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }

    this.$$.count.value -= 1;
    if (0 === this.$$.count.value) {
        runDestructor(this);
    }
    this.$$.smartPtr = undefined;
    this.$$.ptr = undefined;
};

var deletionQueue = [];

ClassHandle.prototype['isDeleted'] = function isDeleted() {
    return !this.$$.ptr;
};

ClassHandle.prototype['deleteLater'] = function deleteLater() {
    if (!this.$$.ptr) {
        throwInstanceAlreadyDeleted(this);
    }
    if (this.$$.deleteScheduled) {
        throwBindingError('Object already scheduled for deletion');
    }
    deletionQueue.push(this);
    if (deletionQueue.length === 1 && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
    this.$$.deleteScheduled = true;
    return this;
};

function flushPendingDeletes() {
    while (deletionQueue.length) {
        var obj = deletionQueue.pop();
        obj.$$.deleteScheduled = false;
        obj['delete']();
    }
}
Module['flushPendingDeletes'] = flushPendingDeletes;

var delayFunction;
Module['setDelayFunction'] = function setDelayFunction(fn) {
    delayFunction = fn;
    if (deletionQueue.length && delayFunction) {
        delayFunction(flushPendingDeletes);
    }
};

function RegisteredClass(
    name,
    constructor,
    instancePrototype,
    rawDestructor,
    baseClass,
    getActualType,
    upcast,
    downcast
) {
    this.name = name;
    this.constructor = constructor;
    this.instancePrototype = instancePrototype;
    this.rawDestructor = rawDestructor;
    this.baseClass = baseClass;
    this.getActualType = getActualType;
    this.upcast = upcast;
    this.downcast = downcast;
}

function shallowCopy(o) {
    var rv = {};
    for (var k in o) {
        rv[k] = o[k];
    }
    return rv;
}

function __embind_register_class(
    rawType,
    rawPointerType,
    rawConstPointerType,
    baseClassRawType,
    getActualType,
    upcast,
    downcast,
    name,
    rawDestructor
) {
    name = readLatin1String(name);
    rawDestructor = FUNCTION_TABLE[rawDestructor];
    getActualType = FUNCTION_TABLE[getActualType];
    upcast = FUNCTION_TABLE[upcast];
    downcast = FUNCTION_TABLE[downcast];
    var legalFunctionName = makeLegalFunctionName(name);

    exposePublicSymbol(legalFunctionName, function() {
        // this code cannot run if baseClassRawType is zero
        throwUnboundTypeError('Cannot construct ' + name + ' due to unbound types', [baseClassRawType]);
    });

    whenDependentTypesAreResolved(
        [rawType, rawPointerType, rawConstPointerType],
        baseClassRawType ? [baseClassRawType] : [],
        function(base) {
            base = base[0];

            var baseClass;
            var basePrototype;
            if (baseClassRawType) {
                baseClass = base.registeredClass;
                basePrototype = baseClass.instancePrototype;
            } else {
                basePrototype = ClassHandle.prototype;
            }

            var constructor = createNamedFunction(legalFunctionName, function() {
                if (Object.getPrototypeOf(this) !== instancePrototype) {
                    throw new BindingError("Use 'new' to construct " + name);
                }
                if (undefined === registeredClass.constructor_body) {
                    throw new BindingError(name + " has no accessible constructor");
                }
                var body = registeredClass.constructor_body[arguments.length];
                if (undefined === body) {
                    throw new BindingError("Tried to invoke ctor of " + name + " with invalid number of parameters (" + arguments.length + ") - expected (" + Object.keys(registeredClass.constructor_body).toString() + ") parameters instead!");
                }
                return body.apply(this, arguments);
            });

            var instancePrototype = Object.create(basePrototype, {
                constructor: { value: constructor },
            });

            constructor.prototype = instancePrototype;

            var registeredClass = new RegisteredClass(
                name,
                constructor,
                instancePrototype,
                rawDestructor,
                baseClass,
                getActualType,
                upcast,
                downcast);

            var referenceConverter = new RegisteredPointer(
                name,
                registeredClass,
                true,
                false,
                false);

            var pointerConverter = new RegisteredPointer(
                name + '*',
                registeredClass,
                false,
                false,
                false);

            var constPointerConverter = new RegisteredPointer(
                name + ' const*',
                registeredClass,
                false,
                true,
                false);

            registeredPointers[rawType] = {
                pointerType: pointerConverter,
                constPointerType: constPointerConverter
            };

            replacePublicSymbol(legalFunctionName, constructor);

            return [referenceConverter, pointerConverter, constPointerConverter];
        }
    );
}

function __embind_register_class_constructor(
    rawClassType,
    argCount,
    rawArgTypesAddr,
    invoker,
    rawConstructor
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    invoker = FUNCTION_TABLE[invoker];

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = 'constructor ' + classType.name;

        if (undefined === classType.registeredClass.constructor_body) {
            classType.registeredClass.constructor_body = [];
        }
        if (undefined !== classType.registeredClass.constructor_body[argCount - 1]) {
            throw new BindingError("Cannot register multiple constructors with identical number of parameters (" + (argCount-1) + ") for class '" + classType.name + "'! Overload resolution is currently only performed using the parameter count, not actual type info!");
        }
        classType.registeredClass.constructor_body[argCount - 1] = function() {
            throwUnboundTypeError('Cannot construct ' + classType.name + ' due to unbound types', rawArgTypes);
        };

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            classType.registeredClass.constructor_body[argCount - 1] = function() {
                if (arguments.length !== argCount - 1) {
                    throwBindingError(humanName + ' called with ' + arguments.length + ' arguments, expected ' + (argCount-1));
                }
                var destructors = [];
                var args = new Array(argCount);
                args[0] = rawConstructor;
                for (var i = 1; i < argCount; ++i) {
                    args[i] = argTypes[i]['toWireType'](destructors, arguments[i - 1]);
                }

                var ptr = invoker.apply(null, args);
                runDestructors(destructors);

                return argTypes[0]['fromWireType'](ptr);
            };
            return [];
        });
        return [];
    });
}

function downcastPointer(ptr, ptrClass, desiredClass) {
    if (ptrClass === desiredClass) {
        return ptr;
    }
    if (undefined === desiredClass.baseClass) {
        return null; // no conversion
    }
    // O(depth) stack space used
    return desiredClass.downcast(
        downcastPointer(ptr, ptrClass, desiredClass.baseClass));
}

function upcastPointer(ptr, ptrClass, desiredClass) {
    while (ptrClass !== desiredClass) {
        if (!ptrClass.upcast) {
            throwBindingError("Expected null or instance of " + desiredClass.name + ", got an instance of " + ptrClass.name);
        }
        ptr = ptrClass.upcast(ptr);
        ptrClass = ptrClass.baseClass;
    }
    return ptr;
}

function validateThis(this_, classType, humanName) {
    if (!(this_ instanceof Object)) {
        throwBindingError(humanName + ' with invalid "this": ' + this_);
    }
    if (!(this_ instanceof classType.registeredClass.constructor)) {
        throwBindingError(humanName + ' incompatible with "this" of type ' + this_.constructor.name);
    }
    if (!this_.$$.ptr) {
        throwBindingError('cannot call emscripten binding method ' + humanName + ' on deleted object');
    }

    // todo: kill this
    return upcastPointer(
        this_.$$.ptr,
        this_.$$.ptrType.registeredClass,
        classType.registeredClass);
}

function __embind_register_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr, // [ReturnType, ThisType, Args...]
    rawInvoker,
    context
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];

    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        var unboundTypesHandler = function() {
            throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
        };

        var proto = classType.registeredClass.instancePrototype;
        var method = proto[methodName];
        if (undefined === method || (undefined === method.overloadTable && method.className !== classType.name && method.argCount === argCount-2)) {
            // This is the first overload to be registered, OR we are replacing a function in the base class with a function in the derived class.
            unboundTypesHandler.argCount = argCount-2;
            unboundTypesHandler.className = classType.name;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-2] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {

            var memberFunction = craftInvokerFunction(humanName, argTypes, classType, rawInvoker, context);

            // Replace the initial unbound-handler-stub function with the appropriate member function, now that all types
            // are resolved. If multiple overloads are registered for this function, the function goes into an overload table.
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = memberFunction;
            } else {
                proto[methodName].overloadTable[argCount-2] = memberFunction;
            }

            return [];
        });
        return [];
    });
}

function __embind_register_class_class_function(
    rawClassType,
    methodName,
    argCount,
    rawArgTypesAddr,
    rawInvoker,
    fn
) {
    var rawArgTypes = heap32VectorToArray(argCount, rawArgTypesAddr);
    methodName = readLatin1String(methodName);
    rawInvoker = FUNCTION_TABLE[rawInvoker];
    whenDependentTypesAreResolved([], [rawClassType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + methodName;

        var unboundTypesHandler = function() {
                throwUnboundTypeError('Cannot call ' + humanName + ' due to unbound types', rawArgTypes);
            };

        var proto = classType.registeredClass.constructor;
        if (undefined === proto[methodName]) {
            // This is the first function to be registered with this name.
            unboundTypesHandler.argCount = argCount-1;
            proto[methodName] = unboundTypesHandler;
        } else {
            // There was an existing function with the same name registered. Set up a function overload routing table.
            ensureOverloadTable(proto, methodName, humanName);
            proto[methodName].overloadTable[argCount-1] = unboundTypesHandler;
        }

        whenDependentTypesAreResolved([], rawArgTypes, function(argTypes) {
            // Replace the initial unbound-types-handler stub with the proper function. If multiple overloads are registered,
            // the function handlers go into an overload table.
            var invokerArgsArray = [argTypes[0] /* return value */, null /* no class 'this'*/].concat(argTypes.slice(1) /* actual params */);
            var func = craftInvokerFunction(humanName, invokerArgsArray, null /* no class 'this'*/, rawInvoker, fn);
            if (undefined === proto[methodName].overloadTable) {
                proto[methodName] = func;
            } else {
                proto[methodName].overloadTable[argCount-1] = func;
            }
            return [];
        });
        return [];
    });
}

function __embind_register_class_property(
    classType,
    fieldName,
    getterReturnType,
    getter,
    getterContext,
    setterArgumentType,
    setter,
    setterContext
) {
    fieldName = readLatin1String(fieldName);
    getter = FUNCTION_TABLE[getter];

    whenDependentTypesAreResolved([], [classType], function(classType) {
        classType = classType[0];
        var humanName = classType.name + '.' + fieldName;
        var desc = {
            get: function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            },
            enumerable: true,
            configurable: true
        };
        if (setter) {
            desc.set = function() {
                throwUnboundTypeError('Cannot access ' + humanName + ' due to unbound types', [getterReturnType, setterArgumentType]);
            };
        } else {
            desc.set = function(v) {
                throwBindingError(humanName + ' is a read-only property');
            };
        }

        Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);

        whenDependentTypesAreResolved(
            [],
            (setter ? [getterReturnType, setterArgumentType] : [getterReturnType]),
        function(types) {
            var getterReturnType = types[0];
            var desc = {
                get: function() {
                    var ptr = validateThis(this, classType, humanName + ' getter');
                    return getterReturnType['fromWireType'](getter(getterContext, ptr));
                },
                enumerable: true
            };

            if (setter) {
                setter = FUNCTION_TABLE[setter];
                var setterArgumentType = types[1];
                desc.set = function(v) {
                    var ptr = validateThis(this, classType, humanName + ' setter');
                    var destructors = [];
                    setter(setterContext, ptr, setterArgumentType['toWireType'](destructors, v));
                    runDestructors(destructors);
                };
            }

            Object.defineProperty(classType.registeredClass.instancePrototype, fieldName, desc);
            return [];
        });

        return [];
    });
}

var char_0 = '0'.charCodeAt(0);
var char_9 = '9'.charCodeAt(0);
function makeLegalFunctionName(name) {
    name = name.replace(/[^a-zA-Z0-9_]/g, '$');
    var f = name.charCodeAt(0);
    if (f >= char_0 && f <= char_9) {
        return '_' + name;
    } else {
        return name;
    }
}

function __embind_register_smart_ptr(
    rawType,
    rawPointeeType,
    name,
    sharingPolicy,
    rawGetPointee,
    rawConstructor,
    rawShare,
    rawDestructor
) {
    name = readLatin1String(name);
    rawGetPointee = FUNCTION_TABLE[rawGetPointee];
    rawConstructor = FUNCTION_TABLE[rawConstructor];
    rawShare = FUNCTION_TABLE[rawShare];
    rawDestructor = FUNCTION_TABLE[rawDestructor];

    whenDependentTypesAreResolved([rawType], [rawPointeeType], function(pointeeType) {
        pointeeType = pointeeType[0];

        var registeredPointer = new RegisteredPointer(
            name,
            pointeeType.registeredClass,
            false,
            false,
            // smart pointer properties
            true,
            pointeeType,
            sharingPolicy,
            rawGetPointee,
            rawConstructor,
            rawShare,
            rawDestructor);
        return [registeredPointer];
    });
}

function __embind_register_enum(
    rawType,
    name,
    size,
    isSigned
) {
    var shift = getShiftFromSize(size);
    name = readLatin1String(name);

    function constructor() {
    }
    constructor.values = {};

    registerType(rawType, {
        name: name,
        constructor: constructor,
        'fromWireType': function(c) {
            return this.constructor.values[c];
        },
        'toWireType': function(destructors, c) {
            return c.value;
        },
        'argPackAdvance': 8,
        'readValueFromPointer': integerReadValueFromPointer(name, shift, isSigned),
        destructorFunction: null,
    });
    exposePublicSymbol(name, constructor);
}

function __embind_register_enum_value(
    rawEnumType,
    name,
    enumValue
) {
    var enumType = requireRegisteredType(rawEnumType, 'enum');
    name = readLatin1String(name);

    var Enum = enumType.constructor;

    var Value = Object.create(enumType.constructor.prototype, {
        value: {value: enumValue},
        constructor: {value: createNamedFunction(enumType.name + '_' + name, function() {})},
    });
    Enum.values[enumValue] = Value;
    Enum[name] = Value;
}

function __embind_register_constant(name, type, value) {
    name = readLatin1String(name);
    whenDependentTypesAreResolved([], [type], function(type) {
        type = type[0];
        Module[name] = type['fromWireType'](value);
        return [];
    });
}
/*global Module:true, Runtime*/
/*global HEAP32*/
/*global new_*/
/*global createNamedFunction*/
/*global readLatin1String, writeStringToMemory*/
/*global requireRegisteredType, throwBindingError, runDestructors*/
/*jslint sub:true*/ /* The symbols 'fromWireType' and 'toWireType' must be accessed via array notation to be closure-safe since craftInvokerFunction crafts functions as strings that can't be closured. */

var Module = Module || {};

var _emval_handle_array = [{}]; // reserve zero
var _emval_free_list = [];

// Public JS API

/** @expose */
Module.count_emval_handles = function() {
    var count = 0;
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            ++count;
        }
    }
    return count;
};

/** @expose */
Module.get_first_emval = function() {
    for (var i = 1; i < _emval_handle_array.length; ++i) {
        if (_emval_handle_array[i] !== undefined) {
            return _emval_handle_array[i];
        }
    }
    return null;
};

// Private C++ API

var _emval_symbols = {}; // address -> string

function __emval_register_symbol(address) {
    _emval_symbols[address] = readLatin1String(address);
}

function getStringOrSymbol(address) {
    var symbol = _emval_symbols[address];
    if (symbol === undefined) {
        return readLatin1String(address);
    } else {
        return symbol;
    }
}

function requireHandle(handle) {
    if (!handle) {
        throwBindingError('Cannot use deleted val. handle = ' + handle);
    }
    return _emval_handle_array[handle].value;
}

function __emval_register(value) {
    var handle = _emval_free_list.length ?
        _emval_free_list.pop() :
        _emval_handle_array.length;

    _emval_handle_array[handle] = {refcount: 1, value: value};
    return handle;
}

function __emval_incref(handle) {
    if (handle) {
        _emval_handle_array[handle].refcount += 1;
    }
}

function __emval_decref(handle) {
    if (handle && 0 === --_emval_handle_array[handle].refcount) {
        _emval_handle_array[handle] = undefined;
        _emval_free_list.push(handle);
    }
}

function __emval_run_destructors(handle) {
    var destructors = _emval_handle_array[handle].value;
    runDestructors(destructors);
    __emval_decref(handle);
}

function __emval_new_array() {
    return __emval_register([]);
}

function __emval_new_object() {
    return __emval_register({});
}

function __emval_undefined() {
    return __emval_register(undefined);
}

function __emval_null() {
    return __emval_register(null);
}

function __emval_new_cstring(v) {
    return __emval_register(getStringOrSymbol(v));
}

function __emval_take_value(type, argv) {
    type = requireRegisteredType(type, '_emval_take_value');
    var v = type['readValueFromPointer'](argv);
    return __emval_register(v);
}

var __newers = {}; // arity -> function


function craftEmvalAllocator(argCount) {
    /*This function returns a new function that looks like this:
    function emval_allocator_3(constructor, argTypes, args) {
        var argType0 = requireRegisteredType(HEAP32[(argTypes >> 2)], "parameter 0");
        var arg0 = argType0.readValueFromPointer(args);
        var argType1 = requireRegisteredType(HEAP32[(argTypes >> 2) + 1], "parameter 1");
        var arg1 = argType1.readValueFromPointer(args + 8);
        var argType2 = requireRegisteredType(HEAP32[(argTypes >> 2) + 2], "parameter 2");
        var arg2 = argType2.readValueFromPointer(args + 16);
        var obj = new constructor(arg0, arg1, arg2);
        return __emval_register(obj);
    } */

    var argsList = "";
    for(var i = 0; i < argCount; ++i) {
        argsList += (i!==0?", ":"")+"arg"+i; // 'arg0, arg1, ..., argn'
    }

    var functionBody =
        "return function emval_allocator_"+argCount+"(constructor, argTypes, args) {\n";

    for(var i = 0; i < argCount; ++i) {
        functionBody +=
            "var argType"+i+" = requireRegisteredType(HEAP32[(argTypes >> 2) + "+i+"], \"parameter "+i+"\");\n" +
            "var arg"+i+" = argType"+i+".readValueFromPointer(args);\n" +
            "args += argType"+i+".argPackAdvance;\n";
    }
    functionBody +=
        "var obj = new constructor("+argsList+");\n" +
        "return __emval_register(obj);\n" +
        "}\n";

    /*jshint evil:true*/
    return (new Function("requireRegisteredType", "HEAP32", "__emval_register", functionBody))(
        requireRegisteredType, HEAP32, __emval_register);
}

function __emval_new(handle, argCount, argTypes, args) {
    handle = requireHandle(handle);

    var newer = __newers[argCount];
    if (!newer) {
        newer = craftEmvalAllocator(argCount);
        __newers[argCount] = newer;
    }

    return newer(handle, argTypes, args);
}

// appease jshint (technically this code uses eval)
var global = (function(){return Function;})()('return this')();

function __emval_get_global(name) {
    name = getStringOrSymbol(name);
    return __emval_register(global[name]);
}

function __emval_get_module_property(name) {
    name = getStringOrSymbol(name);
    return __emval_register(Module[name]);
}

function __emval_get_property(handle, key) {
    handle = requireHandle(handle);
    key = requireHandle(key);
    return __emval_register(handle[key]);
}

function __emval_set_property(handle, key, value) {
    handle = requireHandle(handle);
    key = requireHandle(key);
    value = requireHandle(value);
    handle[key] = value;
}

function __emval_as(handle, returnType, destructorsRef) {
    handle = requireHandle(handle);
    returnType = requireRegisteredType(returnType, 'emval::as');
    var destructors = [];
    var rd = __emval_register(destructors);
    HEAP32[destructorsRef >> 2] = rd;
    return returnType['toWireType'](destructors, handle);
}

function __emval_call(handle, argCount, argTypes, argv) {
    handle = requireHandle(handle);
    var types = lookupTypes(argCount, argTypes);

    var args = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        var type = types[i];
        args[i] = type['readValueFromPointer'](argv);
        argv += type.argPackAdvance;
    }

    var rv = handle.apply(undefined, args);
    return __emval_register(rv);
}

function lookupTypes(argCount, argTypes, argWireTypes) {
    var a = new Array(argCount);
    for (var i = 0; i < argCount; ++i) {
        a[i] = requireRegisteredType(
            HEAP32[(argTypes >> 2) + i],
            "parameter " + i);
    }
    return a;
}

function allocateDestructors(destructorsRef) {
    var destructors = [];
    HEAP32[destructorsRef >> 2] = __emval_register(destructors);
    return destructors;
}

// Leave id 0 undefined.  It's not a big deal, but might be confusing
// to have null be a valid method caller.
var methodCallers = [undefined];

function addMethodCaller(caller) {
    var id = methodCallers.length;
    methodCallers.push(caller);
    return id;
}

function __emval_get_method_caller(argCount, argTypes) {
    var types = lookupTypes(argCount, argTypes);

    var retType = types[0];
    var signatureName = retType.name + "_$" + types.slice(1).map(function (t) { return t.name; }).join("_") + "$";

    var params = ["retType"];
    var args = [retType];

    var argsList = ""; // 'arg0, arg1, arg2, ... , argN'
    for (var i = 0; i < argCount - 1; ++i) {
        argsList += (i !== 0 ? ", " : "") + "arg" + i;
        params.push("argType" + i);
        args.push(types[1 + i]);
    }

    var functionBody =
        "return function (handle, name, destructors, args) {\n";

    for (var i = 0; i < argCount - 1; ++i) {
        functionBody +=
        "    var arg" + i + " = argType" + i + ".readValueFromPointer(args);\n" +
        "    args += argType" + i + ".argPackAdvance;\n";
    }
    functionBody +=
        "    var rv = handle[name](" + argsList + ");\n" +
        "    return retType.toWireType(destructors, rv);\n" +
        "};\n";

    params.push(functionBody);
    var invokerFunction = new_(Function, params).apply(null, args);
    return addMethodCaller(createNamedFunction(signatureName, invokerFunction));
}

function __emval_call_method(caller, handle, methodName, destructorsRef, args) {
    caller = methodCallers[caller];
    handle = requireHandle(handle);
    methodName = getStringOrSymbol(methodName);
    return caller(handle, methodName, allocateDestructors(destructorsRef), args);
}

function __emval_has_function(handle, name) {
    handle = requireHandle(handle);
    name = getStringOrSymbol(name);
    return handle[name] instanceof Function;
}


if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

// shouldRunNow refers to calling main(), not run().
var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}


run();

// {{POST_RUN_ADDITIONS}}






// {{MODULE_ADDITIONS}}



